
ADV2019D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cc4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002788  08012f68  08012f68  00013f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080156f0  080156f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080156f8  080156f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015700  08015700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006d8  24000000  08015704  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006e0  08015ddc  000176e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00020cb8  240046e0  08019ddc  0001b6e0  2**3
                  ALLOC
  9 ._user_heap_stack 00004000  24025398  08019ddc  0001c398  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001b6e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000233a3  00000000  00000000  0001b70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004518  00000000  00000000  0003eab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ac8  00000000  00000000  00042fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014d7  00000000  00000000  00044a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d66e  00000000  00000000  00045f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000270b0  00000000  00000000  000835dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017bb4c  00000000  00000000  000aa68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002261d9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000089c0  00000000  00000000  0022621c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000056  00000000  00000000  0022ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240046e0 	.word	0x240046e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012f4c 	.word	0x08012f4c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240046e4 	.word	0x240046e4
 80002dc:	08012f4c 	.word	0x08012f4c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f011 f884 	bl	8011a60 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f011 fc16 	bl	8012198 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f011 f978 	bl	8011cb0 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000c58 <FFT+0x238>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f010 ff7e 	bl	80119c8 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000c58 <FFT+0x238>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f010 ff1b 	bl	8011930 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8000c60 <FFT+0x240>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size +100];
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000b50:	1e4b      	subs	r3, r1, #1
 8000b52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b56:	460a      	mov	r2, r1
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4690      	mov	r8, r2
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b6a:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6e:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b72:	460a      	mov	r2, r1
 8000b74:	2300      	movs	r3, #0
 8000b76:	4614      	mov	r4, r2
 8000b78:	461d      	mov	r5, r3
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	f04f 0300 	mov.w	r3, #0
 8000b82:	01eb      	lsls	r3, r5, #7
 8000b84:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b88:	01e2      	lsls	r2, r4, #7
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	3307      	adds	r3, #7
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	ebad 0d03 	sub.w	sp, sp, r3
 8000b98:	466b      	mov	r3, sp
 8000b9a:	3307      	adds	r3, #7
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X =A;
 8000ba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bac:	e027      	b.n	8000bfe <FFT+0x1de>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000bae:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fec0 	bl	8000938 <rev>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	ed93 7b00 	vldr	d7, [r3]
 8000bc4:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000c60 <FFT+0x240>
 8000bc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bcc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4413      	add	r3, r2
 8000bd6:	ed83 7b00 	vstr	d7, [r3]
 8000bda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	f103 0108 	add.w	r1, r3, #8
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbd2      	blt.n	8000bae <FFT+0x18e>
    }
    
    int s , m , k , j;
    double complex omega , t , u;

    for(s = 1 ; s <size ; s*=2)
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0e:	e0f8      	b.n	8000e02 <FFT+0x3e2>
    {
        m = s*2;
 8000c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k < size ; k+=m)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1e:	e0e5      	b.n	8000dec <FFT+0x3cc>
        {
            omega = 1;
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <FFT+0x248>)
 8000c26:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2 ; j++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <FFT+0x248>)
 8000c4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c52:	e0ba      	b.n	8000dca <FFT+0x3aa>
 8000c54:	f3af 8000 	nop.w
 8000c58:	54442d18 	.word	0x54442d18
 8000c5c:	401921fb 	.word	0x401921fb
	...
 8000c68:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c74:	441a      	add	r2, r3
 8000c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da00      	bge.n	8000c7e <FFT+0x25e>
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c84:	011a      	lsls	r2, r3, #4
 8000c86:	440a      	add	r2, r1
 8000c88:	ed92 7b00 	vldr	d7, [r2]
 8000c8c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	4413      	add	r3, r2
 8000c92:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c96:	eeb0 3b46 	vmov.f64	d3, d6
 8000c9a:	eeb0 2b47 	vmov.f64	d2, d7
 8000c9e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ca2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000ca6:	f7ff fb8b 	bl	80003c0 <__muldc3>
 8000caa:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000cae:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000cb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cc2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cca:	18d1      	adds	r1, r2, r3
 8000ccc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cce:	010b      	lsls	r3, r1, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cdc:	010b      	lsls	r3, r1, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cf0:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cf4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d00:	4413      	add	r3, r2
 8000d02:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d06:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d0e:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d12:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d16:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d1c:	011a      	lsls	r2, r3, #4
 8000d1e:	440a      	add	r2, r1
 8000d20:	ed82 6b00 	vstr	d6, [r2]
 8000d24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4413      	add	r3, r2
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d30:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d38:	441a      	add	r2, r3
 8000d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da00      	bge.n	8000d42 <FFT+0x322>
 8000d40:	3301      	adds	r3, #1
 8000d42:	105b      	asrs	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d4a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d52:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d56:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d5e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d60:	011a      	lsls	r2, r3, #4
 8000d62:	440a      	add	r2, r1
 8000d64:	ed82 6b00 	vstr	d6, [r2]
 8000d68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3308      	adds	r3, #8
 8000d70:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d80:	011a      	lsls	r2, r3, #4
 8000d82:	440a      	add	r2, r1
 8000d84:	ed92 7b00 	vldr	d7, [r2]
 8000d88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4413      	add	r3, r2
 8000d90:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d94:	eeb0 3b46 	vmov.f64	d3, d6
 8000d98:	eeb0 2b47 	vmov.f64	d2, d7
 8000d9c:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000da0:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000da4:	f7ff fb0c 	bl	80003c0 <__muldc3>
 8000da8:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000dac:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000db0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000db4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000dbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2 ; j++)
 8000dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da00      	bge.n	8000dd2 <FFT+0x3b2>
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	105b      	asrs	r3, r3, #1
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f6ff af46 	blt.w	8000c6c <FFT+0x24c>
        for ( k = 0 ; k < size ; k+=m)
 8000de0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000de6:	4413      	add	r3, r2
 8000de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000dec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	f6ff af14 	blt.w	8000c20 <FFT+0x200>
    for(s = 1 ; s <size ; s*=2)
 8000df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f6ff af01 	blt.w	8000c10 <FFT+0x1f0>
            } 
        }
    }
    return X;
 8000e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e10:	46b5      	mov	sp, r6

}
 8000e12:	4618      	mov	r0, r3
 8000e14:	37a4      	adds	r7, #164	@ 0xa4
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e20 <FFT_Mag>:

double * FFT_Mag(int size , double x[])
{
 8000e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e24:	b08d      	sub	sp, #52	@ 0x34
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
 8000e2c:	466b      	mov	r3, sp
 8000e2e:	461e      	mov	r6, r3
    double A[size +100];
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000e36:	1e4b      	subs	r3, r1, #1
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4690      	mov	r8, r2
 8000e40:	4699      	mov	r9, r3
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000e4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000e52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000e56:	460a      	mov	r2, r1
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	01ab      	lsls	r3, r5, #6
 8000e68:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000e6c:	01a2      	lsls	r2, r4, #6
 8000e6e:	460b      	mov	r3, r1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	3307      	adds	r3, #7
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7c:	466b      	mov	r3, sp
 8000e7e:	3307      	adds	r3, #7
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    double cr , ci;
    double complex*X = FFT(size , x);
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fdc9 	bl	8000a20 <FFT>
 8000e8e:	6238      	str	r0, [r7, #32]
    for (int i = 0 ; i < size ; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e94:	e035      	b.n	8000f02 <FFT_Mag+0xe2>
    {
        cr = (creal(X[i]) * creal(X[i]));
 8000e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	6a3a      	ldr	r2, [r7, #32]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	ed93 6b00 	vldr	d6, [r3]
 8000ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	ed93 7b00 	vldr	d7, [r3]
 8000eae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000eb2:	ed87 7b04 	vstr	d7, [r7, #16]
        ci = (cimag(X[i]) * cimag(X[i]));
 8000eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	6a3a      	ldr	r2, [r7, #32]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	ed93 6b02 	vldr	d6, [r3, #8]
 8000ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	6a3a      	ldr	r2, [r7, #32]
 8000ec8:	4413      	add	r3, r2
 8000eca:	ed93 7b02 	vldr	d7, [r3, #8]
 8000ece:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed2:	ed87 7b02 	vstr	d7, [r7, #8]
        A[i] = (cr + ci)/size;
 8000ed6:	ed97 6b04 	vldr	d6, [r7, #16]
 8000eda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ede:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000eec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0 ; i < size ; i++)
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	3301      	adds	r3, #1
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbc5      	blt.n	8000e96 <FFT_Mag+0x76>
    }
    double* a = A;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	61fb      	str	r3, [r7, #28]
    return a;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	46b5      	mov	sp, r6
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3734      	adds	r7, #52	@ 0x34
 8000f16:	46bd      	mov	sp, r7
 8000f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <Blackman>:

    return p;
}

double* Blackman(int size , int left , int right , double x[])
{
 8000f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f24:	ed2d 8b04 	vpush	{d8-d9}
 8000f28:	b089      	sub	sp, #36	@ 0x24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	466b      	mov	r3, sp
 8000f36:	461e      	mov	r6, r3
    double A[size  +100];
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000f3e:	1e4b      	subs	r3, r1, #1
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	460a      	mov	r2, r1
 8000f44:	2300      	movs	r3, #0
 8000f46:	4690      	mov	r8, r2
 8000f48:	4699      	mov	r9, r3
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000f56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000f5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000f5e:	460a      	mov	r2, r1
 8000f60:	2300      	movs	r3, #0
 8000f62:	4614      	mov	r4, r2
 8000f64:	461d      	mov	r5, r3
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	01ab      	lsls	r3, r5, #6
 8000f70:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000f74:	01a2      	lsls	r2, r4, #6
 8000f76:	460b      	mov	r3, r1
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	ebad 0d03 	sub.w	sp, sp, r3
 8000f84:	466b      	mov	r3, sp
 8000f86:	3307      	adds	r3, #7
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
    double *a = A ;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	613b      	str	r3, [r7, #16]

    for (int i = 0 ; i < size ; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e06b      	b.n	8001070 <Blackman+0x150>
    {
    	if (i < right && i >=  left)
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	da5a      	bge.n	8001056 <Blackman+0x136>
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	db56      	blt.n	8001056 <Blackman+0x136>
    	{
    		A[i] = 10* x[i] * ( 0.42 + 0.08* cos(4*M_PI*(i - left )/(right - left - 1)) - 0.5*cos(2*M_PI*(i - left )/(right - left - 1)));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	ed93 7b00 	vldr	d7, [r3]
 8000fb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000fb8:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fca:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8001090 <Blackman+0x170>
 8000fce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fe2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000fe6:	eeb0 0b45 	vmov.f64	d0, d5
 8000fea:	f010 fca1 	bl	8011930 <cos>
 8000fee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ff2:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8001098 <Blackman+0x178>
 8000ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ffa:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80010a0 <Blackman+0x180>
 8000ffe:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001010:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80010a8 <Blackman+0x188>
 8001014:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	3b01      	subs	r3, #1
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001028:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800102c:	eeb0 0b45 	vmov.f64	d0, d5
 8001030:	f010 fc7e 	bl	8011930 <cos>
 8001034:	eeb0 7b40 	vmov.f64	d7, d0
 8001038:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800103c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001040:	ee39 7b47 	vsub.f64	d7, d9, d7
 8001044:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	ed83 7b00 	vstr	d7, [r3]
 8001054:	e009      	b.n	800106a <Blackman+0x14a>
    	}
    	else
    	{
    		A[i] = 0;
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	18d1      	adds	r1, r2, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	db8f      	blt.n	8000f98 <Blackman+0x78>
    	}
    }
    return a;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	46b5      	mov	sp, r6
}
 800107c:	4618      	mov	r0, r3
 800107e:	3724      	adds	r7, #36	@ 0x24
 8001080:	46bd      	mov	sp, r7
 8001082:	ecbd 8b04 	vpop	{d8-d9}
 8001086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	54442d18 	.word	0x54442d18
 8001094:	402921fb 	.word	0x402921fb
 8001098:	47ae147b 	.word	0x47ae147b
 800109c:	3fb47ae1 	.word	0x3fb47ae1
 80010a0:	ae147ae1 	.word	0xae147ae1
 80010a4:	3fdae147 	.word	0x3fdae147
 80010a8:	54442d18 	.word	0x54442d18
 80010ac:	401921fb 	.word	0x401921fb

080010b0 <AD9833_Delay>:




void AD9833_Delay(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < 1; i++);
 80010b6:	2300      	movs	r3, #0
 80010b8:	80fb      	strh	r3, [r7, #6]
 80010ba:	e002      	b.n	80010c2 <AD9833_Delay+0x12>
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	3301      	adds	r3, #1
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f9      	beq.n	80010bc <AD9833_Delay+0xc>
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <AD9833_Write>:



void AD9833_Write(unsigned int TxData, unsigned char channel)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
	unsigned char i;

	SCK_1();
 80010e4:	2201      	movs	r2, #1
 80010e6:	2108      	movs	r1, #8
 80010e8:	4826      	ldr	r0, [pc, #152]	@ (8001184 <AD9833_Write+0xac>)
 80010ea:	f006 fc29 	bl	8007940 <HAL_GPIO_WritePin>
	//AD9833_Delay();
	if (channel) {
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00a      	beq.n	800110a <AD9833_Write+0x32>
		FSY1_1();
 80010f4:	2201      	movs	r2, #1
 80010f6:	2102      	movs	r1, #2
 80010f8:	4822      	ldr	r0, [pc, #136]	@ (8001184 <AD9833_Write+0xac>)
 80010fa:	f006 fc21 	bl	8007940 <HAL_GPIO_WritePin>
		//AD9833_Delay();
		FSY1_0();
 80010fe:	2200      	movs	r2, #0
 8001100:	2102      	movs	r1, #2
 8001102:	4820      	ldr	r0, [pc, #128]	@ (8001184 <AD9833_Write+0xac>)
 8001104:	f006 fc1c 	bl	8007940 <HAL_GPIO_WritePin>
 8001108:	e009      	b.n	800111e <AD9833_Write+0x46>
		//AD9833_Delay();
	}
	else {
		FSY0_1();
 800110a:	2201      	movs	r2, #1
 800110c:	2110      	movs	r1, #16
 800110e:	481d      	ldr	r0, [pc, #116]	@ (8001184 <AD9833_Write+0xac>)
 8001110:	f006 fc16 	bl	8007940 <HAL_GPIO_WritePin>
		//AD9833_Delay();
		FSY0_0();
 8001114:	2200      	movs	r2, #0
 8001116:	2110      	movs	r1, #16
 8001118:	481a      	ldr	r0, [pc, #104]	@ (8001184 <AD9833_Write+0xac>)
 800111a:	f006 fc11 	bl	8007940 <HAL_GPIO_WritePin>
		//AD9833_Delay();
	}
	for(i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e023      	b.n	800116c <AD9833_Write+0x94>
	{
		if (TxData & 0x8000)//
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <AD9833_Write+0x62>
			DAT_1();
 800112e:	2201      	movs	r2, #1
 8001130:	2104      	movs	r1, #4
 8001132:	4814      	ldr	r0, [pc, #80]	@ (8001184 <AD9833_Write+0xac>)
 8001134:	f006 fc04 	bl	8007940 <HAL_GPIO_WritePin>
 8001138:	e004      	b.n	8001144 <AD9833_Write+0x6c>
		else
			DAT_0();
 800113a:	2200      	movs	r2, #0
 800113c:	2104      	movs	r1, #4
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <AD9833_Write+0xac>)
 8001140:	f006 fbfe 	bl	8007940 <HAL_GPIO_WritePin>

		AD9833_Delay();
 8001144:	f7ff ffb4 	bl	80010b0 <AD9833_Delay>
		SCK_0();
 8001148:	2200      	movs	r2, #0
 800114a:	2108      	movs	r1, #8
 800114c:	480d      	ldr	r0, [pc, #52]	@ (8001184 <AD9833_Write+0xac>)
 800114e:	f006 fbf7 	bl	8007940 <HAL_GPIO_WritePin>
		AD9833_Delay();
 8001152:	f7ff ffad 	bl	80010b0 <AD9833_Delay>
		SCK_1();
 8001156:	2201      	movs	r2, #1
 8001158:	2108      	movs	r1, #8
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <AD9833_Write+0xac>)
 800115c:	f006 fbf0 	bl	8007940 <HAL_GPIO_WritePin>

		TxData <<= 1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	607b      	str	r3, [r7, #4]
	for(i = 0; i < 16; i++)
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	3301      	adds	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d9d8      	bls.n	8001124 <AD9833_Write+0x4c>
	}
	FSY0_1();
 8001172:	2201      	movs	r2, #1
 8001174:	2110      	movs	r1, #16
 8001176:	4803      	ldr	r0, [pc, #12]	@ (8001184 <AD9833_Write+0xac>)
 8001178:	f006 fbe2 	bl	8007940 <HAL_GPIO_WritePin>

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58020c00 	.word	0x58020c00

08001188 <AD9833_WaveSetting>:




void AD9833_WaveSetting(double Freq,unsigned int Freq_SFR,unsigned int WaveMode,unsigned int Phase, unsigned char channel )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	@ 0x38
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	70fb      	strb	r3, [r7, #3]
		int frequence_LSB,frequence_MSB,Phs_data;
		double   frequence_mid,frequence_DATA;
		long int frequence_hex;

		frequence_mid=268435456/25;
 800119a:	a353      	add	r3, pc, #332	@ (adr r3, 80012e8 <AD9833_WaveSetting+0x160>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		frequence_DATA=Freq;
 80011a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		frequence_DATA=frequence_DATA/1000000;
 80011ac:	ed97 6b08 	vldr	d6, [r7, #32]
 80011b0:	ed9f 5b4b 	vldr	d5, [pc, #300]	@ 80012e0 <AD9833_WaveSetting+0x158>
 80011b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011b8:	ed87 7b08 	vstr	d7, [r7, #32]
		frequence_DATA=frequence_DATA*frequence_mid;
 80011bc:	ed97 6b08 	vldr	d6, [r7, #32]
 80011c0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80011c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80011c8:	ed87 7b08 	vstr	d7, [r7, #32]
		frequence_hex=frequence_DATA;
 80011cc:	ed97 7b08 	vldr	d7, [r7, #32]
 80011d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011d4:	ee17 3a90 	vmov	r3, s15
 80011d8:	61fb      	str	r3, [r7, #28]
		frequence_LSB=frequence_hex;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
		frequence_LSB=frequence_LSB&0x3fff;
 80011de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
		frequence_MSB=frequence_hex>>14;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	139b      	asrs	r3, r3, #14
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
		frequence_MSB=frequence_MSB&0x3fff;
 80011ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011f2:	633b      	str	r3, [r7, #48]	@ 0x30

		Phs_data=Phase|0xC000;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011fa:	61bb      	str	r3, [r7, #24]
		AD9833_Write(0x0100, channel);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	4619      	mov	r1, r3
 8001200:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001204:	f7ff ff68 	bl	80010d8 <AD9833_Write>
		AD9833_Write(0x2100, channel);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4619      	mov	r1, r3
 800120c:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8001210:	f7ff ff62 	bl	80010d8 <AD9833_Write>

		if(Freq_SFR==0)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d11f      	bne.n	800125a <AD9833_WaveSetting+0xd2>
		{
		 	frequence_LSB=frequence_LSB|0x4000;
 800121a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
		 	frequence_MSB=frequence_MSB|0x4000;
 8001222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001228:	633b      	str	r3, [r7, #48]	@ 0x30

			AD9833_Write(frequence_LSB, channel);
 800122a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122c:	78fa      	ldrb	r2, [r7, #3]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff51 	bl	80010d8 <AD9833_Write>
			AD9833_Write(frequence_MSB, channel);
 8001236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff4b 	bl	80010d8 <AD9833_Write>
			AD9833_Write(Phs_data, channel);
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	78fa      	ldrb	r2, [r7, #3]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff45 	bl	80010d8 <AD9833_Write>
			AD9833_Write(0x2000 , channel);
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001256:	f7ff ff3f 	bl	80010d8 <AD9833_Write>
	    }
		if(Freq_SFR==1)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11f      	bne.n	80012a0 <AD9833_WaveSetting+0x118>
		{
			 frequence_LSB=frequence_LSB|0x8000;
 8001260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
			 frequence_MSB=frequence_MSB|0x8000;
 8001268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800126a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
			AD9833_Write(frequence_LSB, channel);
 8001270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff2e 	bl	80010d8 <AD9833_Write>
			AD9833_Write(frequence_MSB, channel);
 800127c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800127e:	78fa      	ldrb	r2, [r7, #3]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff28 	bl	80010d8 <AD9833_Write>
			AD9833_Write(Phs_data, channel);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	78fa      	ldrb	r2, [r7, #3]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff22 	bl	80010d8 <AD9833_Write>
			AD9833_Write(0x2800 , channel);
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	4619      	mov	r1, r3
 8001298:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800129c:	f7ff ff1c 	bl	80010d8 <AD9833_Write>
		}

		if(WaveMode==TRI_WAVE)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <AD9833_WaveSetting+0x12a>
		 	AD9833_Write(0x2002, channel);
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f242 0002 	movw	r0, #8194	@ 0x2002
 80012ae:	f7ff ff13 	bl	80010d8 <AD9833_Write>
		if(WaveMode==SQU_WAVE)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d105      	bne.n	80012c4 <AD9833_WaveSetting+0x13c>
			AD9833_Write(0x2028, channel);
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	4619      	mov	r1, r3
 80012bc:	f242 0028 	movw	r0, #8232	@ 0x2028
 80012c0:	f7ff ff0a 	bl	80010d8 <AD9833_Write>
		if(WaveMode==SIN_WAVE)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <AD9833_WaveSetting+0x14e>
			AD9833_Write(0x2000, channel);
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012d2:	f7ff ff01 	bl	80010d8 <AD9833_Write>

}
 80012d6:	bf00      	nop
 80012d8:	3738      	adds	r7, #56	@ 0x38
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	00000000 	.word	0x00000000
 80012e4:	412e8480 	.word	0x412e8480
 80012e8:	40000000 	.word	0x40000000
 80012ec:	41647ae1 	.word	0x41647ae1

080012f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]
 8001312:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001314:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001316:	4a31      	ldr	r2, [pc, #196]	@ (80013dc <MX_ADC1_Init+0xec>)
 8001318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001320:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001326:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800132c:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 800132e:	2204      	movs	r2, #4
 8001330:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001338:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800133e:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001340:	2201      	movs	r2, #1
 8001342:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800134a:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 800134c:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 800135c:	2203      	movs	r2, #3
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001374:	4818      	ldr	r0, [pc, #96]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001376:	f001 fe83 	bl	8003080 <HAL_ADC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001380:	f000 ff30 	bl	80021e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 8001390:	f003 f9c4 	bl	800471c <HAL_ADCEx_MultiModeConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800139a:	f000 ff23 	bl	80021e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_ADC1_Init+0xf0>)
 80013a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a2:	2306      	movs	r3, #6
 80013a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013b0:	2304      	movs	r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_ADC1_Init+0xe8>)
 80013c2:	f002 fa57 	bl	8003874 <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80013cc:	f000 ff0a 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	240046fc 	.word	0x240046fc
 80013dc:	40022000 	.word	0x40022000
 80013e0:	0c900008 	.word	0x0c900008

080013e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ba      	sub	sp, #232	@ 0xe8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22c0      	movs	r2, #192	@ 0xc0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00b ff34 	bl	800d272 <memset>
  if(adcHandle->Instance==ADC1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a43      	ldr	r2, [pc, #268]	@ (800151c <HAL_ADC_MspInit+0x138>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d17e      	bne.n	8001512 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001414:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001420:	2319      	movs	r3, #25
 8001422:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8001424:	23c8      	movs	r3, #200	@ 0xc8
 8001426:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 20;
 8001428:	2314      	movs	r3, #20
 800142a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4618      	mov	r0, r3
 800144c:	f007 fbdc 	bl	8008c08 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001456:	f000 fec5 	bl	80021e4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <HAL_ADC_MspInit+0x13c>)
 800145c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001460:	4a2f      	ldr	r2, [pc, #188]	@ (8001520 <HAL_ADC_MspInit+0x13c>)
 8001462:	f043 0320 	orr.w	r3, r3, #32
 8001466:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800146a:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <HAL_ADC_MspInit+0x13c>)
 800146c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <HAL_ADC_MspInit+0x13c>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147e:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <HAL_ADC_MspInit+0x13c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_ADC_MspInit+0x13c>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001496:	2340      	movs	r3, #64	@ 0x40
 8001498:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149c:	2303      	movs	r3, #3
 800149e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014ac:	4619      	mov	r1, r3
 80014ae:	481d      	ldr	r0, [pc, #116]	@ (8001524 <HAL_ADC_MspInit+0x140>)
 80014b0:	f005 ff8c 	bl	80073cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014b6:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <HAL_ADC_MspInit+0x148>)
 80014b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014bc:	2209      	movs	r2, #9
 80014be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014e4:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014f6:	480c      	ldr	r0, [pc, #48]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 80014f8:	f003 fcda 	bl	8004eb0 <HAL_DMA_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8001502:	f000 fe6f 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 800150a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_ADC_MspInit+0x144>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	37e8      	adds	r7, #232	@ 0xe8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000
 8001520:	58024400 	.word	0x58024400
 8001524:	58020000 	.word	0x58020000
 8001528:	24004760 	.word	0x24004760
 800152c:	40020010 	.word	0x40020010

08001530 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <HAL_ADC_MspDeInit+0x3c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d110      	bne.n	8001564 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_ADC_MspDeInit+0x40>)
 8001544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001548:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <HAL_ADC_MspDeInit+0x40>)
 800154a:	f023 0320 	bic.w	r3, r3, #32
 800154e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8001552:	2140      	movs	r1, #64	@ 0x40
 8001554:	4807      	ldr	r0, [pc, #28]	@ (8001574 <HAL_ADC_MspDeInit+0x44>)
 8001556:	f006 f8e9 	bl	800772c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4618      	mov	r0, r3
 8001560:	f004 f802 	bl	8005568 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40022000 	.word	0x40022000
 8001570:	58024400 	.word	0x58024400
 8001574:	58020000 	.word	0x58020000

08001578 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2224      	movs	r2, #36	@ 0x24
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f00b fe74 	bl	800d272 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_DAC1_Init+0x5c>)
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <MX_DAC1_Init+0x60>)
 800158e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001590:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <MX_DAC1_Init+0x5c>)
 8001592:	f003 fb2d 	bl	8004bf0 <HAL_DAC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800159c:	f000 fe22 	bl	80021e4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80015a4:	2302      	movs	r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80015a8:	2302      	movs	r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2210      	movs	r2, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <MX_DAC1_Init+0x5c>)
 80015bc:	f003 fb3a 	bl	8004c34 <HAL_DAC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 fe0d 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	240047d8 	.word	0x240047d8
 80015d8:	40007400 	.word	0x40007400

080015dc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	@ 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a30      	ldr	r2, [pc, #192]	@ (80016bc <HAL_DAC_MspInit+0xe0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d159      	bne.n	80016b2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_DAC_MspInit+0xe4>)
 8001600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001604:	4a2e      	ldr	r2, [pc, #184]	@ (80016c0 <HAL_DAC_MspInit+0xe4>)
 8001606:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800160a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800160e:	4b2c      	ldr	r3, [pc, #176]	@ (80016c0 <HAL_DAC_MspInit+0xe4>)
 8001610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b28      	ldr	r3, [pc, #160]	@ (80016c0 <HAL_DAC_MspInit+0xe4>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001622:	4a27      	ldr	r2, [pc, #156]	@ (80016c0 <HAL_DAC_MspInit+0xe4>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162c:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_DAC_MspInit+0xe4>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800163a:	2320      	movs	r3, #32
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163e:	2303      	movs	r3, #3
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	481d      	ldr	r0, [pc, #116]	@ (80016c4 <HAL_DAC_MspInit+0xe8>)
 800164e:	f005 febd 	bl	80073cc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 8001654:	4a1d      	ldr	r2, [pc, #116]	@ (80016cc <HAL_DAC_MspInit+0xf0>)
 8001656:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 800165a:	2244      	movs	r2, #68	@ 0x44
 800165c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 8001660:	2240      	movs	r2, #64	@ 0x40
 8001662:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 800166c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001670:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 8001674:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001678:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 800167c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001680:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 8001684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001688:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001696:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 8001698:	f003 fc0a 	bl	8004eb0 <HAL_DMA_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80016a2:	f000 fd9f 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	4a06      	ldr	r2, [pc, #24]	@ (80016c8 <HAL_DAC_MspInit+0xec>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	@ 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40007400 	.word	0x40007400
 80016c0:	58024400 	.word	0x58024400
 80016c4:	58020000 	.word	0x58020000
 80016c8:	240047ec 	.word	0x240047ec
 80016cc:	40020028 	.word	0x40020028

080016d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_DMA_Init+0x4c>)
 80016d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <MX_DMA_Init+0x4c>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <MX_DMA_Init+0x4c>)
 80016e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	200b      	movs	r0, #11
 80016fa:	f003 f9c8 	bl	8004a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016fe:	200b      	movs	r0, #11
 8001700:	f003 f9df 	bl	8004ac2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	200c      	movs	r0, #12
 800170a:	f003 f9c0 	bl	8004a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800170e:	200c      	movs	r0, #12
 8001710:	f003 f9d7 	bl	8004ac2 <HAL_NVIC_EnableIRQ>

}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	58024400 	.word	0x58024400

08001720 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173c:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <MX_GPIO_Init+0xbc>)
 800173e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001746:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175a:	4a20      	ldr	r2, [pc, #128]	@ (80017dc <MX_GPIO_Init+0xbc>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001764:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001778:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <MX_GPIO_Init+0xbc>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001796:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <MX_GPIO_Init+0xbc>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <MX_GPIO_Init+0xbc>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	211e      	movs	r1, #30
 80017b2:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 80017b4:	f006 f8c4 	bl	8007940 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80017b8:	231e      	movs	r3, #30
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <MX_GPIO_Init+0xc0>)
 80017d0:	f005 fdfc 	bl	80073cc <HAL_GPIO_Init>

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	@ 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58020c00 	.word	0x58020c00

080017e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <MX_I2C1_Init+0x78>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <MX_I2C1_Init+0x7c>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_I2C1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181e:	480e      	ldr	r0, [pc, #56]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001820:	f006 f8a8 	bl	8007974 <HAL_I2C_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800182a:	f000 fcdb 	bl	80021e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4809      	ldr	r0, [pc, #36]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001832:	f006 f92f 	bl	8007a94 <HAL_I2CEx_ConfigAnalogFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800183c:	f000 fcd2 	bl	80021e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001844:	f006 f971 	bl	8007b2a <HAL_I2CEx_ConfigDigitalFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800184e:	f000 fcc9 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24004864 	.word	0x24004864
 800185c:	40005400 	.word	0x40005400
 8001860:	00b03fdb 	.word	0x00b03fdb

08001864 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0ba      	sub	sp, #232	@ 0xe8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	22c0      	movs	r2, #192	@ 0xc0
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f00b fcf4 	bl	800d272 <memset>
  if(i2cHandle->Instance==I2C1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a26      	ldr	r2, [pc, #152]	@ (8001928 <HAL_I2C_MspInit+0xc4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d145      	bne.n	8001920 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001894:	f04f 0208 	mov.w	r2, #8
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 f9ac 	bl	8008c08 <HAL_RCCEx_PeriphCLKConfig>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80018b6:	f000 fc95 	bl	80021e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <HAL_I2C_MspInit+0xc8>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_I2C_MspInit+0xc8>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_I2C_MspInit+0xc8>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d8:	23c0      	movs	r3, #192	@ 0xc0
 80018da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018de:	2312      	movs	r3, #18
 80018e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f0:	2304      	movs	r3, #4
 80018f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018fa:	4619      	mov	r1, r3
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <HAL_I2C_MspInit+0xcc>)
 80018fe:	f005 fd65 	bl	80073cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_I2C_MspInit+0xc8>)
 8001904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001908:	4a08      	ldr	r2, [pc, #32]	@ (800192c <HAL_I2C_MspInit+0xc8>)
 800190a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800190e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_I2C_MspInit+0xc8>)
 8001914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001918:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001920:	bf00      	nop
 8001922:	37e8      	adds	r7, #232	@ 0xe8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40005400 	.word	0x40005400
 800192c:	58024400 	.word	0x58024400
 8001930:	58020400 	.word	0x58020400

08001934 <adc_init>:
double *p = P;
double *X;
int flag = 0;

void adc_init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800193c:	220b      	movs	r2, #11
 800193e:	4920      	ldr	r1, [pc, #128]	@ (80019c0 <adc_init+0x8c>)
 8001940:	4820      	ldr	r0, [pc, #128]	@ (80019c4 <adc_init+0x90>)
 8001942:	f00a fa5d 	bl	800be00 <HAL_UART_Transmit>
	MX_ADC1_Init();
 8001946:	f7ff fcd3 	bl	80012f0 <MX_ADC1_Init>
	HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f001 f930 	bl	8002bb0 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001950:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001954:	2100      	movs	r1, #0
 8001956:	481c      	ldr	r0, [pc, #112]	@ (80019c8 <adc_init+0x94>)
 8001958:	f002 fe7c 	bl	8004654 <HAL_ADCEx_Calibration_Start>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <adc_init+0x40>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8001962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001966:	222f      	movs	r2, #47	@ 0x2f
 8001968:	4918      	ldr	r1, [pc, #96]	@ (80019cc <adc_init+0x98>)
 800196a:	4816      	ldr	r0, [pc, #88]	@ (80019c4 <adc_init+0x90>)
 800196c:	f00a fa48 	bl	800be00 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001970:	f000 fc38 	bl	80021e4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH_HIGH) != HAL_OK)
 8001974:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001978:	4915      	ldr	r1, [pc, #84]	@ (80019d0 <adc_init+0x9c>)
 800197a:	4813      	ldr	r0, [pc, #76]	@ (80019c8 <adc_init+0x94>)
 800197c:	f001 fea2 	bl	80036c4 <HAL_ADC_Start_DMA>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d008      	beq.n	8001998 <adc_init+0x64>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800198a:	2225      	movs	r2, #37	@ 0x25
 800198c:	4911      	ldr	r1, [pc, #68]	@ (80019d4 <adc_init+0xa0>)
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <adc_init+0x90>)
 8001990:	f00a fa36 	bl	800be00 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001994:	f000 fc26 	bl	80021e4 <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001998:	480f      	ldr	r0, [pc, #60]	@ (80019d8 <adc_init+0xa4>)
 800199a:	f009 fe8b 	bl	800b6b4 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 800199e:	bf00      	nop
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <adc_init+0xa8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0fa      	beq.n	80019a0 <adc_init+0x6c>
	AdcConvEnd = 0;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <adc_init+0xa8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <adc_init+0x94>)
 80019b2:	f001 fd07 	bl	80033c4 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 80019b6:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <adc_init+0xa4>)
 80019b8:	f009 feec 	bl	800b794 <HAL_TIM_Base_Stop>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	08012f68 	.word	0x08012f68
 80019c4:	24024ff4 	.word	0x24024ff4
 80019c8:	240046fc 	.word	0x240046fc
 80019cc:	08012f74 	.word	0x08012f74
 80019d0:	240006e0 	.word	0x240006e0
 80019d4:	08012fa4 	.word	0x08012fa4
 80019d8:	24024fa8 	.word	0x24024fa8
 80019dc:	240048b8 	.word	0x240048b8

080019e0 <Para_init>:


void Para_init(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 2 ; i ++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	e011      	b.n	8001a10 <Para_init+0x30>
		  {
			  max[i] = 0;
 80019ec:	4a17      	ldr	r2, [pc, #92]	@ (8001a4c <Para_init+0x6c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	18d1      	adds	r1, r2, r3
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c1 2300 	strd	r2, r3, [r1]
			  max_index[i] = 0;
 8001a00:	4a13      	ldr	r2, [pc, #76]	@ (8001a50 <Para_init+0x70>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2100      	movs	r1, #0
 8001a06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 2 ; i ++)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	ddea      	ble.n	80019ec <Para_init+0xc>

		  }
		  for ( int i = 0 ; i < FO_LENGTH_HIGH ; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	e00c      	b.n	8001a36 <Para_init+0x56>
		  {
			  P[i] = 0;
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <Para_init+0x74>)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	18d1      	adds	r1, r2, r3
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
		  for ( int i = 0 ; i < FO_LENGTH_HIGH ; i++)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a3c:	dbee      	blt.n	8001a1c <Para_init+0x3c>
		  }
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	24000000 	.word	0x24000000
 8001a50:	24024f3c 	.word	0x24024f3c
 8001a54:	24014be0 	.word	0x24014be0

08001a58 <ADC1_Get>:


void ADC1_Get(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

		adc_init();
 8001a5e:	f7ff ff69 	bl	8001934 <adc_init>
		v[0] =  ((double)adc1_data[0]*3.3)/65535 *3;
 8001a62:	4b3b      	ldr	r3, [pc, #236]	@ (8001b50 <ADC1_Get+0xf8>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a6e:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8001b38 <ADC1_Get+0xe0>
 8001a72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a76:	ed9f 5b32 	vldr	d5, [pc, #200]	@ 8001b40 <ADC1_Get+0xe8>
 8001a7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a7e:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001a82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <ADC1_Get+0xfc>)
 8001a88:	ed83 7b00 	vstr	d7, [r3]
		  for (uint16_t temp = 1; temp< FO_LENGTH_HIGH;temp++)
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	80fb      	strh	r3, [r7, #6]
 8001a90:	e02c      	b.n	8001aec <ADC1_Get+0x94>
		  	    {
		  	    	  voltage = ((double)adc1_data[temp]*3.3)/65535 *3 ;
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	4a2e      	ldr	r2, [pc, #184]	@ (8001b50 <ADC1_Get+0xf8>)
 8001a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001aa2:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8001b38 <ADC1_Get+0xe0>
 8001aa6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001aaa:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 8001b40 <ADC1_Get+0xe8>
 8001aae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ab2:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001ab6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aba:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <ADC1_Get+0x100>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]

		  	    	  //v[temp] = voltage - 0.20*v[temp-1];
		  	    	  v[temp] = voltage;
 8001ac0:	88f9      	ldrh	r1, [r7, #6]
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <ADC1_Get+0x100>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	4822      	ldr	r0, [pc, #136]	@ (8001b54 <ADC1_Get+0xfc>)
 8001aca:	00c9      	lsls	r1, r1, #3
 8001acc:	4401      	add	r1, r0
 8001ace:	e9c1 2300 	strd	r2, r3, [r1]
		  	    	  sprintf(str_2 , "%.5f" , v[temp]);
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <ADC1_Get+0xfc>)
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	491f      	ldr	r1, [pc, #124]	@ (8001b5c <ADC1_Get+0x104>)
 8001ae0:	481f      	ldr	r0, [pc, #124]	@ (8001b60 <ADC1_Get+0x108>)
 8001ae2:	f00b fb63 	bl	800d1ac <sprintf>
		  for (uint16_t temp = 1; temp< FO_LENGTH_HIGH;temp++)
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	80fb      	strh	r3, [r7, #6]
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001af2:	d3ce      	bcc.n	8001a92 <ADC1_Get+0x3a>
//		  	    	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
		  	    }

		  //HAL_Delay(100);
		  //X = FFT(FO_LENGTH_HIGH , v) ;
		  s = FFT_ADC1(FO_LENGTH_HIGH , v ) ;
 8001af4:	4917      	ldr	r1, [pc, #92]	@ (8001b54 <ADC1_Get+0xfc>)
 8001af6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001afa:	f000 fb79 	bl	80021f0 <FFT_ADC1>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <ADC1_Get+0x10c>)
 8001b02:	6013      	str	r3, [r2, #0]
		  max_index[1] = (*s) * 360;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <ADC1_Get+0x10c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	ed93 7b00 	vldr	d7, [r3]
 8001b0c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001b48 <ADC1_Get+0xf0>
 8001b10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b14:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b18:	ee17 2a90 	vmov	r2, s15
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <ADC1_Get+0x110>)
 8001b1e:	605a      	str	r2, [r3, #4]
		  s1 = *s;
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <ADC1_Get+0x10c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	4910      	ldr	r1, [pc, #64]	@ (8001b6c <ADC1_Get+0x114>)
 8001b2a:	e9c1 2300 	strd	r2, r3, [r1]
//		  sprintf(str_2 , "%.2f" , *s);
//		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"Frequency:", 10 , HAL_MAX_DELAY);
//		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"kHz\n", 4 , HAL_MAX_DELAY);

}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	66666666 	.word	0x66666666
 8001b3c:	400a6666 	.word	0x400a6666
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40efffe0 	.word	0x40efffe0
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40768000 	.word	0x40768000
 8001b50:	240006e0 	.word	0x240006e0
 8001b54:	240048c0 	.word	0x240048c0
 8001b58:	24024f00 	.word	0x24024f00
 8001b5c:	08012fcc 	.word	0x08012fcc
 8001b60:	24024f08 	.word	0x24024f08
 8001b64:	24000010 	.word	0x24000010
 8001b68:	24024f3c 	.word	0x24024f3c
 8001b6c:	24024f48 	.word	0x24024f48

08001b70 <HandleFFT>:



void HandleFFT(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 5 ; i ++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	e04e      	b.n	8001c1a <HandleFFT+0xaa>
	{
		if (flag == 1)
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HandleFFT+0xbc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d11b      	bne.n	8001bbc <HandleFFT+0x4c>
		{
			X= Blackman(FO_LENGTH_HIGH ,(max_index[1]-max_index[1]/2),(max_index[1]+max_index[1]/2), v);
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <HandleFFT+0xc0>)
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	4b29      	ldr	r3, [pc, #164]	@ (8001c30 <HandleFFT+0xc0>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da00      	bge.n	8001b92 <HandleFFT+0x22>
 8001b90:	3301      	adds	r3, #1
 8001b92:	105b      	asrs	r3, r3, #1
 8001b94:	425b      	negs	r3, r3
 8001b96:	18d1      	adds	r1, r2, r3
 8001b98:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <HandleFFT+0xc0>)
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HandleFFT+0xc0>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da00      	bge.n	8001ba6 <HandleFFT+0x36>
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	105b      	asrs	r3, r3, #1
 8001ba8:	441a      	add	r2, r3
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <HandleFFT+0xc4>)
 8001bac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bb0:	f7ff f9b6 	bl	8000f20 <Blackman>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a20      	ldr	r2, [pc, #128]	@ (8001c38 <HandleFFT+0xc8>)
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e002      	b.n	8001bc2 <HandleFFT+0x52>
		}
		else
		{
			X = v;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <HandleFFT+0xc8>)
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HandleFFT+0xc4>)
 8001bc0:	601a      	str	r2, [r3, #0]
		}


		p = FFT_Mag(FO_LENGTH_HIGH , X);
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HandleFFT+0xc8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bcc:	f7ff f928 	bl	8000e20 <FFT_Mag>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c3c <HandleFFT+0xcc>)
 8001bd4:	6013      	str	r3, [r2, #0]
		for (int j = 0 ; j  <FO_LENGTH_HIGH ; j++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	e017      	b.n	8001c0c <HandleFFT+0x9c>
		{
			P[j]+=p[j];
 8001bdc:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <HandleFFT+0xd0>)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	ed93 6b00 	vldr	d6, [r3]
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <HandleFFT+0xcc>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	ed93 7b00 	vldr	d7, [r3]
 8001bf6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bfa:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HandleFFT+0xd0>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	ed83 7b00 	vstr	d7, [r3]
		for (int j = 0 ; j  <FO_LENGTH_HIGH ; j++)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c12:	dbe3      	blt.n	8001bdc <HandleFFT+0x6c>
	for (int i = 0 ; i < 5 ; i ++)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3301      	adds	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	ddad      	ble.n	8001b7c <HandleFFT+0xc>
		}
	}

}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24024f54 	.word	0x24024f54
 8001c30:	24024f3c 	.word	0x24024f3c
 8001c34:	240048c0 	.word	0x240048c0
 8001c38:	24024f50 	.word	0x24024f50
 8001c3c:	24000014 	.word	0x24000014
 8001c40:	24014be0 	.word	0x24014be0
 8001c44:	00000000 	.word	0x00000000

08001c48 <PrintMag>:

void PrintMag(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	 for (int i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	e056      	b.n	8001d02 <PrintMag+0xba>
	 {
//	 	sprintf(str_2 , "%.5lf" , (P[i]));
		if (max[0] < P[i] &&  i < 50 && i >=0 )
 8001c54:	4b74      	ldr	r3, [pc, #464]	@ (8001e28 <PrintMag+0x1e0>)
 8001c56:	ed93 6b00 	vldr	d6, [r3]
 8001c5a:	4a74      	ldr	r2, [pc, #464]	@ (8001e2c <PrintMag+0x1e4>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	ed93 7b00 	vldr	d7, [r3]
 8001c66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d512      	bpl.n	8001c96 <PrintMag+0x4e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b31      	cmp	r3, #49	@ 0x31
 8001c74:	dc0f      	bgt.n	8001c96 <PrintMag+0x4e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0c      	blt.n	8001c96 <PrintMag+0x4e>
		{
		  	max_index[0] = i * 1 ;
 8001c7c:	4a6c      	ldr	r2, [pc, #432]	@ (8001e30 <PrintMag+0x1e8>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
		  	max[0] =P[i];
 8001c82:	4a6a      	ldr	r2, [pc, #424]	@ (8001e2c <PrintMag+0x1e4>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	4966      	ldr	r1, [pc, #408]	@ (8001e28 <PrintMag+0x1e0>)
 8001c90:	e9c1 2300 	strd	r2, r3, [r1]
 8001c94:	e00c      	b.n	8001cb0 <PrintMag+0x68>

		}
		else if (i < 100 )
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b63      	cmp	r3, #99	@ 0x63
 8001c9a:	dc09      	bgt.n	8001cb0 <PrintMag+0x68>
		{
		  	max_index[0] = max_index[0];
 8001c9c:	4b64      	ldr	r3, [pc, #400]	@ (8001e30 <PrintMag+0x1e8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a63      	ldr	r2, [pc, #396]	@ (8001e30 <PrintMag+0x1e8>)
 8001ca2:	6013      	str	r3, [r2, #0]
		  	max[0] = max[0];
 8001ca4:	4b60      	ldr	r3, [pc, #384]	@ (8001e28 <PrintMag+0x1e0>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	495f      	ldr	r1, [pc, #380]	@ (8001e28 <PrintMag+0x1e0>)
 8001cac:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (max[1] < P[i] && i < (max_index[1]+20) &&  i >(max_index[1]-20) )
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e28 <PrintMag+0x1e0>)
 8001cb2:	ed93 6b02 	vldr	d6, [r3, #8]
 8001cb6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e2c <PrintMag+0x1e4>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	ed93 7b00 	vldr	d7, [r3]
 8001cc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d517      	bpl.n	8001cfc <PrintMag+0xb4>
 8001ccc:	4b58      	ldr	r3, [pc, #352]	@ (8001e30 <PrintMag+0x1e8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	3313      	adds	r3, #19
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dc11      	bgt.n	8001cfc <PrintMag+0xb4>
 8001cd8:	4b55      	ldr	r3, [pc, #340]	@ (8001e30 <PrintMag+0x1e8>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	3b13      	subs	r3, #19
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	db0b      	blt.n	8001cfc <PrintMag+0xb4>
		{
		  	max_index[1] = i * 1 ;
 8001ce4:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <PrintMag+0x1e8>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6053      	str	r3, [r2, #4]
		  	max[1] =P[i];
 8001cea:	4a50      	ldr	r2, [pc, #320]	@ (8001e2c <PrintMag+0x1e4>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	494c      	ldr	r1, [pc, #304]	@ (8001e28 <PrintMag+0x1e0>)
 8001cf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	 for (int i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d08:	dba4      	blt.n	8001c54 <PrintMag+0xc>

		}
//		HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	 }
	 sprintf(str_2 , "%.2f" , s1);
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <PrintMag+0x1ec>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	4949      	ldr	r1, [pc, #292]	@ (8001e38 <PrintMag+0x1f0>)
 8001d12:	484a      	ldr	r0, [pc, #296]	@ (8001e3c <PrintMag+0x1f4>)
 8001d14:	f00b fa4a 	bl	800d1ac <sprintf>
	 HAL_UART_Transmit(&huart1 ,(uint8_t *)"Frequency:", 10 , HAL_MAX_DELAY);
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d1c:	220a      	movs	r2, #10
 8001d1e:	4948      	ldr	r1, [pc, #288]	@ (8001e40 <PrintMag+0x1f8>)
 8001d20:	4848      	ldr	r0, [pc, #288]	@ (8001e44 <PrintMag+0x1fc>)
 8001d22:	f00a f86d 	bl	800be00 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4943      	ldr	r1, [pc, #268]	@ (8001e3c <PrintMag+0x1f4>)
 8001d2e:	4845      	ldr	r0, [pc, #276]	@ (8001e44 <PrintMag+0x1fc>)
 8001d30:	f00a f866 	bl	800be00 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1 ,(uint8_t *)"kHz\n", 4 , HAL_MAX_DELAY);
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4943      	ldr	r1, [pc, #268]	@ (8001e48 <PrintMag+0x200>)
 8001d3c:	4841      	ldr	r0, [pc, #260]	@ (8001e44 <PrintMag+0x1fc>)
 8001d3e:	f00a f85f 	bl	800be00 <HAL_UART_Transmit>
	 sprintf(str_2 , "%.5f" , sqrt(max[0]) / s1  / 122.15 );
 8001d42:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <PrintMag+0x1e0>)
 8001d44:	ed93 7b00 	vldr	d7, [r3]
 8001d48:	eeb0 0b47 	vmov.f64	d0, d7
 8001d4c:	f00f fdd0 	bl	80118f0 <sqrt>
 8001d50:	eeb0 5b40 	vmov.f64	d5, d0
 8001d54:	4b37      	ldr	r3, [pc, #220]	@ (8001e34 <PrintMag+0x1ec>)
 8001d56:	ed93 6b00 	vldr	d6, [r3]
 8001d5a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d5e:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8001e10 <PrintMag+0x1c8>
 8001d62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001d66:	ec53 2b15 	vmov	r2, r3, d5
 8001d6a:	4938      	ldr	r1, [pc, #224]	@ (8001e4c <PrintMag+0x204>)
 8001d6c:	4833      	ldr	r0, [pc, #204]	@ (8001e3c <PrintMag+0x1f4>)
 8001d6e:	f00b fa1d 	bl	800d1ac <sprintf>
	 HAL_UART_Transmit(&huart1 ,(uint8_t *)"Uo0:", 4 , HAL_MAX_DELAY);
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d76:	2204      	movs	r2, #4
 8001d78:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <PrintMag+0x208>)
 8001d7a:	4832      	ldr	r0, [pc, #200]	@ (8001e44 <PrintMag+0x1fc>)
 8001d7c:	f00a f840 	bl	800be00 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d84:	2207      	movs	r2, #7
 8001d86:	492d      	ldr	r1, [pc, #180]	@ (8001e3c <PrintMag+0x1f4>)
 8001d88:	482e      	ldr	r0, [pc, #184]	@ (8001e44 <PrintMag+0x1fc>)
 8001d8a:	f00a f839 	bl	800be00 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1 ,(uint8_t *)"V\n", 2 , HAL_MAX_DELAY);
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d92:	2202      	movs	r2, #2
 8001d94:	492f      	ldr	r1, [pc, #188]	@ (8001e54 <PrintMag+0x20c>)
 8001d96:	482b      	ldr	r0, [pc, #172]	@ (8001e44 <PrintMag+0x1fc>)
 8001d98:	f00a f832 	bl	800be00 <HAL_UART_Transmit>
	 sprintf(str_2 , "%.5f" , sqrt(max[1])/ s1 / 26.12 /sqrt(2) /  2);
 8001d9c:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <PrintMag+0x1e0>)
 8001d9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001da2:	eeb0 0b47 	vmov.f64	d0, d7
 8001da6:	f00f fda3 	bl	80118f0 <sqrt>
 8001daa:	eeb0 5b40 	vmov.f64	d5, d0
 8001dae:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <PrintMag+0x1ec>)
 8001db0:	ed93 6b00 	vldr	d6, [r3]
 8001db4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001db8:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001e18 <PrintMag+0x1d0>
 8001dbc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001dc0:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8001e20 <PrintMag+0x1d8>
 8001dc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dc8:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 8001dcc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001dd0:	ec53 2b15 	vmov	r2, r3, d5
 8001dd4:	491d      	ldr	r1, [pc, #116]	@ (8001e4c <PrintMag+0x204>)
 8001dd6:	4819      	ldr	r0, [pc, #100]	@ (8001e3c <PrintMag+0x1f4>)
 8001dd8:	f00b f9e8 	bl	800d1ac <sprintf>
	 HAL_UART_Transmit(&huart1 ,(uint8_t *)"Uo1:", 4 , HAL_MAX_DELAY);
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de0:	2204      	movs	r2, #4
 8001de2:	491d      	ldr	r1, [pc, #116]	@ (8001e58 <PrintMag+0x210>)
 8001de4:	4817      	ldr	r0, [pc, #92]	@ (8001e44 <PrintMag+0x1fc>)
 8001de6:	f00a f80b 	bl	800be00 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dee:	2207      	movs	r2, #7
 8001df0:	4912      	ldr	r1, [pc, #72]	@ (8001e3c <PrintMag+0x1f4>)
 8001df2:	4814      	ldr	r0, [pc, #80]	@ (8001e44 <PrintMag+0x1fc>)
 8001df4:	f00a f804 	bl	800be00 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1 ,(uint8_t *)"V\n", 2 , HAL_MAX_DELAY);
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4915      	ldr	r1, [pc, #84]	@ (8001e54 <PrintMag+0x20c>)
 8001e00:	4810      	ldr	r0, [pc, #64]	@ (8001e44 <PrintMag+0x1fc>)
 8001e02:	f009 fffd 	bl	800be00 <HAL_UART_Transmit>


}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	9999999a 	.word	0x9999999a
 8001e14:	405e8999 	.word	0x405e8999
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	403a1eb8 	.word	0x403a1eb8
 8001e20:	667f3bcd 	.word	0x667f3bcd
 8001e24:	3ff6a09e 	.word	0x3ff6a09e
 8001e28:	24000000 	.word	0x24000000
 8001e2c:	24014be0 	.word	0x24014be0
 8001e30:	24024f3c 	.word	0x24024f3c
 8001e34:	24024f48 	.word	0x24024f48
 8001e38:	08012fd4 	.word	0x08012fd4
 8001e3c:	24024f08 	.word	0x24024f08
 8001e40:	08012fdc 	.word	0x08012fdc
 8001e44:	24024ff4 	.word	0x24024ff4
 8001e48:	08012fe8 	.word	0x08012fe8
 8001e4c:	08012fcc 	.word	0x08012fcc
 8001e50:	08012ff0 	.word	0x08012ff0
 8001e54:	08012ff8 	.word	0x08012ff8
 8001e58:	08012ffc 	.word	0x08012ffc

08001e5c <ADC_FFT>:

void ADC_FFT(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	flag = 1;
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <ADC_FFT+0x20>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
	Para_init();
 8001e66:	f7ff fdbb 	bl	80019e0 <Para_init>
	ADC1_Get();
 8001e6a:	f7ff fdf5 	bl	8001a58 <ADC1_Get>
	HandleFFT();
 8001e6e:	f7ff fe7f 	bl	8001b70 <HandleFFT>
	PrintMag();
 8001e72:	f7ff fee9 	bl	8001c48 <PrintMag>
	//HAL_Delay(500);
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	24024f54 	.word	0x24024f54

08001e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e86:	f000 f94f 	bl	8002128 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e8a:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <main+0x118>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11b      	bne.n	8001ece <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e96:	f3bf 8f4f 	dsb	sy
}
 8001e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e9c:	f3bf 8f6f 	isb	sy
}
 8001ea0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <main+0x118>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001eaa:	f3bf 8f4f 	dsb	sy
}
 8001eae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eb0:	f3bf 8f6f 	isb	sy
}
 8001eb4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001eb6:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <main+0x118>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <main+0x118>)
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec2:	f3bf 8f4f 	dsb	sy
}
 8001ec6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec8:	f3bf 8f6f 	isb	sy
}
 8001ecc:	e000      	b.n	8001ed0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ece:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ed0:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <main+0x118>)
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d138      	bne.n	8001f4e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001edc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <main+0x118>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee4:	f3bf 8f4f 	dsb	sy
}
 8001ee8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001eea:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <main+0x118>)
 8001eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ef0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0b5b      	lsrs	r3, r3, #13
 8001ef6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001efa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f04:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001f0e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f14:	4920      	ldr	r1, [pc, #128]	@ (8001f98 <main+0x118>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1e5a      	subs	r2, r3, #1
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ef      	bne.n	8001f06 <main+0x86>
    } while(sets-- != 0U);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	60ba      	str	r2, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e5      	bne.n	8001efc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f30:	f3bf 8f4f 	dsb	sy
}
 8001f34:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f36:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <main+0x118>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <main+0x118>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f40:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f42:	f3bf 8f4f 	dsb	sy
}
 8001f46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f48:	f3bf 8f6f 	isb	sy
}
 8001f4c:	e000      	b.n	8001f50 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001f4e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f50:	f000 fd9c 	bl	8002a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f54:	f000 f822 	bl	8001f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f58:	f7ff fbe2 	bl	8001720 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f5c:	f7ff fbb8 	bl	80016d0 <MX_DMA_Init>
  MX_TIM7_Init();
 8001f60:	f000 fbf2 	bl	8002748 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001f64:	f000 fcb2 	bl	80028cc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f68:	f7ff fc3c 	bl	80017e4 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001f6c:	f000 fc22 	bl	80027b4 <MX_TIM15_Init>
  MX_DAC1_Init();
 8001f70:	f7ff fb02 	bl	8001578 <MX_DAC1_Init>
  MX_ADC1_Init();
 8001f74:	f7ff f9bc 	bl	80012f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  AD9833_WaveSetting(1000 , 0 , SIN_WAVE , 0 , 0);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2000      	movs	r0, #0
 8001f80:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8001f90 <main+0x110>
 8001f84:	f7ff f900 	bl	8001188 <AD9833_WaveSetting>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_FFT();
 8001f88:	f7ff ff68 	bl	8001e5c <ADC_FFT>
 8001f8c:	e7fc      	b.n	8001f88 <main+0x108>
 8001f8e:	bf00      	nop
 8001f90:	00000000 	.word	0x00000000
 8001f94:	408f4000 	.word	0x408f4000
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b09e      	sub	sp, #120	@ 0x78
 8001fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa6:	224c      	movs	r2, #76	@ 0x4c
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00b f961 	bl	800d272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00b f95a 	bl	800d272 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f005 fe00 	bl	8007bc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	@ (80020fc <SystemClock_Config+0x160>)
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80020fc <SystemClock_Config+0x160>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001fd4:	4b49      	ldr	r3, [pc, #292]	@ (80020fc <SystemClock_Config+0x160>)
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b48      	ldr	r3, [pc, #288]	@ (8002100 <SystemClock_Config+0x164>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	4a47      	ldr	r2, [pc, #284]	@ (8002100 <SystemClock_Config+0x164>)
 8001fe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fe8:	6193      	str	r3, [r2, #24]
 8001fea:	4b45      	ldr	r3, [pc, #276]	@ (8002100 <SystemClock_Config+0x164>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ff6:	bf00      	nop
 8001ff8:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <SystemClock_Config+0x164>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002004:	d1f8      	bne.n	8001ff8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4b3f      	ldr	r3, [pc, #252]	@ (8002104 <SystemClock_Config+0x168>)
 8002008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800200c:	4a3d      	ldr	r2, [pc, #244]	@ (8002104 <SystemClock_Config+0x168>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002016:	4b3b      	ldr	r3, [pc, #236]	@ (8002104 <SystemClock_Config+0x168>)
 8002018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002024:	2300      	movs	r3, #0
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	4b35      	ldr	r3, [pc, #212]	@ (8002100 <SystemClock_Config+0x164>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4a34      	ldr	r2, [pc, #208]	@ (8002100 <SystemClock_Config+0x164>)
 800202e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b32      	ldr	r3, [pc, #200]	@ (8002100 <SystemClock_Config+0x164>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b2f      	ldr	r3, [pc, #188]	@ (80020fc <SystemClock_Config+0x160>)
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	4a2e      	ldr	r2, [pc, #184]	@ (80020fc <SystemClock_Config+0x160>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800204a:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <SystemClock_Config+0x160>)
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002056:	bf00      	nop
 8002058:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <SystemClock_Config+0x164>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002064:	d1f8      	bne.n	8002058 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002066:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <SystemClock_Config+0x168>)
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	4a25      	ldr	r2, [pc, #148]	@ (8002104 <SystemClock_Config+0x168>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002076:	2301      	movs	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800207a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800207e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002080:	2302      	movs	r3, #2
 8002082:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002084:	2302      	movs	r3, #2
 8002086:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002088:	2305      	movs	r3, #5
 800208a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800208c:	23c0      	movs	r3, #192	@ 0xc0
 800208e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002090:	2302      	movs	r3, #2
 8002092:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002094:	2302      	movs	r3, #2
 8002096:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002098:	2302      	movs	r3, #2
 800209a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800209c:	2308      	movs	r3, #8
 800209e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fdc3 	bl	8007c38 <HAL_RCC_OscConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0x120>
  {
    Error_Handler();
 80020b8:	f000 f894 	bl	80021e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020bc:	233f      	movs	r3, #63	@ 0x3f
 80020be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c0:	2303      	movs	r3, #3
 80020c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80020c8:	2308      	movs	r3, #8
 80020ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020cc:	2340      	movs	r3, #64	@ 0x40
 80020ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020d0:	2340      	movs	r3, #64	@ 0x40
 80020d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020da:	2340      	movs	r3, #64	@ 0x40
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	2104      	movs	r1, #4
 80020e4:	4618      	mov	r0, r3
 80020e6:	f006 fa03 	bl	80084f0 <HAL_RCC_ClockConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80020f0:	f000 f878 	bl	80021e4 <Error_Handler>
  }
}
 80020f4:	bf00      	nop
 80020f6:	3778      	adds	r7, #120	@ 0x78
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	58000400 	.word	0x58000400
 8002100:	58024800 	.word	0x58024800
 8002104:	58024400 	.word	0x58024400

08002108 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	240048b8 	.word	0x240048b8

08002128 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800212e:	463b      	mov	r3, r7
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800213a:	f002 fcdd 	bl	8004af8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800213e:	2301      	movs	r3, #1
 8002140:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002142:	2300      	movs	r3, #0
 8002144:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8002146:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800214a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800214c:	2312      	movs	r3, #18
 800214e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002150:	2300      	movs	r3, #0
 8002152:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002154:	2301      	movs	r3, #1
 8002156:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002158:	2303      	movs	r3, #3
 800215a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002164:	2301      	movs	r3, #1
 8002166:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800216c:	463b      	mov	r3, r7
 800216e:	4618      	mov	r0, r3
 8002170:	f002 fcfa 	bl	8004b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002174:	2301      	movs	r3, #1
 8002176:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002178:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800217c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800217e:	2310      	movs	r3, #16
 8002180:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800218a:	463b      	mov	r3, r7
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fceb 	bl	8004b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002192:	2302      	movs	r3, #2
 8002194:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <MPU_Config+0xb4>)
 8002198:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800219a:	463b      	mov	r3, r7
 800219c:	4618      	mov	r0, r3
 800219e:	f002 fce3 	bl	8004b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80021a2:	2303      	movs	r3, #3
 80021a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MPU_Config+0xb8>)
 80021a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80021aa:	230e      	movs	r3, #14
 80021ac:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021ae:	463b      	mov	r3, r7
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fcd9 	bl	8004b68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80021b6:	2304      	movs	r3, #4
 80021b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80021ba:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80021be:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80021c0:	230f      	movs	r3, #15
 80021c2:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021c4:	463b      	mov	r3, r7
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fcce 	bl	8004b68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021cc:	2004      	movs	r0, #4
 80021ce:	f002 fcab 	bl	8004b28 <HAL_MPU_Enable>

}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	30020000 	.word	0x30020000
 80021e0:	30040000 	.word	0x30040000

080021e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <Error_Handler+0x8>

080021f0 <FFT_ADC1>:
    }
    return A;
}

double* FFT_ADC1(int size , double *x )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09e      	sub	sp, #120	@ 0x78
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	char str_2[50];
	int i = 0 , max_index = 0  ,min_index = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80021fe:	2300      	movs	r3, #0
 8002200:	673b      	str	r3, [r7, #112]	@ 0x70
 8002202:	2300      	movs	r3, #0
 8002204:	66fb      	str	r3, [r7, #108]	@ 0x6c
	double max , min ;
	double  s1;
	double *s = &s1;
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	657b      	str	r3, [r7, #84]	@ 0x54
	double complex *X =FFT(FO_LENGTH_HIGH, x);
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002212:	f7fe fc05 	bl	8000a20 <FFT>
 8002216:	6538      	str	r0, [r7, #80]	@ 0x50
	  for (i = 0 ; i < FO_LENGTH_HIGH ; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	677b      	str	r3, [r7, #116]	@ 0x74
 800221c:	e0b2      	b.n	8002384 <FFT_ADC1+0x194>
	  {
//		  sprintf(str_2 , "%.5lf" , cabs(X[i]));
		  if (max < cabs(X[i]) && i < 4096 &&  i > 50 && cabs(X[i]) > 20)
 800221e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002224:	4413      	add	r3, r2
 8002226:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800222e:	ec41 0b16 	vmov	d6, r0, r1
 8002232:	ec43 2b17 	vmov	d7, r2, r3
 8002236:	eeb0 0b46 	vmov.f64	d0, d6
 800223a:	eeb0 1b47 	vmov.f64	d1, d7
 800223e:	f00f ff87 	bl	8012150 <cabs>
 8002242:	eeb0 6b40 	vmov.f64	d6, d0
 8002246:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800224a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	d540      	bpl.n	80022d6 <FFT_ADC1+0xe6>
 8002254:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225a:	da3c      	bge.n	80022d6 <FFT_ADC1+0xe6>
 800225c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800225e:	2b32      	cmp	r3, #50	@ 0x32
 8002260:	dd39      	ble.n	80022d6 <FFT_ADC1+0xe6>
 8002262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002268:	4413      	add	r3, r2
 800226a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800226e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002272:	ec41 0b16 	vmov	d6, r0, r1
 8002276:	ec43 2b17 	vmov	d7, r2, r3
 800227a:	eeb0 0b46 	vmov.f64	d0, d6
 800227e:	eeb0 1b47 	vmov.f64	d1, d7
 8002282:	f00f ff65 	bl	8012150 <cabs>
 8002286:	eeb0 7b40 	vmov.f64	d7, d0
 800228a:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 800228e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	dd1e      	ble.n	80022d6 <FFT_ADC1+0xe6>
		  {
			  max_index = i * 1.0 ;
 8002298:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022a6:	ee17 3a90 	vmov	r3, s15
 80022aa:	673b      	str	r3, [r7, #112]	@ 0x70
			  max =cabs(X[i]);
 80022ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022b2:	4413      	add	r3, r2
 80022b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022bc:	ec41 0b16 	vmov	d6, r0, r1
 80022c0:	ec43 2b17 	vmov	d7, r2, r3
 80022c4:	eeb0 0b46 	vmov.f64	d0, d6
 80022c8:	eeb0 1b47 	vmov.f64	d1, d7
 80022cc:	f00f ff40 	bl	8012150 <cabs>
 80022d0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 80022d4:	e053      	b.n	800237e <FFT_ADC1+0x18e>

		  }
		  else if (min > cabs(X[i]) && i < 4096 && i > 50 && cabs(X[i]) < -20)
 80022d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80022dc:	4413      	add	r3, r2
 80022de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022e6:	ec41 0b16 	vmov	d6, r0, r1
 80022ea:	ec43 2b17 	vmov	d7, r2, r3
 80022ee:	eeb0 0b46 	vmov.f64	d0, d6
 80022f2:	eeb0 1b47 	vmov.f64	d1, d7
 80022f6:	f00f ff2b 	bl	8012150 <cabs>
 80022fa:	eeb0 6b40 	vmov.f64	d6, d0
 80022fe:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8002302:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230a:	dd38      	ble.n	800237e <FFT_ADC1+0x18e>
 800230c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002312:	da34      	bge.n	800237e <FFT_ADC1+0x18e>
 8002314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002316:	2b32      	cmp	r3, #50	@ 0x32
 8002318:	dd31      	ble.n	800237e <FFT_ADC1+0x18e>
 800231a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002320:	4413      	add	r3, r2
 8002322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002326:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800232a:	ec41 0b16 	vmov	d6, r0, r1
 800232e:	ec43 2b17 	vmov	d7, r2, r3
 8002332:	eeb0 0b46 	vmov.f64	d0, d6
 8002336:	eeb0 1b47 	vmov.f64	d1, d7
 800233a:	f00f ff09 	bl	8012150 <cabs>
 800233e:	eeb0 7b40 	vmov.f64	d7, d0
 8002342:	eebb 6b04 	vmov.f64	d6, #180	@ 0xc1a00000 -20.0
 8002346:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	d516      	bpl.n	800237e <FFT_ADC1+0x18e>
		  {
			  min_index = i ;
 8002350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002352:	66fb      	str	r3, [r7, #108]	@ 0x6c
			  min = cabs(X[i]);
 8002354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800235a:	4413      	add	r3, r2
 800235c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002360:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002364:	ec41 0b16 	vmov	d6, r0, r1
 8002368:	ec43 2b17 	vmov	d7, r2, r3
 800236c:	eeb0 0b46 	vmov.f64	d0, d6
 8002370:	eeb0 1b47 	vmov.f64	d1, d7
 8002374:	f00f feec 	bl	8012150 <cabs>
 8002378:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
 800237c:	bf00      	nop
	  for (i = 0 ; i < FO_LENGTH_HIGH ; i++)
 800237e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002380:	3301      	adds	r3, #1
 8002382:	677b      	str	r3, [r7, #116]	@ 0x74
 8002384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800238a:	f6ff af48 	blt.w	800221e <FFT_ADC1+0x2e>
		  }

//		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7 ,HAL_MAX_DELAY);
//		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n" , 1 , HAL_MAX_DELAY);
	  }
	  double index = (max_index - min_index < 5)?(max_index + min_index ) : (2*max_index);
 800238e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b04      	cmp	r3, #4
 8002396:	dc07      	bgt.n	80023a8 <FFT_ADC1+0x1b8>
 8002398:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800239a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800239c:	4413      	add	r3, r2
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023a6:	e005      	b.n	80023b4 <FFT_ADC1+0x1c4>
 80023a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023b4:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
	  s1 = index*11.4  / 8192;
 80023b8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80023bc:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80023e0 <FFT_ADC1+0x1f0>
 80023c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023c4:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 80023e8 <FFT_ADC1+0x1f8>
 80023c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023cc:	ed87 7b02 	vstr	d7, [r7, #8]
//	  sprintf(str_2 , "%d" , max_index);
//	  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7 ,HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n" , 1 , HAL_MAX_DELAY);
	  return s ;
 80023d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3778      	adds	r7, #120	@ 0x78
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w
 80023e0:	cccccccd 	.word	0xcccccccd
 80023e4:	4026cccc 	.word	0x4026cccc
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40c00000 	.word	0x40c00000

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_MspInit+0x30>)
 80023f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023fc:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <HAL_MspInit+0x30>)
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002406:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_MspInit+0x30>)
 8002408:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	58024400 	.word	0x58024400

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <NMI_Handler+0x4>

0800242c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <MemManage_Handler+0x4>

0800243c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <UsageFault_Handler+0x4>

0800244c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247a:	f000 fb79 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002488:	4802      	ldr	r0, [pc, #8]	@ (8002494 <DMA1_Stream0_IRQHandler+0x10>)
 800248a:	f003 fc8d 	bl	8005da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	24004760 	.word	0x24004760

08002498 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800249c:	4802      	ldr	r0, [pc, #8]	@ (80024a8 <DMA1_Stream1_IRQHandler+0x10>)
 800249e:	f003 fc83 	bl	8005da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	240047ec 	.word	0x240047ec

080024ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_kill>:

int _kill(int pid, int sig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c6:	f00a ff23 	bl	800d310 <__errno>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2216      	movs	r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
  return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe7 	bl	80024bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ee:	bf00      	nop
 80024f0:	e7fd      	b.n	80024ee <_exit+0x12>

080024f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e00a      	b.n	800251a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002504:	f3af 8000 	nop.w
 8002508:	4601      	mov	r1, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	b2ca      	uxtb	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3301      	adds	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	dbf0      	blt.n	8002504 <_read+0x12>
  }

  return len;
 8002522:	687b      	ldr	r3, [r7, #4]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e009      	b.n	8002552 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3301      	adds	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	dbf1      	blt.n	800253e <_write+0x12>
  }
  return len;
 800255a:	687b      	ldr	r3, [r7, #4]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_close>:

int _close(int file)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800258c:	605a      	str	r2, [r3, #4]
  return 0;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_isatty>:

int _isatty(int file)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f00a fe88 	bl	800d310 <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <_sbrk+0x64>)
 800261c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	24080000 	.word	0x24080000
 800262c:	00001000 	.word	0x00001000
 8002630:	24024f58 	.word	0x24024f58
 8002634:	24025398 	.word	0x24025398

08002638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800263c:	4b37      	ldr	r3, [pc, #220]	@ (800271c <SystemInit+0xe4>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	4a36      	ldr	r2, [pc, #216]	@ (800271c <SystemInit+0xe4>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800264c:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <SystemInit+0xe8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	2b06      	cmp	r3, #6
 8002656:	d807      	bhi.n	8002668 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002658:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <SystemInit+0xe8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 030f 	bic.w	r3, r3, #15
 8002660:	4a2f      	ldr	r2, [pc, #188]	@ (8002720 <SystemInit+0xe8>)
 8002662:	f043 0307 	orr.w	r3, r3, #7
 8002666:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002668:	4b2e      	ldr	r3, [pc, #184]	@ (8002724 <SystemInit+0xec>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <SystemInit+0xec>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <SystemInit+0xec>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800267a:	4b2a      	ldr	r3, [pc, #168]	@ (8002724 <SystemInit+0xec>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4929      	ldr	r1, [pc, #164]	@ (8002724 <SystemInit+0xec>)
 8002680:	4b29      	ldr	r3, [pc, #164]	@ (8002728 <SystemInit+0xf0>)
 8002682:	4013      	ands	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002686:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <SystemInit+0xe8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002692:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <SystemInit+0xe8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 030f 	bic.w	r3, r3, #15
 800269a:	4a21      	ldr	r2, [pc, #132]	@ (8002720 <SystemInit+0xe8>)
 800269c:	f043 0307 	orr.w	r3, r3, #7
 80026a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026a2:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <SystemInit+0xec>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <SystemInit+0xec>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <SystemInit+0xec>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <SystemInit+0xec>)
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <SystemInit+0xf4>)
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <SystemInit+0xec>)
 80026bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <SystemInit+0xf8>)
 80026be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026c0:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <SystemInit+0xec>)
 80026c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <SystemInit+0xfc>)
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026c6:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <SystemInit+0xec>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026cc:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <SystemInit+0xec>)
 80026ce:	4a19      	ldr	r2, [pc, #100]	@ (8002734 <SystemInit+0xfc>)
 80026d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <SystemInit+0xec>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <SystemInit+0xec>)
 80026da:	4a16      	ldr	r2, [pc, #88]	@ (8002734 <SystemInit+0xfc>)
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <SystemInit+0xec>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <SystemInit+0xec>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002724 <SystemInit+0xec>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <SystemInit+0xec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <SystemInit+0x100>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <SystemInit+0x104>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002702:	d202      	bcs.n	800270a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002704:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <SystemInit+0x108>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <SystemInit+0x10c>)
 800270c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002710:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00
 8002720:	52002000 	.word	0x52002000
 8002724:	58024400 	.word	0x58024400
 8002728:	eaf6ed7f 	.word	0xeaf6ed7f
 800272c:	02020200 	.word	0x02020200
 8002730:	01ff0000 	.word	0x01ff0000
 8002734:	01010280 	.word	0x01010280
 8002738:	5c001000 	.word	0x5c001000
 800273c:	ffff0000 	.word	0xffff0000
 8002740:	51008108 	.word	0x51008108
 8002744:	52004000 	.word	0x52004000

08002748 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <MX_TIM7_Init+0x64>)
 800275a:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <MX_TIM7_Init+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 800275e:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <MX_TIM7_Init+0x64>)
 8002760:	22ef      	movs	r2, #239	@ 0xef
 8002762:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <MX_TIM7_Init+0x64>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800276a:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <MX_TIM7_Init+0x64>)
 800276c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002770:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <MX_TIM7_Init+0x64>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <MX_TIM7_Init+0x64>)
 800277a:	f008 ff43 	bl	800b604 <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002784:	f7ff fd2e 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	@ (80027ac <MX_TIM7_Init+0x64>)
 8002796:	f009 fa55 	bl	800bc44 <HAL_TIMEx_MasterConfigSynchronization>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027a0:	f7ff fd20 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	24024f5c 	.word	0x24024f5c
 80027b0:	40001400 	.word	0x40001400

080027b4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002850 <MX_TIM15_Init+0x9c>)
 80027d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002854 <MX_TIM15_Init+0xa0>)
 80027d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 21- 1;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <MX_TIM15_Init+0x9c>)
 80027da:	2214      	movs	r2, #20
 80027dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027de:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <MX_TIM15_Init+0x9c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 501-1;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <MX_TIM15_Init+0x9c>)
 80027e6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ec:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <MX_TIM15_Init+0x9c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027f2:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MX_TIM15_Init+0x9c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027f8:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <MX_TIM15_Init+0x9c>)
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80027fe:	4814      	ldr	r0, [pc, #80]	@ (8002850 <MX_TIM15_Init+0x9c>)
 8002800:	f008 ff00 	bl	800b604 <HAL_TIM_Base_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800280a:	f7ff fceb 	bl	80021e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800280e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002812:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4619      	mov	r1, r3
 800281a:	480d      	ldr	r0, [pc, #52]	@ (8002850 <MX_TIM15_Init+0x9c>)
 800281c:	f008 ffe2 	bl	800b7e4 <HAL_TIM_ConfigClockSource>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002826:	f7ff fcdd 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800282a:	2320      	movs	r3, #32
 800282c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4806      	ldr	r0, [pc, #24]	@ (8002850 <MX_TIM15_Init+0x9c>)
 8002838:	f009 fa04 	bl	800bc44 <HAL_TIMEx_MasterConfigSynchronization>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002842:	f7ff fccf 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	24024fa8 	.word	0x24024fa8
 8002854:	40014000 	.word	0x40014000

08002858 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a16      	ldr	r2, [pc, #88]	@ (80028c0 <HAL_TIM_Base_MspInit+0x68>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10f      	bne.n	800288a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800286a:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 800286c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002870:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 8002872:	f043 0320 	orr.w	r3, r3, #32
 8002876:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 800287c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002888:	e013      	b.n	80028b2 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM15)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a0e      	ldr	r2, [pc, #56]	@ (80028c8 <HAL_TIM_Base_MspInit+0x70>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d10e      	bne.n	80028b2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 8002896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_TIM_Base_MspInit+0x6c>)
 80028a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40001400 	.word	0x40001400
 80028c4:	58024400 	.word	0x58024400
 80028c8:	40014000 	.word	0x40014000

080028cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028d0:	4b22      	ldr	r3, [pc, #136]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028d2:	4a23      	ldr	r2, [pc, #140]	@ (8002960 <MX_USART1_UART_Init+0x94>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028d6:	4b21      	ldr	r3, [pc, #132]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fc:	4b17      	ldr	r3, [pc, #92]	@ (800295c <MX_USART1_UART_Init+0x90>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002902:	4b16      	ldr	r3, [pc, #88]	@ (800295c <MX_USART1_UART_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002908:	4b14      	ldr	r3, [pc, #80]	@ (800295c <MX_USART1_UART_Init+0x90>)
 800290a:	2200      	movs	r2, #0
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <MX_USART1_UART_Init+0x90>)
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002914:	4811      	ldr	r0, [pc, #68]	@ (800295c <MX_USART1_UART_Init+0x90>)
 8002916:	f009 fa23 	bl	800bd60 <HAL_UART_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002920:	f7ff fc60 	bl	80021e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002924:	2100      	movs	r1, #0
 8002926:	480d      	ldr	r0, [pc, #52]	@ (800295c <MX_USART1_UART_Init+0x90>)
 8002928:	f00a fab3 	bl	800ce92 <HAL_UARTEx_SetTxFifoThreshold>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002932:	f7ff fc57 	bl	80021e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002936:	2100      	movs	r1, #0
 8002938:	4808      	ldr	r0, [pc, #32]	@ (800295c <MX_USART1_UART_Init+0x90>)
 800293a:	f00a fae8 	bl	800cf0e <HAL_UARTEx_SetRxFifoThreshold>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002944:	f7ff fc4e 	bl	80021e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002948:	4804      	ldr	r0, [pc, #16]	@ (800295c <MX_USART1_UART_Init+0x90>)
 800294a:	f00a fa69 	bl	800ce20 <HAL_UARTEx_DisableFifoMode>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002954:	f7ff fc46 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}
 800295c:	24024ff4 	.word	0x24024ff4
 8002960:	40011000 	.word	0x40011000

08002964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0ba      	sub	sp, #232	@ 0xe8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	22c0      	movs	r2, #192	@ 0xc0
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f00a fc74 	bl	800d272 <memset>
  if(uartHandle->Instance==USART1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a27      	ldr	r2, [pc, #156]	@ (8002a2c <HAL_UART_MspInit+0xc8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d146      	bne.n	8002a22 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002994:	f04f 0201 	mov.w	r2, #1
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4618      	mov	r0, r3
 80029ac:	f006 f92c 	bl	8008c08 <HAL_RCCEx_PeriphCLKConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80029b6:	f7ff fc15 	bl	80021e4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002a30 <HAL_UART_MspInit+0xcc>)
 80029bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a30 <HAL_UART_MspInit+0xcc>)
 80029c2:	f043 0310 	orr.w	r3, r3, #16
 80029c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029ca:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <HAL_UART_MspInit+0xcc>)
 80029cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d8:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <HAL_UART_MspInit+0xcc>)
 80029da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029de:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <HAL_UART_MspInit+0xcc>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_UART_MspInit+0xcc>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80029f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80029fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002a10:	2304      	movs	r3, #4
 8002a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4805      	ldr	r0, [pc, #20]	@ (8002a34 <HAL_UART_MspInit+0xd0>)
 8002a1e:	f004 fcd5 	bl	80073cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a22:	bf00      	nop
 8002a24:	37e8      	adds	r7, #232	@ 0xe8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40011000 	.word	0x40011000
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58020400 	.word	0x58020400

08002a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a3c:	f7ff fdfc 	bl	8002638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a40:	480c      	ldr	r0, [pc, #48]	@ (8002a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a42:	490d      	ldr	r1, [pc, #52]	@ (8002a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a44:	4a0d      	ldr	r2, [pc, #52]	@ (8002a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a48:	e002      	b.n	8002a50 <LoopCopyDataInit>

08002a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4e:	3304      	adds	r3, #4

08002a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a54:	d3f9      	bcc.n	8002a4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a58:	4c0a      	ldr	r4, [pc, #40]	@ (8002a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a5c:	e001      	b.n	8002a62 <LoopFillZerobss>

08002a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a60:	3204      	adds	r2, #4

08002a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a64:	d3fb      	bcc.n	8002a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a66:	f00a fc59 	bl	800d31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6a:	f7ff fa09 	bl	8001e80 <main>
  bx  lr
 8002a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a78:	240006d8 	.word	0x240006d8
  ldr r2, =_sidata
 8002a7c:	08015704 	.word	0x08015704
  ldr r2, =_sbss
 8002a80:	240046e0 	.word	0x240046e0
  ldr r4, =_ebss
 8002a84:	24025398 	.word	0x24025398

08002a88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a88:	e7fe      	b.n	8002a88 <ADC3_IRQHandler>
	...

08002a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a92:	2003      	movs	r0, #3
 8002a94:	f001 fff0 	bl	8004a78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a98:	f005 fee0 	bl	800885c <HAL_RCC_GetSysClockFreq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <HAL_Init+0x68>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	4913      	ldr	r1, [pc, #76]	@ (8002af8 <HAL_Init+0x6c>)
 8002aaa:	5ccb      	ldrb	r3, [r1, r3]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <HAL_Init+0x68>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a0e      	ldr	r2, [pc, #56]	@ (8002af8 <HAL_Init+0x6c>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8002acc:	4a0b      	ldr	r2, [pc, #44]	@ (8002afc <HAL_Init+0x70>)
 8002ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b00 <HAL_Init+0x74>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad6:	200f      	movs	r0, #15
 8002ad8:	f000 f814 	bl	8002b04 <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e002      	b.n	8002aec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae6:	f7ff fc83 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58024400 	.word	0x58024400
 8002af8:	08013004 	.word	0x08013004
 8002afc:	2400001c 	.word	0x2400001c
 8002b00:	24000018 	.word	0x24000018

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b0c:	4b15      	ldr	r3, [pc, #84]	@ (8002b64 <HAL_InitTick+0x60>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e021      	b.n	8002b5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <HAL_InitTick+0x64>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_InitTick+0x60>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 ffd5 	bl	8004ade <HAL_SYSTICK_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00e      	b.n	8002b5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d80a      	bhi.n	8002b5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b4c:	f001 ff9f 	bl	8004a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b50:	4a06      	ldr	r2, [pc, #24]	@ (8002b6c <HAL_InitTick+0x68>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	24000024 	.word	0x24000024
 8002b68:	24000018 	.word	0x24000018
 8002b6c:	24000020 	.word	0x24000020

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	@ (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	24000024 	.word	0x24000024
 8002b94:	24025088 	.word	0x24025088

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	24025088 	.word	0x24025088

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_Delay+0x44>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	24000024 	.word	0x24000024

08002bf8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_GetREVID+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0c1b      	lsrs	r3, r3, #16
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	5c001000 	.word	0x5c001000

08002c10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3360      	adds	r3, #96	@ 0x60
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b087      	sub	sp, #28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3360      	adds	r3, #96	@ 0x60
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	601a      	str	r2, [r3, #0]
  }
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3330      	adds	r3, #48	@ 0x30
 8002d56:	461a      	mov	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	4413      	add	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	211f      	movs	r1, #31
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	401a      	ands	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 011f 	and.w	r1, r3, #31
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	0e5b      	lsrs	r3, r3, #25
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	4413      	add	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0d1b      	lsrs	r3, r3, #20
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2107      	movs	r1, #7
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0d1b      	lsrs	r3, r3, #20
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0318 	and.w	r3, r3, #24
 8002e3e:	4908      	ldr	r1, [pc, #32]	@ (8002e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e40:	40d9      	lsrs	r1, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	400b      	ands	r3, r1
 8002e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	000fffff 	.word	0x000fffff

08002e64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 031f 	and.w	r3, r3, #31
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6093      	str	r3, [r2, #8]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	5fffffc0 	.word	0x5fffffc0

08002ea4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb8:	d101      	bne.n	8002ebe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002eda:	4013      	ands	r3, r2
 8002edc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	6fffffc0 	.word	0x6fffffc0

08002ef4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f08:	d101      	bne.n	8002f0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <LL_ADC_Enable+0x24>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	7fffffc0 	.word	0x7fffffc0

08002f44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <LL_ADC_Disable+0x24>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	f043 0202 	orr.w	r2, r3, #2
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	7fffffc0 	.word	0x7fffffc0

08002f6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <LL_ADC_IsEnabled+0x18>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <LL_ADC_IsEnabled+0x1a>
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d101      	bne.n	8002faa <LL_ADC_IsDisableOngoing+0x18>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_ADC_IsDisableOngoing+0x1a>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <LL_ADC_REG_StartConversion+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	f043 0204 	orr.w	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	7fffffc0 	.word	0x7fffffc0

08002fe0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <LL_ADC_REG_StopConversion+0x24>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	7fffffc0 	.word	0x7fffffc0

08003008 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d101      	bne.n	8003020 <LL_ADC_REG_IsConversionOngoing+0x18>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <LL_ADC_INJ_StopConversion+0x24>)
 800303e:	4013      	ands	r3, r2
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	7fffffc0 	.word	0x7fffffc0

08003058 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b08      	cmp	r3, #8
 800306a:	d101      	bne.n	8003070 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b089      	sub	sp, #36	@ 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e18f      	b.n	80033ba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fe f99b 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff feef 	bl	8002ea4 <LL_ADC_IsDeepPowerDownEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fed5 	bl	8002e80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff0a 	bl	8002ef4 <LL_ADC_IsInternalRegulatorEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d114      	bne.n	8003110 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff feee 	bl	8002ecc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f0:	4b87      	ldr	r3, [pc, #540]	@ (8003310 <HAL_ADC_Init+0x290>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	4a87      	ldr	r2, [pc, #540]	@ (8003314 <HAL_ADC_Init+0x294>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003102:	e002      	b.n	800310a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3b01      	subs	r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f9      	bne.n	8003104 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff feed 	bl	8002ef4 <LL_ADC_IsInternalRegulatorEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10d      	bne.n	800313c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	f043 0210 	orr.w	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff61 	bl	8003008 <LL_ADC_REG_IsConversionOngoing>
 8003146:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8129 	bne.w	80033a8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f040 8125 	bne.w	80033a8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003162:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fefa 	bl	8002f6c <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d136      	bne.n	80031ec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a65      	ldr	r2, [pc, #404]	@ (8003318 <HAL_ADC_Init+0x298>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_ADC_Init+0x112>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a63      	ldr	r2, [pc, #396]	@ (800331c <HAL_ADC_Init+0x29c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10e      	bne.n	80031b0 <HAL_ADC_Init+0x130>
 8003192:	4861      	ldr	r0, [pc, #388]	@ (8003318 <HAL_ADC_Init+0x298>)
 8003194:	f7ff feea 	bl	8002f6c <LL_ADC_IsEnabled>
 8003198:	4604      	mov	r4, r0
 800319a:	4860      	ldr	r0, [pc, #384]	@ (800331c <HAL_ADC_Init+0x29c>)
 800319c:	f7ff fee6 	bl	8002f6c <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4323      	orrs	r3, r4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e008      	b.n	80031c2 <HAL_ADC_Init+0x142>
 80031b0:	485b      	ldr	r0, [pc, #364]	@ (8003320 <HAL_ADC_Init+0x2a0>)
 80031b2:	f7ff fedb 	bl	8002f6c <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a53      	ldr	r2, [pc, #332]	@ (8003318 <HAL_ADC_Init+0x298>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_ADC_Init+0x15a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a51      	ldr	r2, [pc, #324]	@ (800331c <HAL_ADC_Init+0x29c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_ADC_Init+0x15e>
 80031da:	4a52      	ldr	r2, [pc, #328]	@ (8003324 <HAL_ADC_Init+0x2a4>)
 80031dc:	e000      	b.n	80031e0 <HAL_ADC_Init+0x160>
 80031de:	4a52      	ldr	r2, [pc, #328]	@ (8003328 <HAL_ADC_Init+0x2a8>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f7ff fd12 	bl	8002c10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031ec:	f7ff fd04 	bl	8002bf8 <HAL_GetREVID>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d914      	bls.n	8003224 <HAL_ADC_Init+0x1a4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d110      	bne.n	8003224 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7d5b      	ldrb	r3, [r3, #21]
 8003206:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800320c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003212:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7f1b      	ldrb	r3, [r3, #28]
 8003218:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800321a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321c:	f043 030c 	orr.w	r3, r3, #12
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e00d      	b.n	8003240 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7d5b      	ldrb	r3, [r3, #21]
 8003228:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800322e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003234:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7f1b      	ldrb	r3, [r3, #28]
 800323a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7f1b      	ldrb	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	3b01      	subs	r3, #1
 800324e:	045b      	lsls	r3, r3, #17
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	4b2c      	ldr	r3, [pc, #176]	@ (800332c <HAL_ADC_Init+0x2ac>)
 800327a:	4013      	ands	r3, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	430b      	orrs	r3, r1
 8003284:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff febc 	bl	8003008 <LL_ADC_REG_IsConversionOngoing>
 8003290:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fede 	bl	8003058 <LL_ADC_INJ_IsConversionOngoing>
 800329c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d15f      	bne.n	8003364 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d15c      	bne.n	8003364 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7d1b      	ldrb	r3, [r3, #20]
 80032ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	4b1c      	ldr	r3, [pc, #112]	@ (8003330 <HAL_ADC_Init+0x2b0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	69b9      	ldr	r1, [r7, #24]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d130      	bne.n	8003338 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <HAL_ADC_Init+0x2b4>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0411      	lsls	r1, r2, #16
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032fe:	430a      	orrs	r2, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	611a      	str	r2, [r3, #16]
 800330c:	e01c      	b.n	8003348 <HAL_ADC_Init+0x2c8>
 800330e:	bf00      	nop
 8003310:	24000018 	.word	0x24000018
 8003314:	053e2d63 	.word	0x053e2d63
 8003318:	40022000 	.word	0x40022000
 800331c:	40022100 	.word	0x40022100
 8003320:	58026000 	.word	0x58026000
 8003324:	40022300 	.word	0x40022300
 8003328:	58026300 	.word	0x58026300
 800332c:	fff0c003 	.word	0xfff0c003
 8003330:	ffffbffc 	.word	0xffffbffc
 8003334:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f001 f812 	bl	8004388 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d10c      	bne.n	8003386 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f023 010f 	bic.w	r1, r3, #15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30
 8003384:	e007      	b.n	8003396 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 020f 	bic.w	r2, r2, #15
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80033a6:	e007      	b.n	80033b8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	f043 0210 	orr.w	r2, r3, #16
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	@ 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd90      	pop	{r4, r7, pc}
 80033c2:	bf00      	nop

080033c4 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e16e      	b.n	80036b4 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	f043 0202 	orr.w	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80033e2:	2103      	movs	r1, #3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fd95 	bl	8003f14 <ADC_ConversionStop>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80033fc:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fecb 	bl	80041a0 <ADC_Disable>
 800340a:	4603      	mov	r3, r0
 800340c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b8c      	ldr	r3, [pc, #560]	@ (8003658 <HAL_ADC_DeInit+0x294>)
 8003426:	400b      	ands	r3, r1
 8003428:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003432:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8003442:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003452:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8003462:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003472:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b77      	ldr	r3, [pc, #476]	@ (800365c <HAL_ADC_DeInit+0x298>)
 8003480:	400b      	ands	r3, r1
 8003482:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8003492:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 80034a2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80034b2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80034d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80034e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80034fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003510:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b50      	ldr	r3, [pc, #320]	@ (8003660 <HAL_ADC_DeInit+0x29c>)
 8003520:	400b      	ands	r3, r1
 8003522:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b4d      	ldr	r3, [pc, #308]	@ (8003664 <HAL_ADC_DeInit+0x2a0>)
 8003530:	400b      	ands	r3, r1
 8003532:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b49      	ldr	r3, [pc, #292]	@ (8003664 <HAL_ADC_DeInit+0x2a0>)
 8003540:	400b      	ands	r3, r1
 8003542:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b46      	ldr	r3, [pc, #280]	@ (8003668 <HAL_ADC_DeInit+0x2a4>)
 8003550:	400b      	ands	r3, r1
 8003552:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2200      	movs	r2, #0
 800356e:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b34      	ldr	r3, [pc, #208]	@ (800366c <HAL_ADC_DeInit+0x2a8>)
 800359a:	400b      	ands	r3, r1
 800359c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <HAL_ADC_DeInit+0x2a8>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b2a      	ldr	r3, [pc, #168]	@ (800366c <HAL_ADC_DeInit+0x2a8>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 80035d8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_ADC_DeInit+0x2ac>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_ADC_DeInit+0x22c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <HAL_ADC_DeInit+0x2b0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10e      	bne.n	800360e <HAL_ADC_DeInit+0x24a>
 80035f0:	481f      	ldr	r0, [pc, #124]	@ (8003670 <HAL_ADC_DeInit+0x2ac>)
 80035f2:	f7ff fcbb 	bl	8002f6c <LL_ADC_IsEnabled>
 80035f6:	4604      	mov	r4, r0
 80035f8:	481e      	ldr	r0, [pc, #120]	@ (8003674 <HAL_ADC_DeInit+0x2b0>)
 80035fa:	f7ff fcb7 	bl	8002f6c <LL_ADC_IsEnabled>
 80035fe:	4603      	mov	r3, r0
 8003600:	4323      	orrs	r3, r4
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e008      	b.n	8003620 <HAL_ADC_DeInit+0x25c>
 800360e:	481a      	ldr	r0, [pc, #104]	@ (8003678 <HAL_ADC_DeInit+0x2b4>)
 8003610:	f7ff fcac 	bl	8002f6c <LL_ADC_IsEnabled>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d036      	beq.n	8003692 <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a11      	ldr	r2, [pc, #68]	@ (8003670 <HAL_ADC_DeInit+0x2ac>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_ADC_DeInit+0x274>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a10      	ldr	r2, [pc, #64]	@ (8003674 <HAL_ADC_DeInit+0x2b0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_ADC_DeInit+0x278>
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_ADC_DeInit+0x2b8>)
 800363a:	e000      	b.n	800363e <HAL_ADC_DeInit+0x27a>
 800363c:	4b10      	ldr	r3, [pc, #64]	@ (8003680 <HAL_ADC_DeInit+0x2bc>)
 800363e:	6899      	ldr	r1, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0a      	ldr	r2, [pc, #40]	@ (8003670 <HAL_ADC_DeInit+0x2ac>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_ADC_DeInit+0x290>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <HAL_ADC_DeInit+0x2b0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d117      	bne.n	8003684 <HAL_ADC_DeInit+0x2c0>
 8003654:	4a09      	ldr	r2, [pc, #36]	@ (800367c <HAL_ADC_DeInit+0x2b8>)
 8003656:	e016      	b.n	8003686 <HAL_ADC_DeInit+0x2c2>
 8003658:	fffff800 	.word	0xfffff800
 800365c:	fc00f81c 	.word	0xfc00f81c
 8003660:	e0820830 	.word	0xe0820830
 8003664:	e0820820 	.word	0xe0820820
 8003668:	fffff820 	.word	0xfffff820
 800366c:	fff00000 	.word	0xfff00000
 8003670:	40022000 	.word	0x40022000
 8003674:	40022100 	.word	0x40022100
 8003678:	58026000 	.word	0x58026000
 800367c:	40022300 	.word	0x40022300
 8003680:	58026300 	.word	0x58026300
 8003684:	4a0d      	ldr	r2, [pc, #52]	@ (80036bc <HAL_ADC_DeInit+0x2f8>)
 8003686:	4b0e      	ldr	r3, [pc, #56]	@ (80036c0 <HAL_ADC_DeInit+0x2fc>)
 8003688:	400b      	ands	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fd ff4f 	bl	8001530 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	58026300 	.word	0x58026300
 80036c0:	fe0030e0 	.word	0xfe0030e0

080036c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a55      	ldr	r2, [pc, #340]	@ (800382c <HAL_ADC_Start_DMA+0x168>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_ADC_Start_DMA+0x20>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a54      	ldr	r2, [pc, #336]	@ (8003830 <HAL_ADC_Start_DMA+0x16c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_Start_DMA+0x24>
 80036e4:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_ADC_Start_DMA+0x170>)
 80036e6:	e000      	b.n	80036ea <HAL_ADC_Start_DMA+0x26>
 80036e8:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_ADC_Start_DMA+0x174>)
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fbba 	bl	8002e64 <LL_ADC_GetMultimode>
 80036f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fc86 	bl	8003008 <LL_ADC_REG_IsConversionOngoing>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 808c 	bne.w	800381c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_ADC_Start_DMA+0x4e>
 800370e:	2302      	movs	r3, #2
 8003710:	e087      	b.n	8003822 <HAL_ADC_Start_DMA+0x15e>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b05      	cmp	r3, #5
 8003724:	d002      	beq.n	800372c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b09      	cmp	r3, #9
 800372a:	d170      	bne.n	800380e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fcad 	bl	800408c <ADC_Enable>
 8003732:	4603      	mov	r3, r0
 8003734:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d163      	bne.n	8003804 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003740:	4b3e      	ldr	r3, [pc, #248]	@ (800383c <HAL_ADC_Start_DMA+0x178>)
 8003742:	4013      	ands	r3, r2
 8003744:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a37      	ldr	r2, [pc, #220]	@ (8003830 <HAL_ADC_Start_DMA+0x16c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d002      	beq.n	800375c <HAL_ADC_Start_DMA+0x98>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	e000      	b.n	800375e <HAL_ADC_Start_DMA+0x9a>
 800375c:	4b33      	ldr	r3, [pc, #204]	@ (800382c <HAL_ADC_Start_DMA+0x168>)
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	4293      	cmp	r3, r2
 8003764:	d002      	beq.n	800376c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	f023 0206 	bic.w	r2, r3, #6
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003790:	e002      	b.n	8003798 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379c:	4a28      	ldr	r2, [pc, #160]	@ (8003840 <HAL_ADC_Start_DMA+0x17c>)
 800379e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	4a27      	ldr	r2, [pc, #156]	@ (8003844 <HAL_ADC_Start_DMA+0x180>)
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ac:	4a26      	ldr	r2, [pc, #152]	@ (8003848 <HAL_ADC_Start_DMA+0x184>)
 80037ae:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	221c      	movs	r2, #28
 80037b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0210 	orr.w	r2, r2, #16
 80037ce:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f7ff fadf 	bl	8002d9e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3340      	adds	r3, #64	@ 0x40
 80037ea:	4619      	mov	r1, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f002 f870 	bl	80058d4 <HAL_DMA_Start_IT>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fbdb 	bl	8002fb8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003802:	e00d      	b.n	8003820 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800380c:	e008      	b.n	8003820 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800381a:	e001      	b.n	8003820 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40022000 	.word	0x40022000
 8003830:	40022100 	.word	0x40022100
 8003834:	40022300 	.word	0x40022300
 8003838:	58026300 	.word	0x58026300
 800383c:	fffff0fe 	.word	0xfffff0fe
 8003840:	0800425f 	.word	0x0800425f
 8003844:	08004337 	.word	0x08004337
 8003848:	08004353 	.word	0x08004353

0800384c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b0a1      	sub	sp, #132	@ 0x84
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a9d      	ldr	r2, [pc, #628]	@ (8003b04 <HAL_ADC_ConfigChannel+0x290>)
 800388e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_ADC_ConfigChannel+0x2a>
 800389a:	2302      	movs	r3, #2
 800389c:	e321      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x66e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fbac 	bl	8003008 <LL_ADC_REG_IsConversionOngoing>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 8306 	bne.w	8003ec4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d108      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x62>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	2201      	movs	r2, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	e016      	b.n	8003904 <HAL_ADC_ConfigChannel+0x90>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038e6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80038ee:	2320      	movs	r3, #32
 80038f0:	e003      	b.n	80038fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80038f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	2201      	movs	r2, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	69d1      	ldr	r1, [r2, #28]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	430b      	orrs	r3, r1
 8003910:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	f7ff fa11 	bl	8002d46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fb6d 	bl	8003008 <LL_ADC_REG_IsConversionOngoing>
 800392e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fb8f 	bl	8003058 <LL_ADC_INJ_IsConversionOngoing>
 800393a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800393c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 80b3 	bne.w	8003aaa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 80af 	bne.w	8003aaa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	461a      	mov	r2, r3
 800395a:	f7ff fa33 	bl	8002dc4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800395e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <HAL_ADC_ConfigChannel+0x294>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800396a:	d10b      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x110>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	e01d      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x14c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x136>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	e00a      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x14c>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d027      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6919      	ldr	r1, [r3, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039d8:	f7ff f94e 	bl	8002c78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6919      	ldr	r1, [r3, #16]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	7e5b      	ldrb	r3, [r3, #25]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x17e>
 80039ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x180>
 80039f2:	2300      	movs	r3, #0
 80039f4:	461a      	mov	r2, r3
 80039f6:	f7ff f978 	bl	8002cea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6919      	ldr	r1, [r3, #16]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	7e1b      	ldrb	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x19c>
 8003a0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a0e:	e000      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x19e>
 8003a10:	2300      	movs	r3, #0
 8003a12:	461a      	mov	r2, r3
 8003a14:	f7ff f950 	bl	8002cb8 <LL_ADC_SetDataRightShift>
 8003a18:	e047      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	069b      	lsls	r3, r3, #26
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d107      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a3c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	069b      	lsls	r3, r3, #26
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d107      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a60:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	069b      	lsls	r3, r3, #26
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d107      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a84:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	069b      	lsls	r3, r3, #26
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d107      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003aa8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fa5c 	bl	8002f6c <LL_ADC_IsEnabled>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f040 820d 	bne.w	8003ed6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f7ff f9a7 	bl	8002e1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <HAL_ADC_ConfigChannel+0x290>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	f040 8133 	bne.w	8003d40 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d110      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x298>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	0e9b      	lsrs	r3, r3, #26
 8003af0:	3301      	adds	r3, #1
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	bf94      	ite	ls
 8003afa:	2301      	movls	r3, #1
 8003afc:	2300      	movhi	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e01e      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x2cc>
 8003b02:	bf00      	nop
 8003b04:	47ff0000 	.word	0x47ff0000
 8003b08:	5c001000 	.word	0x5c001000
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	e003      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003b28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2b09      	cmp	r3, #9
 8003b38:	bf94      	ite	ls
 8003b3a:	2301      	movls	r3, #1
 8003b3c:	2300      	movhi	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d079      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x2ec>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	3301      	adds	r3, #1
 8003b58:	069b      	lsls	r3, r3, #26
 8003b5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b5e:	e015      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x318>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b70:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e003      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x338>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	e017      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x368>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x38e>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	051b      	lsls	r3, r3, #20
 8003c00:	e018      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x3c0>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003c1a:	2320      	movs	r3, #32
 8003c1c:	e003      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c34:	430b      	orrs	r3, r1
 8003c36:	e07e      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d107      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x3e0>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	069b      	lsls	r3, r3, #26
 8003c4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c52:	e015      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x40c>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	e003      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	069b      	lsls	r3, r3, #26
 8003c7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x42c>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0e9b      	lsrs	r3, r3, #26
 8003c92:	3301      	adds	r3, #1
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	e017      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x45c>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	61bb      	str	r3, [r7, #24]
  return result;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	e003      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2101      	movs	r1, #1
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	ea42 0103 	orr.w	r1, r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10d      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x488>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	0e9b      	lsrs	r3, r3, #26
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b1e      	subs	r3, #30
 8003cf4:	051b      	lsls	r3, r3, #20
 8003cf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	e01b      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x4c0>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	60fb      	str	r3, [r7, #12]
  return result;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003d14:	2320      	movs	r3, #32
 8003d16:	e003      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3301      	adds	r3, #1
 8003d22:	f003 021f 	and.w	r2, r3, #31
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3b1e      	subs	r3, #30
 8003d2e:	051b      	lsls	r3, r3, #20
 8003d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d34:	430b      	orrs	r3, r1
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	6892      	ldr	r2, [r2, #8]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7ff f842 	bl	8002dc4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f280 80c6 	bge.w	8003ed6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a67      	ldr	r2, [pc, #412]	@ (8003eec <HAL_ADC_ConfigChannel+0x678>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d004      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x4ea>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a65      	ldr	r2, [pc, #404]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x67c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x4ee>
 8003d5e:	4b65      	ldr	r3, [pc, #404]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x680>)
 8003d60:	e000      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x4f0>
 8003d62:	4b65      	ldr	r3, [pc, #404]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x684>)
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe ff79 	bl	8002c5c <LL_ADC_GetCommonPathInternalCh>
 8003d6a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a5e      	ldr	r2, [pc, #376]	@ (8003eec <HAL_ADC_ConfigChannel+0x678>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_ADC_ConfigChannel+0x50c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x67c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10e      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x52a>
 8003d80:	485a      	ldr	r0, [pc, #360]	@ (8003eec <HAL_ADC_ConfigChannel+0x678>)
 8003d82:	f7ff f8f3 	bl	8002f6c <LL_ADC_IsEnabled>
 8003d86:	4604      	mov	r4, r0
 8003d88:	4859      	ldr	r0, [pc, #356]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x67c>)
 8003d8a:	f7ff f8ef 	bl	8002f6c <LL_ADC_IsEnabled>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4323      	orrs	r3, r4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e008      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x53c>
 8003d9e:	4857      	ldr	r0, [pc, #348]	@ (8003efc <HAL_ADC_ConfigChannel+0x688>)
 8003da0:	f7ff f8e4 	bl	8002f6c <LL_ADC_IsEnabled>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d07d      	beq.n	8003eb0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a51      	ldr	r2, [pc, #324]	@ (8003f00 <HAL_ADC_ConfigChannel+0x68c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d130      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x5ac>
 8003dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d12b      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8003efc <HAL_ADC_ConfigChannel+0x688>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	f040 8081 	bne.w	8003ed6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a44      	ldr	r2, [pc, #272]	@ (8003eec <HAL_ADC_ConfigChannel+0x678>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_ADC_ConfigChannel+0x574>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a43      	ldr	r2, [pc, #268]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x67c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x578>
 8003de8:	4a42      	ldr	r2, [pc, #264]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x680>)
 8003dea:	e000      	b.n	8003dee <HAL_ADC_ConfigChannel+0x57a>
 8003dec:	4a42      	ldr	r2, [pc, #264]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x684>)
 8003dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fe ff1d 	bl	8002c36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dfc:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <HAL_ADC_ConfigChannel+0x690>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	4a41      	ldr	r2, [pc, #260]	@ (8003f08 <HAL_ADC_ConfigChannel+0x694>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e10:	e002      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f9      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e1e:	e05a      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a39      	ldr	r2, [pc, #228]	@ (8003f0c <HAL_ADC_ConfigChannel+0x698>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d11e      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x5f4>
 8003e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d119      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a30      	ldr	r2, [pc, #192]	@ (8003efc <HAL_ADC_ConfigChannel+0x688>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d14b      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2a      	ldr	r2, [pc, #168]	@ (8003eec <HAL_ADC_ConfigChannel+0x678>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x5de>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a28      	ldr	r2, [pc, #160]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x67c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x5e2>
 8003e52:	4a28      	ldr	r2, [pc, #160]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x680>)
 8003e54:	e000      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x5e4>
 8003e56:	4a28      	ldr	r2, [pc, #160]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x684>)
 8003e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe fee8 	bl	8002c36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e66:	e036      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <HAL_ADC_ConfigChannel+0x69c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d131      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
 8003e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d12c      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <HAL_ADC_ConfigChannel+0x688>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d127      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a18      	ldr	r2, [pc, #96]	@ (8003eec <HAL_ADC_ConfigChannel+0x678>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_ADC_ConfigChannel+0x626>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x67c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x62a>
 8003e9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x680>)
 8003e9c:	e000      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x62c>
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x684>)
 8003ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f7fe fec4 	bl	8002c36 <LL_ADC_SetCommonPathInternalCh>
 8003eae:	e012      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003ec2:	e008      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ede:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3784      	adds	r7, #132	@ 0x84
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40022100 	.word	0x40022100
 8003ef4:	40022300 	.word	0x40022300
 8003ef8:	58026300 	.word	0x58026300
 8003efc:	58026000 	.word	0x58026000
 8003f00:	cb840000 	.word	0xcb840000
 8003f04:	24000018 	.word	0x24000018
 8003f08:	053e2d63 	.word	0x053e2d63
 8003f0c:	c7520000 	.word	0xc7520000
 8003f10:	cfb80000 	.word	0xcfb80000

08003f14 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f86c 	bl	8003008 <LL_ADC_REG_IsConversionOngoing>
 8003f30:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff f88e 	bl	8003058 <LL_ADC_INJ_IsConversionOngoing>
 8003f3c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8098 	beq.w	800407c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02a      	beq.n	8003fb0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7d5b      	ldrb	r3, [r3, #21]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d126      	bne.n	8003fb0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7d1b      	ldrb	r3, [r3, #20]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d122      	bne.n	8003fb0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f6e:	e014      	b.n	8003f9a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4a45      	ldr	r2, [pc, #276]	@ (8004088 <ADC_ConversionStop+0x174>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d90d      	bls.n	8003f94 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	f043 0210 	orr.w	r2, r3, #16
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e074      	b.n	800407e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa4:	2b40      	cmp	r3, #64	@ 0x40
 8003fa6:	d1e3      	bne.n	8003f70 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2240      	movs	r2, #64	@ 0x40
 8003fae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d014      	beq.n	8003fe0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f824 	bl	8003008 <LL_ADC_REG_IsConversionOngoing>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00c      	beq.n	8003fe0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe ffe1 	bl	8002f92 <LL_ADC_IsDisableOngoing>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f800 	bl	8002fe0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d014      	beq.n	8004010 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff f834 	bl	8003058 <LL_ADC_INJ_IsConversionOngoing>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe ffc9 	bl	8002f92 <LL_ADC_IsDisableOngoing>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff f810 	bl	8003030 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d005      	beq.n	8004022 <ADC_ConversionStop+0x10e>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d105      	bne.n	8004028 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800401c:	230c      	movs	r3, #12
 800401e:	617b      	str	r3, [r7, #20]
        break;
 8004020:	e005      	b.n	800402e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004022:	2308      	movs	r3, #8
 8004024:	617b      	str	r3, [r7, #20]
        break;
 8004026:	e002      	b.n	800402e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004028:	2304      	movs	r3, #4
 800402a:	617b      	str	r3, [r7, #20]
        break;
 800402c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800402e:	f7fe fdb3 	bl	8002b98 <HAL_GetTick>
 8004032:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004034:	e01b      	b.n	800406e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004036:	f7fe fdaf 	bl	8002b98 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b05      	cmp	r3, #5
 8004042:	d914      	bls.n	800406e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e007      	b.n	800407e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1dc      	bne.n	8004036 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	000cdbff 	.word	0x000cdbff

0800408c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe ff67 	bl	8002f6c <LL_ADC_IsEnabled>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d16e      	bne.n	8004182 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	4b38      	ldr	r3, [pc, #224]	@ (800418c <ADC_Enable+0x100>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00d      	beq.n	80040ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	f043 0210 	orr.w	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e05a      	b.n	8004184 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe ff22 	bl	8002f1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040d8:	f7fe fd5e 	bl	8002b98 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004190 <ADC_Enable+0x104>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <ADC_Enable+0x66>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a29      	ldr	r2, [pc, #164]	@ (8004194 <ADC_Enable+0x108>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <ADC_Enable+0x6a>
 80040f2:	4b29      	ldr	r3, [pc, #164]	@ (8004198 <ADC_Enable+0x10c>)
 80040f4:	e000      	b.n	80040f8 <ADC_Enable+0x6c>
 80040f6:	4b29      	ldr	r3, [pc, #164]	@ (800419c <ADC_Enable+0x110>)
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe feb3 	bl	8002e64 <LL_ADC_GetMultimode>
 80040fe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <ADC_Enable+0x108>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d002      	beq.n	8004110 <ADC_Enable+0x84>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	e000      	b.n	8004112 <ADC_Enable+0x86>
 8004110:	4b1f      	ldr	r3, [pc, #124]	@ (8004190 <ADC_Enable+0x104>)
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	4293      	cmp	r3, r2
 8004118:	d02c      	beq.n	8004174 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d130      	bne.n	8004182 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004120:	e028      	b.n	8004174 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe ff20 	bl	8002f6c <LL_ADC_IsEnabled>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fef0 	bl	8002f1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800413c:	f7fe fd2c 	bl	8002b98 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d914      	bls.n	8004174 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d00d      	beq.n	8004174 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	f043 0210 	orr.w	r2, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	f043 0201 	orr.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e007      	b.n	8004184 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d1cf      	bne.n	8004122 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	8000003f 	.word	0x8000003f
 8004190:	40022000 	.word	0x40022000
 8004194:	40022100 	.word	0x40022100
 8004198:	40022300 	.word	0x40022300
 800419c:	58026300 	.word	0x58026300

080041a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fef0 	bl	8002f92 <LL_ADC_IsDisableOngoing>
 80041b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fed7 	bl	8002f6c <LL_ADC_IsEnabled>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d047      	beq.n	8004254 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d144      	bne.n	8004254 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030d 	and.w	r3, r3, #13
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10c      	bne.n	80041f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe feb1 	bl	8002f44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2203      	movs	r2, #3
 80041e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ea:	f7fe fcd5 	bl	8002b98 <HAL_GetTick>
 80041ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041f0:	e029      	b.n	8004246 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f6:	f043 0210 	orr.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e023      	b.n	8004256 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800420e:	f7fe fcc3 	bl	8002b98 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d914      	bls.n	8004246 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00d      	beq.n	8004246 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	f043 0210 	orr.w	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	f043 0201 	orr.w	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e007      	b.n	8004256 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1dc      	bne.n	800420e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004270:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004274:	2b00      	cmp	r3, #0
 8004276:	d14b      	bne.n	8004310 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d021      	beq.n	80042d6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fd42 	bl	8002d20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d032      	beq.n	8004308 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d12b      	bne.n	8004308 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11f      	bne.n	8004308 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80042d4:	e018      	b.n	8004308 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d111      	bne.n	8004308 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7fd fefd 	bl	8002108 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800430e:	e00e      	b.n	800432e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fa9f 	bl	8003860 <HAL_ADC_ErrorCallback>
}
 8004322:	e004      	b.n	800432e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	4798      	blx	r3
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff fa81 	bl	800384c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fa71 	bl	8003860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a7a      	ldr	r2, [pc, #488]	@ (8004580 <ADC_ConfigureBoostMode+0x1f8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <ADC_ConfigureBoostMode+0x1c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a79      	ldr	r2, [pc, #484]	@ (8004584 <ADC_ConfigureBoostMode+0x1fc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d109      	bne.n	80043b8 <ADC_ConfigureBoostMode+0x30>
 80043a4:	4b78      	ldr	r3, [pc, #480]	@ (8004588 <ADC_ConfigureBoostMode+0x200>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e008      	b.n	80043ca <ADC_ConfigureBoostMode+0x42>
 80043b8:	4b74      	ldr	r3, [pc, #464]	@ (800458c <ADC_ConfigureBoostMode+0x204>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01c      	beq.n	8004408 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80043ce:	f004 fbbf 	bl	8008b50 <HAL_RCC_GetHCLKFreq>
 80043d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043dc:	d010      	beq.n	8004400 <ADC_ConfigureBoostMode+0x78>
 80043de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043e2:	d873      	bhi.n	80044cc <ADC_ConfigureBoostMode+0x144>
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d002      	beq.n	80043f0 <ADC_ConfigureBoostMode+0x68>
 80043ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043ee:	d16d      	bne.n	80044cc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	60fb      	str	r3, [r7, #12]
        break;
 80043fe:	e068      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	60fb      	str	r3, [r7, #12]
        break;
 8004406:	e064      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004408:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	f005 fe04 	bl	800a01c <HAL_RCCEx_GetPeriphCLKFreq>
 8004414:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800441e:	d051      	beq.n	80044c4 <ADC_ConfigureBoostMode+0x13c>
 8004420:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004424:	d854      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 8004426:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800442a:	d047      	beq.n	80044bc <ADC_ConfigureBoostMode+0x134>
 800442c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004430:	d84e      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 8004432:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004436:	d03d      	beq.n	80044b4 <ADC_ConfigureBoostMode+0x12c>
 8004438:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800443c:	d848      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 800443e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004442:	d033      	beq.n	80044ac <ADC_ConfigureBoostMode+0x124>
 8004444:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004448:	d842      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 800444a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800444e:	d029      	beq.n	80044a4 <ADC_ConfigureBoostMode+0x11c>
 8004450:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004454:	d83c      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 8004456:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800445a:	d01a      	beq.n	8004492 <ADC_ConfigureBoostMode+0x10a>
 800445c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004460:	d836      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 8004462:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004466:	d014      	beq.n	8004492 <ADC_ConfigureBoostMode+0x10a>
 8004468:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800446c:	d830      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 800446e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004472:	d00e      	beq.n	8004492 <ADC_ConfigureBoostMode+0x10a>
 8004474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004478:	d82a      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 800447a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800447e:	d008      	beq.n	8004492 <ADC_ConfigureBoostMode+0x10a>
 8004480:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004484:	d824      	bhi.n	80044d0 <ADC_ConfigureBoostMode+0x148>
 8004486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800448a:	d002      	beq.n	8004492 <ADC_ConfigureBoostMode+0x10a>
 800448c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004490:	d11e      	bne.n	80044d0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	0c9b      	lsrs	r3, r3, #18
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	60fb      	str	r3, [r7, #12]
        break;
 80044a2:	e016      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	60fb      	str	r3, [r7, #12]
        break;
 80044aa:	e012      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	60fb      	str	r3, [r7, #12]
        break;
 80044b2:	e00e      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	60fb      	str	r3, [r7, #12]
        break;
 80044ba:	e00a      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	09db      	lsrs	r3, r3, #7
 80044c0:	60fb      	str	r3, [r7, #12]
        break;
 80044c2:	e006      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	60fb      	str	r3, [r7, #12]
        break;
 80044ca:	e002      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80044cc:	bf00      	nop
 80044ce:	e000      	b.n	80044d2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80044d0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80044d2:	f7fe fb91 	bl	8002bf8 <HAL_GetREVID>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044dc:	4293      	cmp	r3, r2
 80044de:	d815      	bhi.n	800450c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004590 <ADC_ConfigureBoostMode+0x208>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d908      	bls.n	80044fa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80044f8:	e03e      	b.n	8004578 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004508:	609a      	str	r2, [r3, #8]
}
 800450a:	e035      	b.n	8004578 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a1f      	ldr	r2, [pc, #124]	@ (8004594 <ADC_ConfigureBoostMode+0x20c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d808      	bhi.n	800452c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004528:	609a      	str	r2, [r3, #8]
}
 800452a:	e025      	b.n	8004578 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <ADC_ConfigureBoostMode+0x210>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d80a      	bhi.n	800454a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	e016      	b.n	8004578 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a13      	ldr	r2, [pc, #76]	@ (800459c <ADC_ConfigureBoostMode+0x214>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d80a      	bhi.n	8004568 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004564:	609a      	str	r2, [r3, #8]
}
 8004566:	e007      	b.n	8004578 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40022000 	.word	0x40022000
 8004584:	40022100 	.word	0x40022100
 8004588:	40022300 	.word	0x40022300
 800458c:	58026300 	.word	0x58026300
 8004590:	01312d00 	.word	0x01312d00
 8004594:	005f5e10 	.word	0x005f5e10
 8004598:	00bebc20 	.word	0x00bebc20
 800459c:	017d7840 	.word	0x017d7840

080045a0 <LL_ADC_IsEnabled>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <LL_ADC_IsEnabled+0x18>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <LL_ADC_IsEnabled+0x1a>
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <LL_ADC_StartCalibration>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <LL_ADC_StartCalibration+0x38>)
 80045da:	4013      	ands	r3, r2
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80045e8:	430a      	orrs	r2, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	3ffeffc0 	.word	0x3ffeffc0

08004604 <LL_ADC_IsCalibrationOnGoing>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004614:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004618:	d101      	bne.n	800461e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <LL_ADC_REG_IsConversionOngoing>:
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d101      	bne.n	8004644 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_ADCEx_Calibration_Start+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e04c      	b.n	800470c <HAL_ADCEx_Calibration_Start+0xb8>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fd90 	bl	80041a0 <ADC_Disable>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d135      	bne.n	80046f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800468e:	4b21      	ldr	r3, [pc, #132]	@ (8004714 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004690:	4013      	ands	r3, r2
 8004692:	f043 0202 	orr.w	r2, r3, #2
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff90 	bl	80045c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046a8:	e014      	b.n	80046d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3301      	adds	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4a19      	ldr	r2, [pc, #100]	@ (8004718 <HAL_ADCEx_Calibration_Start+0xc4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d30d      	bcc.n	80046d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046bc:	f023 0312 	bic.w	r3, r3, #18
 80046c0:	f043 0210 	orr.w	r2, r3, #16
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e01b      	b.n	800470c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff93 	bl	8004604 <LL_ADC_IsCalibrationOnGoing>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e2      	bne.n	80046aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	f043 0201 	orr.w	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80046f4:	e005      	b.n	8004702 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	f043 0210 	orr.w	r2, r3, #16
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	ffffeefd 	.word	0xffffeefd
 8004718:	25c3f800 	.word	0x25c3f800

0800471c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b09f      	sub	sp, #124	@ 0x7c
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004736:	2302      	movs	r3, #2
 8004738:	e0be      	b.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004746:	2300      	movs	r3, #0
 8004748:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5c      	ldr	r2, [pc, #368]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d102      	bne.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004754:	4b5b      	ldr	r3, [pc, #364]	@ (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	e001      	b.n	800475e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e09d      	b.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff ff54 	bl	800462c <LL_ADC_REG_IsConversionOngoing>
 8004784:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff4e 	bl	800462c <LL_ADC_REG_IsConversionOngoing>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d17f      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004798:	2b00      	cmp	r3, #0
 800479a:	d17c      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a47      	ldr	r2, [pc, #284]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a46      	ldr	r2, [pc, #280]	@ (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d101      	bne.n	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80047b0:	4b45      	ldr	r3, [pc, #276]	@ (80048c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047b2:	e000      	b.n	80047b6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80047b4:	4b45      	ldr	r3, [pc, #276]	@ (80048cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d039      	beq.n	8004834 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80047c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3a      	ldr	r2, [pc, #232]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a38      	ldr	r2, [pc, #224]	@ (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d10e      	bne.n	8004804 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80047e6:	4836      	ldr	r0, [pc, #216]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047e8:	f7ff feda 	bl	80045a0 <LL_ADC_IsEnabled>
 80047ec:	4604      	mov	r4, r0
 80047ee:	4835      	ldr	r0, [pc, #212]	@ (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047f0:	f7ff fed6 	bl	80045a0 <LL_ADC_IsEnabled>
 80047f4:	4603      	mov	r3, r0
 80047f6:	4323      	orrs	r3, r4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e008      	b.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004804:	4832      	ldr	r0, [pc, #200]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004806:	f7ff fecb 	bl	80045a0 <LL_ADC_IsEnabled>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d047      	beq.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800481a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	4b2d      	ldr	r3, [pc, #180]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004820:	4013      	ands	r3, r2
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	6811      	ldr	r1, [r2, #0]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	6892      	ldr	r2, [r2, #8]
 800482a:	430a      	orrs	r2, r1
 800482c:	431a      	orrs	r2, r3
 800482e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004830:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004832:	e03a      	b.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800483c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800483e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d10e      	bne.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004854:	481a      	ldr	r0, [pc, #104]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004856:	f7ff fea3 	bl	80045a0 <LL_ADC_IsEnabled>
 800485a:	4604      	mov	r4, r0
 800485c:	4819      	ldr	r0, [pc, #100]	@ (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800485e:	f7ff fe9f 	bl	80045a0 <LL_ADC_IsEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	4323      	orrs	r3, r4
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e008      	b.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004872:	4817      	ldr	r0, [pc, #92]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004874:	f7ff fe94 	bl	80045a0 <LL_ADC_IsEnabled>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800488e:	4013      	ands	r3, r2
 8004890:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004892:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004894:	e009      	b.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80048a8:	e000      	b.n	80048ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048aa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80048b4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	377c      	adds	r7, #124	@ 0x7c
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40022100 	.word	0x40022100
 80048c8:	40022300 	.word	0x40022300
 80048cc:	58026300 	.word	0x58026300
 80048d0:	58026000 	.word	0x58026000
 80048d4:	fffff0e0 	.word	0xfffff0e0

080048d8 <__NVIC_SetPriorityGrouping>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004918 <__NVIC_SetPriorityGrouping+0x40>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048f4:	4013      	ands	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004900:	4b06      	ldr	r3, [pc, #24]	@ (800491c <__NVIC_SetPriorityGrouping+0x44>)
 8004902:	4313      	orrs	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004906:	4a04      	ldr	r2, [pc, #16]	@ (8004918 <__NVIC_SetPriorityGrouping+0x40>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	60d3      	str	r3, [r2, #12]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	e000ed00 	.word	0xe000ed00
 800491c:	05fa0000 	.word	0x05fa0000

08004920 <__NVIC_GetPriorityGrouping>:
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004924:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <__NVIC_GetPriorityGrouping+0x18>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 0307 	and.w	r3, r3, #7
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <__NVIC_EnableIRQ>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	@ (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_SetPriority>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db0a      	blt.n	80049a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	490c      	ldr	r1, [pc, #48]	@ (80049c4 <__NVIC_SetPriority+0x4c>)
 8004992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	440b      	add	r3, r1
 800499c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049a0:	e00a      	b.n	80049b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4908      	ldr	r1, [pc, #32]	@ (80049c8 <__NVIC_SetPriority+0x50>)
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	3b04      	subs	r3, #4
 80049b0:	0112      	lsls	r2, r2, #4
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	440b      	add	r3, r1
 80049b6:	761a      	strb	r2, [r3, #24]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000e100 	.word	0xe000e100
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <NVIC_EncodePriority>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	@ 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f1c3 0307 	rsb	r3, r3, #7
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	bf28      	it	cs
 80049ea:	2304      	movcs	r3, #4
 80049ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d902      	bls.n	80049fc <NVIC_EncodePriority+0x30>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3b03      	subs	r3, #3
 80049fa:	e000      	b.n	80049fe <NVIC_EncodePriority+0x32>
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	401a      	ands	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43d9      	mvns	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	4313      	orrs	r3, r2
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3724      	adds	r7, #36	@ 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a44:	d301      	bcc.n	8004a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00f      	b.n	8004a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a74 <SysTick_Config+0x40>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a52:	210f      	movs	r1, #15
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a58:	f7ff ff8e 	bl	8004978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a5c:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <SysTick_Config+0x40>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a62:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <SysTick_Config+0x40>)
 8004a64:	2207      	movs	r2, #7
 8004a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	e000e010 	.word	0xe000e010

08004a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff29 	bl	80048d8 <__NVIC_SetPriorityGrouping>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9c:	f7ff ff40 	bl	8004920 <__NVIC_GetPriorityGrouping>
 8004aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff90 	bl	80049cc <NVIC_EncodePriority>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff5f 	bl	8004978 <__NVIC_SetPriority>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ff33 	bl	800493c <__NVIC_EnableIRQ>
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ffa4 	bl	8004a34 <SysTick_Config>
 8004aec:	4603      	mov	r3, r0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004afc:	f3bf 8f5f 	dmb	sy
}
 8004b00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b02:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <HAL_MPU_Disable+0x28>)
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	4a06      	ldr	r2, [pc, #24]	@ (8004b20 <HAL_MPU_Disable+0x28>)
 8004b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b0e:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_MPU_Disable+0x2c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	605a      	str	r2, [r3, #4]
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000ed00 	.word	0xe000ed00
 8004b24:	e000ed90 	.word	0xe000ed90

08004b28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b30:	4a0b      	ldr	r2, [pc, #44]	@ (8004b60 <HAL_MPU_Enable+0x38>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_MPU_Enable+0x3c>)
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_MPU_Enable+0x3c>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b46:	f3bf 8f4f 	dsb	sy
}
 8004b4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b4c:	f3bf 8f6f 	isb	sy
}
 8004b50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	e000ed90 	.word	0xe000ed90
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	785a      	ldrb	r2, [r3, #1]
 8004b74:	4b1d      	ldr	r3, [pc, #116]	@ (8004bec <HAL_MPU_ConfigRegion+0x84>)
 8004b76:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d029      	beq.n	8004bd4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004b80:	4a1a      	ldr	r2, [pc, #104]	@ (8004bec <HAL_MPU_ConfigRegion+0x84>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	7b1b      	ldrb	r3, [r3, #12]
 8004b8c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7adb      	ldrb	r3, [r3, #11]
 8004b92:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7a9b      	ldrb	r3, [r3, #10]
 8004b9a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	7b5b      	ldrb	r3, [r3, #13]
 8004ba2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004ba4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7b9b      	ldrb	r3, [r3, #14]
 8004baa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7bdb      	ldrb	r3, [r3, #15]
 8004bb2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7a5b      	ldrb	r3, [r3, #9]
 8004bba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7a1b      	ldrb	r3, [r3, #8]
 8004bc2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bc4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	7812      	ldrb	r2, [r2, #0]
 8004bca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bcc:	4a07      	ldr	r2, [pc, #28]	@ (8004bec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bd0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004bd2:	e005      	b.n	8004be0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_MPU_ConfigRegion+0x84>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004bda:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <HAL_MPU_ConfigRegion+0x84>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	611a      	str	r2, [r3, #16]
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	e000ed90 	.word	0xe000ed90

08004bf0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e014      	b.n	8004c2c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	791b      	ldrb	r3, [r3, #4]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fce2 	bl	80015dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	795b      	ldrb	r3, [r3, #5]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_DAC_ConfigChannel+0x18>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e12a      	b.n	8004ea2 <HAL_DAC_ConfigChannel+0x26e>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2202      	movs	r2, #2
 8004c56:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	f040 8081 	bne.w	8004d64 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c62:	f7fd ff99 	bl	8002b98 <HAL_GetTick>
 8004c66:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d140      	bne.n	8004cf0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c6e:	e018      	b.n	8004ca2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c70:	f7fd ff92 	bl	8002b98 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d911      	bls.n	8004ca2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c84:	4b89      	ldr	r3, [pc, #548]	@ (8004eac <HAL_DAC_ConfigChannel+0x278>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f043 0208 	orr.w	r2, r3, #8
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e0ff      	b.n	8004ea2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca8:	4b80      	ldr	r3, [pc, #512]	@ (8004eac <HAL_DAC_ConfigChannel+0x278>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1df      	bne.n	8004c70 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	f7fd ff7d 	bl	8002bb0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	6992      	ldr	r2, [r2, #24]
 8004cbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cc0:	e023      	b.n	8004d0a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cc2:	f7fd ff69 	bl	8002b98 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d90f      	bls.n	8004cf0 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da0a      	bge.n	8004cf0 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f043 0208 	orr.w	r2, r3, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2203      	movs	r2, #3
 8004cea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0d8      	b.n	8004ea2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dbe3      	blt.n	8004cc2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f7fd ff58 	bl	8002bb0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	6992      	ldr	r2, [r2, #24]
 8004d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	ea02 0103 	and.w	r1, r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	21ff      	movs	r1, #255	@ 0xff
 8004d46:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	ea02 0103 	and.w	r1, r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d11d      	bne.n	8004da8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d72:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	221f      	movs	r2, #31
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43db      	mvns	r3, r3
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4013      	ands	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dae:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2207      	movs	r2, #7
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d102      	bne.n	8004dd2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	e00f      	b.n	8004df2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d102      	bne.n	8004de0 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e008      	b.n	8004df2 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d102      	bne.n	8004dee <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004de8:	2301      	movs	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e001      	b.n	8004df2 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43da      	mvns	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	400a      	ands	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4013      	ands	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	22c0      	movs	r2, #192	@ 0xc0
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	400a      	ands	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20008000 	.word	0x20008000

08004eb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004eb8:	f7fd fe6e 	bl	8002b98 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e316      	b.n	80054f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a66      	ldr	r2, [pc, #408]	@ (8005068 <HAL_DMA_Init+0x1b8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d04a      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a65      	ldr	r2, [pc, #404]	@ (800506c <HAL_DMA_Init+0x1bc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d045      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a63      	ldr	r2, [pc, #396]	@ (8005070 <HAL_DMA_Init+0x1c0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d040      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a62      	ldr	r2, [pc, #392]	@ (8005074 <HAL_DMA_Init+0x1c4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d03b      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a60      	ldr	r2, [pc, #384]	@ (8005078 <HAL_DMA_Init+0x1c8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d036      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a5f      	ldr	r2, [pc, #380]	@ (800507c <HAL_DMA_Init+0x1cc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d031      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a5d      	ldr	r2, [pc, #372]	@ (8005080 <HAL_DMA_Init+0x1d0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d02c      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5c      	ldr	r2, [pc, #368]	@ (8005084 <HAL_DMA_Init+0x1d4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d027      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5a      	ldr	r2, [pc, #360]	@ (8005088 <HAL_DMA_Init+0x1d8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d022      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a59      	ldr	r2, [pc, #356]	@ (800508c <HAL_DMA_Init+0x1dc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d01d      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a57      	ldr	r2, [pc, #348]	@ (8005090 <HAL_DMA_Init+0x1e0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d018      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a56      	ldr	r2, [pc, #344]	@ (8005094 <HAL_DMA_Init+0x1e4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d013      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a54      	ldr	r2, [pc, #336]	@ (8005098 <HAL_DMA_Init+0x1e8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00e      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a53      	ldr	r2, [pc, #332]	@ (800509c <HAL_DMA_Init+0x1ec>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a51      	ldr	r2, [pc, #324]	@ (80050a0 <HAL_DMA_Init+0x1f0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_DMA_Init+0xb8>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a50      	ldr	r2, [pc, #320]	@ (80050a4 <HAL_DMA_Init+0x1f4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <HAL_DMA_Init+0xbc>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_DMA_Init+0xbe>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 813b 	beq.w	80051ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a37      	ldr	r2, [pc, #220]	@ (8005068 <HAL_DMA_Init+0x1b8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d04a      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a36      	ldr	r2, [pc, #216]	@ (800506c <HAL_DMA_Init+0x1bc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d045      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a34      	ldr	r2, [pc, #208]	@ (8005070 <HAL_DMA_Init+0x1c0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d040      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a33      	ldr	r2, [pc, #204]	@ (8005074 <HAL_DMA_Init+0x1c4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d03b      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a31      	ldr	r2, [pc, #196]	@ (8005078 <HAL_DMA_Init+0x1c8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d036      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a30      	ldr	r2, [pc, #192]	@ (800507c <HAL_DMA_Init+0x1cc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d031      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8005080 <HAL_DMA_Init+0x1d0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d02c      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2d      	ldr	r2, [pc, #180]	@ (8005084 <HAL_DMA_Init+0x1d4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d027      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005088 <HAL_DMA_Init+0x1d8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d022      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800508c <HAL_DMA_Init+0x1dc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d01d      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a28      	ldr	r2, [pc, #160]	@ (8005090 <HAL_DMA_Init+0x1e0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a27      	ldr	r2, [pc, #156]	@ (8005094 <HAL_DMA_Init+0x1e4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a25      	ldr	r2, [pc, #148]	@ (8005098 <HAL_DMA_Init+0x1e8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a24      	ldr	r2, [pc, #144]	@ (800509c <HAL_DMA_Init+0x1ec>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_DMA_Init+0x174>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a22      	ldr	r2, [pc, #136]	@ (80050a0 <HAL_DMA_Init+0x1f0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_DMA_Init+0x174>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a21      	ldr	r2, [pc, #132]	@ (80050a4 <HAL_DMA_Init+0x1f4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <HAL_DMA_Init+0x186>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e007      	b.n	8005046 <HAL_DMA_Init+0x196>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0201 	bic.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005046:	e02f      	b.n	80050a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005048:	f7fd fda6 	bl	8002b98 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b05      	cmp	r3, #5
 8005054:	d928      	bls.n	80050a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2203      	movs	r2, #3
 8005060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e246      	b.n	80054f6 <HAL_DMA_Init+0x646>
 8005068:	40020010 	.word	0x40020010
 800506c:	40020028 	.word	0x40020028
 8005070:	40020040 	.word	0x40020040
 8005074:	40020058 	.word	0x40020058
 8005078:	40020070 	.word	0x40020070
 800507c:	40020088 	.word	0x40020088
 8005080:	400200a0 	.word	0x400200a0
 8005084:	400200b8 	.word	0x400200b8
 8005088:	40020410 	.word	0x40020410
 800508c:	40020428 	.word	0x40020428
 8005090:	40020440 	.word	0x40020440
 8005094:	40020458 	.word	0x40020458
 8005098:	40020470 	.word	0x40020470
 800509c:	40020488 	.word	0x40020488
 80050a0:	400204a0 	.word	0x400204a0
 80050a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1c8      	bne.n	8005048 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4b83      	ldr	r3, [pc, #524]	@ (80052d0 <HAL_DMA_Init+0x420>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80050ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d107      	bne.n	800510c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005104:	4313      	orrs	r3, r2
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800510c:	4b71      	ldr	r3, [pc, #452]	@ (80052d4 <HAL_DMA_Init+0x424>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b71      	ldr	r3, [pc, #452]	@ (80052d8 <HAL_DMA_Init+0x428>)
 8005112:	4013      	ands	r3, r2
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005118:	d328      	bcc.n	800516c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b28      	cmp	r3, #40	@ 0x28
 8005120:	d903      	bls.n	800512a <HAL_DMA_Init+0x27a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b2e      	cmp	r3, #46	@ 0x2e
 8005128:	d917      	bls.n	800515a <HAL_DMA_Init+0x2aa>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005130:	d903      	bls.n	800513a <HAL_DMA_Init+0x28a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b42      	cmp	r3, #66	@ 0x42
 8005138:	d90f      	bls.n	800515a <HAL_DMA_Init+0x2aa>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b46      	cmp	r3, #70	@ 0x46
 8005140:	d903      	bls.n	800514a <HAL_DMA_Init+0x29a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b48      	cmp	r3, #72	@ 0x48
 8005148:	d907      	bls.n	800515a <HAL_DMA_Init+0x2aa>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005150:	d905      	bls.n	800515e <HAL_DMA_Init+0x2ae>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b52      	cmp	r3, #82	@ 0x52
 8005158:	d801      	bhi.n	800515e <HAL_DMA_Init+0x2ae>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_DMA_Init+0x2b0>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800516a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0307 	bic.w	r3, r3, #7
 8005182:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	2b04      	cmp	r3, #4
 8005194:	d117      	bne.n	80051c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00e      	beq.n	80051c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 ff85 	bl	80070b8 <DMA_CheckFifoParam>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2240      	movs	r2, #64	@ 0x40
 80051b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e197      	b.n	80054f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f001 fec0 	bl	8006f54 <DMA_CalcBaseAndBitshift>
 80051d4:	4603      	mov	r3, r0
 80051d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	223f      	movs	r2, #63	@ 0x3f
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	e0cd      	b.n	8005386 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3b      	ldr	r2, [pc, #236]	@ (80052dc <HAL_DMA_Init+0x42c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_DMA_Init+0x38a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a39      	ldr	r2, [pc, #228]	@ (80052e0 <HAL_DMA_Init+0x430>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01d      	beq.n	800523a <HAL_DMA_Init+0x38a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a38      	ldr	r2, [pc, #224]	@ (80052e4 <HAL_DMA_Init+0x434>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_DMA_Init+0x38a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a36      	ldr	r2, [pc, #216]	@ (80052e8 <HAL_DMA_Init+0x438>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_DMA_Init+0x38a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a35      	ldr	r2, [pc, #212]	@ (80052ec <HAL_DMA_Init+0x43c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_DMA_Init+0x38a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a33      	ldr	r2, [pc, #204]	@ (80052f0 <HAL_DMA_Init+0x440>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_DMA_Init+0x38a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a32      	ldr	r2, [pc, #200]	@ (80052f4 <HAL_DMA_Init+0x444>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_DMA_Init+0x38a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a30      	ldr	r2, [pc, #192]	@ (80052f8 <HAL_DMA_Init+0x448>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <HAL_DMA_Init+0x38e>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_DMA_Init+0x390>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8097 	beq.w	8005374 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a24      	ldr	r2, [pc, #144]	@ (80052dc <HAL_DMA_Init+0x42c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d021      	beq.n	8005294 <HAL_DMA_Init+0x3e4>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a22      	ldr	r2, [pc, #136]	@ (80052e0 <HAL_DMA_Init+0x430>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01c      	beq.n	8005294 <HAL_DMA_Init+0x3e4>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a21      	ldr	r2, [pc, #132]	@ (80052e4 <HAL_DMA_Init+0x434>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d017      	beq.n	8005294 <HAL_DMA_Init+0x3e4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1f      	ldr	r2, [pc, #124]	@ (80052e8 <HAL_DMA_Init+0x438>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d012      	beq.n	8005294 <HAL_DMA_Init+0x3e4>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1e      	ldr	r2, [pc, #120]	@ (80052ec <HAL_DMA_Init+0x43c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00d      	beq.n	8005294 <HAL_DMA_Init+0x3e4>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1c      	ldr	r2, [pc, #112]	@ (80052f0 <HAL_DMA_Init+0x440>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d008      	beq.n	8005294 <HAL_DMA_Init+0x3e4>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <HAL_DMA_Init+0x444>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <HAL_DMA_Init+0x3e4>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a19      	ldr	r2, [pc, #100]	@ (80052f8 <HAL_DMA_Init+0x448>)
 8005292:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <HAL_DMA_Init+0x44c>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b40      	cmp	r3, #64	@ 0x40
 80052ba:	d021      	beq.n	8005300 <HAL_DMA_Init+0x450>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b80      	cmp	r3, #128	@ 0x80
 80052c2:	d102      	bne.n	80052ca <HAL_DMA_Init+0x41a>
 80052c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052c8:	e01b      	b.n	8005302 <HAL_DMA_Init+0x452>
 80052ca:	2300      	movs	r3, #0
 80052cc:	e019      	b.n	8005302 <HAL_DMA_Init+0x452>
 80052ce:	bf00      	nop
 80052d0:	fe10803f 	.word	0xfe10803f
 80052d4:	5c001000 	.word	0x5c001000
 80052d8:	ffff0000 	.word	0xffff0000
 80052dc:	58025408 	.word	0x58025408
 80052e0:	5802541c 	.word	0x5802541c
 80052e4:	58025430 	.word	0x58025430
 80052e8:	58025444 	.word	0x58025444
 80052ec:	58025458 	.word	0x58025458
 80052f0:	5802546c 	.word	0x5802546c
 80052f4:	58025480 	.word	0x58025480
 80052f8:	58025494 	.word	0x58025494
 80052fc:	fffe000f 	.word	0xfffe000f
 8005300:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68d2      	ldr	r2, [r2, #12]
 8005306:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005308:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005310:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005320:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005328:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005330:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	4b6e      	ldr	r3, [pc, #440]	@ (8005500 <HAL_DMA_Init+0x650>)
 8005348:	4413      	add	r3, r2
 800534a:	4a6e      	ldr	r2, [pc, #440]	@ (8005504 <HAL_DMA_Init+0x654>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	009a      	lsls	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f001 fdfb 	bl	8006f54 <DMA_CalcBaseAndBitshift>
 800535e:	4603      	mov	r3, r0
 8005360:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2201      	movs	r2, #1
 800536c:	409a      	lsls	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	e008      	b.n	8005386 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2240      	movs	r2, #64	@ 0x40
 8005378:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2203      	movs	r2, #3
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e0b7      	b.n	80054f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5f      	ldr	r2, [pc, #380]	@ (8005508 <HAL_DMA_Init+0x658>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d072      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5d      	ldr	r2, [pc, #372]	@ (800550c <HAL_DMA_Init+0x65c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d06d      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a5c      	ldr	r2, [pc, #368]	@ (8005510 <HAL_DMA_Init+0x660>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d068      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005514 <HAL_DMA_Init+0x664>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d063      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a59      	ldr	r2, [pc, #356]	@ (8005518 <HAL_DMA_Init+0x668>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d05e      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a57      	ldr	r2, [pc, #348]	@ (800551c <HAL_DMA_Init+0x66c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d059      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a56      	ldr	r2, [pc, #344]	@ (8005520 <HAL_DMA_Init+0x670>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d054      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a54      	ldr	r2, [pc, #336]	@ (8005524 <HAL_DMA_Init+0x674>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d04f      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a53      	ldr	r2, [pc, #332]	@ (8005528 <HAL_DMA_Init+0x678>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d04a      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a51      	ldr	r2, [pc, #324]	@ (800552c <HAL_DMA_Init+0x67c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d045      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a50      	ldr	r2, [pc, #320]	@ (8005530 <HAL_DMA_Init+0x680>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d040      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a4e      	ldr	r2, [pc, #312]	@ (8005534 <HAL_DMA_Init+0x684>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d03b      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a4d      	ldr	r2, [pc, #308]	@ (8005538 <HAL_DMA_Init+0x688>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d036      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a4b      	ldr	r2, [pc, #300]	@ (800553c <HAL_DMA_Init+0x68c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d031      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a4a      	ldr	r2, [pc, #296]	@ (8005540 <HAL_DMA_Init+0x690>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d02c      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a48      	ldr	r2, [pc, #288]	@ (8005544 <HAL_DMA_Init+0x694>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d027      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a47      	ldr	r2, [pc, #284]	@ (8005548 <HAL_DMA_Init+0x698>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a45      	ldr	r2, [pc, #276]	@ (800554c <HAL_DMA_Init+0x69c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01d      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a44      	ldr	r2, [pc, #272]	@ (8005550 <HAL_DMA_Init+0x6a0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a42      	ldr	r2, [pc, #264]	@ (8005554 <HAL_DMA_Init+0x6a4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a41      	ldr	r2, [pc, #260]	@ (8005558 <HAL_DMA_Init+0x6a8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a3f      	ldr	r2, [pc, #252]	@ (800555c <HAL_DMA_Init+0x6ac>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a3e      	ldr	r2, [pc, #248]	@ (8005560 <HAL_DMA_Init+0x6b0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_DMA_Init+0x5c6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3c      	ldr	r2, [pc, #240]	@ (8005564 <HAL_DMA_Init+0x6b4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <HAL_DMA_Init+0x5ca>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <HAL_DMA_Init+0x5cc>
 800547a:	2300      	movs	r3, #0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d032      	beq.n	80054e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 fe95 	bl	80071b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b80      	cmp	r3, #128	@ 0x80
 800548c:	d102      	bne.n	8005494 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d010      	beq.n	80054d4 <HAL_DMA_Init+0x624>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d80c      	bhi.n	80054d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 ff12 	bl	80072e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e008      	b.n	80054e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	a7fdabf8 	.word	0xa7fdabf8
 8005504:	cccccccd 	.word	0xcccccccd
 8005508:	40020010 	.word	0x40020010
 800550c:	40020028 	.word	0x40020028
 8005510:	40020040 	.word	0x40020040
 8005514:	40020058 	.word	0x40020058
 8005518:	40020070 	.word	0x40020070
 800551c:	40020088 	.word	0x40020088
 8005520:	400200a0 	.word	0x400200a0
 8005524:	400200b8 	.word	0x400200b8
 8005528:	40020410 	.word	0x40020410
 800552c:	40020428 	.word	0x40020428
 8005530:	40020440 	.word	0x40020440
 8005534:	40020458 	.word	0x40020458
 8005538:	40020470 	.word	0x40020470
 800553c:	40020488 	.word	0x40020488
 8005540:	400204a0 	.word	0x400204a0
 8005544:	400204b8 	.word	0x400204b8
 8005548:	58025408 	.word	0x58025408
 800554c:	5802541c 	.word	0x5802541c
 8005550:	58025430 	.word	0x58025430
 8005554:	58025444 	.word	0x58025444
 8005558:	58025458 	.word	0x58025458
 800555c:	5802546c 	.word	0x5802546c
 8005560:	58025480 	.word	0x58025480
 8005564:	58025494 	.word	0x58025494

08005568 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e1a8      	b.n	80058cc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a82      	ldr	r2, [pc, #520]	@ (8005788 <HAL_DMA_DeInit+0x220>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04a      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a80      	ldr	r2, [pc, #512]	@ (800578c <HAL_DMA_DeInit+0x224>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d045      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a7f      	ldr	r2, [pc, #508]	@ (8005790 <HAL_DMA_DeInit+0x228>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d040      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a7d      	ldr	r2, [pc, #500]	@ (8005794 <HAL_DMA_DeInit+0x22c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d03b      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005798 <HAL_DMA_DeInit+0x230>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d036      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7a      	ldr	r2, [pc, #488]	@ (800579c <HAL_DMA_DeInit+0x234>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d031      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a79      	ldr	r2, [pc, #484]	@ (80057a0 <HAL_DMA_DeInit+0x238>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d02c      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a77      	ldr	r2, [pc, #476]	@ (80057a4 <HAL_DMA_DeInit+0x23c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d027      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a76      	ldr	r2, [pc, #472]	@ (80057a8 <HAL_DMA_DeInit+0x240>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a74      	ldr	r2, [pc, #464]	@ (80057ac <HAL_DMA_DeInit+0x244>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01d      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a73      	ldr	r2, [pc, #460]	@ (80057b0 <HAL_DMA_DeInit+0x248>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a71      	ldr	r2, [pc, #452]	@ (80057b4 <HAL_DMA_DeInit+0x24c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a70      	ldr	r2, [pc, #448]	@ (80057b8 <HAL_DMA_DeInit+0x250>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6e      	ldr	r2, [pc, #440]	@ (80057bc <HAL_DMA_DeInit+0x254>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a6d      	ldr	r2, [pc, #436]	@ (80057c0 <HAL_DMA_DeInit+0x258>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_DMA_DeInit+0xb2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a6b      	ldr	r2, [pc, #428]	@ (80057c4 <HAL_DMA_DeInit+0x25c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <HAL_DMA_DeInit+0xc4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e007      	b.n	800563c <HAL_DMA_DeInit+0xd4>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a51      	ldr	r2, [pc, #324]	@ (8005788 <HAL_DMA_DeInit+0x220>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d04a      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a50      	ldr	r2, [pc, #320]	@ (800578c <HAL_DMA_DeInit+0x224>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d045      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a4e      	ldr	r2, [pc, #312]	@ (8005790 <HAL_DMA_DeInit+0x228>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d040      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a4d      	ldr	r2, [pc, #308]	@ (8005794 <HAL_DMA_DeInit+0x22c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d03b      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a4b      	ldr	r2, [pc, #300]	@ (8005798 <HAL_DMA_DeInit+0x230>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d036      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a4a      	ldr	r2, [pc, #296]	@ (800579c <HAL_DMA_DeInit+0x234>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d031      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a48      	ldr	r2, [pc, #288]	@ (80057a0 <HAL_DMA_DeInit+0x238>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d02c      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a47      	ldr	r2, [pc, #284]	@ (80057a4 <HAL_DMA_DeInit+0x23c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d027      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a45      	ldr	r2, [pc, #276]	@ (80057a8 <HAL_DMA_DeInit+0x240>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d022      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a44      	ldr	r2, [pc, #272]	@ (80057ac <HAL_DMA_DeInit+0x244>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d01d      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a42      	ldr	r2, [pc, #264]	@ (80057b0 <HAL_DMA_DeInit+0x248>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a41      	ldr	r2, [pc, #260]	@ (80057b4 <HAL_DMA_DeInit+0x24c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a3f      	ldr	r2, [pc, #252]	@ (80057b8 <HAL_DMA_DeInit+0x250>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a3e      	ldr	r2, [pc, #248]	@ (80057bc <HAL_DMA_DeInit+0x254>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3c      	ldr	r2, [pc, #240]	@ (80057c0 <HAL_DMA_DeInit+0x258>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_DMA_DeInit+0x174>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3b      	ldr	r2, [pc, #236]	@ (80057c4 <HAL_DMA_DeInit+0x25c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d101      	bne.n	80056e0 <HAL_DMA_DeInit+0x178>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_DMA_DeInit+0x17a>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d025      	beq.n	8005732 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2221      	movs	r2, #33	@ 0x21
 8005714:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 fc1c 	bl	8006f54 <DMA_CalcBaseAndBitshift>
 800571c:	4603      	mov	r3, r0
 800571e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	223f      	movs	r2, #63	@ 0x3f
 800572a:	409a      	lsls	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
 8005730:	e081      	b.n	8005836 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a24      	ldr	r2, [pc, #144]	@ (80057c8 <HAL_DMA_DeInit+0x260>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_DeInit+0x21a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a22      	ldr	r2, [pc, #136]	@ (80057cc <HAL_DMA_DeInit+0x264>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_DMA_DeInit+0x21a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <HAL_DMA_DeInit+0x268>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_DMA_DeInit+0x21a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <HAL_DMA_DeInit+0x26c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_DMA_DeInit+0x21a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1e      	ldr	r2, [pc, #120]	@ (80057d8 <HAL_DMA_DeInit+0x270>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_DeInit+0x21a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1c      	ldr	r2, [pc, #112]	@ (80057dc <HAL_DMA_DeInit+0x274>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_DMA_DeInit+0x21a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1b      	ldr	r2, [pc, #108]	@ (80057e0 <HAL_DMA_DeInit+0x278>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_DeInit+0x21a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a19      	ldr	r2, [pc, #100]	@ (80057e4 <HAL_DMA_DeInit+0x27c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d132      	bne.n	80057e8 <HAL_DMA_DeInit+0x280>
 8005782:	2301      	movs	r3, #1
 8005784:	e031      	b.n	80057ea <HAL_DMA_DeInit+0x282>
 8005786:	bf00      	nop
 8005788:	40020010 	.word	0x40020010
 800578c:	40020028 	.word	0x40020028
 8005790:	40020040 	.word	0x40020040
 8005794:	40020058 	.word	0x40020058
 8005798:	40020070 	.word	0x40020070
 800579c:	40020088 	.word	0x40020088
 80057a0:	400200a0 	.word	0x400200a0
 80057a4:	400200b8 	.word	0x400200b8
 80057a8:	40020410 	.word	0x40020410
 80057ac:	40020428 	.word	0x40020428
 80057b0:	40020440 	.word	0x40020440
 80057b4:	40020458 	.word	0x40020458
 80057b8:	40020470 	.word	0x40020470
 80057bc:	40020488 	.word	0x40020488
 80057c0:	400204a0 	.word	0x400204a0
 80057c4:	400204b8 	.word	0x400204b8
 80057c8:	58025408 	.word	0x58025408
 80057cc:	5802541c 	.word	0x5802541c
 80057d0:	58025430 	.word	0x58025430
 80057d4:	58025444 	.word	0x58025444
 80057d8:	58025458 	.word	0x58025458
 80057dc:	5802546c 	.word	0x5802546c
 80057e0:	58025480 	.word	0x58025480
 80057e4:	58025494 	.word	0x58025494
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d021      	beq.n	8005832 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 fb9c 	bl	8006f54 <DMA_CalcBaseAndBitshift>
 800581c:	4603      	mov	r3, r0
 800581e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	2201      	movs	r2, #1
 800582a:	409a      	lsls	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	e001      	b.n	8005836 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e04a      	b.n	80058cc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 fcba 	bl	80071b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005854:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00f      	beq.n	800587e <HAL_DMA_DeInit+0x316>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b08      	cmp	r3, #8
 8005864:	d80b      	bhi.n	800587e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 fd3c 	bl	80072e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800587c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e226      	b.n	8005d3e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_DMA_Start_IT+0x2a>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e21f      	b.n	8005d3e <HAL_DMA_Start_IT+0x46a>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	f040 820a 	bne.w	8005d28 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a68      	ldr	r2, [pc, #416]	@ (8005ac8 <HAL_DMA_Start_IT+0x1f4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04a      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a66      	ldr	r2, [pc, #408]	@ (8005acc <HAL_DMA_Start_IT+0x1f8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d045      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a65      	ldr	r2, [pc, #404]	@ (8005ad0 <HAL_DMA_Start_IT+0x1fc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a63      	ldr	r2, [pc, #396]	@ (8005ad4 <HAL_DMA_Start_IT+0x200>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d03b      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a62      	ldr	r2, [pc, #392]	@ (8005ad8 <HAL_DMA_Start_IT+0x204>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d036      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a60      	ldr	r2, [pc, #384]	@ (8005adc <HAL_DMA_Start_IT+0x208>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d031      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a5f      	ldr	r2, [pc, #380]	@ (8005ae0 <HAL_DMA_Start_IT+0x20c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ae4 <HAL_DMA_Start_IT+0x210>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d027      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a5c      	ldr	r2, [pc, #368]	@ (8005ae8 <HAL_DMA_Start_IT+0x214>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a5a      	ldr	r2, [pc, #360]	@ (8005aec <HAL_DMA_Start_IT+0x218>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a59      	ldr	r2, [pc, #356]	@ (8005af0 <HAL_DMA_Start_IT+0x21c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a57      	ldr	r2, [pc, #348]	@ (8005af4 <HAL_DMA_Start_IT+0x220>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a56      	ldr	r2, [pc, #344]	@ (8005af8 <HAL_DMA_Start_IT+0x224>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a54      	ldr	r2, [pc, #336]	@ (8005afc <HAL_DMA_Start_IT+0x228>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a53      	ldr	r2, [pc, #332]	@ (8005b00 <HAL_DMA_Start_IT+0x22c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_Start_IT+0xee>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a51      	ldr	r2, [pc, #324]	@ (8005b04 <HAL_DMA_Start_IT+0x230>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <HAL_DMA_Start_IT+0x100>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e007      	b.n	80059e4 <HAL_DMA_Start_IT+0x110>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f001 f906 	bl	8006bfc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a34      	ldr	r2, [pc, #208]	@ (8005ac8 <HAL_DMA_Start_IT+0x1f4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d04a      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a33      	ldr	r2, [pc, #204]	@ (8005acc <HAL_DMA_Start_IT+0x1f8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d045      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a31      	ldr	r2, [pc, #196]	@ (8005ad0 <HAL_DMA_Start_IT+0x1fc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d040      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a30      	ldr	r2, [pc, #192]	@ (8005ad4 <HAL_DMA_Start_IT+0x200>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d03b      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad8 <HAL_DMA_Start_IT+0x204>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d036      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2d      	ldr	r2, [pc, #180]	@ (8005adc <HAL_DMA_Start_IT+0x208>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d031      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae0 <HAL_DMA_Start_IT+0x20c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02c      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae4 <HAL_DMA_Start_IT+0x210>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d027      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a28      	ldr	r2, [pc, #160]	@ (8005ae8 <HAL_DMA_Start_IT+0x214>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <HAL_DMA_Start_IT+0x218>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01d      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a25      	ldr	r2, [pc, #148]	@ (8005af0 <HAL_DMA_Start_IT+0x21c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a24      	ldr	r2, [pc, #144]	@ (8005af4 <HAL_DMA_Start_IT+0x220>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a22      	ldr	r2, [pc, #136]	@ (8005af8 <HAL_DMA_Start_IT+0x224>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a21      	ldr	r2, [pc, #132]	@ (8005afc <HAL_DMA_Start_IT+0x228>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	@ (8005b00 <HAL_DMA_Start_IT+0x22c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_DMA_Start_IT+0x1bc>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <HAL_DMA_Start_IT+0x230>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <HAL_DMA_Start_IT+0x1c0>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <HAL_DMA_Start_IT+0x1c2>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d036      	beq.n	8005b08 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f023 021e 	bic.w	r2, r3, #30
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0216 	orr.w	r2, r2, #22
 8005aac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d03e      	beq.n	8005b34 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0208 	orr.w	r2, r2, #8
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e035      	b.n	8005b34 <HAL_DMA_Start_IT+0x260>
 8005ac8:	40020010 	.word	0x40020010
 8005acc:	40020028 	.word	0x40020028
 8005ad0:	40020040 	.word	0x40020040
 8005ad4:	40020058 	.word	0x40020058
 8005ad8:	40020070 	.word	0x40020070
 8005adc:	40020088 	.word	0x40020088
 8005ae0:	400200a0 	.word	0x400200a0
 8005ae4:	400200b8 	.word	0x400200b8
 8005ae8:	40020410 	.word	0x40020410
 8005aec:	40020428 	.word	0x40020428
 8005af0:	40020440 	.word	0x40020440
 8005af4:	40020458 	.word	0x40020458
 8005af8:	40020470 	.word	0x40020470
 8005afc:	40020488 	.word	0x40020488
 8005b00:	400204a0 	.word	0x400204a0
 8005b04:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 020e 	bic.w	r2, r3, #14
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 020a 	orr.w	r2, r2, #10
 8005b1a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0204 	orr.w	r2, r2, #4
 8005b32:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a83      	ldr	r2, [pc, #524]	@ (8005d48 <HAL_DMA_Start_IT+0x474>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d072      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a82      	ldr	r2, [pc, #520]	@ (8005d4c <HAL_DMA_Start_IT+0x478>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d06d      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a80      	ldr	r2, [pc, #512]	@ (8005d50 <HAL_DMA_Start_IT+0x47c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d068      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a7f      	ldr	r2, [pc, #508]	@ (8005d54 <HAL_DMA_Start_IT+0x480>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d063      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a7d      	ldr	r2, [pc, #500]	@ (8005d58 <HAL_DMA_Start_IT+0x484>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d05e      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d5c <HAL_DMA_Start_IT+0x488>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d059      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a7a      	ldr	r2, [pc, #488]	@ (8005d60 <HAL_DMA_Start_IT+0x48c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d054      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a79      	ldr	r2, [pc, #484]	@ (8005d64 <HAL_DMA_Start_IT+0x490>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d04f      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a77      	ldr	r2, [pc, #476]	@ (8005d68 <HAL_DMA_Start_IT+0x494>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d04a      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a76      	ldr	r2, [pc, #472]	@ (8005d6c <HAL_DMA_Start_IT+0x498>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d045      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a74      	ldr	r2, [pc, #464]	@ (8005d70 <HAL_DMA_Start_IT+0x49c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d040      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a73      	ldr	r2, [pc, #460]	@ (8005d74 <HAL_DMA_Start_IT+0x4a0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d03b      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a71      	ldr	r2, [pc, #452]	@ (8005d78 <HAL_DMA_Start_IT+0x4a4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d036      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a70      	ldr	r2, [pc, #448]	@ (8005d7c <HAL_DMA_Start_IT+0x4a8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d031      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8005d80 <HAL_DMA_Start_IT+0x4ac>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d02c      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a6d      	ldr	r2, [pc, #436]	@ (8005d84 <HAL_DMA_Start_IT+0x4b0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d027      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8005d88 <HAL_DMA_Start_IT+0x4b4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d022      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a6a      	ldr	r2, [pc, #424]	@ (8005d8c <HAL_DMA_Start_IT+0x4b8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d01d      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a68      	ldr	r2, [pc, #416]	@ (8005d90 <HAL_DMA_Start_IT+0x4bc>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d018      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a67      	ldr	r2, [pc, #412]	@ (8005d94 <HAL_DMA_Start_IT+0x4c0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a65      	ldr	r2, [pc, #404]	@ (8005d98 <HAL_DMA_Start_IT+0x4c4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00e      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a64      	ldr	r2, [pc, #400]	@ (8005d9c <HAL_DMA_Start_IT+0x4c8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a62      	ldr	r2, [pc, #392]	@ (8005da0 <HAL_DMA_Start_IT+0x4cc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d004      	beq.n	8005c24 <HAL_DMA_Start_IT+0x350>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a61      	ldr	r2, [pc, #388]	@ (8005da4 <HAL_DMA_Start_IT+0x4d0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d101      	bne.n	8005c28 <HAL_DMA_Start_IT+0x354>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <HAL_DMA_Start_IT+0x356>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01a      	beq.n	8005c64 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c4a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c62:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a37      	ldr	r2, [pc, #220]	@ (8005d48 <HAL_DMA_Start_IT+0x474>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d04a      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a36      	ldr	r2, [pc, #216]	@ (8005d4c <HAL_DMA_Start_IT+0x478>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d045      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a34      	ldr	r2, [pc, #208]	@ (8005d50 <HAL_DMA_Start_IT+0x47c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d040      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a33      	ldr	r2, [pc, #204]	@ (8005d54 <HAL_DMA_Start_IT+0x480>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d03b      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a31      	ldr	r2, [pc, #196]	@ (8005d58 <HAL_DMA_Start_IT+0x484>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d036      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a30      	ldr	r2, [pc, #192]	@ (8005d5c <HAL_DMA_Start_IT+0x488>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d031      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8005d60 <HAL_DMA_Start_IT+0x48c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02c      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a2d      	ldr	r2, [pc, #180]	@ (8005d64 <HAL_DMA_Start_IT+0x490>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d027      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d68 <HAL_DMA_Start_IT+0x494>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d022      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <HAL_DMA_Start_IT+0x498>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d01d      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a28      	ldr	r2, [pc, #160]	@ (8005d70 <HAL_DMA_Start_IT+0x49c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a27      	ldr	r2, [pc, #156]	@ (8005d74 <HAL_DMA_Start_IT+0x4a0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d013      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a25      	ldr	r2, [pc, #148]	@ (8005d78 <HAL_DMA_Start_IT+0x4a4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a24      	ldr	r2, [pc, #144]	@ (8005d7c <HAL_DMA_Start_IT+0x4a8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a22      	ldr	r2, [pc, #136]	@ (8005d80 <HAL_DMA_Start_IT+0x4ac>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_DMA_Start_IT+0x430>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a21      	ldr	r2, [pc, #132]	@ (8005d84 <HAL_DMA_Start_IT+0x4b0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d108      	bne.n	8005d16 <HAL_DMA_Start_IT+0x442>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e012      	b.n	8005d3c <HAL_DMA_Start_IT+0x468>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e009      	b.n	8005d3c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	40020010 	.word	0x40020010
 8005d4c:	40020028 	.word	0x40020028
 8005d50:	40020040 	.word	0x40020040
 8005d54:	40020058 	.word	0x40020058
 8005d58:	40020070 	.word	0x40020070
 8005d5c:	40020088 	.word	0x40020088
 8005d60:	400200a0 	.word	0x400200a0
 8005d64:	400200b8 	.word	0x400200b8
 8005d68:	40020410 	.word	0x40020410
 8005d6c:	40020428 	.word	0x40020428
 8005d70:	40020440 	.word	0x40020440
 8005d74:	40020458 	.word	0x40020458
 8005d78:	40020470 	.word	0x40020470
 8005d7c:	40020488 	.word	0x40020488
 8005d80:	400204a0 	.word	0x400204a0
 8005d84:	400204b8 	.word	0x400204b8
 8005d88:	58025408 	.word	0x58025408
 8005d8c:	5802541c 	.word	0x5802541c
 8005d90:	58025430 	.word	0x58025430
 8005d94:	58025444 	.word	0x58025444
 8005d98:	58025458 	.word	0x58025458
 8005d9c:	5802546c 	.word	0x5802546c
 8005da0:	58025480 	.word	0x58025480
 8005da4:	58025494 	.word	0x58025494

08005da8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	@ 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005db4:	4b67      	ldr	r3, [pc, #412]	@ (8005f54 <HAL_DMA_IRQHandler+0x1ac>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a67      	ldr	r2, [pc, #412]	@ (8005f58 <HAL_DMA_IRQHandler+0x1b0>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	0a9b      	lsrs	r3, r3, #10
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a5f      	ldr	r2, [pc, #380]	@ (8005f5c <HAL_DMA_IRQHandler+0x1b4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d04a      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a5d      	ldr	r2, [pc, #372]	@ (8005f60 <HAL_DMA_IRQHandler+0x1b8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d045      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a5c      	ldr	r2, [pc, #368]	@ (8005f64 <HAL_DMA_IRQHandler+0x1bc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d040      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8005f68 <HAL_DMA_IRQHandler+0x1c0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d03b      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a59      	ldr	r2, [pc, #356]	@ (8005f6c <HAL_DMA_IRQHandler+0x1c4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d036      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a57      	ldr	r2, [pc, #348]	@ (8005f70 <HAL_DMA_IRQHandler+0x1c8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d031      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a56      	ldr	r2, [pc, #344]	@ (8005f74 <HAL_DMA_IRQHandler+0x1cc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d02c      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a54      	ldr	r2, [pc, #336]	@ (8005f78 <HAL_DMA_IRQHandler+0x1d0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d027      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a53      	ldr	r2, [pc, #332]	@ (8005f7c <HAL_DMA_IRQHandler+0x1d4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d022      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a51      	ldr	r2, [pc, #324]	@ (8005f80 <HAL_DMA_IRQHandler+0x1d8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01d      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a50      	ldr	r2, [pc, #320]	@ (8005f84 <HAL_DMA_IRQHandler+0x1dc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d018      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8005f88 <HAL_DMA_IRQHandler+0x1e0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a4d      	ldr	r2, [pc, #308]	@ (8005f8c <HAL_DMA_IRQHandler+0x1e4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00e      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a4b      	ldr	r2, [pc, #300]	@ (8005f90 <HAL_DMA_IRQHandler+0x1e8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8005f94 <HAL_DMA_IRQHandler+0x1ec>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xd2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a48      	ldr	r2, [pc, #288]	@ (8005f98 <HAL_DMA_IRQHandler+0x1f0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d101      	bne.n	8005e7e <HAL_DMA_IRQHandler+0xd6>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_DMA_IRQHandler+0xd8>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 842b 	beq.w	80066dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2208      	movs	r2, #8
 8005e90:	409a      	lsls	r2, r3
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80a2 	beq.w	8005fe0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8005f5c <HAL_DMA_IRQHandler+0x1b4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d04a      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8005f60 <HAL_DMA_IRQHandler+0x1b8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d045      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005f64 <HAL_DMA_IRQHandler+0x1bc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d040      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8005f68 <HAL_DMA_IRQHandler+0x1c0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d03b      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a28      	ldr	r2, [pc, #160]	@ (8005f6c <HAL_DMA_IRQHandler+0x1c4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d036      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a27      	ldr	r2, [pc, #156]	@ (8005f70 <HAL_DMA_IRQHandler+0x1c8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d031      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a25      	ldr	r2, [pc, #148]	@ (8005f74 <HAL_DMA_IRQHandler+0x1cc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d02c      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a24      	ldr	r2, [pc, #144]	@ (8005f78 <HAL_DMA_IRQHandler+0x1d0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d027      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a22      	ldr	r2, [pc, #136]	@ (8005f7c <HAL_DMA_IRQHandler+0x1d4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d022      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a21      	ldr	r2, [pc, #132]	@ (8005f80 <HAL_DMA_IRQHandler+0x1d8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d01d      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1f      	ldr	r2, [pc, #124]	@ (8005f84 <HAL_DMA_IRQHandler+0x1dc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f88 <HAL_DMA_IRQHandler+0x1e0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1c      	ldr	r2, [pc, #112]	@ (8005f8c <HAL_DMA_IRQHandler+0x1e4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1b      	ldr	r2, [pc, #108]	@ (8005f90 <HAL_DMA_IRQHandler+0x1e8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	@ (8005f94 <HAL_DMA_IRQHandler+0x1ec>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x194>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a18      	ldr	r2, [pc, #96]	@ (8005f98 <HAL_DMA_IRQHandler+0x1f0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d12f      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x1f4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	e02e      	b.n	8005fb0 <HAL_DMA_IRQHandler+0x208>
 8005f52:	bf00      	nop
 8005f54:	24000018 	.word	0x24000018
 8005f58:	1b4e81b5 	.word	0x1b4e81b5
 8005f5c:	40020010 	.word	0x40020010
 8005f60:	40020028 	.word	0x40020028
 8005f64:	40020040 	.word	0x40020040
 8005f68:	40020058 	.word	0x40020058
 8005f6c:	40020070 	.word	0x40020070
 8005f70:	40020088 	.word	0x40020088
 8005f74:	400200a0 	.word	0x400200a0
 8005f78:	400200b8 	.word	0x400200b8
 8005f7c:	40020410 	.word	0x40020410
 8005f80:	40020428 	.word	0x40020428
 8005f84:	40020440 	.word	0x40020440
 8005f88:	40020458 	.word	0x40020458
 8005f8c:	40020470 	.word	0x40020470
 8005f90:	40020488 	.word	0x40020488
 8005f94:	400204a0 	.word	0x400204a0
 8005f98:	400204b8 	.word	0x400204b8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0204 	bic.w	r2, r2, #4
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2208      	movs	r2, #8
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd8:	f043 0201 	orr.w	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d06e      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a69      	ldr	r2, [pc, #420]	@ (80061a0 <HAL_DMA_IRQHandler+0x3f8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d04a      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a67      	ldr	r2, [pc, #412]	@ (80061a4 <HAL_DMA_IRQHandler+0x3fc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d045      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a66      	ldr	r2, [pc, #408]	@ (80061a8 <HAL_DMA_IRQHandler+0x400>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d040      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a64      	ldr	r2, [pc, #400]	@ (80061ac <HAL_DMA_IRQHandler+0x404>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d03b      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a63      	ldr	r2, [pc, #396]	@ (80061b0 <HAL_DMA_IRQHandler+0x408>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d036      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a61      	ldr	r2, [pc, #388]	@ (80061b4 <HAL_DMA_IRQHandler+0x40c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d031      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a60      	ldr	r2, [pc, #384]	@ (80061b8 <HAL_DMA_IRQHandler+0x410>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d02c      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a5e      	ldr	r2, [pc, #376]	@ (80061bc <HAL_DMA_IRQHandler+0x414>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d027      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a5d      	ldr	r2, [pc, #372]	@ (80061c0 <HAL_DMA_IRQHandler+0x418>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d022      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a5b      	ldr	r2, [pc, #364]	@ (80061c4 <HAL_DMA_IRQHandler+0x41c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01d      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5a      	ldr	r2, [pc, #360]	@ (80061c8 <HAL_DMA_IRQHandler+0x420>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d018      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a58      	ldr	r2, [pc, #352]	@ (80061cc <HAL_DMA_IRQHandler+0x424>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a57      	ldr	r2, [pc, #348]	@ (80061d0 <HAL_DMA_IRQHandler+0x428>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00e      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a55      	ldr	r2, [pc, #340]	@ (80061d4 <HAL_DMA_IRQHandler+0x42c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a54      	ldr	r2, [pc, #336]	@ (80061d8 <HAL_DMA_IRQHandler+0x430>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <HAL_DMA_IRQHandler+0x2ee>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a52      	ldr	r2, [pc, #328]	@ (80061dc <HAL_DMA_IRQHandler+0x434>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d10a      	bne.n	80060ac <HAL_DMA_IRQHandler+0x304>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	e003      	b.n	80060b4 <HAL_DMA_IRQHandler+0x30c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00d      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2201      	movs	r2, #1
 80060c2:	409a      	lsls	r2, r3
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060cc:	f043 0202 	orr.w	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	2204      	movs	r2, #4
 80060de:	409a      	lsls	r2, r3
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 808f 	beq.w	8006208 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2c      	ldr	r2, [pc, #176]	@ (80061a0 <HAL_DMA_IRQHandler+0x3f8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d04a      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2a      	ldr	r2, [pc, #168]	@ (80061a4 <HAL_DMA_IRQHandler+0x3fc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d045      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a29      	ldr	r2, [pc, #164]	@ (80061a8 <HAL_DMA_IRQHandler+0x400>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d040      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a27      	ldr	r2, [pc, #156]	@ (80061ac <HAL_DMA_IRQHandler+0x404>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d03b      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a26      	ldr	r2, [pc, #152]	@ (80061b0 <HAL_DMA_IRQHandler+0x408>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d036      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a24      	ldr	r2, [pc, #144]	@ (80061b4 <HAL_DMA_IRQHandler+0x40c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a23      	ldr	r2, [pc, #140]	@ (80061b8 <HAL_DMA_IRQHandler+0x410>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d02c      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a21      	ldr	r2, [pc, #132]	@ (80061bc <HAL_DMA_IRQHandler+0x414>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d027      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a20      	ldr	r2, [pc, #128]	@ (80061c0 <HAL_DMA_IRQHandler+0x418>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1e      	ldr	r2, [pc, #120]	@ (80061c4 <HAL_DMA_IRQHandler+0x41c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01d      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1d      	ldr	r2, [pc, #116]	@ (80061c8 <HAL_DMA_IRQHandler+0x420>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1b      	ldr	r2, [pc, #108]	@ (80061cc <HAL_DMA_IRQHandler+0x424>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1a      	ldr	r2, [pc, #104]	@ (80061d0 <HAL_DMA_IRQHandler+0x428>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a18      	ldr	r2, [pc, #96]	@ (80061d4 <HAL_DMA_IRQHandler+0x42c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a17      	ldr	r2, [pc, #92]	@ (80061d8 <HAL_DMA_IRQHandler+0x430>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_DMA_IRQHandler+0x3e2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a15      	ldr	r2, [pc, #84]	@ (80061dc <HAL_DMA_IRQHandler+0x434>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d12a      	bne.n	80061e0 <HAL_DMA_IRQHandler+0x438>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e023      	b.n	80061e8 <HAL_DMA_IRQHandler+0x440>
 80061a0:	40020010 	.word	0x40020010
 80061a4:	40020028 	.word	0x40020028
 80061a8:	40020040 	.word	0x40020040
 80061ac:	40020058 	.word	0x40020058
 80061b0:	40020070 	.word	0x40020070
 80061b4:	40020088 	.word	0x40020088
 80061b8:	400200a0 	.word	0x400200a0
 80061bc:	400200b8 	.word	0x400200b8
 80061c0:	40020410 	.word	0x40020410
 80061c4:	40020428 	.word	0x40020428
 80061c8:	40020440 	.word	0x40020440
 80061cc:	40020458 	.word	0x40020458
 80061d0:	40020470 	.word	0x40020470
 80061d4:	40020488 	.word	0x40020488
 80061d8:	400204a0 	.word	0x400204a0
 80061dc:	400204b8 	.word	0x400204b8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2204      	movs	r2, #4
 80061f6:	409a      	lsls	r2, r3
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006200:	f043 0204 	orr.w	r2, r3, #4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	2210      	movs	r2, #16
 8006212:	409a      	lsls	r2, r3
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	4013      	ands	r3, r2
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80a6 	beq.w	800636a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a85      	ldr	r2, [pc, #532]	@ (8006438 <HAL_DMA_IRQHandler+0x690>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d04a      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a83      	ldr	r2, [pc, #524]	@ (800643c <HAL_DMA_IRQHandler+0x694>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d045      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a82      	ldr	r2, [pc, #520]	@ (8006440 <HAL_DMA_IRQHandler+0x698>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d040      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a80      	ldr	r2, [pc, #512]	@ (8006444 <HAL_DMA_IRQHandler+0x69c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d03b      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a7f      	ldr	r2, [pc, #508]	@ (8006448 <HAL_DMA_IRQHandler+0x6a0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d036      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a7d      	ldr	r2, [pc, #500]	@ (800644c <HAL_DMA_IRQHandler+0x6a4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d031      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a7c      	ldr	r2, [pc, #496]	@ (8006450 <HAL_DMA_IRQHandler+0x6a8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d02c      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a7a      	ldr	r2, [pc, #488]	@ (8006454 <HAL_DMA_IRQHandler+0x6ac>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d027      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a79      	ldr	r2, [pc, #484]	@ (8006458 <HAL_DMA_IRQHandler+0x6b0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d022      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a77      	ldr	r2, [pc, #476]	@ (800645c <HAL_DMA_IRQHandler+0x6b4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01d      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a76      	ldr	r2, [pc, #472]	@ (8006460 <HAL_DMA_IRQHandler+0x6b8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d018      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a74      	ldr	r2, [pc, #464]	@ (8006464 <HAL_DMA_IRQHandler+0x6bc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a73      	ldr	r2, [pc, #460]	@ (8006468 <HAL_DMA_IRQHandler+0x6c0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00e      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a71      	ldr	r2, [pc, #452]	@ (800646c <HAL_DMA_IRQHandler+0x6c4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a70      	ldr	r2, [pc, #448]	@ (8006470 <HAL_DMA_IRQHandler+0x6c8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_DMA_IRQHandler+0x516>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006474 <HAL_DMA_IRQHandler+0x6cc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10a      	bne.n	80062d4 <HAL_DMA_IRQHandler+0x52c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	e009      	b.n	80062e8 <HAL_DMA_IRQHandler+0x540>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf14      	ite	ne
 80062e2:	2301      	movne	r3, #1
 80062e4:	2300      	moveq	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d03e      	beq.n	800636a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	2210      	movs	r2, #16
 80062f6:	409a      	lsls	r2, r3
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d018      	beq.n	800633c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d024      	beq.n	800636a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
 8006328:	e01f      	b.n	800636a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01b      	beq.n	800636a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
 800633a:	e016      	b.n	800636a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0208 	bic.w	r2, r2, #8
 8006358:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	2220      	movs	r2, #32
 8006374:	409a      	lsls	r2, r3
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8110 	beq.w	80065a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2c      	ldr	r2, [pc, #176]	@ (8006438 <HAL_DMA_IRQHandler+0x690>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d04a      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2b      	ldr	r2, [pc, #172]	@ (800643c <HAL_DMA_IRQHandler+0x694>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d045      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a29      	ldr	r2, [pc, #164]	@ (8006440 <HAL_DMA_IRQHandler+0x698>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d040      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a28      	ldr	r2, [pc, #160]	@ (8006444 <HAL_DMA_IRQHandler+0x69c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d03b      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a26      	ldr	r2, [pc, #152]	@ (8006448 <HAL_DMA_IRQHandler+0x6a0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d036      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a25      	ldr	r2, [pc, #148]	@ (800644c <HAL_DMA_IRQHandler+0x6a4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d031      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a23      	ldr	r2, [pc, #140]	@ (8006450 <HAL_DMA_IRQHandler+0x6a8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d02c      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a22      	ldr	r2, [pc, #136]	@ (8006454 <HAL_DMA_IRQHandler+0x6ac>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d027      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a20      	ldr	r2, [pc, #128]	@ (8006458 <HAL_DMA_IRQHandler+0x6b0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d022      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1f      	ldr	r2, [pc, #124]	@ (800645c <HAL_DMA_IRQHandler+0x6b4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d01d      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006460 <HAL_DMA_IRQHandler+0x6b8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d018      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006464 <HAL_DMA_IRQHandler+0x6bc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006468 <HAL_DMA_IRQHandler+0x6c0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00e      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a19      	ldr	r2, [pc, #100]	@ (800646c <HAL_DMA_IRQHandler+0x6c4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d009      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <HAL_DMA_IRQHandler+0x6c8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <HAL_DMA_IRQHandler+0x678>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a16      	ldr	r2, [pc, #88]	@ (8006474 <HAL_DMA_IRQHandler+0x6cc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d12b      	bne.n	8006478 <HAL_DMA_IRQHandler+0x6d0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e02a      	b.n	800648c <HAL_DMA_IRQHandler+0x6e4>
 8006436:	bf00      	nop
 8006438:	40020010 	.word	0x40020010
 800643c:	40020028 	.word	0x40020028
 8006440:	40020040 	.word	0x40020040
 8006444:	40020058 	.word	0x40020058
 8006448:	40020070 	.word	0x40020070
 800644c:	40020088 	.word	0x40020088
 8006450:	400200a0 	.word	0x400200a0
 8006454:	400200b8 	.word	0x400200b8
 8006458:	40020410 	.word	0x40020410
 800645c:	40020428 	.word	0x40020428
 8006460:	40020440 	.word	0x40020440
 8006464:	40020458 	.word	0x40020458
 8006468:	40020470 	.word	0x40020470
 800646c:	40020488 	.word	0x40020488
 8006470:	400204a0 	.word	0x400204a0
 8006474:	400204b8 	.word	0x400204b8
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	bf14      	ite	ne
 8006486:	2301      	movne	r3, #1
 8006488:	2300      	moveq	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8087 	beq.w	80065a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2220      	movs	r2, #32
 800649c:	409a      	lsls	r2, r3
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d139      	bne.n	8006522 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0216 	bic.w	r2, r2, #22
 80064bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <HAL_DMA_IRQHandler+0x736>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0208 	bic.w	r2, r2, #8
 80064ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	223f      	movs	r2, #63	@ 0x3f
 80064f8:	409a      	lsls	r2, r3
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 834a 	beq.w	8006bac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
          }
          return;
 8006520:	e344      	b.n	8006bac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d018      	beq.n	8006562 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d108      	bne.n	8006550 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02c      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	e027      	b.n	80065a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d023      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
 8006560:	e01e      	b.n	80065a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10f      	bne.n	8006590 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0210 	bic.w	r2, r2, #16
 800657e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8306 	beq.w	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8088 	beq.w	80066c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2204      	movs	r2, #4
 80065bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a7a      	ldr	r2, [pc, #488]	@ (80067b0 <HAL_DMA_IRQHandler+0xa08>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d04a      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a79      	ldr	r2, [pc, #484]	@ (80067b4 <HAL_DMA_IRQHandler+0xa0c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d045      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a77      	ldr	r2, [pc, #476]	@ (80067b8 <HAL_DMA_IRQHandler+0xa10>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d040      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a76      	ldr	r2, [pc, #472]	@ (80067bc <HAL_DMA_IRQHandler+0xa14>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d03b      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a74      	ldr	r2, [pc, #464]	@ (80067c0 <HAL_DMA_IRQHandler+0xa18>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d036      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a73      	ldr	r2, [pc, #460]	@ (80067c4 <HAL_DMA_IRQHandler+0xa1c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d031      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a71      	ldr	r2, [pc, #452]	@ (80067c8 <HAL_DMA_IRQHandler+0xa20>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d02c      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a70      	ldr	r2, [pc, #448]	@ (80067cc <HAL_DMA_IRQHandler+0xa24>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d027      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6e      	ldr	r2, [pc, #440]	@ (80067d0 <HAL_DMA_IRQHandler+0xa28>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d022      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a6d      	ldr	r2, [pc, #436]	@ (80067d4 <HAL_DMA_IRQHandler+0xa2c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d01d      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a6b      	ldr	r2, [pc, #428]	@ (80067d8 <HAL_DMA_IRQHandler+0xa30>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d018      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a6a      	ldr	r2, [pc, #424]	@ (80067dc <HAL_DMA_IRQHandler+0xa34>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a68      	ldr	r2, [pc, #416]	@ (80067e0 <HAL_DMA_IRQHandler+0xa38>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a67      	ldr	r2, [pc, #412]	@ (80067e4 <HAL_DMA_IRQHandler+0xa3c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a65      	ldr	r2, [pc, #404]	@ (80067e8 <HAL_DMA_IRQHandler+0xa40>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_DMA_IRQHandler+0x8b8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a64      	ldr	r2, [pc, #400]	@ (80067ec <HAL_DMA_IRQHandler+0xa44>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d108      	bne.n	8006672 <HAL_DMA_IRQHandler+0x8ca>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e007      	b.n	8006682 <HAL_DMA_IRQHandler+0x8da>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800668a:	429a      	cmp	r2, r3
 800668c:	d307      	bcc.n	800669e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f2      	bne.n	8006682 <HAL_DMA_IRQHandler+0x8da>
 800669c:	e000      	b.n	80066a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800669e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2203      	movs	r2, #3
 80066b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80066b6:	e003      	b.n	80066c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8272 	beq.w	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
 80066da:	e26c      	b.n	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a43      	ldr	r2, [pc, #268]	@ (80067f0 <HAL_DMA_IRQHandler+0xa48>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <HAL_DMA_IRQHandler+0x984>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a42      	ldr	r2, [pc, #264]	@ (80067f4 <HAL_DMA_IRQHandler+0xa4c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <HAL_DMA_IRQHandler+0x984>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a40      	ldr	r2, [pc, #256]	@ (80067f8 <HAL_DMA_IRQHandler+0xa50>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <HAL_DMA_IRQHandler+0x984>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a3f      	ldr	r2, [pc, #252]	@ (80067fc <HAL_DMA_IRQHandler+0xa54>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_DMA_IRQHandler+0x984>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3d      	ldr	r2, [pc, #244]	@ (8006800 <HAL_DMA_IRQHandler+0xa58>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_DMA_IRQHandler+0x984>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a3c      	ldr	r2, [pc, #240]	@ (8006804 <HAL_DMA_IRQHandler+0xa5c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_DMA_IRQHandler+0x984>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a3a      	ldr	r2, [pc, #232]	@ (8006808 <HAL_DMA_IRQHandler+0xa60>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_DMA_IRQHandler+0x984>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a39      	ldr	r2, [pc, #228]	@ (800680c <HAL_DMA_IRQHandler+0xa64>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d101      	bne.n	8006730 <HAL_DMA_IRQHandler+0x988>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <HAL_DMA_IRQHandler+0x98a>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 823f 	beq.w	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2204      	movs	r2, #4
 800674a:	409a      	lsls	r2, r3
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80cd 	beq.w	80068f0 <HAL_DMA_IRQHandler+0xb48>
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80c7 	beq.w	80068f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2204      	movs	r2, #4
 800676c:	409a      	lsls	r2, r3
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d049      	beq.n	8006810 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8210 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006798:	e20a      	b.n	8006bb0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8206 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067ac:	e200      	b.n	8006bb0 <HAL_DMA_IRQHandler+0xe08>
 80067ae:	bf00      	nop
 80067b0:	40020010 	.word	0x40020010
 80067b4:	40020028 	.word	0x40020028
 80067b8:	40020040 	.word	0x40020040
 80067bc:	40020058 	.word	0x40020058
 80067c0:	40020070 	.word	0x40020070
 80067c4:	40020088 	.word	0x40020088
 80067c8:	400200a0 	.word	0x400200a0
 80067cc:	400200b8 	.word	0x400200b8
 80067d0:	40020410 	.word	0x40020410
 80067d4:	40020428 	.word	0x40020428
 80067d8:	40020440 	.word	0x40020440
 80067dc:	40020458 	.word	0x40020458
 80067e0:	40020470 	.word	0x40020470
 80067e4:	40020488 	.word	0x40020488
 80067e8:	400204a0 	.word	0x400204a0
 80067ec:	400204b8 	.word	0x400204b8
 80067f0:	58025408 	.word	0x58025408
 80067f4:	5802541c 	.word	0x5802541c
 80067f8:	58025430 	.word	0x58025430
 80067fc:	58025444 	.word	0x58025444
 8006800:	58025458 	.word	0x58025458
 8006804:	5802546c 	.word	0x5802546c
 8006808:	58025480 	.word	0x58025480
 800680c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d160      	bne.n	80068dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a7f      	ldr	r2, [pc, #508]	@ (8006a1c <HAL_DMA_IRQHandler+0xc74>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d04a      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a7d      	ldr	r2, [pc, #500]	@ (8006a20 <HAL_DMA_IRQHandler+0xc78>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d045      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a7c      	ldr	r2, [pc, #496]	@ (8006a24 <HAL_DMA_IRQHandler+0xc7c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d040      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a7a      	ldr	r2, [pc, #488]	@ (8006a28 <HAL_DMA_IRQHandler+0xc80>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d03b      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a79      	ldr	r2, [pc, #484]	@ (8006a2c <HAL_DMA_IRQHandler+0xc84>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d036      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a77      	ldr	r2, [pc, #476]	@ (8006a30 <HAL_DMA_IRQHandler+0xc88>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d031      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a76      	ldr	r2, [pc, #472]	@ (8006a34 <HAL_DMA_IRQHandler+0xc8c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d02c      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a74      	ldr	r2, [pc, #464]	@ (8006a38 <HAL_DMA_IRQHandler+0xc90>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d027      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a73      	ldr	r2, [pc, #460]	@ (8006a3c <HAL_DMA_IRQHandler+0xc94>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d022      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a71      	ldr	r2, [pc, #452]	@ (8006a40 <HAL_DMA_IRQHandler+0xc98>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01d      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a70      	ldr	r2, [pc, #448]	@ (8006a44 <HAL_DMA_IRQHandler+0xc9c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d018      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a6e      	ldr	r2, [pc, #440]	@ (8006a48 <HAL_DMA_IRQHandler+0xca0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a6d      	ldr	r2, [pc, #436]	@ (8006a4c <HAL_DMA_IRQHandler+0xca4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a6b      	ldr	r2, [pc, #428]	@ (8006a50 <HAL_DMA_IRQHandler+0xca8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d009      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a6a      	ldr	r2, [pc, #424]	@ (8006a54 <HAL_DMA_IRQHandler+0xcac>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_DMA_IRQHandler+0xb12>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a68      	ldr	r2, [pc, #416]	@ (8006a58 <HAL_DMA_IRQHandler+0xcb0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d108      	bne.n	80068cc <HAL_DMA_IRQHandler+0xb24>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0208 	bic.w	r2, r2, #8
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e007      	b.n	80068dc <HAL_DMA_IRQHandler+0xb34>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0204 	bic.w	r2, r2, #4
 80068da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8165 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ee:	e15f      	b.n	8006bb0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	2202      	movs	r2, #2
 80068fa:	409a      	lsls	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	4013      	ands	r3, r2
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80c5 	beq.w	8006a90 <HAL_DMA_IRQHandler+0xce8>
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80bf 	beq.w	8006a90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2202      	movs	r2, #2
 800691c:	409a      	lsls	r2, r3
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d018      	beq.n	800695e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 813a 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006948:	e134      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8130 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800695c:	e12a      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 8089 	bne.w	8006a7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a2b      	ldr	r2, [pc, #172]	@ (8006a1c <HAL_DMA_IRQHandler+0xc74>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d04a      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a29      	ldr	r2, [pc, #164]	@ (8006a20 <HAL_DMA_IRQHandler+0xc78>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d045      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a28      	ldr	r2, [pc, #160]	@ (8006a24 <HAL_DMA_IRQHandler+0xc7c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d040      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a26      	ldr	r2, [pc, #152]	@ (8006a28 <HAL_DMA_IRQHandler+0xc80>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d03b      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a25      	ldr	r2, [pc, #148]	@ (8006a2c <HAL_DMA_IRQHandler+0xc84>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d036      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a23      	ldr	r2, [pc, #140]	@ (8006a30 <HAL_DMA_IRQHandler+0xc88>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d031      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a22      	ldr	r2, [pc, #136]	@ (8006a34 <HAL_DMA_IRQHandler+0xc8c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d02c      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a20      	ldr	r2, [pc, #128]	@ (8006a38 <HAL_DMA_IRQHandler+0xc90>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d027      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1f      	ldr	r2, [pc, #124]	@ (8006a3c <HAL_DMA_IRQHandler+0xc94>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d022      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a40 <HAL_DMA_IRQHandler+0xc98>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d01d      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006a44 <HAL_DMA_IRQHandler+0xc9c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d018      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a48 <HAL_DMA_IRQHandler+0xca0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d013      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <HAL_DMA_IRQHandler+0xca4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00e      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a17      	ldr	r2, [pc, #92]	@ (8006a50 <HAL_DMA_IRQHandler+0xca8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d009      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a16      	ldr	r2, [pc, #88]	@ (8006a54 <HAL_DMA_IRQHandler+0xcac>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d004      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xc62>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a14      	ldr	r2, [pc, #80]	@ (8006a58 <HAL_DMA_IRQHandler+0xcb0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d128      	bne.n	8006a5c <HAL_DMA_IRQHandler+0xcb4>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0214 	bic.w	r2, r2, #20
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e027      	b.n	8006a6c <HAL_DMA_IRQHandler+0xcc4>
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 020a 	bic.w	r2, r2, #10
 8006a6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8097 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a8e:	e091      	b.n	8006bb4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2208      	movs	r2, #8
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8088 	beq.w	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8082 	beq.w	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a41      	ldr	r2, [pc, #260]	@ (8006bbc <HAL_DMA_IRQHandler+0xe14>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d04a      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a3f      	ldr	r2, [pc, #252]	@ (8006bc0 <HAL_DMA_IRQHandler+0xe18>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d045      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3e      	ldr	r2, [pc, #248]	@ (8006bc4 <HAL_DMA_IRQHandler+0xe1c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d040      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8006bc8 <HAL_DMA_IRQHandler+0xe20>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d03b      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a3b      	ldr	r2, [pc, #236]	@ (8006bcc <HAL_DMA_IRQHandler+0xe24>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d036      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a39      	ldr	r2, [pc, #228]	@ (8006bd0 <HAL_DMA_IRQHandler+0xe28>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d031      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a38      	ldr	r2, [pc, #224]	@ (8006bd4 <HAL_DMA_IRQHandler+0xe2c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d02c      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a36      	ldr	r2, [pc, #216]	@ (8006bd8 <HAL_DMA_IRQHandler+0xe30>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d027      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a35      	ldr	r2, [pc, #212]	@ (8006bdc <HAL_DMA_IRQHandler+0xe34>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a33      	ldr	r2, [pc, #204]	@ (8006be0 <HAL_DMA_IRQHandler+0xe38>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01d      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a32      	ldr	r2, [pc, #200]	@ (8006be4 <HAL_DMA_IRQHandler+0xe3c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a30      	ldr	r2, [pc, #192]	@ (8006be8 <HAL_DMA_IRQHandler+0xe40>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8006bec <HAL_DMA_IRQHandler+0xe44>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a2d      	ldr	r2, [pc, #180]	@ (8006bf0 <HAL_DMA_IRQHandler+0xe48>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf4 <HAL_DMA_IRQHandler+0xe4c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_DMA_IRQHandler+0xdaa>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf8 <HAL_DMA_IRQHandler+0xe50>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d108      	bne.n	8006b64 <HAL_DMA_IRQHandler+0xdbc>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 021c 	bic.w	r2, r2, #28
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e007      	b.n	8006b74 <HAL_DMA_IRQHandler+0xdcc>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 020e 	bic.w	r2, r2, #14
 8006b72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	4798      	blx	r3
 8006baa:	e004      	b.n	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006bac:	bf00      	nop
 8006bae:	e002      	b.n	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb0:	bf00      	nop
 8006bb2:	e000      	b.n	8006bb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006bb6:	3728      	adds	r7, #40	@ 0x28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40020010 	.word	0x40020010
 8006bc0:	40020028 	.word	0x40020028
 8006bc4:	40020040 	.word	0x40020040
 8006bc8:	40020058 	.word	0x40020058
 8006bcc:	40020070 	.word	0x40020070
 8006bd0:	40020088 	.word	0x40020088
 8006bd4:	400200a0 	.word	0x400200a0
 8006bd8:	400200b8 	.word	0x400200b8
 8006bdc:	40020410 	.word	0x40020410
 8006be0:	40020428 	.word	0x40020428
 8006be4:	40020440 	.word	0x40020440
 8006be8:	40020458 	.word	0x40020458
 8006bec:	40020470 	.word	0x40020470
 8006bf0:	40020488 	.word	0x40020488
 8006bf4:	400204a0 	.word	0x400204a0
 8006bf8:	400204b8 	.word	0x400204b8

08006bfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a7f      	ldr	r2, [pc, #508]	@ (8006e18 <DMA_SetConfig+0x21c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d072      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a7d      	ldr	r2, [pc, #500]	@ (8006e1c <DMA_SetConfig+0x220>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d06d      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a7c      	ldr	r2, [pc, #496]	@ (8006e20 <DMA_SetConfig+0x224>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d068      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a7a      	ldr	r2, [pc, #488]	@ (8006e24 <DMA_SetConfig+0x228>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d063      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a79      	ldr	r2, [pc, #484]	@ (8006e28 <DMA_SetConfig+0x22c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d05e      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a77      	ldr	r2, [pc, #476]	@ (8006e2c <DMA_SetConfig+0x230>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d059      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a76      	ldr	r2, [pc, #472]	@ (8006e30 <DMA_SetConfig+0x234>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d054      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a74      	ldr	r2, [pc, #464]	@ (8006e34 <DMA_SetConfig+0x238>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d04f      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a73      	ldr	r2, [pc, #460]	@ (8006e38 <DMA_SetConfig+0x23c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d04a      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a71      	ldr	r2, [pc, #452]	@ (8006e3c <DMA_SetConfig+0x240>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d045      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a70      	ldr	r2, [pc, #448]	@ (8006e40 <DMA_SetConfig+0x244>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d040      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a6e      	ldr	r2, [pc, #440]	@ (8006e44 <DMA_SetConfig+0x248>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d03b      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a6d      	ldr	r2, [pc, #436]	@ (8006e48 <DMA_SetConfig+0x24c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d036      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a6b      	ldr	r2, [pc, #428]	@ (8006e4c <DMA_SetConfig+0x250>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d031      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a6a      	ldr	r2, [pc, #424]	@ (8006e50 <DMA_SetConfig+0x254>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d02c      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a68      	ldr	r2, [pc, #416]	@ (8006e54 <DMA_SetConfig+0x258>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d027      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a67      	ldr	r2, [pc, #412]	@ (8006e58 <DMA_SetConfig+0x25c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a65      	ldr	r2, [pc, #404]	@ (8006e5c <DMA_SetConfig+0x260>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d01d      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a64      	ldr	r2, [pc, #400]	@ (8006e60 <DMA_SetConfig+0x264>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a62      	ldr	r2, [pc, #392]	@ (8006e64 <DMA_SetConfig+0x268>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a61      	ldr	r2, [pc, #388]	@ (8006e68 <DMA_SetConfig+0x26c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5f      	ldr	r2, [pc, #380]	@ (8006e6c <DMA_SetConfig+0x270>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a5e      	ldr	r2, [pc, #376]	@ (8006e70 <DMA_SetConfig+0x274>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <DMA_SetConfig+0x10a>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a5c      	ldr	r2, [pc, #368]	@ (8006e74 <DMA_SetConfig+0x278>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d101      	bne.n	8006d0a <DMA_SetConfig+0x10e>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <DMA_SetConfig+0x110>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00d      	beq.n	8006d2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a39      	ldr	r2, [pc, #228]	@ (8006e18 <DMA_SetConfig+0x21c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d04a      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a38      	ldr	r2, [pc, #224]	@ (8006e1c <DMA_SetConfig+0x220>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d045      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a36      	ldr	r2, [pc, #216]	@ (8006e20 <DMA_SetConfig+0x224>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d040      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a35      	ldr	r2, [pc, #212]	@ (8006e24 <DMA_SetConfig+0x228>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d03b      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a33      	ldr	r2, [pc, #204]	@ (8006e28 <DMA_SetConfig+0x22c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d036      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a32      	ldr	r2, [pc, #200]	@ (8006e2c <DMA_SetConfig+0x230>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d031      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a30      	ldr	r2, [pc, #192]	@ (8006e30 <DMA_SetConfig+0x234>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d02c      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2f      	ldr	r2, [pc, #188]	@ (8006e34 <DMA_SetConfig+0x238>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d027      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a2d      	ldr	r2, [pc, #180]	@ (8006e38 <DMA_SetConfig+0x23c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d022      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2c      	ldr	r2, [pc, #176]	@ (8006e3c <DMA_SetConfig+0x240>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d01d      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a2a      	ldr	r2, [pc, #168]	@ (8006e40 <DMA_SetConfig+0x244>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d018      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a29      	ldr	r2, [pc, #164]	@ (8006e44 <DMA_SetConfig+0x248>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d013      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a27      	ldr	r2, [pc, #156]	@ (8006e48 <DMA_SetConfig+0x24c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00e      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a26      	ldr	r2, [pc, #152]	@ (8006e4c <DMA_SetConfig+0x250>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d009      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a24      	ldr	r2, [pc, #144]	@ (8006e50 <DMA_SetConfig+0x254>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <DMA_SetConfig+0x1d0>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a23      	ldr	r2, [pc, #140]	@ (8006e54 <DMA_SetConfig+0x258>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d101      	bne.n	8006dd0 <DMA_SetConfig+0x1d4>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <DMA_SetConfig+0x1d6>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d059      	beq.n	8006e8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	223f      	movs	r2, #63	@ 0x3f
 8006de0:	409a      	lsls	r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006df4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b40      	cmp	r3, #64	@ 0x40
 8006e04:	d138      	bne.n	8006e78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e16:	e086      	b.n	8006f26 <DMA_SetConfig+0x32a>
 8006e18:	40020010 	.word	0x40020010
 8006e1c:	40020028 	.word	0x40020028
 8006e20:	40020040 	.word	0x40020040
 8006e24:	40020058 	.word	0x40020058
 8006e28:	40020070 	.word	0x40020070
 8006e2c:	40020088 	.word	0x40020088
 8006e30:	400200a0 	.word	0x400200a0
 8006e34:	400200b8 	.word	0x400200b8
 8006e38:	40020410 	.word	0x40020410
 8006e3c:	40020428 	.word	0x40020428
 8006e40:	40020440 	.word	0x40020440
 8006e44:	40020458 	.word	0x40020458
 8006e48:	40020470 	.word	0x40020470
 8006e4c:	40020488 	.word	0x40020488
 8006e50:	400204a0 	.word	0x400204a0
 8006e54:	400204b8 	.word	0x400204b8
 8006e58:	58025408 	.word	0x58025408
 8006e5c:	5802541c 	.word	0x5802541c
 8006e60:	58025430 	.word	0x58025430
 8006e64:	58025444 	.word	0x58025444
 8006e68:	58025458 	.word	0x58025458
 8006e6c:	5802546c 	.word	0x5802546c
 8006e70:	58025480 	.word	0x58025480
 8006e74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]
}
 8006e88:	e04d      	b.n	8006f26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a29      	ldr	r2, [pc, #164]	@ (8006f34 <DMA_SetConfig+0x338>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d022      	beq.n	8006eda <DMA_SetConfig+0x2de>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a27      	ldr	r2, [pc, #156]	@ (8006f38 <DMA_SetConfig+0x33c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01d      	beq.n	8006eda <DMA_SetConfig+0x2de>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a26      	ldr	r2, [pc, #152]	@ (8006f3c <DMA_SetConfig+0x340>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d018      	beq.n	8006eda <DMA_SetConfig+0x2de>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a24      	ldr	r2, [pc, #144]	@ (8006f40 <DMA_SetConfig+0x344>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <DMA_SetConfig+0x2de>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a23      	ldr	r2, [pc, #140]	@ (8006f44 <DMA_SetConfig+0x348>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <DMA_SetConfig+0x2de>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a21      	ldr	r2, [pc, #132]	@ (8006f48 <DMA_SetConfig+0x34c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <DMA_SetConfig+0x2de>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a20      	ldr	r2, [pc, #128]	@ (8006f4c <DMA_SetConfig+0x350>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <DMA_SetConfig+0x2de>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8006f50 <DMA_SetConfig+0x354>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d101      	bne.n	8006ede <DMA_SetConfig+0x2e2>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <DMA_SetConfig+0x2e4>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d020      	beq.n	8006f26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2201      	movs	r2, #1
 8006eee:	409a      	lsls	r2, r3
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b40      	cmp	r3, #64	@ 0x40
 8006f02:	d108      	bne.n	8006f16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	60da      	str	r2, [r3, #12]
}
 8006f14:	e007      	b.n	8006f26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	60da      	str	r2, [r3, #12]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	58025408 	.word	0x58025408
 8006f38:	5802541c 	.word	0x5802541c
 8006f3c:	58025430 	.word	0x58025430
 8006f40:	58025444 	.word	0x58025444
 8006f44:	58025458 	.word	0x58025458
 8006f48:	5802546c 	.word	0x5802546c
 8006f4c:	58025480 	.word	0x58025480
 8006f50:	58025494 	.word	0x58025494

08006f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a42      	ldr	r2, [pc, #264]	@ (800706c <DMA_CalcBaseAndBitshift+0x118>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d04a      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a41      	ldr	r2, [pc, #260]	@ (8007070 <DMA_CalcBaseAndBitshift+0x11c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d045      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a3f      	ldr	r2, [pc, #252]	@ (8007074 <DMA_CalcBaseAndBitshift+0x120>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d040      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a3e      	ldr	r2, [pc, #248]	@ (8007078 <DMA_CalcBaseAndBitshift+0x124>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d03b      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a3c      	ldr	r2, [pc, #240]	@ (800707c <DMA_CalcBaseAndBitshift+0x128>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d036      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a3b      	ldr	r2, [pc, #236]	@ (8007080 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d031      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a39      	ldr	r2, [pc, #228]	@ (8007084 <DMA_CalcBaseAndBitshift+0x130>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d02c      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a38      	ldr	r2, [pc, #224]	@ (8007088 <DMA_CalcBaseAndBitshift+0x134>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d027      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a36      	ldr	r2, [pc, #216]	@ (800708c <DMA_CalcBaseAndBitshift+0x138>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a35      	ldr	r2, [pc, #212]	@ (8007090 <DMA_CalcBaseAndBitshift+0x13c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d01d      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a33      	ldr	r2, [pc, #204]	@ (8007094 <DMA_CalcBaseAndBitshift+0x140>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a32      	ldr	r2, [pc, #200]	@ (8007098 <DMA_CalcBaseAndBitshift+0x144>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a30      	ldr	r2, [pc, #192]	@ (800709c <DMA_CalcBaseAndBitshift+0x148>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80070a0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2d      	ldr	r2, [pc, #180]	@ (80070a4 <DMA_CalcBaseAndBitshift+0x150>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <DMA_CalcBaseAndBitshift+0xa8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80070a8 <DMA_CalcBaseAndBitshift+0x154>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d101      	bne.n	8007000 <DMA_CalcBaseAndBitshift+0xac>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <DMA_CalcBaseAndBitshift+0xae>
 8007000:	2300      	movs	r3, #0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d024      	beq.n	8007050 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	3b10      	subs	r3, #16
 800700e:	4a27      	ldr	r2, [pc, #156]	@ (80070ac <DMA_CalcBaseAndBitshift+0x158>)
 8007010:	fba2 2303 	umull	r2, r3, r2, r3
 8007014:	091b      	lsrs	r3, r3, #4
 8007016:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	4a24      	ldr	r2, [pc, #144]	@ (80070b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007020:	5cd3      	ldrb	r3, [r2, r3]
 8007022:	461a      	mov	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b03      	cmp	r3, #3
 800702c:	d908      	bls.n	8007040 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	4b1f      	ldr	r3, [pc, #124]	@ (80070b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007036:	4013      	ands	r3, r2
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	659a      	str	r2, [r3, #88]	@ 0x58
 800703e:	e00d      	b.n	800705c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	4b1b      	ldr	r3, [pc, #108]	@ (80070b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007048:	4013      	ands	r3, r2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6593      	str	r3, [r2, #88]	@ 0x58
 800704e:	e005      	b.n	800705c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	40020010 	.word	0x40020010
 8007070:	40020028 	.word	0x40020028
 8007074:	40020040 	.word	0x40020040
 8007078:	40020058 	.word	0x40020058
 800707c:	40020070 	.word	0x40020070
 8007080:	40020088 	.word	0x40020088
 8007084:	400200a0 	.word	0x400200a0
 8007088:	400200b8 	.word	0x400200b8
 800708c:	40020410 	.word	0x40020410
 8007090:	40020428 	.word	0x40020428
 8007094:	40020440 	.word	0x40020440
 8007098:	40020458 	.word	0x40020458
 800709c:	40020470 	.word	0x40020470
 80070a0:	40020488 	.word	0x40020488
 80070a4:	400204a0 	.word	0x400204a0
 80070a8:	400204b8 	.word	0x400204b8
 80070ac:	aaaaaaab 	.word	0xaaaaaaab
 80070b0:	08013014 	.word	0x08013014
 80070b4:	fffffc00 	.word	0xfffffc00

080070b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d120      	bne.n	800710e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d858      	bhi.n	8007186 <DMA_CheckFifoParam+0xce>
 80070d4:	a201      	add	r2, pc, #4	@ (adr r2, 80070dc <DMA_CheckFifoParam+0x24>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	080070ed 	.word	0x080070ed
 80070e0:	080070ff 	.word	0x080070ff
 80070e4:	080070ed 	.word	0x080070ed
 80070e8:	08007187 	.word	0x08007187
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d048      	beq.n	800718a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070fc:	e045      	b.n	800718a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007102:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007106:	d142      	bne.n	800718e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800710c:	e03f      	b.n	800718e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007116:	d123      	bne.n	8007160 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	2b03      	cmp	r3, #3
 800711e:	d838      	bhi.n	8007192 <DMA_CheckFifoParam+0xda>
 8007120:	a201      	add	r2, pc, #4	@ (adr r2, 8007128 <DMA_CheckFifoParam+0x70>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	08007139 	.word	0x08007139
 800712c:	0800713f 	.word	0x0800713f
 8007130:	08007139 	.word	0x08007139
 8007134:	08007151 	.word	0x08007151
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
        break;
 800713c:	e030      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d025      	beq.n	8007196 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800714e:	e022      	b.n	8007196 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007158:	d11f      	bne.n	800719a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800715e:	e01c      	b.n	800719a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007164:	2b02      	cmp	r3, #2
 8007166:	d902      	bls.n	800716e <DMA_CheckFifoParam+0xb6>
 8007168:	2b03      	cmp	r3, #3
 800716a:	d003      	beq.n	8007174 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800716c:	e018      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	73fb      	strb	r3, [r7, #15]
        break;
 8007172:	e015      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00e      	beq.n	800719e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
    break;
 8007184:	e00b      	b.n	800719e <DMA_CheckFifoParam+0xe6>
        break;
 8007186:	bf00      	nop
 8007188:	e00a      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
        break;
 800718a:	bf00      	nop
 800718c:	e008      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
        break;
 800718e:	bf00      	nop
 8007190:	e006      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007192:	bf00      	nop
 8007194:	e004      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007196:	bf00      	nop
 8007198:	e002      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
        break;
 800719a:	bf00      	nop
 800719c:	e000      	b.n	80071a0 <DMA_CheckFifoParam+0xe8>
    break;
 800719e:	bf00      	nop
    }
  }

  return status;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop

080071b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a38      	ldr	r2, [pc, #224]	@ (80072a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d022      	beq.n	800720e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a36      	ldr	r2, [pc, #216]	@ (80072a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01d      	beq.n	800720e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a35      	ldr	r2, [pc, #212]	@ (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d018      	beq.n	800720e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a33      	ldr	r2, [pc, #204]	@ (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a32      	ldr	r2, [pc, #200]	@ (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00e      	beq.n	800720e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a30      	ldr	r2, [pc, #192]	@ (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d009      	beq.n	800720e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2f      	ldr	r2, [pc, #188]	@ (80072bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d004      	beq.n	800720e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2d      	ldr	r2, [pc, #180]	@ (80072c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d101      	bne.n	8007212 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01a      	beq.n	800724e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	3b08      	subs	r3, #8
 8007220:	4a28      	ldr	r2, [pc, #160]	@ (80072c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	091b      	lsrs	r3, r3, #4
 8007228:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4b26      	ldr	r3, [pc, #152]	@ (80072c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a24      	ldr	r2, [pc, #144]	@ (80072cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800723c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	2201      	movs	r2, #1
 8007246:	409a      	lsls	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800724c:	e024      	b.n	8007298 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	3b10      	subs	r3, #16
 8007256:	4a1e      	ldr	r2, [pc, #120]	@ (80072d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007258:	fba2 2303 	umull	r2, r3, r2, r3
 800725c:	091b      	lsrs	r3, r3, #4
 800725e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4a1c      	ldr	r2, [pc, #112]	@ (80072d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d806      	bhi.n	8007276 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a1b      	ldr	r2, [pc, #108]	@ (80072d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d902      	bls.n	8007276 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3308      	adds	r3, #8
 8007274:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4b18      	ldr	r3, [pc, #96]	@ (80072dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a16      	ldr	r2, [pc, #88]	@ (80072e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007288:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	2201      	movs	r2, #1
 8007292:	409a      	lsls	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	58025408 	.word	0x58025408
 80072a8:	5802541c 	.word	0x5802541c
 80072ac:	58025430 	.word	0x58025430
 80072b0:	58025444 	.word	0x58025444
 80072b4:	58025458 	.word	0x58025458
 80072b8:	5802546c 	.word	0x5802546c
 80072bc:	58025480 	.word	0x58025480
 80072c0:	58025494 	.word	0x58025494
 80072c4:	cccccccd 	.word	0xcccccccd
 80072c8:	16009600 	.word	0x16009600
 80072cc:	58025880 	.word	0x58025880
 80072d0:	aaaaaaab 	.word	0xaaaaaaab
 80072d4:	400204b8 	.word	0x400204b8
 80072d8:	4002040f 	.word	0x4002040f
 80072dc:	10008200 	.word	0x10008200
 80072e0:	40020880 	.word	0x40020880

080072e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d04a      	beq.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d847      	bhi.n	8007390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a25      	ldr	r2, [pc, #148]	@ (800739c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d022      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a24      	ldr	r2, [pc, #144]	@ (80073a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d01d      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a22      	ldr	r2, [pc, #136]	@ (80073a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d018      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a21      	ldr	r2, [pc, #132]	@ (80073a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1f      	ldr	r2, [pc, #124]	@ (80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00e      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1e      	ldr	r2, [pc, #120]	@ (80073b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d009      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1c      	ldr	r2, [pc, #112]	@ (80073b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d101      	bne.n	8007354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007354:	2300      	movs	r3, #0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4b17      	ldr	r3, [pc, #92]	@ (80073bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800736c:	671a      	str	r2, [r3, #112]	@ 0x70
 800736e:	e009      	b.n	8007384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a11      	ldr	r2, [pc, #68]	@ (80073c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007382:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	2201      	movs	r2, #1
 800738a:	409a      	lsls	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	58025408 	.word	0x58025408
 80073a0:	5802541c 	.word	0x5802541c
 80073a4:	58025430 	.word	0x58025430
 80073a8:	58025444 	.word	0x58025444
 80073ac:	58025458 	.word	0x58025458
 80073b0:	5802546c 	.word	0x5802546c
 80073b4:	58025480 	.word	0x58025480
 80073b8:	58025494 	.word	0x58025494
 80073bc:	1600963f 	.word	0x1600963f
 80073c0:	58025940 	.word	0x58025940
 80073c4:	1000823f 	.word	0x1000823f
 80073c8:	40020940 	.word	0x40020940

080073cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b089      	sub	sp, #36	@ 0x24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80073da:	4b89      	ldr	r3, [pc, #548]	@ (8007600 <HAL_GPIO_Init+0x234>)
 80073dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073de:	e194      	b.n	800770a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	2101      	movs	r1, #1
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	fa01 f303 	lsl.w	r3, r1, r3
 80073ec:	4013      	ands	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8186 	beq.w	8007704 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d005      	beq.n	8007410 <HAL_GPIO_Init+0x44>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d130      	bne.n	8007472 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	2203      	movs	r2, #3
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	43db      	mvns	r3, r3
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	4013      	ands	r3, r2
 8007426:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4313      	orrs	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007446:	2201      	movs	r2, #1
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43db      	mvns	r3, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4013      	ands	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0201 	and.w	r2, r3, #1
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	fa02 f303 	lsl.w	r3, r2, r3
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	4313      	orrs	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d017      	beq.n	80074ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	2203      	movs	r2, #3
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	43db      	mvns	r3, r3
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	4013      	ands	r3, r2
 8007494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	fa02 f303 	lsl.w	r3, r2, r3
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d123      	bne.n	8007502 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	08da      	lsrs	r2, r3, #3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3208      	adds	r2, #8
 80074c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	220f      	movs	r2, #15
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4013      	ands	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	08da      	lsrs	r2, r3, #3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3208      	adds	r2, #8
 80074fc:	69b9      	ldr	r1, [r7, #24]
 80074fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	2203      	movs	r2, #3
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	43db      	mvns	r3, r3
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4013      	ands	r3, r2
 8007518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f003 0203 	and.w	r2, r3, #3
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	fa02 f303 	lsl.w	r3, r2, r3
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	4313      	orrs	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80e0 	beq.w	8007704 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007544:	4b2f      	ldr	r3, [pc, #188]	@ (8007604 <HAL_GPIO_Init+0x238>)
 8007546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800754a:	4a2e      	ldr	r2, [pc, #184]	@ (8007604 <HAL_GPIO_Init+0x238>)
 800754c:	f043 0302 	orr.w	r3, r3, #2
 8007550:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007554:	4b2b      	ldr	r3, [pc, #172]	@ (8007604 <HAL_GPIO_Init+0x238>)
 8007556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007562:	4a29      	ldr	r2, [pc, #164]	@ (8007608 <HAL_GPIO_Init+0x23c>)
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	089b      	lsrs	r3, r3, #2
 8007568:	3302      	adds	r3, #2
 800756a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800756e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	220f      	movs	r2, #15
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	43db      	mvns	r3, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4013      	ands	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a20      	ldr	r2, [pc, #128]	@ (800760c <HAL_GPIO_Init+0x240>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d052      	beq.n	8007634 <HAL_GPIO_Init+0x268>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1f      	ldr	r2, [pc, #124]	@ (8007610 <HAL_GPIO_Init+0x244>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d031      	beq.n	80075fa <HAL_GPIO_Init+0x22e>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a1e      	ldr	r2, [pc, #120]	@ (8007614 <HAL_GPIO_Init+0x248>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02b      	beq.n	80075f6 <HAL_GPIO_Init+0x22a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007618 <HAL_GPIO_Init+0x24c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d025      	beq.n	80075f2 <HAL_GPIO_Init+0x226>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a1c      	ldr	r2, [pc, #112]	@ (800761c <HAL_GPIO_Init+0x250>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01f      	beq.n	80075ee <HAL_GPIO_Init+0x222>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007620 <HAL_GPIO_Init+0x254>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d019      	beq.n	80075ea <HAL_GPIO_Init+0x21e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007624 <HAL_GPIO_Init+0x258>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d013      	beq.n	80075e6 <HAL_GPIO_Init+0x21a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <HAL_GPIO_Init+0x25c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00d      	beq.n	80075e2 <HAL_GPIO_Init+0x216>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a18      	ldr	r2, [pc, #96]	@ (800762c <HAL_GPIO_Init+0x260>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <HAL_GPIO_Init+0x212>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a17      	ldr	r2, [pc, #92]	@ (8007630 <HAL_GPIO_Init+0x264>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d101      	bne.n	80075da <HAL_GPIO_Init+0x20e>
 80075d6:	2309      	movs	r3, #9
 80075d8:	e02d      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075da:	230a      	movs	r3, #10
 80075dc:	e02b      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075de:	2308      	movs	r3, #8
 80075e0:	e029      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075e2:	2307      	movs	r3, #7
 80075e4:	e027      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075e6:	2306      	movs	r3, #6
 80075e8:	e025      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075ea:	2305      	movs	r3, #5
 80075ec:	e023      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075ee:	2304      	movs	r3, #4
 80075f0:	e021      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075f2:	2303      	movs	r3, #3
 80075f4:	e01f      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e01d      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e01b      	b.n	8007636 <HAL_GPIO_Init+0x26a>
 80075fe:	bf00      	nop
 8007600:	58000080 	.word	0x58000080
 8007604:	58024400 	.word	0x58024400
 8007608:	58000400 	.word	0x58000400
 800760c:	58020000 	.word	0x58020000
 8007610:	58020400 	.word	0x58020400
 8007614:	58020800 	.word	0x58020800
 8007618:	58020c00 	.word	0x58020c00
 800761c:	58021000 	.word	0x58021000
 8007620:	58021400 	.word	0x58021400
 8007624:	58021800 	.word	0x58021800
 8007628:	58021c00 	.word	0x58021c00
 800762c:	58022000 	.word	0x58022000
 8007630:	58022400 	.word	0x58022400
 8007634:	2300      	movs	r3, #0
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	f002 0203 	and.w	r2, r2, #3
 800763c:	0092      	lsls	r2, r2, #2
 800763e:	4093      	lsls	r3, r2
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	4313      	orrs	r3, r2
 8007644:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007646:	4938      	ldr	r1, [pc, #224]	@ (8007728 <HAL_GPIO_Init+0x35c>)
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	089b      	lsrs	r3, r3, #2
 800764c:	3302      	adds	r3, #2
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	43db      	mvns	r3, r3
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	4013      	ands	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800767a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	43db      	mvns	r3, r3
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	4013      	ands	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	43db      	mvns	r3, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4013      	ands	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	f47f ae63 	bne.w	80073e0 <HAL_GPIO_Init+0x14>
  }
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	3724      	adds	r7, #36	@ 0x24
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	58000400 	.word	0x58000400

0800772c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800773a:	4b75      	ldr	r3, [pc, #468]	@ (8007910 <HAL_GPIO_DeInit+0x1e4>)
 800773c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800773e:	e0d9      	b.n	80078f4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007740:	2201      	movs	r2, #1
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	fa02 f303 	lsl.w	r3, r2, r3
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	4013      	ands	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80cc 	beq.w	80078ee <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007756:	4a6f      	ldr	r2, [pc, #444]	@ (8007914 <HAL_GPIO_DeInit+0x1e8>)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	089b      	lsrs	r3, r3, #2
 800775c:	3302      	adds	r3, #2
 800775e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007762:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	220f      	movs	r2, #15
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	4013      	ands	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a67      	ldr	r2, [pc, #412]	@ (8007918 <HAL_GPIO_DeInit+0x1ec>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d037      	beq.n	80077f0 <HAL_GPIO_DeInit+0xc4>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a66      	ldr	r2, [pc, #408]	@ (800791c <HAL_GPIO_DeInit+0x1f0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d031      	beq.n	80077ec <HAL_GPIO_DeInit+0xc0>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a65      	ldr	r2, [pc, #404]	@ (8007920 <HAL_GPIO_DeInit+0x1f4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d02b      	beq.n	80077e8 <HAL_GPIO_DeInit+0xbc>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a64      	ldr	r2, [pc, #400]	@ (8007924 <HAL_GPIO_DeInit+0x1f8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d025      	beq.n	80077e4 <HAL_GPIO_DeInit+0xb8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a63      	ldr	r2, [pc, #396]	@ (8007928 <HAL_GPIO_DeInit+0x1fc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d01f      	beq.n	80077e0 <HAL_GPIO_DeInit+0xb4>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a62      	ldr	r2, [pc, #392]	@ (800792c <HAL_GPIO_DeInit+0x200>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d019      	beq.n	80077dc <HAL_GPIO_DeInit+0xb0>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a61      	ldr	r2, [pc, #388]	@ (8007930 <HAL_GPIO_DeInit+0x204>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d013      	beq.n	80077d8 <HAL_GPIO_DeInit+0xac>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a60      	ldr	r2, [pc, #384]	@ (8007934 <HAL_GPIO_DeInit+0x208>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00d      	beq.n	80077d4 <HAL_GPIO_DeInit+0xa8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a5f      	ldr	r2, [pc, #380]	@ (8007938 <HAL_GPIO_DeInit+0x20c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d007      	beq.n	80077d0 <HAL_GPIO_DeInit+0xa4>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a5e      	ldr	r2, [pc, #376]	@ (800793c <HAL_GPIO_DeInit+0x210>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d101      	bne.n	80077cc <HAL_GPIO_DeInit+0xa0>
 80077c8:	2309      	movs	r3, #9
 80077ca:	e012      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077cc:	230a      	movs	r3, #10
 80077ce:	e010      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077d0:	2308      	movs	r3, #8
 80077d2:	e00e      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077d4:	2307      	movs	r3, #7
 80077d6:	e00c      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077d8:	2306      	movs	r3, #6
 80077da:	e00a      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077dc:	2305      	movs	r3, #5
 80077de:	e008      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077e0:	2304      	movs	r3, #4
 80077e2:	e006      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077e4:	2303      	movs	r3, #3
 80077e6:	e004      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e002      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <HAL_GPIO_DeInit+0xc6>
 80077f0:	2300      	movs	r3, #0
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	f002 0203 	and.w	r2, r2, #3
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	4093      	lsls	r3, r2
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d136      	bne.n	8007870 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	43db      	mvns	r3, r3
 800780a:	401a      	ands	r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	43db      	mvns	r3, r3
 8007818:	401a      	ands	r2, r3
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800781e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	43db      	mvns	r3, r3
 8007828:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800782c:	4013      	ands	r3, r2
 800782e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	43db      	mvns	r3, r3
 800783a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800783e:	4013      	ands	r3, r2
 8007840:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 0303 	and.w	r3, r3, #3
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	220f      	movs	r2, #15
 800784c:	fa02 f303 	lsl.w	r3, r2, r3
 8007850:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007852:	4a30      	ldr	r2, [pc, #192]	@ (8007914 <HAL_GPIO_DeInit+0x1e8>)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	089b      	lsrs	r3, r3, #2
 8007858:	3302      	adds	r3, #2
 800785a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	43da      	mvns	r2, r3
 8007862:	482c      	ldr	r0, [pc, #176]	@ (8007914 <HAL_GPIO_DeInit+0x1e8>)
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	089b      	lsrs	r3, r3, #2
 8007868:	400a      	ands	r2, r1
 800786a:	3302      	adds	r3, #2
 800786c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	2103      	movs	r1, #3
 800787a:	fa01 f303 	lsl.w	r3, r1, r3
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	08da      	lsrs	r2, r3, #3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3208      	adds	r2, #8
 800788c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	220f      	movs	r2, #15
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	43db      	mvns	r3, r3
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	08d2      	lsrs	r2, r2, #3
 80078a4:	4019      	ands	r1, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3208      	adds	r2, #8
 80078aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	2103      	movs	r1, #3
 80078b8:	fa01 f303 	lsl.w	r3, r1, r3
 80078bc:	43db      	mvns	r3, r3
 80078be:	401a      	ands	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	2101      	movs	r1, #1
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	43db      	mvns	r3, r3
 80078d2:	401a      	ands	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	2103      	movs	r1, #3
 80078e2:	fa01 f303 	lsl.w	r3, r1, r3
 80078e6:	43db      	mvns	r3, r3
 80078e8:	401a      	ands	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	609a      	str	r2, [r3, #8]
    }

    position++;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	3301      	adds	r3, #1
 80078f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f47f af1f 	bne.w	8007740 <HAL_GPIO_DeInit+0x14>
  }
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	58000080 	.word	0x58000080
 8007914:	58000400 	.word	0x58000400
 8007918:	58020000 	.word	0x58020000
 800791c:	58020400 	.word	0x58020400
 8007920:	58020800 	.word	0x58020800
 8007924:	58020c00 	.word	0x58020c00
 8007928:	58021000 	.word	0x58021000
 800792c:	58021400 	.word	0x58021400
 8007930:	58021800 	.word	0x58021800
 8007934:	58021c00 	.word	0x58021c00
 8007938:	58022000 	.word	0x58022000
 800793c:	58022400 	.word	0x58022400

08007940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	807b      	strh	r3, [r7, #2]
 800794c:	4613      	mov	r3, r2
 800794e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007950:	787b      	ldrb	r3, [r7, #1]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007956:	887a      	ldrh	r2, [r7, #2]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800795c:	e003      	b.n	8007966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800795e:	887b      	ldrh	r3, [r7, #2]
 8007960:	041a      	lsls	r2, r3, #16
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	619a      	str	r2, [r3, #24]
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e07f      	b.n	8007a86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7f9 ff62 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2224      	movs	r2, #36	@ 0x24
 80079a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80079c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d107      	bne.n	80079ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ea:	609a      	str	r2, [r3, #8]
 80079ec:	e006      	b.n	80079fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80079fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d104      	bne.n	8007a0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4b1d      	ldr	r3, [pc, #116]	@ (8007a90 <HAL_I2C_Init+0x11c>)
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	69d9      	ldr	r1, [r3, #28]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	02008000 	.word	0x02008000

08007a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d138      	bne.n	8007b1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e032      	b.n	8007b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2224      	movs	r2, #36	@ 0x24
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ae6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6819      	ldr	r1, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e000      	b.n	8007b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d139      	bne.n	8007bb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e033      	b.n	8007bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2224      	movs	r2, #36	@ 0x24
 8007b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e000      	b.n	8007bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007bb4:	2302      	movs	r3, #2
  }
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007bcc:	4b19      	ldr	r3, [pc, #100]	@ (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d00a      	beq.n	8007bee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007bd8:	4b16      	ldr	r3, [pc, #88]	@ (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d001      	beq.n	8007bea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e01f      	b.n	8007c2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e01d      	b.n	8007c2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007bee:	4b11      	ldr	r3, [pc, #68]	@ (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f023 0207 	bic.w	r2, r3, #7
 8007bf6:	490f      	ldr	r1, [pc, #60]	@ (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007bfe:	f7fa ffcb 	bl	8002b98 <HAL_GetTick>
 8007c02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c04:	e009      	b.n	8007c1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c06:	f7fa ffc7 	bl	8002b98 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c14:	d901      	bls.n	8007c1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e007      	b.n	8007c2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c1a:	4b06      	ldr	r3, [pc, #24]	@ (8007c34 <HAL_PWREx_ConfigSupply+0x70>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c26:	d1ee      	bne.n	8007c06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	58024800 	.word	0x58024800

08007c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08c      	sub	sp, #48	@ 0x30
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f000 bc48 	b.w	80084dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 808c 	beq.w	8007d72 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c5a:	4b96      	ldr	r3, [pc, #600]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c64:	4b93      	ldr	r3, [pc, #588]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	d007      	beq.n	8007c80 <HAL_RCC_OscConfig+0x48>
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	2b18      	cmp	r3, #24
 8007c74:	d111      	bne.n	8007c9a <HAL_RCC_OscConfig+0x62>
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d10c      	bne.n	8007c9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c80:	4b8c      	ldr	r3, [pc, #560]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d071      	beq.n	8007d70 <HAL_RCC_OscConfig+0x138>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d16d      	bne.n	8007d70 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f000 bc21 	b.w	80084dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca2:	d106      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x7a>
 8007ca4:	4b83      	ldr	r3, [pc, #524]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a82      	ldr	r2, [pc, #520]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	e02e      	b.n	8007d10 <HAL_RCC_OscConfig+0xd8>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x9c>
 8007cba:	4b7e      	ldr	r3, [pc, #504]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a7a      	ldr	r2, [pc, #488]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007ccc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	e01d      	b.n	8007d10 <HAL_RCC_OscConfig+0xd8>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_RCC_OscConfig+0xc0>
 8007cde:	4b75      	ldr	r3, [pc, #468]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a74      	ldr	r2, [pc, #464]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	4b72      	ldr	r3, [pc, #456]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a71      	ldr	r2, [pc, #452]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	e00b      	b.n	8007d10 <HAL_RCC_OscConfig+0xd8>
 8007cf8:	4b6e      	ldr	r3, [pc, #440]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	4b6b      	ldr	r3, [pc, #428]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a6a      	ldr	r2, [pc, #424]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d015      	beq.n	8007d44 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d18:	f7fa ff3e 	bl	8002b98 <HAL_GetTick>
 8007d1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d1e:	e00a      	b.n	8007d36 <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d20:	f7fa ff3a 	bl	8002b98 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e3d2      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d36:	4b5f      	ldr	r3, [pc, #380]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0ee      	beq.n	8007d20 <HAL_RCC_OscConfig+0xe8>
 8007d42:	e016      	b.n	8007d72 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7fa ff28 	bl	8002b98 <HAL_GetTick>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d4c:	f7fa ff24 	bl	8002b98 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e3bc      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d62:	4b54      	ldr	r3, [pc, #336]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1ee      	bne.n	8007d4c <HAL_RCC_OscConfig+0x114>
 8007d6e:	e000      	b.n	8007d72 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 80cb 	beq.w	8007f16 <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d80:	4b4c      	ldr	r3, [pc, #304]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <HAL_RCC_OscConfig+0x16e>
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	2b18      	cmp	r3, #24
 8007d9a:	d156      	bne.n	8007e4a <HAL_RCC_OscConfig+0x212>
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d151      	bne.n	8007e4a <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007da6:	4b43      	ldr	r3, [pc, #268]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <HAL_RCC_OscConfig+0x186>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e38e      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f023 0219 	bic.w	r2, r3, #25
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	493a      	ldr	r1, [pc, #232]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fa fee2 	bl	8002b98 <HAL_GetTick>
 8007dd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dd8:	f7fa fede 	bl	8002b98 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e378      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dea:	4b32      	ldr	r3, [pc, #200]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0f0      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df6:	f7fa feff 	bl	8002bf8 <HAL_GetREVID>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d817      	bhi.n	8007e34 <HAL_RCC_OscConfig+0x1fc>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b40      	cmp	r3, #64	@ 0x40
 8007e0a:	d108      	bne.n	8007e1e <HAL_RCC_OscConfig+0x1e6>
 8007e0c:	4b29      	ldr	r3, [pc, #164]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007e14:	4a27      	ldr	r2, [pc, #156]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e1a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e1c:	e07b      	b.n	8007f16 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e1e:	4b25      	ldr	r3, [pc, #148]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	031b      	lsls	r3, r3, #12
 8007e2c:	4921      	ldr	r1, [pc, #132]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e32:	e070      	b.n	8007f16 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e34:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	491c      	ldr	r1, [pc, #112]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e48:	e065      	b.n	8007f16 <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d048      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e52:	4b18      	ldr	r3, [pc, #96]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 0219 	bic.w	r2, r3, #25
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	4915      	ldr	r1, [pc, #84]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e64:	f7fa fe98 	bl	8002b98 <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e6c:	f7fa fe94 	bl	8002b98 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e32e      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0f0      	beq.n	8007e6c <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8a:	f7fa feb5 	bl	8002bf8 <HAL_GetREVID>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d81a      	bhi.n	8007ece <HAL_RCC_OscConfig+0x296>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b40      	cmp	r3, #64	@ 0x40
 8007e9e:	d10b      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x280>
 8007ea0:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007ea8:	4a02      	ldr	r2, [pc, #8]	@ (8007eb4 <HAL_RCC_OscConfig+0x27c>)
 8007eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eae:	6053      	str	r3, [r2, #4]
 8007eb0:	e031      	b.n	8007f16 <HAL_RCC_OscConfig+0x2de>
 8007eb2:	bf00      	nop
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	4999      	ldr	r1, [pc, #612]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	604b      	str	r3, [r1, #4]
 8007ecc:	e023      	b.n	8007f16 <HAL_RCC_OscConfig+0x2de>
 8007ece:	4b97      	ldr	r3, [pc, #604]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	061b      	lsls	r3, r3, #24
 8007edc:	4993      	ldr	r1, [pc, #588]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	604b      	str	r3, [r1, #4]
 8007ee2:	e018      	b.n	8007f16 <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ee4:	4b91      	ldr	r3, [pc, #580]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a90      	ldr	r2, [pc, #576]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007eea:	f023 0301 	bic.w	r3, r3, #1
 8007eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef0:	f7fa fe52 	bl	8002b98 <HAL_GetTick>
 8007ef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ef6:	e008      	b.n	8007f0a <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ef8:	f7fa fe4e 	bl	8002b98 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e2e8      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f0a:	4b88      	ldr	r3, [pc, #544]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1f0      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0310 	and.w	r3, r3, #16
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 80a9 	beq.w	8008076 <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f24:	4b81      	ldr	r3, [pc, #516]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f32:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b08      	cmp	r3, #8
 8007f38:	d007      	beq.n	8007f4a <HAL_RCC_OscConfig+0x312>
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b18      	cmp	r3, #24
 8007f3e:	d13a      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x37e>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d135      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f4a:	4b78      	ldr	r3, [pc, #480]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d005      	beq.n	8007f62 <HAL_RCC_OscConfig+0x32a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	2b80      	cmp	r3, #128	@ 0x80
 8007f5c:	d001      	beq.n	8007f62 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e2bc      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f62:	f7fa fe49 	bl	8002bf8 <HAL_GetREVID>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d817      	bhi.n	8007fa0 <HAL_RCC_OscConfig+0x368>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d108      	bne.n	8007f8a <HAL_RCC_OscConfig+0x352>
 8007f78:	4b6c      	ldr	r3, [pc, #432]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007f80:	4a6a      	ldr	r2, [pc, #424]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f88:	e075      	b.n	8008076 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f8a:	4b68      	ldr	r3, [pc, #416]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	069b      	lsls	r3, r3, #26
 8007f98:	4964      	ldr	r1, [pc, #400]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f9e:	e06a      	b.n	8008076 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fa0:	4b62      	ldr	r3, [pc, #392]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	061b      	lsls	r3, r3, #24
 8007fae:	495f      	ldr	r1, [pc, #380]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fb4:	e05f      	b.n	8008076 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d042      	beq.n	8008044 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fca:	f7fa fde5 	bl	8002b98 <HAL_GetTick>
 8007fce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007fd2:	f7fa fde1 	bl	8002b98 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e27b      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fe4:	4b51      	ldr	r3, [pc, #324]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0f0      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ff0:	f7fa fe02 	bl	8002bf8 <HAL_GetREVID>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d817      	bhi.n	800802e <HAL_RCC_OscConfig+0x3f6>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	2b20      	cmp	r3, #32
 8008004:	d108      	bne.n	8008018 <HAL_RCC_OscConfig+0x3e0>
 8008006:	4b49      	ldr	r3, [pc, #292]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800800e:	4a47      	ldr	r2, [pc, #284]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8008010:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008014:	6053      	str	r3, [r2, #4]
 8008016:	e02e      	b.n	8008076 <HAL_RCC_OscConfig+0x43e>
 8008018:	4b44      	ldr	r3, [pc, #272]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	069b      	lsls	r3, r3, #26
 8008026:	4941      	ldr	r1, [pc, #260]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8008028:	4313      	orrs	r3, r2
 800802a:	604b      	str	r3, [r1, #4]
 800802c:	e023      	b.n	8008076 <HAL_RCC_OscConfig+0x43e>
 800802e:	4b3f      	ldr	r3, [pc, #252]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	061b      	lsls	r3, r3, #24
 800803c:	493b      	ldr	r1, [pc, #236]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 800803e:	4313      	orrs	r3, r2
 8008040:	60cb      	str	r3, [r1, #12]
 8008042:	e018      	b.n	8008076 <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008044:	4b39      	ldr	r3, [pc, #228]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a38      	ldr	r2, [pc, #224]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 800804a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800804e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008050:	f7fa fda2 	bl	8002b98 <HAL_GetTick>
 8008054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008058:	f7fa fd9e 	bl	8002b98 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e238      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800806a:	4b30      	ldr	r3, [pc, #192]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f0      	bne.n	8008058 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d036      	beq.n	80080f0 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d019      	beq.n	80080be <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800808a:	4b28      	ldr	r3, [pc, #160]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 800808c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800808e:	4a27      	ldr	r2, [pc, #156]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8008090:	f043 0301 	orr.w	r3, r3, #1
 8008094:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008096:	f7fa fd7f 	bl	8002b98 <HAL_GetTick>
 800809a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800809e:	f7fa fd7b 	bl	8002b98 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e215      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080b0:	4b1e      	ldr	r3, [pc, #120]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 80080b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0f0      	beq.n	800809e <HAL_RCC_OscConfig+0x466>
 80080bc:	e018      	b.n	80080f0 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080be:	4b1b      	ldr	r3, [pc, #108]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 80080c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080c2:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ca:	f7fa fd65 	bl	8002b98 <HAL_GetTick>
 80080ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080d0:	e008      	b.n	80080e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080d2:	f7fa fd61 	bl	8002b98 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e1fb      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080e4:	4b11      	ldr	r3, [pc, #68]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 80080e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f0      	bne.n	80080d2 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d039      	beq.n	8008170 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01c      	beq.n	800813e <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008104:	4b09      	ldr	r3, [pc, #36]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a08      	ldr	r2, [pc, #32]	@ (800812c <HAL_RCC_OscConfig+0x4f4>)
 800810a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800810e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008110:	f7fa fd42 	bl	8002b98 <HAL_GetTick>
 8008114:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008116:	e00b      	b.n	8008130 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008118:	f7fa fd3e 	bl	8002b98 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d904      	bls.n	8008130 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e1d8      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
 800812a:	bf00      	nop
 800812c:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008130:	4b65      	ldr	r3, [pc, #404]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0ed      	beq.n	8008118 <HAL_RCC_OscConfig+0x4e0>
 800813c:	e018      	b.n	8008170 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800813e:	4b62      	ldr	r3, [pc, #392]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a61      	ldr	r2, [pc, #388]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008148:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800814a:	f7fa fd25 	bl	8002b98 <HAL_GetTick>
 800814e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008152:	f7fa fd21 	bl	8002b98 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e1bb      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008164:	4b58      	ldr	r3, [pc, #352]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f0      	bne.n	8008152 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8081 	beq.w	8008280 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800817e:	4b53      	ldr	r3, [pc, #332]	@ (80082cc <HAL_RCC_OscConfig+0x694>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a52      	ldr	r2, [pc, #328]	@ (80082cc <HAL_RCC_OscConfig+0x694>)
 8008184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008188:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800818a:	f7fa fd05 	bl	8002b98 <HAL_GetTick>
 800818e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008192:	f7fa fd01 	bl	8002b98 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b64      	cmp	r3, #100	@ 0x64
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e19b      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081a4:	4b49      	ldr	r3, [pc, #292]	@ (80082cc <HAL_RCC_OscConfig+0x694>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d106      	bne.n	80081c6 <HAL_RCC_OscConfig+0x58e>
 80081b8:	4b43      	ldr	r3, [pc, #268]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081bc:	4a42      	ldr	r2, [pc, #264]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80081c4:	e02d      	b.n	8008222 <HAL_RCC_OscConfig+0x5ea>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10c      	bne.n	80081e8 <HAL_RCC_OscConfig+0x5b0>
 80081ce:	4b3e      	ldr	r3, [pc, #248]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d2:	4a3d      	ldr	r2, [pc, #244]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081d4:	f023 0301 	bic.w	r3, r3, #1
 80081d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80081da:	4b3b      	ldr	r3, [pc, #236]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081de:	4a3a      	ldr	r2, [pc, #232]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081e0:	f023 0304 	bic.w	r3, r3, #4
 80081e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80081e6:	e01c      	b.n	8008222 <HAL_RCC_OscConfig+0x5ea>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	2b05      	cmp	r3, #5
 80081ee:	d10c      	bne.n	800820a <HAL_RCC_OscConfig+0x5d2>
 80081f0:	4b35      	ldr	r3, [pc, #212]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f4:	4a34      	ldr	r2, [pc, #208]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081f6:	f043 0304 	orr.w	r3, r3, #4
 80081fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80081fc:	4b32      	ldr	r3, [pc, #200]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80081fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008200:	4a31      	ldr	r2, [pc, #196]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	6713      	str	r3, [r2, #112]	@ 0x70
 8008208:	e00b      	b.n	8008222 <HAL_RCC_OscConfig+0x5ea>
 800820a:	4b2f      	ldr	r3, [pc, #188]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820e:	4a2e      	ldr	r2, [pc, #184]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	6713      	str	r3, [r2, #112]	@ 0x70
 8008216:	4b2c      	ldr	r3, [pc, #176]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	4a2b      	ldr	r2, [pc, #172]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 800821c:	f023 0304 	bic.w	r3, r3, #4
 8008220:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d015      	beq.n	8008256 <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800822a:	f7fa fcb5 	bl	8002b98 <HAL_GetTick>
 800822e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008230:	e00a      	b.n	8008248 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008232:	f7fa fcb1 	bl	8002b98 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008240:	4293      	cmp	r3, r2
 8008242:	d901      	bls.n	8008248 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e149      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008248:	4b1f      	ldr	r3, [pc, #124]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 800824a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0ee      	beq.n	8008232 <HAL_RCC_OscConfig+0x5fa>
 8008254:	e014      	b.n	8008280 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008256:	f7fa fc9f 	bl	8002b98 <HAL_GetTick>
 800825a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800825c:	e00a      	b.n	8008274 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800825e:	f7fa fc9b 	bl	8002b98 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800826c:	4293      	cmp	r3, r2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e133      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008274:	4b14      	ldr	r3, [pc, #80]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1ee      	bne.n	800825e <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8128 	beq.w	80084da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800828a:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008292:	2b18      	cmp	r3, #24
 8008294:	f000 80b8 	beq.w	8008408 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829c:	2b02      	cmp	r3, #2
 800829e:	f040 8099 	bne.w	80083d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a2:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a08      	ldr	r2, [pc, #32]	@ (80082c8 <HAL_RCC_OscConfig+0x690>)
 80082a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ae:	f7fa fc73 	bl	8002b98 <HAL_GetTick>
 80082b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082b4:	e00c      	b.n	80082d0 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082b6:	f7fa fc6f 	bl	8002b98 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d905      	bls.n	80082d0 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e109      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
 80082c8:	58024400 	.word	0x58024400
 80082cc:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082d0:	4b84      	ldr	r3, [pc, #528]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1ec      	bne.n	80082b6 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082dc:	4b81      	ldr	r3, [pc, #516]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80082de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082e0:	4b81      	ldr	r3, [pc, #516]	@ (80084e8 <HAL_RCC_OscConfig+0x8b0>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80082ec:	0112      	lsls	r2, r2, #4
 80082ee:	430a      	orrs	r2, r1
 80082f0:	497c      	ldr	r1, [pc, #496]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	628b      	str	r3, [r1, #40]	@ 0x28
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082fa:	3b01      	subs	r3, #1
 80082fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008304:	3b01      	subs	r3, #1
 8008306:	025b      	lsls	r3, r3, #9
 8008308:	b29b      	uxth	r3, r3
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008310:	3b01      	subs	r3, #1
 8008312:	041b      	lsls	r3, r3, #16
 8008314:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831e:	3b01      	subs	r3, #1
 8008320:	061b      	lsls	r3, r3, #24
 8008322:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008326:	496f      	ldr	r1, [pc, #444]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008328:	4313      	orrs	r3, r2
 800832a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800832c:	4b6d      	ldr	r3, [pc, #436]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800832e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008330:	4a6c      	ldr	r2, [pc, #432]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008338:	4b6a      	ldr	r3, [pc, #424]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800833a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800833c:	4b6b      	ldr	r3, [pc, #428]	@ (80084ec <HAL_RCC_OscConfig+0x8b4>)
 800833e:	4013      	ands	r3, r2
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008344:	00d2      	lsls	r2, r2, #3
 8008346:	4967      	ldr	r1, [pc, #412]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008348:	4313      	orrs	r3, r2
 800834a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800834c:	4b65      	ldr	r3, [pc, #404]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008350:	f023 020c 	bic.w	r2, r3, #12
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008358:	4962      	ldr	r1, [pc, #392]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800835a:	4313      	orrs	r3, r2
 800835c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800835e:	4b61      	ldr	r3, [pc, #388]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	f023 0202 	bic.w	r2, r3, #2
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836a:	495e      	ldr	r1, [pc, #376]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800836c:	4313      	orrs	r3, r2
 800836e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008370:	4b5c      	ldr	r3, [pc, #368]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	4a5b      	ldr	r2, [pc, #364]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800837a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800837c:	4b59      	ldr	r3, [pc, #356]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	4a58      	ldr	r2, [pc, #352]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008388:	4b56      	ldr	r3, [pc, #344]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	4a55      	ldr	r2, [pc, #340]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800838e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008394:	4b53      	ldr	r3, [pc, #332]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008398:	4a52      	ldr	r2, [pc, #328]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083a0:	4b50      	ldr	r3, [pc, #320]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a4f      	ldr	r2, [pc, #316]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80083a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ac:	f7fa fbf4 	bl	8002b98 <HAL_GetTick>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b4:	f7fa fbf0 	bl	8002b98 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e08a      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083c6:	4b47      	ldr	r3, [pc, #284]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0f0      	beq.n	80083b4 <HAL_RCC_OscConfig+0x77c>
 80083d2:	e082      	b.n	80084da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083d4:	4b43      	ldr	r3, [pc, #268]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a42      	ldr	r2, [pc, #264]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80083da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e0:	f7fa fbda 	bl	8002b98 <HAL_GetTick>
 80083e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e8:	f7fa fbd6 	bl	8002b98 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e070      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083fa:	4b3a      	ldr	r3, [pc, #232]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0x7b0>
 8008406:	e068      	b.n	80084da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008408:	4b36      	ldr	r3, [pc, #216]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800840e:	4b35      	ldr	r3, [pc, #212]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008412:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008418:	2b01      	cmp	r3, #1
 800841a:	d031      	beq.n	8008480 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f003 0203 	and.w	r2, r3, #3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008426:	429a      	cmp	r2, r3
 8008428:	d12a      	bne.n	8008480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	091b      	lsrs	r3, r3, #4
 800842e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008436:	429a      	cmp	r2, r3
 8008438:	d122      	bne.n	8008480 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008444:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d11a      	bne.n	8008480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	0a5b      	lsrs	r3, r3, #9
 800844e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008456:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008458:	429a      	cmp	r2, r3
 800845a:	d111      	bne.n	8008480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	0c1b      	lsrs	r3, r3, #16
 8008460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008468:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800846a:	429a      	cmp	r2, r3
 800846c:	d108      	bne.n	8008480 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	0e1b      	lsrs	r3, r3, #24
 8008472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800847c:	429a      	cmp	r2, r3
 800847e:	d001      	beq.n	8008484 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e02b      	b.n	80084dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008484:	4b17      	ldr	r3, [pc, #92]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 8008486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800848e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	429a      	cmp	r2, r3
 8008498:	d01f      	beq.n	80084da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800849a:	4b12      	ldr	r3, [pc, #72]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 800849c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849e:	4a11      	ldr	r2, [pc, #68]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084a6:	f7fa fb77 	bl	8002b98 <HAL_GetTick>
 80084aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80084ac:	bf00      	nop
 80084ae:	f7fa fb73 	bl	8002b98 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d0f9      	beq.n	80084ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084ba:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80084bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084be:	4b0b      	ldr	r3, [pc, #44]	@ (80084ec <HAL_RCC_OscConfig+0x8b4>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084c6:	00d2      	lsls	r2, r2, #3
 80084c8:	4906      	ldr	r1, [pc, #24]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80084ce:	4b05      	ldr	r3, [pc, #20]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80084d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d2:	4a04      	ldr	r2, [pc, #16]	@ (80084e4 <HAL_RCC_OscConfig+0x8ac>)
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3730      	adds	r7, #48	@ 0x30
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	58024400 	.word	0x58024400
 80084e8:	fffffc0c 	.word	0xfffffc0c
 80084ec:	ffff0007 	.word	0xffff0007

080084f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e19c      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008504:	4b8a      	ldr	r3, [pc, #552]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d910      	bls.n	8008534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008512:	4b87      	ldr	r3, [pc, #540]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f023 020f 	bic.w	r2, r3, #15
 800851a:	4985      	ldr	r1, [pc, #532]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	4313      	orrs	r3, r2
 8008520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008522:	4b83      	ldr	r3, [pc, #524]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d001      	beq.n	8008534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e184      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	d010      	beq.n	8008562 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	4b7b      	ldr	r3, [pc, #492]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800854c:	429a      	cmp	r2, r3
 800854e:	d908      	bls.n	8008562 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008550:	4b78      	ldr	r3, [pc, #480]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	4975      	ldr	r1, [pc, #468]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 800855e:	4313      	orrs	r3, r2
 8008560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0308 	and.w	r3, r3, #8
 800856a:	2b00      	cmp	r3, #0
 800856c:	d010      	beq.n	8008590 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	695a      	ldr	r2, [r3, #20]
 8008572:	4b70      	ldr	r3, [pc, #448]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800857a:	429a      	cmp	r2, r3
 800857c:	d908      	bls.n	8008590 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800857e:	4b6d      	ldr	r3, [pc, #436]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	496a      	ldr	r1, [pc, #424]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 800858c:	4313      	orrs	r3, r2
 800858e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b00      	cmp	r3, #0
 800859a:	d010      	beq.n	80085be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	4b64      	ldr	r3, [pc, #400]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d908      	bls.n	80085be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085ac:	4b61      	ldr	r3, [pc, #388]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	495e      	ldr	r1, [pc, #376]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0320 	and.w	r3, r3, #32
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d010      	beq.n	80085ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69da      	ldr	r2, [r3, #28]
 80085ce:	4b59      	ldr	r3, [pc, #356]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d908      	bls.n	80085ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085da:	4b56      	ldr	r3, [pc, #344]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	4953      	ldr	r1, [pc, #332]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d010      	beq.n	800861a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	f003 030f 	and.w	r3, r3, #15
 8008604:	429a      	cmp	r2, r3
 8008606:	d908      	bls.n	800861a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008608:	4b4a      	ldr	r3, [pc, #296]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	f023 020f 	bic.w	r2, r3, #15
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	4947      	ldr	r1, [pc, #284]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008616:	4313      	orrs	r3, r2
 8008618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d055      	beq.n	80086d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008626:	4b43      	ldr	r3, [pc, #268]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	4940      	ldr	r1, [pc, #256]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008634:	4313      	orrs	r3, r2
 8008636:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2b02      	cmp	r3, #2
 800863e:	d107      	bne.n	8008650 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008640:	4b3c      	ldr	r3, [pc, #240]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d121      	bne.n	8008690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e0f6      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2b03      	cmp	r3, #3
 8008656:	d107      	bne.n	8008668 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008658:	4b36      	ldr	r3, [pc, #216]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d115      	bne.n	8008690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e0ea      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d107      	bne.n	8008680 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008670:	4b30      	ldr	r3, [pc, #192]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d109      	bne.n	8008690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e0de      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008680:	4b2c      	ldr	r3, [pc, #176]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e0d6      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008690:	4b28      	ldr	r3, [pc, #160]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f023 0207 	bic.w	r2, r3, #7
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	4925      	ldr	r1, [pc, #148]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086a2:	f7fa fa79 	bl	8002b98 <HAL_GetTick>
 80086a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086a8:	e00a      	b.n	80086c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086aa:	f7fa fa75 	bl	8002b98 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d901      	bls.n	80086c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e0be      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d1eb      	bne.n	80086aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d010      	beq.n	8008700 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	4b14      	ldr	r3, [pc, #80]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d208      	bcs.n	8008700 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086ee:	4b11      	ldr	r3, [pc, #68]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	f023 020f 	bic.w	r2, r3, #15
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	490e      	ldr	r1, [pc, #56]	@ (8008734 <HAL_RCC_ClockConfig+0x244>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008700:	4b0b      	ldr	r3, [pc, #44]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d214      	bcs.n	8008738 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800870e:	4b08      	ldr	r3, [pc, #32]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f023 020f 	bic.w	r2, r3, #15
 8008716:	4906      	ldr	r1, [pc, #24]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	4313      	orrs	r3, r2
 800871c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800871e:	4b04      	ldr	r3, [pc, #16]	@ (8008730 <HAL_RCC_ClockConfig+0x240>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	429a      	cmp	r2, r3
 800872a:	d005      	beq.n	8008738 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e086      	b.n	800883e <HAL_RCC_ClockConfig+0x34e>
 8008730:	52002000 	.word	0x52002000
 8008734:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d010      	beq.n	8008766 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	4b3f      	ldr	r3, [pc, #252]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008750:	429a      	cmp	r2, r3
 8008752:	d208      	bcs.n	8008766 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008754:	4b3c      	ldr	r3, [pc, #240]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	4939      	ldr	r1, [pc, #228]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 8008762:	4313      	orrs	r3, r2
 8008764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d010      	beq.n	8008794 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	695a      	ldr	r2, [r3, #20]
 8008776:	4b34      	ldr	r3, [pc, #208]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800877e:	429a      	cmp	r2, r3
 8008780:	d208      	bcs.n	8008794 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008782:	4b31      	ldr	r3, [pc, #196]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	492e      	ldr	r1, [pc, #184]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 8008790:	4313      	orrs	r3, r2
 8008792:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	2b00      	cmp	r3, #0
 800879e:	d010      	beq.n	80087c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699a      	ldr	r2, [r3, #24]
 80087a4:	4b28      	ldr	r3, [pc, #160]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d208      	bcs.n	80087c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087b0:	4b25      	ldr	r3, [pc, #148]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	4922      	ldr	r1, [pc, #136]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d010      	beq.n	80087f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69da      	ldr	r2, [r3, #28]
 80087d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087da:	429a      	cmp	r2, r3
 80087dc:	d208      	bcs.n	80087f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087de:	4b1a      	ldr	r3, [pc, #104]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	4917      	ldr	r1, [pc, #92]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80087f0:	f000 f834 	bl	800885c <HAL_RCC_GetSysClockFreq>
 80087f4:	4602      	mov	r2, r0
 80087f6:	4b14      	ldr	r3, [pc, #80]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	0a1b      	lsrs	r3, r3, #8
 80087fc:	f003 030f 	and.w	r3, r3, #15
 8008800:	4912      	ldr	r1, [pc, #72]	@ (800884c <HAL_RCC_ClockConfig+0x35c>)
 8008802:	5ccb      	ldrb	r3, [r1, r3]
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800880e:	4b0e      	ldr	r3, [pc, #56]	@ (8008848 <HAL_RCC_ClockConfig+0x358>)
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	4a0d      	ldr	r2, [pc, #52]	@ (800884c <HAL_RCC_ClockConfig+0x35c>)
 8008818:	5cd3      	ldrb	r3, [r2, r3]
 800881a:	f003 031f 	and.w	r3, r3, #31
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	fa22 f303 	lsr.w	r3, r2, r3
 8008824:	4a0a      	ldr	r2, [pc, #40]	@ (8008850 <HAL_RCC_ClockConfig+0x360>)
 8008826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008828:	4a0a      	ldr	r2, [pc, #40]	@ (8008854 <HAL_RCC_ClockConfig+0x364>)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800882e:	4b0a      	ldr	r3, [pc, #40]	@ (8008858 <HAL_RCC_ClockConfig+0x368>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f7fa f966 	bl	8002b04 <HAL_InitTick>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	58024400 	.word	0x58024400
 800884c:	08013004 	.word	0x08013004
 8008850:	2400001c 	.word	0x2400001c
 8008854:	24000018 	.word	0x24000018
 8008858:	24000020 	.word	0x24000020

0800885c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800885c:	b480      	push	{r7}
 800885e:	b089      	sub	sp, #36	@ 0x24
 8008860:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008862:	4bb3      	ldr	r3, [pc, #716]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800886a:	2b18      	cmp	r3, #24
 800886c:	f200 8155 	bhi.w	8008b1a <HAL_RCC_GetSysClockFreq+0x2be>
 8008870:	a201      	add	r2, pc, #4	@ (adr r2, 8008878 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	080088dd 	.word	0x080088dd
 800887c:	08008b1b 	.word	0x08008b1b
 8008880:	08008b1b 	.word	0x08008b1b
 8008884:	08008b1b 	.word	0x08008b1b
 8008888:	08008b1b 	.word	0x08008b1b
 800888c:	08008b1b 	.word	0x08008b1b
 8008890:	08008b1b 	.word	0x08008b1b
 8008894:	08008b1b 	.word	0x08008b1b
 8008898:	08008903 	.word	0x08008903
 800889c:	08008b1b 	.word	0x08008b1b
 80088a0:	08008b1b 	.word	0x08008b1b
 80088a4:	08008b1b 	.word	0x08008b1b
 80088a8:	08008b1b 	.word	0x08008b1b
 80088ac:	08008b1b 	.word	0x08008b1b
 80088b0:	08008b1b 	.word	0x08008b1b
 80088b4:	08008b1b 	.word	0x08008b1b
 80088b8:	08008909 	.word	0x08008909
 80088bc:	08008b1b 	.word	0x08008b1b
 80088c0:	08008b1b 	.word	0x08008b1b
 80088c4:	08008b1b 	.word	0x08008b1b
 80088c8:	08008b1b 	.word	0x08008b1b
 80088cc:	08008b1b 	.word	0x08008b1b
 80088d0:	08008b1b 	.word	0x08008b1b
 80088d4:	08008b1b 	.word	0x08008b1b
 80088d8:	0800890f 	.word	0x0800890f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088dc:	4b94      	ldr	r3, [pc, #592]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0320 	and.w	r3, r3, #32
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d009      	beq.n	80088fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088e8:	4b91      	ldr	r3, [pc, #580]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	08db      	lsrs	r3, r3, #3
 80088ee:	f003 0303 	and.w	r3, r3, #3
 80088f2:	4a90      	ldr	r2, [pc, #576]	@ (8008b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088f4:	fa22 f303 	lsr.w	r3, r2, r3
 80088f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80088fa:	e111      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80088fc:	4b8d      	ldr	r3, [pc, #564]	@ (8008b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088fe:	61bb      	str	r3, [r7, #24]
      break;
 8008900:	e10e      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008902:	4b8d      	ldr	r3, [pc, #564]	@ (8008b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008904:	61bb      	str	r3, [r7, #24]
      break;
 8008906:	e10b      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008908:	4b8c      	ldr	r3, [pc, #560]	@ (8008b3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800890a:	61bb      	str	r3, [r7, #24]
      break;
 800890c:	e108      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800890e:	4b88      	ldr	r3, [pc, #544]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008918:	4b85      	ldr	r3, [pc, #532]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	091b      	lsrs	r3, r3, #4
 800891e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008922:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008924:	4b82      	ldr	r3, [pc, #520]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800892e:	4b80      	ldr	r3, [pc, #512]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008932:	08db      	lsrs	r3, r3, #3
 8008934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	fb02 f303 	mul.w	r3, r2, r3
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 80e1 	beq.w	8008b14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b02      	cmp	r3, #2
 8008956:	f000 8083 	beq.w	8008a60 <HAL_RCC_GetSysClockFreq+0x204>
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b02      	cmp	r3, #2
 800895e:	f200 80a1 	bhi.w	8008aa4 <HAL_RCC_GetSysClockFreq+0x248>
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_RCC_GetSysClockFreq+0x114>
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d056      	beq.n	8008a1c <HAL_RCC_GetSysClockFreq+0x1c0>
 800896e:	e099      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008970:	4b6f      	ldr	r3, [pc, #444]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0320 	and.w	r3, r3, #32
 8008978:	2b00      	cmp	r3, #0
 800897a:	d02d      	beq.n	80089d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800897c:	4b6c      	ldr	r3, [pc, #432]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	08db      	lsrs	r3, r3, #3
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	4a6b      	ldr	r2, [pc, #428]	@ (8008b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008988:	fa22 f303 	lsr.w	r3, r2, r3
 800898c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	ee07 3a90 	vmov	s15, r3
 8008994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a6:	4b62      	ldr	r3, [pc, #392]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80089d6:	e087      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008b44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80089e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ea:	4b51      	ldr	r3, [pc, #324]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80089fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a1a:	e065      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2e:	4b40      	ldr	r3, [pc, #256]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a5e:	e043      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008b4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a72:	4b2f      	ldr	r3, [pc, #188]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7a:	ee07 3a90 	vmov	s15, r3
 8008a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008aa2:	e021      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ae6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008ae8:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aec:	0a5b      	lsrs	r3, r3, #9
 8008aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008af2:	3301      	adds	r3, #1
 8008af4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b0c:	ee17 3a90 	vmov	r3, s15
 8008b10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b12:	e005      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61bb      	str	r3, [r7, #24]
      break;
 8008b18:	e002      	b.n	8008b20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b1a:	4b07      	ldr	r3, [pc, #28]	@ (8008b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b1c:	61bb      	str	r3, [r7, #24]
      break;
 8008b1e:	bf00      	nop
  }

  return sysclockfreq;
 8008b20:	69bb      	ldr	r3, [r7, #24]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3724      	adds	r7, #36	@ 0x24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	58024400 	.word	0x58024400
 8008b34:	03d09000 	.word	0x03d09000
 8008b38:	003d0900 	.word	0x003d0900
 8008b3c:	017d7840 	.word	0x017d7840
 8008b40:	46000000 	.word	0x46000000
 8008b44:	4c742400 	.word	0x4c742400
 8008b48:	4a742400 	.word	0x4a742400
 8008b4c:	4bbebc20 	.word	0x4bbebc20

08008b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b56:	f7ff fe81 	bl	800885c <HAL_RCC_GetSysClockFreq>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	4b10      	ldr	r3, [pc, #64]	@ (8008ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	f003 030f 	and.w	r3, r3, #15
 8008b66:	490f      	ldr	r1, [pc, #60]	@ (8008ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b68:	5ccb      	ldrb	r3, [r1, r3]
 8008b6a:	f003 031f 	and.w	r3, r3, #31
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b74:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	4a09      	ldr	r2, [pc, #36]	@ (8008ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b7e:	5cd3      	ldrb	r3, [r2, r3]
 8008b80:	f003 031f 	and.w	r3, r3, #31
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8a:	4a07      	ldr	r2, [pc, #28]	@ (8008ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b8e:	4a07      	ldr	r2, [pc, #28]	@ (8008bac <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b94:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b96:	681b      	ldr	r3, [r3, #0]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	58024400 	.word	0x58024400
 8008ba4:	08013004 	.word	0x08013004
 8008ba8:	2400001c 	.word	0x2400001c
 8008bac:	24000018 	.word	0x24000018

08008bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bb4:	f7ff ffcc 	bl	8008b50 <HAL_RCC_GetHCLKFreq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b06      	ldr	r3, [pc, #24]	@ (8008bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	091b      	lsrs	r3, r3, #4
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	4904      	ldr	r1, [pc, #16]	@ (8008bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bc6:	5ccb      	ldrb	r3, [r1, r3]
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	08013004 	.word	0x08013004

08008bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008be0:	f7ff ffb6 	bl	8008b50 <HAL_RCC_GetHCLKFreq>
 8008be4:	4602      	mov	r2, r0
 8008be6:	4b06      	ldr	r3, [pc, #24]	@ (8008c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	4904      	ldr	r1, [pc, #16]	@ (8008c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bf2:	5ccb      	ldrb	r3, [r1, r3]
 8008bf4:	f003 031f 	and.w	r3, r3, #31
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	58024400 	.word	0x58024400
 8008c04:	08013004 	.word	0x08013004

08008c08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c0c:	b0ca      	sub	sp, #296	@ 0x128
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008c2c:	2500      	movs	r5, #0
 8008c2e:	ea54 0305 	orrs.w	r3, r4, r5
 8008c32:	d049      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c3e:	d02f      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008c40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c44:	d828      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c4a:	d01a      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c50:	d822      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c5a:	d007      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c5c:	e01c      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c5e:	4bb8      	ldr	r3, [pc, #736]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c62:	4ab7      	ldr	r2, [pc, #732]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c6a:	e01a      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c70:	3308      	adds	r3, #8
 8008c72:	2102      	movs	r1, #2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f002 fb61 	bl	800b33c <RCCEx_PLL2_Config>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c80:	e00f      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c86:	3328      	adds	r3, #40	@ 0x28
 8008c88:	2102      	movs	r1, #2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 fc08 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c96:	e004      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c9e:	e000      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008caa:	4ba5      	ldr	r3, [pc, #660]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cb8:	4aa1      	ldr	r2, [pc, #644]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cbe:	e003      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008cd4:	f04f 0900 	mov.w	r9, #0
 8008cd8:	ea58 0309 	orrs.w	r3, r8, r9
 8008cdc:	d047      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d82a      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d05 	.word	0x08008d05
 8008cf4:	08008d13 	.word	0x08008d13
 8008cf8:	08008d29 	.word	0x08008d29
 8008cfc:	08008d47 	.word	0x08008d47
 8008d00:	08008d47 	.word	0x08008d47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d04:	4b8e      	ldr	r3, [pc, #568]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d08:	4a8d      	ldr	r2, [pc, #564]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d10:	e01a      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d16:	3308      	adds	r3, #8
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f002 fb0e 	bl	800b33c <RCCEx_PLL2_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d26:	e00f      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2c:	3328      	adds	r3, #40	@ 0x28
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f002 fbb5 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008d36:	4603      	mov	r3, r0
 8008d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d3c:	e004      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d44:	e000      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d50:	4b7b      	ldr	r3, [pc, #492]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d54:	f023 0107 	bic.w	r1, r3, #7
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5e:	4a78      	ldr	r2, [pc, #480]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d64:	e003      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008d7a:	f04f 0b00 	mov.w	fp, #0
 8008d7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d82:	d04c      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d8e:	d030      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d94:	d829      	bhi.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d96:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d98:	d02d      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d9c:	d825      	bhi.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008d9e:	2b80      	cmp	r3, #128	@ 0x80
 8008da0:	d018      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008da2:	2b80      	cmp	r3, #128	@ 0x80
 8008da4:	d821      	bhi.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008daa:	2b40      	cmp	r3, #64	@ 0x40
 8008dac:	d007      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008dae:	e01c      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db0:	4b63      	ldr	r3, [pc, #396]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db4:	4a62      	ldr	r2, [pc, #392]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008dbc:	e01c      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f002 fab8 	bl	800b33c <RCCEx_PLL2_Config>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008dd2:	e011      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd8:	3328      	adds	r3, #40	@ 0x28
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f002 fb5f 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008de8:	e006      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008df0:	e002      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008df2:	bf00      	nop
 8008df4:	e000      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e00:	4b4f      	ldr	r3, [pc, #316]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e10:	430b      	orrs	r3, r1
 8008e12:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e14:	e003      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008e2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008e34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	d053      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e4a:	d035      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e50:	d82e      	bhi.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e56:	d031      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008e58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e5c:	d828      	bhi.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e62:	d01a      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e68:	d822      	bhi.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008e6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e72:	d007      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008e74:	e01c      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e76:	4b32      	ldr	r3, [pc, #200]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7a:	4a31      	ldr	r2, [pc, #196]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e82:	e01c      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e88:	3308      	adds	r3, #8
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f002 fa55 	bl	800b33c <RCCEx_PLL2_Config>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e98:	e011      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9e:	3328      	adds	r3, #40	@ 0x28
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f002 fafc 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eae:	e006      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008eb6:	e002      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8008edc:	e003      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008ef2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008efc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008f00:	460b      	mov	r3, r1
 8008f02:	4313      	orrs	r3, r2
 8008f04:	d056      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008f0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f12:	d038      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f18:	d831      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f1e:	d034      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008f20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f24:	d82b      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f2a:	d01d      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008f2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f30:	d825      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f3a:	d00a      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008f3c:	e01f      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f3e:	bf00      	nop
 8008f40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f44:	4ba2      	ldr	r3, [pc, #648]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f48:	4aa1      	ldr	r2, [pc, #644]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f50:	e01c      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f56:	3308      	adds	r3, #8
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f002 f9ee 	bl	800b33c <RCCEx_PLL2_Config>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f66:	e011      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6c:	3328      	adds	r3, #40	@ 0x28
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f002 fa95 	bl	800b4a0 <RCCEx_PLL3_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f7c:	e006      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f84:	e002      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008f86:	bf00      	nop
 8008f88:	e000      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10b      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f94:	4b8e      	ldr	r3, [pc, #568]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008fa4:	4a8a      	ldr	r2, [pc, #552]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fa6:	430b      	orrs	r3, r1
 8008fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008faa:	e003      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008fca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	d03a      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fda:	2b30      	cmp	r3, #48	@ 0x30
 8008fdc:	d01f      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008fde:	2b30      	cmp	r3, #48	@ 0x30
 8008fe0:	d819      	bhi.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008fe2:	2b20      	cmp	r3, #32
 8008fe4:	d00c      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d815      	bhi.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d019      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008fee:	2b10      	cmp	r3, #16
 8008ff0:	d111      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff2:	4b77      	ldr	r3, [pc, #476]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff6:	4a76      	ldr	r2, [pc, #472]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ffe:	e011      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009004:	3308      	adds	r3, #8
 8009006:	2102      	movs	r1, #2
 8009008:	4618      	mov	r0, r3
 800900a:	f002 f997 	bl	800b33c <RCCEx_PLL2_Config>
 800900e:	4603      	mov	r3, r0
 8009010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009014:	e006      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800901c:	e002      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800901e:	bf00      	nop
 8009020:	e000      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10a      	bne.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800902c:	4b68      	ldr	r3, [pc, #416]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800902e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009030:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903a:	4a65      	ldr	r2, [pc, #404]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800903c:	430b      	orrs	r3, r1
 800903e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009040:	e003      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009056:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800905a:	2300      	movs	r3, #0
 800905c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009060:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009064:	460b      	mov	r3, r1
 8009066:	4313      	orrs	r3, r2
 8009068:	d051      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009074:	d035      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800907a:	d82e      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800907c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009080:	d031      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009082:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009086:	d828      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800908c:	d01a      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800908e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009092:	d822      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800909c:	d007      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800909e:	e01c      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a0:	4b4b      	ldr	r3, [pc, #300]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a4:	4a4a      	ldr	r2, [pc, #296]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090ac:	e01c      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b2:	3308      	adds	r3, #8
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f002 f940 	bl	800b33c <RCCEx_PLL2_Config>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090c2:	e011      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c8:	3328      	adds	r3, #40	@ 0x28
 80090ca:	2100      	movs	r1, #0
 80090cc:	4618      	mov	r0, r3
 80090ce:	f002 f9e7 	bl	800b4a0 <RCCEx_PLL3_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090d8:	e006      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090e0:	e002      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80090e2:	bf00      	nop
 80090e4:	e000      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80090e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090f0:	4b37      	ldr	r3, [pc, #220]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80090f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090fe:	4a34      	ldr	r2, [pc, #208]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009100:	430b      	orrs	r3, r1
 8009102:	6513      	str	r3, [r2, #80]	@ 0x50
 8009104:	e003      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800910a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800910e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800911a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800911e:	2300      	movs	r3, #0
 8009120:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009124:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009128:	460b      	mov	r3, r1
 800912a:	4313      	orrs	r3, r2
 800912c:	d056      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009138:	d033      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800913a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800913e:	d82c      	bhi.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009140:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009144:	d02f      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009146:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800914a:	d826      	bhi.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800914c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009150:	d02b      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009152:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009156:	d820      	bhi.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800915c:	d012      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800915e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009162:	d81a      	bhi.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d022      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800916c:	d115      	bne.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800916e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009172:	3308      	adds	r3, #8
 8009174:	2101      	movs	r1, #1
 8009176:	4618      	mov	r0, r3
 8009178:	f002 f8e0 	bl	800b33c <RCCEx_PLL2_Config>
 800917c:	4603      	mov	r3, r0
 800917e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009182:	e015      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009188:	3328      	adds	r3, #40	@ 0x28
 800918a:	2101      	movs	r1, #1
 800918c:	4618      	mov	r0, r3
 800918e:	f002 f987 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009192:	4603      	mov	r3, r0
 8009194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009198:	e00a      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091a0:	e006      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091a2:	bf00      	nop
 80091a4:	e004      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091a6:	bf00      	nop
 80091a8:	e002      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091aa:	bf00      	nop
 80091ac:	e000      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10d      	bne.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091b8:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091c6:	4a02      	ldr	r2, [pc, #8]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80091cc:	e006      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80091ce:	bf00      	nop
 80091d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80091e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091ec:	2300      	movs	r3, #0
 80091ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80091f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4313      	orrs	r3, r2
 80091fa:	d055      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009208:	d033      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800920a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800920e:	d82c      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009214:	d02f      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800921a:	d826      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800921c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009220:	d02b      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009226:	d820      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800922c:	d012      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800922e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009232:	d81a      	bhi.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d022      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800923c:	d115      	bne.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009242:	3308      	adds	r3, #8
 8009244:	2101      	movs	r1, #1
 8009246:	4618      	mov	r0, r3
 8009248:	f002 f878 	bl	800b33c <RCCEx_PLL2_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009252:	e015      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009258:	3328      	adds	r3, #40	@ 0x28
 800925a:	2101      	movs	r1, #1
 800925c:	4618      	mov	r0, r3
 800925e:	f002 f91f 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009268:	e00a      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009270:	e006      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009272:	bf00      	nop
 8009274:	e004      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009276:	bf00      	nop
 8009278:	e002      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800927a:	bf00      	nop
 800927c:	e000      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800927e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009288:	4ba3      	ldr	r3, [pc, #652]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800928c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009298:	4a9f      	ldr	r2, [pc, #636]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800929a:	430b      	orrs	r3, r1
 800929c:	6593      	str	r3, [r2, #88]	@ 0x58
 800929e:	e003      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092b8:	2300      	movs	r3, #0
 80092ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80092c2:	460b      	mov	r3, r1
 80092c4:	4313      	orrs	r3, r2
 80092c6:	d037      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d2:	d00e      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80092d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d8:	d816      	bhi.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d018      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80092de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092e2:	d111      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e4:	4b8c      	ldr	r3, [pc, #560]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	4a8b      	ldr	r2, [pc, #556]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092f0:	e00f      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f6:	3308      	adds	r3, #8
 80092f8:	2101      	movs	r1, #1
 80092fa:	4618      	mov	r0, r3
 80092fc:	f002 f81e 	bl	800b33c <RCCEx_PLL2_Config>
 8009300:	4603      	mov	r3, r0
 8009302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009306:	e004      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800930e:	e000      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10a      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800931a:	4b7f      	ldr	r3, [pc, #508]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800931c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009328:	4a7b      	ldr	r2, [pc, #492]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800932a:	430b      	orrs	r3, r1
 800932c:	6513      	str	r3, [r2, #80]	@ 0x50
 800932e:	e003      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009348:	2300      	movs	r3, #0
 800934a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800934e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009352:	460b      	mov	r3, r1
 8009354:	4313      	orrs	r3, r2
 8009356:	d039      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800935e:	2b03      	cmp	r3, #3
 8009360:	d81c      	bhi.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009362:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093a5 	.word	0x080093a5
 800936c:	08009379 	.word	0x08009379
 8009370:	08009387 	.word	0x08009387
 8009374:	080093a5 	.word	0x080093a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009378:	4b67      	ldr	r3, [pc, #412]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800937a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937c:	4a66      	ldr	r2, [pc, #408]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800937e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009384:	e00f      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800938a:	3308      	adds	r3, #8
 800938c:	2102      	movs	r1, #2
 800938e:	4618      	mov	r0, r3
 8009390:	f001 ffd4 	bl	800b33c <RCCEx_PLL2_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800939a:	e004      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093a2:	e000      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80093a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10a      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093ae:	4b5a      	ldr	r3, [pc, #360]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b2:	f023 0103 	bic.w	r1, r3, #3
 80093b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093bc:	4a56      	ldr	r2, [pc, #344]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093be:	430b      	orrs	r3, r1
 80093c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093c2:	e003      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80093d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093dc:	2300      	movs	r3, #0
 80093de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80093e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80093e6:	460b      	mov	r3, r1
 80093e8:	4313      	orrs	r3, r2
 80093ea:	f000 809f 	beq.w	800952c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093ee:	4b4b      	ldr	r3, [pc, #300]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a4a      	ldr	r2, [pc, #296]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80093f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093fa:	f7f9 fbcd 	bl	8002b98 <HAL_GetTick>
 80093fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009402:	e00b      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009404:	f7f9 fbc8 	bl	8002b98 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b64      	cmp	r3, #100	@ 0x64
 8009412:	d903      	bls.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800941a:	e005      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800941c:	4b3f      	ldr	r3, [pc, #252]	@ (800951c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0ed      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800942c:	2b00      	cmp	r3, #0
 800942e:	d179      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009430:	4b39      	ldr	r3, [pc, #228]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009432:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009438:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800943c:	4053      	eors	r3, r2
 800943e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009442:	2b00      	cmp	r3, #0
 8009444:	d015      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009446:	4b34      	ldr	r3, [pc, #208]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800944e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009452:	4b31      	ldr	r3, [pc, #196]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009456:	4a30      	ldr	r2, [pc, #192]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800945c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800945e:	4b2e      	ldr	r3, [pc, #184]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009462:	4a2d      	ldr	r2, [pc, #180]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009468:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800946a:	4a2b      	ldr	r2, [pc, #172]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800946c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009470:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800947a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800947e:	d118      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009480:	f7f9 fb8a 	bl	8002b98 <HAL_GetTick>
 8009484:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009488:	e00d      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800948a:	f7f9 fb85 	bl	8002b98 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009494:	1ad2      	subs	r2, r2, r3
 8009496:	f241 3388 	movw	r3, #5000	@ 0x1388
 800949a:	429a      	cmp	r2, r3
 800949c:	d903      	bls.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80094a4:	e005      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0eb      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d129      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094ca:	d10e      	bne.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80094cc:	4b12      	ldr	r3, [pc, #72]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80094d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094dc:	091a      	lsrs	r2, r3, #4
 80094de:	4b10      	ldr	r3, [pc, #64]	@ (8009520 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80094e0:	4013      	ands	r3, r2
 80094e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e4:	430b      	orrs	r3, r1
 80094e6:	6113      	str	r3, [r2, #16]
 80094e8:	e005      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80094ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80094f4:	6113      	str	r3, [r2, #16]
 80094f6:	4b08      	ldr	r3, [pc, #32]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009506:	4a04      	ldr	r2, [pc, #16]	@ (8009518 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009508:	430b      	orrs	r3, r1
 800950a:	6713      	str	r3, [r2, #112]	@ 0x70
 800950c:	e00e      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800950e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009516:	e009      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009518:	58024400 	.word	0x58024400
 800951c:	58024800 	.word	0x58024800
 8009520:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800952c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f002 0301 	and.w	r3, r2, #1
 8009538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800953c:	2300      	movs	r3, #0
 800953e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009542:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009546:	460b      	mov	r3, r1
 8009548:	4313      	orrs	r3, r2
 800954a:	f000 8089 	beq.w	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800954e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009554:	2b28      	cmp	r3, #40	@ 0x28
 8009556:	d86b      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009558:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009639 	.word	0x08009639
 8009564:	08009631 	.word	0x08009631
 8009568:	08009631 	.word	0x08009631
 800956c:	08009631 	.word	0x08009631
 8009570:	08009631 	.word	0x08009631
 8009574:	08009631 	.word	0x08009631
 8009578:	08009631 	.word	0x08009631
 800957c:	08009631 	.word	0x08009631
 8009580:	08009605 	.word	0x08009605
 8009584:	08009631 	.word	0x08009631
 8009588:	08009631 	.word	0x08009631
 800958c:	08009631 	.word	0x08009631
 8009590:	08009631 	.word	0x08009631
 8009594:	08009631 	.word	0x08009631
 8009598:	08009631 	.word	0x08009631
 800959c:	08009631 	.word	0x08009631
 80095a0:	0800961b 	.word	0x0800961b
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009631 	.word	0x08009631
 80095b4:	08009631 	.word	0x08009631
 80095b8:	08009631 	.word	0x08009631
 80095bc:	08009631 	.word	0x08009631
 80095c0:	08009639 	.word	0x08009639
 80095c4:	08009631 	.word	0x08009631
 80095c8:	08009631 	.word	0x08009631
 80095cc:	08009631 	.word	0x08009631
 80095d0:	08009631 	.word	0x08009631
 80095d4:	08009631 	.word	0x08009631
 80095d8:	08009631 	.word	0x08009631
 80095dc:	08009631 	.word	0x08009631
 80095e0:	08009639 	.word	0x08009639
 80095e4:	08009631 	.word	0x08009631
 80095e8:	08009631 	.word	0x08009631
 80095ec:	08009631 	.word	0x08009631
 80095f0:	08009631 	.word	0x08009631
 80095f4:	08009631 	.word	0x08009631
 80095f8:	08009631 	.word	0x08009631
 80095fc:	08009631 	.word	0x08009631
 8009600:	08009639 	.word	0x08009639
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009608:	3308      	adds	r3, #8
 800960a:	2101      	movs	r1, #1
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fe95 	bl	800b33c <RCCEx_PLL2_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009618:	e00f      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961e:	3328      	adds	r3, #40	@ 0x28
 8009620:	2101      	movs	r1, #1
 8009622:	4618      	mov	r0, r3
 8009624:	f001 ff3c 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800962e:	e004      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009636:	e000      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800963a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009642:	4bbf      	ldr	r3, [pc, #764]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009646:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800964e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009650:	4abb      	ldr	r2, [pc, #748]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009652:	430b      	orrs	r3, r1
 8009654:	6553      	str	r3, [r2, #84]	@ 0x54
 8009656:	e003      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800965c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f002 0302 	and.w	r3, r2, #2
 800966c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009670:	2300      	movs	r3, #0
 8009672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009676:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800967a:	460b      	mov	r3, r1
 800967c:	4313      	orrs	r3, r2
 800967e:	d041      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009686:	2b05      	cmp	r3, #5
 8009688:	d824      	bhi.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800968a:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	080096dd 	.word	0x080096dd
 8009694:	080096a9 	.word	0x080096a9
 8009698:	080096bf 	.word	0x080096bf
 800969c:	080096dd 	.word	0x080096dd
 80096a0:	080096dd 	.word	0x080096dd
 80096a4:	080096dd 	.word	0x080096dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ac:	3308      	adds	r3, #8
 80096ae:	2101      	movs	r1, #1
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 fe43 	bl	800b33c <RCCEx_PLL2_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096bc:	e00f      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c2:	3328      	adds	r3, #40	@ 0x28
 80096c4:	2101      	movs	r1, #1
 80096c6:	4618      	mov	r0, r3
 80096c8:	f001 feea 	bl	800b4a0 <RCCEx_PLL3_Config>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096d2:	e004      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096da:	e000      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80096dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10a      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096e6:	4b96      	ldr	r3, [pc, #600]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ea:	f023 0107 	bic.w	r1, r3, #7
 80096ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096f4:	4a92      	ldr	r2, [pc, #584]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096f6:	430b      	orrs	r3, r1
 80096f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80096fa:	e003      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f002 0304 	and.w	r3, r2, #4
 8009710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009714:	2300      	movs	r3, #0
 8009716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800971a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800971e:	460b      	mov	r3, r1
 8009720:	4313      	orrs	r3, r2
 8009722:	d044      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800972c:	2b05      	cmp	r3, #5
 800972e:	d825      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009730:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009736:	bf00      	nop
 8009738:	08009785 	.word	0x08009785
 800973c:	08009751 	.word	0x08009751
 8009740:	08009767 	.word	0x08009767
 8009744:	08009785 	.word	0x08009785
 8009748:	08009785 	.word	0x08009785
 800974c:	08009785 	.word	0x08009785
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009754:	3308      	adds	r3, #8
 8009756:	2101      	movs	r1, #1
 8009758:	4618      	mov	r0, r3
 800975a:	f001 fdef 	bl	800b33c <RCCEx_PLL2_Config>
 800975e:	4603      	mov	r3, r0
 8009760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009764:	e00f      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	3328      	adds	r3, #40	@ 0x28
 800976c:	2101      	movs	r1, #1
 800976e:	4618      	mov	r0, r3
 8009770:	f001 fe96 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800977a:	e004      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009782:	e000      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10b      	bne.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800978e:	4b6c      	ldr	r3, [pc, #432]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009792:	f023 0107 	bic.w	r1, r3, #7
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800979e:	4a68      	ldr	r2, [pc, #416]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097a0:	430b      	orrs	r3, r1
 80097a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80097a4:	e003      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f002 0320 	and.w	r3, r2, #32
 80097ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097be:	2300      	movs	r3, #0
 80097c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80097c8:	460b      	mov	r3, r1
 80097ca:	4313      	orrs	r3, r2
 80097cc:	d055      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097da:	d033      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80097dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097e0:	d82c      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097e6:	d02f      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80097e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ec:	d826      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097f2:	d02b      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80097f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097f8:	d820      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80097fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097fe:	d012      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009804:	d81a      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d022      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800980a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800980e:	d115      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009814:	3308      	adds	r3, #8
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f001 fd8f 	bl	800b33c <RCCEx_PLL2_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009824:	e015      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982a:	3328      	adds	r3, #40	@ 0x28
 800982c:	2102      	movs	r1, #2
 800982e:	4618      	mov	r0, r3
 8009830:	f001 fe36 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009834:	4603      	mov	r3, r0
 8009836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800983a:	e00a      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009842:	e006      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009844:	bf00      	nop
 8009846:	e004      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009848:	bf00      	nop
 800984a:	e002      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800984c:	bf00      	nop
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10b      	bne.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800985a:	4b39      	ldr	r3, [pc, #228]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800985c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800985e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800986a:	4a35      	ldr	r2, [pc, #212]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800986c:	430b      	orrs	r3, r1
 800986e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009870:	e003      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800987a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800988a:	2300      	movs	r3, #0
 800988c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009890:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009894:	460b      	mov	r3, r1
 8009896:	4313      	orrs	r3, r2
 8009898:	d058      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800989a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098a6:	d033      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80098a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098ac:	d82c      	bhi.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098b2:	d02f      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80098b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098b8:	d826      	bhi.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098be:	d02b      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80098c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098c4:	d820      	bhi.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098ca:	d012      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80098cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098d0:	d81a      	bhi.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d022      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80098d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098da:	d115      	bne.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e0:	3308      	adds	r3, #8
 80098e2:	2100      	movs	r1, #0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f001 fd29 	bl	800b33c <RCCEx_PLL2_Config>
 80098ea:	4603      	mov	r3, r0
 80098ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098f0:	e015      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f6:	3328      	adds	r3, #40	@ 0x28
 80098f8:	2102      	movs	r1, #2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f001 fdd0 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009906:	e00a      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800990e:	e006      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009910:	bf00      	nop
 8009912:	e004      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009914:	bf00      	nop
 8009916:	e002      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009918:	bf00      	nop
 800991a:	e000      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800991c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800991e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10e      	bne.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009926:	4b06      	ldr	r3, [pc, #24]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800992a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009932:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009936:	4a02      	ldr	r2, [pc, #8]	@ (8009940 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009938:	430b      	orrs	r3, r1
 800993a:	6593      	str	r3, [r2, #88]	@ 0x58
 800993c:	e006      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800993e:	bf00      	nop
 8009940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800994c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800995c:	2300      	movs	r3, #0
 800995e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009962:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009966:	460b      	mov	r3, r1
 8009968:	4313      	orrs	r3, r2
 800996a:	d055      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009970:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009974:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009978:	d033      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800997a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800997e:	d82c      	bhi.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009984:	d02f      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800998a:	d826      	bhi.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800998c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009990:	d02b      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009992:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009996:	d820      	bhi.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800999c:	d012      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800999e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a2:	d81a      	bhi.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d022      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80099a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ac:	d115      	bne.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b2:	3308      	adds	r3, #8
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 fcc0 	bl	800b33c <RCCEx_PLL2_Config>
 80099bc:	4603      	mov	r3, r0
 80099be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099c2:	e015      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c8:	3328      	adds	r3, #40	@ 0x28
 80099ca:	2102      	movs	r1, #2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 fd67 	bl	800b4a0 <RCCEx_PLL3_Config>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099d8:	e00a      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099e0:	e006      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099e2:	bf00      	nop
 80099e4:	e004      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099e6:	bf00      	nop
 80099e8:	e002      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099ea:	bf00      	nop
 80099ec:	e000      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80099ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10b      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099f8:	4ba1      	ldr	r3, [pc, #644]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a08:	4a9d      	ldr	r2, [pc, #628]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a0e:	e003      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	f002 0308 	and.w	r3, r2, #8
 8009a24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009a32:	460b      	mov	r3, r1
 8009a34:	4313      	orrs	r3, r2
 8009a36:	d01e      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a44:	d10c      	bne.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4a:	3328      	adds	r3, #40	@ 0x28
 8009a4c:	2102      	movs	r1, #2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 fd26 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a60:	4b87      	ldr	r3, [pc, #540]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a70:	4a83      	ldr	r2, [pc, #524]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a72:	430b      	orrs	r3, r1
 8009a74:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f002 0310 	and.w	r3, r2, #16
 8009a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a86:	2300      	movs	r3, #0
 8009a88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a90:	460b      	mov	r3, r1
 8009a92:	4313      	orrs	r3, r2
 8009a94:	d01e      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aa2:	d10c      	bne.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa8:	3328      	adds	r3, #40	@ 0x28
 8009aaa:	2102      	movs	r1, #2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f001 fcf7 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009abe:	4b70      	ldr	r3, [pc, #448]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ace:	4a6c      	ldr	r2, [pc, #432]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009aea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d03e      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009afc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b00:	d022      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b06:	d81b      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b10:	d00b      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009b12:	e015      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b18:	3308      	adds	r3, #8
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 fc0d 	bl	800b33c <RCCEx_PLL2_Config>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b28:	e00f      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2e:	3328      	adds	r3, #40	@ 0x28
 8009b30:	2102      	movs	r1, #2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 fcb4 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b3e:	e004      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b46:	e000      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b52:	4b4b      	ldr	r3, [pc, #300]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b62:	4a47      	ldr	r2, [pc, #284]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b64:	430b      	orrs	r3, r1
 8009b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b68:	e003      	b.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b80:	2300      	movs	r3, #0
 8009b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	d03b      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b9a:	d01f      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009b9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba0:	d818      	bhi.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ba6:	d003      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009ba8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bac:	d007      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009bae:	e011      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb0:	4b33      	ldr	r3, [pc, #204]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb4:	4a32      	ldr	r2, [pc, #200]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bbc:	e00f      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc2:	3328      	adds	r3, #40	@ 0x28
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f001 fc6a 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bd2:	e004      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bda:	e000      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009be6:	4b26      	ldr	r3, [pc, #152]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bf6:	4a22      	ldr	r2, [pc, #136]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bf8:	430b      	orrs	r3, r1
 8009bfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bfc:	e003      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c12:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c14:	2300      	movs	r3, #0
 8009c16:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	d034      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c30:	d007      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009c32:	e011      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c34:	4b12      	ldr	r3, [pc, #72]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c38:	4a11      	ldr	r2, [pc, #68]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c40:	e00e      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c46:	3308      	adds	r3, #8
 8009c48:	2102      	movs	r1, #2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f001 fb76 	bl	800b33c <RCCEx_PLL2_Config>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c56:	e003      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10d      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c68:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c76:	4a02      	ldr	r2, [pc, #8]	@ (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c7c:	e006      	b.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009c7e:	bf00      	nop
 8009c80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	d00c      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cac:	3328      	adds	r3, #40	@ 0x28
 8009cae:	2102      	movs	r1, #2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 fbf5 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009cce:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	d038      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cea:	d018      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cf0:	d811      	bhi.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf6:	d014      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfc:	d80b      	bhi.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d011      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d06:	d106      	bne.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d08:	4bc3      	ldr	r3, [pc, #780]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	4ac2      	ldr	r2, [pc, #776]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d14:	e008      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d1c:	e004      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d1e:	bf00      	nop
 8009d20:	e002      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d22:	bf00      	nop
 8009d24:	e000      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10b      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d30:	4bb9      	ldr	r3, [pc, #740]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d40:	4ab5      	ldr	r2, [pc, #724]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d42:	430b      	orrs	r3, r1
 8009d44:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d46:	e003      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d5e:	2300      	movs	r3, #0
 8009d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009d66:	460b      	mov	r3, r1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	d009      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d6c:	4baa      	ldr	r3, [pc, #680]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d7a:	4aa7      	ldr	r2, [pc, #668]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009d8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d8e:	2300      	movs	r3, #0
 8009d90:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d96:	460b      	mov	r3, r1
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	d00a      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009d9c:	4b9e      	ldr	r3, [pc, #632]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009dac:	4a9a      	ldr	r2, [pc, #616]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dae:	430b      	orrs	r3, r1
 8009db0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	d009      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009dce:	4b92      	ldr	r3, [pc, #584]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ddc:	4a8e      	ldr	r2, [pc, #568]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dde:	430b      	orrs	r3, r1
 8009de0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8009df0:	2300      	movs	r3, #0
 8009df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009df4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	d00e      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dfe:	4b86      	ldr	r3, [pc, #536]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	4a85      	ldr	r2, [pc, #532]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e08:	6113      	str	r3, [r2, #16]
 8009e0a:	4b83      	ldr	r3, [pc, #524]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e0c:	6919      	ldr	r1, [r3, #16]
 8009e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009e16:	4a80      	ldr	r2, [pc, #512]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e32:	460b      	mov	r3, r1
 8009e34:	4313      	orrs	r3, r2
 8009e36:	d009      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e38:	4b77      	ldr	r3, [pc, #476]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e46:	4a74      	ldr	r2, [pc, #464]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e62:	460b      	mov	r3, r1
 8009e64:	4313      	orrs	r3, r2
 8009e66:	d00a      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e68:	4b6b      	ldr	r3, [pc, #428]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e78:	4a67      	ldr	r2, [pc, #412]	@ (800a018 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e7a:	430b      	orrs	r3, r1
 8009e7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	2100      	movs	r1, #0
 8009e88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009e94:	460b      	mov	r3, r1
 8009e96:	4313      	orrs	r3, r2
 8009e98:	d011      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f001 fa4a 	bl	800b33c <RCCEx_PLL2_Config>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6239      	str	r1, [r7, #32]
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ed0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	d011      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ede:	3308      	adds	r3, #8
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 fa2a 	bl	800b33c <RCCEx_PLL2_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	2100      	movs	r1, #0
 8009f08:	61b9      	str	r1, [r7, #24]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f14:	460b      	mov	r3, r1
 8009f16:	4313      	orrs	r3, r2
 8009f18:	d011      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f1e:	3308      	adds	r3, #8
 8009f20:	2102      	movs	r1, #2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f001 fa0a 	bl	800b33c <RCCEx_PLL2_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	2100      	movs	r1, #0
 8009f48:	6139      	str	r1, [r7, #16]
 8009f4a:	f003 0308 	and.w	r3, r3, #8
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f54:	460b      	mov	r3, r1
 8009f56:	4313      	orrs	r3, r2
 8009f58:	d011      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f5e:	3328      	adds	r3, #40	@ 0x28
 8009f60:	2100      	movs	r1, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 fa9c 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	2100      	movs	r1, #0
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f94:	460b      	mov	r3, r1
 8009f96:	4313      	orrs	r3, r2
 8009f98:	d011      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9e:	3328      	adds	r3, #40	@ 0x28
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fa7c 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	6039      	str	r1, [r7, #0]
 8009fca:	f003 0320 	and.w	r3, r3, #32
 8009fce:	607b      	str	r3, [r7, #4]
 8009fd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	d011      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fde:	3328      	adds	r3, #40	@ 0x28
 8009fe0:	2102      	movs	r1, #2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f001 fa5c 	bl	800b4a0 <RCCEx_PLL3_Config>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009ffe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	e000      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a012:	46bd      	mov	sp, r7
 800a014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a018:	58024400 	.word	0x58024400

0800a01c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b090      	sub	sp, #64	@ 0x40
 800a020:	af00      	add	r7, sp, #0
 800a022:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a02a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a02e:	430b      	orrs	r3, r1
 800a030:	f040 8094 	bne.w	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a034:	4b9e      	ldr	r3, [pc, #632]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	2b04      	cmp	r3, #4
 800a042:	f200 8087 	bhi.w	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a046:	a201      	add	r2, pc, #4	@ (adr r2, 800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a061 	.word	0x0800a061
 800a050:	0800a089 	.word	0x0800a089
 800a054:	0800a0b1 	.word	0x0800a0b1
 800a058:	0800a14d 	.word	0x0800a14d
 800a05c:	0800a0d9 	.word	0x0800a0d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a060:	4b93      	ldr	r3, [pc, #588]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a06c:	d108      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a06e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a072:	4618      	mov	r0, r3
 800a074:	f001 f810 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a07c:	f000 bd45 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a084:	f000 bd41 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a088:	4b89      	ldr	r3, [pc, #548]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a094:	d108      	bne.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a096:	f107 0318 	add.w	r3, r7, #24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fd54 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a4:	f000 bd31 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ac:	f000 bd2d 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0b0:	4b7f      	ldr	r3, [pc, #508]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0bc:	d108      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0be:	f107 030c 	add.w	r3, r7, #12
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fe94 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0cc:	f000 bd1d 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d4:	f000 bd19 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0d8:	4b75      	ldr	r3, [pc, #468]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0e2:	4b73      	ldr	r3, [pc, #460]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0304 	and.w	r3, r3, #4
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d10c      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0f4:	4b6e      	ldr	r3, [pc, #440]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	08db      	lsrs	r3, r3, #3
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	4a6d      	ldr	r2, [pc, #436]	@ (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a100:	fa22 f303 	lsr.w	r3, r2, r3
 800a104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a106:	e01f      	b.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a108:	4b69      	ldr	r3, [pc, #420]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a114:	d106      	bne.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a11c:	d102      	bne.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a11e:	4b66      	ldr	r3, [pc, #408]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a122:	e011      	b.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a124:	4b62      	ldr	r3, [pc, #392]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a12c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a130:	d106      	bne.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a138:	d102      	bne.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a13a:	4b60      	ldr	r3, [pc, #384]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a13e:	e003      	b.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a144:	f000 bce1 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a148:	f000 bcdf 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a14c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a150:	f000 bcdb 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a158:	f000 bcd7 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a15c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a160:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a164:	430b      	orrs	r3, r1
 800a166:	f040 80ad 	bne.w	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a16a:	4b51      	ldr	r3, [pc, #324]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a16c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a16e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a172:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a17a:	d056      	beq.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a182:	f200 8090 	bhi.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a188:	2bc0      	cmp	r3, #192	@ 0xc0
 800a18a:	f000 8088 	beq.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a190:	2bc0      	cmp	r3, #192	@ 0xc0
 800a192:	f200 8088 	bhi.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a198:	2b80      	cmp	r3, #128	@ 0x80
 800a19a:	d032      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	2b80      	cmp	r3, #128	@ 0x80
 800a1a0:	f200 8081 	bhi.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ac:	2b40      	cmp	r3, #64	@ 0x40
 800a1ae:	d014      	beq.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a1b0:	e079      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1be:	d108      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 ff67 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ce:	f000 bc9c 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d6:	f000 bc98 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1da:	4b35      	ldr	r3, [pc, #212]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1e6:	d108      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e8:	f107 0318 	add.w	r3, r7, #24
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fcab 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1f6:	f000 bc88 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1fe:	f000 bc84 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a202:	4b2b      	ldr	r3, [pc, #172]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a20a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a20e:	d108      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a210:	f107 030c 	add.w	r3, r7, #12
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fdeb 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a21e:	f000 bc74 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a226:	f000 bc70 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a22a:	4b21      	ldr	r3, [pc, #132]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a22c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a22e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a234:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d10c      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a246:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	08db      	lsrs	r3, r3, #3
 800a24c:	f003 0303 	and.w	r3, r3, #3
 800a250:	4a18      	ldr	r2, [pc, #96]	@ (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a252:	fa22 f303 	lsr.w	r3, r2, r3
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a258:	e01f      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a25a:	4b15      	ldr	r3, [pc, #84]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a266:	d106      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a26e:	d102      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a270:	4b11      	ldr	r3, [pc, #68]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a274:	e011      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a276:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a27e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a282:	d106      	bne.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a28a:	d102      	bne.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a28c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a290:	e003      	b.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a296:	f000 bc38 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a29a:	f000 bc36 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a29e:	4b08      	ldr	r3, [pc, #32]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a2:	f000 bc32 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2aa:	f000 bc2e 	b.w	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2ae:	bf00      	nop
 800a2b0:	58024400 	.word	0x58024400
 800a2b4:	03d09000 	.word	0x03d09000
 800a2b8:	003d0900 	.word	0x003d0900
 800a2bc:	017d7840 	.word	0x017d7840
 800a2c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a2c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	f040 809c 	bne.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a2d2:	4b9e      	ldr	r3, [pc, #632]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a2da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a2e2:	d054      	beq.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a2ea:	f200 808b 	bhi.w	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a2f4:	f000 8083 	beq.w	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a2fe:	f200 8081 	bhi.w	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a308:	d02f      	beq.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a310:	d878      	bhi.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	2b00      	cmp	r3, #0
 800a316:	d004      	beq.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a31e:	d012      	beq.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a320:	e070      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a322:	4b8a      	ldr	r3, [pc, #552]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a32a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a32e:	d107      	bne.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a334:	4618      	mov	r0, r3
 800a336:	f000 feaf 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a33e:	e3e4      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a344:	e3e1      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a346:	4b81      	ldr	r3, [pc, #516]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a34e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a352:	d107      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a354:	f107 0318 	add.w	r3, r7, #24
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 fbf5 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a362:	e3d2      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a368:	e3cf      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a36a:	4b78      	ldr	r3, [pc, #480]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a376:	d107      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a378:	f107 030c 	add.w	r3, r7, #12
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fd37 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a386:	e3c0      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38c:	e3bd      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a38e:	4b6f      	ldr	r3, [pc, #444]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a392:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a396:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a398:	4b6c      	ldr	r3, [pc, #432]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d10c      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d109      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3aa:	4b68      	ldr	r3, [pc, #416]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	08db      	lsrs	r3, r3, #3
 800a3b0:	f003 0303 	and.w	r3, r3, #3
 800a3b4:	4a66      	ldr	r2, [pc, #408]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3bc:	e01e      	b.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3be:	4b63      	ldr	r3, [pc, #396]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ca:	d106      	bne.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3d2:	d102      	bne.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3d4:	4b5f      	ldr	r3, [pc, #380]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3d8:	e010      	b.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3da:	4b5c      	ldr	r3, [pc, #368]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3e6:	d106      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ee:	d102      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3f0:	4b59      	ldr	r3, [pc, #356]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f4:	e002      	b.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3fa:	e386      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3fc:	e385      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3fe:	4b57      	ldr	r3, [pc, #348]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a402:	e382      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a408:	e37f      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a412:	430b      	orrs	r3, r1
 800a414:	f040 80a7 	bne.w	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a418:	4b4c      	ldr	r3, [pc, #304]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a41a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a41c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a420:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a428:	d055      	beq.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a430:	f200 8096 	bhi.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a43a:	f000 8084 	beq.w	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a444:	f200 808c 	bhi.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a44e:	d030      	beq.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a456:	f200 8083 	bhi.w	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a466:	d012      	beq.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a468:	e07a      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a46a:	4b38      	ldr	r3, [pc, #224]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a476:	d107      	bne.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 fe0b 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a486:	e340      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a48c:	e33d      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a48e:	4b2f      	ldr	r3, [pc, #188]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a49a:	d107      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a49c:	f107 0318 	add.w	r3, r7, #24
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fb51 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4aa:	e32e      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b0:	e32b      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4b2:	4b26      	ldr	r3, [pc, #152]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4be:	d107      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c0:	f107 030c 	add.w	r3, r7, #12
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 fc93 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ce:	e31c      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	e319      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d10c      	bne.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d109      	bne.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f2:	4b16      	ldr	r3, [pc, #88]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	08db      	lsrs	r3, r3, #3
 800a4f8:	f003 0303 	and.w	r3, r3, #3
 800a4fc:	4a14      	ldr	r2, [pc, #80]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a504:	e01e      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a506:	4b11      	ldr	r3, [pc, #68]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a50e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a512:	d106      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a51a:	d102      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a51c:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a520:	e010      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a522:	4b0a      	ldr	r3, [pc, #40]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a52a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a52e:	d106      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a536:	d102      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a538:	4b07      	ldr	r3, [pc, #28]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a53c:	e002      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a542:	e2e2      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a544:	e2e1      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a546:	4b05      	ldr	r3, [pc, #20]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54a:	e2de      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a54c:	58024400 	.word	0x58024400
 800a550:	03d09000 	.word	0x03d09000
 800a554:	003d0900 	.word	0x003d0900
 800a558:	017d7840 	.word	0x017d7840
 800a55c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a564:	e2d1      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a56a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a56e:	430b      	orrs	r3, r1
 800a570:	f040 809c 	bne.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a574:	4b93      	ldr	r3, [pc, #588]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a578:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a57c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a584:	d054      	beq.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a58c:	f200 808b 	bhi.w	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a592:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a596:	f000 8083 	beq.w	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5a0:	f200 8081 	bhi.w	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5aa:	d02f      	beq.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5b2:	d878      	bhi.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d004      	beq.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5c0:	d012      	beq.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a5c2:	e070      	b.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5c4:	4b7f      	ldr	r3, [pc, #508]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5d0:	d107      	bne.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fd5e 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e0:	e293      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e6:	e290      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e8:	4b76      	ldr	r3, [pc, #472]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5f4:	d107      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f6:	f107 0318 	add.w	r3, r7, #24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 faa4 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a604:	e281      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60a:	e27e      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a60c:	4b6d      	ldr	r3, [pc, #436]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a618:	d107      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fbe6 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a628:	e26f      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62e:	e26c      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a630:	4b64      	ldr	r3, [pc, #400]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a634:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a638:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a63a:	4b62      	ldr	r3, [pc, #392]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b04      	cmp	r3, #4
 800a644:	d10c      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d109      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a64c:	4b5d      	ldr	r3, [pc, #372]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	08db      	lsrs	r3, r3, #3
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	4a5c      	ldr	r2, [pc, #368]	@ (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a65e:	e01e      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a660:	4b58      	ldr	r3, [pc, #352]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a66c:	d106      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a674:	d102      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a676:	4b55      	ldr	r3, [pc, #340]	@ (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a67a:	e010      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a67c:	4b51      	ldr	r3, [pc, #324]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a688:	d106      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a690:	d102      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a692:	4b4f      	ldr	r3, [pc, #316]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a696:	e002      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a69c:	e235      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a69e:	e234      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6a0:	4b4c      	ldr	r3, [pc, #304]	@ (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a4:	e231      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6aa:	e22e      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a6ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6b0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a6b4:	430b      	orrs	r3, r1
 800a6b6:	f040 808f 	bne.w	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a6ba:	4b42      	ldr	r3, [pc, #264]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6be:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a6c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6ca:	d06b      	beq.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6d2:	d874      	bhi.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6da:	d056      	beq.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6e2:	d86c      	bhi.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6ea:	d03b      	beq.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6f2:	d864      	bhi.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6fa:	d021      	beq.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a702:	d85c      	bhi.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a706:	2b00      	cmp	r3, #0
 800a708:	d004      	beq.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a710:	d004      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a712:	e054      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a714:	f7fe fa4c 	bl	8008bb0 <HAL_RCC_GetPCLK1Freq>
 800a718:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a71a:	e1f6      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a71c:	4b29      	ldr	r3, [pc, #164]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a72a:	f107 0318 	add.w	r3, r7, #24
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 fa0a 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a738:	e1e7      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73e:	e1e4      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a740:	4b20      	ldr	r3, [pc, #128]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a74c:	d107      	bne.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a74e:	f107 030c 	add.w	r3, r7, #12
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fb4c 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a75c:	e1d5      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a762:	e1d2      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a764:	4b17      	ldr	r3, [pc, #92]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d109      	bne.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a770:	4b14      	ldr	r3, [pc, #80]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	08db      	lsrs	r3, r3, #3
 800a776:	f003 0303 	and.w	r3, r3, #3
 800a77a:	4a13      	ldr	r2, [pc, #76]	@ (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a77c:	fa22 f303 	lsr.w	r3, r2, r3
 800a780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a782:	e1c2      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a788:	e1bf      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a78a:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a796:	d102      	bne.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a798:	4b0c      	ldr	r3, [pc, #48]	@ (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a79c:	e1b5      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a2:	e1b2      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7a4:	4b07      	ldr	r3, [pc, #28]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7b0:	d102      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a7b2:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b6:	e1a8      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	e1a5      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c2:	e1a2      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	03d09000 	.word	0x03d09000
 800a7cc:	003d0900 	.word	0x003d0900
 800a7d0:	017d7840 	.word	0x017d7840
 800a7d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	d173      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a7e4:	4b9c      	ldr	r3, [pc, #624]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a7ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7f4:	d02f      	beq.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7fc:	d863      	bhi.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a80a:	d012      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a80c:	e05b      	b.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a80e:	4b92      	ldr	r3, [pc, #584]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a81a:	d107      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a81c:	f107 0318 	add.w	r3, r7, #24
 800a820:	4618      	mov	r0, r3
 800a822:	f000 f991 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82a:	e16e      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a830:	e16b      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a832:	4b89      	ldr	r3, [pc, #548]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a83a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a83e:	d107      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a840:	f107 030c 	add.w	r3, r7, #12
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fad3 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84e:	e15c      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a854:	e159      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a856:	4b80      	ldr	r3, [pc, #512]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a85a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a85e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a860:	4b7d      	ldr	r3, [pc, #500]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b04      	cmp	r3, #4
 800a86a:	d10c      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a872:	4b79      	ldr	r3, [pc, #484]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	08db      	lsrs	r3, r3, #3
 800a878:	f003 0303 	and.w	r3, r3, #3
 800a87c:	4a77      	ldr	r2, [pc, #476]	@ (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a87e:	fa22 f303 	lsr.w	r3, r2, r3
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a884:	e01e      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a886:	4b74      	ldr	r3, [pc, #464]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a88e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a892:	d106      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a89a:	d102      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a89c:	4b70      	ldr	r3, [pc, #448]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8a0:	e010      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8a2:	4b6d      	ldr	r3, [pc, #436]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8ae:	d106      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b6:	d102      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8b8:	4b6a      	ldr	r3, [pc, #424]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8bc:	e002      	b.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8c2:	e122      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8c4:	e121      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ca:	e11e      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a8d4:	430b      	orrs	r3, r1
 800a8d6:	d133      	bne.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a8d8:	4b5f      	ldr	r3, [pc, #380]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ee:	d012      	beq.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a8f0:	e023      	b.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8f2:	4b59      	ldr	r3, [pc, #356]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8fe:	d107      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fbc7 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a90e:	e0fc      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a914:	e0f9      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a916:	4b50      	ldr	r3, [pc, #320]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a91e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a922:	d107      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a924:	f107 0318 	add.w	r3, r7, #24
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 f90d 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a932:	e0ea      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a938:	e0e7      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93e:	e0e4      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a940:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a944:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a948:	430b      	orrs	r3, r1
 800a94a:	f040 808d 	bne.w	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a94e:	4b42      	ldr	r3, [pc, #264]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a952:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a956:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a95e:	d06b      	beq.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a966:	d874      	bhi.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a96e:	d056      	beq.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a976:	d86c      	bhi.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a97e:	d03b      	beq.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a986:	d864      	bhi.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a98e:	d021      	beq.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a996:	d85c      	bhi.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d004      	beq.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9a4:	d004      	beq.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a9a6:	e054      	b.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a9a8:	f000 f8b8 	bl	800ab1c <HAL_RCCEx_GetD3PCLK1Freq>
 800a9ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9ae:	e0ac      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9b0:	4b29      	ldr	r3, [pc, #164]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9bc:	d107      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9be:	f107 0318 	add.w	r3, r7, #24
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 f8c0 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9cc:	e09d      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d2:	e09a      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9d4:	4b20      	ldr	r3, [pc, #128]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9e0:	d107      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9e2:	f107 030c 	add.w	r3, r7, #12
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fa02 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9f0:	e08b      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f6:	e088      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9f8:	4b17      	ldr	r3, [pc, #92]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0304 	and.w	r3, r3, #4
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d109      	bne.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa04:	4b14      	ldr	r3, [pc, #80]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	08db      	lsrs	r3, r3, #3
 800aa0a:	f003 0303 	and.w	r3, r3, #3
 800aa0e:	4a13      	ldr	r2, [pc, #76]	@ (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa10:	fa22 f303 	lsr.w	r3, r2, r3
 800aa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa16:	e078      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa1c:	e075      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa1e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa2a:	d102      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aa2c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa30:	e06b      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa36:	e068      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa38:	4b07      	ldr	r3, [pc, #28]	@ (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa44:	d102      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aa46:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4a:	e05e      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa50:	e05b      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa56:	e058      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa58:	58024400 	.word	0x58024400
 800aa5c:	03d09000 	.word	0x03d09000
 800aa60:	003d0900 	.word	0x003d0900
 800aa64:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa6c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aa70:	430b      	orrs	r3, r1
 800aa72:	d148      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aa74:	4b27      	ldr	r3, [pc, #156]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aa76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa84:	d02a      	beq.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa8c:	d838      	bhi.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa9a:	d00d      	beq.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aa9c:	e030      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaaa:	d102      	bne.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aaac:	4b1a      	ldr	r3, [pc, #104]	@ (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab0:	e02b      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab6:	e028      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aab8:	4b16      	ldr	r3, [pc, #88]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aac4:	d107      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fae4 	bl	800b098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad4:	e019      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aada:	e016      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aadc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aae8:	d107      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaea:	f107 0318 	add.w	r3, r7, #24
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f82a 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaf8:	e007      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafe:	e004      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab04:	e001      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3740      	adds	r7, #64	@ 0x40
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	58024400 	.word	0x58024400
 800ab18:	017d7840 	.word	0x017d7840

0800ab1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab20:	f7fe f816 	bl	8008b50 <HAL_RCC_GetHCLKFreq>
 800ab24:	4602      	mov	r2, r0
 800ab26:	4b06      	ldr	r3, [pc, #24]	@ (800ab40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	091b      	lsrs	r3, r3, #4
 800ab2c:	f003 0307 	and.w	r3, r3, #7
 800ab30:	4904      	ldr	r1, [pc, #16]	@ (800ab44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab32:	5ccb      	ldrb	r3, [r1, r3]
 800ab34:	f003 031f 	and.w	r3, r3, #31
 800ab38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	58024400 	.word	0x58024400
 800ab44:	08013004 	.word	0x08013004

0800ab48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b089      	sub	sp, #36	@ 0x24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab50:	4ba1      	ldr	r3, [pc, #644]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ab5a:	4b9f      	ldr	r3, [pc, #636]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5e:	0b1b      	lsrs	r3, r3, #12
 800ab60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab66:	4b9c      	ldr	r3, [pc, #624]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6a:	091b      	lsrs	r3, r3, #4
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ab72:	4b99      	ldr	r3, [pc, #612]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab76:	08db      	lsrs	r3, r3, #3
 800ab78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	ee07 3a90 	vmov	s15, r3
 800ab86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 8111 	beq.w	800adb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	f000 8083 	beq.w	800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	f200 80a1 	bhi.w	800ace8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d056      	beq.n	800ac60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800abb2:	e099      	b.n	800ace8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abb4:	4b88      	ldr	r3, [pc, #544]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0320 	and.w	r3, r3, #32
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d02d      	beq.n	800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc0:	4b85      	ldr	r3, [pc, #532]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a84      	ldr	r2, [pc, #528]	@ (800addc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	ee07 3a90 	vmov	s15, r3
 800abd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abea:	4b7b      	ldr	r3, [pc, #492]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800abfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac1a:	e087      	b.n	800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ade4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2e:	4b6a      	ldr	r3, [pc, #424]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac5e:	e065      	b.n	800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ade8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac72:	4b59      	ldr	r3, [pc, #356]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca2:	e043      	b.n	800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800adec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800acb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb6:	4b48      	ldr	r3, [pc, #288]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace6:	e021      	b.n	800ad2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ade8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b37      	ldr	r3, [pc, #220]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ade0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ad2c:	4b2a      	ldr	r3, [pc, #168]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad30:	0a5b      	lsrs	r3, r3, #9
 800ad32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad52:	ee17 2a90 	vmov	r2, s15
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ad5a:	4b1f      	ldr	r3, [pc, #124]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad64:	ee07 3a90 	vmov	s15, r3
 800ad68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad80:	ee17 2a90 	vmov	r2, s15
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ad88:	4b13      	ldr	r3, [pc, #76]	@ (800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8c:	0e1b      	lsrs	r3, r3, #24
 800ad8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ada2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ada6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adae:	ee17 2a90 	vmov	r2, s15
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800adb6:	e008      	b.n	800adca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	609a      	str	r2, [r3, #8]
}
 800adca:	bf00      	nop
 800adcc:	3724      	adds	r7, #36	@ 0x24
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	58024400 	.word	0x58024400
 800addc:	03d09000 	.word	0x03d09000
 800ade0:	46000000 	.word	0x46000000
 800ade4:	4c742400 	.word	0x4c742400
 800ade8:	4a742400 	.word	0x4a742400
 800adec:	4bbebc20 	.word	0x4bbebc20

0800adf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b089      	sub	sp, #36	@ 0x24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf8:	4ba1      	ldr	r3, [pc, #644]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfc:	f003 0303 	and.w	r3, r3, #3
 800ae00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ae02:	4b9f      	ldr	r3, [pc, #636]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae06:	0d1b      	lsrs	r3, r3, #20
 800ae08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae0e:	4b9c      	ldr	r3, [pc, #624]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae12:	0a1b      	lsrs	r3, r3, #8
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ae1a:	4b99      	ldr	r3, [pc, #612]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae1e:	08db      	lsrs	r3, r3, #3
 800ae20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	fb02 f303 	mul.w	r3, r2, r3
 800ae2a:	ee07 3a90 	vmov	s15, r3
 800ae2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 8111 	beq.w	800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	f000 8083 	beq.w	800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	f200 80a1 	bhi.w	800af90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d056      	beq.n	800af08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae5a:	e099      	b.n	800af90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae5c:	4b88      	ldr	r3, [pc, #544]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0320 	and.w	r3, r3, #32
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d02d      	beq.n	800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae68:	4b85      	ldr	r3, [pc, #532]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	08db      	lsrs	r3, r3, #3
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	4a84      	ldr	r2, [pc, #528]	@ (800b084 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae74:	fa22 f303 	lsr.w	r3, r2, r3
 800ae78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	ee07 3a90 	vmov	s15, r3
 800ae80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae92:	4b7b      	ldr	r3, [pc, #492]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aebe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aec2:	e087      	b.n	800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aece:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b08c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed6:	4b6a      	ldr	r3, [pc, #424]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aede:	ee07 3a90 	vmov	s15, r3
 800aee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aefa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af06:	e065      	b.n	800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1a:	4b59      	ldr	r3, [pc, #356]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af4a:	e043      	b.n	800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	ee07 3a90 	vmov	s15, r3
 800af52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af5e:	4b48      	ldr	r3, [pc, #288]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af8e:	e021      	b.n	800afd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa2:	4b37      	ldr	r3, [pc, #220]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800afd4:	4b2a      	ldr	r3, [pc, #168]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd8:	0a5b      	lsrs	r3, r3, #9
 800afda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afee:	edd7 6a07 	vldr	s13, [r7, #28]
 800aff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800affa:	ee17 2a90 	vmov	r2, s15
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b002:	4b1f      	ldr	r3, [pc, #124]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b006:	0c1b      	lsrs	r3, r3, #16
 800b008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b00c:	ee07 3a90 	vmov	s15, r3
 800b010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b014:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b01c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b028:	ee17 2a90 	vmov	r2, s15
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b030:	4b13      	ldr	r3, [pc, #76]	@ (800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b034:	0e1b      	lsrs	r3, r3, #24
 800b036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b056:	ee17 2a90 	vmov	r2, s15
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b05e:	e008      	b.n	800b072 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	609a      	str	r2, [r3, #8]
}
 800b072:	bf00      	nop
 800b074:	3724      	adds	r7, #36	@ 0x24
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	58024400 	.word	0x58024400
 800b084:	03d09000 	.word	0x03d09000
 800b088:	46000000 	.word	0x46000000
 800b08c:	4c742400 	.word	0x4c742400
 800b090:	4a742400 	.word	0x4a742400
 800b094:	4bbebc20 	.word	0x4bbebc20

0800b098 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b098:	b480      	push	{r7}
 800b09a:	b089      	sub	sp, #36	@ 0x24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0a0:	4ba0      	ldr	r3, [pc, #640]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a4:	f003 0303 	and.w	r3, r3, #3
 800b0a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b0aa:	4b9e      	ldr	r3, [pc, #632]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ae:	091b      	lsrs	r3, r3, #4
 800b0b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0b6:	4b9b      	ldr	r3, [pc, #620]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b0c0:	4b98      	ldr	r3, [pc, #608]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0c4:	08db      	lsrs	r3, r3, #3
 800b0c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	fb02 f303 	mul.w	r3, r2, r3
 800b0d0:	ee07 3a90 	vmov	s15, r3
 800b0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f000 8111 	beq.w	800b306 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	f000 8083 	beq.w	800b1f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	f200 80a1 	bhi.w	800b236 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d056      	beq.n	800b1ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b100:	e099      	b.n	800b236 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b102:	4b88      	ldr	r3, [pc, #544]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0320 	and.w	r3, r3, #32
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d02d      	beq.n	800b16a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b10e:	4b85      	ldr	r3, [pc, #532]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	08db      	lsrs	r3, r3, #3
 800b114:	f003 0303 	and.w	r3, r3, #3
 800b118:	4a83      	ldr	r2, [pc, #524]	@ (800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b11a:	fa22 f303 	lsr.w	r3, r2, r3
 800b11e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	ee07 3a90 	vmov	s15, r3
 800b130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b138:	4b7a      	ldr	r3, [pc, #488]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b140:	ee07 3a90 	vmov	s15, r3
 800b144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b148:	ed97 6a03 	vldr	s12, [r7, #12]
 800b14c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b158:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b15c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b160:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b164:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b168:	e087      	b.n	800b27a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	ee07 3a90 	vmov	s15, r3
 800b170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b174:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b330 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17c:	4b69      	ldr	r3, [pc, #420]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b17e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b184:	ee07 3a90 	vmov	s15, r3
 800b188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b190:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ac:	e065      	b.n	800b27a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	ee07 3a90 	vmov	s15, r3
 800b1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b334 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c0:	4b58      	ldr	r3, [pc, #352]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1d4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1f0:	e043      	b.n	800b27a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	ee07 3a90 	vmov	s15, r3
 800b1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b338 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b204:	4b47      	ldr	r3, [pc, #284]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b214:	ed97 6a03 	vldr	s12, [r7, #12]
 800b218:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b21c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b230:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b234:	e021      	b.n	800b27a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	ee07 3a90 	vmov	s15, r3
 800b23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b240:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b330 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b248:	4b36      	ldr	r3, [pc, #216]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b24a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b250:	ee07 3a90 	vmov	s15, r3
 800b254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b258:	ed97 6a03 	vldr	s12, [r7, #12]
 800b25c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b32c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b26c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b270:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b274:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b278:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b27a:	4b2a      	ldr	r3, [pc, #168]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b27c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b27e:	0a5b      	lsrs	r3, r3, #9
 800b280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b284:	ee07 3a90 	vmov	s15, r3
 800b288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b290:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b294:	edd7 6a07 	vldr	s13, [r7, #28]
 800b298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b29c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2a0:	ee17 2a90 	vmov	r2, s15
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b2a8:	4b1e      	ldr	r3, [pc, #120]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ac:	0c1b      	lsrs	r3, r3, #16
 800b2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ce:	ee17 2a90 	vmov	r2, s15
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b2d6:	4b13      	ldr	r3, [pc, #76]	@ (800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2da:	0e1b      	lsrs	r3, r3, #24
 800b2dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2e0:	ee07 3a90 	vmov	s15, r3
 800b2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2fc:	ee17 2a90 	vmov	r2, s15
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b304:	e008      	b.n	800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	609a      	str	r2, [r3, #8]
}
 800b318:	bf00      	nop
 800b31a:	3724      	adds	r7, #36	@ 0x24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	58024400 	.word	0x58024400
 800b328:	03d09000 	.word	0x03d09000
 800b32c:	46000000 	.word	0x46000000
 800b330:	4c742400 	.word	0x4c742400
 800b334:	4a742400 	.word	0x4a742400
 800b338:	4bbebc20 	.word	0x4bbebc20

0800b33c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b34a:	4b53      	ldr	r3, [pc, #332]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34e:	f003 0303 	and.w	r3, r3, #3
 800b352:	2b03      	cmp	r3, #3
 800b354:	d101      	bne.n	800b35a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e099      	b.n	800b48e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b35a:	4b4f      	ldr	r3, [pc, #316]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a4e      	ldr	r2, [pc, #312]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b360:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b366:	f7f7 fc17 	bl	8002b98 <HAL_GetTick>
 800b36a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b36c:	e008      	b.n	800b380 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b36e:	f7f7 fc13 	bl	8002b98 <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d901      	bls.n	800b380 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e086      	b.n	800b48e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b380:	4b45      	ldr	r3, [pc, #276]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1f0      	bne.n	800b36e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b38c:	4b42      	ldr	r3, [pc, #264]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b390:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	031b      	lsls	r3, r3, #12
 800b39a:	493f      	ldr	r1, [pc, #252]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	025b      	lsls	r3, r3, #9
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	061b      	lsls	r3, r3, #24
 800b3cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3d0:	4931      	ldr	r1, [pc, #196]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3d6:	4b30      	ldr	r3, [pc, #192]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	492d      	ldr	r1, [pc, #180]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ec:	f023 0220 	bic.w	r2, r3, #32
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	4928      	ldr	r1, [pc, #160]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3fa:	4b27      	ldr	r3, [pc, #156]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fe:	4a26      	ldr	r2, [pc, #152]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b400:	f023 0310 	bic.w	r3, r3, #16
 800b404:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b406:	4b24      	ldr	r3, [pc, #144]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b40a:	4b24      	ldr	r3, [pc, #144]	@ (800b49c <RCCEx_PLL2_Config+0x160>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	69d2      	ldr	r2, [r2, #28]
 800b412:	00d2      	lsls	r2, r2, #3
 800b414:	4920      	ldr	r1, [pc, #128]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b416:	4313      	orrs	r3, r2
 800b418:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b41a:	4b1f      	ldr	r3, [pc, #124]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	4a1e      	ldr	r2, [pc, #120]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b420:	f043 0310 	orr.w	r3, r3, #16
 800b424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b42c:	4b1a      	ldr	r3, [pc, #104]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b430:	4a19      	ldr	r2, [pc, #100]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b432:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b436:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b438:	e00f      	b.n	800b45a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d106      	bne.n	800b44e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b440:	4b15      	ldr	r3, [pc, #84]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b444:	4a14      	ldr	r2, [pc, #80]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b44a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b44c:	e005      	b.n	800b45a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b44e:	4b12      	ldr	r3, [pc, #72]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b452:	4a11      	ldr	r2, [pc, #68]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b458:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b45a:	4b0f      	ldr	r3, [pc, #60]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a0e      	ldr	r2, [pc, #56]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b460:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b466:	f7f7 fb97 	bl	8002b98 <HAL_GetTick>
 800b46a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b46c:	e008      	b.n	800b480 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b46e:	f7f7 fb93 	bl	8002b98 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d901      	bls.n	800b480 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e006      	b.n	800b48e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b480:	4b05      	ldr	r3, [pc, #20]	@ (800b498 <RCCEx_PLL2_Config+0x15c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0f0      	beq.n	800b46e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	58024400 	.word	0x58024400
 800b49c:	ffff0007 	.word	0xffff0007

0800b4a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ae:	4b53      	ldr	r3, [pc, #332]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d101      	bne.n	800b4be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e099      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4be:	4b4f      	ldr	r3, [pc, #316]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a4e      	ldr	r2, [pc, #312]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ca:	f7f7 fb65 	bl	8002b98 <HAL_GetTick>
 800b4ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4d0:	e008      	b.n	800b4e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4d2:	f7f7 fb61 	bl	8002b98 <HAL_GetTick>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	1ad3      	subs	r3, r2, r3
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d901      	bls.n	800b4e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e086      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4e4:	4b45      	ldr	r3, [pc, #276]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1f0      	bne.n	800b4d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4f0:	4b42      	ldr	r3, [pc, #264]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	051b      	lsls	r3, r3, #20
 800b4fe:	493f      	ldr	r1, [pc, #252]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b500:	4313      	orrs	r3, r2
 800b502:	628b      	str	r3, [r1, #40]	@ 0x28
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	3b01      	subs	r3, #1
 800b50a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	3b01      	subs	r3, #1
 800b514:	025b      	lsls	r3, r3, #9
 800b516:	b29b      	uxth	r3, r3
 800b518:	431a      	orrs	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	3b01      	subs	r3, #1
 800b520:	041b      	lsls	r3, r3, #16
 800b522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	061b      	lsls	r3, r3, #24
 800b530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b534:	4931      	ldr	r1, [pc, #196]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b536:	4313      	orrs	r3, r2
 800b538:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b53a:	4b30      	ldr	r3, [pc, #192]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	492d      	ldr	r1, [pc, #180]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b54c:	4b2b      	ldr	r3, [pc, #172]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b550:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	4928      	ldr	r1, [pc, #160]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b55a:	4313      	orrs	r3, r2
 800b55c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b55e:	4b27      	ldr	r3, [pc, #156]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b562:	4a26      	ldr	r2, [pc, #152]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b56a:	4b24      	ldr	r3, [pc, #144]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b56c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b56e:	4b24      	ldr	r3, [pc, #144]	@ (800b600 <RCCEx_PLL3_Config+0x160>)
 800b570:	4013      	ands	r3, r2
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	69d2      	ldr	r2, [r2, #28]
 800b576:	00d2      	lsls	r2, r2, #3
 800b578:	4920      	ldr	r1, [pc, #128]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b57e:	4b1f      	ldr	r3, [pc, #124]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b582:	4a1e      	ldr	r2, [pc, #120]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b590:	4b1a      	ldr	r3, [pc, #104]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b594:	4a19      	ldr	r2, [pc, #100]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b596:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b59a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b59c:	e00f      	b.n	800b5be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d106      	bne.n	800b5b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5a4:	4b15      	ldr	r3, [pc, #84]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a8:	4a14      	ldr	r2, [pc, #80]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5b0:	e005      	b.n	800b5be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5b2:	4b12      	ldr	r3, [pc, #72]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b6:	4a11      	ldr	r2, [pc, #68]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b5bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5be:	4b0f      	ldr	r3, [pc, #60]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a0e      	ldr	r2, [pc, #56]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ca:	f7f7 fae5 	bl	8002b98 <HAL_GetTick>
 800b5ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5d0:	e008      	b.n	800b5e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5d2:	f7f7 fae1 	bl	8002b98 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d901      	bls.n	800b5e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e006      	b.n	800b5f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5e4:	4b05      	ldr	r3, [pc, #20]	@ (800b5fc <RCCEx_PLL3_Config+0x15c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0f0      	beq.n	800b5d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	58024400 	.word	0x58024400
 800b600:	ffff0007 	.word	0xffff0007

0800b604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e049      	b.n	800b6aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7f7 f914 	bl	8002858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2202      	movs	r2, #2
 800b634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3304      	adds	r3, #4
 800b640:	4619      	mov	r1, r3
 800b642:	4610      	mov	r0, r2
 800b644:	f000 f9c6 	bl	800b9d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d001      	beq.n	800b6cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e04c      	b.n	800b766 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a26      	ldr	r2, [pc, #152]	@ (800b774 <HAL_TIM_Base_Start+0xc0>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d022      	beq.n	800b724 <HAL_TIM_Base_Start+0x70>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6e6:	d01d      	beq.n	800b724 <HAL_TIM_Base_Start+0x70>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a22      	ldr	r2, [pc, #136]	@ (800b778 <HAL_TIM_Base_Start+0xc4>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d018      	beq.n	800b724 <HAL_TIM_Base_Start+0x70>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a21      	ldr	r2, [pc, #132]	@ (800b77c <HAL_TIM_Base_Start+0xc8>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d013      	beq.n	800b724 <HAL_TIM_Base_Start+0x70>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a1f      	ldr	r2, [pc, #124]	@ (800b780 <HAL_TIM_Base_Start+0xcc>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d00e      	beq.n	800b724 <HAL_TIM_Base_Start+0x70>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a1e      	ldr	r2, [pc, #120]	@ (800b784 <HAL_TIM_Base_Start+0xd0>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d009      	beq.n	800b724 <HAL_TIM_Base_Start+0x70>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1c      	ldr	r2, [pc, #112]	@ (800b788 <HAL_TIM_Base_Start+0xd4>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d004      	beq.n	800b724 <HAL_TIM_Base_Start+0x70>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a1b      	ldr	r2, [pc, #108]	@ (800b78c <HAL_TIM_Base_Start+0xd8>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d115      	bne.n	800b750 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689a      	ldr	r2, [r3, #8]
 800b72a:	4b19      	ldr	r3, [pc, #100]	@ (800b790 <HAL_TIM_Base_Start+0xdc>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b06      	cmp	r3, #6
 800b734:	d015      	beq.n	800b762 <HAL_TIM_Base_Start+0xae>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b73c:	d011      	beq.n	800b762 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f042 0201 	orr.w	r2, r2, #1
 800b74c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b74e:	e008      	b.n	800b762 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f042 0201 	orr.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	e000      	b.n	800b764 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	40010000 	.word	0x40010000
 800b778:	40000400 	.word	0x40000400
 800b77c:	40000800 	.word	0x40000800
 800b780:	40000c00 	.word	0x40000c00
 800b784:	40010400 	.word	0x40010400
 800b788:	40001800 	.word	0x40001800
 800b78c:	40014000 	.word	0x40014000
 800b790:	00010007 	.word	0x00010007

0800b794 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6a1a      	ldr	r2, [r3, #32]
 800b7a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10f      	bne.n	800b7cc <HAL_TIM_Base_Stop+0x38>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6a1a      	ldr	r2, [r3, #32]
 800b7b2:	f240 4344 	movw	r3, #1092	@ 0x444
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d107      	bne.n	800b7cc <HAL_TIM_Base_Stop+0x38>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f022 0201 	bic.w	r2, r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
	...

0800b7e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_TIM_ConfigClockSource+0x1c>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e0dc      	b.n	800b9ba <HAL_TIM_ConfigClockSource+0x1d6>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	4b6a      	ldr	r3, [pc, #424]	@ (800b9c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b81c:	4013      	ands	r3, r2
 800b81e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a64      	ldr	r2, [pc, #400]	@ (800b9c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b836:	4293      	cmp	r3, r2
 800b838:	f000 80a9 	beq.w	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b83c:	4a62      	ldr	r2, [pc, #392]	@ (800b9c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	f200 80ae 	bhi.w	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b844:	4a61      	ldr	r2, [pc, #388]	@ (800b9cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800b846:	4293      	cmp	r3, r2
 800b848:	f000 80a1 	beq.w	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b84c:	4a5f      	ldr	r2, [pc, #380]	@ (800b9cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	f200 80a6 	bhi.w	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b854:	4a5e      	ldr	r2, [pc, #376]	@ (800b9d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b856:	4293      	cmp	r3, r2
 800b858:	f000 8099 	beq.w	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b85c:	4a5c      	ldr	r2, [pc, #368]	@ (800b9d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	f200 809e 	bhi.w	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b864:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b868:	f000 8091 	beq.w	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b86c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b870:	f200 8096 	bhi.w	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b874:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b878:	f000 8089 	beq.w	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b87c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b880:	f200 808e 	bhi.w	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b888:	d03e      	beq.n	800b908 <HAL_TIM_ConfigClockSource+0x124>
 800b88a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b88e:	f200 8087 	bhi.w	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b896:	f000 8086 	beq.w	800b9a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800b89a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b89e:	d87f      	bhi.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a0:	2b70      	cmp	r3, #112	@ 0x70
 800b8a2:	d01a      	beq.n	800b8da <HAL_TIM_ConfigClockSource+0xf6>
 800b8a4:	2b70      	cmp	r3, #112	@ 0x70
 800b8a6:	d87b      	bhi.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a8:	2b60      	cmp	r3, #96	@ 0x60
 800b8aa:	d050      	beq.n	800b94e <HAL_TIM_ConfigClockSource+0x16a>
 800b8ac:	2b60      	cmp	r3, #96	@ 0x60
 800b8ae:	d877      	bhi.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b0:	2b50      	cmp	r3, #80	@ 0x50
 800b8b2:	d03c      	beq.n	800b92e <HAL_TIM_ConfigClockSource+0x14a>
 800b8b4:	2b50      	cmp	r3, #80	@ 0x50
 800b8b6:	d873      	bhi.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b8:	2b40      	cmp	r3, #64	@ 0x40
 800b8ba:	d058      	beq.n	800b96e <HAL_TIM_ConfigClockSource+0x18a>
 800b8bc:	2b40      	cmp	r3, #64	@ 0x40
 800b8be:	d86f      	bhi.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c0:	2b30      	cmp	r3, #48	@ 0x30
 800b8c2:	d064      	beq.n	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8c4:	2b30      	cmp	r3, #48	@ 0x30
 800b8c6:	d86b      	bhi.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c8:	2b20      	cmp	r3, #32
 800b8ca:	d060      	beq.n	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	d867      	bhi.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d05c      	beq.n	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8d4:	2b10      	cmp	r3, #16
 800b8d6:	d05a      	beq.n	800b98e <HAL_TIM_ConfigClockSource+0x1aa>
 800b8d8:	e062      	b.n	800b9a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8ea:	f000 f98b 	bl	800bc04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b8fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	609a      	str	r2, [r3, #8]
      break;
 800b906:	e04f      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b918:	f000 f974 	bl	800bc04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689a      	ldr	r2, [r3, #8]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b92a:	609a      	str	r2, [r3, #8]
      break;
 800b92c:	e03c      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b93a:	461a      	mov	r2, r3
 800b93c:	f000 f8e4 	bl	800bb08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2150      	movs	r1, #80	@ 0x50
 800b946:	4618      	mov	r0, r3
 800b948:	f000 f93e 	bl	800bbc8 <TIM_ITRx_SetConfig>
      break;
 800b94c:	e02c      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b95a:	461a      	mov	r2, r3
 800b95c:	f000 f903 	bl	800bb66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2160      	movs	r1, #96	@ 0x60
 800b966:	4618      	mov	r0, r3
 800b968:	f000 f92e 	bl	800bbc8 <TIM_ITRx_SetConfig>
      break;
 800b96c:	e01c      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b97a:	461a      	mov	r2, r3
 800b97c:	f000 f8c4 	bl	800bb08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2140      	movs	r1, #64	@ 0x40
 800b986:	4618      	mov	r0, r3
 800b988:	f000 f91e 	bl	800bbc8 <TIM_ITRx_SetConfig>
      break;
 800b98c:	e00c      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4619      	mov	r1, r3
 800b998:	4610      	mov	r0, r2
 800b99a:	f000 f915 	bl	800bbc8 <TIM_ITRx_SetConfig>
      break;
 800b99e:	e003      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a4:	e000      	b.n	800b9a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b9a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	ffceff88 	.word	0xffceff88
 800b9c8:	00100040 	.word	0x00100040
 800b9cc:	00100030 	.word	0x00100030
 800b9d0:	00100020 	.word	0x00100020

0800b9d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a40      	ldr	r2, [pc, #256]	@ (800bae8 <TIM_Base_SetConfig+0x114>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d013      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9f2:	d00f      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a3d      	ldr	r2, [pc, #244]	@ (800baec <TIM_Base_SetConfig+0x118>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d00b      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a3c      	ldr	r2, [pc, #240]	@ (800baf0 <TIM_Base_SetConfig+0x11c>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d007      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a3b      	ldr	r2, [pc, #236]	@ (800baf4 <TIM_Base_SetConfig+0x120>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d003      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a3a      	ldr	r2, [pc, #232]	@ (800baf8 <TIM_Base_SetConfig+0x124>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d108      	bne.n	800ba26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a2f      	ldr	r2, [pc, #188]	@ (800bae8 <TIM_Base_SetConfig+0x114>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d01f      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba34:	d01b      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a2c      	ldr	r2, [pc, #176]	@ (800baec <TIM_Base_SetConfig+0x118>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d017      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a2b      	ldr	r2, [pc, #172]	@ (800baf0 <TIM_Base_SetConfig+0x11c>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d013      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a2a      	ldr	r2, [pc, #168]	@ (800baf4 <TIM_Base_SetConfig+0x120>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d00f      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a29      	ldr	r2, [pc, #164]	@ (800baf8 <TIM_Base_SetConfig+0x124>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d00b      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a28      	ldr	r2, [pc, #160]	@ (800bafc <TIM_Base_SetConfig+0x128>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d007      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a27      	ldr	r2, [pc, #156]	@ (800bb00 <TIM_Base_SetConfig+0x12c>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d003      	beq.n	800ba6e <TIM_Base_SetConfig+0x9a>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a26      	ldr	r2, [pc, #152]	@ (800bb04 <TIM_Base_SetConfig+0x130>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d108      	bne.n	800ba80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	689a      	ldr	r2, [r3, #8]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a10      	ldr	r2, [pc, #64]	@ (800bae8 <TIM_Base_SetConfig+0x114>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d00f      	beq.n	800bacc <TIM_Base_SetConfig+0xf8>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a12      	ldr	r2, [pc, #72]	@ (800baf8 <TIM_Base_SetConfig+0x124>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d00b      	beq.n	800bacc <TIM_Base_SetConfig+0xf8>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a11      	ldr	r2, [pc, #68]	@ (800bafc <TIM_Base_SetConfig+0x128>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d007      	beq.n	800bacc <TIM_Base_SetConfig+0xf8>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a10      	ldr	r2, [pc, #64]	@ (800bb00 <TIM_Base_SetConfig+0x12c>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d003      	beq.n	800bacc <TIM_Base_SetConfig+0xf8>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a0f      	ldr	r2, [pc, #60]	@ (800bb04 <TIM_Base_SetConfig+0x130>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d103      	bne.n	800bad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	691a      	ldr	r2, [r3, #16]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	615a      	str	r2, [r3, #20]
}
 800bada:	bf00      	nop
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	40010000 	.word	0x40010000
 800baec:	40000400 	.word	0x40000400
 800baf0:	40000800 	.word	0x40000800
 800baf4:	40000c00 	.word	0x40000c00
 800baf8:	40010400 	.word	0x40010400
 800bafc:	40014000 	.word	0x40014000
 800bb00:	40014400 	.word	0x40014400
 800bb04:	40014800 	.word	0x40014800

0800bb08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b087      	sub	sp, #28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6a1b      	ldr	r3, [r3, #32]
 800bb18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	f023 0201 	bic.w	r2, r3, #1
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	011b      	lsls	r3, r3, #4
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f023 030a 	bic.w	r3, r3, #10
 800bb44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	621a      	str	r2, [r3, #32]
}
 800bb5a:	bf00      	nop
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b087      	sub	sp, #28
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f023 0210 	bic.w	r2, r3, #16
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	031b      	lsls	r3, r3, #12
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	011b      	lsls	r3, r3, #4
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	621a      	str	r2, [r3, #32]
}
 800bbba:	bf00      	nop
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
	...

0800bbc8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	4b09      	ldr	r3, [pc, #36]	@ (800bc00 <TIM_ITRx_SetConfig+0x38>)
 800bbdc:	4013      	ands	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	f043 0307 	orr.w	r3, r3, #7
 800bbea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	609a      	str	r2, [r3, #8]
}
 800bbf2:	bf00      	nop
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	ffcfff8f 	.word	0xffcfff8f

0800bc04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b087      	sub	sp, #28
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	021a      	lsls	r2, r3, #8
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	431a      	orrs	r2, r3
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	609a      	str	r2, [r3, #8]
}
 800bc38:	bf00      	nop
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d101      	bne.n	800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e06d      	b.n	800bd38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a30      	ldr	r2, [pc, #192]	@ (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d004      	beq.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a2f      	ldr	r2, [pc, #188]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d108      	bne.n	800bca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a20      	ldr	r2, [pc, #128]	@ (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d022      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcce:	d01d      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a1d      	ldr	r2, [pc, #116]	@ (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d018      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a1c      	ldr	r2, [pc, #112]	@ (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d013      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a1a      	ldr	r2, [pc, #104]	@ (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d00e      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a15      	ldr	r2, [pc, #84]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d009      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a16      	ldr	r2, [pc, #88]	@ (800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d004      	beq.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a15      	ldr	r2, [pc, #84]	@ (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d10c      	bne.n	800bd26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	40010000 	.word	0x40010000
 800bd48:	40010400 	.word	0x40010400
 800bd4c:	40000400 	.word	0x40000400
 800bd50:	40000800 	.word	0x40000800
 800bd54:	40000c00 	.word	0x40000c00
 800bd58:	40001800 	.word	0x40001800
 800bd5c:	40014000 	.word	0x40014000

0800bd60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e042      	b.n	800bdf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d106      	bne.n	800bd8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7f6 fded 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2224      	movs	r2, #36	@ 0x24
 800bd8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f022 0201 	bic.w	r2, r2, #1
 800bda0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f8ba 	bl	800bf1c <UART_SetConfig>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d101      	bne.n	800bdb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e022      	b.n	800bdf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d002      	beq.n	800bdc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fe16 	bl	800c9ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bdce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689a      	ldr	r2, [r3, #8]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bdde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f042 0201 	orr.w	r2, r2, #1
 800bdee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fe9d 	bl	800cb30 <UART_CheckIdleState>
 800bdf6:	4603      	mov	r3, r0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08a      	sub	sp, #40	@ 0x28
 800be04:	af02      	add	r7, sp, #8
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	603b      	str	r3, [r7, #0]
 800be0c:	4613      	mov	r3, r2
 800be0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be16:	2b20      	cmp	r3, #32
 800be18:	d17b      	bne.n	800bf12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <HAL_UART_Transmit+0x26>
 800be20:	88fb      	ldrh	r3, [r7, #6]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d101      	bne.n	800be2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e074      	b.n	800bf14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2221      	movs	r2, #33	@ 0x21
 800be36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be3a:	f7f6 fead 	bl	8002b98 <HAL_GetTick>
 800be3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	88fa      	ldrh	r2, [r7, #6]
 800be44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	88fa      	ldrh	r2, [r7, #6]
 800be4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be58:	d108      	bne.n	800be6c <HAL_UART_Transmit+0x6c>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d104      	bne.n	800be6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	61bb      	str	r3, [r7, #24]
 800be6a:	e003      	b.n	800be74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be74:	e030      	b.n	800bed8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2200      	movs	r2, #0
 800be7e:	2180      	movs	r1, #128	@ 0x80
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 feff 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d005      	beq.n	800be98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2220      	movs	r2, #32
 800be90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	e03d      	b.n	800bf14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10b      	bne.n	800beb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800beac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	3302      	adds	r3, #2
 800beb2:	61bb      	str	r3, [r7, #24]
 800beb4:	e007      	b.n	800bec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	3301      	adds	r3, #1
 800bec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800becc:	b29b      	uxth	r3, r3
 800bece:	3b01      	subs	r3, #1
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bede:	b29b      	uxth	r3, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1c8      	bne.n	800be76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2200      	movs	r2, #0
 800beec:	2140      	movs	r1, #64	@ 0x40
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 fec8 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d005      	beq.n	800bf06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2220      	movs	r2, #32
 800befe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e006      	b.n	800bf14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e000      	b.n	800bf14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bf12:	2302      	movs	r3, #2
  }
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3720      	adds	r7, #32
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf20:	b092      	sub	sp, #72	@ 0x48
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	689a      	ldr	r2, [r3, #8]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	431a      	orrs	r2, r3
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681a      	ldr	r2, [r3, #0]
 800bf4a:	4bbe      	ldr	r3, [pc, #760]	@ (800c244 <UART_SetConfig+0x328>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	6812      	ldr	r2, [r2, #0]
 800bf52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf54:	430b      	orrs	r3, r1
 800bf56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4ab3      	ldr	r2, [pc, #716]	@ (800c248 <UART_SetConfig+0x32c>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d004      	beq.n	800bf88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf84:	4313      	orrs	r3, r2
 800bf86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	689a      	ldr	r2, [r3, #8]
 800bf8e:	4baf      	ldr	r3, [pc, #700]	@ (800c24c <UART_SetConfig+0x330>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	6812      	ldr	r2, [r2, #0]
 800bf96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa2:	f023 010f 	bic.w	r1, r3, #15
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4aa6      	ldr	r2, [pc, #664]	@ (800c250 <UART_SetConfig+0x334>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d177      	bne.n	800c0ac <UART_SetConfig+0x190>
 800bfbc:	4ba5      	ldr	r3, [pc, #660]	@ (800c254 <UART_SetConfig+0x338>)
 800bfbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bfc4:	2b28      	cmp	r3, #40	@ 0x28
 800bfc6:	d86d      	bhi.n	800c0a4 <UART_SetConfig+0x188>
 800bfc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd0 <UART_SetConfig+0xb4>)
 800bfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfce:	bf00      	nop
 800bfd0:	0800c075 	.word	0x0800c075
 800bfd4:	0800c0a5 	.word	0x0800c0a5
 800bfd8:	0800c0a5 	.word	0x0800c0a5
 800bfdc:	0800c0a5 	.word	0x0800c0a5
 800bfe0:	0800c0a5 	.word	0x0800c0a5
 800bfe4:	0800c0a5 	.word	0x0800c0a5
 800bfe8:	0800c0a5 	.word	0x0800c0a5
 800bfec:	0800c0a5 	.word	0x0800c0a5
 800bff0:	0800c07d 	.word	0x0800c07d
 800bff4:	0800c0a5 	.word	0x0800c0a5
 800bff8:	0800c0a5 	.word	0x0800c0a5
 800bffc:	0800c0a5 	.word	0x0800c0a5
 800c000:	0800c0a5 	.word	0x0800c0a5
 800c004:	0800c0a5 	.word	0x0800c0a5
 800c008:	0800c0a5 	.word	0x0800c0a5
 800c00c:	0800c0a5 	.word	0x0800c0a5
 800c010:	0800c085 	.word	0x0800c085
 800c014:	0800c0a5 	.word	0x0800c0a5
 800c018:	0800c0a5 	.word	0x0800c0a5
 800c01c:	0800c0a5 	.word	0x0800c0a5
 800c020:	0800c0a5 	.word	0x0800c0a5
 800c024:	0800c0a5 	.word	0x0800c0a5
 800c028:	0800c0a5 	.word	0x0800c0a5
 800c02c:	0800c0a5 	.word	0x0800c0a5
 800c030:	0800c08d 	.word	0x0800c08d
 800c034:	0800c0a5 	.word	0x0800c0a5
 800c038:	0800c0a5 	.word	0x0800c0a5
 800c03c:	0800c0a5 	.word	0x0800c0a5
 800c040:	0800c0a5 	.word	0x0800c0a5
 800c044:	0800c0a5 	.word	0x0800c0a5
 800c048:	0800c0a5 	.word	0x0800c0a5
 800c04c:	0800c0a5 	.word	0x0800c0a5
 800c050:	0800c095 	.word	0x0800c095
 800c054:	0800c0a5 	.word	0x0800c0a5
 800c058:	0800c0a5 	.word	0x0800c0a5
 800c05c:	0800c0a5 	.word	0x0800c0a5
 800c060:	0800c0a5 	.word	0x0800c0a5
 800c064:	0800c0a5 	.word	0x0800c0a5
 800c068:	0800c0a5 	.word	0x0800c0a5
 800c06c:	0800c0a5 	.word	0x0800c0a5
 800c070:	0800c09d 	.word	0x0800c09d
 800c074:	2301      	movs	r3, #1
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07a:	e222      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c07c:	2304      	movs	r3, #4
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e21e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c084:	2308      	movs	r3, #8
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08a:	e21a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c08c:	2310      	movs	r3, #16
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c092:	e216      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c094:	2320      	movs	r3, #32
 800c096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09a:	e212      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c09c:	2340      	movs	r3, #64	@ 0x40
 800c09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0a2:	e20e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0a4:	2380      	movs	r3, #128	@ 0x80
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0aa:	e20a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a69      	ldr	r2, [pc, #420]	@ (800c258 <UART_SetConfig+0x33c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d130      	bne.n	800c118 <UART_SetConfig+0x1fc>
 800c0b6:	4b67      	ldr	r3, [pc, #412]	@ (800c254 <UART_SetConfig+0x338>)
 800c0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ba:	f003 0307 	and.w	r3, r3, #7
 800c0be:	2b05      	cmp	r3, #5
 800c0c0:	d826      	bhi.n	800c110 <UART_SetConfig+0x1f4>
 800c0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c8 <UART_SetConfig+0x1ac>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c0e1 	.word	0x0800c0e1
 800c0cc:	0800c0e9 	.word	0x0800c0e9
 800c0d0:	0800c0f1 	.word	0x0800c0f1
 800c0d4:	0800c0f9 	.word	0x0800c0f9
 800c0d8:	0800c101 	.word	0x0800c101
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e6:	e1ec      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e1e8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f6:	e1e4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fe:	e1e0      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c100:	2320      	movs	r3, #32
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c106:	e1dc      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c108:	2340      	movs	r3, #64	@ 0x40
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c10e:	e1d8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c110:	2380      	movs	r3, #128	@ 0x80
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c116:	e1d4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a4f      	ldr	r2, [pc, #316]	@ (800c25c <UART_SetConfig+0x340>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d130      	bne.n	800c184 <UART_SetConfig+0x268>
 800c122:	4b4c      	ldr	r3, [pc, #304]	@ (800c254 <UART_SetConfig+0x338>)
 800c124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	d826      	bhi.n	800c17c <UART_SetConfig+0x260>
 800c12e:	a201      	add	r2, pc, #4	@ (adr r2, 800c134 <UART_SetConfig+0x218>)
 800c130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c134:	0800c14d 	.word	0x0800c14d
 800c138:	0800c155 	.word	0x0800c155
 800c13c:	0800c15d 	.word	0x0800c15d
 800c140:	0800c165 	.word	0x0800c165
 800c144:	0800c16d 	.word	0x0800c16d
 800c148:	0800c175 	.word	0x0800c175
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	e1b6      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c154:	2304      	movs	r3, #4
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15a:	e1b2      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c15c:	2308      	movs	r3, #8
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c162:	e1ae      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c164:	2310      	movs	r3, #16
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16a:	e1aa      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c16c:	2320      	movs	r3, #32
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c172:	e1a6      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c174:	2340      	movs	r3, #64	@ 0x40
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17a:	e1a2      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c17c:	2380      	movs	r3, #128	@ 0x80
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c182:	e19e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a35      	ldr	r2, [pc, #212]	@ (800c260 <UART_SetConfig+0x344>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d130      	bne.n	800c1f0 <UART_SetConfig+0x2d4>
 800c18e:	4b31      	ldr	r3, [pc, #196]	@ (800c254 <UART_SetConfig+0x338>)
 800c190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c192:	f003 0307 	and.w	r3, r3, #7
 800c196:	2b05      	cmp	r3, #5
 800c198:	d826      	bhi.n	800c1e8 <UART_SetConfig+0x2cc>
 800c19a:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a0 <UART_SetConfig+0x284>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1b9 	.word	0x0800c1b9
 800c1a4:	0800c1c1 	.word	0x0800c1c1
 800c1a8:	0800c1c9 	.word	0x0800c1c9
 800c1ac:	0800c1d1 	.word	0x0800c1d1
 800c1b0:	0800c1d9 	.word	0x0800c1d9
 800c1b4:	0800c1e1 	.word	0x0800c1e1
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1be:	e180      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c6:	e17c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1c8:	2308      	movs	r3, #8
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ce:	e178      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d6:	e174      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1d8:	2320      	movs	r3, #32
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1de:	e170      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1e0:	2340      	movs	r3, #64	@ 0x40
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e6:	e16c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1e8:	2380      	movs	r3, #128	@ 0x80
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ee:	e168      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c264 <UART_SetConfig+0x348>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d142      	bne.n	800c280 <UART_SetConfig+0x364>
 800c1fa:	4b16      	ldr	r3, [pc, #88]	@ (800c254 <UART_SetConfig+0x338>)
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1fe:	f003 0307 	and.w	r3, r3, #7
 800c202:	2b05      	cmp	r3, #5
 800c204:	d838      	bhi.n	800c278 <UART_SetConfig+0x35c>
 800c206:	a201      	add	r2, pc, #4	@ (adr r2, 800c20c <UART_SetConfig+0x2f0>)
 800c208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20c:	0800c225 	.word	0x0800c225
 800c210:	0800c22d 	.word	0x0800c22d
 800c214:	0800c235 	.word	0x0800c235
 800c218:	0800c23d 	.word	0x0800c23d
 800c21c:	0800c269 	.word	0x0800c269
 800c220:	0800c271 	.word	0x0800c271
 800c224:	2300      	movs	r3, #0
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22a:	e14a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c22c:	2304      	movs	r3, #4
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c232:	e146      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c234:	2308      	movs	r3, #8
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23a:	e142      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c23c:	2310      	movs	r3, #16
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c242:	e13e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c244:	cfff69f3 	.word	0xcfff69f3
 800c248:	58000c00 	.word	0x58000c00
 800c24c:	11fff4ff 	.word	0x11fff4ff
 800c250:	40011000 	.word	0x40011000
 800c254:	58024400 	.word	0x58024400
 800c258:	40004400 	.word	0x40004400
 800c25c:	40004800 	.word	0x40004800
 800c260:	40004c00 	.word	0x40004c00
 800c264:	40005000 	.word	0x40005000
 800c268:	2320      	movs	r3, #32
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e128      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c270:	2340      	movs	r3, #64	@ 0x40
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e124      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c278:	2380      	movs	r3, #128	@ 0x80
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e120      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4acb      	ldr	r2, [pc, #812]	@ (800c5b4 <UART_SetConfig+0x698>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d176      	bne.n	800c378 <UART_SetConfig+0x45c>
 800c28a:	4bcb      	ldr	r3, [pc, #812]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c28e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c292:	2b28      	cmp	r3, #40	@ 0x28
 800c294:	d86c      	bhi.n	800c370 <UART_SetConfig+0x454>
 800c296:	a201      	add	r2, pc, #4	@ (adr r2, 800c29c <UART_SetConfig+0x380>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c341 	.word	0x0800c341
 800c2a0:	0800c371 	.word	0x0800c371
 800c2a4:	0800c371 	.word	0x0800c371
 800c2a8:	0800c371 	.word	0x0800c371
 800c2ac:	0800c371 	.word	0x0800c371
 800c2b0:	0800c371 	.word	0x0800c371
 800c2b4:	0800c371 	.word	0x0800c371
 800c2b8:	0800c371 	.word	0x0800c371
 800c2bc:	0800c349 	.word	0x0800c349
 800c2c0:	0800c371 	.word	0x0800c371
 800c2c4:	0800c371 	.word	0x0800c371
 800c2c8:	0800c371 	.word	0x0800c371
 800c2cc:	0800c371 	.word	0x0800c371
 800c2d0:	0800c371 	.word	0x0800c371
 800c2d4:	0800c371 	.word	0x0800c371
 800c2d8:	0800c371 	.word	0x0800c371
 800c2dc:	0800c351 	.word	0x0800c351
 800c2e0:	0800c371 	.word	0x0800c371
 800c2e4:	0800c371 	.word	0x0800c371
 800c2e8:	0800c371 	.word	0x0800c371
 800c2ec:	0800c371 	.word	0x0800c371
 800c2f0:	0800c371 	.word	0x0800c371
 800c2f4:	0800c371 	.word	0x0800c371
 800c2f8:	0800c371 	.word	0x0800c371
 800c2fc:	0800c359 	.word	0x0800c359
 800c300:	0800c371 	.word	0x0800c371
 800c304:	0800c371 	.word	0x0800c371
 800c308:	0800c371 	.word	0x0800c371
 800c30c:	0800c371 	.word	0x0800c371
 800c310:	0800c371 	.word	0x0800c371
 800c314:	0800c371 	.word	0x0800c371
 800c318:	0800c371 	.word	0x0800c371
 800c31c:	0800c361 	.word	0x0800c361
 800c320:	0800c371 	.word	0x0800c371
 800c324:	0800c371 	.word	0x0800c371
 800c328:	0800c371 	.word	0x0800c371
 800c32c:	0800c371 	.word	0x0800c371
 800c330:	0800c371 	.word	0x0800c371
 800c334:	0800c371 	.word	0x0800c371
 800c338:	0800c371 	.word	0x0800c371
 800c33c:	0800c369 	.word	0x0800c369
 800c340:	2301      	movs	r3, #1
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e0bc      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c348:	2304      	movs	r3, #4
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34e:	e0b8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c350:	2308      	movs	r3, #8
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c356:	e0b4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c358:	2310      	movs	r3, #16
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35e:	e0b0      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c360:	2320      	movs	r3, #32
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c366:	e0ac      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c368:	2340      	movs	r3, #64	@ 0x40
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36e:	e0a8      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c370:	2380      	movs	r3, #128	@ 0x80
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c376:	e0a4      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a8f      	ldr	r2, [pc, #572]	@ (800c5bc <UART_SetConfig+0x6a0>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d130      	bne.n	800c3e4 <UART_SetConfig+0x4c8>
 800c382:	4b8d      	ldr	r3, [pc, #564]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	d826      	bhi.n	800c3dc <UART_SetConfig+0x4c0>
 800c38e:	a201      	add	r2, pc, #4	@ (adr r2, 800c394 <UART_SetConfig+0x478>)
 800c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c3b5 	.word	0x0800c3b5
 800c39c:	0800c3bd 	.word	0x0800c3bd
 800c3a0:	0800c3c5 	.word	0x0800c3c5
 800c3a4:	0800c3cd 	.word	0x0800c3cd
 800c3a8:	0800c3d5 	.word	0x0800c3d5
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e086      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3b4:	2304      	movs	r3, #4
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e082      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3bc:	2308      	movs	r3, #8
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e07e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3c4:	2310      	movs	r3, #16
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ca:	e07a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d2:	e076      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3d4:	2340      	movs	r3, #64	@ 0x40
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3da:	e072      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3dc:	2380      	movs	r3, #128	@ 0x80
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e2:	e06e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a75      	ldr	r2, [pc, #468]	@ (800c5c0 <UART_SetConfig+0x6a4>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d130      	bne.n	800c450 <UART_SetConfig+0x534>
 800c3ee:	4b72      	ldr	r3, [pc, #456]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b05      	cmp	r3, #5
 800c3f8:	d826      	bhi.n	800c448 <UART_SetConfig+0x52c>
 800c3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c400 <UART_SetConfig+0x4e4>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c419 	.word	0x0800c419
 800c404:	0800c421 	.word	0x0800c421
 800c408:	0800c429 	.word	0x0800c429
 800c40c:	0800c431 	.word	0x0800c431
 800c410:	0800c439 	.word	0x0800c439
 800c414:	0800c441 	.word	0x0800c441
 800c418:	2300      	movs	r3, #0
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41e:	e050      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c420:	2304      	movs	r3, #4
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c426:	e04c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c428:	2308      	movs	r3, #8
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42e:	e048      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c430:	2310      	movs	r3, #16
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c436:	e044      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c438:	2320      	movs	r3, #32
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43e:	e040      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c440:	2340      	movs	r3, #64	@ 0x40
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c446:	e03c      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c448:	2380      	movs	r3, #128	@ 0x80
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44e:	e038      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a5b      	ldr	r2, [pc, #364]	@ (800c5c4 <UART_SetConfig+0x6a8>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d130      	bne.n	800c4bc <UART_SetConfig+0x5a0>
 800c45a:	4b57      	ldr	r3, [pc, #348]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c45e:	f003 0307 	and.w	r3, r3, #7
 800c462:	2b05      	cmp	r3, #5
 800c464:	d826      	bhi.n	800c4b4 <UART_SetConfig+0x598>
 800c466:	a201      	add	r2, pc, #4	@ (adr r2, 800c46c <UART_SetConfig+0x550>)
 800c468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46c:	0800c485 	.word	0x0800c485
 800c470:	0800c48d 	.word	0x0800c48d
 800c474:	0800c495 	.word	0x0800c495
 800c478:	0800c49d 	.word	0x0800c49d
 800c47c:	0800c4a5 	.word	0x0800c4a5
 800c480:	0800c4ad 	.word	0x0800c4ad
 800c484:	2302      	movs	r3, #2
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48a:	e01a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c48c:	2304      	movs	r3, #4
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c492:	e016      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c494:	2308      	movs	r3, #8
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49a:	e012      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c49c:	2310      	movs	r3, #16
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a2:	e00e      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4aa:	e00a      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4ac:	2340      	movs	r3, #64	@ 0x40
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b2:	e006      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4b4:	2380      	movs	r3, #128	@ 0x80
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ba:	e002      	b.n	800c4c2 <UART_SetConfig+0x5a6>
 800c4bc:	2380      	movs	r3, #128	@ 0x80
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a3f      	ldr	r2, [pc, #252]	@ (800c5c4 <UART_SetConfig+0x6a8>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	f040 80f8 	bne.w	800c6be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c4d2:	2b20      	cmp	r3, #32
 800c4d4:	dc46      	bgt.n	800c564 <UART_SetConfig+0x648>
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	f2c0 8082 	blt.w	800c5e0 <UART_SetConfig+0x6c4>
 800c4dc:	3b02      	subs	r3, #2
 800c4de:	2b1e      	cmp	r3, #30
 800c4e0:	d87e      	bhi.n	800c5e0 <UART_SetConfig+0x6c4>
 800c4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e8 <UART_SetConfig+0x5cc>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c56b 	.word	0x0800c56b
 800c4ec:	0800c5e1 	.word	0x0800c5e1
 800c4f0:	0800c573 	.word	0x0800c573
 800c4f4:	0800c5e1 	.word	0x0800c5e1
 800c4f8:	0800c5e1 	.word	0x0800c5e1
 800c4fc:	0800c5e1 	.word	0x0800c5e1
 800c500:	0800c583 	.word	0x0800c583
 800c504:	0800c5e1 	.word	0x0800c5e1
 800c508:	0800c5e1 	.word	0x0800c5e1
 800c50c:	0800c5e1 	.word	0x0800c5e1
 800c510:	0800c5e1 	.word	0x0800c5e1
 800c514:	0800c5e1 	.word	0x0800c5e1
 800c518:	0800c5e1 	.word	0x0800c5e1
 800c51c:	0800c5e1 	.word	0x0800c5e1
 800c520:	0800c593 	.word	0x0800c593
 800c524:	0800c5e1 	.word	0x0800c5e1
 800c528:	0800c5e1 	.word	0x0800c5e1
 800c52c:	0800c5e1 	.word	0x0800c5e1
 800c530:	0800c5e1 	.word	0x0800c5e1
 800c534:	0800c5e1 	.word	0x0800c5e1
 800c538:	0800c5e1 	.word	0x0800c5e1
 800c53c:	0800c5e1 	.word	0x0800c5e1
 800c540:	0800c5e1 	.word	0x0800c5e1
 800c544:	0800c5e1 	.word	0x0800c5e1
 800c548:	0800c5e1 	.word	0x0800c5e1
 800c54c:	0800c5e1 	.word	0x0800c5e1
 800c550:	0800c5e1 	.word	0x0800c5e1
 800c554:	0800c5e1 	.word	0x0800c5e1
 800c558:	0800c5e1 	.word	0x0800c5e1
 800c55c:	0800c5e1 	.word	0x0800c5e1
 800c560:	0800c5d3 	.word	0x0800c5d3
 800c564:	2b40      	cmp	r3, #64	@ 0x40
 800c566:	d037      	beq.n	800c5d8 <UART_SetConfig+0x6bc>
 800c568:	e03a      	b.n	800c5e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c56a:	f7fe fad7 	bl	800ab1c <HAL_RCCEx_GetD3PCLK1Freq>
 800c56e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c570:	e03c      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe fae6 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c580:	e034      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c582:	f107 0318 	add.w	r3, r7, #24
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe fc32 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c590:	e02c      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c592:	4b09      	ldr	r3, [pc, #36]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0320 	and.w	r3, r3, #32
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d016      	beq.n	800c5cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c59e:	4b06      	ldr	r3, [pc, #24]	@ (800c5b8 <UART_SetConfig+0x69c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	08db      	lsrs	r3, r3, #3
 800c5a4:	f003 0303 	and.w	r3, r3, #3
 800c5a8:	4a07      	ldr	r2, [pc, #28]	@ (800c5c8 <UART_SetConfig+0x6ac>)
 800c5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5b0:	e01c      	b.n	800c5ec <UART_SetConfig+0x6d0>
 800c5b2:	bf00      	nop
 800c5b4:	40011400 	.word	0x40011400
 800c5b8:	58024400 	.word	0x58024400
 800c5bc:	40007800 	.word	0x40007800
 800c5c0:	40007c00 	.word	0x40007c00
 800c5c4:	58000c00 	.word	0x58000c00
 800c5c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c5cc:	4b9d      	ldr	r3, [pc, #628]	@ (800c844 <UART_SetConfig+0x928>)
 800c5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5d0:	e00c      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5d2:	4b9d      	ldr	r3, [pc, #628]	@ (800c848 <UART_SetConfig+0x92c>)
 800c5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5d6:	e009      	b.n	800c5ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5de:	e005      	b.n	800c5ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c5ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 81de 	beq.w	800c9b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f8:	4a94      	ldr	r2, [pc, #592]	@ (800c84c <UART_SetConfig+0x930>)
 800c5fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5fe:	461a      	mov	r2, r3
 800c600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c602:	fbb3 f3f2 	udiv	r3, r3, r2
 800c606:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	4613      	mov	r3, r2
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	4413      	add	r3, r2
 800c612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c614:	429a      	cmp	r2, r3
 800c616:	d305      	bcc.n	800c624 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c620:	429a      	cmp	r2, r3
 800c622:	d903      	bls.n	800c62c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c62a:	e1c1      	b.n	800c9b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c62e:	2200      	movs	r2, #0
 800c630:	60bb      	str	r3, [r7, #8]
 800c632:	60fa      	str	r2, [r7, #12]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c638:	4a84      	ldr	r2, [pc, #528]	@ (800c84c <UART_SetConfig+0x930>)
 800c63a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	2200      	movs	r2, #0
 800c642:	603b      	str	r3, [r7, #0]
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c64a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c64e:	f7f3 fe9f 	bl	8000390 <__aeabi_uldivmod>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	4610      	mov	r0, r2
 800c658:	4619      	mov	r1, r3
 800c65a:	f04f 0200 	mov.w	r2, #0
 800c65e:	f04f 0300 	mov.w	r3, #0
 800c662:	020b      	lsls	r3, r1, #8
 800c664:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c668:	0202      	lsls	r2, r0, #8
 800c66a:	6979      	ldr	r1, [r7, #20]
 800c66c:	6849      	ldr	r1, [r1, #4]
 800c66e:	0849      	lsrs	r1, r1, #1
 800c670:	2000      	movs	r0, #0
 800c672:	460c      	mov	r4, r1
 800c674:	4605      	mov	r5, r0
 800c676:	eb12 0804 	adds.w	r8, r2, r4
 800c67a:	eb43 0905 	adc.w	r9, r3, r5
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	469a      	mov	sl, r3
 800c686:	4693      	mov	fp, r2
 800c688:	4652      	mov	r2, sl
 800c68a:	465b      	mov	r3, fp
 800c68c:	4640      	mov	r0, r8
 800c68e:	4649      	mov	r1, r9
 800c690:	f7f3 fe7e 	bl	8000390 <__aeabi_uldivmod>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4613      	mov	r3, r2
 800c69a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c6a2:	d308      	bcc.n	800c6b6 <UART_SetConfig+0x79a>
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6aa:	d204      	bcs.n	800c6b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6b2:	60da      	str	r2, [r3, #12]
 800c6b4:	e17c      	b.n	800c9b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c6bc:	e178      	b.n	800c9b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6c6:	f040 80c5 	bne.w	800c854 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c6ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c6ce:	2b20      	cmp	r3, #32
 800c6d0:	dc48      	bgt.n	800c764 <UART_SetConfig+0x848>
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	db7b      	blt.n	800c7ce <UART_SetConfig+0x8b2>
 800c6d6:	2b20      	cmp	r3, #32
 800c6d8:	d879      	bhi.n	800c7ce <UART_SetConfig+0x8b2>
 800c6da:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e0 <UART_SetConfig+0x7c4>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c76b 	.word	0x0800c76b
 800c6e4:	0800c773 	.word	0x0800c773
 800c6e8:	0800c7cf 	.word	0x0800c7cf
 800c6ec:	0800c7cf 	.word	0x0800c7cf
 800c6f0:	0800c77b 	.word	0x0800c77b
 800c6f4:	0800c7cf 	.word	0x0800c7cf
 800c6f8:	0800c7cf 	.word	0x0800c7cf
 800c6fc:	0800c7cf 	.word	0x0800c7cf
 800c700:	0800c78b 	.word	0x0800c78b
 800c704:	0800c7cf 	.word	0x0800c7cf
 800c708:	0800c7cf 	.word	0x0800c7cf
 800c70c:	0800c7cf 	.word	0x0800c7cf
 800c710:	0800c7cf 	.word	0x0800c7cf
 800c714:	0800c7cf 	.word	0x0800c7cf
 800c718:	0800c7cf 	.word	0x0800c7cf
 800c71c:	0800c7cf 	.word	0x0800c7cf
 800c720:	0800c79b 	.word	0x0800c79b
 800c724:	0800c7cf 	.word	0x0800c7cf
 800c728:	0800c7cf 	.word	0x0800c7cf
 800c72c:	0800c7cf 	.word	0x0800c7cf
 800c730:	0800c7cf 	.word	0x0800c7cf
 800c734:	0800c7cf 	.word	0x0800c7cf
 800c738:	0800c7cf 	.word	0x0800c7cf
 800c73c:	0800c7cf 	.word	0x0800c7cf
 800c740:	0800c7cf 	.word	0x0800c7cf
 800c744:	0800c7cf 	.word	0x0800c7cf
 800c748:	0800c7cf 	.word	0x0800c7cf
 800c74c:	0800c7cf 	.word	0x0800c7cf
 800c750:	0800c7cf 	.word	0x0800c7cf
 800c754:	0800c7cf 	.word	0x0800c7cf
 800c758:	0800c7cf 	.word	0x0800c7cf
 800c75c:	0800c7cf 	.word	0x0800c7cf
 800c760:	0800c7c1 	.word	0x0800c7c1
 800c764:	2b40      	cmp	r3, #64	@ 0x40
 800c766:	d02e      	beq.n	800c7c6 <UART_SetConfig+0x8aa>
 800c768:	e031      	b.n	800c7ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c76a:	f7fc fa21 	bl	8008bb0 <HAL_RCC_GetPCLK1Freq>
 800c76e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c770:	e033      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c772:	f7fc fa33 	bl	8008bdc <HAL_RCC_GetPCLK2Freq>
 800c776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c778:	e02f      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c77a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fe f9e2 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c788:	e027      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c78a:	f107 0318 	add.w	r3, r7, #24
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fe fb2e 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c798:	e01f      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c79a:	4b2d      	ldr	r3, [pc, #180]	@ (800c850 <UART_SetConfig+0x934>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 0320 	and.w	r3, r3, #32
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d009      	beq.n	800c7ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800c850 <UART_SetConfig+0x934>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	08db      	lsrs	r3, r3, #3
 800c7ac:	f003 0303 	and.w	r3, r3, #3
 800c7b0:	4a24      	ldr	r2, [pc, #144]	@ (800c844 <UART_SetConfig+0x928>)
 800c7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7b8:	e00f      	b.n	800c7da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c7ba:	4b22      	ldr	r3, [pc, #136]	@ (800c844 <UART_SetConfig+0x928>)
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7be:	e00c      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7c0:	4b21      	ldr	r3, [pc, #132]	@ (800c848 <UART_SetConfig+0x92c>)
 800c7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7c4:	e009      	b.n	800c7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7cc:	e005      	b.n	800c7da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c7d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 80e7 	beq.w	800c9b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e6:	4a19      	ldr	r2, [pc, #100]	@ (800c84c <UART_SetConfig+0x930>)
 800c7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7f4:	005a      	lsls	r2, r3, #1
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	085b      	lsrs	r3, r3, #1
 800c7fc:	441a      	add	r2, r3
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	fbb2 f3f3 	udiv	r3, r2, r3
 800c806:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80a:	2b0f      	cmp	r3, #15
 800c80c:	d916      	bls.n	800c83c <UART_SetConfig+0x920>
 800c80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c814:	d212      	bcs.n	800c83c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c818:	b29b      	uxth	r3, r3
 800c81a:	f023 030f 	bic.w	r3, r3, #15
 800c81e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	085b      	lsrs	r3, r3, #1
 800c824:	b29b      	uxth	r3, r3
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c82e:	4313      	orrs	r3, r2
 800c830:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c838:	60da      	str	r2, [r3, #12]
 800c83a:	e0b9      	b.n	800c9b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c842:	e0b5      	b.n	800c9b0 <UART_SetConfig+0xa94>
 800c844:	03d09000 	.word	0x03d09000
 800c848:	003d0900 	.word	0x003d0900
 800c84c:	0801301c 	.word	0x0801301c
 800c850:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c854:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c858:	2b20      	cmp	r3, #32
 800c85a:	dc49      	bgt.n	800c8f0 <UART_SetConfig+0x9d4>
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	db7c      	blt.n	800c95a <UART_SetConfig+0xa3e>
 800c860:	2b20      	cmp	r3, #32
 800c862:	d87a      	bhi.n	800c95a <UART_SetConfig+0xa3e>
 800c864:	a201      	add	r2, pc, #4	@ (adr r2, 800c86c <UART_SetConfig+0x950>)
 800c866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86a:	bf00      	nop
 800c86c:	0800c8f7 	.word	0x0800c8f7
 800c870:	0800c8ff 	.word	0x0800c8ff
 800c874:	0800c95b 	.word	0x0800c95b
 800c878:	0800c95b 	.word	0x0800c95b
 800c87c:	0800c907 	.word	0x0800c907
 800c880:	0800c95b 	.word	0x0800c95b
 800c884:	0800c95b 	.word	0x0800c95b
 800c888:	0800c95b 	.word	0x0800c95b
 800c88c:	0800c917 	.word	0x0800c917
 800c890:	0800c95b 	.word	0x0800c95b
 800c894:	0800c95b 	.word	0x0800c95b
 800c898:	0800c95b 	.word	0x0800c95b
 800c89c:	0800c95b 	.word	0x0800c95b
 800c8a0:	0800c95b 	.word	0x0800c95b
 800c8a4:	0800c95b 	.word	0x0800c95b
 800c8a8:	0800c95b 	.word	0x0800c95b
 800c8ac:	0800c927 	.word	0x0800c927
 800c8b0:	0800c95b 	.word	0x0800c95b
 800c8b4:	0800c95b 	.word	0x0800c95b
 800c8b8:	0800c95b 	.word	0x0800c95b
 800c8bc:	0800c95b 	.word	0x0800c95b
 800c8c0:	0800c95b 	.word	0x0800c95b
 800c8c4:	0800c95b 	.word	0x0800c95b
 800c8c8:	0800c95b 	.word	0x0800c95b
 800c8cc:	0800c95b 	.word	0x0800c95b
 800c8d0:	0800c95b 	.word	0x0800c95b
 800c8d4:	0800c95b 	.word	0x0800c95b
 800c8d8:	0800c95b 	.word	0x0800c95b
 800c8dc:	0800c95b 	.word	0x0800c95b
 800c8e0:	0800c95b 	.word	0x0800c95b
 800c8e4:	0800c95b 	.word	0x0800c95b
 800c8e8:	0800c95b 	.word	0x0800c95b
 800c8ec:	0800c94d 	.word	0x0800c94d
 800c8f0:	2b40      	cmp	r3, #64	@ 0x40
 800c8f2:	d02e      	beq.n	800c952 <UART_SetConfig+0xa36>
 800c8f4:	e031      	b.n	800c95a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8f6:	f7fc f95b 	bl	8008bb0 <HAL_RCC_GetPCLK1Freq>
 800c8fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8fc:	e033      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8fe:	f7fc f96d 	bl	8008bdc <HAL_RCC_GetPCLK2Freq>
 800c902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c904:	e02f      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe f91c 	bl	800ab48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c914:	e027      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c916:	f107 0318 	add.w	r3, r7, #24
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fa68 	bl	800adf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c924:	e01f      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c926:	4b2d      	ldr	r3, [pc, #180]	@ (800c9dc <UART_SetConfig+0xac0>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 0320 	and.w	r3, r3, #32
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c932:	4b2a      	ldr	r3, [pc, #168]	@ (800c9dc <UART_SetConfig+0xac0>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	08db      	lsrs	r3, r3, #3
 800c938:	f003 0303 	and.w	r3, r3, #3
 800c93c:	4a28      	ldr	r2, [pc, #160]	@ (800c9e0 <UART_SetConfig+0xac4>)
 800c93e:	fa22 f303 	lsr.w	r3, r2, r3
 800c942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c944:	e00f      	b.n	800c966 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c946:	4b26      	ldr	r3, [pc, #152]	@ (800c9e0 <UART_SetConfig+0xac4>)
 800c948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c94a:	e00c      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c94c:	4b25      	ldr	r3, [pc, #148]	@ (800c9e4 <UART_SetConfig+0xac8>)
 800c94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c950:	e009      	b.n	800c966 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c958:	e005      	b.n	800c966 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c95a:	2300      	movs	r3, #0
 800c95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c964:	bf00      	nop
    }

    if (pclk != 0U)
 800c966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d021      	beq.n	800c9b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c970:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e8 <UART_SetConfig+0xacc>)
 800c972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c976:	461a      	mov	r2, r3
 800c978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	085b      	lsrs	r3, r3, #1
 800c984:	441a      	add	r2, r3
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c98e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c992:	2b0f      	cmp	r3, #15
 800c994:	d909      	bls.n	800c9aa <UART_SetConfig+0xa8e>
 800c996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c99c:	d205      	bcs.n	800c9aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	60da      	str	r2, [r3, #12]
 800c9a8:	e002      	b.n	800c9b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c9cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3748      	adds	r7, #72	@ 0x48
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9da:	bf00      	nop
 800c9dc:	58024400 	.word	0x58024400
 800c9e0:	03d09000 	.word	0x03d09000
 800c9e4:	003d0900 	.word	0x003d0900
 800c9e8:	0801301c 	.word	0x0801301c

0800c9ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	430a      	orrs	r2, r1
 800ca14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1a:	f003 0302 	and.w	r3, r3, #2
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00a      	beq.n	800ca38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	430a      	orrs	r2, r1
 800ca36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3c:	f003 0304 	and.w	r3, r3, #4
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00a      	beq.n	800ca5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	430a      	orrs	r2, r1
 800ca58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5e:	f003 0308 	and.w	r3, r3, #8
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca80:	f003 0310 	and.w	r3, r3, #16
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00a      	beq.n	800ca9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	430a      	orrs	r2, r1
 800ca9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa2:	f003 0320 	and.w	r3, r3, #32
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	430a      	orrs	r2, r1
 800cabe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01a      	beq.n	800cb02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	430a      	orrs	r2, r1
 800cae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caea:	d10a      	bne.n	800cb02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	430a      	orrs	r2, r1
 800cb22:	605a      	str	r2, [r3, #4]
  }
}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b098      	sub	sp, #96	@ 0x60
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb40:	f7f6 f82a 	bl	8002b98 <HAL_GetTick>
 800cb44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0308 	and.w	r3, r3, #8
 800cb50:	2b08      	cmp	r3, #8
 800cb52:	d12f      	bne.n	800cbb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f88e 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d022      	beq.n	800cbb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb82:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e6      	bne.n	800cb6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2220      	movs	r2, #32
 800cba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e063      	b.n	800cc7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0304 	and.w	r3, r3, #4
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d149      	bne.n	800cc56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f857 	bl	800cc84 <UART_WaitOnFlagUntilTimeout>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d03c      	beq.n	800cc56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	623b      	str	r3, [r7, #32]
   return(result);
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e6      	bne.n	800cbdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3308      	adds	r3, #8
 800cc14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	e853 3f00 	ldrex	r3, [r3]
 800cc1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f023 0301 	bic.w	r3, r3, #1
 800cc24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc2e:	61fa      	str	r2, [r7, #28]
 800cc30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	69b9      	ldr	r1, [r7, #24]
 800cc34:	69fa      	ldr	r2, [r7, #28]
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	617b      	str	r3, [r7, #20]
   return(result);
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e5      	bne.n	800cc0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2220      	movs	r2, #32
 800cc46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc52:	2303      	movs	r3, #3
 800cc54:	e012      	b.n	800cc7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2220      	movs	r2, #32
 800cc62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3758      	adds	r7, #88	@ 0x58
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	4613      	mov	r3, r2
 800cc92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc94:	e049      	b.n	800cd2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc9c:	d045      	beq.n	800cd2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc9e:	f7f5 ff7b 	bl	8002b98 <HAL_GetTick>
 800cca2:	4602      	mov	r2, r0
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d302      	bcc.n	800ccb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e048      	b.n	800cd4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0304 	and.w	r3, r3, #4
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d031      	beq.n	800cd2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	69db      	ldr	r3, [r3, #28]
 800cccc:	f003 0308 	and.w	r3, r3, #8
 800ccd0:	2b08      	cmp	r3, #8
 800ccd2:	d110      	bne.n	800ccf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2208      	movs	r2, #8
 800ccda:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f000 f839 	bl	800cd54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2208      	movs	r2, #8
 800cce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e029      	b.n	800cd4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	69db      	ldr	r3, [r3, #28]
 800ccfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd04:	d111      	bne.n	800cd2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f000 f81f 	bl	800cd54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cd26:	2303      	movs	r3, #3
 800cd28:	e00f      	b.n	800cd4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	69da      	ldr	r2, [r3, #28]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	4013      	ands	r3, r2
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	bf0c      	ite	eq
 800cd3a:	2301      	moveq	r3, #1
 800cd3c:	2300      	movne	r3, #0
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	461a      	mov	r2, r3
 800cd42:	79fb      	ldrb	r3, [r7, #7]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d0a6      	beq.n	800cc96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
	...

0800cd54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b095      	sub	sp, #84	@ 0x54
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd64:	e853 3f00 	ldrex	r3, [r3]
 800cd68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd82:	e841 2300 	strex	r3, r2, [r1]
 800cd86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1e6      	bne.n	800cd5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3308      	adds	r3, #8
 800cd94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	e853 3f00 	ldrex	r3, [r3]
 800cd9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd9e:	69fa      	ldr	r2, [r7, #28]
 800cda0:	4b1e      	ldr	r3, [pc, #120]	@ (800ce1c <UART_EndRxTransfer+0xc8>)
 800cda2:	4013      	ands	r3, r2
 800cda4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3308      	adds	r3, #8
 800cdac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cdb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdb6:	e841 2300 	strex	r3, r2, [r1]
 800cdba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e5      	bne.n	800cd8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d118      	bne.n	800cdfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	e853 3f00 	ldrex	r3, [r3]
 800cdd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f023 0310 	bic.w	r3, r3, #16
 800cdde:	647b      	str	r3, [r7, #68]	@ 0x44
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	461a      	mov	r2, r3
 800cde6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cde8:	61bb      	str	r3, [r7, #24]
 800cdea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdec:	6979      	ldr	r1, [r7, #20]
 800cdee:	69ba      	ldr	r2, [r7, #24]
 800cdf0:	e841 2300 	strex	r3, r2, [r1]
 800cdf4:	613b      	str	r3, [r7, #16]
   return(result);
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1e6      	bne.n	800cdca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2220      	movs	r2, #32
 800ce00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ce10:	bf00      	nop
 800ce12:	3754      	adds	r7, #84	@ 0x54
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr
 800ce1c:	effffffe 	.word	0xeffffffe

0800ce20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d101      	bne.n	800ce36 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce32:	2302      	movs	r3, #2
 800ce34:	e027      	b.n	800ce86 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2224      	movs	r2, #36	@ 0x24
 800ce42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f022 0201 	bic.w	r2, r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ce64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2220      	movs	r2, #32
 800ce78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr

0800ce92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d101      	bne.n	800ceaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cea6:	2302      	movs	r3, #2
 800cea8:	e02d      	b.n	800cf06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2224      	movs	r2, #36	@ 0x24
 800ceb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f022 0201 	bic.w	r2, r2, #1
 800ced0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f850 	bl	800cf8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2220      	movs	r2, #32
 800cef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d101      	bne.n	800cf26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf22:	2302      	movs	r3, #2
 800cf24:	e02d      	b.n	800cf82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2224      	movs	r2, #36	@ 0x24
 800cf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f022 0201 	bic.w	r2, r2, #1
 800cf4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f812 	bl	800cf8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2220      	movs	r2, #32
 800cf74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
	...

0800cf8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d108      	bne.n	800cfae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfac:	e031      	b.n	800d012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfae:	2310      	movs	r3, #16
 800cfb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfb2:	2310      	movs	r3, #16
 800cfb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	0e5b      	lsrs	r3, r3, #25
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	f003 0307 	and.w	r3, r3, #7
 800cfc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	0f5b      	lsrs	r3, r3, #29
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	f003 0307 	and.w	r3, r3, #7
 800cfd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfd6:	7bbb      	ldrb	r3, [r7, #14]
 800cfd8:	7b3a      	ldrb	r2, [r7, #12]
 800cfda:	4911      	ldr	r1, [pc, #68]	@ (800d020 <UARTEx_SetNbDataToProcess+0x94>)
 800cfdc:	5c8a      	ldrb	r2, [r1, r2]
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cfe2:	7b3a      	ldrb	r2, [r7, #12]
 800cfe4:	490f      	ldr	r1, [pc, #60]	@ (800d024 <UARTEx_SetNbDataToProcess+0x98>)
 800cfe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
 800cff6:	7b7a      	ldrb	r2, [r7, #13]
 800cff8:	4909      	ldr	r1, [pc, #36]	@ (800d020 <UARTEx_SetNbDataToProcess+0x94>)
 800cffa:	5c8a      	ldrb	r2, [r1, r2]
 800cffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d000:	7b7a      	ldrb	r2, [r7, #13]
 800d002:	4908      	ldr	r1, [pc, #32]	@ (800d024 <UARTEx_SetNbDataToProcess+0x98>)
 800d004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d006:	fb93 f3f2 	sdiv	r3, r3, r2
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d012:	bf00      	nop
 800d014:	3714      	adds	r7, #20
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	08013034 	.word	0x08013034
 800d024:	0801303c 	.word	0x0801303c

0800d028 <std>:
 800d028:	2300      	movs	r3, #0
 800d02a:	b510      	push	{r4, lr}
 800d02c:	4604      	mov	r4, r0
 800d02e:	e9c0 3300 	strd	r3, r3, [r0]
 800d032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d036:	6083      	str	r3, [r0, #8]
 800d038:	8181      	strh	r1, [r0, #12]
 800d03a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d03c:	81c2      	strh	r2, [r0, #14]
 800d03e:	6183      	str	r3, [r0, #24]
 800d040:	4619      	mov	r1, r3
 800d042:	2208      	movs	r2, #8
 800d044:	305c      	adds	r0, #92	@ 0x5c
 800d046:	f000 f914 	bl	800d272 <memset>
 800d04a:	4b0d      	ldr	r3, [pc, #52]	@ (800d080 <std+0x58>)
 800d04c:	6223      	str	r3, [r4, #32]
 800d04e:	4b0d      	ldr	r3, [pc, #52]	@ (800d084 <std+0x5c>)
 800d050:	6263      	str	r3, [r4, #36]	@ 0x24
 800d052:	4b0d      	ldr	r3, [pc, #52]	@ (800d088 <std+0x60>)
 800d054:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d056:	4b0d      	ldr	r3, [pc, #52]	@ (800d08c <std+0x64>)
 800d058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d05a:	4b0d      	ldr	r3, [pc, #52]	@ (800d090 <std+0x68>)
 800d05c:	61e4      	str	r4, [r4, #28]
 800d05e:	429c      	cmp	r4, r3
 800d060:	d006      	beq.n	800d070 <std+0x48>
 800d062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d066:	4294      	cmp	r4, r2
 800d068:	d002      	beq.n	800d070 <std+0x48>
 800d06a:	33d0      	adds	r3, #208	@ 0xd0
 800d06c:	429c      	cmp	r4, r3
 800d06e:	d105      	bne.n	800d07c <std+0x54>
 800d070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d078:	f000 b974 	b.w	800d364 <__retarget_lock_init_recursive>
 800d07c:	bd10      	pop	{r4, pc}
 800d07e:	bf00      	nop
 800d080:	0800d1ed 	.word	0x0800d1ed
 800d084:	0800d20f 	.word	0x0800d20f
 800d088:	0800d247 	.word	0x0800d247
 800d08c:	0800d26b 	.word	0x0800d26b
 800d090:	2402508c 	.word	0x2402508c

0800d094 <stdio_exit_handler>:
 800d094:	4a02      	ldr	r2, [pc, #8]	@ (800d0a0 <stdio_exit_handler+0xc>)
 800d096:	4903      	ldr	r1, [pc, #12]	@ (800d0a4 <stdio_exit_handler+0x10>)
 800d098:	4803      	ldr	r0, [pc, #12]	@ (800d0a8 <stdio_exit_handler+0x14>)
 800d09a:	f000 b869 	b.w	800d170 <_fwalk_sglue>
 800d09e:	bf00      	nop
 800d0a0:	24000028 	.word	0x24000028
 800d0a4:	0800ed69 	.word	0x0800ed69
 800d0a8:	24000038 	.word	0x24000038

0800d0ac <cleanup_stdio>:
 800d0ac:	6841      	ldr	r1, [r0, #4]
 800d0ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e0 <cleanup_stdio+0x34>)
 800d0b0:	4299      	cmp	r1, r3
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	d001      	beq.n	800d0bc <cleanup_stdio+0x10>
 800d0b8:	f001 fe56 	bl	800ed68 <_fclose_r>
 800d0bc:	68a1      	ldr	r1, [r4, #8]
 800d0be:	4b09      	ldr	r3, [pc, #36]	@ (800d0e4 <cleanup_stdio+0x38>)
 800d0c0:	4299      	cmp	r1, r3
 800d0c2:	d002      	beq.n	800d0ca <cleanup_stdio+0x1e>
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f001 fe4f 	bl	800ed68 <_fclose_r>
 800d0ca:	68e1      	ldr	r1, [r4, #12]
 800d0cc:	4b06      	ldr	r3, [pc, #24]	@ (800d0e8 <cleanup_stdio+0x3c>)
 800d0ce:	4299      	cmp	r1, r3
 800d0d0:	d004      	beq.n	800d0dc <cleanup_stdio+0x30>
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0d8:	f001 be46 	b.w	800ed68 <_fclose_r>
 800d0dc:	bd10      	pop	{r4, pc}
 800d0de:	bf00      	nop
 800d0e0:	2402508c 	.word	0x2402508c
 800d0e4:	240250f4 	.word	0x240250f4
 800d0e8:	2402515c 	.word	0x2402515c

0800d0ec <global_stdio_init.part.0>:
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d11c <global_stdio_init.part.0+0x30>)
 800d0f0:	4c0b      	ldr	r4, [pc, #44]	@ (800d120 <global_stdio_init.part.0+0x34>)
 800d0f2:	4a0c      	ldr	r2, [pc, #48]	@ (800d124 <global_stdio_init.part.0+0x38>)
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	2104      	movs	r1, #4
 800d0fc:	f7ff ff94 	bl	800d028 <std>
 800d100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d104:	2201      	movs	r2, #1
 800d106:	2109      	movs	r1, #9
 800d108:	f7ff ff8e 	bl	800d028 <std>
 800d10c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d110:	2202      	movs	r2, #2
 800d112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d116:	2112      	movs	r1, #18
 800d118:	f7ff bf86 	b.w	800d028 <std>
 800d11c:	240251c4 	.word	0x240251c4
 800d120:	2402508c 	.word	0x2402508c
 800d124:	0800d095 	.word	0x0800d095

0800d128 <__sfp_lock_acquire>:
 800d128:	4801      	ldr	r0, [pc, #4]	@ (800d130 <__sfp_lock_acquire+0x8>)
 800d12a:	f000 b91d 	b.w	800d368 <__retarget_lock_acquire_recursive>
 800d12e:	bf00      	nop
 800d130:	240251ce 	.word	0x240251ce

0800d134 <__sfp_lock_release>:
 800d134:	4801      	ldr	r0, [pc, #4]	@ (800d13c <__sfp_lock_release+0x8>)
 800d136:	f000 b918 	b.w	800d36a <__retarget_lock_release_recursive>
 800d13a:	bf00      	nop
 800d13c:	240251ce 	.word	0x240251ce

0800d140 <__sinit>:
 800d140:	b510      	push	{r4, lr}
 800d142:	4604      	mov	r4, r0
 800d144:	f7ff fff0 	bl	800d128 <__sfp_lock_acquire>
 800d148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d14a:	b11b      	cbz	r3, 800d154 <__sinit+0x14>
 800d14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d150:	f7ff bff0 	b.w	800d134 <__sfp_lock_release>
 800d154:	4b04      	ldr	r3, [pc, #16]	@ (800d168 <__sinit+0x28>)
 800d156:	6363      	str	r3, [r4, #52]	@ 0x34
 800d158:	4b04      	ldr	r3, [pc, #16]	@ (800d16c <__sinit+0x2c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f5      	bne.n	800d14c <__sinit+0xc>
 800d160:	f7ff ffc4 	bl	800d0ec <global_stdio_init.part.0>
 800d164:	e7f2      	b.n	800d14c <__sinit+0xc>
 800d166:	bf00      	nop
 800d168:	0800d0ad 	.word	0x0800d0ad
 800d16c:	240251c4 	.word	0x240251c4

0800d170 <_fwalk_sglue>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	4607      	mov	r7, r0
 800d176:	4688      	mov	r8, r1
 800d178:	4614      	mov	r4, r2
 800d17a:	2600      	movs	r6, #0
 800d17c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d180:	f1b9 0901 	subs.w	r9, r9, #1
 800d184:	d505      	bpl.n	800d192 <_fwalk_sglue+0x22>
 800d186:	6824      	ldr	r4, [r4, #0]
 800d188:	2c00      	cmp	r4, #0
 800d18a:	d1f7      	bne.n	800d17c <_fwalk_sglue+0xc>
 800d18c:	4630      	mov	r0, r6
 800d18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d192:	89ab      	ldrh	r3, [r5, #12]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d907      	bls.n	800d1a8 <_fwalk_sglue+0x38>
 800d198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d19c:	3301      	adds	r3, #1
 800d19e:	d003      	beq.n	800d1a8 <_fwalk_sglue+0x38>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	47c0      	blx	r8
 800d1a6:	4306      	orrs	r6, r0
 800d1a8:	3568      	adds	r5, #104	@ 0x68
 800d1aa:	e7e9      	b.n	800d180 <_fwalk_sglue+0x10>

0800d1ac <sprintf>:
 800d1ac:	b40e      	push	{r1, r2, r3}
 800d1ae:	b500      	push	{lr}
 800d1b0:	b09c      	sub	sp, #112	@ 0x70
 800d1b2:	ab1d      	add	r3, sp, #116	@ 0x74
 800d1b4:	9002      	str	r0, [sp, #8]
 800d1b6:	9006      	str	r0, [sp, #24]
 800d1b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d1bc:	4809      	ldr	r0, [pc, #36]	@ (800d1e4 <sprintf+0x38>)
 800d1be:	9107      	str	r1, [sp, #28]
 800d1c0:	9104      	str	r1, [sp, #16]
 800d1c2:	4909      	ldr	r1, [pc, #36]	@ (800d1e8 <sprintf+0x3c>)
 800d1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c8:	9105      	str	r1, [sp, #20]
 800d1ca:	6800      	ldr	r0, [r0, #0]
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	a902      	add	r1, sp, #8
 800d1d0:	f000 fc46 	bl	800da60 <_svfprintf_r>
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	701a      	strb	r2, [r3, #0]
 800d1da:	b01c      	add	sp, #112	@ 0x70
 800d1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1e0:	b003      	add	sp, #12
 800d1e2:	4770      	bx	lr
 800d1e4:	24000034 	.word	0x24000034
 800d1e8:	ffff0208 	.word	0xffff0208

0800d1ec <__sread>:
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f4:	f000 f868 	bl	800d2c8 <_read_r>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	bfab      	itete	ge
 800d1fc:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800d1fe:	89a3      	ldrhlt	r3, [r4, #12]
 800d200:	181b      	addge	r3, r3, r0
 800d202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d206:	bfac      	ite	ge
 800d208:	6523      	strge	r3, [r4, #80]	@ 0x50
 800d20a:	81a3      	strhlt	r3, [r4, #12]
 800d20c:	bd10      	pop	{r4, pc}

0800d20e <__swrite>:
 800d20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d212:	461f      	mov	r7, r3
 800d214:	898b      	ldrh	r3, [r1, #12]
 800d216:	05db      	lsls	r3, r3, #23
 800d218:	4605      	mov	r5, r0
 800d21a:	460c      	mov	r4, r1
 800d21c:	4616      	mov	r6, r2
 800d21e:	d505      	bpl.n	800d22c <__swrite+0x1e>
 800d220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d224:	2302      	movs	r3, #2
 800d226:	2200      	movs	r2, #0
 800d228:	f000 f83c 	bl	800d2a4 <_lseek_r>
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	4632      	mov	r2, r6
 800d23a:	463b      	mov	r3, r7
 800d23c:	4628      	mov	r0, r5
 800d23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d242:	f000 b853 	b.w	800d2ec <_write_r>

0800d246 <__sseek>:
 800d246:	b510      	push	{r4, lr}
 800d248:	460c      	mov	r4, r1
 800d24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d24e:	f000 f829 	bl	800d2a4 <_lseek_r>
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	bf15      	itete	ne
 800d258:	6520      	strne	r0, [r4, #80]	@ 0x50
 800d25a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d25e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d262:	81a3      	strheq	r3, [r4, #12]
 800d264:	bf18      	it	ne
 800d266:	81a3      	strhne	r3, [r4, #12]
 800d268:	bd10      	pop	{r4, pc}

0800d26a <__sclose>:
 800d26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d26e:	f000 b809 	b.w	800d284 <_close_r>

0800d272 <memset>:
 800d272:	4402      	add	r2, r0
 800d274:	4603      	mov	r3, r0
 800d276:	4293      	cmp	r3, r2
 800d278:	d100      	bne.n	800d27c <memset+0xa>
 800d27a:	4770      	bx	lr
 800d27c:	f803 1b01 	strb.w	r1, [r3], #1
 800d280:	e7f9      	b.n	800d276 <memset+0x4>
	...

0800d284 <_close_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	4d06      	ldr	r5, [pc, #24]	@ (800d2a0 <_close_r+0x1c>)
 800d288:	2300      	movs	r3, #0
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	602b      	str	r3, [r5, #0]
 800d290:	f7f5 f968 	bl	8002564 <_close>
 800d294:	1c43      	adds	r3, r0, #1
 800d296:	d102      	bne.n	800d29e <_close_r+0x1a>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	b103      	cbz	r3, 800d29e <_close_r+0x1a>
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	240251c8 	.word	0x240251c8

0800d2a4 <_lseek_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4d07      	ldr	r5, [pc, #28]	@ (800d2c4 <_lseek_r+0x20>)
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	4608      	mov	r0, r1
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	602a      	str	r2, [r5, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f7f5 f97d 	bl	80025b2 <_lseek>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d102      	bne.n	800d2c2 <_lseek_r+0x1e>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	b103      	cbz	r3, 800d2c2 <_lseek_r+0x1e>
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	240251c8 	.word	0x240251c8

0800d2c8 <_read_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d07      	ldr	r5, [pc, #28]	@ (800d2e8 <_read_r+0x20>)
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	602a      	str	r2, [r5, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	f7f5 f90b 	bl	80024f2 <_read>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_read_r+0x1e>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_read_r+0x1e>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	240251c8 	.word	0x240251c8

0800d2ec <_write_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d07      	ldr	r5, [pc, #28]	@ (800d30c <_write_r+0x20>)
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	4608      	mov	r0, r1
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	602a      	str	r2, [r5, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f7f5 f916 	bl	800252c <_write>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d102      	bne.n	800d30a <_write_r+0x1e>
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	b103      	cbz	r3, 800d30a <_write_r+0x1e>
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	240251c8 	.word	0x240251c8

0800d310 <__errno>:
 800d310:	4b01      	ldr	r3, [pc, #4]	@ (800d318 <__errno+0x8>)
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	24000034 	.word	0x24000034

0800d31c <__libc_init_array>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4d0d      	ldr	r5, [pc, #52]	@ (800d354 <__libc_init_array+0x38>)
 800d320:	4c0d      	ldr	r4, [pc, #52]	@ (800d358 <__libc_init_array+0x3c>)
 800d322:	1b64      	subs	r4, r4, r5
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	2600      	movs	r6, #0
 800d328:	42a6      	cmp	r6, r4
 800d32a:	d109      	bne.n	800d340 <__libc_init_array+0x24>
 800d32c:	4d0b      	ldr	r5, [pc, #44]	@ (800d35c <__libc_init_array+0x40>)
 800d32e:	4c0c      	ldr	r4, [pc, #48]	@ (800d360 <__libc_init_array+0x44>)
 800d330:	f005 fe0c 	bl	8012f4c <_init>
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	2600      	movs	r6, #0
 800d33a:	42a6      	cmp	r6, r4
 800d33c:	d105      	bne.n	800d34a <__libc_init_array+0x2e>
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	f855 3b04 	ldr.w	r3, [r5], #4
 800d344:	4798      	blx	r3
 800d346:	3601      	adds	r6, #1
 800d348:	e7ee      	b.n	800d328 <__libc_init_array+0xc>
 800d34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34e:	4798      	blx	r3
 800d350:	3601      	adds	r6, #1
 800d352:	e7f2      	b.n	800d33a <__libc_init_array+0x1e>
 800d354:	080156f8 	.word	0x080156f8
 800d358:	080156f8 	.word	0x080156f8
 800d35c:	080156f8 	.word	0x080156f8
 800d360:	08015700 	.word	0x08015700

0800d364 <__retarget_lock_init_recursive>:
 800d364:	4770      	bx	lr

0800d366 <__retarget_lock_close_recursive>:
 800d366:	4770      	bx	lr

0800d368 <__retarget_lock_acquire_recursive>:
 800d368:	4770      	bx	lr

0800d36a <__retarget_lock_release_recursive>:
 800d36a:	4770      	bx	lr

0800d36c <memcpy>:
 800d36c:	440a      	add	r2, r1
 800d36e:	4291      	cmp	r1, r2
 800d370:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d374:	d100      	bne.n	800d378 <memcpy+0xc>
 800d376:	4770      	bx	lr
 800d378:	b510      	push	{r4, lr}
 800d37a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d37e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d382:	4291      	cmp	r1, r2
 800d384:	d1f9      	bne.n	800d37a <memcpy+0xe>
 800d386:	bd10      	pop	{r4, pc}

0800d388 <register_fini>:
 800d388:	4b02      	ldr	r3, [pc, #8]	@ (800d394 <register_fini+0xc>)
 800d38a:	b113      	cbz	r3, 800d392 <register_fini+0xa>
 800d38c:	4802      	ldr	r0, [pc, #8]	@ (800d398 <register_fini+0x10>)
 800d38e:	f000 b805 	b.w	800d39c <atexit>
 800d392:	4770      	bx	lr
 800d394:	00000000 	.word	0x00000000
 800d398:	0800efbd 	.word	0x0800efbd

0800d39c <atexit>:
 800d39c:	2300      	movs	r3, #0
 800d39e:	4601      	mov	r1, r0
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f001 be64 	b.w	800f070 <__register_exitproc>

0800d3a8 <_malloc_trim_r>:
 800d3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3ac:	4606      	mov	r6, r0
 800d3ae:	2008      	movs	r0, #8
 800d3b0:	4689      	mov	r9, r1
 800d3b2:	f001 fe17 	bl	800efe4 <sysconf>
 800d3b6:	4f24      	ldr	r7, [pc, #144]	@ (800d448 <_malloc_trim_r+0xa0>)
 800d3b8:	4680      	mov	r8, r0
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f000 fb44 	bl	800da48 <__malloc_lock>
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	685d      	ldr	r5, [r3, #4]
 800d3c4:	f025 0503 	bic.w	r5, r5, #3
 800d3c8:	f1a5 0411 	sub.w	r4, r5, #17
 800d3cc:	eba4 0409 	sub.w	r4, r4, r9
 800d3d0:	4444      	add	r4, r8
 800d3d2:	fbb4 f4f8 	udiv	r4, r4, r8
 800d3d6:	3c01      	subs	r4, #1
 800d3d8:	fb08 f404 	mul.w	r4, r8, r4
 800d3dc:	45a0      	cmp	r8, r4
 800d3de:	dd05      	ble.n	800d3ec <_malloc_trim_r+0x44>
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	f000 fb37 	bl	800da54 <__malloc_unlock>
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f001 fdd4 	bl	800ef9c <_sbrk_r>
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	442b      	add	r3, r5
 800d3f8:	4298      	cmp	r0, r3
 800d3fa:	d1f1      	bne.n	800d3e0 <_malloc_trim_r+0x38>
 800d3fc:	4261      	negs	r1, r4
 800d3fe:	4630      	mov	r0, r6
 800d400:	f001 fdcc 	bl	800ef9c <_sbrk_r>
 800d404:	3001      	adds	r0, #1
 800d406:	d110      	bne.n	800d42a <_malloc_trim_r+0x82>
 800d408:	2100      	movs	r1, #0
 800d40a:	4630      	mov	r0, r6
 800d40c:	f001 fdc6 	bl	800ef9c <_sbrk_r>
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	1a83      	subs	r3, r0, r2
 800d414:	2b0f      	cmp	r3, #15
 800d416:	dde3      	ble.n	800d3e0 <_malloc_trim_r+0x38>
 800d418:	490c      	ldr	r1, [pc, #48]	@ (800d44c <_malloc_trim_r+0xa4>)
 800d41a:	6809      	ldr	r1, [r1, #0]
 800d41c:	1a40      	subs	r0, r0, r1
 800d41e:	490c      	ldr	r1, [pc, #48]	@ (800d450 <_malloc_trim_r+0xa8>)
 800d420:	f043 0301 	orr.w	r3, r3, #1
 800d424:	6008      	str	r0, [r1, #0]
 800d426:	6053      	str	r3, [r2, #4]
 800d428:	e7da      	b.n	800d3e0 <_malloc_trim_r+0x38>
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	4a08      	ldr	r2, [pc, #32]	@ (800d450 <_malloc_trim_r+0xa8>)
 800d42e:	1b2d      	subs	r5, r5, r4
 800d430:	f045 0501 	orr.w	r5, r5, #1
 800d434:	605d      	str	r5, [r3, #4]
 800d436:	6813      	ldr	r3, [r2, #0]
 800d438:	4630      	mov	r0, r6
 800d43a:	1b1b      	subs	r3, r3, r4
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	f000 fb09 	bl	800da54 <__malloc_unlock>
 800d442:	2001      	movs	r0, #1
 800d444:	e7d0      	b.n	800d3e8 <_malloc_trim_r+0x40>
 800d446:	bf00      	nop
 800d448:	24000164 	.word	0x24000164
 800d44c:	2400015c 	.word	0x2400015c
 800d450:	240251d4 	.word	0x240251d4

0800d454 <_free_r>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	4604      	mov	r4, r0
 800d458:	460f      	mov	r7, r1
 800d45a:	2900      	cmp	r1, #0
 800d45c:	f000 80b1 	beq.w	800d5c2 <_free_r+0x16e>
 800d460:	f000 faf2 	bl	800da48 <__malloc_lock>
 800d464:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d468:	4d56      	ldr	r5, [pc, #344]	@ (800d5c4 <_free_r+0x170>)
 800d46a:	f022 0001 	bic.w	r0, r2, #1
 800d46e:	f1a7 0308 	sub.w	r3, r7, #8
 800d472:	eb03 0c00 	add.w	ip, r3, r0
 800d476:	68a9      	ldr	r1, [r5, #8]
 800d478:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d47c:	4561      	cmp	r1, ip
 800d47e:	f026 0603 	bic.w	r6, r6, #3
 800d482:	f002 0201 	and.w	r2, r2, #1
 800d486:	d11b      	bne.n	800d4c0 <_free_r+0x6c>
 800d488:	4406      	add	r6, r0
 800d48a:	b93a      	cbnz	r2, 800d49c <_free_r+0x48>
 800d48c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800d490:	1a9b      	subs	r3, r3, r2
 800d492:	4416      	add	r6, r2
 800d494:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800d498:	60ca      	str	r2, [r1, #12]
 800d49a:	6091      	str	r1, [r2, #8]
 800d49c:	f046 0201 	orr.w	r2, r6, #1
 800d4a0:	605a      	str	r2, [r3, #4]
 800d4a2:	60ab      	str	r3, [r5, #8]
 800d4a4:	4b48      	ldr	r3, [pc, #288]	@ (800d5c8 <_free_r+0x174>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	42b3      	cmp	r3, r6
 800d4aa:	d804      	bhi.n	800d4b6 <_free_r+0x62>
 800d4ac:	4b47      	ldr	r3, [pc, #284]	@ (800d5cc <_free_r+0x178>)
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	6819      	ldr	r1, [r3, #0]
 800d4b2:	f7ff ff79 	bl	800d3a8 <_malloc_trim_r>
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4bc:	f000 baca 	b.w	800da54 <__malloc_unlock>
 800d4c0:	f8cc 6004 	str.w	r6, [ip, #4]
 800d4c4:	2a00      	cmp	r2, #0
 800d4c6:	d138      	bne.n	800d53a <_free_r+0xe6>
 800d4c8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800d4cc:	1a5b      	subs	r3, r3, r1
 800d4ce:	4408      	add	r0, r1
 800d4d0:	6899      	ldr	r1, [r3, #8]
 800d4d2:	f105 0708 	add.w	r7, r5, #8
 800d4d6:	42b9      	cmp	r1, r7
 800d4d8:	d031      	beq.n	800d53e <_free_r+0xea>
 800d4da:	68df      	ldr	r7, [r3, #12]
 800d4dc:	60cf      	str	r7, [r1, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	eb0c 0106 	add.w	r1, ip, r6
 800d4e4:	6849      	ldr	r1, [r1, #4]
 800d4e6:	07c9      	lsls	r1, r1, #31
 800d4e8:	d40b      	bmi.n	800d502 <_free_r+0xae>
 800d4ea:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d4ee:	4430      	add	r0, r6
 800d4f0:	bb3a      	cbnz	r2, 800d542 <_free_r+0xee>
 800d4f2:	4e37      	ldr	r6, [pc, #220]	@ (800d5d0 <_free_r+0x17c>)
 800d4f4:	42b1      	cmp	r1, r6
 800d4f6:	d124      	bne.n	800d542 <_free_r+0xee>
 800d4f8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800d4fc:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800d500:	2201      	movs	r2, #1
 800d502:	f040 0101 	orr.w	r1, r0, #1
 800d506:	6059      	str	r1, [r3, #4]
 800d508:	5018      	str	r0, [r3, r0]
 800d50a:	2a00      	cmp	r2, #0
 800d50c:	d1d3      	bne.n	800d4b6 <_free_r+0x62>
 800d50e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800d512:	d21b      	bcs.n	800d54c <_free_r+0xf8>
 800d514:	08c2      	lsrs	r2, r0, #3
 800d516:	2101      	movs	r1, #1
 800d518:	0940      	lsrs	r0, r0, #5
 800d51a:	4081      	lsls	r1, r0
 800d51c:	6868      	ldr	r0, [r5, #4]
 800d51e:	3201      	adds	r2, #1
 800d520:	4301      	orrs	r1, r0
 800d522:	6069      	str	r1, [r5, #4]
 800d524:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800d528:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800d52c:	3908      	subs	r1, #8
 800d52e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d532:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800d536:	60c3      	str	r3, [r0, #12]
 800d538:	e7bd      	b.n	800d4b6 <_free_r+0x62>
 800d53a:	2200      	movs	r2, #0
 800d53c:	e7d0      	b.n	800d4e0 <_free_r+0x8c>
 800d53e:	2201      	movs	r2, #1
 800d540:	e7ce      	b.n	800d4e0 <_free_r+0x8c>
 800d542:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800d546:	60ce      	str	r6, [r1, #12]
 800d548:	60b1      	str	r1, [r6, #8]
 800d54a:	e7da      	b.n	800d502 <_free_r+0xae>
 800d54c:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800d550:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800d554:	d214      	bcs.n	800d580 <_free_r+0x12c>
 800d556:	0982      	lsrs	r2, r0, #6
 800d558:	3238      	adds	r2, #56	@ 0x38
 800d55a:	1c51      	adds	r1, r2, #1
 800d55c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800d560:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800d564:	428e      	cmp	r6, r1
 800d566:	d125      	bne.n	800d5b4 <_free_r+0x160>
 800d568:	2001      	movs	r0, #1
 800d56a:	1092      	asrs	r2, r2, #2
 800d56c:	fa00 f202 	lsl.w	r2, r0, r2
 800d570:	6868      	ldr	r0, [r5, #4]
 800d572:	4302      	orrs	r2, r0
 800d574:	606a      	str	r2, [r5, #4]
 800d576:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800d57a:	60b3      	str	r3, [r6, #8]
 800d57c:	60cb      	str	r3, [r1, #12]
 800d57e:	e79a      	b.n	800d4b6 <_free_r+0x62>
 800d580:	2a14      	cmp	r2, #20
 800d582:	d801      	bhi.n	800d588 <_free_r+0x134>
 800d584:	325b      	adds	r2, #91	@ 0x5b
 800d586:	e7e8      	b.n	800d55a <_free_r+0x106>
 800d588:	2a54      	cmp	r2, #84	@ 0x54
 800d58a:	d802      	bhi.n	800d592 <_free_r+0x13e>
 800d58c:	0b02      	lsrs	r2, r0, #12
 800d58e:	326e      	adds	r2, #110	@ 0x6e
 800d590:	e7e3      	b.n	800d55a <_free_r+0x106>
 800d592:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800d596:	d802      	bhi.n	800d59e <_free_r+0x14a>
 800d598:	0bc2      	lsrs	r2, r0, #15
 800d59a:	3277      	adds	r2, #119	@ 0x77
 800d59c:	e7dd      	b.n	800d55a <_free_r+0x106>
 800d59e:	f240 5154 	movw	r1, #1364	@ 0x554
 800d5a2:	428a      	cmp	r2, r1
 800d5a4:	bf9a      	itte	ls
 800d5a6:	0c82      	lsrls	r2, r0, #18
 800d5a8:	327c      	addls	r2, #124	@ 0x7c
 800d5aa:	227e      	movhi	r2, #126	@ 0x7e
 800d5ac:	e7d5      	b.n	800d55a <_free_r+0x106>
 800d5ae:	6889      	ldr	r1, [r1, #8]
 800d5b0:	428e      	cmp	r6, r1
 800d5b2:	d004      	beq.n	800d5be <_free_r+0x16a>
 800d5b4:	684a      	ldr	r2, [r1, #4]
 800d5b6:	f022 0203 	bic.w	r2, r2, #3
 800d5ba:	4282      	cmp	r2, r0
 800d5bc:	d8f7      	bhi.n	800d5ae <_free_r+0x15a>
 800d5be:	68ce      	ldr	r6, [r1, #12]
 800d5c0:	e7d9      	b.n	800d576 <_free_r+0x122>
 800d5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c4:	24000164 	.word	0x24000164
 800d5c8:	24000160 	.word	0x24000160
 800d5cc:	24025204 	.word	0x24025204
 800d5d0:	2400016c 	.word	0x2400016c

0800d5d4 <_malloc_r>:
 800d5d4:	f101 030b 	add.w	r3, r1, #11
 800d5d8:	2b16      	cmp	r3, #22
 800d5da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5de:	4605      	mov	r5, r0
 800d5e0:	d906      	bls.n	800d5f0 <_malloc_r+0x1c>
 800d5e2:	f033 0707 	bics.w	r7, r3, #7
 800d5e6:	d504      	bpl.n	800d5f2 <_malloc_r+0x1e>
 800d5e8:	230c      	movs	r3, #12
 800d5ea:	602b      	str	r3, [r5, #0]
 800d5ec:	2400      	movs	r4, #0
 800d5ee:	e1a3      	b.n	800d938 <_malloc_r+0x364>
 800d5f0:	2710      	movs	r7, #16
 800d5f2:	42b9      	cmp	r1, r7
 800d5f4:	d8f8      	bhi.n	800d5e8 <_malloc_r+0x14>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 fa26 	bl	800da48 <__malloc_lock>
 800d5fc:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800d600:	4eaf      	ldr	r6, [pc, #700]	@ (800d8c0 <_malloc_r+0x2ec>)
 800d602:	d237      	bcs.n	800d674 <_malloc_r+0xa0>
 800d604:	f107 0208 	add.w	r2, r7, #8
 800d608:	4432      	add	r2, r6
 800d60a:	f1a2 0108 	sub.w	r1, r2, #8
 800d60e:	6854      	ldr	r4, [r2, #4]
 800d610:	428c      	cmp	r4, r1
 800d612:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800d616:	d102      	bne.n	800d61e <_malloc_r+0x4a>
 800d618:	68d4      	ldr	r4, [r2, #12]
 800d61a:	42a2      	cmp	r2, r4
 800d61c:	d010      	beq.n	800d640 <_malloc_r+0x6c>
 800d61e:	6863      	ldr	r3, [r4, #4]
 800d620:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	60ca      	str	r2, [r1, #12]
 800d62a:	4423      	add	r3, r4
 800d62c:	6091      	str	r1, [r2, #8]
 800d62e:	685a      	ldr	r2, [r3, #4]
 800d630:	f042 0201 	orr.w	r2, r2, #1
 800d634:	605a      	str	r2, [r3, #4]
 800d636:	4628      	mov	r0, r5
 800d638:	f000 fa0c 	bl	800da54 <__malloc_unlock>
 800d63c:	3408      	adds	r4, #8
 800d63e:	e17b      	b.n	800d938 <_malloc_r+0x364>
 800d640:	3302      	adds	r3, #2
 800d642:	6934      	ldr	r4, [r6, #16]
 800d644:	499f      	ldr	r1, [pc, #636]	@ (800d8c4 <_malloc_r+0x2f0>)
 800d646:	428c      	cmp	r4, r1
 800d648:	d077      	beq.n	800d73a <_malloc_r+0x166>
 800d64a:	6862      	ldr	r2, [r4, #4]
 800d64c:	f022 0c03 	bic.w	ip, r2, #3
 800d650:	ebac 0007 	sub.w	r0, ip, r7
 800d654:	280f      	cmp	r0, #15
 800d656:	dd48      	ble.n	800d6ea <_malloc_r+0x116>
 800d658:	19e2      	adds	r2, r4, r7
 800d65a:	f040 0301 	orr.w	r3, r0, #1
 800d65e:	f047 0701 	orr.w	r7, r7, #1
 800d662:	6067      	str	r7, [r4, #4]
 800d664:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800d668:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800d66c:	6053      	str	r3, [r2, #4]
 800d66e:	f844 000c 	str.w	r0, [r4, ip]
 800d672:	e7e0      	b.n	800d636 <_malloc_r+0x62>
 800d674:	0a7b      	lsrs	r3, r7, #9
 800d676:	d02a      	beq.n	800d6ce <_malloc_r+0xfa>
 800d678:	2b04      	cmp	r3, #4
 800d67a:	d812      	bhi.n	800d6a2 <_malloc_r+0xce>
 800d67c:	09bb      	lsrs	r3, r7, #6
 800d67e:	3338      	adds	r3, #56	@ 0x38
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800d686:	f1a2 0c08 	sub.w	ip, r2, #8
 800d68a:	6854      	ldr	r4, [r2, #4]
 800d68c:	4564      	cmp	r4, ip
 800d68e:	d006      	beq.n	800d69e <_malloc_r+0xca>
 800d690:	6862      	ldr	r2, [r4, #4]
 800d692:	f022 0203 	bic.w	r2, r2, #3
 800d696:	1bd0      	subs	r0, r2, r7
 800d698:	280f      	cmp	r0, #15
 800d69a:	dd1c      	ble.n	800d6d6 <_malloc_r+0x102>
 800d69c:	3b01      	subs	r3, #1
 800d69e:	3301      	adds	r3, #1
 800d6a0:	e7cf      	b.n	800d642 <_malloc_r+0x6e>
 800d6a2:	2b14      	cmp	r3, #20
 800d6a4:	d801      	bhi.n	800d6aa <_malloc_r+0xd6>
 800d6a6:	335b      	adds	r3, #91	@ 0x5b
 800d6a8:	e7ea      	b.n	800d680 <_malloc_r+0xac>
 800d6aa:	2b54      	cmp	r3, #84	@ 0x54
 800d6ac:	d802      	bhi.n	800d6b4 <_malloc_r+0xe0>
 800d6ae:	0b3b      	lsrs	r3, r7, #12
 800d6b0:	336e      	adds	r3, #110	@ 0x6e
 800d6b2:	e7e5      	b.n	800d680 <_malloc_r+0xac>
 800d6b4:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800d6b8:	d802      	bhi.n	800d6c0 <_malloc_r+0xec>
 800d6ba:	0bfb      	lsrs	r3, r7, #15
 800d6bc:	3377      	adds	r3, #119	@ 0x77
 800d6be:	e7df      	b.n	800d680 <_malloc_r+0xac>
 800d6c0:	f240 5254 	movw	r2, #1364	@ 0x554
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d804      	bhi.n	800d6d2 <_malloc_r+0xfe>
 800d6c8:	0cbb      	lsrs	r3, r7, #18
 800d6ca:	337c      	adds	r3, #124	@ 0x7c
 800d6cc:	e7d8      	b.n	800d680 <_malloc_r+0xac>
 800d6ce:	233f      	movs	r3, #63	@ 0x3f
 800d6d0:	e7d6      	b.n	800d680 <_malloc_r+0xac>
 800d6d2:	237e      	movs	r3, #126	@ 0x7e
 800d6d4:	e7d4      	b.n	800d680 <_malloc_r+0xac>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	68e1      	ldr	r1, [r4, #12]
 800d6da:	db04      	blt.n	800d6e6 <_malloc_r+0x112>
 800d6dc:	68a3      	ldr	r3, [r4, #8]
 800d6de:	60d9      	str	r1, [r3, #12]
 800d6e0:	608b      	str	r3, [r1, #8]
 800d6e2:	18a3      	adds	r3, r4, r2
 800d6e4:	e7a3      	b.n	800d62e <_malloc_r+0x5a>
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	e7d0      	b.n	800d68c <_malloc_r+0xb8>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800d6f0:	db07      	blt.n	800d702 <_malloc_r+0x12e>
 800d6f2:	44a4      	add	ip, r4
 800d6f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d6f8:	f043 0301 	orr.w	r3, r3, #1
 800d6fc:	f8cc 3004 	str.w	r3, [ip, #4]
 800d700:	e799      	b.n	800d636 <_malloc_r+0x62>
 800d702:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800d706:	6870      	ldr	r0, [r6, #4]
 800d708:	f080 8095 	bcs.w	800d836 <_malloc_r+0x262>
 800d70c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800d710:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800d714:	f04f 0c01 	mov.w	ip, #1
 800d718:	3201      	adds	r2, #1
 800d71a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800d71e:	ea4c 0000 	orr.w	r0, ip, r0
 800d722:	6070      	str	r0, [r6, #4]
 800d724:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800d728:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800d72c:	3808      	subs	r0, #8
 800d72e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800d732:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800d736:	f8cc 400c 	str.w	r4, [ip, #12]
 800d73a:	1098      	asrs	r0, r3, #2
 800d73c:	2201      	movs	r2, #1
 800d73e:	4082      	lsls	r2, r0
 800d740:	6870      	ldr	r0, [r6, #4]
 800d742:	4290      	cmp	r0, r2
 800d744:	d326      	bcc.n	800d794 <_malloc_r+0x1c0>
 800d746:	4210      	tst	r0, r2
 800d748:	d106      	bne.n	800d758 <_malloc_r+0x184>
 800d74a:	f023 0303 	bic.w	r3, r3, #3
 800d74e:	0052      	lsls	r2, r2, #1
 800d750:	4210      	tst	r0, r2
 800d752:	f103 0304 	add.w	r3, r3, #4
 800d756:	d0fa      	beq.n	800d74e <_malloc_r+0x17a>
 800d758:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800d75c:	46c1      	mov	r9, r8
 800d75e:	469e      	mov	lr, r3
 800d760:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d764:	454c      	cmp	r4, r9
 800d766:	f040 80b9 	bne.w	800d8dc <_malloc_r+0x308>
 800d76a:	f10e 0e01 	add.w	lr, lr, #1
 800d76e:	f01e 0f03 	tst.w	lr, #3
 800d772:	f109 0908 	add.w	r9, r9, #8
 800d776:	d1f3      	bne.n	800d760 <_malloc_r+0x18c>
 800d778:	0798      	lsls	r0, r3, #30
 800d77a:	f040 80e3 	bne.w	800d944 <_malloc_r+0x370>
 800d77e:	6873      	ldr	r3, [r6, #4]
 800d780:	ea23 0302 	bic.w	r3, r3, r2
 800d784:	6073      	str	r3, [r6, #4]
 800d786:	6870      	ldr	r0, [r6, #4]
 800d788:	0052      	lsls	r2, r2, #1
 800d78a:	4290      	cmp	r0, r2
 800d78c:	d302      	bcc.n	800d794 <_malloc_r+0x1c0>
 800d78e:	2a00      	cmp	r2, #0
 800d790:	f040 80e5 	bne.w	800d95e <_malloc_r+0x38a>
 800d794:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800d798:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d79c:	f023 0903 	bic.w	r9, r3, #3
 800d7a0:	45b9      	cmp	r9, r7
 800d7a2:	d304      	bcc.n	800d7ae <_malloc_r+0x1da>
 800d7a4:	eba9 0207 	sub.w	r2, r9, r7
 800d7a8:	2a0f      	cmp	r2, #15
 800d7aa:	f300 8141 	bgt.w	800da30 <_malloc_r+0x45c>
 800d7ae:	4b46      	ldr	r3, [pc, #280]	@ (800d8c8 <_malloc_r+0x2f4>)
 800d7b0:	6819      	ldr	r1, [r3, #0]
 800d7b2:	3110      	adds	r1, #16
 800d7b4:	4439      	add	r1, r7
 800d7b6:	2008      	movs	r0, #8
 800d7b8:	9101      	str	r1, [sp, #4]
 800d7ba:	f001 fc13 	bl	800efe4 <sysconf>
 800d7be:	4a43      	ldr	r2, [pc, #268]	@ (800d8cc <_malloc_r+0x2f8>)
 800d7c0:	9901      	ldr	r1, [sp, #4]
 800d7c2:	6813      	ldr	r3, [r2, #0]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	bf1f      	itttt	ne
 800d7c8:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800d7cc:	1809      	addne	r1, r1, r0
 800d7ce:	4243      	negne	r3, r0
 800d7d0:	4019      	andne	r1, r3
 800d7d2:	4680      	mov	r8, r0
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	9101      	str	r1, [sp, #4]
 800d7d8:	f001 fbe0 	bl	800ef9c <_sbrk_r>
 800d7dc:	1c42      	adds	r2, r0, #1
 800d7de:	eb0a 0b09 	add.w	fp, sl, r9
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	f000 80f7 	beq.w	800d9d6 <_malloc_r+0x402>
 800d7e8:	4583      	cmp	fp, r0
 800d7ea:	9901      	ldr	r1, [sp, #4]
 800d7ec:	4a37      	ldr	r2, [pc, #220]	@ (800d8cc <_malloc_r+0x2f8>)
 800d7ee:	d902      	bls.n	800d7f6 <_malloc_r+0x222>
 800d7f0:	45b2      	cmp	sl, r6
 800d7f2:	f040 80f0 	bne.w	800d9d6 <_malloc_r+0x402>
 800d7f6:	4b36      	ldr	r3, [pc, #216]	@ (800d8d0 <_malloc_r+0x2fc>)
 800d7f8:	6818      	ldr	r0, [r3, #0]
 800d7fa:	45a3      	cmp	fp, r4
 800d7fc:	eb00 0e01 	add.w	lr, r0, r1
 800d800:	f8c3 e000 	str.w	lr, [r3]
 800d804:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800d808:	f040 80ab 	bne.w	800d962 <_malloc_r+0x38e>
 800d80c:	ea1b 0f0c 	tst.w	fp, ip
 800d810:	f040 80a7 	bne.w	800d962 <_malloc_r+0x38e>
 800d814:	68b2      	ldr	r2, [r6, #8]
 800d816:	4449      	add	r1, r9
 800d818:	f041 0101 	orr.w	r1, r1, #1
 800d81c:	6051      	str	r1, [r2, #4]
 800d81e:	4a2d      	ldr	r2, [pc, #180]	@ (800d8d4 <_malloc_r+0x300>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6811      	ldr	r1, [r2, #0]
 800d824:	428b      	cmp	r3, r1
 800d826:	bf88      	it	hi
 800d828:	6013      	strhi	r3, [r2, #0]
 800d82a:	4a2b      	ldr	r2, [pc, #172]	@ (800d8d8 <_malloc_r+0x304>)
 800d82c:	6811      	ldr	r1, [r2, #0]
 800d82e:	428b      	cmp	r3, r1
 800d830:	bf88      	it	hi
 800d832:	6013      	strhi	r3, [r2, #0]
 800d834:	e0cf      	b.n	800d9d6 <_malloc_r+0x402>
 800d836:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800d83a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800d83e:	d218      	bcs.n	800d872 <_malloc_r+0x29e>
 800d840:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800d844:	3238      	adds	r2, #56	@ 0x38
 800d846:	f102 0e01 	add.w	lr, r2, #1
 800d84a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800d84e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800d852:	45f0      	cmp	r8, lr
 800d854:	d12b      	bne.n	800d8ae <_malloc_r+0x2da>
 800d856:	1092      	asrs	r2, r2, #2
 800d858:	f04f 0c01 	mov.w	ip, #1
 800d85c:	fa0c f202 	lsl.w	r2, ip, r2
 800d860:	4302      	orrs	r2, r0
 800d862:	6072      	str	r2, [r6, #4]
 800d864:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800d868:	f8c8 4008 	str.w	r4, [r8, #8]
 800d86c:	f8ce 400c 	str.w	r4, [lr, #12]
 800d870:	e763      	b.n	800d73a <_malloc_r+0x166>
 800d872:	2a14      	cmp	r2, #20
 800d874:	d801      	bhi.n	800d87a <_malloc_r+0x2a6>
 800d876:	325b      	adds	r2, #91	@ 0x5b
 800d878:	e7e5      	b.n	800d846 <_malloc_r+0x272>
 800d87a:	2a54      	cmp	r2, #84	@ 0x54
 800d87c:	d803      	bhi.n	800d886 <_malloc_r+0x2b2>
 800d87e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800d882:	326e      	adds	r2, #110	@ 0x6e
 800d884:	e7df      	b.n	800d846 <_malloc_r+0x272>
 800d886:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800d88a:	d803      	bhi.n	800d894 <_malloc_r+0x2c0>
 800d88c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800d890:	3277      	adds	r2, #119	@ 0x77
 800d892:	e7d8      	b.n	800d846 <_malloc_r+0x272>
 800d894:	f240 5e54 	movw	lr, #1364	@ 0x554
 800d898:	4572      	cmp	r2, lr
 800d89a:	bf9a      	itte	ls
 800d89c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800d8a0:	327c      	addls	r2, #124	@ 0x7c
 800d8a2:	227e      	movhi	r2, #126	@ 0x7e
 800d8a4:	e7cf      	b.n	800d846 <_malloc_r+0x272>
 800d8a6:	f8de e008 	ldr.w	lr, [lr, #8]
 800d8aa:	45f0      	cmp	r8, lr
 800d8ac:	d005      	beq.n	800d8ba <_malloc_r+0x2e6>
 800d8ae:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d8b2:	f022 0203 	bic.w	r2, r2, #3
 800d8b6:	4562      	cmp	r2, ip
 800d8b8:	d8f5      	bhi.n	800d8a6 <_malloc_r+0x2d2>
 800d8ba:	f8de 800c 	ldr.w	r8, [lr, #12]
 800d8be:	e7d1      	b.n	800d864 <_malloc_r+0x290>
 800d8c0:	24000164 	.word	0x24000164
 800d8c4:	2400016c 	.word	0x2400016c
 800d8c8:	24025204 	.word	0x24025204
 800d8cc:	2400015c 	.word	0x2400015c
 800d8d0:	240251d4 	.word	0x240251d4
 800d8d4:	24025200 	.word	0x24025200
 800d8d8:	240251fc 	.word	0x240251fc
 800d8dc:	6860      	ldr	r0, [r4, #4]
 800d8de:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800d8e2:	f020 0003 	bic.w	r0, r0, #3
 800d8e6:	eba0 0a07 	sub.w	sl, r0, r7
 800d8ea:	f1ba 0f0f 	cmp.w	sl, #15
 800d8ee:	dd12      	ble.n	800d916 <_malloc_r+0x342>
 800d8f0:	68a3      	ldr	r3, [r4, #8]
 800d8f2:	19e2      	adds	r2, r4, r7
 800d8f4:	f047 0701 	orr.w	r7, r7, #1
 800d8f8:	6067      	str	r7, [r4, #4]
 800d8fa:	f8c3 c00c 	str.w	ip, [r3, #12]
 800d8fe:	f8cc 3008 	str.w	r3, [ip, #8]
 800d902:	f04a 0301 	orr.w	r3, sl, #1
 800d906:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800d90a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800d90e:	6053      	str	r3, [r2, #4]
 800d910:	f844 a000 	str.w	sl, [r4, r0]
 800d914:	e68f      	b.n	800d636 <_malloc_r+0x62>
 800d916:	f1ba 0f00 	cmp.w	sl, #0
 800d91a:	db11      	blt.n	800d940 <_malloc_r+0x36c>
 800d91c:	4420      	add	r0, r4
 800d91e:	6843      	ldr	r3, [r0, #4]
 800d920:	f043 0301 	orr.w	r3, r3, #1
 800d924:	6043      	str	r3, [r0, #4]
 800d926:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800d92a:	4628      	mov	r0, r5
 800d92c:	f8c3 c00c 	str.w	ip, [r3, #12]
 800d930:	f8cc 3008 	str.w	r3, [ip, #8]
 800d934:	f000 f88e 	bl	800da54 <__malloc_unlock>
 800d938:	4620      	mov	r0, r4
 800d93a:	b003      	add	sp, #12
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	4664      	mov	r4, ip
 800d942:	e70f      	b.n	800d764 <_malloc_r+0x190>
 800d944:	f858 0908 	ldr.w	r0, [r8], #-8
 800d948:	4540      	cmp	r0, r8
 800d94a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d94e:	f43f af13 	beq.w	800d778 <_malloc_r+0x1a4>
 800d952:	e718      	b.n	800d786 <_malloc_r+0x1b2>
 800d954:	3304      	adds	r3, #4
 800d956:	0052      	lsls	r2, r2, #1
 800d958:	4210      	tst	r0, r2
 800d95a:	d0fb      	beq.n	800d954 <_malloc_r+0x380>
 800d95c:	e6fc      	b.n	800d758 <_malloc_r+0x184>
 800d95e:	4673      	mov	r3, lr
 800d960:	e7fa      	b.n	800d958 <_malloc_r+0x384>
 800d962:	6810      	ldr	r0, [r2, #0]
 800d964:	3001      	adds	r0, #1
 800d966:	bf1b      	ittet	ne
 800d968:	eba4 0b0b 	subne.w	fp, r4, fp
 800d96c:	eb0b 020e 	addne.w	r2, fp, lr
 800d970:	6014      	streq	r4, [r2, #0]
 800d972:	601a      	strne	r2, [r3, #0]
 800d974:	f014 0b07 	ands.w	fp, r4, #7
 800d978:	bf1a      	itte	ne
 800d97a:	f1cb 0008 	rsbne	r0, fp, #8
 800d97e:	1824      	addne	r4, r4, r0
 800d980:	4658      	moveq	r0, fp
 800d982:	1862      	adds	r2, r4, r1
 800d984:	ea02 010c 	and.w	r1, r2, ip
 800d988:	4480      	add	r8, r0
 800d98a:	eba8 0801 	sub.w	r8, r8, r1
 800d98e:	ea08 080c 	and.w	r8, r8, ip
 800d992:	4641      	mov	r1, r8
 800d994:	4628      	mov	r0, r5
 800d996:	9201      	str	r2, [sp, #4]
 800d998:	f001 fb00 	bl	800ef9c <_sbrk_r>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	9a01      	ldr	r2, [sp, #4]
 800d9a0:	4b28      	ldr	r3, [pc, #160]	@ (800da44 <_malloc_r+0x470>)
 800d9a2:	d107      	bne.n	800d9b4 <_malloc_r+0x3e0>
 800d9a4:	f1bb 0f00 	cmp.w	fp, #0
 800d9a8:	d023      	beq.n	800d9f2 <_malloc_r+0x41e>
 800d9aa:	f1ab 0008 	sub.w	r0, fp, #8
 800d9ae:	4410      	add	r0, r2
 800d9b0:	f04f 0800 	mov.w	r8, #0
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	60b4      	str	r4, [r6, #8]
 800d9b8:	1b00      	subs	r0, r0, r4
 800d9ba:	4440      	add	r0, r8
 800d9bc:	4442      	add	r2, r8
 800d9be:	f040 0001 	orr.w	r0, r0, #1
 800d9c2:	45b2      	cmp	sl, r6
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	6060      	str	r0, [r4, #4]
 800d9c8:	f43f af29 	beq.w	800d81e <_malloc_r+0x24a>
 800d9cc:	f1b9 0f0f 	cmp.w	r9, #15
 800d9d0:	d812      	bhi.n	800d9f8 <_malloc_r+0x424>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	6063      	str	r3, [r4, #4]
 800d9d6:	68b3      	ldr	r3, [r6, #8]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	f023 0303 	bic.w	r3, r3, #3
 800d9de:	42bb      	cmp	r3, r7
 800d9e0:	eba3 0207 	sub.w	r2, r3, r7
 800d9e4:	d301      	bcc.n	800d9ea <_malloc_r+0x416>
 800d9e6:	2a0f      	cmp	r2, #15
 800d9e8:	dc22      	bgt.n	800da30 <_malloc_r+0x45c>
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f000 f832 	bl	800da54 <__malloc_unlock>
 800d9f0:	e5fc      	b.n	800d5ec <_malloc_r+0x18>
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	46d8      	mov	r8, fp
 800d9f6:	e7dd      	b.n	800d9b4 <_malloc_r+0x3e0>
 800d9f8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d9fc:	f1a9 090c 	sub.w	r9, r9, #12
 800da00:	f029 0907 	bic.w	r9, r9, #7
 800da04:	f002 0201 	and.w	r2, r2, #1
 800da08:	ea42 0209 	orr.w	r2, r2, r9
 800da0c:	f8ca 2004 	str.w	r2, [sl, #4]
 800da10:	2105      	movs	r1, #5
 800da12:	eb0a 0209 	add.w	r2, sl, r9
 800da16:	f1b9 0f0f 	cmp.w	r9, #15
 800da1a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800da1e:	f67f aefe 	bls.w	800d81e <_malloc_r+0x24a>
 800da22:	f10a 0108 	add.w	r1, sl, #8
 800da26:	4628      	mov	r0, r5
 800da28:	f7ff fd14 	bl	800d454 <_free_r>
 800da2c:	4b05      	ldr	r3, [pc, #20]	@ (800da44 <_malloc_r+0x470>)
 800da2e:	e6f6      	b.n	800d81e <_malloc_r+0x24a>
 800da30:	68b4      	ldr	r4, [r6, #8]
 800da32:	f047 0301 	orr.w	r3, r7, #1
 800da36:	4427      	add	r7, r4
 800da38:	f042 0201 	orr.w	r2, r2, #1
 800da3c:	6063      	str	r3, [r4, #4]
 800da3e:	60b7      	str	r7, [r6, #8]
 800da40:	607a      	str	r2, [r7, #4]
 800da42:	e5f8      	b.n	800d636 <_malloc_r+0x62>
 800da44:	240251d4 	.word	0x240251d4

0800da48 <__malloc_lock>:
 800da48:	4801      	ldr	r0, [pc, #4]	@ (800da50 <__malloc_lock+0x8>)
 800da4a:	f7ff bc8d 	b.w	800d368 <__retarget_lock_acquire_recursive>
 800da4e:	bf00      	nop
 800da50:	240251cc 	.word	0x240251cc

0800da54 <__malloc_unlock>:
 800da54:	4801      	ldr	r0, [pc, #4]	@ (800da5c <__malloc_unlock+0x8>)
 800da56:	f7ff bc88 	b.w	800d36a <__retarget_lock_release_recursive>
 800da5a:	bf00      	nop
 800da5c:	240251cc 	.word	0x240251cc

0800da60 <_svfprintf_r>:
 800da60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	ed2d 8b04 	vpush	{d8-d9}
 800da68:	b0cb      	sub	sp, #300	@ 0x12c
 800da6a:	468a      	mov	sl, r1
 800da6c:	4691      	mov	r9, r2
 800da6e:	461e      	mov	r6, r3
 800da70:	9002      	str	r0, [sp, #8]
 800da72:	f001 fa8f 	bl	800ef94 <_localeconv_r>
 800da76:	6803      	ldr	r3, [r0, #0]
 800da78:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7f2 fc80 	bl	8000380 <strlen>
 800da80:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800da84:	9009      	str	r0, [sp, #36]	@ 0x24
 800da86:	061c      	lsls	r4, r3, #24
 800da88:	d515      	bpl.n	800dab6 <_svfprintf_r+0x56>
 800da8a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800da8e:	b993      	cbnz	r3, 800dab6 <_svfprintf_r+0x56>
 800da90:	9802      	ldr	r0, [sp, #8]
 800da92:	2140      	movs	r1, #64	@ 0x40
 800da94:	f7ff fd9e 	bl	800d5d4 <_malloc_r>
 800da98:	f8ca 0000 	str.w	r0, [sl]
 800da9c:	f8ca 0010 	str.w	r0, [sl, #16]
 800daa0:	b930      	cbnz	r0, 800dab0 <_svfprintf_r+0x50>
 800daa2:	9a02      	ldr	r2, [sp, #8]
 800daa4:	230c      	movs	r3, #12
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800daac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800daae:	e1e1      	b.n	800de74 <_svfprintf_r+0x414>
 800dab0:	2340      	movs	r3, #64	@ 0x40
 800dab2:	f8ca 3014 	str.w	r3, [sl, #20]
 800dab6:	2300      	movs	r3, #0
 800dab8:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 800dabc:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 800dd18 <_svfprintf_r+0x2b8>
 800dac0:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 800dac4:	ac21      	add	r4, sp, #132	@ 0x84
 800dac6:	941e      	str	r4, [sp, #120]	@ 0x78
 800dac8:	9303      	str	r3, [sp, #12]
 800daca:	9307      	str	r3, [sp, #28]
 800dacc:	930e      	str	r3, [sp, #56]	@ 0x38
 800dace:	9310      	str	r3, [sp, #64]	@ 0x40
 800dad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dad2:	464b      	mov	r3, r9
 800dad4:	461d      	mov	r5, r3
 800dad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dada:	b10a      	cbz	r2, 800dae0 <_svfprintf_r+0x80>
 800dadc:	2a25      	cmp	r2, #37	@ 0x25
 800dade:	d1f9      	bne.n	800dad4 <_svfprintf_r+0x74>
 800dae0:	ebb5 0709 	subs.w	r7, r5, r9
 800dae4:	d00d      	beq.n	800db02 <_svfprintf_r+0xa2>
 800dae6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dae8:	443b      	add	r3, r7
 800daea:	9320      	str	r3, [sp, #128]	@ 0x80
 800daec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800daee:	3301      	adds	r3, #1
 800daf0:	2b07      	cmp	r3, #7
 800daf2:	e9c4 9700 	strd	r9, r7, [r4]
 800daf6:	931f      	str	r3, [sp, #124]	@ 0x7c
 800daf8:	dc75      	bgt.n	800dbe6 <_svfprintf_r+0x186>
 800dafa:	3408      	adds	r4, #8
 800dafc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dafe:	443b      	add	r3, r7
 800db00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db02:	782b      	ldrb	r3, [r5, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	f001 80ee 	beq.w	800ece6 <_svfprintf_r+0x1286>
 800db0a:	2200      	movs	r2, #0
 800db0c:	1c6b      	adds	r3, r5, #1
 800db0e:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800db12:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800db16:	920a      	str	r2, [sp, #40]	@ 0x28
 800db18:	4615      	mov	r5, r2
 800db1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db1e:	9204      	str	r2, [sp, #16]
 800db20:	9308      	str	r3, [sp, #32]
 800db22:	9b04      	ldr	r3, [sp, #16]
 800db24:	3b20      	subs	r3, #32
 800db26:	2b5a      	cmp	r3, #90	@ 0x5a
 800db28:	f200 8564 	bhi.w	800e5f4 <_svfprintf_r+0xb94>
 800db2c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800db30:	0562009c 	.word	0x0562009c
 800db34:	00a40562 	.word	0x00a40562
 800db38:	05620562 	.word	0x05620562
 800db3c:	00840562 	.word	0x00840562
 800db40:	05620562 	.word	0x05620562
 800db44:	00b100a7 	.word	0x00b100a7
 800db48:	00ae0562 	.word	0x00ae0562
 800db4c:	056200b3 	.word	0x056200b3
 800db50:	00d000cd 	.word	0x00d000cd
 800db54:	00d000d0 	.word	0x00d000d0
 800db58:	00d000d0 	.word	0x00d000d0
 800db5c:	00d000d0 	.word	0x00d000d0
 800db60:	00d000d0 	.word	0x00d000d0
 800db64:	05620562 	.word	0x05620562
 800db68:	05620562 	.word	0x05620562
 800db6c:	05620562 	.word	0x05620562
 800db70:	01460562 	.word	0x01460562
 800db74:	01070562 	.word	0x01070562
 800db78:	0146011a 	.word	0x0146011a
 800db7c:	01460146 	.word	0x01460146
 800db80:	05620562 	.word	0x05620562
 800db84:	05620562 	.word	0x05620562
 800db88:	056200e1 	.word	0x056200e1
 800db8c:	045c0562 	.word	0x045c0562
 800db90:	05620562 	.word	0x05620562
 800db94:	04a60562 	.word	0x04a60562
 800db98:	04c70562 	.word	0x04c70562
 800db9c:	05620562 	.word	0x05620562
 800dba0:	056204e9 	.word	0x056204e9
 800dba4:	05620562 	.word	0x05620562
 800dba8:	05620562 	.word	0x05620562
 800dbac:	05620562 	.word	0x05620562
 800dbb0:	01460562 	.word	0x01460562
 800dbb4:	01070562 	.word	0x01070562
 800dbb8:	0146011c 	.word	0x0146011c
 800dbbc:	01460146 	.word	0x01460146
 800dbc0:	011c00e4 	.word	0x011c00e4
 800dbc4:	05620101 	.word	0x05620101
 800dbc8:	056200fa 	.word	0x056200fa
 800dbcc:	045e043d 	.word	0x045e043d
 800dbd0:	01010495 	.word	0x01010495
 800dbd4:	04a60562 	.word	0x04a60562
 800dbd8:	04c9009a 	.word	0x04c9009a
 800dbdc:	05620562 	.word	0x05620562
 800dbe0:	05620065 	.word	0x05620065
 800dbe4:	009a      	.short	0x009a
 800dbe6:	9802      	ldr	r0, [sp, #8]
 800dbe8:	aa1e      	add	r2, sp, #120	@ 0x78
 800dbea:	4651      	mov	r1, sl
 800dbec:	f002 fb7a 	bl	80102e4 <__ssprint_r>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	f040 813a 	bne.w	800de6a <_svfprintf_r+0x40a>
 800dbf6:	ac21      	add	r4, sp, #132	@ 0x84
 800dbf8:	e780      	b.n	800dafc <_svfprintf_r+0x9c>
 800dbfa:	4b49      	ldr	r3, [pc, #292]	@ (800dd20 <_svfprintf_r+0x2c0>)
 800dbfc:	9312      	str	r3, [sp, #72]	@ 0x48
 800dbfe:	f015 0320 	ands.w	r3, r5, #32
 800dc02:	f000 8481 	beq.w	800e508 <_svfprintf_r+0xaa8>
 800dc06:	3607      	adds	r6, #7
 800dc08:	f026 0307 	bic.w	r3, r6, #7
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	685f      	ldr	r7, [r3, #4]
 800dc10:	f852 6b08 	ldr.w	r6, [r2], #8
 800dc14:	9205      	str	r2, [sp, #20]
 800dc16:	07eb      	lsls	r3, r5, #31
 800dc18:	d50a      	bpl.n	800dc30 <_svfprintf_r+0x1d0>
 800dc1a:	ea56 0307 	orrs.w	r3, r6, r7
 800dc1e:	d007      	beq.n	800dc30 <_svfprintf_r+0x1d0>
 800dc20:	2330      	movs	r3, #48	@ 0x30
 800dc22:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800dc26:	9b04      	ldr	r3, [sp, #16]
 800dc28:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800dc2c:	f045 0502 	orr.w	r5, r5, #2
 800dc30:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800dc34:	2302      	movs	r3, #2
 800dc36:	e3e7      	b.n	800e408 <_svfprintf_r+0x9a8>
 800dc38:	9802      	ldr	r0, [sp, #8]
 800dc3a:	f001 f9ab 	bl	800ef94 <_localeconv_r>
 800dc3e:	6843      	ldr	r3, [r0, #4]
 800dc40:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7f2 fb9c 	bl	8000380 <strlen>
 800dc48:	900e      	str	r0, [sp, #56]	@ 0x38
 800dc4a:	9802      	ldr	r0, [sp, #8]
 800dc4c:	f001 f9a2 	bl	800ef94 <_localeconv_r>
 800dc50:	6883      	ldr	r3, [r0, #8]
 800dc52:	9307      	str	r3, [sp, #28]
 800dc54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc56:	b12b      	cbz	r3, 800dc64 <_svfprintf_r+0x204>
 800dc58:	9b07      	ldr	r3, [sp, #28]
 800dc5a:	b11b      	cbz	r3, 800dc64 <_svfprintf_r+0x204>
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	b10b      	cbz	r3, 800dc64 <_svfprintf_r+0x204>
 800dc60:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800dc64:	9b08      	ldr	r3, [sp, #32]
 800dc66:	e758      	b.n	800db1a <_svfprintf_r+0xba>
 800dc68:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1f9      	bne.n	800dc64 <_svfprintf_r+0x204>
 800dc70:	2320      	movs	r3, #32
 800dc72:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800dc76:	e7f5      	b.n	800dc64 <_svfprintf_r+0x204>
 800dc78:	f045 0501 	orr.w	r5, r5, #1
 800dc7c:	e7f2      	b.n	800dc64 <_svfprintf_r+0x204>
 800dc7e:	f856 3b04 	ldr.w	r3, [r6], #4
 800dc82:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	daed      	bge.n	800dc64 <_svfprintf_r+0x204>
 800dc88:	425b      	negs	r3, r3
 800dc8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc8c:	f045 0504 	orr.w	r5, r5, #4
 800dc90:	e7e8      	b.n	800dc64 <_svfprintf_r+0x204>
 800dc92:	232b      	movs	r3, #43	@ 0x2b
 800dc94:	e7ed      	b.n	800dc72 <_svfprintf_r+0x212>
 800dc96:	9b08      	ldr	r3, [sp, #32]
 800dc98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc9c:	9204      	str	r2, [sp, #16]
 800dc9e:	2a2a      	cmp	r2, #42	@ 0x2a
 800dca0:	d10f      	bne.n	800dcc2 <_svfprintf_r+0x262>
 800dca2:	f856 2b04 	ldr.w	r2, [r6], #4
 800dca6:	9308      	str	r3, [sp, #32]
 800dca8:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800dcac:	e7da      	b.n	800dc64 <_svfprintf_r+0x204>
 800dcae:	fb01 2808 	mla	r8, r1, r8, r2
 800dcb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcb6:	9204      	str	r2, [sp, #16]
 800dcb8:	9a04      	ldr	r2, [sp, #16]
 800dcba:	3a30      	subs	r2, #48	@ 0x30
 800dcbc:	2a09      	cmp	r2, #9
 800dcbe:	d9f6      	bls.n	800dcae <_svfprintf_r+0x24e>
 800dcc0:	e72e      	b.n	800db20 <_svfprintf_r+0xc0>
 800dcc2:	f04f 0800 	mov.w	r8, #0
 800dcc6:	210a      	movs	r1, #10
 800dcc8:	e7f6      	b.n	800dcb8 <_svfprintf_r+0x258>
 800dcca:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800dcce:	e7c9      	b.n	800dc64 <_svfprintf_r+0x204>
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	9b08      	ldr	r3, [sp, #32]
 800dcd4:	920a      	str	r2, [sp, #40]	@ 0x28
 800dcd6:	210a      	movs	r1, #10
 800dcd8:	9a04      	ldr	r2, [sp, #16]
 800dcda:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dcdc:	3a30      	subs	r2, #48	@ 0x30
 800dcde:	fb01 2200 	mla	r2, r1, r0, r2
 800dce2:	920a      	str	r2, [sp, #40]	@ 0x28
 800dce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dce8:	9204      	str	r2, [sp, #16]
 800dcea:	3a30      	subs	r2, #48	@ 0x30
 800dcec:	2a09      	cmp	r2, #9
 800dcee:	d9f3      	bls.n	800dcd8 <_svfprintf_r+0x278>
 800dcf0:	e716      	b.n	800db20 <_svfprintf_r+0xc0>
 800dcf2:	f045 0508 	orr.w	r5, r5, #8
 800dcf6:	e7b5      	b.n	800dc64 <_svfprintf_r+0x204>
 800dcf8:	9b08      	ldr	r3, [sp, #32]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2b68      	cmp	r3, #104	@ 0x68
 800dcfe:	bf01      	itttt	eq
 800dd00:	9b08      	ldreq	r3, [sp, #32]
 800dd02:	3301      	addeq	r3, #1
 800dd04:	9308      	streq	r3, [sp, #32]
 800dd06:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800dd0a:	bf18      	it	ne
 800dd0c:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800dd10:	e7a8      	b.n	800dc64 <_svfprintf_r+0x204>
 800dd12:	bf00      	nop
 800dd14:	f3af 8000 	nop.w
	...
 800dd20:	08013054 	.word	0x08013054
 800dd24:	9b08      	ldr	r3, [sp, #32]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b6c      	cmp	r3, #108	@ 0x6c
 800dd2a:	d105      	bne.n	800dd38 <_svfprintf_r+0x2d8>
 800dd2c:	9b08      	ldr	r3, [sp, #32]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	9308      	str	r3, [sp, #32]
 800dd32:	f045 0520 	orr.w	r5, r5, #32
 800dd36:	e795      	b.n	800dc64 <_svfprintf_r+0x204>
 800dd38:	f045 0510 	orr.w	r5, r5, #16
 800dd3c:	e792      	b.n	800dc64 <_svfprintf_r+0x204>
 800dd3e:	4632      	mov	r2, r6
 800dd40:	f852 3b04 	ldr.w	r3, [r2], #4
 800dd44:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800dd48:	2300      	movs	r3, #0
 800dd4a:	9205      	str	r2, [sp, #20]
 800dd4c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800dd50:	469b      	mov	fp, r3
 800dd52:	f04f 0801 	mov.w	r8, #1
 800dd56:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd58:	461f      	mov	r7, r3
 800dd5a:	9306      	str	r3, [sp, #24]
 800dd5c:	461e      	mov	r6, r3
 800dd5e:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800dd62:	e1a1      	b.n	800e0a8 <_svfprintf_r+0x648>
 800dd64:	f045 0510 	orr.w	r5, r5, #16
 800dd68:	06a8      	lsls	r0, r5, #26
 800dd6a:	d512      	bpl.n	800dd92 <_svfprintf_r+0x332>
 800dd6c:	3607      	adds	r6, #7
 800dd6e:	f026 0307 	bic.w	r3, r6, #7
 800dd72:	461a      	mov	r2, r3
 800dd74:	685f      	ldr	r7, [r3, #4]
 800dd76:	f852 6b08 	ldr.w	r6, [r2], #8
 800dd7a:	9205      	str	r2, [sp, #20]
 800dd7c:	2f00      	cmp	r7, #0
 800dd7e:	da06      	bge.n	800dd8e <_svfprintf_r+0x32e>
 800dd80:	4276      	negs	r6, r6
 800dd82:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800dd86:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800dd8a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e33d      	b.n	800e40e <_svfprintf_r+0x9ae>
 800dd92:	4633      	mov	r3, r6
 800dd94:	06e9      	lsls	r1, r5, #27
 800dd96:	f853 7b04 	ldr.w	r7, [r3], #4
 800dd9a:	9305      	str	r3, [sp, #20]
 800dd9c:	d502      	bpl.n	800dda4 <_svfprintf_r+0x344>
 800dd9e:	463e      	mov	r6, r7
 800dda0:	17ff      	asrs	r7, r7, #31
 800dda2:	e7eb      	b.n	800dd7c <_svfprintf_r+0x31c>
 800dda4:	066a      	lsls	r2, r5, #25
 800dda6:	d503      	bpl.n	800ddb0 <_svfprintf_r+0x350>
 800dda8:	b23e      	sxth	r6, r7
 800ddaa:	f347 37c0 	sbfx	r7, r7, #15, #1
 800ddae:	e7e5      	b.n	800dd7c <_svfprintf_r+0x31c>
 800ddb0:	05ab      	lsls	r3, r5, #22
 800ddb2:	d5f4      	bpl.n	800dd9e <_svfprintf_r+0x33e>
 800ddb4:	b27e      	sxtb	r6, r7
 800ddb6:	f347 17c0 	sbfx	r7, r7, #7, #1
 800ddba:	e7df      	b.n	800dd7c <_svfprintf_r+0x31c>
 800ddbc:	3607      	adds	r6, #7
 800ddbe:	f026 0307 	bic.w	r3, r6, #7
 800ddc2:	ecb3 8b02 	vldmia	r3!, {d8}
 800ddc6:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 800df88 <_svfprintf_r+0x528>
 800ddca:	eeb0 6bc8 	vabs.f64	d6, d8
 800ddce:	eeb4 6b47 	vcmp.f64	d6, d7
 800ddd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd6:	9305      	str	r3, [sp, #20]
 800ddd8:	dd18      	ble.n	800de0c <_svfprintf_r+0x3ac>
 800ddda:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800ddde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde2:	d502      	bpl.n	800ddea <_svfprintf_r+0x38a>
 800dde4:	232d      	movs	r3, #45	@ 0x2d
 800dde6:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800ddea:	4a69      	ldr	r2, [pc, #420]	@ (800df90 <_svfprintf_r+0x530>)
 800ddec:	4b69      	ldr	r3, [pc, #420]	@ (800df94 <_svfprintf_r+0x534>)
 800ddee:	9904      	ldr	r1, [sp, #16]
 800ddf0:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800ddf4:	2947      	cmp	r1, #71	@ 0x47
 800ddf6:	bfd4      	ite	le
 800ddf8:	4691      	movle	r9, r2
 800ddfa:	4699      	movgt	r9, r3
 800ddfc:	f04f 0b00 	mov.w	fp, #0
 800de00:	f04f 0803 	mov.w	r8, #3
 800de04:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800de08:	f000 bfa4 	b.w	800ed54 <_svfprintf_r+0x12f4>
 800de0c:	eeb4 8b48 	vcmp.f64	d8, d8
 800de10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de14:	d709      	bvc.n	800de2a <_svfprintf_r+0x3ca>
 800de16:	ee18 3a90 	vmov	r3, s17
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	bfbc      	itt	lt
 800de1e:	232d      	movlt	r3, #45	@ 0x2d
 800de20:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 800de24:	4a5c      	ldr	r2, [pc, #368]	@ (800df98 <_svfprintf_r+0x538>)
 800de26:	4b5d      	ldr	r3, [pc, #372]	@ (800df9c <_svfprintf_r+0x53c>)
 800de28:	e7e1      	b.n	800ddee <_svfprintf_r+0x38e>
 800de2a:	9b04      	ldr	r3, [sp, #16]
 800de2c:	2b61      	cmp	r3, #97	@ 0x61
 800de2e:	d027      	beq.n	800de80 <_svfprintf_r+0x420>
 800de30:	2b41      	cmp	r3, #65	@ 0x41
 800de32:	d127      	bne.n	800de84 <_svfprintf_r+0x424>
 800de34:	2358      	movs	r3, #88	@ 0x58
 800de36:	2230      	movs	r2, #48	@ 0x30
 800de38:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800de3c:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 800de40:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800de44:	f045 0502 	orr.w	r5, r5, #2
 800de48:	f340 8089 	ble.w	800df5e <_svfprintf_r+0x4fe>
 800de4c:	9802      	ldr	r0, [sp, #8]
 800de4e:	f108 0101 	add.w	r1, r8, #1
 800de52:	f7ff fbbf 	bl	800d5d4 <_malloc_r>
 800de56:	4681      	mov	r9, r0
 800de58:	2800      	cmp	r0, #0
 800de5a:	f040 8085 	bne.w	800df68 <_svfprintf_r+0x508>
 800de5e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800de62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de66:	f8aa 300c 	strh.w	r3, [sl, #12]
 800de6a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800de6e:	065b      	lsls	r3, r3, #25
 800de70:	f53f ae1a 	bmi.w	800daa8 <_svfprintf_r+0x48>
 800de74:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800de76:	b04b      	add	sp, #300	@ 0x12c
 800de78:	ecbd 8b04 	vpop	{d8-d9}
 800de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de80:	2378      	movs	r3, #120	@ 0x78
 800de82:	e7d8      	b.n	800de36 <_svfprintf_r+0x3d6>
 800de84:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800de88:	d070      	beq.n	800df6c <_svfprintf_r+0x50c>
 800de8a:	9b04      	ldr	r3, [sp, #16]
 800de8c:	f023 0320 	bic.w	r3, r3, #32
 800de90:	2b47      	cmp	r3, #71	@ 0x47
 800de92:	d170      	bne.n	800df76 <_svfprintf_r+0x516>
 800de94:	f1b8 0f00 	cmp.w	r8, #0
 800de98:	d16d      	bne.n	800df76 <_svfprintf_r+0x516>
 800de9a:	46c3      	mov	fp, r8
 800de9c:	f04f 0801 	mov.w	r8, #1
 800dea0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800dea4:	930c      	str	r3, [sp, #48]	@ 0x30
 800dea6:	ee18 3a90 	vmov	r3, s17
 800deaa:	2b00      	cmp	r3, #0
 800deac:	da66      	bge.n	800df7c <_svfprintf_r+0x51c>
 800deae:	eeb1 9b48 	vneg.f64	d9, d8
 800deb2:	232d      	movs	r3, #45	@ 0x2d
 800deb4:	930d      	str	r3, [sp, #52]	@ 0x34
 800deb6:	9b04      	ldr	r3, [sp, #16]
 800deb8:	f023 0720 	bic.w	r7, r3, #32
 800debc:	2f41      	cmp	r7, #65	@ 0x41
 800debe:	f040 81c6 	bne.w	800e24e <_svfprintf_r+0x7ee>
 800dec2:	eeb0 0b49 	vmov.f64	d0, d9
 800dec6:	a818      	add	r0, sp, #96	@ 0x60
 800dec8:	f001 f89a 	bl	800f000 <frexp>
 800decc:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 800ded0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ded4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ded8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dedc:	bf08      	it	eq
 800dede:	2301      	moveq	r3, #1
 800dee0:	9a04      	ldr	r2, [sp, #16]
 800dee2:	bf08      	it	eq
 800dee4:	9318      	streq	r3, [sp, #96]	@ 0x60
 800dee6:	492e      	ldr	r1, [pc, #184]	@ (800dfa0 <_svfprintf_r+0x540>)
 800dee8:	4b2e      	ldr	r3, [pc, #184]	@ (800dfa4 <_svfprintf_r+0x544>)
 800deea:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 800deee:	2a61      	cmp	r2, #97	@ 0x61
 800def0:	bf18      	it	ne
 800def2:	4619      	movne	r1, r3
 800def4:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800def8:	464b      	mov	r3, r9
 800defa:	ee20 0b07 	vmul.f64	d0, d0, d7
 800defe:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800df02:	ee16 0a90 	vmov	r0, s13
 800df06:	5c0e      	ldrb	r6, [r1, r0]
 800df08:	f803 6b01 	strb.w	r6, [r3], #1
 800df0c:	1c56      	adds	r6, r2, #1
 800df0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800df12:	ee30 0b46 	vsub.f64	d0, d0, d6
 800df16:	d006      	beq.n	800df26 <_svfprintf_r+0x4c6>
 800df18:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800df1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df20:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 800df24:	d12e      	bne.n	800df84 <_svfprintf_r+0x524>
 800df26:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800df2a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800df2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df32:	dc39      	bgt.n	800dfa8 <_svfprintf_r+0x548>
 800df34:	eeb4 0b47 	vcmp.f64	d0, d7
 800df38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3c:	d101      	bne.n	800df42 <_svfprintf_r+0x4e2>
 800df3e:	07c6      	lsls	r6, r0, #31
 800df40:	d432      	bmi.n	800dfa8 <_svfprintf_r+0x548>
 800df42:	4619      	mov	r1, r3
 800df44:	189e      	adds	r6, r3, r2
 800df46:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800df4a:	1a70      	subs	r0, r6, r1
 800df4c:	2800      	cmp	r0, #0
 800df4e:	f280 817b 	bge.w	800e248 <_svfprintf_r+0x7e8>
 800df52:	1c51      	adds	r1, r2, #1
 800df54:	3201      	adds	r2, #1
 800df56:	bfb8      	it	lt
 800df58:	2100      	movlt	r1, #0
 800df5a:	440b      	add	r3, r1
 800df5c:	e037      	b.n	800dfce <_svfprintf_r+0x56e>
 800df5e:	f04f 0b00 	mov.w	fp, #0
 800df62:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800df66:	e79b      	b.n	800dea0 <_svfprintf_r+0x440>
 800df68:	4683      	mov	fp, r0
 800df6a:	e799      	b.n	800dea0 <_svfprintf_r+0x440>
 800df6c:	f04f 0b00 	mov.w	fp, #0
 800df70:	f04f 0806 	mov.w	r8, #6
 800df74:	e794      	b.n	800dea0 <_svfprintf_r+0x440>
 800df76:	f04f 0b00 	mov.w	fp, #0
 800df7a:	e791      	b.n	800dea0 <_svfprintf_r+0x440>
 800df7c:	2300      	movs	r3, #0
 800df7e:	eeb0 9b48 	vmov.f64	d9, d8
 800df82:	e797      	b.n	800deb4 <_svfprintf_r+0x454>
 800df84:	4632      	mov	r2, r6
 800df86:	e7b8      	b.n	800defa <_svfprintf_r+0x49a>
 800df88:	ffffffff 	.word	0xffffffff
 800df8c:	7fefffff 	.word	0x7fefffff
 800df90:	08013044 	.word	0x08013044
 800df94:	08013048 	.word	0x08013048
 800df98:	0801304c 	.word	0x0801304c
 800df9c:	08013050 	.word	0x08013050
 800dfa0:	08013054 	.word	0x08013054
 800dfa4:	08013065 	.word	0x08013065
 800dfa8:	7bce      	ldrb	r6, [r1, #15]
 800dfaa:	931c      	str	r3, [sp, #112]	@ 0x70
 800dfac:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800dfb0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800dfb2:	1e42      	subs	r2, r0, #1
 800dfb4:	921c      	str	r2, [sp, #112]	@ 0x70
 800dfb6:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800dfba:	42b2      	cmp	r2, r6
 800dfbc:	f000 8141 	beq.w	800e242 <_svfprintf_r+0x7e2>
 800dfc0:	2a39      	cmp	r2, #57	@ 0x39
 800dfc2:	bf16      	itet	ne
 800dfc4:	3201      	addne	r2, #1
 800dfc6:	7a8a      	ldrbeq	r2, [r1, #10]
 800dfc8:	b2d2      	uxtbne	r2, r2
 800dfca:	f800 2c01 	strb.w	r2, [r0, #-1]
 800dfce:	eba3 0309 	sub.w	r3, r3, r9
 800dfd2:	2f47      	cmp	r7, #71	@ 0x47
 800dfd4:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800dfd6:	9303      	str	r3, [sp, #12]
 800dfd8:	f040 8179 	bne.w	800e2ce <_svfprintf_r+0x86e>
 800dfdc:	1cf1      	adds	r1, r6, #3
 800dfde:	db02      	blt.n	800dfe6 <_svfprintf_r+0x586>
 800dfe0:	4546      	cmp	r6, r8
 800dfe2:	f340 8196 	ble.w	800e312 <_svfprintf_r+0x8b2>
 800dfe6:	9b04      	ldr	r3, [sp, #16]
 800dfe8:	3b02      	subs	r3, #2
 800dfea:	9304      	str	r3, [sp, #16]
 800dfec:	9904      	ldr	r1, [sp, #16]
 800dfee:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800dff2:	f021 0120 	bic.w	r1, r1, #32
 800dff6:	2941      	cmp	r1, #65	@ 0x41
 800dff8:	bf08      	it	eq
 800dffa:	320f      	addeq	r2, #15
 800dffc:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800e000:	bf06      	itte	eq
 800e002:	b2d2      	uxtbeq	r2, r2
 800e004:	2101      	moveq	r1, #1
 800e006:	2100      	movne	r1, #0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	9318      	str	r3, [sp, #96]	@ 0x60
 800e00c:	bfb8      	it	lt
 800e00e:	f1c6 0301 	rsblt	r3, r6, #1
 800e012:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 800e016:	bfb4      	ite	lt
 800e018:	222d      	movlt	r2, #45	@ 0x2d
 800e01a:	222b      	movge	r2, #43	@ 0x2b
 800e01c:	2b09      	cmp	r3, #9
 800e01e:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 800e022:	f340 8169 	ble.w	800e2f8 <_svfprintf_r+0x898>
 800e026:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800e02a:	270a      	movs	r7, #10
 800e02c:	4602      	mov	r2, r0
 800e02e:	fbb3 f6f7 	udiv	r6, r3, r7
 800e032:	fb07 3116 	mls	r1, r7, r6, r3
 800e036:	3130      	adds	r1, #48	@ 0x30
 800e038:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e03c:	4619      	mov	r1, r3
 800e03e:	2963      	cmp	r1, #99	@ 0x63
 800e040:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 800e044:	4633      	mov	r3, r6
 800e046:	dcf1      	bgt.n	800e02c <_svfprintf_r+0x5cc>
 800e048:	3330      	adds	r3, #48	@ 0x30
 800e04a:	1e91      	subs	r1, r2, #2
 800e04c:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e050:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 800e054:	460b      	mov	r3, r1
 800e056:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800e05a:	4283      	cmp	r3, r0
 800e05c:	f0c0 8147 	bcc.w	800e2ee <_svfprintf_r+0x88e>
 800e060:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 800e064:	1a9b      	subs	r3, r3, r2
 800e066:	4281      	cmp	r1, r0
 800e068:	bf88      	it	hi
 800e06a:	2300      	movhi	r3, #0
 800e06c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800e070:	441a      	add	r2, r3
 800e072:	ab1a      	add	r3, sp, #104	@ 0x68
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	9a03      	ldr	r2, [sp, #12]
 800e078:	9311      	str	r3, [sp, #68]	@ 0x44
 800e07a:	2a01      	cmp	r2, #1
 800e07c:	eb03 0802 	add.w	r8, r3, r2
 800e080:	dc01      	bgt.n	800e086 <_svfprintf_r+0x626>
 800e082:	07ea      	lsls	r2, r5, #31
 800e084:	d501      	bpl.n	800e08a <_svfprintf_r+0x62a>
 800e086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e088:	4498      	add	r8, r3
 800e08a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e08e:	2700      	movs	r7, #0
 800e090:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800e094:	930c      	str	r3, [sp, #48]	@ 0x30
 800e096:	9706      	str	r7, [sp, #24]
 800e098:	463e      	mov	r6, r7
 800e09a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 8180 	bne.w	800e3a2 <_svfprintf_r+0x942>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800e0a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0aa:	4543      	cmp	r3, r8
 800e0ac:	bfb8      	it	lt
 800e0ae:	4643      	movlt	r3, r8
 800e0b0:	930d      	str	r3, [sp, #52]	@ 0x34
 800e0b2:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800e0b6:	b113      	cbz	r3, 800e0be <_svfprintf_r+0x65e>
 800e0b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	930d      	str	r3, [sp, #52]	@ 0x34
 800e0be:	f015 0302 	ands.w	r3, r5, #2
 800e0c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e0c4:	bf1e      	ittt	ne
 800e0c6:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 800e0c8:	3302      	addne	r3, #2
 800e0ca:	930d      	strne	r3, [sp, #52]	@ 0x34
 800e0cc:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800e0d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800e0d2:	d120      	bne.n	800e116 <_svfprintf_r+0x6b6>
 800e0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e0d8:	1a9b      	subs	r3, r3, r2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	dd1b      	ble.n	800e116 <_svfprintf_r+0x6b6>
 800e0de:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800e0e2:	49a5      	ldr	r1, [pc, #660]	@ (800e378 <_svfprintf_r+0x918>)
 800e0e4:	6021      	str	r1, [r4, #0]
 800e0e6:	2b10      	cmp	r3, #16
 800e0e8:	f102 0201 	add.w	r2, r2, #1
 800e0ec:	f104 0008 	add.w	r0, r4, #8
 800e0f0:	f300 828c 	bgt.w	800e60c <_svfprintf_r+0xbac>
 800e0f4:	eb0c 0103 	add.w	r1, ip, r3
 800e0f8:	2a07      	cmp	r2, #7
 800e0fa:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e0fe:	6063      	str	r3, [r4, #4]
 800e100:	f340 8299 	ble.w	800e636 <_svfprintf_r+0xbd6>
 800e104:	9802      	ldr	r0, [sp, #8]
 800e106:	aa1e      	add	r2, sp, #120	@ 0x78
 800e108:	4651      	mov	r1, sl
 800e10a:	f002 f8eb 	bl	80102e4 <__ssprint_r>
 800e10e:	2800      	cmp	r0, #0
 800e110:	f040 85c7 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e114:	ac21      	add	r4, sp, #132	@ 0x84
 800e116:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 800e11a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e11c:	b16a      	cbz	r2, 800e13a <_svfprintf_r+0x6da>
 800e11e:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 800e122:	6022      	str	r2, [r4, #0]
 800e124:	2201      	movs	r2, #1
 800e126:	4413      	add	r3, r2
 800e128:	9320      	str	r3, [sp, #128]	@ 0x80
 800e12a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e12c:	6062      	str	r2, [r4, #4]
 800e12e:	4413      	add	r3, r2
 800e130:	2b07      	cmp	r3, #7
 800e132:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e134:	f300 8281 	bgt.w	800e63a <_svfprintf_r+0xbda>
 800e138:	3408      	adds	r4, #8
 800e13a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e13c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e13e:	b162      	cbz	r2, 800e15a <_svfprintf_r+0x6fa>
 800e140:	aa17      	add	r2, sp, #92	@ 0x5c
 800e142:	6022      	str	r2, [r4, #0]
 800e144:	2202      	movs	r2, #2
 800e146:	4413      	add	r3, r2
 800e148:	9320      	str	r3, [sp, #128]	@ 0x80
 800e14a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e14c:	6062      	str	r2, [r4, #4]
 800e14e:	3301      	adds	r3, #1
 800e150:	2b07      	cmp	r3, #7
 800e152:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e154:	f300 827b 	bgt.w	800e64e <_svfprintf_r+0xbee>
 800e158:	3408      	adds	r4, #8
 800e15a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e15c:	2b80      	cmp	r3, #128	@ 0x80
 800e15e:	d120      	bne.n	800e1a2 <_svfprintf_r+0x742>
 800e160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e162:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e164:	1a9b      	subs	r3, r3, r2
 800e166:	2b00      	cmp	r3, #0
 800e168:	dd1b      	ble.n	800e1a2 <_svfprintf_r+0x742>
 800e16a:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800e16e:	4983      	ldr	r1, [pc, #524]	@ (800e37c <_svfprintf_r+0x91c>)
 800e170:	6021      	str	r1, [r4, #0]
 800e172:	2b10      	cmp	r3, #16
 800e174:	f102 0201 	add.w	r2, r2, #1
 800e178:	f104 0008 	add.w	r0, r4, #8
 800e17c:	f300 8271 	bgt.w	800e662 <_svfprintf_r+0xc02>
 800e180:	eb0c 0103 	add.w	r1, ip, r3
 800e184:	2a07      	cmp	r2, #7
 800e186:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e18a:	6063      	str	r3, [r4, #4]
 800e18c:	f340 827e 	ble.w	800e68c <_svfprintf_r+0xc2c>
 800e190:	9802      	ldr	r0, [sp, #8]
 800e192:	aa1e      	add	r2, sp, #120	@ 0x78
 800e194:	4651      	mov	r1, sl
 800e196:	f002 f8a5 	bl	80102e4 <__ssprint_r>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	f040 8581 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e1a0:	ac21      	add	r4, sp, #132	@ 0x84
 800e1a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1a4:	eba3 0308 	sub.w	r3, r3, r8
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800e1ac:	dd1c      	ble.n	800e1e8 <_svfprintf_r+0x788>
 800e1ae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800e1b0:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800e1b4:	2810      	cmp	r0, #16
 800e1b6:	4871      	ldr	r0, [pc, #452]	@ (800e37c <_svfprintf_r+0x91c>)
 800e1b8:	6020      	str	r0, [r4, #0]
 800e1ba:	f102 0201 	add.w	r2, r2, #1
 800e1be:	f104 0108 	add.w	r1, r4, #8
 800e1c2:	f300 8265 	bgt.w	800e690 <_svfprintf_r+0xc30>
 800e1c6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800e1c8:	6060      	str	r0, [r4, #4]
 800e1ca:	4403      	add	r3, r0
 800e1cc:	2a07      	cmp	r2, #7
 800e1ce:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800e1d2:	f340 8272 	ble.w	800e6ba <_svfprintf_r+0xc5a>
 800e1d6:	9802      	ldr	r0, [sp, #8]
 800e1d8:	aa1e      	add	r2, sp, #120	@ 0x78
 800e1da:	4651      	mov	r1, sl
 800e1dc:	f002 f882 	bl	80102e4 <__ssprint_r>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	f040 855e 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e1e6:	ac21      	add	r4, sp, #132	@ 0x84
 800e1e8:	05e9      	lsls	r1, r5, #23
 800e1ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e1ec:	f100 826c 	bmi.w	800e6c8 <_svfprintf_r+0xc68>
 800e1f0:	4443      	add	r3, r8
 800e1f2:	9320      	str	r3, [sp, #128]	@ 0x80
 800e1f4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	2b07      	cmp	r3, #7
 800e1fa:	e9c4 9800 	strd	r9, r8, [r4]
 800e1fe:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e200:	f300 82a4 	bgt.w	800e74c <_svfprintf_r+0xcec>
 800e204:	3408      	adds	r4, #8
 800e206:	076a      	lsls	r2, r5, #29
 800e208:	f100 852d 	bmi.w	800ec66 <_svfprintf_r+0x1206>
 800e20c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800e210:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e212:	428a      	cmp	r2, r1
 800e214:	bfac      	ite	ge
 800e216:	189b      	addge	r3, r3, r2
 800e218:	185b      	addlt	r3, r3, r1
 800e21a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e21c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e21e:	b13b      	cbz	r3, 800e230 <_svfprintf_r+0x7d0>
 800e220:	9802      	ldr	r0, [sp, #8]
 800e222:	aa1e      	add	r2, sp, #120	@ 0x78
 800e224:	4651      	mov	r1, sl
 800e226:	f002 f85d 	bl	80102e4 <__ssprint_r>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	f040 8539 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e230:	2300      	movs	r3, #0
 800e232:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e234:	f1bb 0f00 	cmp.w	fp, #0
 800e238:	f040 854f 	bne.w	800ecda <_svfprintf_r+0x127a>
 800e23c:	9e05      	ldr	r6, [sp, #20]
 800e23e:	ac21      	add	r4, sp, #132	@ 0x84
 800e240:	e0bc      	b.n	800e3bc <_svfprintf_r+0x95c>
 800e242:	f800 cc01 	strb.w	ip, [r0, #-1]
 800e246:	e6b3      	b.n	800dfb0 <_svfprintf_r+0x550>
 800e248:	f801 cb01 	strb.w	ip, [r1], #1
 800e24c:	e67d      	b.n	800df4a <_svfprintf_r+0x4ea>
 800e24e:	2f46      	cmp	r7, #70	@ 0x46
 800e250:	d005      	beq.n	800e25e <_svfprintf_r+0x7fe>
 800e252:	2f45      	cmp	r7, #69	@ 0x45
 800e254:	d117      	bne.n	800e286 <_svfprintf_r+0x826>
 800e256:	f108 0601 	add.w	r6, r8, #1
 800e25a:	2102      	movs	r1, #2
 800e25c:	e001      	b.n	800e262 <_svfprintf_r+0x802>
 800e25e:	4646      	mov	r6, r8
 800e260:	2103      	movs	r1, #3
 800e262:	ab1c      	add	r3, sp, #112	@ 0x70
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	ab19      	add	r3, sp, #100	@ 0x64
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	9802      	ldr	r0, [sp, #8]
 800e26c:	eeb0 0b49 	vmov.f64	d0, d9
 800e270:	ab18      	add	r3, sp, #96	@ 0x60
 800e272:	4632      	mov	r2, r6
 800e274:	f000 ffc4 	bl	800f200 <_dtoa_r>
 800e278:	2f47      	cmp	r7, #71	@ 0x47
 800e27a:	4681      	mov	r9, r0
 800e27c:	d115      	bne.n	800e2aa <_svfprintf_r+0x84a>
 800e27e:	07e8      	lsls	r0, r5, #31
 800e280:	d403      	bmi.n	800e28a <_svfprintf_r+0x82a>
 800e282:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e284:	e6a3      	b.n	800dfce <_svfprintf_r+0x56e>
 800e286:	4646      	mov	r6, r8
 800e288:	e7e7      	b.n	800e25a <_svfprintf_r+0x7fa>
 800e28a:	eb09 0306 	add.w	r3, r9, r6
 800e28e:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e296:	bf08      	it	eq
 800e298:	931c      	streq	r3, [sp, #112]	@ 0x70
 800e29a:	2130      	movs	r1, #48	@ 0x30
 800e29c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d9ef      	bls.n	800e282 <_svfprintf_r+0x822>
 800e2a2:	1c50      	adds	r0, r2, #1
 800e2a4:	901c      	str	r0, [sp, #112]	@ 0x70
 800e2a6:	7011      	strb	r1, [r2, #0]
 800e2a8:	e7f8      	b.n	800e29c <_svfprintf_r+0x83c>
 800e2aa:	2f46      	cmp	r7, #70	@ 0x46
 800e2ac:	eb00 0306 	add.w	r3, r0, r6
 800e2b0:	d1ed      	bne.n	800e28e <_svfprintf_r+0x82e>
 800e2b2:	7802      	ldrb	r2, [r0, #0]
 800e2b4:	2a30      	cmp	r2, #48	@ 0x30
 800e2b6:	d107      	bne.n	800e2c8 <_svfprintf_r+0x868>
 800e2b8:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	bf1c      	itt	ne
 800e2c2:	f1c6 0601 	rsbne	r6, r6, #1
 800e2c6:	9618      	strne	r6, [sp, #96]	@ 0x60
 800e2c8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e2ca:	4413      	add	r3, r2
 800e2cc:	e7df      	b.n	800e28e <_svfprintf_r+0x82e>
 800e2ce:	2f46      	cmp	r7, #70	@ 0x46
 800e2d0:	f47f ae8c 	bne.w	800dfec <_svfprintf_r+0x58c>
 800e2d4:	f005 0301 	and.w	r3, r5, #1
 800e2d8:	2e00      	cmp	r6, #0
 800e2da:	ea43 0308 	orr.w	r3, r3, r8
 800e2de:	dd25      	ble.n	800e32c <_svfprintf_r+0x8cc>
 800e2e0:	b37b      	cbz	r3, 800e342 <_svfprintf_r+0x8e2>
 800e2e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e4:	18f3      	adds	r3, r6, r3
 800e2e6:	4498      	add	r8, r3
 800e2e8:	2366      	movs	r3, #102	@ 0x66
 800e2ea:	9304      	str	r3, [sp, #16]
 800e2ec:	e02f      	b.n	800e34e <_svfprintf_r+0x8ee>
 800e2ee:	f813 7b01 	ldrb.w	r7, [r3], #1
 800e2f2:	f806 7f01 	strb.w	r7, [r6, #1]!
 800e2f6:	e6b0      	b.n	800e05a <_svfprintf_r+0x5fa>
 800e2f8:	b941      	cbnz	r1, 800e30c <_svfprintf_r+0x8ac>
 800e2fa:	2230      	movs	r2, #48	@ 0x30
 800e2fc:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 800e300:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 800e304:	3330      	adds	r3, #48	@ 0x30
 800e306:	f802 3b01 	strb.w	r3, [r2], #1
 800e30a:	e6b2      	b.n	800e072 <_svfprintf_r+0x612>
 800e30c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800e310:	e7f8      	b.n	800e304 <_svfprintf_r+0x8a4>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	429e      	cmp	r6, r3
 800e316:	da0d      	bge.n	800e334 <_svfprintf_r+0x8d4>
 800e318:	9b03      	ldr	r3, [sp, #12]
 800e31a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e31c:	2e00      	cmp	r6, #0
 800e31e:	eb03 0802 	add.w	r8, r3, r2
 800e322:	dc0c      	bgt.n	800e33e <_svfprintf_r+0x8de>
 800e324:	f1c6 0301 	rsb	r3, r6, #1
 800e328:	4498      	add	r8, r3
 800e32a:	e008      	b.n	800e33e <_svfprintf_r+0x8de>
 800e32c:	b15b      	cbz	r3, 800e346 <_svfprintf_r+0x8e6>
 800e32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e330:	3301      	adds	r3, #1
 800e332:	e7d8      	b.n	800e2e6 <_svfprintf_r+0x886>
 800e334:	07eb      	lsls	r3, r5, #31
 800e336:	d51d      	bpl.n	800e374 <_svfprintf_r+0x914>
 800e338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e33a:	eb06 0803 	add.w	r8, r6, r3
 800e33e:	2367      	movs	r3, #103	@ 0x67
 800e340:	e7d3      	b.n	800e2ea <_svfprintf_r+0x88a>
 800e342:	46b0      	mov	r8, r6
 800e344:	e7d0      	b.n	800e2e8 <_svfprintf_r+0x888>
 800e346:	2366      	movs	r3, #102	@ 0x66
 800e348:	9304      	str	r3, [sp, #16]
 800e34a:	f04f 0801 	mov.w	r8, #1
 800e34e:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800e352:	9306      	str	r3, [sp, #24]
 800e354:	d023      	beq.n	800e39e <_svfprintf_r+0x93e>
 800e356:	2700      	movs	r7, #0
 800e358:	2e00      	cmp	r6, #0
 800e35a:	9706      	str	r7, [sp, #24]
 800e35c:	f77f ae9d 	ble.w	800e09a <_svfprintf_r+0x63a>
 800e360:	9b07      	ldr	r3, [sp, #28]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2bff      	cmp	r3, #255	@ 0xff
 800e366:	d10b      	bne.n	800e380 <_svfprintf_r+0x920>
 800e368:	9b06      	ldr	r3, [sp, #24]
 800e36a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e36c:	443b      	add	r3, r7
 800e36e:	fb02 8803 	mla	r8, r2, r3, r8
 800e372:	e692      	b.n	800e09a <_svfprintf_r+0x63a>
 800e374:	46b0      	mov	r8, r6
 800e376:	e7e2      	b.n	800e33e <_svfprintf_r+0x8de>
 800e378:	08013088 	.word	0x08013088
 800e37c:	08013078 	.word	0x08013078
 800e380:	42b3      	cmp	r3, r6
 800e382:	daf1      	bge.n	800e368 <_svfprintf_r+0x908>
 800e384:	1af6      	subs	r6, r6, r3
 800e386:	9b07      	ldr	r3, [sp, #28]
 800e388:	785b      	ldrb	r3, [r3, #1]
 800e38a:	b133      	cbz	r3, 800e39a <_svfprintf_r+0x93a>
 800e38c:	9b06      	ldr	r3, [sp, #24]
 800e38e:	3301      	adds	r3, #1
 800e390:	9306      	str	r3, [sp, #24]
 800e392:	9b07      	ldr	r3, [sp, #28]
 800e394:	3301      	adds	r3, #1
 800e396:	9307      	str	r3, [sp, #28]
 800e398:	e7e2      	b.n	800e360 <_svfprintf_r+0x900>
 800e39a:	3701      	adds	r7, #1
 800e39c:	e7e0      	b.n	800e360 <_svfprintf_r+0x900>
 800e39e:	9f06      	ldr	r7, [sp, #24]
 800e3a0:	e67b      	b.n	800e09a <_svfprintf_r+0x63a>
 800e3a2:	232d      	movs	r3, #45	@ 0x2d
 800e3a4:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e3a8:	e67b      	b.n	800e0a2 <_svfprintf_r+0x642>
 800e3aa:	06af      	lsls	r7, r5, #26
 800e3ac:	d50a      	bpl.n	800e3c4 <_svfprintf_r+0x964>
 800e3ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3b0:	6833      	ldr	r3, [r6, #0]
 800e3b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3b4:	17d2      	asrs	r2, r2, #31
 800e3b6:	e9c3 1200 	strd	r1, r2, [r3]
 800e3ba:	3604      	adds	r6, #4
 800e3bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e3c0:	f7ff bb87 	b.w	800dad2 <_svfprintf_r+0x72>
 800e3c4:	06e8      	lsls	r0, r5, #27
 800e3c6:	d503      	bpl.n	800e3d0 <_svfprintf_r+0x970>
 800e3c8:	6833      	ldr	r3, [r6, #0]
 800e3ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	e7f4      	b.n	800e3ba <_svfprintf_r+0x95a>
 800e3d0:	0669      	lsls	r1, r5, #25
 800e3d2:	d503      	bpl.n	800e3dc <_svfprintf_r+0x97c>
 800e3d4:	6833      	ldr	r3, [r6, #0]
 800e3d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3d8:	801a      	strh	r2, [r3, #0]
 800e3da:	e7ee      	b.n	800e3ba <_svfprintf_r+0x95a>
 800e3dc:	05aa      	lsls	r2, r5, #22
 800e3de:	d5f3      	bpl.n	800e3c8 <_svfprintf_r+0x968>
 800e3e0:	6833      	ldr	r3, [r6, #0]
 800e3e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3e4:	701a      	strb	r2, [r3, #0]
 800e3e6:	e7e8      	b.n	800e3ba <_svfprintf_r+0x95a>
 800e3e8:	f045 0510 	orr.w	r5, r5, #16
 800e3ec:	f015 0320 	ands.w	r3, r5, #32
 800e3f0:	d020      	beq.n	800e434 <_svfprintf_r+0x9d4>
 800e3f2:	3607      	adds	r6, #7
 800e3f4:	f026 0307 	bic.w	r3, r6, #7
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	685f      	ldr	r7, [r3, #4]
 800e3fc:	f852 6b08 	ldr.w	r6, [r2], #8
 800e400:	9205      	str	r2, [sp, #20]
 800e402:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e406:	2300      	movs	r3, #0
 800e408:	2200      	movs	r2, #0
 800e40a:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800e40e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800e412:	f000 8473 	beq.w	800ecfc <_svfprintf_r+0x129c>
 800e416:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800e41a:	9206      	str	r2, [sp, #24]
 800e41c:	ea56 0207 	orrs.w	r2, r6, r7
 800e420:	f040 8471 	bne.w	800ed06 <_svfprintf_r+0x12a6>
 800e424:	f1b8 0f00 	cmp.w	r8, #0
 800e428:	f000 80dc 	beq.w	800e5e4 <_svfprintf_r+0xb84>
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	f040 846d 	bne.w	800ed0c <_svfprintf_r+0x12ac>
 800e432:	e083      	b.n	800e53c <_svfprintf_r+0xadc>
 800e434:	4632      	mov	r2, r6
 800e436:	f015 0710 	ands.w	r7, r5, #16
 800e43a:	f852 6b04 	ldr.w	r6, [r2], #4
 800e43e:	9205      	str	r2, [sp, #20]
 800e440:	d001      	beq.n	800e446 <_svfprintf_r+0x9e6>
 800e442:	461f      	mov	r7, r3
 800e444:	e7dd      	b.n	800e402 <_svfprintf_r+0x9a2>
 800e446:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800e44a:	d001      	beq.n	800e450 <_svfprintf_r+0x9f0>
 800e44c:	b2b6      	uxth	r6, r6
 800e44e:	e7d8      	b.n	800e402 <_svfprintf_r+0x9a2>
 800e450:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800e454:	d0d5      	beq.n	800e402 <_svfprintf_r+0x9a2>
 800e456:	b2f6      	uxtb	r6, r6
 800e458:	e7f3      	b.n	800e442 <_svfprintf_r+0x9e2>
 800e45a:	4633      	mov	r3, r6
 800e45c:	2278      	movs	r2, #120	@ 0x78
 800e45e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e462:	9305      	str	r3, [sp, #20]
 800e464:	f647 0330 	movw	r3, #30768	@ 0x7830
 800e468:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 800e46c:	4b94      	ldr	r3, [pc, #592]	@ (800e6c0 <_svfprintf_r+0xc60>)
 800e46e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e470:	2700      	movs	r7, #0
 800e472:	f045 0502 	orr.w	r5, r5, #2
 800e476:	2302      	movs	r3, #2
 800e478:	9204      	str	r2, [sp, #16]
 800e47a:	e7c5      	b.n	800e408 <_svfprintf_r+0x9a8>
 800e47c:	4633      	mov	r3, r6
 800e47e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800e482:	f853 9b04 	ldr.w	r9, [r3], #4
 800e486:	9305      	str	r3, [sp, #20]
 800e488:	f04f 0600 	mov.w	r6, #0
 800e48c:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 800e490:	d00f      	beq.n	800e4b2 <_svfprintf_r+0xa52>
 800e492:	4642      	mov	r2, r8
 800e494:	4631      	mov	r1, r6
 800e496:	4648      	mov	r0, r9
 800e498:	f7f1 ff22 	bl	80002e0 <memchr>
 800e49c:	4683      	mov	fp, r0
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	f43f acb0 	beq.w	800de04 <_svfprintf_r+0x3a4>
 800e4a4:	eba0 0809 	sub.w	r8, r0, r9
 800e4a8:	46b3      	mov	fp, r6
 800e4aa:	960c      	str	r6, [sp, #48]	@ 0x30
 800e4ac:	4637      	mov	r7, r6
 800e4ae:	9606      	str	r6, [sp, #24]
 800e4b0:	e5fa      	b.n	800e0a8 <_svfprintf_r+0x648>
 800e4b2:	4648      	mov	r0, r9
 800e4b4:	f7f1 ff64 	bl	8000380 <strlen>
 800e4b8:	46b3      	mov	fp, r6
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	e4a2      	b.n	800de04 <_svfprintf_r+0x3a4>
 800e4be:	f045 0510 	orr.w	r5, r5, #16
 800e4c2:	f015 0320 	ands.w	r3, r5, #32
 800e4c6:	d009      	beq.n	800e4dc <_svfprintf_r+0xa7c>
 800e4c8:	3607      	adds	r6, #7
 800e4ca:	f026 0307 	bic.w	r3, r6, #7
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	685f      	ldr	r7, [r3, #4]
 800e4d2:	f852 6b08 	ldr.w	r6, [r2], #8
 800e4d6:	9205      	str	r2, [sp, #20]
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e795      	b.n	800e408 <_svfprintf_r+0x9a8>
 800e4dc:	4632      	mov	r2, r6
 800e4de:	f015 0710 	ands.w	r7, r5, #16
 800e4e2:	f852 6b04 	ldr.w	r6, [r2], #4
 800e4e6:	9205      	str	r2, [sp, #20]
 800e4e8:	d001      	beq.n	800e4ee <_svfprintf_r+0xa8e>
 800e4ea:	461f      	mov	r7, r3
 800e4ec:	e7f4      	b.n	800e4d8 <_svfprintf_r+0xa78>
 800e4ee:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800e4f2:	d001      	beq.n	800e4f8 <_svfprintf_r+0xa98>
 800e4f4:	b2b6      	uxth	r6, r6
 800e4f6:	e7ef      	b.n	800e4d8 <_svfprintf_r+0xa78>
 800e4f8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800e4fc:	d0ec      	beq.n	800e4d8 <_svfprintf_r+0xa78>
 800e4fe:	b2f6      	uxtb	r6, r6
 800e500:	e7f3      	b.n	800e4ea <_svfprintf_r+0xa8a>
 800e502:	4b70      	ldr	r3, [pc, #448]	@ (800e6c4 <_svfprintf_r+0xc64>)
 800e504:	f7ff bb7a 	b.w	800dbfc <_svfprintf_r+0x19c>
 800e508:	4632      	mov	r2, r6
 800e50a:	f015 0710 	ands.w	r7, r5, #16
 800e50e:	f852 6b04 	ldr.w	r6, [r2], #4
 800e512:	9205      	str	r2, [sp, #20]
 800e514:	d002      	beq.n	800e51c <_svfprintf_r+0xabc>
 800e516:	461f      	mov	r7, r3
 800e518:	f7ff bb7d 	b.w	800dc16 <_svfprintf_r+0x1b6>
 800e51c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800e520:	d002      	beq.n	800e528 <_svfprintf_r+0xac8>
 800e522:	b2b6      	uxth	r6, r6
 800e524:	f7ff bb77 	b.w	800dc16 <_svfprintf_r+0x1b6>
 800e528:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800e52c:	f43f ab73 	beq.w	800dc16 <_svfprintf_r+0x1b6>
 800e530:	b2f6      	uxtb	r6, r6
 800e532:	e7f0      	b.n	800e516 <_svfprintf_r+0xab6>
 800e534:	2e0a      	cmp	r6, #10
 800e536:	f177 0300 	sbcs.w	r3, r7, #0
 800e53a:	d206      	bcs.n	800e54a <_svfprintf_r+0xaea>
 800e53c:	3630      	adds	r6, #48	@ 0x30
 800e53e:	b2f6      	uxtb	r6, r6
 800e540:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 800e544:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 800e548:	e3fc      	b.n	800ed44 <_svfprintf_r+0x12e4>
 800e54a:	2300      	movs	r3, #0
 800e54c:	9303      	str	r3, [sp, #12]
 800e54e:	9b06      	ldr	r3, [sp, #24]
 800e550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e554:	ad4a      	add	r5, sp, #296	@ 0x128
 800e556:	930c      	str	r3, [sp, #48]	@ 0x30
 800e558:	220a      	movs	r2, #10
 800e55a:	2300      	movs	r3, #0
 800e55c:	4630      	mov	r0, r6
 800e55e:	4639      	mov	r1, r7
 800e560:	f7f1 ff16 	bl	8000390 <__aeabi_uldivmod>
 800e564:	3230      	adds	r2, #48	@ 0x30
 800e566:	f805 2c01 	strb.w	r2, [r5, #-1]
 800e56a:	9a03      	ldr	r2, [sp, #12]
 800e56c:	3201      	adds	r2, #1
 800e56e:	9203      	str	r2, [sp, #12]
 800e570:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e572:	4603      	mov	r3, r0
 800e574:	468b      	mov	fp, r1
 800e576:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800e57a:	b1e2      	cbz	r2, 800e5b6 <_svfprintf_r+0xb56>
 800e57c:	9a07      	ldr	r2, [sp, #28]
 800e57e:	9903      	ldr	r1, [sp, #12]
 800e580:	7812      	ldrb	r2, [r2, #0]
 800e582:	4291      	cmp	r1, r2
 800e584:	d117      	bne.n	800e5b6 <_svfprintf_r+0xb56>
 800e586:	29ff      	cmp	r1, #255	@ 0xff
 800e588:	d015      	beq.n	800e5b6 <_svfprintf_r+0xb56>
 800e58a:	2e0a      	cmp	r6, #10
 800e58c:	f177 0200 	sbcs.w	r2, r7, #0
 800e590:	d311      	bcc.n	800e5b6 <_svfprintf_r+0xb56>
 800e592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e594:	9003      	str	r0, [sp, #12]
 800e596:	eba9 0903 	sub.w	r9, r9, r3
 800e59a:	461a      	mov	r2, r3
 800e59c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e59e:	4648      	mov	r0, r9
 800e5a0:	f000 fce5 	bl	800ef6e <strncpy>
 800e5a4:	9b07      	ldr	r3, [sp, #28]
 800e5a6:	785a      	ldrb	r2, [r3, #1]
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	b11a      	cbz	r2, 800e5b4 <_svfprintf_r+0xb54>
 800e5ac:	9a07      	ldr	r2, [sp, #28]
 800e5ae:	3201      	adds	r2, #1
 800e5b0:	9207      	str	r2, [sp, #28]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	9203      	str	r2, [sp, #12]
 800e5b6:	2e0a      	cmp	r6, #10
 800e5b8:	f177 0700 	sbcs.w	r7, r7, #0
 800e5bc:	f0c0 83c2 	bcc.w	800ed44 <_svfprintf_r+0x12e4>
 800e5c0:	461e      	mov	r6, r3
 800e5c2:	465f      	mov	r7, fp
 800e5c4:	464d      	mov	r5, r9
 800e5c6:	e7c7      	b.n	800e558 <_svfprintf_r+0xaf8>
 800e5c8:	f006 030f 	and.w	r3, r6, #15
 800e5cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e5ce:	0936      	lsrs	r6, r6, #4
 800e5d0:	5cd3      	ldrb	r3, [r2, r3]
 800e5d2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800e5d6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800e5da:	093f      	lsrs	r7, r7, #4
 800e5dc:	ea56 0307 	orrs.w	r3, r6, r7
 800e5e0:	d1f2      	bne.n	800e5c8 <_svfprintf_r+0xb68>
 800e5e2:	e3af      	b.n	800ed44 <_svfprintf_r+0x12e4>
 800e5e4:	b91b      	cbnz	r3, 800e5ee <_svfprintf_r+0xb8e>
 800e5e6:	07e8      	lsls	r0, r5, #31
 800e5e8:	d501      	bpl.n	800e5ee <_svfprintf_r+0xb8e>
 800e5ea:	2630      	movs	r6, #48	@ 0x30
 800e5ec:	e7a8      	b.n	800e540 <_svfprintf_r+0xae0>
 800e5ee:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800e5f2:	e3a7      	b.n	800ed44 <_svfprintf_r+0x12e4>
 800e5f4:	9b04      	ldr	r3, [sp, #16]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 8375 	beq.w	800ece6 <_svfprintf_r+0x1286>
 800e5fc:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800e600:	2300      	movs	r3, #0
 800e602:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e606:	9605      	str	r6, [sp, #20]
 800e608:	f7ff bba2 	b.w	800dd50 <_svfprintf_r+0x2f0>
 800e60c:	2110      	movs	r1, #16
 800e60e:	6061      	str	r1, [r4, #4]
 800e610:	2a07      	cmp	r2, #7
 800e612:	4461      	add	r1, ip
 800e614:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e618:	dd0a      	ble.n	800e630 <_svfprintf_r+0xbd0>
 800e61a:	9802      	ldr	r0, [sp, #8]
 800e61c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e61e:	aa1e      	add	r2, sp, #120	@ 0x78
 800e620:	4651      	mov	r1, sl
 800e622:	f001 fe5f 	bl	80102e4 <__ssprint_r>
 800e626:	2800      	cmp	r0, #0
 800e628:	f040 833b 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e62c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e62e:	a821      	add	r0, sp, #132	@ 0x84
 800e630:	3b10      	subs	r3, #16
 800e632:	4604      	mov	r4, r0
 800e634:	e553      	b.n	800e0de <_svfprintf_r+0x67e>
 800e636:	4604      	mov	r4, r0
 800e638:	e56d      	b.n	800e116 <_svfprintf_r+0x6b6>
 800e63a:	9802      	ldr	r0, [sp, #8]
 800e63c:	aa1e      	add	r2, sp, #120	@ 0x78
 800e63e:	4651      	mov	r1, sl
 800e640:	f001 fe50 	bl	80102e4 <__ssprint_r>
 800e644:	2800      	cmp	r0, #0
 800e646:	f040 832c 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e64a:	ac21      	add	r4, sp, #132	@ 0x84
 800e64c:	e575      	b.n	800e13a <_svfprintf_r+0x6da>
 800e64e:	9802      	ldr	r0, [sp, #8]
 800e650:	aa1e      	add	r2, sp, #120	@ 0x78
 800e652:	4651      	mov	r1, sl
 800e654:	f001 fe46 	bl	80102e4 <__ssprint_r>
 800e658:	2800      	cmp	r0, #0
 800e65a:	f040 8322 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e65e:	ac21      	add	r4, sp, #132	@ 0x84
 800e660:	e57b      	b.n	800e15a <_svfprintf_r+0x6fa>
 800e662:	2110      	movs	r1, #16
 800e664:	6061      	str	r1, [r4, #4]
 800e666:	2a07      	cmp	r2, #7
 800e668:	4461      	add	r1, ip
 800e66a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e66e:	dd0a      	ble.n	800e686 <_svfprintf_r+0xc26>
 800e670:	9802      	ldr	r0, [sp, #8]
 800e672:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e674:	aa1e      	add	r2, sp, #120	@ 0x78
 800e676:	4651      	mov	r1, sl
 800e678:	f001 fe34 	bl	80102e4 <__ssprint_r>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	f040 8310 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e682:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e684:	a821      	add	r0, sp, #132	@ 0x84
 800e686:	3b10      	subs	r3, #16
 800e688:	4604      	mov	r4, r0
 800e68a:	e56e      	b.n	800e16a <_svfprintf_r+0x70a>
 800e68c:	4604      	mov	r4, r0
 800e68e:	e588      	b.n	800e1a2 <_svfprintf_r+0x742>
 800e690:	2010      	movs	r0, #16
 800e692:	4403      	add	r3, r0
 800e694:	2a07      	cmp	r2, #7
 800e696:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800e69a:	6060      	str	r0, [r4, #4]
 800e69c:	dd08      	ble.n	800e6b0 <_svfprintf_r+0xc50>
 800e69e:	9802      	ldr	r0, [sp, #8]
 800e6a0:	aa1e      	add	r2, sp, #120	@ 0x78
 800e6a2:	4651      	mov	r1, sl
 800e6a4:	f001 fe1e 	bl	80102e4 <__ssprint_r>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	f040 82fa 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e6ae:	a921      	add	r1, sp, #132	@ 0x84
 800e6b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6b2:	3b10      	subs	r3, #16
 800e6b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6b6:	460c      	mov	r4, r1
 800e6b8:	e579      	b.n	800e1ae <_svfprintf_r+0x74e>
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	e594      	b.n	800e1e8 <_svfprintf_r+0x788>
 800e6be:	bf00      	nop
 800e6c0:	08013054 	.word	0x08013054
 800e6c4:	08013065 	.word	0x08013065
 800e6c8:	9a04      	ldr	r2, [sp, #16]
 800e6ca:	2a65      	cmp	r2, #101	@ 0x65
 800e6cc:	f340 823e 	ble.w	800eb4c <_svfprintf_r+0x10ec>
 800e6d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d8:	d169      	bne.n	800e7ae <_svfprintf_r+0xd4e>
 800e6da:	4a72      	ldr	r2, [pc, #456]	@ (800e8a4 <_svfprintf_r+0xe44>)
 800e6dc:	6022      	str	r2, [r4, #0]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	4413      	add	r3, r2
 800e6e2:	9320      	str	r3, [sp, #128]	@ 0x80
 800e6e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e6e6:	6062      	str	r2, [r4, #4]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e6ee:	dc37      	bgt.n	800e760 <_svfprintf_r+0xd00>
 800e6f0:	3408      	adds	r4, #8
 800e6f2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e6f4:	9a03      	ldr	r2, [sp, #12]
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	db02      	blt.n	800e700 <_svfprintf_r+0xca0>
 800e6fa:	07ea      	lsls	r2, r5, #31
 800e6fc:	f57f ad83 	bpl.w	800e206 <_svfprintf_r+0x7a6>
 800e700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e702:	6023      	str	r3, [r4, #0]
 800e704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e708:	6063      	str	r3, [r4, #4]
 800e70a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e70c:	4413      	add	r3, r2
 800e70e:	9320      	str	r3, [sp, #128]	@ 0x80
 800e710:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e712:	3301      	adds	r3, #1
 800e714:	2b07      	cmp	r3, #7
 800e716:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e718:	dc2c      	bgt.n	800e774 <_svfprintf_r+0xd14>
 800e71a:	3408      	adds	r4, #8
 800e71c:	9b03      	ldr	r3, [sp, #12]
 800e71e:	1e5e      	subs	r6, r3, #1
 800e720:	2e00      	cmp	r6, #0
 800e722:	f77f ad70 	ble.w	800e206 <_svfprintf_r+0x7a6>
 800e726:	4f60      	ldr	r7, [pc, #384]	@ (800e8a8 <_svfprintf_r+0xe48>)
 800e728:	f04f 0810 	mov.w	r8, #16
 800e72c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800e730:	2e10      	cmp	r6, #16
 800e732:	f103 0301 	add.w	r3, r3, #1
 800e736:	f104 0108 	add.w	r1, r4, #8
 800e73a:	6027      	str	r7, [r4, #0]
 800e73c:	dc24      	bgt.n	800e788 <_svfprintf_r+0xd28>
 800e73e:	6066      	str	r6, [r4, #4]
 800e740:	2b07      	cmp	r3, #7
 800e742:	4416      	add	r6, r2
 800e744:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800e748:	f340 828a 	ble.w	800ec60 <_svfprintf_r+0x1200>
 800e74c:	9802      	ldr	r0, [sp, #8]
 800e74e:	aa1e      	add	r2, sp, #120	@ 0x78
 800e750:	4651      	mov	r1, sl
 800e752:	f001 fdc7 	bl	80102e4 <__ssprint_r>
 800e756:	2800      	cmp	r0, #0
 800e758:	f040 82a3 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e75c:	ac21      	add	r4, sp, #132	@ 0x84
 800e75e:	e552      	b.n	800e206 <_svfprintf_r+0x7a6>
 800e760:	9802      	ldr	r0, [sp, #8]
 800e762:	aa1e      	add	r2, sp, #120	@ 0x78
 800e764:	4651      	mov	r1, sl
 800e766:	f001 fdbd 	bl	80102e4 <__ssprint_r>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	f040 8299 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e770:	ac21      	add	r4, sp, #132	@ 0x84
 800e772:	e7be      	b.n	800e6f2 <_svfprintf_r+0xc92>
 800e774:	9802      	ldr	r0, [sp, #8]
 800e776:	aa1e      	add	r2, sp, #120	@ 0x78
 800e778:	4651      	mov	r1, sl
 800e77a:	f001 fdb3 	bl	80102e4 <__ssprint_r>
 800e77e:	2800      	cmp	r0, #0
 800e780:	f040 828f 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e784:	ac21      	add	r4, sp, #132	@ 0x84
 800e786:	e7c9      	b.n	800e71c <_svfprintf_r+0xcbc>
 800e788:	3210      	adds	r2, #16
 800e78a:	2b07      	cmp	r3, #7
 800e78c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800e790:	f8c4 8004 	str.w	r8, [r4, #4]
 800e794:	dd08      	ble.n	800e7a8 <_svfprintf_r+0xd48>
 800e796:	9802      	ldr	r0, [sp, #8]
 800e798:	aa1e      	add	r2, sp, #120	@ 0x78
 800e79a:	4651      	mov	r1, sl
 800e79c:	f001 fda2 	bl	80102e4 <__ssprint_r>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	f040 827e 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e7a6:	a921      	add	r1, sp, #132	@ 0x84
 800e7a8:	3e10      	subs	r6, #16
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	e7be      	b.n	800e72c <_svfprintf_r+0xccc>
 800e7ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	dc7b      	bgt.n	800e8ac <_svfprintf_r+0xe4c>
 800e7b4:	4a3b      	ldr	r2, [pc, #236]	@ (800e8a4 <_svfprintf_r+0xe44>)
 800e7b6:	6022      	str	r2, [r4, #0]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	4413      	add	r3, r2
 800e7bc:	9320      	str	r3, [sp, #128]	@ 0x80
 800e7be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e7c0:	6062      	str	r2, [r4, #4]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	2b07      	cmp	r3, #7
 800e7c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e7c8:	dc46      	bgt.n	800e858 <_svfprintf_r+0xdf8>
 800e7ca:	3408      	adds	r4, #8
 800e7cc:	9903      	ldr	r1, [sp, #12]
 800e7ce:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e7d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e7d2:	430b      	orrs	r3, r1
 800e7d4:	f005 0101 	and.w	r1, r5, #1
 800e7d8:	430b      	orrs	r3, r1
 800e7da:	f43f ad14 	beq.w	800e206 <_svfprintf_r+0x7a6>
 800e7de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e4:	6063      	str	r3, [r4, #4]
 800e7e6:	441a      	add	r2, r3
 800e7e8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e7ea:	9220      	str	r2, [sp, #128]	@ 0x80
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	2b07      	cmp	r3, #7
 800e7f0:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e7f2:	dc3b      	bgt.n	800e86c <_svfprintf_r+0xe0c>
 800e7f4:	f104 0308 	add.w	r3, r4, #8
 800e7f8:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800e7fa:	2e00      	cmp	r6, #0
 800e7fc:	da1b      	bge.n	800e836 <_svfprintf_r+0xdd6>
 800e7fe:	4f2a      	ldr	r7, [pc, #168]	@ (800e8a8 <_svfprintf_r+0xe48>)
 800e800:	4276      	negs	r6, r6
 800e802:	461a      	mov	r2, r3
 800e804:	2410      	movs	r4, #16
 800e806:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 800e80a:	2e10      	cmp	r6, #16
 800e80c:	f101 0101 	add.w	r1, r1, #1
 800e810:	f103 0308 	add.w	r3, r3, #8
 800e814:	6017      	str	r7, [r2, #0]
 800e816:	dc33      	bgt.n	800e880 <_svfprintf_r+0xe20>
 800e818:	6056      	str	r6, [r2, #4]
 800e81a:	2907      	cmp	r1, #7
 800e81c:	4406      	add	r6, r0
 800e81e:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 800e822:	dd08      	ble.n	800e836 <_svfprintf_r+0xdd6>
 800e824:	9802      	ldr	r0, [sp, #8]
 800e826:	aa1e      	add	r2, sp, #120	@ 0x78
 800e828:	4651      	mov	r1, sl
 800e82a:	f001 fd5b 	bl	80102e4 <__ssprint_r>
 800e82e:	2800      	cmp	r0, #0
 800e830:	f040 8237 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e834:	ab21      	add	r3, sp, #132	@ 0x84
 800e836:	9a03      	ldr	r2, [sp, #12]
 800e838:	605a      	str	r2, [r3, #4]
 800e83a:	9903      	ldr	r1, [sp, #12]
 800e83c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e83e:	f8c3 9000 	str.w	r9, [r3]
 800e842:	440a      	add	r2, r1
 800e844:	9220      	str	r2, [sp, #128]	@ 0x80
 800e846:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800e848:	3201      	adds	r2, #1
 800e84a:	2a07      	cmp	r2, #7
 800e84c:	921f      	str	r2, [sp, #124]	@ 0x7c
 800e84e:	f73f af7d 	bgt.w	800e74c <_svfprintf_r+0xcec>
 800e852:	f103 0408 	add.w	r4, r3, #8
 800e856:	e4d6      	b.n	800e206 <_svfprintf_r+0x7a6>
 800e858:	9802      	ldr	r0, [sp, #8]
 800e85a:	aa1e      	add	r2, sp, #120	@ 0x78
 800e85c:	4651      	mov	r1, sl
 800e85e:	f001 fd41 	bl	80102e4 <__ssprint_r>
 800e862:	2800      	cmp	r0, #0
 800e864:	f040 821d 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e868:	ac21      	add	r4, sp, #132	@ 0x84
 800e86a:	e7af      	b.n	800e7cc <_svfprintf_r+0xd6c>
 800e86c:	9802      	ldr	r0, [sp, #8]
 800e86e:	aa1e      	add	r2, sp, #120	@ 0x78
 800e870:	4651      	mov	r1, sl
 800e872:	f001 fd37 	bl	80102e4 <__ssprint_r>
 800e876:	2800      	cmp	r0, #0
 800e878:	f040 8213 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e87c:	ab21      	add	r3, sp, #132	@ 0x84
 800e87e:	e7bb      	b.n	800e7f8 <_svfprintf_r+0xd98>
 800e880:	3010      	adds	r0, #16
 800e882:	2907      	cmp	r1, #7
 800e884:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 800e888:	6054      	str	r4, [r2, #4]
 800e88a:	dd08      	ble.n	800e89e <_svfprintf_r+0xe3e>
 800e88c:	9802      	ldr	r0, [sp, #8]
 800e88e:	aa1e      	add	r2, sp, #120	@ 0x78
 800e890:	4651      	mov	r1, sl
 800e892:	f001 fd27 	bl	80102e4 <__ssprint_r>
 800e896:	2800      	cmp	r0, #0
 800e898:	f040 8203 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e89c:	ab21      	add	r3, sp, #132	@ 0x84
 800e89e:	3e10      	subs	r6, #16
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	e7b0      	b.n	800e806 <_svfprintf_r+0xda6>
 800e8a4:	08013076 	.word	0x08013076
 800e8a8:	08013078 	.word	0x08013078
 800e8ac:	9a03      	ldr	r2, [sp, #12]
 800e8ae:	444a      	add	r2, r9
 800e8b0:	9204      	str	r2, [sp, #16]
 800e8b2:	9a03      	ldr	r2, [sp, #12]
 800e8b4:	42b2      	cmp	r2, r6
 800e8b6:	bfa8      	it	ge
 800e8b8:	4632      	movge	r2, r6
 800e8ba:	2a00      	cmp	r2, #0
 800e8bc:	4690      	mov	r8, r2
 800e8be:	dd0a      	ble.n	800e8d6 <_svfprintf_r+0xe76>
 800e8c0:	4413      	add	r3, r2
 800e8c2:	9320      	str	r3, [sp, #128]	@ 0x80
 800e8c4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	2b07      	cmp	r3, #7
 800e8ca:	e9c4 9200 	strd	r9, r2, [r4]
 800e8ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e8d0:	f300 8089 	bgt.w	800e9e6 <_svfprintf_r+0xf86>
 800e8d4:	3408      	adds	r4, #8
 800e8d6:	4643      	mov	r3, r8
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	bfac      	ite	ge
 800e8dc:	eba6 0808 	subge.w	r8, r6, r8
 800e8e0:	46b0      	movlt	r8, r6
 800e8e2:	f1b8 0f00 	cmp.w	r8, #0
 800e8e6:	dd1b      	ble.n	800e920 <_svfprintf_r+0xec0>
 800e8e8:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800e8ec:	4896      	ldr	r0, [pc, #600]	@ (800eb48 <_svfprintf_r+0x10e8>)
 800e8ee:	6020      	str	r0, [r4, #0]
 800e8f0:	f1b8 0f10 	cmp.w	r8, #16
 800e8f4:	f102 0201 	add.w	r2, r2, #1
 800e8f8:	f104 0108 	add.w	r1, r4, #8
 800e8fc:	dc7d      	bgt.n	800e9fa <_svfprintf_r+0xf9a>
 800e8fe:	4443      	add	r3, r8
 800e900:	2a07      	cmp	r2, #7
 800e902:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800e906:	f8c4 8004 	str.w	r8, [r4, #4]
 800e90a:	f340 808a 	ble.w	800ea22 <_svfprintf_r+0xfc2>
 800e90e:	9802      	ldr	r0, [sp, #8]
 800e910:	aa1e      	add	r2, sp, #120	@ 0x78
 800e912:	4651      	mov	r1, sl
 800e914:	f001 fce6 	bl	80102e4 <__ssprint_r>
 800e918:	2800      	cmp	r0, #0
 800e91a:	f040 81c2 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e91e:	ac21      	add	r4, sp, #132	@ 0x84
 800e920:	056b      	lsls	r3, r5, #21
 800e922:	eb09 0806 	add.w	r8, r9, r6
 800e926:	d508      	bpl.n	800e93a <_svfprintf_r+0xeda>
 800e928:	9b06      	ldr	r3, [sp, #24]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d17b      	bne.n	800ea26 <_svfprintf_r+0xfc6>
 800e92e:	2f00      	cmp	r7, #0
 800e930:	d17b      	bne.n	800ea2a <_svfprintf_r+0xfca>
 800e932:	9b04      	ldr	r3, [sp, #16]
 800e934:	4598      	cmp	r8, r3
 800e936:	bf28      	it	cs
 800e938:	4698      	movcs	r8, r3
 800e93a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e93c:	9a03      	ldr	r2, [sp, #12]
 800e93e:	4293      	cmp	r3, r2
 800e940:	db01      	blt.n	800e946 <_svfprintf_r+0xee6>
 800e942:	07ee      	lsls	r6, r5, #31
 800e944:	d50e      	bpl.n	800e964 <_svfprintf_r+0xf04>
 800e946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e94e:	6063      	str	r3, [r4, #4]
 800e950:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e952:	4413      	add	r3, r2
 800e954:	9320      	str	r3, [sp, #128]	@ 0x80
 800e956:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e958:	3301      	adds	r3, #1
 800e95a:	2b07      	cmp	r3, #7
 800e95c:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e95e:	f300 80df 	bgt.w	800eb20 <_svfprintf_r+0x10c0>
 800e962:	3408      	adds	r4, #8
 800e964:	9b03      	ldr	r3, [sp, #12]
 800e966:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 800e968:	1bdf      	subs	r7, r3, r7
 800e96a:	9b04      	ldr	r3, [sp, #16]
 800e96c:	eba3 0308 	sub.w	r3, r3, r8
 800e970:	429f      	cmp	r7, r3
 800e972:	bfa8      	it	ge
 800e974:	461f      	movge	r7, r3
 800e976:	2f00      	cmp	r7, #0
 800e978:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e97a:	dd0a      	ble.n	800e992 <_svfprintf_r+0xf32>
 800e97c:	443b      	add	r3, r7
 800e97e:	9320      	str	r3, [sp, #128]	@ 0x80
 800e980:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e982:	3301      	adds	r3, #1
 800e984:	2b07      	cmp	r3, #7
 800e986:	e9c4 8700 	strd	r8, r7, [r4]
 800e98a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e98c:	f300 80d2 	bgt.w	800eb34 <_svfprintf_r+0x10d4>
 800e990:	3408      	adds	r4, #8
 800e992:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800e994:	9b03      	ldr	r3, [sp, #12]
 800e996:	2f00      	cmp	r7, #0
 800e998:	eba3 0606 	sub.w	r6, r3, r6
 800e99c:	bfa8      	it	ge
 800e99e:	1bf6      	subge	r6, r6, r7
 800e9a0:	2e00      	cmp	r6, #0
 800e9a2:	f77f ac30 	ble.w	800e206 <_svfprintf_r+0x7a6>
 800e9a6:	4f68      	ldr	r7, [pc, #416]	@ (800eb48 <_svfprintf_r+0x10e8>)
 800e9a8:	f04f 0810 	mov.w	r8, #16
 800e9ac:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800e9b0:	2e10      	cmp	r6, #16
 800e9b2:	f103 0301 	add.w	r3, r3, #1
 800e9b6:	f104 0108 	add.w	r1, r4, #8
 800e9ba:	6027      	str	r7, [r4, #0]
 800e9bc:	f77f aebf 	ble.w	800e73e <_svfprintf_r+0xcde>
 800e9c0:	3210      	adds	r2, #16
 800e9c2:	2b07      	cmp	r3, #7
 800e9c4:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800e9c8:	f8c4 8004 	str.w	r8, [r4, #4]
 800e9cc:	dd08      	ble.n	800e9e0 <_svfprintf_r+0xf80>
 800e9ce:	9802      	ldr	r0, [sp, #8]
 800e9d0:	aa1e      	add	r2, sp, #120	@ 0x78
 800e9d2:	4651      	mov	r1, sl
 800e9d4:	f001 fc86 	bl	80102e4 <__ssprint_r>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	f040 8162 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e9de:	a921      	add	r1, sp, #132	@ 0x84
 800e9e0:	3e10      	subs	r6, #16
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	e7e2      	b.n	800e9ac <_svfprintf_r+0xf4c>
 800e9e6:	9802      	ldr	r0, [sp, #8]
 800e9e8:	aa1e      	add	r2, sp, #120	@ 0x78
 800e9ea:	4651      	mov	r1, sl
 800e9ec:	f001 fc7a 	bl	80102e4 <__ssprint_r>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	f040 8156 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800e9f6:	ac21      	add	r4, sp, #132	@ 0x84
 800e9f8:	e76d      	b.n	800e8d6 <_svfprintf_r+0xe76>
 800e9fa:	2010      	movs	r0, #16
 800e9fc:	4403      	add	r3, r0
 800e9fe:	2a07      	cmp	r2, #7
 800ea00:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800ea04:	6060      	str	r0, [r4, #4]
 800ea06:	dd08      	ble.n	800ea1a <_svfprintf_r+0xfba>
 800ea08:	9802      	ldr	r0, [sp, #8]
 800ea0a:	aa1e      	add	r2, sp, #120	@ 0x78
 800ea0c:	4651      	mov	r1, sl
 800ea0e:	f001 fc69 	bl	80102e4 <__ssprint_r>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	f040 8145 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800ea18:	a921      	add	r1, sp, #132	@ 0x84
 800ea1a:	f1a8 0810 	sub.w	r8, r8, #16
 800ea1e:	460c      	mov	r4, r1
 800ea20:	e762      	b.n	800e8e8 <_svfprintf_r+0xe88>
 800ea22:	460c      	mov	r4, r1
 800ea24:	e77c      	b.n	800e920 <_svfprintf_r+0xec0>
 800ea26:	2f00      	cmp	r7, #0
 800ea28:	d04a      	beq.n	800eac0 <_svfprintf_r+0x1060>
 800ea2a:	3f01      	subs	r7, #1
 800ea2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea2e:	6023      	str	r3, [r4, #0]
 800ea30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea34:	6063      	str	r3, [r4, #4]
 800ea36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ea38:	4413      	add	r3, r2
 800ea3a:	9320      	str	r3, [sp, #128]	@ 0x80
 800ea3c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ea3e:	3301      	adds	r3, #1
 800ea40:	2b07      	cmp	r3, #7
 800ea42:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ea44:	dc43      	bgt.n	800eace <_svfprintf_r+0x106e>
 800ea46:	3408      	adds	r4, #8
 800ea48:	9b07      	ldr	r3, [sp, #28]
 800ea4a:	781a      	ldrb	r2, [r3, #0]
 800ea4c:	9b04      	ldr	r3, [sp, #16]
 800ea4e:	eba3 0308 	sub.w	r3, r3, r8
 800ea52:	429a      	cmp	r2, r3
 800ea54:	bfa8      	it	ge
 800ea56:	461a      	movge	r2, r3
 800ea58:	2a00      	cmp	r2, #0
 800ea5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ea5c:	4691      	mov	r9, r2
 800ea5e:	dd09      	ble.n	800ea74 <_svfprintf_r+0x1014>
 800ea60:	4413      	add	r3, r2
 800ea62:	9320      	str	r3, [sp, #128]	@ 0x80
 800ea64:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ea66:	3301      	adds	r3, #1
 800ea68:	2b07      	cmp	r3, #7
 800ea6a:	e9c4 8200 	strd	r8, r2, [r4]
 800ea6e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ea70:	dc37      	bgt.n	800eae2 <_svfprintf_r+0x1082>
 800ea72:	3408      	adds	r4, #8
 800ea74:	9b07      	ldr	r3, [sp, #28]
 800ea76:	781e      	ldrb	r6, [r3, #0]
 800ea78:	f1b9 0f00 	cmp.w	r9, #0
 800ea7c:	bfa8      	it	ge
 800ea7e:	eba6 0609 	subge.w	r6, r6, r9
 800ea82:	2e00      	cmp	r6, #0
 800ea84:	dd18      	ble.n	800eab8 <_svfprintf_r+0x1058>
 800ea86:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800ea8a:	482f      	ldr	r0, [pc, #188]	@ (800eb48 <_svfprintf_r+0x10e8>)
 800ea8c:	6020      	str	r0, [r4, #0]
 800ea8e:	2e10      	cmp	r6, #16
 800ea90:	f103 0301 	add.w	r3, r3, #1
 800ea94:	f104 0108 	add.w	r1, r4, #8
 800ea98:	dc2d      	bgt.n	800eaf6 <_svfprintf_r+0x1096>
 800ea9a:	6066      	str	r6, [r4, #4]
 800ea9c:	2b07      	cmp	r3, #7
 800ea9e:	4416      	add	r6, r2
 800eaa0:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800eaa4:	dd3a      	ble.n	800eb1c <_svfprintf_r+0x10bc>
 800eaa6:	9802      	ldr	r0, [sp, #8]
 800eaa8:	aa1e      	add	r2, sp, #120	@ 0x78
 800eaaa:	4651      	mov	r1, sl
 800eaac:	f001 fc1a 	bl	80102e4 <__ssprint_r>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	f040 80f6 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800eab6:	ac21      	add	r4, sp, #132	@ 0x84
 800eab8:	9b07      	ldr	r3, [sp, #28]
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	4498      	add	r8, r3
 800eabe:	e733      	b.n	800e928 <_svfprintf_r+0xec8>
 800eac0:	9b07      	ldr	r3, [sp, #28]
 800eac2:	3b01      	subs	r3, #1
 800eac4:	9307      	str	r3, [sp, #28]
 800eac6:	9b06      	ldr	r3, [sp, #24]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	9306      	str	r3, [sp, #24]
 800eacc:	e7ae      	b.n	800ea2c <_svfprintf_r+0xfcc>
 800eace:	9802      	ldr	r0, [sp, #8]
 800ead0:	aa1e      	add	r2, sp, #120	@ 0x78
 800ead2:	4651      	mov	r1, sl
 800ead4:	f001 fc06 	bl	80102e4 <__ssprint_r>
 800ead8:	2800      	cmp	r0, #0
 800eada:	f040 80e2 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800eade:	ac21      	add	r4, sp, #132	@ 0x84
 800eae0:	e7b2      	b.n	800ea48 <_svfprintf_r+0xfe8>
 800eae2:	9802      	ldr	r0, [sp, #8]
 800eae4:	aa1e      	add	r2, sp, #120	@ 0x78
 800eae6:	4651      	mov	r1, sl
 800eae8:	f001 fbfc 	bl	80102e4 <__ssprint_r>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	f040 80d8 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800eaf2:	ac21      	add	r4, sp, #132	@ 0x84
 800eaf4:	e7be      	b.n	800ea74 <_svfprintf_r+0x1014>
 800eaf6:	2010      	movs	r0, #16
 800eaf8:	4402      	add	r2, r0
 800eafa:	2b07      	cmp	r3, #7
 800eafc:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800eb00:	6060      	str	r0, [r4, #4]
 800eb02:	dd08      	ble.n	800eb16 <_svfprintf_r+0x10b6>
 800eb04:	9802      	ldr	r0, [sp, #8]
 800eb06:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb08:	4651      	mov	r1, sl
 800eb0a:	f001 fbeb 	bl	80102e4 <__ssprint_r>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f040 80c7 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800eb14:	a921      	add	r1, sp, #132	@ 0x84
 800eb16:	3e10      	subs	r6, #16
 800eb18:	460c      	mov	r4, r1
 800eb1a:	e7b4      	b.n	800ea86 <_svfprintf_r+0x1026>
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	e7cb      	b.n	800eab8 <_svfprintf_r+0x1058>
 800eb20:	9802      	ldr	r0, [sp, #8]
 800eb22:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb24:	4651      	mov	r1, sl
 800eb26:	f001 fbdd 	bl	80102e4 <__ssprint_r>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	f040 80b9 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800eb30:	ac21      	add	r4, sp, #132	@ 0x84
 800eb32:	e717      	b.n	800e964 <_svfprintf_r+0xf04>
 800eb34:	9802      	ldr	r0, [sp, #8]
 800eb36:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb38:	4651      	mov	r1, sl
 800eb3a:	f001 fbd3 	bl	80102e4 <__ssprint_r>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	f040 80af 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800eb44:	ac21      	add	r4, sp, #132	@ 0x84
 800eb46:	e724      	b.n	800e992 <_svfprintf_r+0xf32>
 800eb48:	08013078 	.word	0x08013078
 800eb4c:	9803      	ldr	r0, [sp, #12]
 800eb4e:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800eb50:	2801      	cmp	r0, #1
 800eb52:	f103 0201 	add.w	r2, r3, #1
 800eb56:	f101 0101 	add.w	r1, r1, #1
 800eb5a:	f104 0308 	add.w	r3, r4, #8
 800eb5e:	dc01      	bgt.n	800eb64 <_svfprintf_r+0x1104>
 800eb60:	07e8      	lsls	r0, r5, #31
 800eb62:	d572      	bpl.n	800ec4a <_svfprintf_r+0x11ea>
 800eb64:	2001      	movs	r0, #1
 800eb66:	2907      	cmp	r1, #7
 800eb68:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800eb6c:	f8c4 9000 	str.w	r9, [r4]
 800eb70:	6060      	str	r0, [r4, #4]
 800eb72:	dd08      	ble.n	800eb86 <_svfprintf_r+0x1126>
 800eb74:	9802      	ldr	r0, [sp, #8]
 800eb76:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb78:	4651      	mov	r1, sl
 800eb7a:	f001 fbb3 	bl	80102e4 <__ssprint_r>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	f040 808f 	bne.w	800eca2 <_svfprintf_r+0x1242>
 800eb84:	ab21      	add	r3, sp, #132	@ 0x84
 800eb86:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb8e:	605a      	str	r2, [r3, #4]
 800eb90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800eb92:	440a      	add	r2, r1
 800eb94:	9220      	str	r2, [sp, #128]	@ 0x80
 800eb96:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800eb98:	3201      	adds	r2, #1
 800eb9a:	2a07      	cmp	r2, #7
 800eb9c:	921f      	str	r2, [sp, #124]	@ 0x7c
 800eb9e:	dc25      	bgt.n	800ebec <_svfprintf_r+0x118c>
 800eba0:	3308      	adds	r3, #8
 800eba2:	9803      	ldr	r0, [sp, #12]
 800eba4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebac:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 800ebb0:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800ebb4:	d023      	beq.n	800ebfe <_svfprintf_r+0x119e>
 800ebb6:	f109 0001 	add.w	r0, r9, #1
 800ebba:	e9c3 0400 	strd	r0, r4, [r3]
 800ebbe:	9803      	ldr	r0, [sp, #12]
 800ebc0:	3101      	adds	r1, #1
 800ebc2:	3a01      	subs	r2, #1
 800ebc4:	4402      	add	r2, r0
 800ebc6:	2907      	cmp	r1, #7
 800ebc8:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800ebcc:	dd46      	ble.n	800ec5c <_svfprintf_r+0x11fc>
 800ebce:	9802      	ldr	r0, [sp, #8]
 800ebd0:	aa1e      	add	r2, sp, #120	@ 0x78
 800ebd2:	4651      	mov	r1, sl
 800ebd4:	f001 fb86 	bl	80102e4 <__ssprint_r>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d162      	bne.n	800eca2 <_svfprintf_r+0x1242>
 800ebdc:	ab21      	add	r3, sp, #132	@ 0x84
 800ebde:	aa1a      	add	r2, sp, #104	@ 0x68
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ebe4:	605a      	str	r2, [r3, #4]
 800ebe6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ebe8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ebea:	e62a      	b.n	800e842 <_svfprintf_r+0xde2>
 800ebec:	9802      	ldr	r0, [sp, #8]
 800ebee:	aa1e      	add	r2, sp, #120	@ 0x78
 800ebf0:	4651      	mov	r1, sl
 800ebf2:	f001 fb77 	bl	80102e4 <__ssprint_r>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d153      	bne.n	800eca2 <_svfprintf_r+0x1242>
 800ebfa:	ab21      	add	r3, sp, #132	@ 0x84
 800ebfc:	e7d1      	b.n	800eba2 <_svfprintf_r+0x1142>
 800ebfe:	9a03      	ldr	r2, [sp, #12]
 800ec00:	2a01      	cmp	r2, #1
 800ec02:	ddec      	ble.n	800ebde <_svfprintf_r+0x117e>
 800ec04:	4e56      	ldr	r6, [pc, #344]	@ (800ed60 <_svfprintf_r+0x1300>)
 800ec06:	2710      	movs	r7, #16
 800ec08:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 800ec0c:	2c10      	cmp	r4, #16
 800ec0e:	f102 0201 	add.w	r2, r2, #1
 800ec12:	f103 0008 	add.w	r0, r3, #8
 800ec16:	601e      	str	r6, [r3, #0]
 800ec18:	dc07      	bgt.n	800ec2a <_svfprintf_r+0x11ca>
 800ec1a:	605c      	str	r4, [r3, #4]
 800ec1c:	2a07      	cmp	r2, #7
 800ec1e:	440c      	add	r4, r1
 800ec20:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 800ec24:	dcd3      	bgt.n	800ebce <_svfprintf_r+0x116e>
 800ec26:	4603      	mov	r3, r0
 800ec28:	e7d9      	b.n	800ebde <_svfprintf_r+0x117e>
 800ec2a:	3110      	adds	r1, #16
 800ec2c:	2a07      	cmp	r2, #7
 800ec2e:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800ec32:	605f      	str	r7, [r3, #4]
 800ec34:	dd06      	ble.n	800ec44 <_svfprintf_r+0x11e4>
 800ec36:	9802      	ldr	r0, [sp, #8]
 800ec38:	aa1e      	add	r2, sp, #120	@ 0x78
 800ec3a:	4651      	mov	r1, sl
 800ec3c:	f001 fb52 	bl	80102e4 <__ssprint_r>
 800ec40:	bb78      	cbnz	r0, 800eca2 <_svfprintf_r+0x1242>
 800ec42:	a821      	add	r0, sp, #132	@ 0x84
 800ec44:	3c10      	subs	r4, #16
 800ec46:	4603      	mov	r3, r0
 800ec48:	e7de      	b.n	800ec08 <_svfprintf_r+0x11a8>
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	2907      	cmp	r1, #7
 800ec4e:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800ec52:	f8c4 9000 	str.w	r9, [r4]
 800ec56:	6060      	str	r0, [r4, #4]
 800ec58:	ddc1      	ble.n	800ebde <_svfprintf_r+0x117e>
 800ec5a:	e7b8      	b.n	800ebce <_svfprintf_r+0x116e>
 800ec5c:	3308      	adds	r3, #8
 800ec5e:	e7be      	b.n	800ebde <_svfprintf_r+0x117e>
 800ec60:	460c      	mov	r4, r1
 800ec62:	f7ff bad0 	b.w	800e206 <_svfprintf_r+0x7a6>
 800ec66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec6a:	1a9d      	subs	r5, r3, r2
 800ec6c:	2d00      	cmp	r5, #0
 800ec6e:	f77f aacd 	ble.w	800e20c <_svfprintf_r+0x7ac>
 800ec72:	4e3c      	ldr	r6, [pc, #240]	@ (800ed64 <_svfprintf_r+0x1304>)
 800ec74:	2710      	movs	r7, #16
 800ec76:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800ec7a:	2d10      	cmp	r5, #16
 800ec7c:	f103 0301 	add.w	r3, r3, #1
 800ec80:	6026      	str	r6, [r4, #0]
 800ec82:	dc18      	bgt.n	800ecb6 <_svfprintf_r+0x1256>
 800ec84:	442a      	add	r2, r5
 800ec86:	2b07      	cmp	r3, #7
 800ec88:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800ec8c:	6065      	str	r5, [r4, #4]
 800ec8e:	f77f aabd 	ble.w	800e20c <_svfprintf_r+0x7ac>
 800ec92:	9802      	ldr	r0, [sp, #8]
 800ec94:	aa1e      	add	r2, sp, #120	@ 0x78
 800ec96:	4651      	mov	r1, sl
 800ec98:	f001 fb24 	bl	80102e4 <__ssprint_r>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f43f aab5 	beq.w	800e20c <_svfprintf_r+0x7ac>
 800eca2:	f1bb 0f00 	cmp.w	fp, #0
 800eca6:	f43f a8e0 	beq.w	800de6a <_svfprintf_r+0x40a>
 800ecaa:	9802      	ldr	r0, [sp, #8]
 800ecac:	4659      	mov	r1, fp
 800ecae:	f7fe fbd1 	bl	800d454 <_free_r>
 800ecb2:	f7ff b8da 	b.w	800de6a <_svfprintf_r+0x40a>
 800ecb6:	3210      	adds	r2, #16
 800ecb8:	2b07      	cmp	r3, #7
 800ecba:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800ecbe:	6067      	str	r7, [r4, #4]
 800ecc0:	dc02      	bgt.n	800ecc8 <_svfprintf_r+0x1268>
 800ecc2:	3408      	adds	r4, #8
 800ecc4:	3d10      	subs	r5, #16
 800ecc6:	e7d6      	b.n	800ec76 <_svfprintf_r+0x1216>
 800ecc8:	9802      	ldr	r0, [sp, #8]
 800ecca:	aa1e      	add	r2, sp, #120	@ 0x78
 800eccc:	4651      	mov	r1, sl
 800ecce:	f001 fb09 	bl	80102e4 <__ssprint_r>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d1e5      	bne.n	800eca2 <_svfprintf_r+0x1242>
 800ecd6:	ac21      	add	r4, sp, #132	@ 0x84
 800ecd8:	e7f4      	b.n	800ecc4 <_svfprintf_r+0x1264>
 800ecda:	9802      	ldr	r0, [sp, #8]
 800ecdc:	4659      	mov	r1, fp
 800ecde:	f7fe fbb9 	bl	800d454 <_free_r>
 800ece2:	f7ff baab 	b.w	800e23c <_svfprintf_r+0x7dc>
 800ece6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f43f a8be 	beq.w	800de6a <_svfprintf_r+0x40a>
 800ecee:	9802      	ldr	r0, [sp, #8]
 800ecf0:	aa1e      	add	r2, sp, #120	@ 0x78
 800ecf2:	4651      	mov	r1, sl
 800ecf4:	f001 faf6 	bl	80102e4 <__ssprint_r>
 800ecf8:	f7ff b8b7 	b.w	800de6a <_svfprintf_r+0x40a>
 800ecfc:	ea56 0207 	orrs.w	r2, r6, r7
 800ed00:	9506      	str	r5, [sp, #24]
 800ed02:	f43f ab93 	beq.w	800e42c <_svfprintf_r+0x9cc>
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	f43f ac14 	beq.w	800e534 <_svfprintf_r+0xad4>
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800ed12:	f43f ac59 	beq.w	800e5c8 <_svfprintf_r+0xb68>
 800ed16:	f006 0307 	and.w	r3, r6, #7
 800ed1a:	08f6      	lsrs	r6, r6, #3
 800ed1c:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800ed20:	08ff      	lsrs	r7, r7, #3
 800ed22:	3330      	adds	r3, #48	@ 0x30
 800ed24:	ea56 0107 	orrs.w	r1, r6, r7
 800ed28:	464a      	mov	r2, r9
 800ed2a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ed2e:	d1f2      	bne.n	800ed16 <_svfprintf_r+0x12b6>
 800ed30:	9906      	ldr	r1, [sp, #24]
 800ed32:	07cd      	lsls	r5, r1, #31
 800ed34:	d506      	bpl.n	800ed44 <_svfprintf_r+0x12e4>
 800ed36:	2b30      	cmp	r3, #48	@ 0x30
 800ed38:	d004      	beq.n	800ed44 <_svfprintf_r+0x12e4>
 800ed3a:	2330      	movs	r3, #48	@ 0x30
 800ed3c:	f809 3c01 	strb.w	r3, [r9, #-1]
 800ed40:	f1a2 0902 	sub.w	r9, r2, #2
 800ed44:	ab4a      	add	r3, sp, #296	@ 0x128
 800ed46:	9d06      	ldr	r5, [sp, #24]
 800ed48:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800ed4c:	f04f 0b00 	mov.w	fp, #0
 800ed50:	eba3 0809 	sub.w	r8, r3, r9
 800ed54:	465f      	mov	r7, fp
 800ed56:	f8cd b018 	str.w	fp, [sp, #24]
 800ed5a:	465e      	mov	r6, fp
 800ed5c:	f7ff b9a4 	b.w	800e0a8 <_svfprintf_r+0x648>
 800ed60:	08013078 	.word	0x08013078
 800ed64:	08013088 	.word	0x08013088

0800ed68 <_fclose_r>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	b1b1      	cbz	r1, 800ed9e <_fclose_r+0x36>
 800ed70:	b118      	cbz	r0, 800ed7a <_fclose_r+0x12>
 800ed72:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ed74:	b90b      	cbnz	r3, 800ed7a <_fclose_r+0x12>
 800ed76:	f7fe f9e3 	bl	800d140 <__sinit>
 800ed7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed7c:	07de      	lsls	r6, r3, #31
 800ed7e:	d405      	bmi.n	800ed8c <_fclose_r+0x24>
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	0598      	lsls	r0, r3, #22
 800ed84:	d402      	bmi.n	800ed8c <_fclose_r+0x24>
 800ed86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed88:	f7fe faee 	bl	800d368 <__retarget_lock_acquire_recursive>
 800ed8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed90:	b943      	cbnz	r3, 800eda4 <_fclose_r+0x3c>
 800ed92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed94:	07d9      	lsls	r1, r3, #31
 800ed96:	d402      	bmi.n	800ed9e <_fclose_r+0x36>
 800ed98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed9a:	f7fe fae6 	bl	800d36a <__retarget_lock_release_recursive>
 800ed9e:	2600      	movs	r6, #0
 800eda0:	4630      	mov	r0, r6
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	4621      	mov	r1, r4
 800eda6:	4628      	mov	r0, r5
 800eda8:	f000 f834 	bl	800ee14 <__sflush_r>
 800edac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800edae:	4606      	mov	r6, r0
 800edb0:	b133      	cbz	r3, 800edc0 <_fclose_r+0x58>
 800edb2:	69e1      	ldr	r1, [r4, #28]
 800edb4:	4628      	mov	r0, r5
 800edb6:	4798      	blx	r3
 800edb8:	2800      	cmp	r0, #0
 800edba:	bfb8      	it	lt
 800edbc:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 800edc0:	89a3      	ldrh	r3, [r4, #12]
 800edc2:	061a      	lsls	r2, r3, #24
 800edc4:	d503      	bpl.n	800edce <_fclose_r+0x66>
 800edc6:	6921      	ldr	r1, [r4, #16]
 800edc8:	4628      	mov	r0, r5
 800edca:	f7fe fb43 	bl	800d454 <_free_r>
 800edce:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800edd0:	b141      	cbz	r1, 800ede4 <_fclose_r+0x7c>
 800edd2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800edd6:	4299      	cmp	r1, r3
 800edd8:	d002      	beq.n	800ede0 <_fclose_r+0x78>
 800edda:	4628      	mov	r0, r5
 800eddc:	f7fe fb3a 	bl	800d454 <_free_r>
 800ede0:	2300      	movs	r3, #0
 800ede2:	6323      	str	r3, [r4, #48]	@ 0x30
 800ede4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ede6:	b121      	cbz	r1, 800edf2 <_fclose_r+0x8a>
 800ede8:	4628      	mov	r0, r5
 800edea:	f7fe fb33 	bl	800d454 <_free_r>
 800edee:	2300      	movs	r3, #0
 800edf0:	6463      	str	r3, [r4, #68]	@ 0x44
 800edf2:	f7fe f999 	bl	800d128 <__sfp_lock_acquire>
 800edf6:	2300      	movs	r3, #0
 800edf8:	81a3      	strh	r3, [r4, #12]
 800edfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edfc:	07db      	lsls	r3, r3, #31
 800edfe:	d402      	bmi.n	800ee06 <_fclose_r+0x9e>
 800ee00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee02:	f7fe fab2 	bl	800d36a <__retarget_lock_release_recursive>
 800ee06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee08:	f7fe faad 	bl	800d366 <__retarget_lock_close_recursive>
 800ee0c:	f7fe f992 	bl	800d134 <__sfp_lock_release>
 800ee10:	e7c6      	b.n	800eda0 <_fclose_r+0x38>
	...

0800ee14 <__sflush_r>:
 800ee14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee18:	4605      	mov	r5, r0
 800ee1a:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800ee1e:	0706      	lsls	r6, r0, #28
 800ee20:	460c      	mov	r4, r1
 800ee22:	d457      	bmi.n	800eed4 <__sflush_r+0xc0>
 800ee24:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800ee28:	818b      	strh	r3, [r1, #12]
 800ee2a:	684b      	ldr	r3, [r1, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	dc02      	bgt.n	800ee36 <__sflush_r+0x22>
 800ee30:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	dd4c      	ble.n	800eed0 <__sflush_r+0xbc>
 800ee36:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee38:	2e00      	cmp	r6, #0
 800ee3a:	d049      	beq.n	800eed0 <__sflush_r+0xbc>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800ee42:	682f      	ldr	r7, [r5, #0]
 800ee44:	69e1      	ldr	r1, [r4, #28]
 800ee46:	602b      	str	r3, [r5, #0]
 800ee48:	d034      	beq.n	800eeb4 <__sflush_r+0xa0>
 800ee4a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800ee4c:	89a3      	ldrh	r3, [r4, #12]
 800ee4e:	0759      	lsls	r1, r3, #29
 800ee50:	d505      	bpl.n	800ee5e <__sflush_r+0x4a>
 800ee52:	6863      	ldr	r3, [r4, #4]
 800ee54:	1ad2      	subs	r2, r2, r3
 800ee56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ee58:	b10b      	cbz	r3, 800ee5e <__sflush_r+0x4a>
 800ee5a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ee5c:	1ad2      	subs	r2, r2, r3
 800ee5e:	2300      	movs	r3, #0
 800ee60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee62:	69e1      	ldr	r1, [r4, #28]
 800ee64:	4628      	mov	r0, r5
 800ee66:	47b0      	blx	r6
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	d106      	bne.n	800ee7a <__sflush_r+0x66>
 800ee6c:	682a      	ldr	r2, [r5, #0]
 800ee6e:	2a1d      	cmp	r2, #29
 800ee70:	d848      	bhi.n	800ef04 <__sflush_r+0xf0>
 800ee72:	4b2b      	ldr	r3, [pc, #172]	@ (800ef20 <__sflush_r+0x10c>)
 800ee74:	4113      	asrs	r3, r2
 800ee76:	07de      	lsls	r6, r3, #31
 800ee78:	d444      	bmi.n	800ef04 <__sflush_r+0xf0>
 800ee7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee7e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ee82:	81a2      	strh	r2, [r4, #12]
 800ee84:	2200      	movs	r2, #0
 800ee86:	6062      	str	r2, [r4, #4]
 800ee88:	04d9      	lsls	r1, r3, #19
 800ee8a:	6922      	ldr	r2, [r4, #16]
 800ee8c:	6022      	str	r2, [r4, #0]
 800ee8e:	d504      	bpl.n	800ee9a <__sflush_r+0x86>
 800ee90:	1c42      	adds	r2, r0, #1
 800ee92:	d101      	bne.n	800ee98 <__sflush_r+0x84>
 800ee94:	682b      	ldr	r3, [r5, #0]
 800ee96:	b903      	cbnz	r3, 800ee9a <__sflush_r+0x86>
 800ee98:	6520      	str	r0, [r4, #80]	@ 0x50
 800ee9a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee9c:	602f      	str	r7, [r5, #0]
 800ee9e:	b1b9      	cbz	r1, 800eed0 <__sflush_r+0xbc>
 800eea0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800eea4:	4299      	cmp	r1, r3
 800eea6:	d002      	beq.n	800eeae <__sflush_r+0x9a>
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f7fe fad3 	bl	800d454 <_free_r>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800eeb2:	e00d      	b.n	800eed0 <__sflush_r+0xbc>
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	47b0      	blx	r6
 800eeba:	4602      	mov	r2, r0
 800eebc:	1c50      	adds	r0, r2, #1
 800eebe:	d1c5      	bne.n	800ee4c <__sflush_r+0x38>
 800eec0:	682b      	ldr	r3, [r5, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0c2      	beq.n	800ee4c <__sflush_r+0x38>
 800eec6:	2b1d      	cmp	r3, #29
 800eec8:	d001      	beq.n	800eece <__sflush_r+0xba>
 800eeca:	2b16      	cmp	r3, #22
 800eecc:	d11a      	bne.n	800ef04 <__sflush_r+0xf0>
 800eece:	602f      	str	r7, [r5, #0]
 800eed0:	2000      	movs	r0, #0
 800eed2:	e01e      	b.n	800ef12 <__sflush_r+0xfe>
 800eed4:	690f      	ldr	r7, [r1, #16]
 800eed6:	2f00      	cmp	r7, #0
 800eed8:	d0fa      	beq.n	800eed0 <__sflush_r+0xbc>
 800eeda:	0783      	lsls	r3, r0, #30
 800eedc:	680e      	ldr	r6, [r1, #0]
 800eede:	bf08      	it	eq
 800eee0:	694b      	ldreq	r3, [r1, #20]
 800eee2:	600f      	str	r7, [r1, #0]
 800eee4:	bf18      	it	ne
 800eee6:	2300      	movne	r3, #0
 800eee8:	eba6 0807 	sub.w	r8, r6, r7
 800eeec:	608b      	str	r3, [r1, #8]
 800eeee:	f1b8 0f00 	cmp.w	r8, #0
 800eef2:	dded      	ble.n	800eed0 <__sflush_r+0xbc>
 800eef4:	69e1      	ldr	r1, [r4, #28]
 800eef6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800eef8:	4643      	mov	r3, r8
 800eefa:	463a      	mov	r2, r7
 800eefc:	4628      	mov	r0, r5
 800eefe:	47b0      	blx	r6
 800ef00:	2800      	cmp	r0, #0
 800ef02:	dc08      	bgt.n	800ef16 <__sflush_r+0x102>
 800ef04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef0c:	81a3      	strh	r3, [r4, #12]
 800ef0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef16:	4407      	add	r7, r0
 800ef18:	eba8 0800 	sub.w	r8, r8, r0
 800ef1c:	e7e7      	b.n	800eeee <__sflush_r+0xda>
 800ef1e:	bf00      	nop
 800ef20:	dfbffffe 	.word	0xdfbffffe

0800ef24 <_fflush_r>:
 800ef24:	b538      	push	{r3, r4, r5, lr}
 800ef26:	460c      	mov	r4, r1
 800ef28:	4605      	mov	r5, r0
 800ef2a:	b118      	cbz	r0, 800ef34 <_fflush_r+0x10>
 800ef2c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ef2e:	b90b      	cbnz	r3, 800ef34 <_fflush_r+0x10>
 800ef30:	f7fe f906 	bl	800d140 <__sinit>
 800ef34:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800ef38:	b1b8      	cbz	r0, 800ef6a <_fflush_r+0x46>
 800ef3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef3c:	07db      	lsls	r3, r3, #31
 800ef3e:	d404      	bmi.n	800ef4a <_fflush_r+0x26>
 800ef40:	0581      	lsls	r1, r0, #22
 800ef42:	d402      	bmi.n	800ef4a <_fflush_r+0x26>
 800ef44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef46:	f7fe fa0f 	bl	800d368 <__retarget_lock_acquire_recursive>
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	f7ff ff61 	bl	800ee14 <__sflush_r>
 800ef52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef54:	07da      	lsls	r2, r3, #31
 800ef56:	4605      	mov	r5, r0
 800ef58:	d405      	bmi.n	800ef66 <_fflush_r+0x42>
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	059b      	lsls	r3, r3, #22
 800ef5e:	d402      	bmi.n	800ef66 <_fflush_r+0x42>
 800ef60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef62:	f7fe fa02 	bl	800d36a <__retarget_lock_release_recursive>
 800ef66:	4628      	mov	r0, r5
 800ef68:	bd38      	pop	{r3, r4, r5, pc}
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	e7fb      	b.n	800ef66 <_fflush_r+0x42>

0800ef6e <strncpy>:
 800ef6e:	b510      	push	{r4, lr}
 800ef70:	3901      	subs	r1, #1
 800ef72:	4603      	mov	r3, r0
 800ef74:	b132      	cbz	r2, 800ef84 <strncpy+0x16>
 800ef76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ef7a:	f803 4b01 	strb.w	r4, [r3], #1
 800ef7e:	3a01      	subs	r2, #1
 800ef80:	2c00      	cmp	r4, #0
 800ef82:	d1f7      	bne.n	800ef74 <strncpy+0x6>
 800ef84:	441a      	add	r2, r3
 800ef86:	2100      	movs	r1, #0
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d100      	bne.n	800ef8e <strncpy+0x20>
 800ef8c:	bd10      	pop	{r4, pc}
 800ef8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef92:	e7f9      	b.n	800ef88 <strncpy+0x1a>

0800ef94 <_localeconv_r>:
 800ef94:	4800      	ldr	r0, [pc, #0]	@ (800ef98 <_localeconv_r+0x4>)
 800ef96:	4770      	bx	lr
 800ef98:	2400065c 	.word	0x2400065c

0800ef9c <_sbrk_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	4d06      	ldr	r5, [pc, #24]	@ (800efb8 <_sbrk_r+0x1c>)
 800efa0:	2300      	movs	r3, #0
 800efa2:	4604      	mov	r4, r0
 800efa4:	4608      	mov	r0, r1
 800efa6:	602b      	str	r3, [r5, #0]
 800efa8:	f7f3 fb10 	bl	80025cc <_sbrk>
 800efac:	1c43      	adds	r3, r0, #1
 800efae:	d102      	bne.n	800efb6 <_sbrk_r+0x1a>
 800efb0:	682b      	ldr	r3, [r5, #0]
 800efb2:	b103      	cbz	r3, 800efb6 <_sbrk_r+0x1a>
 800efb4:	6023      	str	r3, [r4, #0]
 800efb6:	bd38      	pop	{r3, r4, r5, pc}
 800efb8:	240251c8 	.word	0x240251c8

0800efbc <__libc_fini_array>:
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	4d07      	ldr	r5, [pc, #28]	@ (800efdc <__libc_fini_array+0x20>)
 800efc0:	4c07      	ldr	r4, [pc, #28]	@ (800efe0 <__libc_fini_array+0x24>)
 800efc2:	1b64      	subs	r4, r4, r5
 800efc4:	10a4      	asrs	r4, r4, #2
 800efc6:	b91c      	cbnz	r4, 800efd0 <__libc_fini_array+0x14>
 800efc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efcc:	f003 bfc4 	b.w	8012f58 <_fini>
 800efd0:	3c01      	subs	r4, #1
 800efd2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800efd6:	4798      	blx	r3
 800efd8:	e7f5      	b.n	800efc6 <__libc_fini_array+0xa>
 800efda:	bf00      	nop
 800efdc:	08015700 	.word	0x08015700
 800efe0:	08015704 	.word	0x08015704

0800efe4 <sysconf>:
 800efe4:	2808      	cmp	r0, #8
 800efe6:	b508      	push	{r3, lr}
 800efe8:	d006      	beq.n	800eff8 <sysconf+0x14>
 800efea:	f7fe f991 	bl	800d310 <__errno>
 800efee:	2316      	movs	r3, #22
 800eff0:	6003      	str	r3, [r0, #0]
 800eff2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eff6:	bd08      	pop	{r3, pc}
 800eff8:	2080      	movs	r0, #128	@ 0x80
 800effa:	e7fc      	b.n	800eff6 <sysconf+0x12>
 800effc:	0000      	movs	r0, r0
	...

0800f000 <frexp>:
 800f000:	2200      	movs	r2, #0
 800f002:	ee10 1a90 	vmov	r1, s1
 800f006:	6002      	str	r2, [r0, #0]
 800f008:	4a17      	ldr	r2, [pc, #92]	@ (800f068 <frexp+0x68>)
 800f00a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f00e:	4293      	cmp	r3, r2
 800f010:	d823      	bhi.n	800f05a <frexp+0x5a>
 800f012:	ee10 2a10 	vmov	r2, s0
 800f016:	431a      	orrs	r2, r3
 800f018:	d01f      	beq.n	800f05a <frexp+0x5a>
 800f01a:	4a14      	ldr	r2, [pc, #80]	@ (800f06c <frexp+0x6c>)
 800f01c:	400a      	ands	r2, r1
 800f01e:	b952      	cbnz	r2, 800f036 <frexp+0x36>
 800f020:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 800f060 <frexp+0x60>
 800f024:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f028:	ee10 1a90 	vmov	r1, s1
 800f02c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800f030:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f034:	6002      	str	r2, [r0, #0]
 800f036:	6802      	ldr	r2, [r0, #0]
 800f038:	151b      	asrs	r3, r3, #20
 800f03a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800f03e:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800f042:	441a      	add	r2, r3
 800f044:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800f048:	6002      	str	r2, [r0, #0]
 800f04a:	ec53 2b10 	vmov	r2, r3, d0
 800f04e:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 800f052:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f056:	ec43 2b10 	vmov	d0, r2, r3
 800f05a:	4770      	bx	lr
 800f05c:	f3af 8000 	nop.w
 800f060:	00000000 	.word	0x00000000
 800f064:	43500000 	.word	0x43500000
 800f068:	7fefffff 	.word	0x7fefffff
 800f06c:	7ff00000 	.word	0x7ff00000

0800f070 <__register_exitproc>:
 800f070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f074:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800f0ec <__register_exitproc+0x7c>
 800f078:	4606      	mov	r6, r0
 800f07a:	f8da 0000 	ldr.w	r0, [sl]
 800f07e:	4698      	mov	r8, r3
 800f080:	460f      	mov	r7, r1
 800f082:	4691      	mov	r9, r2
 800f084:	f7fe f970 	bl	800d368 <__retarget_lock_acquire_recursive>
 800f088:	4b16      	ldr	r3, [pc, #88]	@ (800f0e4 <__register_exitproc+0x74>)
 800f08a:	681c      	ldr	r4, [r3, #0]
 800f08c:	b90c      	cbnz	r4, 800f092 <__register_exitproc+0x22>
 800f08e:	4c16      	ldr	r4, [pc, #88]	@ (800f0e8 <__register_exitproc+0x78>)
 800f090:	601c      	str	r4, [r3, #0]
 800f092:	6865      	ldr	r5, [r4, #4]
 800f094:	f8da 0000 	ldr.w	r0, [sl]
 800f098:	2d1f      	cmp	r5, #31
 800f09a:	dd05      	ble.n	800f0a8 <__register_exitproc+0x38>
 800f09c:	f7fe f965 	bl	800d36a <__retarget_lock_release_recursive>
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a8:	b19e      	cbz	r6, 800f0d2 <__register_exitproc+0x62>
 800f0aa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800f0b4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800f0b8:	40aa      	lsls	r2, r5
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800f0c0:	2e02      	cmp	r6, #2
 800f0c2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800f0c6:	bf02      	ittt	eq
 800f0c8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800f0cc:	4313      	orreq	r3, r2
 800f0ce:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800f0d2:	1c6b      	adds	r3, r5, #1
 800f0d4:	3502      	adds	r5, #2
 800f0d6:	6063      	str	r3, [r4, #4]
 800f0d8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800f0dc:	f7fe f945 	bl	800d36a <__retarget_lock_release_recursive>
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	e7df      	b.n	800f0a4 <__register_exitproc+0x34>
 800f0e4:	240251d0 	.word	0x240251d0
 800f0e8:	24025208 	.word	0x24025208
 800f0ec:	24000158 	.word	0x24000158

0800f0f0 <quorem>:
 800f0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f4:	6903      	ldr	r3, [r0, #16]
 800f0f6:	690c      	ldr	r4, [r1, #16]
 800f0f8:	42a3      	cmp	r3, r4
 800f0fa:	4607      	mov	r7, r0
 800f0fc:	db7e      	blt.n	800f1fc <quorem+0x10c>
 800f0fe:	3c01      	subs	r4, #1
 800f100:	f101 0814 	add.w	r8, r1, #20
 800f104:	00a3      	lsls	r3, r4, #2
 800f106:	f100 0514 	add.w	r5, r0, #20
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f110:	9301      	str	r3, [sp, #4]
 800f112:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f116:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f11a:	3301      	adds	r3, #1
 800f11c:	429a      	cmp	r2, r3
 800f11e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f122:	fbb2 f6f3 	udiv	r6, r2, r3
 800f126:	d32e      	bcc.n	800f186 <quorem+0x96>
 800f128:	f04f 0a00 	mov.w	sl, #0
 800f12c:	46c4      	mov	ip, r8
 800f12e:	46ae      	mov	lr, r5
 800f130:	46d3      	mov	fp, sl
 800f132:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f136:	b298      	uxth	r0, r3
 800f138:	fb06 a000 	mla	r0, r6, r0, sl
 800f13c:	0c02      	lsrs	r2, r0, #16
 800f13e:	0c1b      	lsrs	r3, r3, #16
 800f140:	fb06 2303 	mla	r3, r6, r3, r2
 800f144:	f8de 2000 	ldr.w	r2, [lr]
 800f148:	b280      	uxth	r0, r0
 800f14a:	b292      	uxth	r2, r2
 800f14c:	1a12      	subs	r2, r2, r0
 800f14e:	445a      	add	r2, fp
 800f150:	f8de 0000 	ldr.w	r0, [lr]
 800f154:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f158:	b29b      	uxth	r3, r3
 800f15a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f15e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f162:	b292      	uxth	r2, r2
 800f164:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f168:	45e1      	cmp	r9, ip
 800f16a:	f84e 2b04 	str.w	r2, [lr], #4
 800f16e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f172:	d2de      	bcs.n	800f132 <quorem+0x42>
 800f174:	9b00      	ldr	r3, [sp, #0]
 800f176:	58eb      	ldr	r3, [r5, r3]
 800f178:	b92b      	cbnz	r3, 800f186 <quorem+0x96>
 800f17a:	9b01      	ldr	r3, [sp, #4]
 800f17c:	3b04      	subs	r3, #4
 800f17e:	429d      	cmp	r5, r3
 800f180:	461a      	mov	r2, r3
 800f182:	d32f      	bcc.n	800f1e4 <quorem+0xf4>
 800f184:	613c      	str	r4, [r7, #16]
 800f186:	4638      	mov	r0, r7
 800f188:	f000 ffa4 	bl	80100d4 <__mcmp>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	db25      	blt.n	800f1dc <quorem+0xec>
 800f190:	4629      	mov	r1, r5
 800f192:	2000      	movs	r0, #0
 800f194:	f858 2b04 	ldr.w	r2, [r8], #4
 800f198:	f8d1 c000 	ldr.w	ip, [r1]
 800f19c:	fa1f fe82 	uxth.w	lr, r2
 800f1a0:	fa1f f38c 	uxth.w	r3, ip
 800f1a4:	eba3 030e 	sub.w	r3, r3, lr
 800f1a8:	4403      	add	r3, r0
 800f1aa:	0c12      	lsrs	r2, r2, #16
 800f1ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f1b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1ba:	45c1      	cmp	r9, r8
 800f1bc:	f841 3b04 	str.w	r3, [r1], #4
 800f1c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f1c4:	d2e6      	bcs.n	800f194 <quorem+0xa4>
 800f1c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1ce:	b922      	cbnz	r2, 800f1da <quorem+0xea>
 800f1d0:	3b04      	subs	r3, #4
 800f1d2:	429d      	cmp	r5, r3
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	d30b      	bcc.n	800f1f0 <quorem+0x100>
 800f1d8:	613c      	str	r4, [r7, #16]
 800f1da:	3601      	adds	r6, #1
 800f1dc:	4630      	mov	r0, r6
 800f1de:	b003      	add	sp, #12
 800f1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e4:	6812      	ldr	r2, [r2, #0]
 800f1e6:	3b04      	subs	r3, #4
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	d1cb      	bne.n	800f184 <quorem+0x94>
 800f1ec:	3c01      	subs	r4, #1
 800f1ee:	e7c6      	b.n	800f17e <quorem+0x8e>
 800f1f0:	6812      	ldr	r2, [r2, #0]
 800f1f2:	3b04      	subs	r3, #4
 800f1f4:	2a00      	cmp	r2, #0
 800f1f6:	d1ef      	bne.n	800f1d8 <quorem+0xe8>
 800f1f8:	3c01      	subs	r4, #1
 800f1fa:	e7ea      	b.n	800f1d2 <quorem+0xe2>
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	e7ee      	b.n	800f1de <quorem+0xee>

0800f200 <_dtoa_r>:
 800f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f204:	ed2d 8b02 	vpush	{d8}
 800f208:	b091      	sub	sp, #68	@ 0x44
 800f20a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f20e:	9107      	str	r1, [sp, #28]
 800f210:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800f212:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f214:	9209      	str	r2, [sp, #36]	@ 0x24
 800f216:	ec55 4b10 	vmov	r4, r5, d0
 800f21a:	4681      	mov	r9, r0
 800f21c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f21e:	b149      	cbz	r1, 800f234 <_dtoa_r+0x34>
 800f220:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f222:	604a      	str	r2, [r1, #4]
 800f224:	2301      	movs	r3, #1
 800f226:	4093      	lsls	r3, r2
 800f228:	608b      	str	r3, [r1, #8]
 800f22a:	f000 fd4c 	bl	800fcc6 <_Bfree>
 800f22e:	2300      	movs	r3, #0
 800f230:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 800f234:	1e2b      	subs	r3, r5, #0
 800f236:	bfbb      	ittet	lt
 800f238:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f23c:	9303      	strlt	r3, [sp, #12]
 800f23e:	2300      	movge	r3, #0
 800f240:	2201      	movlt	r2, #1
 800f242:	bfac      	ite	ge
 800f244:	6033      	strge	r3, [r6, #0]
 800f246:	6032      	strlt	r2, [r6, #0]
 800f248:	4b91      	ldr	r3, [pc, #580]	@ (800f490 <_dtoa_r+0x290>)
 800f24a:	9e03      	ldr	r6, [sp, #12]
 800f24c:	43b3      	bics	r3, r6
 800f24e:	d114      	bne.n	800f27a <_dtoa_r+0x7a>
 800f250:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f252:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f25c:	4323      	orrs	r3, r4
 800f25e:	f000 84df 	beq.w	800fc20 <_dtoa_r+0xa20>
 800f262:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f264:	4f8b      	ldr	r7, [pc, #556]	@ (800f494 <_dtoa_r+0x294>)
 800f266:	b113      	cbz	r3, 800f26e <_dtoa_r+0x6e>
 800f268:	1cfb      	adds	r3, r7, #3
 800f26a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f26c:	6013      	str	r3, [r2, #0]
 800f26e:	4638      	mov	r0, r7
 800f270:	b011      	add	sp, #68	@ 0x44
 800f272:	ecbd 8b02 	vpop	{d8}
 800f276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f27e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f286:	d109      	bne.n	800f29c <_dtoa_r+0x9c>
 800f288:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f28a:	2301      	movs	r3, #1
 800f28c:	6013      	str	r3, [r2, #0]
 800f28e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f290:	b113      	cbz	r3, 800f298 <_dtoa_r+0x98>
 800f292:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f294:	4b80      	ldr	r3, [pc, #512]	@ (800f498 <_dtoa_r+0x298>)
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	4f80      	ldr	r7, [pc, #512]	@ (800f49c <_dtoa_r+0x29c>)
 800f29a:	e7e8      	b.n	800f26e <_dtoa_r+0x6e>
 800f29c:	aa0e      	add	r2, sp, #56	@ 0x38
 800f29e:	a90f      	add	r1, sp, #60	@ 0x3c
 800f2a0:	4648      	mov	r0, r9
 800f2a2:	eeb0 0b48 	vmov.f64	d0, d8
 800f2a6:	f000 ffc5 	bl	8010234 <__d2b>
 800f2aa:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f2ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2b0:	9001      	str	r0, [sp, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d045      	beq.n	800f342 <_dtoa_r+0x142>
 800f2b6:	eeb0 7b48 	vmov.f64	d7, d8
 800f2ba:	ee18 1a90 	vmov	r1, s17
 800f2be:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f2c2:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f2c6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f2ca:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f2ce:	2500      	movs	r5, #0
 800f2d0:	ee07 1a90 	vmov	s15, r1
 800f2d4:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f2d8:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800f478 <_dtoa_r+0x278>
 800f2dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2e0:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 800f480 <_dtoa_r+0x280>
 800f2e4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f2e8:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800f488 <_dtoa_r+0x288>
 800f2ec:	ee07 3a90 	vmov	s15, r3
 800f2f0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f2f4:	eeb0 7b46 	vmov.f64	d7, d6
 800f2f8:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f2fc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f300:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f308:	ee16 8a90 	vmov	r8, s13
 800f30c:	d508      	bpl.n	800f320 <_dtoa_r+0x120>
 800f30e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f312:	eeb4 6b47 	vcmp.f64	d6, d7
 800f316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31a:	bf18      	it	ne
 800f31c:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800f320:	f1b8 0f16 	cmp.w	r8, #22
 800f324:	d82b      	bhi.n	800f37e <_dtoa_r+0x17e>
 800f326:	495e      	ldr	r1, [pc, #376]	@ (800f4a0 <_dtoa_r+0x2a0>)
 800f328:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f32c:	ed91 7b00 	vldr	d7, [r1]
 800f330:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f338:	d501      	bpl.n	800f33e <_dtoa_r+0x13e>
 800f33a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f33e:	2100      	movs	r1, #0
 800f340:	e01e      	b.n	800f380 <_dtoa_r+0x180>
 800f342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f344:	4413      	add	r3, r2
 800f346:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f34a:	2920      	cmp	r1, #32
 800f34c:	bfc1      	itttt	gt
 800f34e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f352:	408e      	lslgt	r6, r1
 800f354:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f358:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f35c:	bfd6      	itet	le
 800f35e:	f1c1 0120 	rsble	r1, r1, #32
 800f362:	4331      	orrgt	r1, r6
 800f364:	fa04 f101 	lslle.w	r1, r4, r1
 800f368:	ee07 1a90 	vmov	s15, r1
 800f36c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f370:	3b01      	subs	r3, #1
 800f372:	ee17 1a90 	vmov	r1, s15
 800f376:	2501      	movs	r5, #1
 800f378:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f37c:	e7a8      	b.n	800f2d0 <_dtoa_r+0xd0>
 800f37e:	2101      	movs	r1, #1
 800f380:	1ad2      	subs	r2, r2, r3
 800f382:	1e53      	subs	r3, r2, #1
 800f384:	9306      	str	r3, [sp, #24]
 800f386:	bf45      	ittet	mi
 800f388:	f1c2 0301 	rsbmi	r3, r2, #1
 800f38c:	9305      	strmi	r3, [sp, #20]
 800f38e:	2300      	movpl	r3, #0
 800f390:	2300      	movmi	r3, #0
 800f392:	bf4c      	ite	mi
 800f394:	9306      	strmi	r3, [sp, #24]
 800f396:	9305      	strpl	r3, [sp, #20]
 800f398:	f1b8 0f00 	cmp.w	r8, #0
 800f39c:	910c      	str	r1, [sp, #48]	@ 0x30
 800f39e:	db18      	blt.n	800f3d2 <_dtoa_r+0x1d2>
 800f3a0:	9b06      	ldr	r3, [sp, #24]
 800f3a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f3a6:	4443      	add	r3, r8
 800f3a8:	9306      	str	r3, [sp, #24]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	9a07      	ldr	r2, [sp, #28]
 800f3ae:	2a09      	cmp	r2, #9
 800f3b0:	d84a      	bhi.n	800f448 <_dtoa_r+0x248>
 800f3b2:	2a05      	cmp	r2, #5
 800f3b4:	bfc4      	itt	gt
 800f3b6:	3a04      	subgt	r2, #4
 800f3b8:	9207      	strgt	r2, [sp, #28]
 800f3ba:	9a07      	ldr	r2, [sp, #28]
 800f3bc:	f1a2 0202 	sub.w	r2, r2, #2
 800f3c0:	bfcc      	ite	gt
 800f3c2:	2400      	movgt	r4, #0
 800f3c4:	2401      	movle	r4, #1
 800f3c6:	2a03      	cmp	r2, #3
 800f3c8:	d849      	bhi.n	800f45e <_dtoa_r+0x25e>
 800f3ca:	e8df f002 	tbb	[pc, r2]
 800f3ce:	2f0b      	.short	0x2f0b
 800f3d0:	3b2d      	.short	0x3b2d
 800f3d2:	9b05      	ldr	r3, [sp, #20]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	eba3 0308 	sub.w	r3, r3, r8
 800f3da:	9305      	str	r3, [sp, #20]
 800f3dc:	920a      	str	r2, [sp, #40]	@ 0x28
 800f3de:	f1c8 0300 	rsb	r3, r8, #0
 800f3e2:	e7e3      	b.n	800f3ac <_dtoa_r+0x1ac>
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	9208      	str	r2, [sp, #32]
 800f3e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3ea:	2a00      	cmp	r2, #0
 800f3ec:	dc3a      	bgt.n	800f464 <_dtoa_r+0x264>
 800f3ee:	f04f 0b01 	mov.w	fp, #1
 800f3f2:	46da      	mov	sl, fp
 800f3f4:	465a      	mov	r2, fp
 800f3f6:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	2004      	movs	r0, #4
 800f3fe:	f100 0614 	add.w	r6, r0, #20
 800f402:	4296      	cmp	r6, r2
 800f404:	d933      	bls.n	800f46e <_dtoa_r+0x26e>
 800f406:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 800f40a:	4648      	mov	r0, r9
 800f40c:	9304      	str	r3, [sp, #16]
 800f40e:	f000 fc35 	bl	800fc7c <_Balloc>
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	4607      	mov	r7, r0
 800f416:	2800      	cmp	r0, #0
 800f418:	d148      	bne.n	800f4ac <_dtoa_r+0x2ac>
 800f41a:	4b22      	ldr	r3, [pc, #136]	@ (800f4a4 <_dtoa_r+0x2a4>)
 800f41c:	4602      	mov	r2, r0
 800f41e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f422:	4821      	ldr	r0, [pc, #132]	@ (800f4a8 <_dtoa_r+0x2a8>)
 800f424:	f000 fffc 	bl	8010420 <__assert_func>
 800f428:	2201      	movs	r2, #1
 800f42a:	e7dc      	b.n	800f3e6 <_dtoa_r+0x1e6>
 800f42c:	2200      	movs	r2, #0
 800f42e:	9208      	str	r2, [sp, #32]
 800f430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f432:	eb08 0b02 	add.w	fp, r8, r2
 800f436:	f10b 0a01 	add.w	sl, fp, #1
 800f43a:	4652      	mov	r2, sl
 800f43c:	2a01      	cmp	r2, #1
 800f43e:	bfb8      	it	lt
 800f440:	2201      	movlt	r2, #1
 800f442:	e7da      	b.n	800f3fa <_dtoa_r+0x1fa>
 800f444:	2201      	movs	r2, #1
 800f446:	e7f2      	b.n	800f42e <_dtoa_r+0x22e>
 800f448:	2401      	movs	r4, #1
 800f44a:	2200      	movs	r2, #0
 800f44c:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f450:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f454:	2100      	movs	r1, #0
 800f456:	46da      	mov	sl, fp
 800f458:	2212      	movs	r2, #18
 800f45a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f45c:	e7cd      	b.n	800f3fa <_dtoa_r+0x1fa>
 800f45e:	2201      	movs	r2, #1
 800f460:	9208      	str	r2, [sp, #32]
 800f462:	e7f5      	b.n	800f450 <_dtoa_r+0x250>
 800f464:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f468:	46da      	mov	sl, fp
 800f46a:	465a      	mov	r2, fp
 800f46c:	e7c5      	b.n	800f3fa <_dtoa_r+0x1fa>
 800f46e:	3101      	adds	r1, #1
 800f470:	0040      	lsls	r0, r0, #1
 800f472:	e7c4      	b.n	800f3fe <_dtoa_r+0x1fe>
 800f474:	f3af 8000 	nop.w
 800f478:	636f4361 	.word	0x636f4361
 800f47c:	3fd287a7 	.word	0x3fd287a7
 800f480:	8b60c8b3 	.word	0x8b60c8b3
 800f484:	3fc68a28 	.word	0x3fc68a28
 800f488:	509f79fb 	.word	0x509f79fb
 800f48c:	3fd34413 	.word	0x3fd34413
 800f490:	7ff00000 	.word	0x7ff00000
 800f494:	080130a1 	.word	0x080130a1
 800f498:	08013077 	.word	0x08013077
 800f49c:	08013076 	.word	0x08013076
 800f4a0:	080131a0 	.word	0x080131a0
 800f4a4:	080130a5 	.word	0x080130a5
 800f4a8:	080130b6 	.word	0x080130b6
 800f4ac:	f1ba 0f0e 	cmp.w	sl, #14
 800f4b0:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 800f4b4:	d86f      	bhi.n	800f596 <_dtoa_r+0x396>
 800f4b6:	2c00      	cmp	r4, #0
 800f4b8:	d06d      	beq.n	800f596 <_dtoa_r+0x396>
 800f4ba:	f1b8 0f00 	cmp.w	r8, #0
 800f4be:	f340 80c2 	ble.w	800f646 <_dtoa_r+0x446>
 800f4c2:	4aca      	ldr	r2, [pc, #808]	@ (800f7ec <_dtoa_r+0x5ec>)
 800f4c4:	f008 010f 	and.w	r1, r8, #15
 800f4c8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f4cc:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f4d0:	ed92 7b00 	vldr	d7, [r2]
 800f4d4:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f4d8:	f000 80a9 	beq.w	800f62e <_dtoa_r+0x42e>
 800f4dc:	4ac4      	ldr	r2, [pc, #784]	@ (800f7f0 <_dtoa_r+0x5f0>)
 800f4de:	ed92 6b08 	vldr	d6, [r2, #32]
 800f4e2:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f4e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f4ea:	f001 010f 	and.w	r1, r1, #15
 800f4ee:	2203      	movs	r2, #3
 800f4f0:	48bf      	ldr	r0, [pc, #764]	@ (800f7f0 <_dtoa_r+0x5f0>)
 800f4f2:	2900      	cmp	r1, #0
 800f4f4:	f040 809d 	bne.w	800f632 <_dtoa_r+0x432>
 800f4f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f4fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f500:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f504:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f506:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f50a:	2900      	cmp	r1, #0
 800f50c:	f000 80c1 	beq.w	800f692 <_dtoa_r+0x492>
 800f510:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f514:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51c:	f140 80b9 	bpl.w	800f692 <_dtoa_r+0x492>
 800f520:	f1ba 0f00 	cmp.w	sl, #0
 800f524:	f000 80b5 	beq.w	800f692 <_dtoa_r+0x492>
 800f528:	f1bb 0f00 	cmp.w	fp, #0
 800f52c:	dd31      	ble.n	800f592 <_dtoa_r+0x392>
 800f52e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f532:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f536:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f53a:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800f53e:	9104      	str	r1, [sp, #16]
 800f540:	3201      	adds	r2, #1
 800f542:	465c      	mov	r4, fp
 800f544:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f548:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f54c:	ee07 2a90 	vmov	s15, r2
 800f550:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f554:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f558:	ee15 2a90 	vmov	r2, s11
 800f55c:	ec51 0b15 	vmov	r0, r1, d5
 800f560:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f564:	2c00      	cmp	r4, #0
 800f566:	f040 8098 	bne.w	800f69a <_dtoa_r+0x49a>
 800f56a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f56e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f572:	ec41 0b17 	vmov	d7, r0, r1
 800f576:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57e:	f300 8260 	bgt.w	800fa42 <_dtoa_r+0x842>
 800f582:	eeb1 7b47 	vneg.f64	d7, d7
 800f586:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58e:	f100 80f5 	bmi.w	800f77c <_dtoa_r+0x57c>
 800f592:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f596:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f598:	2a00      	cmp	r2, #0
 800f59a:	f2c0 812b 	blt.w	800f7f4 <_dtoa_r+0x5f4>
 800f59e:	f1b8 0f0e 	cmp.w	r8, #14
 800f5a2:	f300 8127 	bgt.w	800f7f4 <_dtoa_r+0x5f4>
 800f5a6:	4b91      	ldr	r3, [pc, #580]	@ (800f7ec <_dtoa_r+0x5ec>)
 800f5a8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f5ac:	ed93 6b00 	vldr	d6, [r3]
 800f5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	da03      	bge.n	800f5be <_dtoa_r+0x3be>
 800f5b6:	f1ba 0f00 	cmp.w	sl, #0
 800f5ba:	f340 80d2 	ble.w	800f762 <_dtoa_r+0x562>
 800f5be:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f5c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5c6:	463e      	mov	r6, r7
 800f5c8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f5cc:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f5d0:	ee15 3a10 	vmov	r3, s10
 800f5d4:	3330      	adds	r3, #48	@ 0x30
 800f5d6:	f806 3b01 	strb.w	r3, [r6], #1
 800f5da:	1bf3      	subs	r3, r6, r7
 800f5dc:	459a      	cmp	sl, r3
 800f5de:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f5e2:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f5e6:	f040 80f8 	bne.w	800f7da <_dtoa_r+0x5da>
 800f5ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f5ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f6:	f300 80dd 	bgt.w	800f7b4 <_dtoa_r+0x5b4>
 800f5fa:	eeb4 7b46 	vcmp.f64	d7, d6
 800f5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f602:	d104      	bne.n	800f60e <_dtoa_r+0x40e>
 800f604:	ee15 3a10 	vmov	r3, s10
 800f608:	07db      	lsls	r3, r3, #31
 800f60a:	f100 80d3 	bmi.w	800f7b4 <_dtoa_r+0x5b4>
 800f60e:	9901      	ldr	r1, [sp, #4]
 800f610:	4648      	mov	r0, r9
 800f612:	f000 fb58 	bl	800fcc6 <_Bfree>
 800f616:	2300      	movs	r3, #0
 800f618:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f61a:	7033      	strb	r3, [r6, #0]
 800f61c:	f108 0301 	add.w	r3, r8, #1
 800f620:	6013      	str	r3, [r2, #0]
 800f622:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f624:	2b00      	cmp	r3, #0
 800f626:	f43f ae22 	beq.w	800f26e <_dtoa_r+0x6e>
 800f62a:	601e      	str	r6, [r3, #0]
 800f62c:	e61f      	b.n	800f26e <_dtoa_r+0x6e>
 800f62e:	2202      	movs	r2, #2
 800f630:	e75e      	b.n	800f4f0 <_dtoa_r+0x2f0>
 800f632:	07cc      	lsls	r4, r1, #31
 800f634:	d504      	bpl.n	800f640 <_dtoa_r+0x440>
 800f636:	ed90 6b00 	vldr	d6, [r0]
 800f63a:	3201      	adds	r2, #1
 800f63c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f640:	1049      	asrs	r1, r1, #1
 800f642:	3008      	adds	r0, #8
 800f644:	e755      	b.n	800f4f2 <_dtoa_r+0x2f2>
 800f646:	d022      	beq.n	800f68e <_dtoa_r+0x48e>
 800f648:	f1c8 0100 	rsb	r1, r8, #0
 800f64c:	4a67      	ldr	r2, [pc, #412]	@ (800f7ec <_dtoa_r+0x5ec>)
 800f64e:	f001 000f 	and.w	r0, r1, #15
 800f652:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f656:	ed92 7b00 	vldr	d7, [r2]
 800f65a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f65e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f662:	4863      	ldr	r0, [pc, #396]	@ (800f7f0 <_dtoa_r+0x5f0>)
 800f664:	1109      	asrs	r1, r1, #4
 800f666:	2400      	movs	r4, #0
 800f668:	2202      	movs	r2, #2
 800f66a:	b929      	cbnz	r1, 800f678 <_dtoa_r+0x478>
 800f66c:	2c00      	cmp	r4, #0
 800f66e:	f43f af49 	beq.w	800f504 <_dtoa_r+0x304>
 800f672:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f676:	e745      	b.n	800f504 <_dtoa_r+0x304>
 800f678:	07ce      	lsls	r6, r1, #31
 800f67a:	d505      	bpl.n	800f688 <_dtoa_r+0x488>
 800f67c:	ed90 6b00 	vldr	d6, [r0]
 800f680:	3201      	adds	r2, #1
 800f682:	2401      	movs	r4, #1
 800f684:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f688:	1049      	asrs	r1, r1, #1
 800f68a:	3008      	adds	r0, #8
 800f68c:	e7ed      	b.n	800f66a <_dtoa_r+0x46a>
 800f68e:	2202      	movs	r2, #2
 800f690:	e738      	b.n	800f504 <_dtoa_r+0x304>
 800f692:	f8cd 8010 	str.w	r8, [sp, #16]
 800f696:	4654      	mov	r4, sl
 800f698:	e754      	b.n	800f544 <_dtoa_r+0x344>
 800f69a:	4a54      	ldr	r2, [pc, #336]	@ (800f7ec <_dtoa_r+0x5ec>)
 800f69c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f6a0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f6a4:	9a08      	ldr	r2, [sp, #32]
 800f6a6:	ec41 0b17 	vmov	d7, r0, r1
 800f6aa:	443c      	add	r4, r7
 800f6ac:	b34a      	cbz	r2, 800f702 <_dtoa_r+0x502>
 800f6ae:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f6b2:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f6b6:	463e      	mov	r6, r7
 800f6b8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f6bc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f6c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f6c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f6c8:	ee14 2a90 	vmov	r2, s9
 800f6cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f6d0:	3230      	adds	r2, #48	@ 0x30
 800f6d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f6d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6de:	f806 2b01 	strb.w	r2, [r6], #1
 800f6e2:	d438      	bmi.n	800f756 <_dtoa_r+0x556>
 800f6e4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f6e8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f0:	d462      	bmi.n	800f7b8 <_dtoa_r+0x5b8>
 800f6f2:	42a6      	cmp	r6, r4
 800f6f4:	f43f af4d 	beq.w	800f592 <_dtoa_r+0x392>
 800f6f8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f6fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f700:	e7e0      	b.n	800f6c4 <_dtoa_r+0x4c4>
 800f702:	4621      	mov	r1, r4
 800f704:	463e      	mov	r6, r7
 800f706:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f70a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f70e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f712:	ee14 2a90 	vmov	r2, s9
 800f716:	3230      	adds	r2, #48	@ 0x30
 800f718:	f806 2b01 	strb.w	r2, [r6], #1
 800f71c:	42a6      	cmp	r6, r4
 800f71e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f722:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f726:	d119      	bne.n	800f75c <_dtoa_r+0x55c>
 800f728:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f72c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f730:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f738:	dc3e      	bgt.n	800f7b8 <_dtoa_r+0x5b8>
 800f73a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f73e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f746:	f57f af24 	bpl.w	800f592 <_dtoa_r+0x392>
 800f74a:	460e      	mov	r6, r1
 800f74c:	3901      	subs	r1, #1
 800f74e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f752:	2b30      	cmp	r3, #48	@ 0x30
 800f754:	d0f9      	beq.n	800f74a <_dtoa_r+0x54a>
 800f756:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f75a:	e758      	b.n	800f60e <_dtoa_r+0x40e>
 800f75c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f760:	e7d5      	b.n	800f70e <_dtoa_r+0x50e>
 800f762:	d10b      	bne.n	800f77c <_dtoa_r+0x57c>
 800f764:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f768:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f770:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f778:	f2c0 8160 	blt.w	800fa3c <_dtoa_r+0x83c>
 800f77c:	2400      	movs	r4, #0
 800f77e:	4625      	mov	r5, r4
 800f780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f782:	43db      	mvns	r3, r3
 800f784:	9304      	str	r3, [sp, #16]
 800f786:	463e      	mov	r6, r7
 800f788:	f04f 0800 	mov.w	r8, #0
 800f78c:	4621      	mov	r1, r4
 800f78e:	4648      	mov	r0, r9
 800f790:	f000 fa99 	bl	800fcc6 <_Bfree>
 800f794:	2d00      	cmp	r5, #0
 800f796:	d0de      	beq.n	800f756 <_dtoa_r+0x556>
 800f798:	f1b8 0f00 	cmp.w	r8, #0
 800f79c:	d005      	beq.n	800f7aa <_dtoa_r+0x5aa>
 800f79e:	45a8      	cmp	r8, r5
 800f7a0:	d003      	beq.n	800f7aa <_dtoa_r+0x5aa>
 800f7a2:	4641      	mov	r1, r8
 800f7a4:	4648      	mov	r0, r9
 800f7a6:	f000 fa8e 	bl	800fcc6 <_Bfree>
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	4648      	mov	r0, r9
 800f7ae:	f000 fa8a 	bl	800fcc6 <_Bfree>
 800f7b2:	e7d0      	b.n	800f756 <_dtoa_r+0x556>
 800f7b4:	f8cd 8010 	str.w	r8, [sp, #16]
 800f7b8:	4633      	mov	r3, r6
 800f7ba:	461e      	mov	r6, r3
 800f7bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7c0:	2a39      	cmp	r2, #57	@ 0x39
 800f7c2:	d106      	bne.n	800f7d2 <_dtoa_r+0x5d2>
 800f7c4:	429f      	cmp	r7, r3
 800f7c6:	d1f8      	bne.n	800f7ba <_dtoa_r+0x5ba>
 800f7c8:	9a04      	ldr	r2, [sp, #16]
 800f7ca:	3201      	adds	r2, #1
 800f7cc:	9204      	str	r2, [sp, #16]
 800f7ce:	2230      	movs	r2, #48	@ 0x30
 800f7d0:	703a      	strb	r2, [r7, #0]
 800f7d2:	781a      	ldrb	r2, [r3, #0]
 800f7d4:	3201      	adds	r2, #1
 800f7d6:	701a      	strb	r2, [r3, #0]
 800f7d8:	e7bd      	b.n	800f756 <_dtoa_r+0x556>
 800f7da:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f7de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e6:	f47f aeef 	bne.w	800f5c8 <_dtoa_r+0x3c8>
 800f7ea:	e710      	b.n	800f60e <_dtoa_r+0x40e>
 800f7ec:	080131a0 	.word	0x080131a0
 800f7f0:	08013178 	.word	0x08013178
 800f7f4:	9908      	ldr	r1, [sp, #32]
 800f7f6:	2900      	cmp	r1, #0
 800f7f8:	f000 80e3 	beq.w	800f9c2 <_dtoa_r+0x7c2>
 800f7fc:	9907      	ldr	r1, [sp, #28]
 800f7fe:	2901      	cmp	r1, #1
 800f800:	f300 80c8 	bgt.w	800f994 <_dtoa_r+0x794>
 800f804:	2d00      	cmp	r5, #0
 800f806:	f000 80c1 	beq.w	800f98c <_dtoa_r+0x78c>
 800f80a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f80e:	9e05      	ldr	r6, [sp, #20]
 800f810:	461c      	mov	r4, r3
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	9b05      	ldr	r3, [sp, #20]
 800f816:	4413      	add	r3, r2
 800f818:	9305      	str	r3, [sp, #20]
 800f81a:	9b06      	ldr	r3, [sp, #24]
 800f81c:	2101      	movs	r1, #1
 800f81e:	4413      	add	r3, r2
 800f820:	4648      	mov	r0, r9
 800f822:	9306      	str	r3, [sp, #24]
 800f824:	f000 faea 	bl	800fdfc <__i2b>
 800f828:	9b04      	ldr	r3, [sp, #16]
 800f82a:	4605      	mov	r5, r0
 800f82c:	b166      	cbz	r6, 800f848 <_dtoa_r+0x648>
 800f82e:	9a06      	ldr	r2, [sp, #24]
 800f830:	2a00      	cmp	r2, #0
 800f832:	dd09      	ble.n	800f848 <_dtoa_r+0x648>
 800f834:	42b2      	cmp	r2, r6
 800f836:	9905      	ldr	r1, [sp, #20]
 800f838:	bfa8      	it	ge
 800f83a:	4632      	movge	r2, r6
 800f83c:	1a89      	subs	r1, r1, r2
 800f83e:	9105      	str	r1, [sp, #20]
 800f840:	9906      	ldr	r1, [sp, #24]
 800f842:	1ab6      	subs	r6, r6, r2
 800f844:	1a8a      	subs	r2, r1, r2
 800f846:	9206      	str	r2, [sp, #24]
 800f848:	b1fb      	cbz	r3, 800f88a <_dtoa_r+0x68a>
 800f84a:	9a08      	ldr	r2, [sp, #32]
 800f84c:	2a00      	cmp	r2, #0
 800f84e:	f000 80bc 	beq.w	800f9ca <_dtoa_r+0x7ca>
 800f852:	b19c      	cbz	r4, 800f87c <_dtoa_r+0x67c>
 800f854:	4629      	mov	r1, r5
 800f856:	4622      	mov	r2, r4
 800f858:	4648      	mov	r0, r9
 800f85a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f85c:	f000 fb8e 	bl	800ff7c <__pow5mult>
 800f860:	9a01      	ldr	r2, [sp, #4]
 800f862:	4601      	mov	r1, r0
 800f864:	4605      	mov	r5, r0
 800f866:	4648      	mov	r0, r9
 800f868:	f000 fade 	bl	800fe28 <__multiply>
 800f86c:	9901      	ldr	r1, [sp, #4]
 800f86e:	9004      	str	r0, [sp, #16]
 800f870:	4648      	mov	r0, r9
 800f872:	f000 fa28 	bl	800fcc6 <_Bfree>
 800f876:	9a04      	ldr	r2, [sp, #16]
 800f878:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f87a:	9201      	str	r2, [sp, #4]
 800f87c:	1b1a      	subs	r2, r3, r4
 800f87e:	d004      	beq.n	800f88a <_dtoa_r+0x68a>
 800f880:	9901      	ldr	r1, [sp, #4]
 800f882:	4648      	mov	r0, r9
 800f884:	f000 fb7a 	bl	800ff7c <__pow5mult>
 800f888:	9001      	str	r0, [sp, #4]
 800f88a:	2101      	movs	r1, #1
 800f88c:	4648      	mov	r0, r9
 800f88e:	f000 fab5 	bl	800fdfc <__i2b>
 800f892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f894:	4604      	mov	r4, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 81cb 	beq.w	800fc32 <_dtoa_r+0xa32>
 800f89c:	461a      	mov	r2, r3
 800f89e:	4601      	mov	r1, r0
 800f8a0:	4648      	mov	r0, r9
 800f8a2:	f000 fb6b 	bl	800ff7c <__pow5mult>
 800f8a6:	9b07      	ldr	r3, [sp, #28]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	f300 8095 	bgt.w	800f9da <_dtoa_r+0x7da>
 800f8b0:	9b02      	ldr	r3, [sp, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f040 808b 	bne.w	800f9ce <_dtoa_r+0x7ce>
 800f8b8:	9b03      	ldr	r3, [sp, #12]
 800f8ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f8be:	2a00      	cmp	r2, #0
 800f8c0:	f040 8087 	bne.w	800f9d2 <_dtoa_r+0x7d2>
 800f8c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f8c8:	0d12      	lsrs	r2, r2, #20
 800f8ca:	0512      	lsls	r2, r2, #20
 800f8cc:	2a00      	cmp	r2, #0
 800f8ce:	f000 8082 	beq.w	800f9d6 <_dtoa_r+0x7d6>
 800f8d2:	9b05      	ldr	r3, [sp, #20]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	9305      	str	r3, [sp, #20]
 800f8d8:	9b06      	ldr	r3, [sp, #24]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	9306      	str	r3, [sp, #24]
 800f8de:	2301      	movs	r3, #1
 800f8e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f000 81aa 	beq.w	800fc3e <_dtoa_r+0xa3e>
 800f8ea:	6922      	ldr	r2, [r4, #16]
 800f8ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f8f0:	6910      	ldr	r0, [r2, #16]
 800f8f2:	f000 fa37 	bl	800fd64 <__hi0bits>
 800f8f6:	f1c0 0020 	rsb	r0, r0, #32
 800f8fa:	9b06      	ldr	r3, [sp, #24]
 800f8fc:	4418      	add	r0, r3
 800f8fe:	f010 001f 	ands.w	r0, r0, #31
 800f902:	d076      	beq.n	800f9f2 <_dtoa_r+0x7f2>
 800f904:	f1c0 0220 	rsb	r2, r0, #32
 800f908:	2a04      	cmp	r2, #4
 800f90a:	dd69      	ble.n	800f9e0 <_dtoa_r+0x7e0>
 800f90c:	9b05      	ldr	r3, [sp, #20]
 800f90e:	f1c0 001c 	rsb	r0, r0, #28
 800f912:	4403      	add	r3, r0
 800f914:	9305      	str	r3, [sp, #20]
 800f916:	9b06      	ldr	r3, [sp, #24]
 800f918:	4406      	add	r6, r0
 800f91a:	4403      	add	r3, r0
 800f91c:	9306      	str	r3, [sp, #24]
 800f91e:	9b05      	ldr	r3, [sp, #20]
 800f920:	2b00      	cmp	r3, #0
 800f922:	dd05      	ble.n	800f930 <_dtoa_r+0x730>
 800f924:	9901      	ldr	r1, [sp, #4]
 800f926:	461a      	mov	r2, r3
 800f928:	4648      	mov	r0, r9
 800f92a:	f000 fb67 	bl	800fffc <__lshift>
 800f92e:	9001      	str	r0, [sp, #4]
 800f930:	9b06      	ldr	r3, [sp, #24]
 800f932:	2b00      	cmp	r3, #0
 800f934:	dd05      	ble.n	800f942 <_dtoa_r+0x742>
 800f936:	4621      	mov	r1, r4
 800f938:	461a      	mov	r2, r3
 800f93a:	4648      	mov	r0, r9
 800f93c:	f000 fb5e 	bl	800fffc <__lshift>
 800f940:	4604      	mov	r4, r0
 800f942:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f944:	2b00      	cmp	r3, #0
 800f946:	d056      	beq.n	800f9f6 <_dtoa_r+0x7f6>
 800f948:	9801      	ldr	r0, [sp, #4]
 800f94a:	4621      	mov	r1, r4
 800f94c:	f000 fbc2 	bl	80100d4 <__mcmp>
 800f950:	2800      	cmp	r0, #0
 800f952:	da50      	bge.n	800f9f6 <_dtoa_r+0x7f6>
 800f954:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800f958:	9304      	str	r3, [sp, #16]
 800f95a:	9901      	ldr	r1, [sp, #4]
 800f95c:	2300      	movs	r3, #0
 800f95e:	220a      	movs	r2, #10
 800f960:	4648      	mov	r0, r9
 800f962:	f000 f9b9 	bl	800fcd8 <__multadd>
 800f966:	9b08      	ldr	r3, [sp, #32]
 800f968:	9001      	str	r0, [sp, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 8169 	beq.w	800fc42 <_dtoa_r+0xa42>
 800f970:	4629      	mov	r1, r5
 800f972:	2300      	movs	r3, #0
 800f974:	220a      	movs	r2, #10
 800f976:	4648      	mov	r0, r9
 800f978:	f000 f9ae 	bl	800fcd8 <__multadd>
 800f97c:	f1bb 0f00 	cmp.w	fp, #0
 800f980:	4605      	mov	r5, r0
 800f982:	dc64      	bgt.n	800fa4e <_dtoa_r+0x84e>
 800f984:	9b07      	ldr	r3, [sp, #28]
 800f986:	2b02      	cmp	r3, #2
 800f988:	dc3e      	bgt.n	800fa08 <_dtoa_r+0x808>
 800f98a:	e060      	b.n	800fa4e <_dtoa_r+0x84e>
 800f98c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f98e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f992:	e73c      	b.n	800f80e <_dtoa_r+0x60e>
 800f994:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800f998:	42a3      	cmp	r3, r4
 800f99a:	bfbf      	itttt	lt
 800f99c:	1ae2      	sublt	r2, r4, r3
 800f99e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f9a0:	189b      	addlt	r3, r3, r2
 800f9a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800f9a4:	bfae      	itee	ge
 800f9a6:	1b1c      	subge	r4, r3, r4
 800f9a8:	4623      	movlt	r3, r4
 800f9aa:	2400      	movlt	r4, #0
 800f9ac:	f1ba 0f00 	cmp.w	sl, #0
 800f9b0:	bfb5      	itete	lt
 800f9b2:	9a05      	ldrlt	r2, [sp, #20]
 800f9b4:	9e05      	ldrge	r6, [sp, #20]
 800f9b6:	eba2 060a 	sublt.w	r6, r2, sl
 800f9ba:	4652      	movge	r2, sl
 800f9bc:	bfb8      	it	lt
 800f9be:	2200      	movlt	r2, #0
 800f9c0:	e727      	b.n	800f812 <_dtoa_r+0x612>
 800f9c2:	9e05      	ldr	r6, [sp, #20]
 800f9c4:	9d08      	ldr	r5, [sp, #32]
 800f9c6:	461c      	mov	r4, r3
 800f9c8:	e730      	b.n	800f82c <_dtoa_r+0x62c>
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	e758      	b.n	800f880 <_dtoa_r+0x680>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	e786      	b.n	800f8e0 <_dtoa_r+0x6e0>
 800f9d2:	9b02      	ldr	r3, [sp, #8]
 800f9d4:	e784      	b.n	800f8e0 <_dtoa_r+0x6e0>
 800f9d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f9d8:	e783      	b.n	800f8e2 <_dtoa_r+0x6e2>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9de:	e784      	b.n	800f8ea <_dtoa_r+0x6ea>
 800f9e0:	d09d      	beq.n	800f91e <_dtoa_r+0x71e>
 800f9e2:	9b05      	ldr	r3, [sp, #20]
 800f9e4:	321c      	adds	r2, #28
 800f9e6:	4413      	add	r3, r2
 800f9e8:	9305      	str	r3, [sp, #20]
 800f9ea:	9b06      	ldr	r3, [sp, #24]
 800f9ec:	4416      	add	r6, r2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	e794      	b.n	800f91c <_dtoa_r+0x71c>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	e7f5      	b.n	800f9e2 <_dtoa_r+0x7e2>
 800f9f6:	f1ba 0f00 	cmp.w	sl, #0
 800f9fa:	f8cd 8010 	str.w	r8, [sp, #16]
 800f9fe:	46d3      	mov	fp, sl
 800fa00:	dc21      	bgt.n	800fa46 <_dtoa_r+0x846>
 800fa02:	9b07      	ldr	r3, [sp, #28]
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	dd1e      	ble.n	800fa46 <_dtoa_r+0x846>
 800fa08:	f1bb 0f00 	cmp.w	fp, #0
 800fa0c:	f47f aeb8 	bne.w	800f780 <_dtoa_r+0x580>
 800fa10:	4621      	mov	r1, r4
 800fa12:	465b      	mov	r3, fp
 800fa14:	2205      	movs	r2, #5
 800fa16:	4648      	mov	r0, r9
 800fa18:	f000 f95e 	bl	800fcd8 <__multadd>
 800fa1c:	4601      	mov	r1, r0
 800fa1e:	4604      	mov	r4, r0
 800fa20:	9801      	ldr	r0, [sp, #4]
 800fa22:	f000 fb57 	bl	80100d4 <__mcmp>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	f77f aeaa 	ble.w	800f780 <_dtoa_r+0x580>
 800fa2c:	463e      	mov	r6, r7
 800fa2e:	2331      	movs	r3, #49	@ 0x31
 800fa30:	f806 3b01 	strb.w	r3, [r6], #1
 800fa34:	9b04      	ldr	r3, [sp, #16]
 800fa36:	3301      	adds	r3, #1
 800fa38:	9304      	str	r3, [sp, #16]
 800fa3a:	e6a5      	b.n	800f788 <_dtoa_r+0x588>
 800fa3c:	f8cd 8010 	str.w	r8, [sp, #16]
 800fa40:	4654      	mov	r4, sl
 800fa42:	4625      	mov	r5, r4
 800fa44:	e7f2      	b.n	800fa2c <_dtoa_r+0x82c>
 800fa46:	9b08      	ldr	r3, [sp, #32]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 80fe 	beq.w	800fc4a <_dtoa_r+0xa4a>
 800fa4e:	2e00      	cmp	r6, #0
 800fa50:	dd05      	ble.n	800fa5e <_dtoa_r+0x85e>
 800fa52:	4629      	mov	r1, r5
 800fa54:	4632      	mov	r2, r6
 800fa56:	4648      	mov	r0, r9
 800fa58:	f000 fad0 	bl	800fffc <__lshift>
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d057      	beq.n	800fb14 <_dtoa_r+0x914>
 800fa64:	6869      	ldr	r1, [r5, #4]
 800fa66:	4648      	mov	r0, r9
 800fa68:	f000 f908 	bl	800fc7c <_Balloc>
 800fa6c:	4606      	mov	r6, r0
 800fa6e:	b920      	cbnz	r0, 800fa7a <_dtoa_r+0x87a>
 800fa70:	4b80      	ldr	r3, [pc, #512]	@ (800fc74 <_dtoa_r+0xa74>)
 800fa72:	4602      	mov	r2, r0
 800fa74:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa78:	e4d3      	b.n	800f422 <_dtoa_r+0x222>
 800fa7a:	692a      	ldr	r2, [r5, #16]
 800fa7c:	3202      	adds	r2, #2
 800fa7e:	0092      	lsls	r2, r2, #2
 800fa80:	f105 010c 	add.w	r1, r5, #12
 800fa84:	300c      	adds	r0, #12
 800fa86:	f7fd fc71 	bl	800d36c <memcpy>
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	4631      	mov	r1, r6
 800fa8e:	4648      	mov	r0, r9
 800fa90:	f000 fab4 	bl	800fffc <__lshift>
 800fa94:	1c7b      	adds	r3, r7, #1
 800fa96:	9305      	str	r3, [sp, #20]
 800fa98:	eb07 030b 	add.w	r3, r7, fp
 800fa9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa9e:	9b02      	ldr	r3, [sp, #8]
 800faa0:	f003 0301 	and.w	r3, r3, #1
 800faa4:	46a8      	mov	r8, r5
 800faa6:	9308      	str	r3, [sp, #32]
 800faa8:	4605      	mov	r5, r0
 800faaa:	9b05      	ldr	r3, [sp, #20]
 800faac:	9801      	ldr	r0, [sp, #4]
 800faae:	4621      	mov	r1, r4
 800fab0:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800fab4:	f7ff fb1c 	bl	800f0f0 <quorem>
 800fab8:	4641      	mov	r1, r8
 800faba:	9002      	str	r0, [sp, #8]
 800fabc:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fac0:	9801      	ldr	r0, [sp, #4]
 800fac2:	f000 fb07 	bl	80100d4 <__mcmp>
 800fac6:	462a      	mov	r2, r5
 800fac8:	9006      	str	r0, [sp, #24]
 800faca:	4621      	mov	r1, r4
 800facc:	4648      	mov	r0, r9
 800face:	f000 fb1d 	bl	801010c <__mdiff>
 800fad2:	68c2      	ldr	r2, [r0, #12]
 800fad4:	4606      	mov	r6, r0
 800fad6:	b9fa      	cbnz	r2, 800fb18 <_dtoa_r+0x918>
 800fad8:	4601      	mov	r1, r0
 800fada:	9801      	ldr	r0, [sp, #4]
 800fadc:	f000 fafa 	bl	80100d4 <__mcmp>
 800fae0:	4602      	mov	r2, r0
 800fae2:	4631      	mov	r1, r6
 800fae4:	4648      	mov	r0, r9
 800fae6:	920a      	str	r2, [sp, #40]	@ 0x28
 800fae8:	f000 f8ed 	bl	800fcc6 <_Bfree>
 800faec:	9b07      	ldr	r3, [sp, #28]
 800faee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faf0:	9e05      	ldr	r6, [sp, #20]
 800faf2:	ea43 0102 	orr.w	r1, r3, r2
 800faf6:	9b08      	ldr	r3, [sp, #32]
 800faf8:	4319      	orrs	r1, r3
 800fafa:	d10f      	bne.n	800fb1c <_dtoa_r+0x91c>
 800fafc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fb00:	d028      	beq.n	800fb54 <_dtoa_r+0x954>
 800fb02:	9b06      	ldr	r3, [sp, #24]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	dd02      	ble.n	800fb0e <_dtoa_r+0x90e>
 800fb08:	9b02      	ldr	r3, [sp, #8]
 800fb0a:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fb0e:	f88b a000 	strb.w	sl, [fp]
 800fb12:	e63b      	b.n	800f78c <_dtoa_r+0x58c>
 800fb14:	4628      	mov	r0, r5
 800fb16:	e7bd      	b.n	800fa94 <_dtoa_r+0x894>
 800fb18:	2201      	movs	r2, #1
 800fb1a:	e7e2      	b.n	800fae2 <_dtoa_r+0x8e2>
 800fb1c:	9b06      	ldr	r3, [sp, #24]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	db04      	blt.n	800fb2c <_dtoa_r+0x92c>
 800fb22:	9907      	ldr	r1, [sp, #28]
 800fb24:	430b      	orrs	r3, r1
 800fb26:	9908      	ldr	r1, [sp, #32]
 800fb28:	430b      	orrs	r3, r1
 800fb2a:	d120      	bne.n	800fb6e <_dtoa_r+0x96e>
 800fb2c:	2a00      	cmp	r2, #0
 800fb2e:	ddee      	ble.n	800fb0e <_dtoa_r+0x90e>
 800fb30:	9901      	ldr	r1, [sp, #4]
 800fb32:	2201      	movs	r2, #1
 800fb34:	4648      	mov	r0, r9
 800fb36:	f000 fa61 	bl	800fffc <__lshift>
 800fb3a:	4621      	mov	r1, r4
 800fb3c:	9001      	str	r0, [sp, #4]
 800fb3e:	f000 fac9 	bl	80100d4 <__mcmp>
 800fb42:	2800      	cmp	r0, #0
 800fb44:	dc03      	bgt.n	800fb4e <_dtoa_r+0x94e>
 800fb46:	d1e2      	bne.n	800fb0e <_dtoa_r+0x90e>
 800fb48:	f01a 0f01 	tst.w	sl, #1
 800fb4c:	d0df      	beq.n	800fb0e <_dtoa_r+0x90e>
 800fb4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fb52:	d1d9      	bne.n	800fb08 <_dtoa_r+0x908>
 800fb54:	2339      	movs	r3, #57	@ 0x39
 800fb56:	f88b 3000 	strb.w	r3, [fp]
 800fb5a:	4633      	mov	r3, r6
 800fb5c:	461e      	mov	r6, r3
 800fb5e:	3b01      	subs	r3, #1
 800fb60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb64:	2a39      	cmp	r2, #57	@ 0x39
 800fb66:	d053      	beq.n	800fc10 <_dtoa_r+0xa10>
 800fb68:	3201      	adds	r2, #1
 800fb6a:	701a      	strb	r2, [r3, #0]
 800fb6c:	e60e      	b.n	800f78c <_dtoa_r+0x58c>
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	dd07      	ble.n	800fb82 <_dtoa_r+0x982>
 800fb72:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fb76:	d0ed      	beq.n	800fb54 <_dtoa_r+0x954>
 800fb78:	f10a 0301 	add.w	r3, sl, #1
 800fb7c:	f88b 3000 	strb.w	r3, [fp]
 800fb80:	e604      	b.n	800f78c <_dtoa_r+0x58c>
 800fb82:	9b05      	ldr	r3, [sp, #20]
 800fb84:	9a05      	ldr	r2, [sp, #20]
 800fb86:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d029      	beq.n	800fbe4 <_dtoa_r+0x9e4>
 800fb90:	9901      	ldr	r1, [sp, #4]
 800fb92:	2300      	movs	r3, #0
 800fb94:	220a      	movs	r2, #10
 800fb96:	4648      	mov	r0, r9
 800fb98:	f000 f89e 	bl	800fcd8 <__multadd>
 800fb9c:	45a8      	cmp	r8, r5
 800fb9e:	9001      	str	r0, [sp, #4]
 800fba0:	f04f 0300 	mov.w	r3, #0
 800fba4:	f04f 020a 	mov.w	r2, #10
 800fba8:	4641      	mov	r1, r8
 800fbaa:	4648      	mov	r0, r9
 800fbac:	d107      	bne.n	800fbbe <_dtoa_r+0x9be>
 800fbae:	f000 f893 	bl	800fcd8 <__multadd>
 800fbb2:	4680      	mov	r8, r0
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	9b05      	ldr	r3, [sp, #20]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	9305      	str	r3, [sp, #20]
 800fbbc:	e775      	b.n	800faaa <_dtoa_r+0x8aa>
 800fbbe:	f000 f88b 	bl	800fcd8 <__multadd>
 800fbc2:	4629      	mov	r1, r5
 800fbc4:	4680      	mov	r8, r0
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	220a      	movs	r2, #10
 800fbca:	4648      	mov	r0, r9
 800fbcc:	f000 f884 	bl	800fcd8 <__multadd>
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	e7f0      	b.n	800fbb6 <_dtoa_r+0x9b6>
 800fbd4:	f1bb 0f00 	cmp.w	fp, #0
 800fbd8:	bfcc      	ite	gt
 800fbda:	465e      	movgt	r6, fp
 800fbdc:	2601      	movle	r6, #1
 800fbde:	443e      	add	r6, r7
 800fbe0:	f04f 0800 	mov.w	r8, #0
 800fbe4:	9901      	ldr	r1, [sp, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	4648      	mov	r0, r9
 800fbea:	f000 fa07 	bl	800fffc <__lshift>
 800fbee:	4621      	mov	r1, r4
 800fbf0:	9001      	str	r0, [sp, #4]
 800fbf2:	f000 fa6f 	bl	80100d4 <__mcmp>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	dcaf      	bgt.n	800fb5a <_dtoa_r+0x95a>
 800fbfa:	d102      	bne.n	800fc02 <_dtoa_r+0xa02>
 800fbfc:	f01a 0f01 	tst.w	sl, #1
 800fc00:	d1ab      	bne.n	800fb5a <_dtoa_r+0x95a>
 800fc02:	4633      	mov	r3, r6
 800fc04:	461e      	mov	r6, r3
 800fc06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc0a:	2a30      	cmp	r2, #48	@ 0x30
 800fc0c:	d0fa      	beq.n	800fc04 <_dtoa_r+0xa04>
 800fc0e:	e5bd      	b.n	800f78c <_dtoa_r+0x58c>
 800fc10:	429f      	cmp	r7, r3
 800fc12:	d1a3      	bne.n	800fb5c <_dtoa_r+0x95c>
 800fc14:	9b04      	ldr	r3, [sp, #16]
 800fc16:	3301      	adds	r3, #1
 800fc18:	9304      	str	r3, [sp, #16]
 800fc1a:	2331      	movs	r3, #49	@ 0x31
 800fc1c:	703b      	strb	r3, [r7, #0]
 800fc1e:	e5b5      	b.n	800f78c <_dtoa_r+0x58c>
 800fc20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc22:	4f15      	ldr	r7, [pc, #84]	@ (800fc78 <_dtoa_r+0xa78>)
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f43f ab22 	beq.w	800f26e <_dtoa_r+0x6e>
 800fc2a:	f107 0308 	add.w	r3, r7, #8
 800fc2e:	f7ff bb1c 	b.w	800f26a <_dtoa_r+0x6a>
 800fc32:	9b07      	ldr	r3, [sp, #28]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	f77f ae3b 	ble.w	800f8b0 <_dtoa_r+0x6b0>
 800fc3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc3e:	2001      	movs	r0, #1
 800fc40:	e65b      	b.n	800f8fa <_dtoa_r+0x6fa>
 800fc42:	f1bb 0f00 	cmp.w	fp, #0
 800fc46:	f77f aedc 	ble.w	800fa02 <_dtoa_r+0x802>
 800fc4a:	463e      	mov	r6, r7
 800fc4c:	9801      	ldr	r0, [sp, #4]
 800fc4e:	4621      	mov	r1, r4
 800fc50:	f7ff fa4e 	bl	800f0f0 <quorem>
 800fc54:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fc58:	f806 ab01 	strb.w	sl, [r6], #1
 800fc5c:	1bf2      	subs	r2, r6, r7
 800fc5e:	4593      	cmp	fp, r2
 800fc60:	ddb8      	ble.n	800fbd4 <_dtoa_r+0x9d4>
 800fc62:	9901      	ldr	r1, [sp, #4]
 800fc64:	2300      	movs	r3, #0
 800fc66:	220a      	movs	r2, #10
 800fc68:	4648      	mov	r0, r9
 800fc6a:	f000 f835 	bl	800fcd8 <__multadd>
 800fc6e:	9001      	str	r0, [sp, #4]
 800fc70:	e7ec      	b.n	800fc4c <_dtoa_r+0xa4c>
 800fc72:	bf00      	nop
 800fc74:	080130a5 	.word	0x080130a5
 800fc78:	08013098 	.word	0x08013098

0800fc7c <_Balloc>:
 800fc7c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800fc7e:	b570      	push	{r4, r5, r6, lr}
 800fc80:	4605      	mov	r5, r0
 800fc82:	460c      	mov	r4, r1
 800fc84:	b17b      	cbz	r3, 800fca6 <_Balloc+0x2a>
 800fc86:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800fc88:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fc8c:	b9a0      	cbnz	r0, 800fcb8 <_Balloc+0x3c>
 800fc8e:	2101      	movs	r1, #1
 800fc90:	fa01 f604 	lsl.w	r6, r1, r4
 800fc94:	1d72      	adds	r2, r6, #5
 800fc96:	0092      	lsls	r2, r2, #2
 800fc98:	4628      	mov	r0, r5
 800fc9a:	f000 fbdf 	bl	801045c <_calloc_r>
 800fc9e:	b148      	cbz	r0, 800fcb4 <_Balloc+0x38>
 800fca0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800fca4:	e00b      	b.n	800fcbe <_Balloc+0x42>
 800fca6:	2221      	movs	r2, #33	@ 0x21
 800fca8:	2104      	movs	r1, #4
 800fcaa:	f000 fbd7 	bl	801045c <_calloc_r>
 800fcae:	6468      	str	r0, [r5, #68]	@ 0x44
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d1e8      	bne.n	800fc86 <_Balloc+0xa>
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	bd70      	pop	{r4, r5, r6, pc}
 800fcb8:	6802      	ldr	r2, [r0, #0]
 800fcba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcc4:	e7f7      	b.n	800fcb6 <_Balloc+0x3a>

0800fcc6 <_Bfree>:
 800fcc6:	b131      	cbz	r1, 800fcd6 <_Bfree+0x10>
 800fcc8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800fcca:	684a      	ldr	r2, [r1, #4]
 800fccc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fcd0:	6008      	str	r0, [r1, #0]
 800fcd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fcd6:	4770      	bx	lr

0800fcd8 <__multadd>:
 800fcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcdc:	690d      	ldr	r5, [r1, #16]
 800fcde:	4607      	mov	r7, r0
 800fce0:	460c      	mov	r4, r1
 800fce2:	461e      	mov	r6, r3
 800fce4:	f101 0c14 	add.w	ip, r1, #20
 800fce8:	2000      	movs	r0, #0
 800fcea:	f8dc 3000 	ldr.w	r3, [ip]
 800fcee:	b299      	uxth	r1, r3
 800fcf0:	fb02 6101 	mla	r1, r2, r1, r6
 800fcf4:	0c1e      	lsrs	r6, r3, #16
 800fcf6:	0c0b      	lsrs	r3, r1, #16
 800fcf8:	fb02 3306 	mla	r3, r2, r6, r3
 800fcfc:	b289      	uxth	r1, r1
 800fcfe:	3001      	adds	r0, #1
 800fd00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd04:	4285      	cmp	r5, r0
 800fd06:	f84c 1b04 	str.w	r1, [ip], #4
 800fd0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd0e:	dcec      	bgt.n	800fcea <__multadd+0x12>
 800fd10:	b30e      	cbz	r6, 800fd56 <__multadd+0x7e>
 800fd12:	68a3      	ldr	r3, [r4, #8]
 800fd14:	42ab      	cmp	r3, r5
 800fd16:	dc19      	bgt.n	800fd4c <__multadd+0x74>
 800fd18:	6861      	ldr	r1, [r4, #4]
 800fd1a:	4638      	mov	r0, r7
 800fd1c:	3101      	adds	r1, #1
 800fd1e:	f7ff ffad 	bl	800fc7c <_Balloc>
 800fd22:	4680      	mov	r8, r0
 800fd24:	b928      	cbnz	r0, 800fd32 <__multadd+0x5a>
 800fd26:	4602      	mov	r2, r0
 800fd28:	4b0c      	ldr	r3, [pc, #48]	@ (800fd5c <__multadd+0x84>)
 800fd2a:	480d      	ldr	r0, [pc, #52]	@ (800fd60 <__multadd+0x88>)
 800fd2c:	21ba      	movs	r1, #186	@ 0xba
 800fd2e:	f000 fb77 	bl	8010420 <__assert_func>
 800fd32:	6922      	ldr	r2, [r4, #16]
 800fd34:	3202      	adds	r2, #2
 800fd36:	f104 010c 	add.w	r1, r4, #12
 800fd3a:	0092      	lsls	r2, r2, #2
 800fd3c:	300c      	adds	r0, #12
 800fd3e:	f7fd fb15 	bl	800d36c <memcpy>
 800fd42:	4621      	mov	r1, r4
 800fd44:	4638      	mov	r0, r7
 800fd46:	f7ff ffbe 	bl	800fcc6 <_Bfree>
 800fd4a:	4644      	mov	r4, r8
 800fd4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd50:	3501      	adds	r5, #1
 800fd52:	615e      	str	r6, [r3, #20]
 800fd54:	6125      	str	r5, [r4, #16]
 800fd56:	4620      	mov	r0, r4
 800fd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd5c:	080130a5 	.word	0x080130a5
 800fd60:	0801310e 	.word	0x0801310e

0800fd64 <__hi0bits>:
 800fd64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd68:	4603      	mov	r3, r0
 800fd6a:	bf36      	itet	cc
 800fd6c:	0403      	lslcc	r3, r0, #16
 800fd6e:	2000      	movcs	r0, #0
 800fd70:	2010      	movcc	r0, #16
 800fd72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd76:	bf3c      	itt	cc
 800fd78:	021b      	lslcc	r3, r3, #8
 800fd7a:	3008      	addcc	r0, #8
 800fd7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd80:	bf3c      	itt	cc
 800fd82:	011b      	lslcc	r3, r3, #4
 800fd84:	3004      	addcc	r0, #4
 800fd86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd8a:	bf3c      	itt	cc
 800fd8c:	009b      	lslcc	r3, r3, #2
 800fd8e:	3002      	addcc	r0, #2
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	db05      	blt.n	800fda0 <__hi0bits+0x3c>
 800fd94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd98:	f100 0001 	add.w	r0, r0, #1
 800fd9c:	bf08      	it	eq
 800fd9e:	2020      	moveq	r0, #32
 800fda0:	4770      	bx	lr

0800fda2 <__lo0bits>:
 800fda2:	6803      	ldr	r3, [r0, #0]
 800fda4:	4602      	mov	r2, r0
 800fda6:	f013 0007 	ands.w	r0, r3, #7
 800fdaa:	d00b      	beq.n	800fdc4 <__lo0bits+0x22>
 800fdac:	07d9      	lsls	r1, r3, #31
 800fdae:	d421      	bmi.n	800fdf4 <__lo0bits+0x52>
 800fdb0:	0798      	lsls	r0, r3, #30
 800fdb2:	bf49      	itett	mi
 800fdb4:	085b      	lsrmi	r3, r3, #1
 800fdb6:	089b      	lsrpl	r3, r3, #2
 800fdb8:	2001      	movmi	r0, #1
 800fdba:	6013      	strmi	r3, [r2, #0]
 800fdbc:	bf5c      	itt	pl
 800fdbe:	6013      	strpl	r3, [r2, #0]
 800fdc0:	2002      	movpl	r0, #2
 800fdc2:	4770      	bx	lr
 800fdc4:	b299      	uxth	r1, r3
 800fdc6:	b909      	cbnz	r1, 800fdcc <__lo0bits+0x2a>
 800fdc8:	0c1b      	lsrs	r3, r3, #16
 800fdca:	2010      	movs	r0, #16
 800fdcc:	b2d9      	uxtb	r1, r3
 800fdce:	b909      	cbnz	r1, 800fdd4 <__lo0bits+0x32>
 800fdd0:	3008      	adds	r0, #8
 800fdd2:	0a1b      	lsrs	r3, r3, #8
 800fdd4:	0719      	lsls	r1, r3, #28
 800fdd6:	bf04      	itt	eq
 800fdd8:	091b      	lsreq	r3, r3, #4
 800fdda:	3004      	addeq	r0, #4
 800fddc:	0799      	lsls	r1, r3, #30
 800fdde:	bf04      	itt	eq
 800fde0:	089b      	lsreq	r3, r3, #2
 800fde2:	3002      	addeq	r0, #2
 800fde4:	07d9      	lsls	r1, r3, #31
 800fde6:	d403      	bmi.n	800fdf0 <__lo0bits+0x4e>
 800fde8:	085b      	lsrs	r3, r3, #1
 800fdea:	f100 0001 	add.w	r0, r0, #1
 800fdee:	d003      	beq.n	800fdf8 <__lo0bits+0x56>
 800fdf0:	6013      	str	r3, [r2, #0]
 800fdf2:	4770      	bx	lr
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	4770      	bx	lr
 800fdf8:	2020      	movs	r0, #32
 800fdfa:	4770      	bx	lr

0800fdfc <__i2b>:
 800fdfc:	b510      	push	{r4, lr}
 800fdfe:	460c      	mov	r4, r1
 800fe00:	2101      	movs	r1, #1
 800fe02:	f7ff ff3b 	bl	800fc7c <_Balloc>
 800fe06:	4602      	mov	r2, r0
 800fe08:	b928      	cbnz	r0, 800fe16 <__i2b+0x1a>
 800fe0a:	4b05      	ldr	r3, [pc, #20]	@ (800fe20 <__i2b+0x24>)
 800fe0c:	4805      	ldr	r0, [pc, #20]	@ (800fe24 <__i2b+0x28>)
 800fe0e:	f240 1145 	movw	r1, #325	@ 0x145
 800fe12:	f000 fb05 	bl	8010420 <__assert_func>
 800fe16:	2301      	movs	r3, #1
 800fe18:	6144      	str	r4, [r0, #20]
 800fe1a:	6103      	str	r3, [r0, #16]
 800fe1c:	bd10      	pop	{r4, pc}
 800fe1e:	bf00      	nop
 800fe20:	080130a5 	.word	0x080130a5
 800fe24:	0801310e 	.word	0x0801310e

0800fe28 <__multiply>:
 800fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	4614      	mov	r4, r2
 800fe2e:	690a      	ldr	r2, [r1, #16]
 800fe30:	6923      	ldr	r3, [r4, #16]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	bfa8      	it	ge
 800fe36:	4623      	movge	r3, r4
 800fe38:	460f      	mov	r7, r1
 800fe3a:	bfa4      	itt	ge
 800fe3c:	460c      	movge	r4, r1
 800fe3e:	461f      	movge	r7, r3
 800fe40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fe44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fe48:	68a3      	ldr	r3, [r4, #8]
 800fe4a:	6861      	ldr	r1, [r4, #4]
 800fe4c:	eb0a 0609 	add.w	r6, sl, r9
 800fe50:	42b3      	cmp	r3, r6
 800fe52:	b085      	sub	sp, #20
 800fe54:	bfb8      	it	lt
 800fe56:	3101      	addlt	r1, #1
 800fe58:	f7ff ff10 	bl	800fc7c <_Balloc>
 800fe5c:	b930      	cbnz	r0, 800fe6c <__multiply+0x44>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	4b44      	ldr	r3, [pc, #272]	@ (800ff74 <__multiply+0x14c>)
 800fe62:	4845      	ldr	r0, [pc, #276]	@ (800ff78 <__multiply+0x150>)
 800fe64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe68:	f000 fada 	bl	8010420 <__assert_func>
 800fe6c:	f100 0514 	add.w	r5, r0, #20
 800fe70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe74:	462b      	mov	r3, r5
 800fe76:	2200      	movs	r2, #0
 800fe78:	4543      	cmp	r3, r8
 800fe7a:	d321      	bcc.n	800fec0 <__multiply+0x98>
 800fe7c:	f107 0114 	add.w	r1, r7, #20
 800fe80:	f104 0214 	add.w	r2, r4, #20
 800fe84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fe88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fe8c:	9302      	str	r3, [sp, #8]
 800fe8e:	1b13      	subs	r3, r2, r4
 800fe90:	3b15      	subs	r3, #21
 800fe92:	f023 0303 	bic.w	r3, r3, #3
 800fe96:	3304      	adds	r3, #4
 800fe98:	f104 0715 	add.w	r7, r4, #21
 800fe9c:	42ba      	cmp	r2, r7
 800fe9e:	bf38      	it	cc
 800fea0:	2304      	movcc	r3, #4
 800fea2:	9301      	str	r3, [sp, #4]
 800fea4:	9b02      	ldr	r3, [sp, #8]
 800fea6:	9103      	str	r1, [sp, #12]
 800fea8:	428b      	cmp	r3, r1
 800feaa:	d80c      	bhi.n	800fec6 <__multiply+0x9e>
 800feac:	2e00      	cmp	r6, #0
 800feae:	dd03      	ble.n	800feb8 <__multiply+0x90>
 800feb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d05b      	beq.n	800ff70 <__multiply+0x148>
 800feb8:	6106      	str	r6, [r0, #16]
 800feba:	b005      	add	sp, #20
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	f843 2b04 	str.w	r2, [r3], #4
 800fec4:	e7d8      	b.n	800fe78 <__multiply+0x50>
 800fec6:	f8b1 a000 	ldrh.w	sl, [r1]
 800feca:	f1ba 0f00 	cmp.w	sl, #0
 800fece:	d024      	beq.n	800ff1a <__multiply+0xf2>
 800fed0:	f104 0e14 	add.w	lr, r4, #20
 800fed4:	46a9      	mov	r9, r5
 800fed6:	f04f 0c00 	mov.w	ip, #0
 800feda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fede:	f8d9 3000 	ldr.w	r3, [r9]
 800fee2:	fa1f fb87 	uxth.w	fp, r7
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	fb0a 330b 	mla	r3, sl, fp, r3
 800feec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fef0:	f8d9 7000 	ldr.w	r7, [r9]
 800fef4:	4463      	add	r3, ip
 800fef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fefa:	fb0a c70b 	mla	r7, sl, fp, ip
 800fefe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff08:	4572      	cmp	r2, lr
 800ff0a:	f849 3b04 	str.w	r3, [r9], #4
 800ff0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ff12:	d8e2      	bhi.n	800feda <__multiply+0xb2>
 800ff14:	9b01      	ldr	r3, [sp, #4]
 800ff16:	f845 c003 	str.w	ip, [r5, r3]
 800ff1a:	9b03      	ldr	r3, [sp, #12]
 800ff1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff20:	3104      	adds	r1, #4
 800ff22:	f1b9 0f00 	cmp.w	r9, #0
 800ff26:	d021      	beq.n	800ff6c <__multiply+0x144>
 800ff28:	682b      	ldr	r3, [r5, #0]
 800ff2a:	f104 0c14 	add.w	ip, r4, #20
 800ff2e:	46ae      	mov	lr, r5
 800ff30:	f04f 0a00 	mov.w	sl, #0
 800ff34:	f8bc b000 	ldrh.w	fp, [ip]
 800ff38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ff3c:	fb09 770b 	mla	r7, r9, fp, r7
 800ff40:	4457      	add	r7, sl
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ff48:	f84e 3b04 	str.w	r3, [lr], #4
 800ff4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff54:	f8be 3000 	ldrh.w	r3, [lr]
 800ff58:	fb09 330a 	mla	r3, r9, sl, r3
 800ff5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ff60:	4562      	cmp	r2, ip
 800ff62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff66:	d8e5      	bhi.n	800ff34 <__multiply+0x10c>
 800ff68:	9f01      	ldr	r7, [sp, #4]
 800ff6a:	51eb      	str	r3, [r5, r7]
 800ff6c:	3504      	adds	r5, #4
 800ff6e:	e799      	b.n	800fea4 <__multiply+0x7c>
 800ff70:	3e01      	subs	r6, #1
 800ff72:	e79b      	b.n	800feac <__multiply+0x84>
 800ff74:	080130a5 	.word	0x080130a5
 800ff78:	0801310e 	.word	0x0801310e

0800ff7c <__pow5mult>:
 800ff7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff80:	4615      	mov	r5, r2
 800ff82:	f012 0203 	ands.w	r2, r2, #3
 800ff86:	4607      	mov	r7, r0
 800ff88:	460e      	mov	r6, r1
 800ff8a:	d007      	beq.n	800ff9c <__pow5mult+0x20>
 800ff8c:	4c1a      	ldr	r4, [pc, #104]	@ (800fff8 <__pow5mult+0x7c>)
 800ff8e:	3a01      	subs	r2, #1
 800ff90:	2300      	movs	r3, #0
 800ff92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff96:	f7ff fe9f 	bl	800fcd8 <__multadd>
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	10ad      	asrs	r5, r5, #2
 800ff9e:	d027      	beq.n	800fff0 <__pow5mult+0x74>
 800ffa0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ffa2:	b944      	cbnz	r4, 800ffb6 <__pow5mult+0x3a>
 800ffa4:	f240 2171 	movw	r1, #625	@ 0x271
 800ffa8:	4638      	mov	r0, r7
 800ffaa:	f7ff ff27 	bl	800fdfc <__i2b>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	6438      	str	r0, [r7, #64]	@ 0x40
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	6003      	str	r3, [r0, #0]
 800ffb6:	f04f 0900 	mov.w	r9, #0
 800ffba:	07eb      	lsls	r3, r5, #31
 800ffbc:	d50a      	bpl.n	800ffd4 <__pow5mult+0x58>
 800ffbe:	4631      	mov	r1, r6
 800ffc0:	4622      	mov	r2, r4
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7ff ff30 	bl	800fe28 <__multiply>
 800ffc8:	4631      	mov	r1, r6
 800ffca:	4680      	mov	r8, r0
 800ffcc:	4638      	mov	r0, r7
 800ffce:	f7ff fe7a 	bl	800fcc6 <_Bfree>
 800ffd2:	4646      	mov	r6, r8
 800ffd4:	106d      	asrs	r5, r5, #1
 800ffd6:	d00b      	beq.n	800fff0 <__pow5mult+0x74>
 800ffd8:	6820      	ldr	r0, [r4, #0]
 800ffda:	b938      	cbnz	r0, 800ffec <__pow5mult+0x70>
 800ffdc:	4622      	mov	r2, r4
 800ffde:	4621      	mov	r1, r4
 800ffe0:	4638      	mov	r0, r7
 800ffe2:	f7ff ff21 	bl	800fe28 <__multiply>
 800ffe6:	6020      	str	r0, [r4, #0]
 800ffe8:	f8c0 9000 	str.w	r9, [r0]
 800ffec:	4604      	mov	r4, r0
 800ffee:	e7e4      	b.n	800ffba <__pow5mult+0x3e>
 800fff0:	4630      	mov	r0, r6
 800fff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff6:	bf00      	nop
 800fff8:	08013168 	.word	0x08013168

0800fffc <__lshift>:
 800fffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010000:	460c      	mov	r4, r1
 8010002:	6849      	ldr	r1, [r1, #4]
 8010004:	6923      	ldr	r3, [r4, #16]
 8010006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801000a:	68a3      	ldr	r3, [r4, #8]
 801000c:	4607      	mov	r7, r0
 801000e:	4691      	mov	r9, r2
 8010010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010014:	f108 0601 	add.w	r6, r8, #1
 8010018:	42b3      	cmp	r3, r6
 801001a:	db0b      	blt.n	8010034 <__lshift+0x38>
 801001c:	4638      	mov	r0, r7
 801001e:	f7ff fe2d 	bl	800fc7c <_Balloc>
 8010022:	4605      	mov	r5, r0
 8010024:	b948      	cbnz	r0, 801003a <__lshift+0x3e>
 8010026:	4602      	mov	r2, r0
 8010028:	4b28      	ldr	r3, [pc, #160]	@ (80100cc <__lshift+0xd0>)
 801002a:	4829      	ldr	r0, [pc, #164]	@ (80100d0 <__lshift+0xd4>)
 801002c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010030:	f000 f9f6 	bl	8010420 <__assert_func>
 8010034:	3101      	adds	r1, #1
 8010036:	005b      	lsls	r3, r3, #1
 8010038:	e7ee      	b.n	8010018 <__lshift+0x1c>
 801003a:	2300      	movs	r3, #0
 801003c:	f100 0114 	add.w	r1, r0, #20
 8010040:	f100 0210 	add.w	r2, r0, #16
 8010044:	4618      	mov	r0, r3
 8010046:	4553      	cmp	r3, sl
 8010048:	db33      	blt.n	80100b2 <__lshift+0xb6>
 801004a:	6920      	ldr	r0, [r4, #16]
 801004c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010050:	f104 0314 	add.w	r3, r4, #20
 8010054:	f019 091f 	ands.w	r9, r9, #31
 8010058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801005c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010060:	d02b      	beq.n	80100ba <__lshift+0xbe>
 8010062:	f1c9 0e20 	rsb	lr, r9, #32
 8010066:	468a      	mov	sl, r1
 8010068:	2200      	movs	r2, #0
 801006a:	6818      	ldr	r0, [r3, #0]
 801006c:	fa00 f009 	lsl.w	r0, r0, r9
 8010070:	4310      	orrs	r0, r2
 8010072:	f84a 0b04 	str.w	r0, [sl], #4
 8010076:	f853 2b04 	ldr.w	r2, [r3], #4
 801007a:	459c      	cmp	ip, r3
 801007c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010080:	d8f3      	bhi.n	801006a <__lshift+0x6e>
 8010082:	ebac 0304 	sub.w	r3, ip, r4
 8010086:	3b15      	subs	r3, #21
 8010088:	f023 0303 	bic.w	r3, r3, #3
 801008c:	3304      	adds	r3, #4
 801008e:	f104 0015 	add.w	r0, r4, #21
 8010092:	4584      	cmp	ip, r0
 8010094:	bf38      	it	cc
 8010096:	2304      	movcc	r3, #4
 8010098:	50ca      	str	r2, [r1, r3]
 801009a:	b10a      	cbz	r2, 80100a0 <__lshift+0xa4>
 801009c:	f108 0602 	add.w	r6, r8, #2
 80100a0:	3e01      	subs	r6, #1
 80100a2:	4638      	mov	r0, r7
 80100a4:	612e      	str	r6, [r5, #16]
 80100a6:	4621      	mov	r1, r4
 80100a8:	f7ff fe0d 	bl	800fcc6 <_Bfree>
 80100ac:	4628      	mov	r0, r5
 80100ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80100b6:	3301      	adds	r3, #1
 80100b8:	e7c5      	b.n	8010046 <__lshift+0x4a>
 80100ba:	3904      	subs	r1, #4
 80100bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80100c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80100c4:	459c      	cmp	ip, r3
 80100c6:	d8f9      	bhi.n	80100bc <__lshift+0xc0>
 80100c8:	e7ea      	b.n	80100a0 <__lshift+0xa4>
 80100ca:	bf00      	nop
 80100cc:	080130a5 	.word	0x080130a5
 80100d0:	0801310e 	.word	0x0801310e

080100d4 <__mcmp>:
 80100d4:	690a      	ldr	r2, [r1, #16]
 80100d6:	4603      	mov	r3, r0
 80100d8:	6900      	ldr	r0, [r0, #16]
 80100da:	1a80      	subs	r0, r0, r2
 80100dc:	b530      	push	{r4, r5, lr}
 80100de:	d10e      	bne.n	80100fe <__mcmp+0x2a>
 80100e0:	3314      	adds	r3, #20
 80100e2:	3114      	adds	r1, #20
 80100e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80100e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80100ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80100f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80100f4:	4295      	cmp	r5, r2
 80100f6:	d003      	beq.n	8010100 <__mcmp+0x2c>
 80100f8:	d205      	bcs.n	8010106 <__mcmp+0x32>
 80100fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80100fe:	bd30      	pop	{r4, r5, pc}
 8010100:	42a3      	cmp	r3, r4
 8010102:	d3f3      	bcc.n	80100ec <__mcmp+0x18>
 8010104:	e7fb      	b.n	80100fe <__mcmp+0x2a>
 8010106:	2001      	movs	r0, #1
 8010108:	e7f9      	b.n	80100fe <__mcmp+0x2a>
	...

0801010c <__mdiff>:
 801010c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	4689      	mov	r9, r1
 8010112:	4606      	mov	r6, r0
 8010114:	4611      	mov	r1, r2
 8010116:	4648      	mov	r0, r9
 8010118:	4614      	mov	r4, r2
 801011a:	f7ff ffdb 	bl	80100d4 <__mcmp>
 801011e:	1e05      	subs	r5, r0, #0
 8010120:	d112      	bne.n	8010148 <__mdiff+0x3c>
 8010122:	4629      	mov	r1, r5
 8010124:	4630      	mov	r0, r6
 8010126:	f7ff fda9 	bl	800fc7c <_Balloc>
 801012a:	4602      	mov	r2, r0
 801012c:	b928      	cbnz	r0, 801013a <__mdiff+0x2e>
 801012e:	4b3f      	ldr	r3, [pc, #252]	@ (801022c <__mdiff+0x120>)
 8010130:	f240 2137 	movw	r1, #567	@ 0x237
 8010134:	483e      	ldr	r0, [pc, #248]	@ (8010230 <__mdiff+0x124>)
 8010136:	f000 f973 	bl	8010420 <__assert_func>
 801013a:	2301      	movs	r3, #1
 801013c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010140:	4610      	mov	r0, r2
 8010142:	b003      	add	sp, #12
 8010144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010148:	bfbc      	itt	lt
 801014a:	464b      	movlt	r3, r9
 801014c:	46a1      	movlt	r9, r4
 801014e:	4630      	mov	r0, r6
 8010150:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010154:	bfba      	itte	lt
 8010156:	461c      	movlt	r4, r3
 8010158:	2501      	movlt	r5, #1
 801015a:	2500      	movge	r5, #0
 801015c:	f7ff fd8e 	bl	800fc7c <_Balloc>
 8010160:	4602      	mov	r2, r0
 8010162:	b918      	cbnz	r0, 801016c <__mdiff+0x60>
 8010164:	4b31      	ldr	r3, [pc, #196]	@ (801022c <__mdiff+0x120>)
 8010166:	f240 2145 	movw	r1, #581	@ 0x245
 801016a:	e7e3      	b.n	8010134 <__mdiff+0x28>
 801016c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010170:	6926      	ldr	r6, [r4, #16]
 8010172:	60c5      	str	r5, [r0, #12]
 8010174:	f109 0310 	add.w	r3, r9, #16
 8010178:	f109 0514 	add.w	r5, r9, #20
 801017c:	f104 0e14 	add.w	lr, r4, #20
 8010180:	f100 0b14 	add.w	fp, r0, #20
 8010184:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010188:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801018c:	9301      	str	r3, [sp, #4]
 801018e:	46d9      	mov	r9, fp
 8010190:	f04f 0c00 	mov.w	ip, #0
 8010194:	9b01      	ldr	r3, [sp, #4]
 8010196:	f85e 0b04 	ldr.w	r0, [lr], #4
 801019a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	fa1f f38a 	uxth.w	r3, sl
 80101a4:	4619      	mov	r1, r3
 80101a6:	b283      	uxth	r3, r0
 80101a8:	1acb      	subs	r3, r1, r3
 80101aa:	0c00      	lsrs	r0, r0, #16
 80101ac:	4463      	add	r3, ip
 80101ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80101bc:	4576      	cmp	r6, lr
 80101be:	f849 3b04 	str.w	r3, [r9], #4
 80101c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101c6:	d8e5      	bhi.n	8010194 <__mdiff+0x88>
 80101c8:	1b33      	subs	r3, r6, r4
 80101ca:	3b15      	subs	r3, #21
 80101cc:	f023 0303 	bic.w	r3, r3, #3
 80101d0:	3415      	adds	r4, #21
 80101d2:	3304      	adds	r3, #4
 80101d4:	42a6      	cmp	r6, r4
 80101d6:	bf38      	it	cc
 80101d8:	2304      	movcc	r3, #4
 80101da:	441d      	add	r5, r3
 80101dc:	445b      	add	r3, fp
 80101de:	461e      	mov	r6, r3
 80101e0:	462c      	mov	r4, r5
 80101e2:	4544      	cmp	r4, r8
 80101e4:	d30e      	bcc.n	8010204 <__mdiff+0xf8>
 80101e6:	f108 0103 	add.w	r1, r8, #3
 80101ea:	1b49      	subs	r1, r1, r5
 80101ec:	f021 0103 	bic.w	r1, r1, #3
 80101f0:	3d03      	subs	r5, #3
 80101f2:	45a8      	cmp	r8, r5
 80101f4:	bf38      	it	cc
 80101f6:	2100      	movcc	r1, #0
 80101f8:	440b      	add	r3, r1
 80101fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101fe:	b191      	cbz	r1, 8010226 <__mdiff+0x11a>
 8010200:	6117      	str	r7, [r2, #16]
 8010202:	e79d      	b.n	8010140 <__mdiff+0x34>
 8010204:	f854 1b04 	ldr.w	r1, [r4], #4
 8010208:	46e6      	mov	lr, ip
 801020a:	0c08      	lsrs	r0, r1, #16
 801020c:	fa1c fc81 	uxtah	ip, ip, r1
 8010210:	4471      	add	r1, lr
 8010212:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010216:	b289      	uxth	r1, r1
 8010218:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801021c:	f846 1b04 	str.w	r1, [r6], #4
 8010220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010224:	e7dd      	b.n	80101e2 <__mdiff+0xd6>
 8010226:	3f01      	subs	r7, #1
 8010228:	e7e7      	b.n	80101fa <__mdiff+0xee>
 801022a:	bf00      	nop
 801022c:	080130a5 	.word	0x080130a5
 8010230:	0801310e 	.word	0x0801310e

08010234 <__d2b>:
 8010234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010238:	460f      	mov	r7, r1
 801023a:	2101      	movs	r1, #1
 801023c:	ec59 8b10 	vmov	r8, r9, d0
 8010240:	4616      	mov	r6, r2
 8010242:	f7ff fd1b 	bl	800fc7c <_Balloc>
 8010246:	4604      	mov	r4, r0
 8010248:	b930      	cbnz	r0, 8010258 <__d2b+0x24>
 801024a:	4602      	mov	r2, r0
 801024c:	4b23      	ldr	r3, [pc, #140]	@ (80102dc <__d2b+0xa8>)
 801024e:	4824      	ldr	r0, [pc, #144]	@ (80102e0 <__d2b+0xac>)
 8010250:	f240 310f 	movw	r1, #783	@ 0x30f
 8010254:	f000 f8e4 	bl	8010420 <__assert_func>
 8010258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801025c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010260:	b10d      	cbz	r5, 8010266 <__d2b+0x32>
 8010262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	f1b8 0300 	subs.w	r3, r8, #0
 801026c:	d023      	beq.n	80102b6 <__d2b+0x82>
 801026e:	4668      	mov	r0, sp
 8010270:	9300      	str	r3, [sp, #0]
 8010272:	f7ff fd96 	bl	800fda2 <__lo0bits>
 8010276:	e9dd 1200 	ldrd	r1, r2, [sp]
 801027a:	b1d0      	cbz	r0, 80102b2 <__d2b+0x7e>
 801027c:	f1c0 0320 	rsb	r3, r0, #32
 8010280:	fa02 f303 	lsl.w	r3, r2, r3
 8010284:	430b      	orrs	r3, r1
 8010286:	40c2      	lsrs	r2, r0
 8010288:	6163      	str	r3, [r4, #20]
 801028a:	9201      	str	r2, [sp, #4]
 801028c:	9b01      	ldr	r3, [sp, #4]
 801028e:	61a3      	str	r3, [r4, #24]
 8010290:	2b00      	cmp	r3, #0
 8010292:	bf0c      	ite	eq
 8010294:	2201      	moveq	r2, #1
 8010296:	2202      	movne	r2, #2
 8010298:	6122      	str	r2, [r4, #16]
 801029a:	b1a5      	cbz	r5, 80102c6 <__d2b+0x92>
 801029c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102a0:	4405      	add	r5, r0
 80102a2:	603d      	str	r5, [r7, #0]
 80102a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80102a8:	6030      	str	r0, [r6, #0]
 80102aa:	4620      	mov	r0, r4
 80102ac:	b003      	add	sp, #12
 80102ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102b2:	6161      	str	r1, [r4, #20]
 80102b4:	e7ea      	b.n	801028c <__d2b+0x58>
 80102b6:	a801      	add	r0, sp, #4
 80102b8:	f7ff fd73 	bl	800fda2 <__lo0bits>
 80102bc:	9b01      	ldr	r3, [sp, #4]
 80102be:	6163      	str	r3, [r4, #20]
 80102c0:	3020      	adds	r0, #32
 80102c2:	2201      	movs	r2, #1
 80102c4:	e7e8      	b.n	8010298 <__d2b+0x64>
 80102c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80102ce:	6038      	str	r0, [r7, #0]
 80102d0:	6918      	ldr	r0, [r3, #16]
 80102d2:	f7ff fd47 	bl	800fd64 <__hi0bits>
 80102d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102da:	e7e5      	b.n	80102a8 <__d2b+0x74>
 80102dc:	080130a5 	.word	0x080130a5
 80102e0:	0801310e 	.word	0x0801310e

080102e4 <__ssprint_r>:
 80102e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e8:	6893      	ldr	r3, [r2, #8]
 80102ea:	f8d2 b000 	ldr.w	fp, [r2]
 80102ee:	9001      	str	r0, [sp, #4]
 80102f0:	460c      	mov	r4, r1
 80102f2:	4617      	mov	r7, r2
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d157      	bne.n	80103a8 <__ssprint_r+0xc4>
 80102f8:	2000      	movs	r0, #0
 80102fa:	2300      	movs	r3, #0
 80102fc:	607b      	str	r3, [r7, #4]
 80102fe:	b003      	add	sp, #12
 8010300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010304:	e9db a800 	ldrd	sl, r8, [fp]
 8010308:	f10b 0b08 	add.w	fp, fp, #8
 801030c:	68a6      	ldr	r6, [r4, #8]
 801030e:	6820      	ldr	r0, [r4, #0]
 8010310:	f1b8 0f00 	cmp.w	r8, #0
 8010314:	d0f6      	beq.n	8010304 <__ssprint_r+0x20>
 8010316:	45b0      	cmp	r8, r6
 8010318:	d32e      	bcc.n	8010378 <__ssprint_r+0x94>
 801031a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801031e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010322:	d029      	beq.n	8010378 <__ssprint_r+0x94>
 8010324:	6921      	ldr	r1, [r4, #16]
 8010326:	6965      	ldr	r5, [r4, #20]
 8010328:	eba0 0901 	sub.w	r9, r0, r1
 801032c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010334:	f109 0001 	add.w	r0, r9, #1
 8010338:	106d      	asrs	r5, r5, #1
 801033a:	4440      	add	r0, r8
 801033c:	4285      	cmp	r5, r0
 801033e:	bf38      	it	cc
 8010340:	4605      	movcc	r5, r0
 8010342:	0553      	lsls	r3, r2, #21
 8010344:	d534      	bpl.n	80103b0 <__ssprint_r+0xcc>
 8010346:	9801      	ldr	r0, [sp, #4]
 8010348:	4629      	mov	r1, r5
 801034a:	f7fd f943 	bl	800d5d4 <_malloc_r>
 801034e:	4606      	mov	r6, r0
 8010350:	2800      	cmp	r0, #0
 8010352:	d038      	beq.n	80103c6 <__ssprint_r+0xe2>
 8010354:	464a      	mov	r2, r9
 8010356:	6921      	ldr	r1, [r4, #16]
 8010358:	f7fd f808 	bl	800d36c <memcpy>
 801035c:	89a2      	ldrh	r2, [r4, #12]
 801035e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010362:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010366:	81a2      	strh	r2, [r4, #12]
 8010368:	6126      	str	r6, [r4, #16]
 801036a:	6165      	str	r5, [r4, #20]
 801036c:	444e      	add	r6, r9
 801036e:	eba5 0509 	sub.w	r5, r5, r9
 8010372:	6026      	str	r6, [r4, #0]
 8010374:	60a5      	str	r5, [r4, #8]
 8010376:	4646      	mov	r6, r8
 8010378:	4546      	cmp	r6, r8
 801037a:	bf28      	it	cs
 801037c:	4646      	movcs	r6, r8
 801037e:	4632      	mov	r2, r6
 8010380:	4651      	mov	r1, sl
 8010382:	6820      	ldr	r0, [r4, #0]
 8010384:	f000 f82b 	bl	80103de <memmove>
 8010388:	68a2      	ldr	r2, [r4, #8]
 801038a:	1b92      	subs	r2, r2, r6
 801038c:	60a2      	str	r2, [r4, #8]
 801038e:	6822      	ldr	r2, [r4, #0]
 8010390:	4432      	add	r2, r6
 8010392:	6022      	str	r2, [r4, #0]
 8010394:	68ba      	ldr	r2, [r7, #8]
 8010396:	eba2 0308 	sub.w	r3, r2, r8
 801039a:	44c2      	add	sl, r8
 801039c:	60bb      	str	r3, [r7, #8]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d0aa      	beq.n	80102f8 <__ssprint_r+0x14>
 80103a2:	f04f 0800 	mov.w	r8, #0
 80103a6:	e7b1      	b.n	801030c <__ssprint_r+0x28>
 80103a8:	f04f 0a00 	mov.w	sl, #0
 80103ac:	46d0      	mov	r8, sl
 80103ae:	e7ad      	b.n	801030c <__ssprint_r+0x28>
 80103b0:	9801      	ldr	r0, [sp, #4]
 80103b2:	462a      	mov	r2, r5
 80103b4:	f000 f89a 	bl	80104ec <_realloc_r>
 80103b8:	4606      	mov	r6, r0
 80103ba:	2800      	cmp	r0, #0
 80103bc:	d1d4      	bne.n	8010368 <__ssprint_r+0x84>
 80103be:	6921      	ldr	r1, [r4, #16]
 80103c0:	9801      	ldr	r0, [sp, #4]
 80103c2:	f7fd f847 	bl	800d454 <_free_r>
 80103c6:	9a01      	ldr	r2, [sp, #4]
 80103c8:	230c      	movs	r3, #12
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	89a3      	ldrh	r3, [r4, #12]
 80103ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103d2:	81a3      	strh	r3, [r4, #12]
 80103d4:	2300      	movs	r3, #0
 80103d6:	60bb      	str	r3, [r7, #8]
 80103d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103dc:	e78d      	b.n	80102fa <__ssprint_r+0x16>

080103de <memmove>:
 80103de:	4288      	cmp	r0, r1
 80103e0:	b510      	push	{r4, lr}
 80103e2:	eb01 0402 	add.w	r4, r1, r2
 80103e6:	d902      	bls.n	80103ee <memmove+0x10>
 80103e8:	4284      	cmp	r4, r0
 80103ea:	4623      	mov	r3, r4
 80103ec:	d807      	bhi.n	80103fe <memmove+0x20>
 80103ee:	1e43      	subs	r3, r0, #1
 80103f0:	42a1      	cmp	r1, r4
 80103f2:	d008      	beq.n	8010406 <memmove+0x28>
 80103f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103fc:	e7f8      	b.n	80103f0 <memmove+0x12>
 80103fe:	4402      	add	r2, r0
 8010400:	4601      	mov	r1, r0
 8010402:	428a      	cmp	r2, r1
 8010404:	d100      	bne.n	8010408 <memmove+0x2a>
 8010406:	bd10      	pop	{r4, pc}
 8010408:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801040c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010410:	e7f7      	b.n	8010402 <memmove+0x24>
	...

08010414 <__locale_mb_cur_max>:
 8010414:	4b01      	ldr	r3, [pc, #4]	@ (801041c <__locale_mb_cur_max+0x8>)
 8010416:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801041a:	4770      	bx	lr
 801041c:	2400056c 	.word	0x2400056c

08010420 <__assert_func>:
 8010420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010422:	4614      	mov	r4, r2
 8010424:	461a      	mov	r2, r3
 8010426:	4b09      	ldr	r3, [pc, #36]	@ (801044c <__assert_func+0x2c>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4605      	mov	r5, r0
 801042c:	68d8      	ldr	r0, [r3, #12]
 801042e:	b954      	cbnz	r4, 8010446 <__assert_func+0x26>
 8010430:	4b07      	ldr	r3, [pc, #28]	@ (8010450 <__assert_func+0x30>)
 8010432:	461c      	mov	r4, r3
 8010434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010438:	9100      	str	r1, [sp, #0]
 801043a:	462b      	mov	r3, r5
 801043c:	4905      	ldr	r1, [pc, #20]	@ (8010454 <__assert_func+0x34>)
 801043e:	f000 fa0b 	bl	8010858 <fiprintf>
 8010442:	f001 f921 	bl	8011688 <abort>
 8010446:	4b04      	ldr	r3, [pc, #16]	@ (8010458 <__assert_func+0x38>)
 8010448:	e7f4      	b.n	8010434 <__assert_func+0x14>
 801044a:	bf00      	nop
 801044c:	24000034 	.word	0x24000034
 8010450:	080132ad 	.word	0x080132ad
 8010454:	0801327f 	.word	0x0801327f
 8010458:	08013272 	.word	0x08013272

0801045c <_calloc_r>:
 801045c:	b538      	push	{r3, r4, r5, lr}
 801045e:	fba1 1502 	umull	r1, r5, r1, r2
 8010462:	b935      	cbnz	r5, 8010472 <_calloc_r+0x16>
 8010464:	f7fd f8b6 	bl	800d5d4 <_malloc_r>
 8010468:	4604      	mov	r4, r0
 801046a:	b938      	cbnz	r0, 801047c <_calloc_r+0x20>
 801046c:	2400      	movs	r4, #0
 801046e:	4620      	mov	r0, r4
 8010470:	bd38      	pop	{r3, r4, r5, pc}
 8010472:	f7fc ff4d 	bl	800d310 <__errno>
 8010476:	230c      	movs	r3, #12
 8010478:	6003      	str	r3, [r0, #0]
 801047a:	e7f7      	b.n	801046c <_calloc_r+0x10>
 801047c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010480:	f022 0203 	bic.w	r2, r2, #3
 8010484:	3a04      	subs	r2, #4
 8010486:	2a24      	cmp	r2, #36	@ 0x24
 8010488:	d819      	bhi.n	80104be <_calloc_r+0x62>
 801048a:	2a13      	cmp	r2, #19
 801048c:	d915      	bls.n	80104ba <_calloc_r+0x5e>
 801048e:	2a1b      	cmp	r2, #27
 8010490:	e9c0 5500 	strd	r5, r5, [r0]
 8010494:	d806      	bhi.n	80104a4 <_calloc_r+0x48>
 8010496:	f100 0308 	add.w	r3, r0, #8
 801049a:	2200      	movs	r2, #0
 801049c:	e9c3 2200 	strd	r2, r2, [r3]
 80104a0:	609a      	str	r2, [r3, #8]
 80104a2:	e7e4      	b.n	801046e <_calloc_r+0x12>
 80104a4:	2a24      	cmp	r2, #36	@ 0x24
 80104a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80104aa:	bf11      	iteee	ne
 80104ac:	f100 0310 	addne.w	r3, r0, #16
 80104b0:	6105      	streq	r5, [r0, #16]
 80104b2:	f100 0318 	addeq.w	r3, r0, #24
 80104b6:	6145      	streq	r5, [r0, #20]
 80104b8:	e7ef      	b.n	801049a <_calloc_r+0x3e>
 80104ba:	4603      	mov	r3, r0
 80104bc:	e7ed      	b.n	801049a <_calloc_r+0x3e>
 80104be:	4629      	mov	r1, r5
 80104c0:	f7fc fed7 	bl	800d272 <memset>
 80104c4:	e7d3      	b.n	801046e <_calloc_r+0x12>

080104c6 <__ascii_mbtowc>:
 80104c6:	b082      	sub	sp, #8
 80104c8:	b901      	cbnz	r1, 80104cc <__ascii_mbtowc+0x6>
 80104ca:	a901      	add	r1, sp, #4
 80104cc:	b142      	cbz	r2, 80104e0 <__ascii_mbtowc+0x1a>
 80104ce:	b14b      	cbz	r3, 80104e4 <__ascii_mbtowc+0x1e>
 80104d0:	7813      	ldrb	r3, [r2, #0]
 80104d2:	600b      	str	r3, [r1, #0]
 80104d4:	7812      	ldrb	r2, [r2, #0]
 80104d6:	1e10      	subs	r0, r2, #0
 80104d8:	bf18      	it	ne
 80104da:	2001      	movne	r0, #1
 80104dc:	b002      	add	sp, #8
 80104de:	4770      	bx	lr
 80104e0:	4610      	mov	r0, r2
 80104e2:	e7fb      	b.n	80104dc <__ascii_mbtowc+0x16>
 80104e4:	f06f 0001 	mvn.w	r0, #1
 80104e8:	e7f8      	b.n	80104dc <__ascii_mbtowc+0x16>
	...

080104ec <_realloc_r>:
 80104ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f0:	4682      	mov	sl, r0
 80104f2:	4693      	mov	fp, r2
 80104f4:	460c      	mov	r4, r1
 80104f6:	b929      	cbnz	r1, 8010504 <_realloc_r+0x18>
 80104f8:	4611      	mov	r1, r2
 80104fa:	b003      	add	sp, #12
 80104fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010500:	f7fd b868 	b.w	800d5d4 <_malloc_r>
 8010504:	f7fd faa0 	bl	800da48 <__malloc_lock>
 8010508:	f10b 080b 	add.w	r8, fp, #11
 801050c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010510:	f1b8 0f16 	cmp.w	r8, #22
 8010514:	f1a4 0908 	sub.w	r9, r4, #8
 8010518:	f025 0603 	bic.w	r6, r5, #3
 801051c:	d908      	bls.n	8010530 <_realloc_r+0x44>
 801051e:	f038 0807 	bics.w	r8, r8, #7
 8010522:	d507      	bpl.n	8010534 <_realloc_r+0x48>
 8010524:	230c      	movs	r3, #12
 8010526:	f8ca 3000 	str.w	r3, [sl]
 801052a:	f04f 0b00 	mov.w	fp, #0
 801052e:	e032      	b.n	8010596 <_realloc_r+0xaa>
 8010530:	f04f 0810 	mov.w	r8, #16
 8010534:	45c3      	cmp	fp, r8
 8010536:	d8f5      	bhi.n	8010524 <_realloc_r+0x38>
 8010538:	4546      	cmp	r6, r8
 801053a:	f280 8174 	bge.w	8010826 <_realloc_r+0x33a>
 801053e:	4b9e      	ldr	r3, [pc, #632]	@ (80107b8 <_realloc_r+0x2cc>)
 8010540:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8010544:	eb09 0106 	add.w	r1, r9, r6
 8010548:	458c      	cmp	ip, r1
 801054a:	6848      	ldr	r0, [r1, #4]
 801054c:	d005      	beq.n	801055a <_realloc_r+0x6e>
 801054e:	f020 0201 	bic.w	r2, r0, #1
 8010552:	440a      	add	r2, r1
 8010554:	6852      	ldr	r2, [r2, #4]
 8010556:	07d7      	lsls	r7, r2, #31
 8010558:	d449      	bmi.n	80105ee <_realloc_r+0x102>
 801055a:	f020 0003 	bic.w	r0, r0, #3
 801055e:	458c      	cmp	ip, r1
 8010560:	eb06 0700 	add.w	r7, r6, r0
 8010564:	d11b      	bne.n	801059e <_realloc_r+0xb2>
 8010566:	f108 0210 	add.w	r2, r8, #16
 801056a:	42ba      	cmp	r2, r7
 801056c:	dc41      	bgt.n	80105f2 <_realloc_r+0x106>
 801056e:	eb09 0208 	add.w	r2, r9, r8
 8010572:	eba7 0708 	sub.w	r7, r7, r8
 8010576:	f047 0701 	orr.w	r7, r7, #1
 801057a:	609a      	str	r2, [r3, #8]
 801057c:	6057      	str	r7, [r2, #4]
 801057e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	ea43 0308 	orr.w	r3, r3, r8
 801058a:	f844 3c04 	str.w	r3, [r4, #-4]
 801058e:	4650      	mov	r0, sl
 8010590:	f7fd fa60 	bl	800da54 <__malloc_unlock>
 8010594:	46a3      	mov	fp, r4
 8010596:	4658      	mov	r0, fp
 8010598:	b003      	add	sp, #12
 801059a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801059e:	45b8      	cmp	r8, r7
 80105a0:	dc27      	bgt.n	80105f2 <_realloc_r+0x106>
 80105a2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80105a6:	60d3      	str	r3, [r2, #12]
 80105a8:	609a      	str	r2, [r3, #8]
 80105aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80105ae:	eba7 0008 	sub.w	r0, r7, r8
 80105b2:	280f      	cmp	r0, #15
 80105b4:	f003 0301 	and.w	r3, r3, #1
 80105b8:	eb09 0207 	add.w	r2, r9, r7
 80105bc:	f240 8135 	bls.w	801082a <_realloc_r+0x33e>
 80105c0:	eb09 0108 	add.w	r1, r9, r8
 80105c4:	ea48 0303 	orr.w	r3, r8, r3
 80105c8:	f040 0001 	orr.w	r0, r0, #1
 80105cc:	f8c9 3004 	str.w	r3, [r9, #4]
 80105d0:	6048      	str	r0, [r1, #4]
 80105d2:	6853      	ldr	r3, [r2, #4]
 80105d4:	f043 0301 	orr.w	r3, r3, #1
 80105d8:	6053      	str	r3, [r2, #4]
 80105da:	3108      	adds	r1, #8
 80105dc:	4650      	mov	r0, sl
 80105de:	f7fc ff39 	bl	800d454 <_free_r>
 80105e2:	4650      	mov	r0, sl
 80105e4:	f7fd fa36 	bl	800da54 <__malloc_unlock>
 80105e8:	f109 0b08 	add.w	fp, r9, #8
 80105ec:	e7d3      	b.n	8010596 <_realloc_r+0xaa>
 80105ee:	2000      	movs	r0, #0
 80105f0:	4601      	mov	r1, r0
 80105f2:	07ea      	lsls	r2, r5, #31
 80105f4:	f100 80c7 	bmi.w	8010786 <_realloc_r+0x29a>
 80105f8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80105fc:	eba9 0505 	sub.w	r5, r9, r5
 8010600:	686a      	ldr	r2, [r5, #4]
 8010602:	f022 0203 	bic.w	r2, r2, #3
 8010606:	4432      	add	r2, r6
 8010608:	9201      	str	r2, [sp, #4]
 801060a:	2900      	cmp	r1, #0
 801060c:	f000 8086 	beq.w	801071c <_realloc_r+0x230>
 8010610:	458c      	cmp	ip, r1
 8010612:	eb00 0702 	add.w	r7, r0, r2
 8010616:	d149      	bne.n	80106ac <_realloc_r+0x1c0>
 8010618:	f108 0210 	add.w	r2, r8, #16
 801061c:	42ba      	cmp	r2, r7
 801061e:	dc7d      	bgt.n	801071c <_realloc_r+0x230>
 8010620:	46ab      	mov	fp, r5
 8010622:	68ea      	ldr	r2, [r5, #12]
 8010624:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8010628:	60ca      	str	r2, [r1, #12]
 801062a:	6091      	str	r1, [r2, #8]
 801062c:	1f32      	subs	r2, r6, #4
 801062e:	2a24      	cmp	r2, #36	@ 0x24
 8010630:	d836      	bhi.n	80106a0 <_realloc_r+0x1b4>
 8010632:	2a13      	cmp	r2, #19
 8010634:	d932      	bls.n	801069c <_realloc_r+0x1b0>
 8010636:	6821      	ldr	r1, [r4, #0]
 8010638:	60a9      	str	r1, [r5, #8]
 801063a:	6861      	ldr	r1, [r4, #4]
 801063c:	60e9      	str	r1, [r5, #12]
 801063e:	2a1b      	cmp	r2, #27
 8010640:	d81a      	bhi.n	8010678 <_realloc_r+0x18c>
 8010642:	3408      	adds	r4, #8
 8010644:	f105 0210 	add.w	r2, r5, #16
 8010648:	6821      	ldr	r1, [r4, #0]
 801064a:	6011      	str	r1, [r2, #0]
 801064c:	6861      	ldr	r1, [r4, #4]
 801064e:	6051      	str	r1, [r2, #4]
 8010650:	68a1      	ldr	r1, [r4, #8]
 8010652:	6091      	str	r1, [r2, #8]
 8010654:	eb05 0208 	add.w	r2, r5, r8
 8010658:	eba7 0708 	sub.w	r7, r7, r8
 801065c:	f047 0701 	orr.w	r7, r7, #1
 8010660:	609a      	str	r2, [r3, #8]
 8010662:	6057      	str	r7, [r2, #4]
 8010664:	686b      	ldr	r3, [r5, #4]
 8010666:	f003 0301 	and.w	r3, r3, #1
 801066a:	ea43 0308 	orr.w	r3, r3, r8
 801066e:	606b      	str	r3, [r5, #4]
 8010670:	4650      	mov	r0, sl
 8010672:	f7fd f9ef 	bl	800da54 <__malloc_unlock>
 8010676:	e78e      	b.n	8010596 <_realloc_r+0xaa>
 8010678:	68a1      	ldr	r1, [r4, #8]
 801067a:	6129      	str	r1, [r5, #16]
 801067c:	68e1      	ldr	r1, [r4, #12]
 801067e:	6169      	str	r1, [r5, #20]
 8010680:	2a24      	cmp	r2, #36	@ 0x24
 8010682:	bf01      	itttt	eq
 8010684:	6922      	ldreq	r2, [r4, #16]
 8010686:	61aa      	streq	r2, [r5, #24]
 8010688:	6961      	ldreq	r1, [r4, #20]
 801068a:	61e9      	streq	r1, [r5, #28]
 801068c:	bf19      	ittee	ne
 801068e:	3410      	addne	r4, #16
 8010690:	f105 0218 	addne.w	r2, r5, #24
 8010694:	f105 0220 	addeq.w	r2, r5, #32
 8010698:	3418      	addeq	r4, #24
 801069a:	e7d5      	b.n	8010648 <_realloc_r+0x15c>
 801069c:	465a      	mov	r2, fp
 801069e:	e7d3      	b.n	8010648 <_realloc_r+0x15c>
 80106a0:	4621      	mov	r1, r4
 80106a2:	4658      	mov	r0, fp
 80106a4:	f7ff fe9b 	bl	80103de <memmove>
 80106a8:	4b43      	ldr	r3, [pc, #268]	@ (80107b8 <_realloc_r+0x2cc>)
 80106aa:	e7d3      	b.n	8010654 <_realloc_r+0x168>
 80106ac:	45b8      	cmp	r8, r7
 80106ae:	dc35      	bgt.n	801071c <_realloc_r+0x230>
 80106b0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80106b4:	4628      	mov	r0, r5
 80106b6:	60d3      	str	r3, [r2, #12]
 80106b8:	609a      	str	r2, [r3, #8]
 80106ba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80106be:	68eb      	ldr	r3, [r5, #12]
 80106c0:	60d3      	str	r3, [r2, #12]
 80106c2:	609a      	str	r2, [r3, #8]
 80106c4:	1f32      	subs	r2, r6, #4
 80106c6:	2a24      	cmp	r2, #36	@ 0x24
 80106c8:	d824      	bhi.n	8010714 <_realloc_r+0x228>
 80106ca:	2a13      	cmp	r2, #19
 80106cc:	d908      	bls.n	80106e0 <_realloc_r+0x1f4>
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	60ab      	str	r3, [r5, #8]
 80106d2:	6863      	ldr	r3, [r4, #4]
 80106d4:	60eb      	str	r3, [r5, #12]
 80106d6:	2a1b      	cmp	r2, #27
 80106d8:	d80a      	bhi.n	80106f0 <_realloc_r+0x204>
 80106da:	3408      	adds	r4, #8
 80106dc:	f105 0010 	add.w	r0, r5, #16
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	6003      	str	r3, [r0, #0]
 80106e4:	6863      	ldr	r3, [r4, #4]
 80106e6:	6043      	str	r3, [r0, #4]
 80106e8:	68a3      	ldr	r3, [r4, #8]
 80106ea:	6083      	str	r3, [r0, #8]
 80106ec:	46a9      	mov	r9, r5
 80106ee:	e75c      	b.n	80105aa <_realloc_r+0xbe>
 80106f0:	68a3      	ldr	r3, [r4, #8]
 80106f2:	612b      	str	r3, [r5, #16]
 80106f4:	68e3      	ldr	r3, [r4, #12]
 80106f6:	616b      	str	r3, [r5, #20]
 80106f8:	2a24      	cmp	r2, #36	@ 0x24
 80106fa:	bf01      	itttt	eq
 80106fc:	6923      	ldreq	r3, [r4, #16]
 80106fe:	61ab      	streq	r3, [r5, #24]
 8010700:	6963      	ldreq	r3, [r4, #20]
 8010702:	61eb      	streq	r3, [r5, #28]
 8010704:	bf19      	ittee	ne
 8010706:	3410      	addne	r4, #16
 8010708:	f105 0018 	addne.w	r0, r5, #24
 801070c:	f105 0020 	addeq.w	r0, r5, #32
 8010710:	3418      	addeq	r4, #24
 8010712:	e7e5      	b.n	80106e0 <_realloc_r+0x1f4>
 8010714:	4621      	mov	r1, r4
 8010716:	f7ff fe62 	bl	80103de <memmove>
 801071a:	e7e7      	b.n	80106ec <_realloc_r+0x200>
 801071c:	9b01      	ldr	r3, [sp, #4]
 801071e:	4598      	cmp	r8, r3
 8010720:	dc31      	bgt.n	8010786 <_realloc_r+0x29a>
 8010722:	4628      	mov	r0, r5
 8010724:	68eb      	ldr	r3, [r5, #12]
 8010726:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801072a:	60d3      	str	r3, [r2, #12]
 801072c:	609a      	str	r2, [r3, #8]
 801072e:	1f32      	subs	r2, r6, #4
 8010730:	2a24      	cmp	r2, #36	@ 0x24
 8010732:	d824      	bhi.n	801077e <_realloc_r+0x292>
 8010734:	2a13      	cmp	r2, #19
 8010736:	d908      	bls.n	801074a <_realloc_r+0x25e>
 8010738:	6823      	ldr	r3, [r4, #0]
 801073a:	60ab      	str	r3, [r5, #8]
 801073c:	6863      	ldr	r3, [r4, #4]
 801073e:	60eb      	str	r3, [r5, #12]
 8010740:	2a1b      	cmp	r2, #27
 8010742:	d80a      	bhi.n	801075a <_realloc_r+0x26e>
 8010744:	3408      	adds	r4, #8
 8010746:	f105 0010 	add.w	r0, r5, #16
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	6003      	str	r3, [r0, #0]
 801074e:	6863      	ldr	r3, [r4, #4]
 8010750:	6043      	str	r3, [r0, #4]
 8010752:	68a3      	ldr	r3, [r4, #8]
 8010754:	6083      	str	r3, [r0, #8]
 8010756:	9f01      	ldr	r7, [sp, #4]
 8010758:	e7c8      	b.n	80106ec <_realloc_r+0x200>
 801075a:	68a3      	ldr	r3, [r4, #8]
 801075c:	612b      	str	r3, [r5, #16]
 801075e:	68e3      	ldr	r3, [r4, #12]
 8010760:	616b      	str	r3, [r5, #20]
 8010762:	2a24      	cmp	r2, #36	@ 0x24
 8010764:	bf01      	itttt	eq
 8010766:	6923      	ldreq	r3, [r4, #16]
 8010768:	61ab      	streq	r3, [r5, #24]
 801076a:	6963      	ldreq	r3, [r4, #20]
 801076c:	61eb      	streq	r3, [r5, #28]
 801076e:	bf19      	ittee	ne
 8010770:	3410      	addne	r4, #16
 8010772:	f105 0018 	addne.w	r0, r5, #24
 8010776:	f105 0020 	addeq.w	r0, r5, #32
 801077a:	3418      	addeq	r4, #24
 801077c:	e7e5      	b.n	801074a <_realloc_r+0x25e>
 801077e:	4621      	mov	r1, r4
 8010780:	f7ff fe2d 	bl	80103de <memmove>
 8010784:	e7e7      	b.n	8010756 <_realloc_r+0x26a>
 8010786:	4659      	mov	r1, fp
 8010788:	4650      	mov	r0, sl
 801078a:	f7fc ff23 	bl	800d5d4 <_malloc_r>
 801078e:	4683      	mov	fp, r0
 8010790:	b918      	cbnz	r0, 801079a <_realloc_r+0x2ae>
 8010792:	4650      	mov	r0, sl
 8010794:	f7fd f95e 	bl	800da54 <__malloc_unlock>
 8010798:	e6c7      	b.n	801052a <_realloc_r+0x3e>
 801079a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801079e:	f023 0301 	bic.w	r3, r3, #1
 80107a2:	444b      	add	r3, r9
 80107a4:	f1a0 0208 	sub.w	r2, r0, #8
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d107      	bne.n	80107bc <_realloc_r+0x2d0>
 80107ac:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80107b0:	f027 0703 	bic.w	r7, r7, #3
 80107b4:	4437      	add	r7, r6
 80107b6:	e6f8      	b.n	80105aa <_realloc_r+0xbe>
 80107b8:	24000164 	.word	0x24000164
 80107bc:	1f32      	subs	r2, r6, #4
 80107be:	2a24      	cmp	r2, #36	@ 0x24
 80107c0:	d82d      	bhi.n	801081e <_realloc_r+0x332>
 80107c2:	2a13      	cmp	r2, #19
 80107c4:	d928      	bls.n	8010818 <_realloc_r+0x32c>
 80107c6:	6823      	ldr	r3, [r4, #0]
 80107c8:	6003      	str	r3, [r0, #0]
 80107ca:	6863      	ldr	r3, [r4, #4]
 80107cc:	6043      	str	r3, [r0, #4]
 80107ce:	2a1b      	cmp	r2, #27
 80107d0:	d80e      	bhi.n	80107f0 <_realloc_r+0x304>
 80107d2:	f104 0208 	add.w	r2, r4, #8
 80107d6:	f100 0308 	add.w	r3, r0, #8
 80107da:	6811      	ldr	r1, [r2, #0]
 80107dc:	6019      	str	r1, [r3, #0]
 80107de:	6851      	ldr	r1, [r2, #4]
 80107e0:	6059      	str	r1, [r3, #4]
 80107e2:	6892      	ldr	r2, [r2, #8]
 80107e4:	609a      	str	r2, [r3, #8]
 80107e6:	4621      	mov	r1, r4
 80107e8:	4650      	mov	r0, sl
 80107ea:	f7fc fe33 	bl	800d454 <_free_r>
 80107ee:	e73f      	b.n	8010670 <_realloc_r+0x184>
 80107f0:	68a3      	ldr	r3, [r4, #8]
 80107f2:	6083      	str	r3, [r0, #8]
 80107f4:	68e3      	ldr	r3, [r4, #12]
 80107f6:	60c3      	str	r3, [r0, #12]
 80107f8:	2a24      	cmp	r2, #36	@ 0x24
 80107fa:	bf01      	itttt	eq
 80107fc:	6923      	ldreq	r3, [r4, #16]
 80107fe:	6103      	streq	r3, [r0, #16]
 8010800:	6961      	ldreq	r1, [r4, #20]
 8010802:	6141      	streq	r1, [r0, #20]
 8010804:	bf19      	ittee	ne
 8010806:	f104 0210 	addne.w	r2, r4, #16
 801080a:	f100 0310 	addne.w	r3, r0, #16
 801080e:	f104 0218 	addeq.w	r2, r4, #24
 8010812:	f100 0318 	addeq.w	r3, r0, #24
 8010816:	e7e0      	b.n	80107da <_realloc_r+0x2ee>
 8010818:	4603      	mov	r3, r0
 801081a:	4622      	mov	r2, r4
 801081c:	e7dd      	b.n	80107da <_realloc_r+0x2ee>
 801081e:	4621      	mov	r1, r4
 8010820:	f7ff fddd 	bl	80103de <memmove>
 8010824:	e7df      	b.n	80107e6 <_realloc_r+0x2fa>
 8010826:	4637      	mov	r7, r6
 8010828:	e6bf      	b.n	80105aa <_realloc_r+0xbe>
 801082a:	431f      	orrs	r7, r3
 801082c:	f8c9 7004 	str.w	r7, [r9, #4]
 8010830:	6853      	ldr	r3, [r2, #4]
 8010832:	f043 0301 	orr.w	r3, r3, #1
 8010836:	6053      	str	r3, [r2, #4]
 8010838:	e6d3      	b.n	80105e2 <_realloc_r+0xf6>
 801083a:	bf00      	nop

0801083c <__ascii_wctomb>:
 801083c:	4603      	mov	r3, r0
 801083e:	4608      	mov	r0, r1
 8010840:	b141      	cbz	r1, 8010854 <__ascii_wctomb+0x18>
 8010842:	2aff      	cmp	r2, #255	@ 0xff
 8010844:	d904      	bls.n	8010850 <__ascii_wctomb+0x14>
 8010846:	228a      	movs	r2, #138	@ 0x8a
 8010848:	601a      	str	r2, [r3, #0]
 801084a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801084e:	4770      	bx	lr
 8010850:	700a      	strb	r2, [r1, #0]
 8010852:	2001      	movs	r0, #1
 8010854:	4770      	bx	lr
	...

08010858 <fiprintf>:
 8010858:	b40e      	push	{r1, r2, r3}
 801085a:	b503      	push	{r0, r1, lr}
 801085c:	4601      	mov	r1, r0
 801085e:	ab03      	add	r3, sp, #12
 8010860:	4805      	ldr	r0, [pc, #20]	@ (8010878 <fiprintf+0x20>)
 8010862:	f853 2b04 	ldr.w	r2, [r3], #4
 8010866:	6800      	ldr	r0, [r0, #0]
 8010868:	9301      	str	r3, [sp, #4]
 801086a:	f000 f839 	bl	80108e0 <_vfiprintf_r>
 801086e:	b002      	add	sp, #8
 8010870:	f85d eb04 	ldr.w	lr, [sp], #4
 8010874:	b003      	add	sp, #12
 8010876:	4770      	bx	lr
 8010878:	24000034 	.word	0x24000034

0801087c <__sprint_r>:
 801087c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010880:	6893      	ldr	r3, [r2, #8]
 8010882:	4680      	mov	r8, r0
 8010884:	460e      	mov	r6, r1
 8010886:	4614      	mov	r4, r2
 8010888:	b343      	cbz	r3, 80108dc <__sprint_r+0x60>
 801088a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801088c:	049d      	lsls	r5, r3, #18
 801088e:	d522      	bpl.n	80108d6 <__sprint_r+0x5a>
 8010890:	6815      	ldr	r5, [r2, #0]
 8010892:	68a0      	ldr	r0, [r4, #8]
 8010894:	3508      	adds	r5, #8
 8010896:	b928      	cbnz	r0, 80108a4 <__sprint_r+0x28>
 8010898:	2300      	movs	r3, #0
 801089a:	60a3      	str	r3, [r4, #8]
 801089c:	2300      	movs	r3, #0
 801089e:	6063      	str	r3, [r4, #4]
 80108a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 80108a8:	f04f 0900 	mov.w	r9, #0
 80108ac:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80108b0:	45ca      	cmp	sl, r9
 80108b2:	dc05      	bgt.n	80108c0 <__sprint_r+0x44>
 80108b4:	68a3      	ldr	r3, [r4, #8]
 80108b6:	f027 0703 	bic.w	r7, r7, #3
 80108ba:	1bdb      	subs	r3, r3, r7
 80108bc:	60a3      	str	r3, [r4, #8]
 80108be:	e7e8      	b.n	8010892 <__sprint_r+0x16>
 80108c0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80108c4:	4632      	mov	r2, r6
 80108c6:	4640      	mov	r0, r8
 80108c8:	f000 feb5 	bl	8011636 <_fputwc_r>
 80108cc:	1c43      	adds	r3, r0, #1
 80108ce:	d0e3      	beq.n	8010898 <__sprint_r+0x1c>
 80108d0:	f109 0901 	add.w	r9, r9, #1
 80108d4:	e7ec      	b.n	80108b0 <__sprint_r+0x34>
 80108d6:	f000 fccb 	bl	8011270 <__sfvwrite_r>
 80108da:	e7dd      	b.n	8010898 <__sprint_r+0x1c>
 80108dc:	4618      	mov	r0, r3
 80108de:	e7dd      	b.n	801089c <__sprint_r+0x20>

080108e0 <_vfiprintf_r>:
 80108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	b0bb      	sub	sp, #236	@ 0xec
 80108e6:	460f      	mov	r7, r1
 80108e8:	4693      	mov	fp, r2
 80108ea:	461c      	mov	r4, r3
 80108ec:	461d      	mov	r5, r3
 80108ee:	9000      	str	r0, [sp, #0]
 80108f0:	b118      	cbz	r0, 80108fa <_vfiprintf_r+0x1a>
 80108f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80108f4:	b90b      	cbnz	r3, 80108fa <_vfiprintf_r+0x1a>
 80108f6:	f7fc fc23 	bl	800d140 <__sinit>
 80108fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80108fc:	07db      	lsls	r3, r3, #31
 80108fe:	d405      	bmi.n	801090c <_vfiprintf_r+0x2c>
 8010900:	89bb      	ldrh	r3, [r7, #12]
 8010902:	059e      	lsls	r6, r3, #22
 8010904:	d402      	bmi.n	801090c <_vfiprintf_r+0x2c>
 8010906:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010908:	f7fc fd2e 	bl	800d368 <__retarget_lock_acquire_recursive>
 801090c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010910:	0498      	lsls	r0, r3, #18
 8010912:	d406      	bmi.n	8010922 <_vfiprintf_r+0x42>
 8010914:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010918:	81bb      	strh	r3, [r7, #12]
 801091a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801091c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010920:	667b      	str	r3, [r7, #100]	@ 0x64
 8010922:	89bb      	ldrh	r3, [r7, #12]
 8010924:	0719      	lsls	r1, r3, #28
 8010926:	d501      	bpl.n	801092c <_vfiprintf_r+0x4c>
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	b9ab      	cbnz	r3, 8010958 <_vfiprintf_r+0x78>
 801092c:	9800      	ldr	r0, [sp, #0]
 801092e:	4639      	mov	r1, r7
 8010930:	f000 fdea 	bl	8011508 <__swsetup_r>
 8010934:	b180      	cbz	r0, 8010958 <_vfiprintf_r+0x78>
 8010936:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010938:	07da      	lsls	r2, r3, #31
 801093a:	d506      	bpl.n	801094a <_vfiprintf_r+0x6a>
 801093c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010940:	9303      	str	r3, [sp, #12]
 8010942:	9803      	ldr	r0, [sp, #12]
 8010944:	b03b      	add	sp, #236	@ 0xec
 8010946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801094a:	89bb      	ldrh	r3, [r7, #12]
 801094c:	059b      	lsls	r3, r3, #22
 801094e:	d4f5      	bmi.n	801093c <_vfiprintf_r+0x5c>
 8010950:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010952:	f7fc fd0a 	bl	800d36a <__retarget_lock_release_recursive>
 8010956:	e7f1      	b.n	801093c <_vfiprintf_r+0x5c>
 8010958:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801095c:	f003 021a 	and.w	r2, r3, #26
 8010960:	2a0a      	cmp	r2, #10
 8010962:	d114      	bne.n	801098e <_vfiprintf_r+0xae>
 8010964:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010968:	2a00      	cmp	r2, #0
 801096a:	db10      	blt.n	801098e <_vfiprintf_r+0xae>
 801096c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801096e:	07d6      	lsls	r6, r2, #31
 8010970:	d404      	bmi.n	801097c <_vfiprintf_r+0x9c>
 8010972:	059d      	lsls	r5, r3, #22
 8010974:	d402      	bmi.n	801097c <_vfiprintf_r+0x9c>
 8010976:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010978:	f7fc fcf7 	bl	800d36a <__retarget_lock_release_recursive>
 801097c:	9800      	ldr	r0, [sp, #0]
 801097e:	4623      	mov	r3, r4
 8010980:	465a      	mov	r2, fp
 8010982:	4639      	mov	r1, r7
 8010984:	b03b      	add	sp, #236	@ 0xec
 8010986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098a:	f000 bc31 	b.w	80111f0 <__sbprintf>
 801098e:	2300      	movs	r3, #0
 8010990:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8010994:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010998:	ae11      	add	r6, sp, #68	@ 0x44
 801099a:	960e      	str	r6, [sp, #56]	@ 0x38
 801099c:	9307      	str	r3, [sp, #28]
 801099e:	9309      	str	r3, [sp, #36]	@ 0x24
 80109a0:	9303      	str	r3, [sp, #12]
 80109a2:	465b      	mov	r3, fp
 80109a4:	461c      	mov	r4, r3
 80109a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109aa:	b10a      	cbz	r2, 80109b0 <_vfiprintf_r+0xd0>
 80109ac:	2a25      	cmp	r2, #37	@ 0x25
 80109ae:	d1f9      	bne.n	80109a4 <_vfiprintf_r+0xc4>
 80109b0:	ebb4 080b 	subs.w	r8, r4, fp
 80109b4:	d00d      	beq.n	80109d2 <_vfiprintf_r+0xf2>
 80109b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109b8:	4443      	add	r3, r8
 80109ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80109bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109be:	3301      	adds	r3, #1
 80109c0:	2b07      	cmp	r3, #7
 80109c2:	e9c6 b800 	strd	fp, r8, [r6]
 80109c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80109c8:	dc75      	bgt.n	8010ab6 <_vfiprintf_r+0x1d6>
 80109ca:	3608      	adds	r6, #8
 80109cc:	9b03      	ldr	r3, [sp, #12]
 80109ce:	4443      	add	r3, r8
 80109d0:	9303      	str	r3, [sp, #12]
 80109d2:	7823      	ldrb	r3, [r4, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 83cd 	beq.w	8011174 <_vfiprintf_r+0x894>
 80109da:	2300      	movs	r3, #0
 80109dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80109e0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80109e4:	3401      	adds	r4, #1
 80109e6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80109ea:	469a      	mov	sl, r3
 80109ec:	46a3      	mov	fp, r4
 80109ee:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80109f2:	f1a3 0220 	sub.w	r2, r3, #32
 80109f6:	2a5a      	cmp	r2, #90	@ 0x5a
 80109f8:	f200 8316 	bhi.w	8011028 <_vfiprintf_r+0x748>
 80109fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010a00:	0314009a 	.word	0x0314009a
 8010a04:	00a20314 	.word	0x00a20314
 8010a08:	03140314 	.word	0x03140314
 8010a0c:	00820314 	.word	0x00820314
 8010a10:	03140314 	.word	0x03140314
 8010a14:	00af00a5 	.word	0x00af00a5
 8010a18:	00ac0314 	.word	0x00ac0314
 8010a1c:	031400b1 	.word	0x031400b1
 8010a20:	00d000cd 	.word	0x00d000cd
 8010a24:	00d000d0 	.word	0x00d000d0
 8010a28:	00d000d0 	.word	0x00d000d0
 8010a2c:	00d000d0 	.word	0x00d000d0
 8010a30:	00d000d0 	.word	0x00d000d0
 8010a34:	03140314 	.word	0x03140314
 8010a38:	03140314 	.word	0x03140314
 8010a3c:	03140314 	.word	0x03140314
 8010a40:	03140314 	.word	0x03140314
 8010a44:	00f70314 	.word	0x00f70314
 8010a48:	03140104 	.word	0x03140104
 8010a4c:	03140314 	.word	0x03140314
 8010a50:	03140314 	.word	0x03140314
 8010a54:	03140314 	.word	0x03140314
 8010a58:	03140314 	.word	0x03140314
 8010a5c:	01520314 	.word	0x01520314
 8010a60:	03140314 	.word	0x03140314
 8010a64:	019a0314 	.word	0x019a0314
 8010a68:	027a0314 	.word	0x027a0314
 8010a6c:	03140314 	.word	0x03140314
 8010a70:	0314029a 	.word	0x0314029a
 8010a74:	03140314 	.word	0x03140314
 8010a78:	03140314 	.word	0x03140314
 8010a7c:	03140314 	.word	0x03140314
 8010a80:	03140314 	.word	0x03140314
 8010a84:	00f70314 	.word	0x00f70314
 8010a88:	03140106 	.word	0x03140106
 8010a8c:	03140314 	.word	0x03140314
 8010a90:	010600e0 	.word	0x010600e0
 8010a94:	031400f1 	.word	0x031400f1
 8010a98:	031400eb 	.word	0x031400eb
 8010a9c:	01540132 	.word	0x01540132
 8010aa0:	00f10189 	.word	0x00f10189
 8010aa4:	019a0314 	.word	0x019a0314
 8010aa8:	027c0098 	.word	0x027c0098
 8010aac:	03140314 	.word	0x03140314
 8010ab0:	03140065 	.word	0x03140065
 8010ab4:	0098      	.short	0x0098
 8010ab6:	9800      	ldr	r0, [sp, #0]
 8010ab8:	aa0e      	add	r2, sp, #56	@ 0x38
 8010aba:	4639      	mov	r1, r7
 8010abc:	f7ff fede 	bl	801087c <__sprint_r>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	f040 8336 	bne.w	8011132 <_vfiprintf_r+0x852>
 8010ac6:	ae11      	add	r6, sp, #68	@ 0x44
 8010ac8:	e780      	b.n	80109cc <_vfiprintf_r+0xec>
 8010aca:	4a99      	ldr	r2, [pc, #612]	@ (8010d30 <_vfiprintf_r+0x450>)
 8010acc:	9205      	str	r2, [sp, #20]
 8010ace:	f01a 0220 	ands.w	r2, sl, #32
 8010ad2:	f000 8231 	beq.w	8010f38 <_vfiprintf_r+0x658>
 8010ad6:	3507      	adds	r5, #7
 8010ad8:	f025 0507 	bic.w	r5, r5, #7
 8010adc:	46a8      	mov	r8, r5
 8010ade:	686d      	ldr	r5, [r5, #4]
 8010ae0:	f858 4b08 	ldr.w	r4, [r8], #8
 8010ae4:	f01a 0f01 	tst.w	sl, #1
 8010ae8:	d009      	beq.n	8010afe <_vfiprintf_r+0x21e>
 8010aea:	ea54 0205 	orrs.w	r2, r4, r5
 8010aee:	bf1f      	itttt	ne
 8010af0:	2230      	movne	r2, #48	@ 0x30
 8010af2:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8010af6:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8010afa:	f04a 0a02 	orrne.w	sl, sl, #2
 8010afe:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8010b02:	e112      	b.n	8010d2a <_vfiprintf_r+0x44a>
 8010b04:	9800      	ldr	r0, [sp, #0]
 8010b06:	f7fe fa45 	bl	800ef94 <_localeconv_r>
 8010b0a:	6843      	ldr	r3, [r0, #4]
 8010b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7ef fc36 	bl	8000380 <strlen>
 8010b14:	9007      	str	r0, [sp, #28]
 8010b16:	9800      	ldr	r0, [sp, #0]
 8010b18:	f7fe fa3c 	bl	800ef94 <_localeconv_r>
 8010b1c:	6883      	ldr	r3, [r0, #8]
 8010b1e:	9306      	str	r3, [sp, #24]
 8010b20:	9b07      	ldr	r3, [sp, #28]
 8010b22:	b12b      	cbz	r3, 8010b30 <_vfiprintf_r+0x250>
 8010b24:	9b06      	ldr	r3, [sp, #24]
 8010b26:	b11b      	cbz	r3, 8010b30 <_vfiprintf_r+0x250>
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	b10b      	cbz	r3, 8010b30 <_vfiprintf_r+0x250>
 8010b2c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8010b30:	465c      	mov	r4, fp
 8010b32:	e75b      	b.n	80109ec <_vfiprintf_r+0x10c>
 8010b34:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1f9      	bne.n	8010b30 <_vfiprintf_r+0x250>
 8010b3c:	2320      	movs	r3, #32
 8010b3e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8010b42:	e7f5      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010b44:	f04a 0a01 	orr.w	sl, sl, #1
 8010b48:	e7f2      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b4e:	9302      	str	r3, [sp, #8]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	daed      	bge.n	8010b30 <_vfiprintf_r+0x250>
 8010b54:	425b      	negs	r3, r3
 8010b56:	9302      	str	r3, [sp, #8]
 8010b58:	f04a 0a04 	orr.w	sl, sl, #4
 8010b5c:	e7e8      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010b5e:	232b      	movs	r3, #43	@ 0x2b
 8010b60:	e7ed      	b.n	8010b3e <_vfiprintf_r+0x25e>
 8010b62:	465a      	mov	r2, fp
 8010b64:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b6a:	d112      	bne.n	8010b92 <_vfiprintf_r+0x2b2>
 8010b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b74:	9301      	str	r3, [sp, #4]
 8010b76:	4693      	mov	fp, r2
 8010b78:	e7da      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010b7a:	9b01      	ldr	r3, [sp, #4]
 8010b7c:	fb00 1303 	mla	r3, r0, r3, r1
 8010b80:	9301      	str	r3, [sp, #4]
 8010b82:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010b86:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8010b8a:	2909      	cmp	r1, #9
 8010b8c:	d9f5      	bls.n	8010b7a <_vfiprintf_r+0x29a>
 8010b8e:	4693      	mov	fp, r2
 8010b90:	e72f      	b.n	80109f2 <_vfiprintf_r+0x112>
 8010b92:	2100      	movs	r1, #0
 8010b94:	9101      	str	r1, [sp, #4]
 8010b96:	200a      	movs	r0, #10
 8010b98:	e7f5      	b.n	8010b86 <_vfiprintf_r+0x2a6>
 8010b9a:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8010b9e:	e7c7      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	465a      	mov	r2, fp
 8010ba4:	9102      	str	r1, [sp, #8]
 8010ba6:	200a      	movs	r0, #10
 8010ba8:	9902      	ldr	r1, [sp, #8]
 8010baa:	3b30      	subs	r3, #48	@ 0x30
 8010bac:	fb00 3301 	mla	r3, r0, r1, r3
 8010bb0:	9302      	str	r3, [sp, #8]
 8010bb2:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010bb6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8010bba:	2909      	cmp	r1, #9
 8010bbc:	d9f4      	bls.n	8010ba8 <_vfiprintf_r+0x2c8>
 8010bbe:	e7e6      	b.n	8010b8e <_vfiprintf_r+0x2ae>
 8010bc0:	f89b 3000 	ldrb.w	r3, [fp]
 8010bc4:	2b68      	cmp	r3, #104	@ 0x68
 8010bc6:	bf06      	itte	eq
 8010bc8:	f10b 0b01 	addeq.w	fp, fp, #1
 8010bcc:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8010bd0:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8010bd4:	e7ac      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010bd6:	f89b 3000 	ldrb.w	r3, [fp]
 8010bda:	2b6c      	cmp	r3, #108	@ 0x6c
 8010bdc:	d104      	bne.n	8010be8 <_vfiprintf_r+0x308>
 8010bde:	f10b 0b01 	add.w	fp, fp, #1
 8010be2:	f04a 0a20 	orr.w	sl, sl, #32
 8010be6:	e7a3      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010be8:	f04a 0a10 	orr.w	sl, sl, #16
 8010bec:	e7a0      	b.n	8010b30 <_vfiprintf_r+0x250>
 8010bee:	46a8      	mov	r8, r5
 8010bf0:	2400      	movs	r4, #0
 8010bf2:	f858 3b04 	ldr.w	r3, [r8], #4
 8010bf6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8010bfa:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8010bfe:	2301      	movs	r3, #1
 8010c00:	9301      	str	r3, [sp, #4]
 8010c02:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8010c06:	e0ab      	b.n	8010d60 <_vfiprintf_r+0x480>
 8010c08:	f04a 0a10 	orr.w	sl, sl, #16
 8010c0c:	f01a 0f20 	tst.w	sl, #32
 8010c10:	d011      	beq.n	8010c36 <_vfiprintf_r+0x356>
 8010c12:	3507      	adds	r5, #7
 8010c14:	f025 0507 	bic.w	r5, r5, #7
 8010c18:	46a8      	mov	r8, r5
 8010c1a:	686d      	ldr	r5, [r5, #4]
 8010c1c:	f858 4b08 	ldr.w	r4, [r8], #8
 8010c20:	2d00      	cmp	r5, #0
 8010c22:	da06      	bge.n	8010c32 <_vfiprintf_r+0x352>
 8010c24:	4264      	negs	r4, r4
 8010c26:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8010c2a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8010c2e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8010c32:	2301      	movs	r3, #1
 8010c34:	e048      	b.n	8010cc8 <_vfiprintf_r+0x3e8>
 8010c36:	46a8      	mov	r8, r5
 8010c38:	f01a 0f10 	tst.w	sl, #16
 8010c3c:	f858 5b04 	ldr.w	r5, [r8], #4
 8010c40:	d002      	beq.n	8010c48 <_vfiprintf_r+0x368>
 8010c42:	462c      	mov	r4, r5
 8010c44:	17ed      	asrs	r5, r5, #31
 8010c46:	e7eb      	b.n	8010c20 <_vfiprintf_r+0x340>
 8010c48:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010c4c:	d003      	beq.n	8010c56 <_vfiprintf_r+0x376>
 8010c4e:	b22c      	sxth	r4, r5
 8010c50:	f345 35c0 	sbfx	r5, r5, #15, #1
 8010c54:	e7e4      	b.n	8010c20 <_vfiprintf_r+0x340>
 8010c56:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010c5a:	d0f2      	beq.n	8010c42 <_vfiprintf_r+0x362>
 8010c5c:	b26c      	sxtb	r4, r5
 8010c5e:	f345 15c0 	sbfx	r5, r5, #7, #1
 8010c62:	e7dd      	b.n	8010c20 <_vfiprintf_r+0x340>
 8010c64:	f01a 0f20 	tst.w	sl, #32
 8010c68:	d007      	beq.n	8010c7a <_vfiprintf_r+0x39a>
 8010c6a:	9a03      	ldr	r2, [sp, #12]
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	9903      	ldr	r1, [sp, #12]
 8010c70:	17d2      	asrs	r2, r2, #31
 8010c72:	e9c3 1200 	strd	r1, r2, [r3]
 8010c76:	3504      	adds	r5, #4
 8010c78:	e693      	b.n	80109a2 <_vfiprintf_r+0xc2>
 8010c7a:	f01a 0f10 	tst.w	sl, #16
 8010c7e:	d003      	beq.n	8010c88 <_vfiprintf_r+0x3a8>
 8010c80:	682b      	ldr	r3, [r5, #0]
 8010c82:	9a03      	ldr	r2, [sp, #12]
 8010c84:	601a      	str	r2, [r3, #0]
 8010c86:	e7f6      	b.n	8010c76 <_vfiprintf_r+0x396>
 8010c88:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010c8c:	d003      	beq.n	8010c96 <_vfiprintf_r+0x3b6>
 8010c8e:	682b      	ldr	r3, [r5, #0]
 8010c90:	9a03      	ldr	r2, [sp, #12]
 8010c92:	801a      	strh	r2, [r3, #0]
 8010c94:	e7ef      	b.n	8010c76 <_vfiprintf_r+0x396>
 8010c96:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010c9a:	d0f1      	beq.n	8010c80 <_vfiprintf_r+0x3a0>
 8010c9c:	682b      	ldr	r3, [r5, #0]
 8010c9e:	9a03      	ldr	r2, [sp, #12]
 8010ca0:	701a      	strb	r2, [r3, #0]
 8010ca2:	e7e8      	b.n	8010c76 <_vfiprintf_r+0x396>
 8010ca4:	f04a 0a10 	orr.w	sl, sl, #16
 8010ca8:	f01a 0320 	ands.w	r3, sl, #32
 8010cac:	d01f      	beq.n	8010cee <_vfiprintf_r+0x40e>
 8010cae:	3507      	adds	r5, #7
 8010cb0:	f025 0507 	bic.w	r5, r5, #7
 8010cb4:	46a8      	mov	r8, r5
 8010cb6:	686d      	ldr	r5, [r5, #4]
 8010cb8:	f858 4b08 	ldr.w	r4, [r8], #8
 8010cbc:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8010cc8:	9a01      	ldr	r2, [sp, #4]
 8010cca:	3201      	adds	r2, #1
 8010ccc:	f000 825f 	beq.w	801118e <_vfiprintf_r+0x8ae>
 8010cd0:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8010cd4:	9204      	str	r2, [sp, #16]
 8010cd6:	ea54 0205 	orrs.w	r2, r4, r5
 8010cda:	f040 825e 	bne.w	801119a <_vfiprintf_r+0x8ba>
 8010cde:	9a01      	ldr	r2, [sp, #4]
 8010ce0:	2a00      	cmp	r2, #0
 8010ce2:	f000 8198 	beq.w	8011016 <_vfiprintf_r+0x736>
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	f040 825a 	bne.w	80111a0 <_vfiprintf_r+0x8c0>
 8010cec:	e13b      	b.n	8010f66 <_vfiprintf_r+0x686>
 8010cee:	46a8      	mov	r8, r5
 8010cf0:	f01a 0510 	ands.w	r5, sl, #16
 8010cf4:	f858 4b04 	ldr.w	r4, [r8], #4
 8010cf8:	d001      	beq.n	8010cfe <_vfiprintf_r+0x41e>
 8010cfa:	461d      	mov	r5, r3
 8010cfc:	e7de      	b.n	8010cbc <_vfiprintf_r+0x3dc>
 8010cfe:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8010d02:	d001      	beq.n	8010d08 <_vfiprintf_r+0x428>
 8010d04:	b2a4      	uxth	r4, r4
 8010d06:	e7d9      	b.n	8010cbc <_vfiprintf_r+0x3dc>
 8010d08:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010d0c:	d0d6      	beq.n	8010cbc <_vfiprintf_r+0x3dc>
 8010d0e:	b2e4      	uxtb	r4, r4
 8010d10:	e7f3      	b.n	8010cfa <_vfiprintf_r+0x41a>
 8010d12:	46a8      	mov	r8, r5
 8010d14:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010d18:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010d1c:	f858 4b04 	ldr.w	r4, [r8], #4
 8010d20:	4b03      	ldr	r3, [pc, #12]	@ (8010d30 <_vfiprintf_r+0x450>)
 8010d22:	9305      	str	r3, [sp, #20]
 8010d24:	2500      	movs	r5, #0
 8010d26:	f04a 0a02 	orr.w	sl, sl, #2
 8010d2a:	2302      	movs	r3, #2
 8010d2c:	e7c9      	b.n	8010cc2 <_vfiprintf_r+0x3e2>
 8010d2e:	bf00      	nop
 8010d30:	08013054 	.word	0x08013054
 8010d34:	9b01      	ldr	r3, [sp, #4]
 8010d36:	46a8      	mov	r8, r5
 8010d38:	1c5c      	adds	r4, r3, #1
 8010d3a:	f04f 0500 	mov.w	r5, #0
 8010d3e:	f858 9b04 	ldr.w	r9, [r8], #4
 8010d42:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8010d46:	f000 80d0 	beq.w	8010eea <_vfiprintf_r+0x60a>
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	4648      	mov	r0, r9
 8010d50:	f7ef fac6 	bl	80002e0 <memchr>
 8010d54:	4604      	mov	r4, r0
 8010d56:	b118      	cbz	r0, 8010d60 <_vfiprintf_r+0x480>
 8010d58:	eba0 0309 	sub.w	r3, r0, r9
 8010d5c:	9301      	str	r3, [sp, #4]
 8010d5e:	462c      	mov	r4, r5
 8010d60:	9b01      	ldr	r3, [sp, #4]
 8010d62:	42a3      	cmp	r3, r4
 8010d64:	bfb8      	it	lt
 8010d66:	4623      	movlt	r3, r4
 8010d68:	9304      	str	r3, [sp, #16]
 8010d6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8010d6e:	b113      	cbz	r3, 8010d76 <_vfiprintf_r+0x496>
 8010d70:	9b04      	ldr	r3, [sp, #16]
 8010d72:	3301      	adds	r3, #1
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	f01a 0302 	ands.w	r3, sl, #2
 8010d7a:	9308      	str	r3, [sp, #32]
 8010d7c:	bf1e      	ittt	ne
 8010d7e:	9b04      	ldrne	r3, [sp, #16]
 8010d80:	3302      	addne	r3, #2
 8010d82:	9304      	strne	r3, [sp, #16]
 8010d84:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8010d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d8a:	d11f      	bne.n	8010dcc <_vfiprintf_r+0x4ec>
 8010d8c:	9b02      	ldr	r3, [sp, #8]
 8010d8e:	9a04      	ldr	r2, [sp, #16]
 8010d90:	1a9d      	subs	r5, r3, r2
 8010d92:	2d00      	cmp	r5, #0
 8010d94:	dd1a      	ble.n	8010dcc <_vfiprintf_r+0x4ec>
 8010d96:	4ba9      	ldr	r3, [pc, #676]	@ (801103c <_vfiprintf_r+0x75c>)
 8010d98:	6033      	str	r3, [r6, #0]
 8010d9a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8010d9e:	2d10      	cmp	r5, #16
 8010da0:	f102 0201 	add.w	r2, r2, #1
 8010da4:	f106 0008 	add.w	r0, r6, #8
 8010da8:	f300 814e 	bgt.w	8011048 <_vfiprintf_r+0x768>
 8010dac:	6075      	str	r5, [r6, #4]
 8010dae:	2a07      	cmp	r2, #7
 8010db0:	4465      	add	r5, ip
 8010db2:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8010db6:	f340 815a 	ble.w	801106e <_vfiprintf_r+0x78e>
 8010dba:	9800      	ldr	r0, [sp, #0]
 8010dbc:	aa0e      	add	r2, sp, #56	@ 0x38
 8010dbe:	4639      	mov	r1, r7
 8010dc0:	f7ff fd5c 	bl	801087c <__sprint_r>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	f040 81b4 	bne.w	8011132 <_vfiprintf_r+0x852>
 8010dca:	ae11      	add	r6, sp, #68	@ 0x44
 8010dcc:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8010dd0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010dd4:	b161      	cbz	r1, 8010df0 <_vfiprintf_r+0x510>
 8010dd6:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8010dda:	3301      	adds	r3, #1
 8010ddc:	6031      	str	r1, [r6, #0]
 8010dde:	2101      	movs	r1, #1
 8010de0:	440a      	add	r2, r1
 8010de2:	2b07      	cmp	r3, #7
 8010de4:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010de8:	6071      	str	r1, [r6, #4]
 8010dea:	f300 8142 	bgt.w	8011072 <_vfiprintf_r+0x792>
 8010dee:	3608      	adds	r6, #8
 8010df0:	9908      	ldr	r1, [sp, #32]
 8010df2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010df6:	b159      	cbz	r1, 8010e10 <_vfiprintf_r+0x530>
 8010df8:	a90d      	add	r1, sp, #52	@ 0x34
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	6031      	str	r1, [r6, #0]
 8010dfe:	2102      	movs	r1, #2
 8010e00:	440a      	add	r2, r1
 8010e02:	2b07      	cmp	r3, #7
 8010e04:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010e08:	6071      	str	r1, [r6, #4]
 8010e0a:	f300 813b 	bgt.w	8011084 <_vfiprintf_r+0x7a4>
 8010e0e:	3608      	adds	r6, #8
 8010e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e12:	2b80      	cmp	r3, #128	@ 0x80
 8010e14:	d11f      	bne.n	8010e56 <_vfiprintf_r+0x576>
 8010e16:	9b02      	ldr	r3, [sp, #8]
 8010e18:	9a04      	ldr	r2, [sp, #16]
 8010e1a:	1a9d      	subs	r5, r3, r2
 8010e1c:	2d00      	cmp	r5, #0
 8010e1e:	dd1a      	ble.n	8010e56 <_vfiprintf_r+0x576>
 8010e20:	4b87      	ldr	r3, [pc, #540]	@ (8011040 <_vfiprintf_r+0x760>)
 8010e22:	6033      	str	r3, [r6, #0]
 8010e24:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8010e28:	2d10      	cmp	r5, #16
 8010e2a:	f102 0201 	add.w	r2, r2, #1
 8010e2e:	f106 0008 	add.w	r0, r6, #8
 8010e32:	f300 8130 	bgt.w	8011096 <_vfiprintf_r+0x7b6>
 8010e36:	6075      	str	r5, [r6, #4]
 8010e38:	2a07      	cmp	r2, #7
 8010e3a:	4465      	add	r5, ip
 8010e3c:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8010e40:	f340 813c 	ble.w	80110bc <_vfiprintf_r+0x7dc>
 8010e44:	9800      	ldr	r0, [sp, #0]
 8010e46:	aa0e      	add	r2, sp, #56	@ 0x38
 8010e48:	4639      	mov	r1, r7
 8010e4a:	f7ff fd17 	bl	801087c <__sprint_r>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	f040 816f 	bne.w	8011132 <_vfiprintf_r+0x852>
 8010e54:	ae11      	add	r6, sp, #68	@ 0x44
 8010e56:	9b01      	ldr	r3, [sp, #4]
 8010e58:	1ae4      	subs	r4, r4, r3
 8010e5a:	2c00      	cmp	r4, #0
 8010e5c:	dd1a      	ble.n	8010e94 <_vfiprintf_r+0x5b4>
 8010e5e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010e62:	4877      	ldr	r0, [pc, #476]	@ (8011040 <_vfiprintf_r+0x760>)
 8010e64:	6030      	str	r0, [r6, #0]
 8010e66:	2c10      	cmp	r4, #16
 8010e68:	f103 0301 	add.w	r3, r3, #1
 8010e6c:	f106 0108 	add.w	r1, r6, #8
 8010e70:	f300 8126 	bgt.w	80110c0 <_vfiprintf_r+0x7e0>
 8010e74:	6074      	str	r4, [r6, #4]
 8010e76:	2b07      	cmp	r3, #7
 8010e78:	4414      	add	r4, r2
 8010e7a:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8010e7e:	f340 8130 	ble.w	80110e2 <_vfiprintf_r+0x802>
 8010e82:	9800      	ldr	r0, [sp, #0]
 8010e84:	aa0e      	add	r2, sp, #56	@ 0x38
 8010e86:	4639      	mov	r1, r7
 8010e88:	f7ff fcf8 	bl	801087c <__sprint_r>
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	f040 8150 	bne.w	8011132 <_vfiprintf_r+0x852>
 8010e92:	ae11      	add	r6, sp, #68	@ 0x44
 8010e94:	9b01      	ldr	r3, [sp, #4]
 8010e96:	9a01      	ldr	r2, [sp, #4]
 8010e98:	6073      	str	r3, [r6, #4]
 8010e9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e9c:	f8c6 9000 	str.w	r9, [r6]
 8010ea0:	4413      	add	r3, r2
 8010ea2:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	2b07      	cmp	r3, #7
 8010eaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010eac:	f300 811b 	bgt.w	80110e6 <_vfiprintf_r+0x806>
 8010eb0:	f106 0308 	add.w	r3, r6, #8
 8010eb4:	f01a 0f04 	tst.w	sl, #4
 8010eb8:	f040 811d 	bne.w	80110f6 <_vfiprintf_r+0x816>
 8010ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ec0:	9904      	ldr	r1, [sp, #16]
 8010ec2:	428a      	cmp	r2, r1
 8010ec4:	bfac      	ite	ge
 8010ec6:	189b      	addge	r3, r3, r2
 8010ec8:	185b      	addlt	r3, r3, r1
 8010eca:	9303      	str	r3, [sp, #12]
 8010ecc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ece:	b13b      	cbz	r3, 8010ee0 <_vfiprintf_r+0x600>
 8010ed0:	9800      	ldr	r0, [sp, #0]
 8010ed2:	aa0e      	add	r2, sp, #56	@ 0x38
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	f7ff fcd1 	bl	801087c <__sprint_r>
 8010eda:	2800      	cmp	r0, #0
 8010edc:	f040 8129 	bne.w	8011132 <_vfiprintf_r+0x852>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ee4:	4645      	mov	r5, r8
 8010ee6:	ae11      	add	r6, sp, #68	@ 0x44
 8010ee8:	e55b      	b.n	80109a2 <_vfiprintf_r+0xc2>
 8010eea:	4648      	mov	r0, r9
 8010eec:	f7ef fa48 	bl	8000380 <strlen>
 8010ef0:	9001      	str	r0, [sp, #4]
 8010ef2:	e734      	b.n	8010d5e <_vfiprintf_r+0x47e>
 8010ef4:	f04a 0a10 	orr.w	sl, sl, #16
 8010ef8:	f01a 0320 	ands.w	r3, sl, #32
 8010efc:	d008      	beq.n	8010f10 <_vfiprintf_r+0x630>
 8010efe:	3507      	adds	r5, #7
 8010f00:	f025 0507 	bic.w	r5, r5, #7
 8010f04:	46a8      	mov	r8, r5
 8010f06:	686d      	ldr	r5, [r5, #4]
 8010f08:	f858 4b08 	ldr.w	r4, [r8], #8
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e6d8      	b.n	8010cc2 <_vfiprintf_r+0x3e2>
 8010f10:	46a8      	mov	r8, r5
 8010f12:	f01a 0510 	ands.w	r5, sl, #16
 8010f16:	f858 4b04 	ldr.w	r4, [r8], #4
 8010f1a:	d001      	beq.n	8010f20 <_vfiprintf_r+0x640>
 8010f1c:	461d      	mov	r5, r3
 8010f1e:	e7f5      	b.n	8010f0c <_vfiprintf_r+0x62c>
 8010f20:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8010f24:	d001      	beq.n	8010f2a <_vfiprintf_r+0x64a>
 8010f26:	b2a4      	uxth	r4, r4
 8010f28:	e7f0      	b.n	8010f0c <_vfiprintf_r+0x62c>
 8010f2a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010f2e:	d0ed      	beq.n	8010f0c <_vfiprintf_r+0x62c>
 8010f30:	b2e4      	uxtb	r4, r4
 8010f32:	e7f3      	b.n	8010f1c <_vfiprintf_r+0x63c>
 8010f34:	4a43      	ldr	r2, [pc, #268]	@ (8011044 <_vfiprintf_r+0x764>)
 8010f36:	e5c9      	b.n	8010acc <_vfiprintf_r+0x1ec>
 8010f38:	46a8      	mov	r8, r5
 8010f3a:	f01a 0510 	ands.w	r5, sl, #16
 8010f3e:	f858 4b04 	ldr.w	r4, [r8], #4
 8010f42:	d001      	beq.n	8010f48 <_vfiprintf_r+0x668>
 8010f44:	4615      	mov	r5, r2
 8010f46:	e5cd      	b.n	8010ae4 <_vfiprintf_r+0x204>
 8010f48:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8010f4c:	d001      	beq.n	8010f52 <_vfiprintf_r+0x672>
 8010f4e:	b2a4      	uxth	r4, r4
 8010f50:	e5c8      	b.n	8010ae4 <_vfiprintf_r+0x204>
 8010f52:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010f56:	f43f adc5 	beq.w	8010ae4 <_vfiprintf_r+0x204>
 8010f5a:	b2e4      	uxtb	r4, r4
 8010f5c:	e7f2      	b.n	8010f44 <_vfiprintf_r+0x664>
 8010f5e:	2c0a      	cmp	r4, #10
 8010f60:	f175 0300 	sbcs.w	r3, r5, #0
 8010f64:	d206      	bcs.n	8010f74 <_vfiprintf_r+0x694>
 8010f66:	3430      	adds	r4, #48	@ 0x30
 8010f68:	b2e4      	uxtb	r4, r4
 8010f6a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8010f6e:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8010f72:	e131      	b.n	80111d8 <_vfiprintf_r+0x8f8>
 8010f74:	ab3a      	add	r3, sp, #232	@ 0xe8
 8010f76:	9308      	str	r3, [sp, #32]
 8010f78:	9b04      	ldr	r3, [sp, #16]
 8010f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010f7e:	f04f 0a00 	mov.w	sl, #0
 8010f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f84:	220a      	movs	r2, #10
 8010f86:	2300      	movs	r3, #0
 8010f88:	4620      	mov	r0, r4
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	f7ef fa00 	bl	8000390 <__aeabi_uldivmod>
 8010f90:	460b      	mov	r3, r1
 8010f92:	9908      	ldr	r1, [sp, #32]
 8010f94:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010f96:	3230      	adds	r2, #48	@ 0x30
 8010f98:	f801 2c01 	strb.w	r2, [r1, #-1]
 8010f9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f9e:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8010fa2:	f10a 0a01 	add.w	sl, sl, #1
 8010fa6:	b1e2      	cbz	r2, 8010fe2 <_vfiprintf_r+0x702>
 8010fa8:	9a06      	ldr	r2, [sp, #24]
 8010faa:	7812      	ldrb	r2, [r2, #0]
 8010fac:	4552      	cmp	r2, sl
 8010fae:	d118      	bne.n	8010fe2 <_vfiprintf_r+0x702>
 8010fb0:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8010fb4:	d015      	beq.n	8010fe2 <_vfiprintf_r+0x702>
 8010fb6:	2c0a      	cmp	r4, #10
 8010fb8:	f175 0200 	sbcs.w	r2, r5, #0
 8010fbc:	d311      	bcc.n	8010fe2 <_vfiprintf_r+0x702>
 8010fbe:	9308      	str	r3, [sp, #32]
 8010fc0:	9b07      	ldr	r3, [sp, #28]
 8010fc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010fc4:	eba9 0903 	sub.w	r9, r9, r3
 8010fc8:	461a      	mov	r2, r3
 8010fca:	4648      	mov	r0, r9
 8010fcc:	f7fd ffcf 	bl	800ef6e <strncpy>
 8010fd0:	9b06      	ldr	r3, [sp, #24]
 8010fd2:	785a      	ldrb	r2, [r3, #1]
 8010fd4:	9b08      	ldr	r3, [sp, #32]
 8010fd6:	b172      	cbz	r2, 8010ff6 <_vfiprintf_r+0x716>
 8010fd8:	9a06      	ldr	r2, [sp, #24]
 8010fda:	3201      	adds	r2, #1
 8010fdc:	9206      	str	r2, [sp, #24]
 8010fde:	f04f 0a00 	mov.w	sl, #0
 8010fe2:	2c0a      	cmp	r4, #10
 8010fe4:	f175 0500 	sbcs.w	r5, r5, #0
 8010fe8:	f0c0 80f6 	bcc.w	80111d8 <_vfiprintf_r+0x8f8>
 8010fec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010fee:	f8cd 9020 	str.w	r9, [sp, #32]
 8010ff2:	461d      	mov	r5, r3
 8010ff4:	e7c6      	b.n	8010f84 <_vfiprintf_r+0x6a4>
 8010ff6:	4692      	mov	sl, r2
 8010ff8:	e7f3      	b.n	8010fe2 <_vfiprintf_r+0x702>
 8010ffa:	f004 030f 	and.w	r3, r4, #15
 8010ffe:	9a05      	ldr	r2, [sp, #20]
 8011000:	0924      	lsrs	r4, r4, #4
 8011002:	5cd3      	ldrb	r3, [r2, r3]
 8011004:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011008:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801100c:	092d      	lsrs	r5, r5, #4
 801100e:	ea54 0305 	orrs.w	r3, r4, r5
 8011012:	d1f2      	bne.n	8010ffa <_vfiprintf_r+0x71a>
 8011014:	e0e0      	b.n	80111d8 <_vfiprintf_r+0x8f8>
 8011016:	b923      	cbnz	r3, 8011022 <_vfiprintf_r+0x742>
 8011018:	f01a 0f01 	tst.w	sl, #1
 801101c:	d001      	beq.n	8011022 <_vfiprintf_r+0x742>
 801101e:	2430      	movs	r4, #48	@ 0x30
 8011020:	e7a3      	b.n	8010f6a <_vfiprintf_r+0x68a>
 8011022:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8011026:	e0d7      	b.n	80111d8 <_vfiprintf_r+0x8f8>
 8011028:	2b00      	cmp	r3, #0
 801102a:	f000 80a3 	beq.w	8011174 <_vfiprintf_r+0x894>
 801102e:	2400      	movs	r4, #0
 8011030:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8011034:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8011038:	46a8      	mov	r8, r5
 801103a:	e5e0      	b.n	8010bfe <_vfiprintf_r+0x31e>
 801103c:	080133bf 	.word	0x080133bf
 8011040:	080133af 	.word	0x080133af
 8011044:	08013065 	.word	0x08013065
 8011048:	2110      	movs	r1, #16
 801104a:	6071      	str	r1, [r6, #4]
 801104c:	2a07      	cmp	r2, #7
 801104e:	4461      	add	r1, ip
 8011050:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011054:	dd08      	ble.n	8011068 <_vfiprintf_r+0x788>
 8011056:	9800      	ldr	r0, [sp, #0]
 8011058:	aa0e      	add	r2, sp, #56	@ 0x38
 801105a:	4639      	mov	r1, r7
 801105c:	f7ff fc0e 	bl	801087c <__sprint_r>
 8011060:	2800      	cmp	r0, #0
 8011062:	d166      	bne.n	8011132 <_vfiprintf_r+0x852>
 8011064:	4b60      	ldr	r3, [pc, #384]	@ (80111e8 <_vfiprintf_r+0x908>)
 8011066:	a811      	add	r0, sp, #68	@ 0x44
 8011068:	3d10      	subs	r5, #16
 801106a:	4606      	mov	r6, r0
 801106c:	e694      	b.n	8010d98 <_vfiprintf_r+0x4b8>
 801106e:	4606      	mov	r6, r0
 8011070:	e6ac      	b.n	8010dcc <_vfiprintf_r+0x4ec>
 8011072:	9800      	ldr	r0, [sp, #0]
 8011074:	aa0e      	add	r2, sp, #56	@ 0x38
 8011076:	4639      	mov	r1, r7
 8011078:	f7ff fc00 	bl	801087c <__sprint_r>
 801107c:	2800      	cmp	r0, #0
 801107e:	d158      	bne.n	8011132 <_vfiprintf_r+0x852>
 8011080:	ae11      	add	r6, sp, #68	@ 0x44
 8011082:	e6b5      	b.n	8010df0 <_vfiprintf_r+0x510>
 8011084:	9800      	ldr	r0, [sp, #0]
 8011086:	aa0e      	add	r2, sp, #56	@ 0x38
 8011088:	4639      	mov	r1, r7
 801108a:	f7ff fbf7 	bl	801087c <__sprint_r>
 801108e:	2800      	cmp	r0, #0
 8011090:	d14f      	bne.n	8011132 <_vfiprintf_r+0x852>
 8011092:	ae11      	add	r6, sp, #68	@ 0x44
 8011094:	e6bc      	b.n	8010e10 <_vfiprintf_r+0x530>
 8011096:	2110      	movs	r1, #16
 8011098:	6071      	str	r1, [r6, #4]
 801109a:	2a07      	cmp	r2, #7
 801109c:	4461      	add	r1, ip
 801109e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80110a2:	dd08      	ble.n	80110b6 <_vfiprintf_r+0x7d6>
 80110a4:	9800      	ldr	r0, [sp, #0]
 80110a6:	aa0e      	add	r2, sp, #56	@ 0x38
 80110a8:	4639      	mov	r1, r7
 80110aa:	f7ff fbe7 	bl	801087c <__sprint_r>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d13f      	bne.n	8011132 <_vfiprintf_r+0x852>
 80110b2:	4b4e      	ldr	r3, [pc, #312]	@ (80111ec <_vfiprintf_r+0x90c>)
 80110b4:	a811      	add	r0, sp, #68	@ 0x44
 80110b6:	3d10      	subs	r5, #16
 80110b8:	4606      	mov	r6, r0
 80110ba:	e6b2      	b.n	8010e22 <_vfiprintf_r+0x542>
 80110bc:	4606      	mov	r6, r0
 80110be:	e6ca      	b.n	8010e56 <_vfiprintf_r+0x576>
 80110c0:	2010      	movs	r0, #16
 80110c2:	4402      	add	r2, r0
 80110c4:	2b07      	cmp	r3, #7
 80110c6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80110ca:	6070      	str	r0, [r6, #4]
 80110cc:	dd06      	ble.n	80110dc <_vfiprintf_r+0x7fc>
 80110ce:	9800      	ldr	r0, [sp, #0]
 80110d0:	aa0e      	add	r2, sp, #56	@ 0x38
 80110d2:	4639      	mov	r1, r7
 80110d4:	f7ff fbd2 	bl	801087c <__sprint_r>
 80110d8:	bb58      	cbnz	r0, 8011132 <_vfiprintf_r+0x852>
 80110da:	a911      	add	r1, sp, #68	@ 0x44
 80110dc:	3c10      	subs	r4, #16
 80110de:	460e      	mov	r6, r1
 80110e0:	e6bd      	b.n	8010e5e <_vfiprintf_r+0x57e>
 80110e2:	460e      	mov	r6, r1
 80110e4:	e6d6      	b.n	8010e94 <_vfiprintf_r+0x5b4>
 80110e6:	9800      	ldr	r0, [sp, #0]
 80110e8:	aa0e      	add	r2, sp, #56	@ 0x38
 80110ea:	4639      	mov	r1, r7
 80110ec:	f7ff fbc6 	bl	801087c <__sprint_r>
 80110f0:	b9f8      	cbnz	r0, 8011132 <_vfiprintf_r+0x852>
 80110f2:	ab11      	add	r3, sp, #68	@ 0x44
 80110f4:	e6de      	b.n	8010eb4 <_vfiprintf_r+0x5d4>
 80110f6:	9a02      	ldr	r2, [sp, #8]
 80110f8:	9904      	ldr	r1, [sp, #16]
 80110fa:	1a54      	subs	r4, r2, r1
 80110fc:	2c00      	cmp	r4, #0
 80110fe:	f77f aedd 	ble.w	8010ebc <_vfiprintf_r+0x5dc>
 8011102:	4d39      	ldr	r5, [pc, #228]	@ (80111e8 <_vfiprintf_r+0x908>)
 8011104:	2610      	movs	r6, #16
 8011106:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 801110a:	2c10      	cmp	r4, #16
 801110c:	f102 0201 	add.w	r2, r2, #1
 8011110:	601d      	str	r5, [r3, #0]
 8011112:	dc1d      	bgt.n	8011150 <_vfiprintf_r+0x870>
 8011114:	605c      	str	r4, [r3, #4]
 8011116:	2a07      	cmp	r2, #7
 8011118:	440c      	add	r4, r1
 801111a:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 801111e:	f77f aecd 	ble.w	8010ebc <_vfiprintf_r+0x5dc>
 8011122:	9800      	ldr	r0, [sp, #0]
 8011124:	aa0e      	add	r2, sp, #56	@ 0x38
 8011126:	4639      	mov	r1, r7
 8011128:	f7ff fba8 	bl	801087c <__sprint_r>
 801112c:	2800      	cmp	r0, #0
 801112e:	f43f aec5 	beq.w	8010ebc <_vfiprintf_r+0x5dc>
 8011132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011134:	07d9      	lsls	r1, r3, #31
 8011136:	d405      	bmi.n	8011144 <_vfiprintf_r+0x864>
 8011138:	89bb      	ldrh	r3, [r7, #12]
 801113a:	059a      	lsls	r2, r3, #22
 801113c:	d402      	bmi.n	8011144 <_vfiprintf_r+0x864>
 801113e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011140:	f7fc f913 	bl	800d36a <__retarget_lock_release_recursive>
 8011144:	89bb      	ldrh	r3, [r7, #12]
 8011146:	065b      	lsls	r3, r3, #25
 8011148:	f57f abfb 	bpl.w	8010942 <_vfiprintf_r+0x62>
 801114c:	f7ff bbf6 	b.w	801093c <_vfiprintf_r+0x5c>
 8011150:	3110      	adds	r1, #16
 8011152:	2a07      	cmp	r2, #7
 8011154:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011158:	605e      	str	r6, [r3, #4]
 801115a:	dc02      	bgt.n	8011162 <_vfiprintf_r+0x882>
 801115c:	3308      	adds	r3, #8
 801115e:	3c10      	subs	r4, #16
 8011160:	e7d1      	b.n	8011106 <_vfiprintf_r+0x826>
 8011162:	9800      	ldr	r0, [sp, #0]
 8011164:	aa0e      	add	r2, sp, #56	@ 0x38
 8011166:	4639      	mov	r1, r7
 8011168:	f7ff fb88 	bl	801087c <__sprint_r>
 801116c:	2800      	cmp	r0, #0
 801116e:	d1e0      	bne.n	8011132 <_vfiprintf_r+0x852>
 8011170:	ab11      	add	r3, sp, #68	@ 0x44
 8011172:	e7f4      	b.n	801115e <_vfiprintf_r+0x87e>
 8011174:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011176:	b913      	cbnz	r3, 801117e <_vfiprintf_r+0x89e>
 8011178:	2300      	movs	r3, #0
 801117a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801117c:	e7d9      	b.n	8011132 <_vfiprintf_r+0x852>
 801117e:	9800      	ldr	r0, [sp, #0]
 8011180:	aa0e      	add	r2, sp, #56	@ 0x38
 8011182:	4639      	mov	r1, r7
 8011184:	f7ff fb7a 	bl	801087c <__sprint_r>
 8011188:	2800      	cmp	r0, #0
 801118a:	d0f5      	beq.n	8011178 <_vfiprintf_r+0x898>
 801118c:	e7d1      	b.n	8011132 <_vfiprintf_r+0x852>
 801118e:	ea54 0205 	orrs.w	r2, r4, r5
 8011192:	f8cd a010 	str.w	sl, [sp, #16]
 8011196:	f43f ada6 	beq.w	8010ce6 <_vfiprintf_r+0x406>
 801119a:	2b01      	cmp	r3, #1
 801119c:	f43f aedf 	beq.w	8010f5e <_vfiprintf_r+0x67e>
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80111a6:	f43f af28 	beq.w	8010ffa <_vfiprintf_r+0x71a>
 80111aa:	f004 0307 	and.w	r3, r4, #7
 80111ae:	08e4      	lsrs	r4, r4, #3
 80111b0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80111b4:	08ed      	lsrs	r5, r5, #3
 80111b6:	3330      	adds	r3, #48	@ 0x30
 80111b8:	ea54 0105 	orrs.w	r1, r4, r5
 80111bc:	464a      	mov	r2, r9
 80111be:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80111c2:	d1f2      	bne.n	80111aa <_vfiprintf_r+0x8ca>
 80111c4:	9904      	ldr	r1, [sp, #16]
 80111c6:	07c8      	lsls	r0, r1, #31
 80111c8:	d506      	bpl.n	80111d8 <_vfiprintf_r+0x8f8>
 80111ca:	2b30      	cmp	r3, #48	@ 0x30
 80111cc:	d004      	beq.n	80111d8 <_vfiprintf_r+0x8f8>
 80111ce:	2330      	movs	r3, #48	@ 0x30
 80111d0:	f809 3c01 	strb.w	r3, [r9, #-1]
 80111d4:	f1a2 0902 	sub.w	r9, r2, #2
 80111d8:	ab3a      	add	r3, sp, #232	@ 0xe8
 80111da:	eba3 0309 	sub.w	r3, r3, r9
 80111de:	9c01      	ldr	r4, [sp, #4]
 80111e0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80111e4:	9301      	str	r3, [sp, #4]
 80111e6:	e5bb      	b.n	8010d60 <_vfiprintf_r+0x480>
 80111e8:	080133bf 	.word	0x080133bf
 80111ec:	080133af 	.word	0x080133af

080111f0 <__sbprintf>:
 80111f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111f2:	461f      	mov	r7, r3
 80111f4:	898b      	ldrh	r3, [r1, #12]
 80111f6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80111fa:	f023 0302 	bic.w	r3, r3, #2
 80111fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011202:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8011204:	9319      	str	r3, [sp, #100]	@ 0x64
 8011206:	89cb      	ldrh	r3, [r1, #14]
 8011208:	f8ad 300e 	strh.w	r3, [sp, #14]
 801120c:	69cb      	ldr	r3, [r1, #28]
 801120e:	9307      	str	r3, [sp, #28]
 8011210:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8011212:	9309      	str	r3, [sp, #36]	@ 0x24
 8011214:	ab1a      	add	r3, sp, #104	@ 0x68
 8011216:	9300      	str	r3, [sp, #0]
 8011218:	9304      	str	r3, [sp, #16]
 801121a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801121e:	4615      	mov	r5, r2
 8011220:	4606      	mov	r6, r0
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	9305      	str	r3, [sp, #20]
 8011226:	a816      	add	r0, sp, #88	@ 0x58
 8011228:	2300      	movs	r3, #0
 801122a:	460c      	mov	r4, r1
 801122c:	9306      	str	r3, [sp, #24]
 801122e:	f7fc f899 	bl	800d364 <__retarget_lock_init_recursive>
 8011232:	462a      	mov	r2, r5
 8011234:	463b      	mov	r3, r7
 8011236:	4669      	mov	r1, sp
 8011238:	4630      	mov	r0, r6
 801123a:	f7ff fb51 	bl	80108e0 <_vfiprintf_r>
 801123e:	1e05      	subs	r5, r0, #0
 8011240:	db07      	blt.n	8011252 <__sbprintf+0x62>
 8011242:	4669      	mov	r1, sp
 8011244:	4630      	mov	r0, r6
 8011246:	f7fd fe6d 	bl	800ef24 <_fflush_r>
 801124a:	2800      	cmp	r0, #0
 801124c:	bf18      	it	ne
 801124e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8011252:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011256:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8011258:	065b      	lsls	r3, r3, #25
 801125a:	bf42      	ittt	mi
 801125c:	89a3      	ldrhmi	r3, [r4, #12]
 801125e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8011262:	81a3      	strhmi	r3, [r4, #12]
 8011264:	f7fc f87f 	bl	800d366 <__retarget_lock_close_recursive>
 8011268:	4628      	mov	r0, r5
 801126a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801126e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011270 <__sfvwrite_r>:
 8011270:	6893      	ldr	r3, [r2, #8]
 8011272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011276:	4606      	mov	r6, r0
 8011278:	460c      	mov	r4, r1
 801127a:	4691      	mov	r9, r2
 801127c:	b91b      	cbnz	r3, 8011286 <__sfvwrite_r+0x16>
 801127e:	2000      	movs	r0, #0
 8011280:	b003      	add	sp, #12
 8011282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011286:	898b      	ldrh	r3, [r1, #12]
 8011288:	0718      	lsls	r0, r3, #28
 801128a:	d550      	bpl.n	801132e <__sfvwrite_r+0xbe>
 801128c:	690b      	ldr	r3, [r1, #16]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d04d      	beq.n	801132e <__sfvwrite_r+0xbe>
 8011292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011296:	f8d9 8000 	ldr.w	r8, [r9]
 801129a:	f013 0702 	ands.w	r7, r3, #2
 801129e:	d16b      	bne.n	8011378 <__sfvwrite_r+0x108>
 80112a0:	f013 0301 	ands.w	r3, r3, #1
 80112a4:	f000 809c 	beq.w	80113e0 <__sfvwrite_r+0x170>
 80112a8:	4638      	mov	r0, r7
 80112aa:	46ba      	mov	sl, r7
 80112ac:	46bb      	mov	fp, r7
 80112ae:	f1bb 0f00 	cmp.w	fp, #0
 80112b2:	f000 8103 	beq.w	80114bc <__sfvwrite_r+0x24c>
 80112b6:	b950      	cbnz	r0, 80112ce <__sfvwrite_r+0x5e>
 80112b8:	465a      	mov	r2, fp
 80112ba:	210a      	movs	r1, #10
 80112bc:	4650      	mov	r0, sl
 80112be:	f7ef f80f 	bl	80002e0 <memchr>
 80112c2:	2800      	cmp	r0, #0
 80112c4:	f000 8100 	beq.w	80114c8 <__sfvwrite_r+0x258>
 80112c8:	3001      	adds	r0, #1
 80112ca:	eba0 070a 	sub.w	r7, r0, sl
 80112ce:	6820      	ldr	r0, [r4, #0]
 80112d0:	6921      	ldr	r1, [r4, #16]
 80112d2:	68a5      	ldr	r5, [r4, #8]
 80112d4:	6963      	ldr	r3, [r4, #20]
 80112d6:	455f      	cmp	r7, fp
 80112d8:	463a      	mov	r2, r7
 80112da:	bf28      	it	cs
 80112dc:	465a      	movcs	r2, fp
 80112de:	4288      	cmp	r0, r1
 80112e0:	f240 80f5 	bls.w	80114ce <__sfvwrite_r+0x25e>
 80112e4:	441d      	add	r5, r3
 80112e6:	42aa      	cmp	r2, r5
 80112e8:	f340 80f1 	ble.w	80114ce <__sfvwrite_r+0x25e>
 80112ec:	4651      	mov	r1, sl
 80112ee:	462a      	mov	r2, r5
 80112f0:	f7ff f875 	bl	80103de <memmove>
 80112f4:	6823      	ldr	r3, [r4, #0]
 80112f6:	442b      	add	r3, r5
 80112f8:	6023      	str	r3, [r4, #0]
 80112fa:	4621      	mov	r1, r4
 80112fc:	4630      	mov	r0, r6
 80112fe:	f7fd fe11 	bl	800ef24 <_fflush_r>
 8011302:	2800      	cmp	r0, #0
 8011304:	d167      	bne.n	80113d6 <__sfvwrite_r+0x166>
 8011306:	1b7f      	subs	r7, r7, r5
 8011308:	f040 80f9 	bne.w	80114fe <__sfvwrite_r+0x28e>
 801130c:	4621      	mov	r1, r4
 801130e:	4630      	mov	r0, r6
 8011310:	f7fd fe08 	bl	800ef24 <_fflush_r>
 8011314:	2800      	cmp	r0, #0
 8011316:	d15e      	bne.n	80113d6 <__sfvwrite_r+0x166>
 8011318:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801131c:	1b5b      	subs	r3, r3, r5
 801131e:	44aa      	add	sl, r5
 8011320:	ebab 0b05 	sub.w	fp, fp, r5
 8011324:	f8c9 3008 	str.w	r3, [r9, #8]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d1c0      	bne.n	80112ae <__sfvwrite_r+0x3e>
 801132c:	e7a7      	b.n	801127e <__sfvwrite_r+0xe>
 801132e:	4621      	mov	r1, r4
 8011330:	4630      	mov	r0, r6
 8011332:	f000 f8e9 	bl	8011508 <__swsetup_r>
 8011336:	2800      	cmp	r0, #0
 8011338:	d0ab      	beq.n	8011292 <__sfvwrite_r+0x22>
 801133a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801133e:	e79f      	b.n	8011280 <__sfvwrite_r+0x10>
 8011340:	e9d8 a500 	ldrd	sl, r5, [r8]
 8011344:	f108 0808 	add.w	r8, r8, #8
 8011348:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801134c:	69e1      	ldr	r1, [r4, #28]
 801134e:	2d00      	cmp	r5, #0
 8011350:	d0f6      	beq.n	8011340 <__sfvwrite_r+0xd0>
 8011352:	42bd      	cmp	r5, r7
 8011354:	462b      	mov	r3, r5
 8011356:	4652      	mov	r2, sl
 8011358:	bf28      	it	cs
 801135a:	463b      	movcs	r3, r7
 801135c:	4630      	mov	r0, r6
 801135e:	47d8      	blx	fp
 8011360:	2800      	cmp	r0, #0
 8011362:	dd38      	ble.n	80113d6 <__sfvwrite_r+0x166>
 8011364:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011368:	1a1b      	subs	r3, r3, r0
 801136a:	4482      	add	sl, r0
 801136c:	1a2d      	subs	r5, r5, r0
 801136e:	f8c9 3008 	str.w	r3, [r9, #8]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d1e8      	bne.n	8011348 <__sfvwrite_r+0xd8>
 8011376:	e782      	b.n	801127e <__sfvwrite_r+0xe>
 8011378:	f04f 0a00 	mov.w	sl, #0
 801137c:	4f61      	ldr	r7, [pc, #388]	@ (8011504 <__sfvwrite_r+0x294>)
 801137e:	4655      	mov	r5, sl
 8011380:	e7e2      	b.n	8011348 <__sfvwrite_r+0xd8>
 8011382:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8011386:	f108 0808 	add.w	r8, r8, #8
 801138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801138e:	6820      	ldr	r0, [r4, #0]
 8011390:	68a2      	ldr	r2, [r4, #8]
 8011392:	f1ba 0f00 	cmp.w	sl, #0
 8011396:	d0f4      	beq.n	8011382 <__sfvwrite_r+0x112>
 8011398:	0599      	lsls	r1, r3, #22
 801139a:	d563      	bpl.n	8011464 <__sfvwrite_r+0x1f4>
 801139c:	4552      	cmp	r2, sl
 801139e:	d836      	bhi.n	801140e <__sfvwrite_r+0x19e>
 80113a0:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80113a4:	d033      	beq.n	801140e <__sfvwrite_r+0x19e>
 80113a6:	6921      	ldr	r1, [r4, #16]
 80113a8:	6965      	ldr	r5, [r4, #20]
 80113aa:	eba0 0b01 	sub.w	fp, r0, r1
 80113ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113b6:	f10b 0201 	add.w	r2, fp, #1
 80113ba:	106d      	asrs	r5, r5, #1
 80113bc:	4452      	add	r2, sl
 80113be:	4295      	cmp	r5, r2
 80113c0:	bf38      	it	cc
 80113c2:	4615      	movcc	r5, r2
 80113c4:	055b      	lsls	r3, r3, #21
 80113c6:	d53d      	bpl.n	8011444 <__sfvwrite_r+0x1d4>
 80113c8:	4629      	mov	r1, r5
 80113ca:	4630      	mov	r0, r6
 80113cc:	f7fc f902 	bl	800d5d4 <_malloc_r>
 80113d0:	b948      	cbnz	r0, 80113e6 <__sfvwrite_r+0x176>
 80113d2:	230c      	movs	r3, #12
 80113d4:	6033      	str	r3, [r6, #0]
 80113d6:	89a3      	ldrh	r3, [r4, #12]
 80113d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113dc:	81a3      	strh	r3, [r4, #12]
 80113de:	e7ac      	b.n	801133a <__sfvwrite_r+0xca>
 80113e0:	461f      	mov	r7, r3
 80113e2:	469a      	mov	sl, r3
 80113e4:	e7d1      	b.n	801138a <__sfvwrite_r+0x11a>
 80113e6:	465a      	mov	r2, fp
 80113e8:	6921      	ldr	r1, [r4, #16]
 80113ea:	9001      	str	r0, [sp, #4]
 80113ec:	f7fb ffbe 	bl	800d36c <memcpy>
 80113f0:	89a2      	ldrh	r2, [r4, #12]
 80113f2:	9b01      	ldr	r3, [sp, #4]
 80113f4:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80113f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80113fc:	81a2      	strh	r2, [r4, #12]
 80113fe:	6123      	str	r3, [r4, #16]
 8011400:	6165      	str	r5, [r4, #20]
 8011402:	445b      	add	r3, fp
 8011404:	eba5 050b 	sub.w	r5, r5, fp
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	4652      	mov	r2, sl
 801140c:	60a5      	str	r5, [r4, #8]
 801140e:	4552      	cmp	r2, sl
 8011410:	bf28      	it	cs
 8011412:	4652      	movcs	r2, sl
 8011414:	6820      	ldr	r0, [r4, #0]
 8011416:	9201      	str	r2, [sp, #4]
 8011418:	4639      	mov	r1, r7
 801141a:	f7fe ffe0 	bl	80103de <memmove>
 801141e:	68a3      	ldr	r3, [r4, #8]
 8011420:	9a01      	ldr	r2, [sp, #4]
 8011422:	1a9b      	subs	r3, r3, r2
 8011424:	60a3      	str	r3, [r4, #8]
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	4413      	add	r3, r2
 801142a:	4655      	mov	r5, sl
 801142c:	6023      	str	r3, [r4, #0]
 801142e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011432:	1b5b      	subs	r3, r3, r5
 8011434:	442f      	add	r7, r5
 8011436:	ebaa 0a05 	sub.w	sl, sl, r5
 801143a:	f8c9 3008 	str.w	r3, [r9, #8]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d1a3      	bne.n	801138a <__sfvwrite_r+0x11a>
 8011442:	e71c      	b.n	801127e <__sfvwrite_r+0xe>
 8011444:	462a      	mov	r2, r5
 8011446:	4630      	mov	r0, r6
 8011448:	f7ff f850 	bl	80104ec <_realloc_r>
 801144c:	4603      	mov	r3, r0
 801144e:	2800      	cmp	r0, #0
 8011450:	d1d5      	bne.n	80113fe <__sfvwrite_r+0x18e>
 8011452:	6921      	ldr	r1, [r4, #16]
 8011454:	4630      	mov	r0, r6
 8011456:	f7fb fffd 	bl	800d454 <_free_r>
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011460:	81a3      	strh	r3, [r4, #12]
 8011462:	e7b6      	b.n	80113d2 <__sfvwrite_r+0x162>
 8011464:	6923      	ldr	r3, [r4, #16]
 8011466:	4283      	cmp	r3, r0
 8011468:	d302      	bcc.n	8011470 <__sfvwrite_r+0x200>
 801146a:	6961      	ldr	r1, [r4, #20]
 801146c:	4551      	cmp	r1, sl
 801146e:	d915      	bls.n	801149c <__sfvwrite_r+0x22c>
 8011470:	4552      	cmp	r2, sl
 8011472:	bf28      	it	cs
 8011474:	4652      	movcs	r2, sl
 8011476:	4639      	mov	r1, r7
 8011478:	4615      	mov	r5, r2
 801147a:	f7fe ffb0 	bl	80103de <memmove>
 801147e:	68a3      	ldr	r3, [r4, #8]
 8011480:	6822      	ldr	r2, [r4, #0]
 8011482:	1b5b      	subs	r3, r3, r5
 8011484:	442a      	add	r2, r5
 8011486:	60a3      	str	r3, [r4, #8]
 8011488:	6022      	str	r2, [r4, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1cf      	bne.n	801142e <__sfvwrite_r+0x1be>
 801148e:	4621      	mov	r1, r4
 8011490:	4630      	mov	r0, r6
 8011492:	f7fd fd47 	bl	800ef24 <_fflush_r>
 8011496:	2800      	cmp	r0, #0
 8011498:	d0c9      	beq.n	801142e <__sfvwrite_r+0x1be>
 801149a:	e79c      	b.n	80113d6 <__sfvwrite_r+0x166>
 801149c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80114a0:	4553      	cmp	r3, sl
 80114a2:	bf28      	it	cs
 80114a4:	4653      	movcs	r3, sl
 80114a6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80114a8:	fb93 f3f1 	sdiv	r3, r3, r1
 80114ac:	463a      	mov	r2, r7
 80114ae:	434b      	muls	r3, r1
 80114b0:	4630      	mov	r0, r6
 80114b2:	69e1      	ldr	r1, [r4, #28]
 80114b4:	47a8      	blx	r5
 80114b6:	1e05      	subs	r5, r0, #0
 80114b8:	dcb9      	bgt.n	801142e <__sfvwrite_r+0x1be>
 80114ba:	e78c      	b.n	80113d6 <__sfvwrite_r+0x166>
 80114bc:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80114c0:	2000      	movs	r0, #0
 80114c2:	f108 0808 	add.w	r8, r8, #8
 80114c6:	e6f2      	b.n	80112ae <__sfvwrite_r+0x3e>
 80114c8:	f10b 0701 	add.w	r7, fp, #1
 80114cc:	e6ff      	b.n	80112ce <__sfvwrite_r+0x5e>
 80114ce:	4293      	cmp	r3, r2
 80114d0:	dc08      	bgt.n	80114e4 <__sfvwrite_r+0x274>
 80114d2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80114d4:	69e1      	ldr	r1, [r4, #28]
 80114d6:	4652      	mov	r2, sl
 80114d8:	4630      	mov	r0, r6
 80114da:	47a8      	blx	r5
 80114dc:	1e05      	subs	r5, r0, #0
 80114de:	f73f af12 	bgt.w	8011306 <__sfvwrite_r+0x96>
 80114e2:	e778      	b.n	80113d6 <__sfvwrite_r+0x166>
 80114e4:	4651      	mov	r1, sl
 80114e6:	9201      	str	r2, [sp, #4]
 80114e8:	f7fe ff79 	bl	80103de <memmove>
 80114ec:	9a01      	ldr	r2, [sp, #4]
 80114ee:	68a3      	ldr	r3, [r4, #8]
 80114f0:	1a9b      	subs	r3, r3, r2
 80114f2:	60a3      	str	r3, [r4, #8]
 80114f4:	6823      	ldr	r3, [r4, #0]
 80114f6:	4413      	add	r3, r2
 80114f8:	6023      	str	r3, [r4, #0]
 80114fa:	4615      	mov	r5, r2
 80114fc:	e703      	b.n	8011306 <__sfvwrite_r+0x96>
 80114fe:	2001      	movs	r0, #1
 8011500:	e70a      	b.n	8011318 <__sfvwrite_r+0xa8>
 8011502:	bf00      	nop
 8011504:	7ffffc00 	.word	0x7ffffc00

08011508 <__swsetup_r>:
 8011508:	b538      	push	{r3, r4, r5, lr}
 801150a:	4b29      	ldr	r3, [pc, #164]	@ (80115b0 <__swsetup_r+0xa8>)
 801150c:	4605      	mov	r5, r0
 801150e:	6818      	ldr	r0, [r3, #0]
 8011510:	460c      	mov	r4, r1
 8011512:	b118      	cbz	r0, 801151c <__swsetup_r+0x14>
 8011514:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011516:	b90b      	cbnz	r3, 801151c <__swsetup_r+0x14>
 8011518:	f7fb fe12 	bl	800d140 <__sinit>
 801151c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011520:	0719      	lsls	r1, r3, #28
 8011522:	d422      	bmi.n	801156a <__swsetup_r+0x62>
 8011524:	06da      	lsls	r2, r3, #27
 8011526:	d407      	bmi.n	8011538 <__swsetup_r+0x30>
 8011528:	2209      	movs	r2, #9
 801152a:	602a      	str	r2, [r5, #0]
 801152c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011530:	81a3      	strh	r3, [r4, #12]
 8011532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011536:	e033      	b.n	80115a0 <__swsetup_r+0x98>
 8011538:	0758      	lsls	r0, r3, #29
 801153a:	d512      	bpl.n	8011562 <__swsetup_r+0x5a>
 801153c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801153e:	b141      	cbz	r1, 8011552 <__swsetup_r+0x4a>
 8011540:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011544:	4299      	cmp	r1, r3
 8011546:	d002      	beq.n	801154e <__swsetup_r+0x46>
 8011548:	4628      	mov	r0, r5
 801154a:	f7fb ff83 	bl	800d454 <_free_r>
 801154e:	2300      	movs	r3, #0
 8011550:	6323      	str	r3, [r4, #48]	@ 0x30
 8011552:	89a3      	ldrh	r3, [r4, #12]
 8011554:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011558:	81a3      	strh	r3, [r4, #12]
 801155a:	2300      	movs	r3, #0
 801155c:	6063      	str	r3, [r4, #4]
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	6023      	str	r3, [r4, #0]
 8011562:	89a3      	ldrh	r3, [r4, #12]
 8011564:	f043 0308 	orr.w	r3, r3, #8
 8011568:	81a3      	strh	r3, [r4, #12]
 801156a:	6923      	ldr	r3, [r4, #16]
 801156c:	b94b      	cbnz	r3, 8011582 <__swsetup_r+0x7a>
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011578:	d003      	beq.n	8011582 <__swsetup_r+0x7a>
 801157a:	4621      	mov	r1, r4
 801157c:	4628      	mov	r0, r5
 801157e:	f000 f8c9 	bl	8011714 <__smakebuf_r>
 8011582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011586:	f013 0201 	ands.w	r2, r3, #1
 801158a:	d00a      	beq.n	80115a2 <__swsetup_r+0x9a>
 801158c:	2200      	movs	r2, #0
 801158e:	60a2      	str	r2, [r4, #8]
 8011590:	6962      	ldr	r2, [r4, #20]
 8011592:	4252      	negs	r2, r2
 8011594:	61a2      	str	r2, [r4, #24]
 8011596:	6922      	ldr	r2, [r4, #16]
 8011598:	b942      	cbnz	r2, 80115ac <__swsetup_r+0xa4>
 801159a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801159e:	d1c5      	bne.n	801152c <__swsetup_r+0x24>
 80115a0:	bd38      	pop	{r3, r4, r5, pc}
 80115a2:	0799      	lsls	r1, r3, #30
 80115a4:	bf58      	it	pl
 80115a6:	6962      	ldrpl	r2, [r4, #20]
 80115a8:	60a2      	str	r2, [r4, #8]
 80115aa:	e7f4      	b.n	8011596 <__swsetup_r+0x8e>
 80115ac:	2000      	movs	r0, #0
 80115ae:	e7f7      	b.n	80115a0 <__swsetup_r+0x98>
 80115b0:	24000034 	.word	0x24000034

080115b4 <__fputwc>:
 80115b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115b8:	4680      	mov	r8, r0
 80115ba:	460f      	mov	r7, r1
 80115bc:	4614      	mov	r4, r2
 80115be:	f7fe ff29 	bl	8010414 <__locale_mb_cur_max>
 80115c2:	2801      	cmp	r0, #1
 80115c4:	4605      	mov	r5, r0
 80115c6:	d11b      	bne.n	8011600 <__fputwc+0x4c>
 80115c8:	1e7b      	subs	r3, r7, #1
 80115ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80115cc:	d818      	bhi.n	8011600 <__fputwc+0x4c>
 80115ce:	f88d 7004 	strb.w	r7, [sp, #4]
 80115d2:	2600      	movs	r6, #0
 80115d4:	f10d 0904 	add.w	r9, sp, #4
 80115d8:	42ae      	cmp	r6, r5
 80115da:	d021      	beq.n	8011620 <__fputwc+0x6c>
 80115dc:	68a3      	ldr	r3, [r4, #8]
 80115de:	f816 1009 	ldrb.w	r1, [r6, r9]
 80115e2:	3b01      	subs	r3, #1
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	60a3      	str	r3, [r4, #8]
 80115e8:	da04      	bge.n	80115f4 <__fputwc+0x40>
 80115ea:	69a2      	ldr	r2, [r4, #24]
 80115ec:	4293      	cmp	r3, r2
 80115ee:	db1b      	blt.n	8011628 <__fputwc+0x74>
 80115f0:	290a      	cmp	r1, #10
 80115f2:	d019      	beq.n	8011628 <__fputwc+0x74>
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	6022      	str	r2, [r4, #0]
 80115fa:	7019      	strb	r1, [r3, #0]
 80115fc:	3601      	adds	r6, #1
 80115fe:	e7eb      	b.n	80115d8 <__fputwc+0x24>
 8011600:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8011604:	463a      	mov	r2, r7
 8011606:	a901      	add	r1, sp, #4
 8011608:	4640      	mov	r0, r8
 801160a:	f000 f845 	bl	8011698 <_wcrtomb_r>
 801160e:	1c43      	adds	r3, r0, #1
 8011610:	4605      	mov	r5, r0
 8011612:	d1de      	bne.n	80115d2 <__fputwc+0x1e>
 8011614:	89a3      	ldrh	r3, [r4, #12]
 8011616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801161a:	81a3      	strh	r3, [r4, #12]
 801161c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011620:	4638      	mov	r0, r7
 8011622:	b003      	add	sp, #12
 8011624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011628:	4622      	mov	r2, r4
 801162a:	4640      	mov	r0, r8
 801162c:	f000 f8ae 	bl	801178c <__swbuf_r>
 8011630:	3001      	adds	r0, #1
 8011632:	d1e3      	bne.n	80115fc <__fputwc+0x48>
 8011634:	e7f2      	b.n	801161c <__fputwc+0x68>

08011636 <_fputwc_r>:
 8011636:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8011638:	07db      	lsls	r3, r3, #31
 801163a:	b570      	push	{r4, r5, r6, lr}
 801163c:	4605      	mov	r5, r0
 801163e:	460e      	mov	r6, r1
 8011640:	4614      	mov	r4, r2
 8011642:	d405      	bmi.n	8011650 <_fputwc_r+0x1a>
 8011644:	8993      	ldrh	r3, [r2, #12]
 8011646:	0598      	lsls	r0, r3, #22
 8011648:	d402      	bmi.n	8011650 <_fputwc_r+0x1a>
 801164a:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 801164c:	f7fb fe8c 	bl	800d368 <__retarget_lock_acquire_recursive>
 8011650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011654:	0499      	lsls	r1, r3, #18
 8011656:	d406      	bmi.n	8011666 <_fputwc_r+0x30>
 8011658:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801165c:	81a3      	strh	r3, [r4, #12]
 801165e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011660:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011664:	6663      	str	r3, [r4, #100]	@ 0x64
 8011666:	4622      	mov	r2, r4
 8011668:	4628      	mov	r0, r5
 801166a:	4631      	mov	r1, r6
 801166c:	f7ff ffa2 	bl	80115b4 <__fputwc>
 8011670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011672:	07da      	lsls	r2, r3, #31
 8011674:	4605      	mov	r5, r0
 8011676:	d405      	bmi.n	8011684 <_fputwc_r+0x4e>
 8011678:	89a3      	ldrh	r3, [r4, #12]
 801167a:	059b      	lsls	r3, r3, #22
 801167c:	d402      	bmi.n	8011684 <_fputwc_r+0x4e>
 801167e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011680:	f7fb fe73 	bl	800d36a <__retarget_lock_release_recursive>
 8011684:	4628      	mov	r0, r5
 8011686:	bd70      	pop	{r4, r5, r6, pc}

08011688 <abort>:
 8011688:	b508      	push	{r3, lr}
 801168a:	2006      	movs	r0, #6
 801168c:	f000 f8f0 	bl	8011870 <raise>
 8011690:	2001      	movs	r0, #1
 8011692:	f7f0 ff23 	bl	80024dc <_exit>
	...

08011698 <_wcrtomb_r>:
 8011698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801169a:	4c09      	ldr	r4, [pc, #36]	@ (80116c0 <_wcrtomb_r+0x28>)
 801169c:	b085      	sub	sp, #20
 801169e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 80116a2:	4605      	mov	r5, r0
 80116a4:	461e      	mov	r6, r3
 80116a6:	b909      	cbnz	r1, 80116ac <_wcrtomb_r+0x14>
 80116a8:	460a      	mov	r2, r1
 80116aa:	a901      	add	r1, sp, #4
 80116ac:	47b8      	blx	r7
 80116ae:	1c43      	adds	r3, r0, #1
 80116b0:	bf01      	itttt	eq
 80116b2:	2300      	moveq	r3, #0
 80116b4:	6033      	streq	r3, [r6, #0]
 80116b6:	238a      	moveq	r3, #138	@ 0x8a
 80116b8:	602b      	streq	r3, [r5, #0]
 80116ba:	b005      	add	sp, #20
 80116bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116be:	bf00      	nop
 80116c0:	2400056c 	.word	0x2400056c

080116c4 <__swhatbuf_r>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	460c      	mov	r4, r1
 80116c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116cc:	2900      	cmp	r1, #0
 80116ce:	b096      	sub	sp, #88	@ 0x58
 80116d0:	4615      	mov	r5, r2
 80116d2:	461e      	mov	r6, r3
 80116d4:	da07      	bge.n	80116e6 <__swhatbuf_r+0x22>
 80116d6:	89a1      	ldrh	r1, [r4, #12]
 80116d8:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80116dc:	d117      	bne.n	801170e <__swhatbuf_r+0x4a>
 80116de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80116e2:	4608      	mov	r0, r1
 80116e4:	e00f      	b.n	8011706 <__swhatbuf_r+0x42>
 80116e6:	466a      	mov	r2, sp
 80116e8:	f000 f8ca 	bl	8011880 <_fstat_r>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	dbf2      	blt.n	80116d6 <__swhatbuf_r+0x12>
 80116f0:	9901      	ldr	r1, [sp, #4]
 80116f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80116f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80116fa:	4259      	negs	r1, r3
 80116fc:	4159      	adcs	r1, r3
 80116fe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011706:	6031      	str	r1, [r6, #0]
 8011708:	602b      	str	r3, [r5, #0]
 801170a:	b016      	add	sp, #88	@ 0x58
 801170c:	bd70      	pop	{r4, r5, r6, pc}
 801170e:	2100      	movs	r1, #0
 8011710:	2340      	movs	r3, #64	@ 0x40
 8011712:	e7e6      	b.n	80116e2 <__swhatbuf_r+0x1e>

08011714 <__smakebuf_r>:
 8011714:	898b      	ldrh	r3, [r1, #12]
 8011716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011718:	079d      	lsls	r5, r3, #30
 801171a:	4606      	mov	r6, r0
 801171c:	460c      	mov	r4, r1
 801171e:	d507      	bpl.n	8011730 <__smakebuf_r+0x1c>
 8011720:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8011724:	6023      	str	r3, [r4, #0]
 8011726:	6123      	str	r3, [r4, #16]
 8011728:	2301      	movs	r3, #1
 801172a:	6163      	str	r3, [r4, #20]
 801172c:	b003      	add	sp, #12
 801172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011730:	ab01      	add	r3, sp, #4
 8011732:	466a      	mov	r2, sp
 8011734:	f7ff ffc6 	bl	80116c4 <__swhatbuf_r>
 8011738:	9f00      	ldr	r7, [sp, #0]
 801173a:	4605      	mov	r5, r0
 801173c:	4639      	mov	r1, r7
 801173e:	4630      	mov	r0, r6
 8011740:	f7fb ff48 	bl	800d5d4 <_malloc_r>
 8011744:	b948      	cbnz	r0, 801175a <__smakebuf_r+0x46>
 8011746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801174a:	059a      	lsls	r2, r3, #22
 801174c:	d4ee      	bmi.n	801172c <__smakebuf_r+0x18>
 801174e:	f023 0303 	bic.w	r3, r3, #3
 8011752:	f043 0302 	orr.w	r3, r3, #2
 8011756:	81a3      	strh	r3, [r4, #12]
 8011758:	e7e2      	b.n	8011720 <__smakebuf_r+0xc>
 801175a:	89a3      	ldrh	r3, [r4, #12]
 801175c:	6020      	str	r0, [r4, #0]
 801175e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011762:	81a3      	strh	r3, [r4, #12]
 8011764:	9b01      	ldr	r3, [sp, #4]
 8011766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801176a:	b15b      	cbz	r3, 8011784 <__smakebuf_r+0x70>
 801176c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011770:	4630      	mov	r0, r6
 8011772:	f000 f897 	bl	80118a4 <_isatty_r>
 8011776:	b128      	cbz	r0, 8011784 <__smakebuf_r+0x70>
 8011778:	89a3      	ldrh	r3, [r4, #12]
 801177a:	f023 0303 	bic.w	r3, r3, #3
 801177e:	f043 0301 	orr.w	r3, r3, #1
 8011782:	81a3      	strh	r3, [r4, #12]
 8011784:	89a3      	ldrh	r3, [r4, #12]
 8011786:	431d      	orrs	r5, r3
 8011788:	81a5      	strh	r5, [r4, #12]
 801178a:	e7cf      	b.n	801172c <__smakebuf_r+0x18>

0801178c <__swbuf_r>:
 801178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801178e:	460e      	mov	r6, r1
 8011790:	4614      	mov	r4, r2
 8011792:	4605      	mov	r5, r0
 8011794:	b118      	cbz	r0, 801179e <__swbuf_r+0x12>
 8011796:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011798:	b90b      	cbnz	r3, 801179e <__swbuf_r+0x12>
 801179a:	f7fb fcd1 	bl	800d140 <__sinit>
 801179e:	69a3      	ldr	r3, [r4, #24]
 80117a0:	60a3      	str	r3, [r4, #8]
 80117a2:	89a3      	ldrh	r3, [r4, #12]
 80117a4:	0719      	lsls	r1, r3, #28
 80117a6:	d501      	bpl.n	80117ac <__swbuf_r+0x20>
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	b943      	cbnz	r3, 80117be <__swbuf_r+0x32>
 80117ac:	4621      	mov	r1, r4
 80117ae:	4628      	mov	r0, r5
 80117b0:	f7ff feaa 	bl	8011508 <__swsetup_r>
 80117b4:	b118      	cbz	r0, 80117be <__swbuf_r+0x32>
 80117b6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80117ba:	4638      	mov	r0, r7
 80117bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117c2:	b2f6      	uxtb	r6, r6
 80117c4:	049a      	lsls	r2, r3, #18
 80117c6:	4637      	mov	r7, r6
 80117c8:	d406      	bmi.n	80117d8 <__swbuf_r+0x4c>
 80117ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80117ce:	81a3      	strh	r3, [r4, #12]
 80117d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80117d6:	6663      	str	r3, [r4, #100]	@ 0x64
 80117d8:	6823      	ldr	r3, [r4, #0]
 80117da:	6922      	ldr	r2, [r4, #16]
 80117dc:	1a98      	subs	r0, r3, r2
 80117de:	6963      	ldr	r3, [r4, #20]
 80117e0:	4283      	cmp	r3, r0
 80117e2:	dc05      	bgt.n	80117f0 <__swbuf_r+0x64>
 80117e4:	4621      	mov	r1, r4
 80117e6:	4628      	mov	r0, r5
 80117e8:	f7fd fb9c 	bl	800ef24 <_fflush_r>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d1e2      	bne.n	80117b6 <__swbuf_r+0x2a>
 80117f0:	68a3      	ldr	r3, [r4, #8]
 80117f2:	3b01      	subs	r3, #1
 80117f4:	60a3      	str	r3, [r4, #8]
 80117f6:	6823      	ldr	r3, [r4, #0]
 80117f8:	1c5a      	adds	r2, r3, #1
 80117fa:	6022      	str	r2, [r4, #0]
 80117fc:	701e      	strb	r6, [r3, #0]
 80117fe:	6962      	ldr	r2, [r4, #20]
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	429a      	cmp	r2, r3
 8011804:	d004      	beq.n	8011810 <__swbuf_r+0x84>
 8011806:	89a3      	ldrh	r3, [r4, #12]
 8011808:	07db      	lsls	r3, r3, #31
 801180a:	d5d6      	bpl.n	80117ba <__swbuf_r+0x2e>
 801180c:	2e0a      	cmp	r6, #10
 801180e:	d1d4      	bne.n	80117ba <__swbuf_r+0x2e>
 8011810:	4621      	mov	r1, r4
 8011812:	4628      	mov	r0, r5
 8011814:	f7fd fb86 	bl	800ef24 <_fflush_r>
 8011818:	2800      	cmp	r0, #0
 801181a:	d0ce      	beq.n	80117ba <__swbuf_r+0x2e>
 801181c:	e7cb      	b.n	80117b6 <__swbuf_r+0x2a>

0801181e <_raise_r>:
 801181e:	291f      	cmp	r1, #31
 8011820:	b538      	push	{r3, r4, r5, lr}
 8011822:	4605      	mov	r5, r0
 8011824:	460c      	mov	r4, r1
 8011826:	d904      	bls.n	8011832 <_raise_r+0x14>
 8011828:	2316      	movs	r3, #22
 801182a:	6003      	str	r3, [r0, #0]
 801182c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011830:	bd38      	pop	{r3, r4, r5, pc}
 8011832:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8011836:	b112      	cbz	r2, 801183e <_raise_r+0x20>
 8011838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801183c:	b94b      	cbnz	r3, 8011852 <_raise_r+0x34>
 801183e:	4628      	mov	r0, r5
 8011840:	f000 f852 	bl	80118e8 <_getpid_r>
 8011844:	4622      	mov	r2, r4
 8011846:	4601      	mov	r1, r0
 8011848:	4628      	mov	r0, r5
 801184a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801184e:	f000 b839 	b.w	80118c4 <_kill_r>
 8011852:	2b01      	cmp	r3, #1
 8011854:	d00a      	beq.n	801186c <_raise_r+0x4e>
 8011856:	1c59      	adds	r1, r3, #1
 8011858:	d103      	bne.n	8011862 <_raise_r+0x44>
 801185a:	2316      	movs	r3, #22
 801185c:	6003      	str	r3, [r0, #0]
 801185e:	2001      	movs	r0, #1
 8011860:	e7e6      	b.n	8011830 <_raise_r+0x12>
 8011862:	2100      	movs	r1, #0
 8011864:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011868:	4620      	mov	r0, r4
 801186a:	4798      	blx	r3
 801186c:	2000      	movs	r0, #0
 801186e:	e7df      	b.n	8011830 <_raise_r+0x12>

08011870 <raise>:
 8011870:	4b02      	ldr	r3, [pc, #8]	@ (801187c <raise+0xc>)
 8011872:	4601      	mov	r1, r0
 8011874:	6818      	ldr	r0, [r3, #0]
 8011876:	f7ff bfd2 	b.w	801181e <_raise_r>
 801187a:	bf00      	nop
 801187c:	24000034 	.word	0x24000034

08011880 <_fstat_r>:
 8011880:	b538      	push	{r3, r4, r5, lr}
 8011882:	4d07      	ldr	r5, [pc, #28]	@ (80118a0 <_fstat_r+0x20>)
 8011884:	2300      	movs	r3, #0
 8011886:	4604      	mov	r4, r0
 8011888:	4608      	mov	r0, r1
 801188a:	4611      	mov	r1, r2
 801188c:	602b      	str	r3, [r5, #0]
 801188e:	f7f0 fe75 	bl	800257c <_fstat>
 8011892:	1c43      	adds	r3, r0, #1
 8011894:	d102      	bne.n	801189c <_fstat_r+0x1c>
 8011896:	682b      	ldr	r3, [r5, #0]
 8011898:	b103      	cbz	r3, 801189c <_fstat_r+0x1c>
 801189a:	6023      	str	r3, [r4, #0]
 801189c:	bd38      	pop	{r3, r4, r5, pc}
 801189e:	bf00      	nop
 80118a0:	240251c8 	.word	0x240251c8

080118a4 <_isatty_r>:
 80118a4:	b538      	push	{r3, r4, r5, lr}
 80118a6:	4d06      	ldr	r5, [pc, #24]	@ (80118c0 <_isatty_r+0x1c>)
 80118a8:	2300      	movs	r3, #0
 80118aa:	4604      	mov	r4, r0
 80118ac:	4608      	mov	r0, r1
 80118ae:	602b      	str	r3, [r5, #0]
 80118b0:	f7f0 fe74 	bl	800259c <_isatty>
 80118b4:	1c43      	adds	r3, r0, #1
 80118b6:	d102      	bne.n	80118be <_isatty_r+0x1a>
 80118b8:	682b      	ldr	r3, [r5, #0]
 80118ba:	b103      	cbz	r3, 80118be <_isatty_r+0x1a>
 80118bc:	6023      	str	r3, [r4, #0]
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	240251c8 	.word	0x240251c8

080118c4 <_kill_r>:
 80118c4:	b538      	push	{r3, r4, r5, lr}
 80118c6:	4d07      	ldr	r5, [pc, #28]	@ (80118e4 <_kill_r+0x20>)
 80118c8:	2300      	movs	r3, #0
 80118ca:	4604      	mov	r4, r0
 80118cc:	4608      	mov	r0, r1
 80118ce:	4611      	mov	r1, r2
 80118d0:	602b      	str	r3, [r5, #0]
 80118d2:	f7f0 fdf3 	bl	80024bc <_kill>
 80118d6:	1c43      	adds	r3, r0, #1
 80118d8:	d102      	bne.n	80118e0 <_kill_r+0x1c>
 80118da:	682b      	ldr	r3, [r5, #0]
 80118dc:	b103      	cbz	r3, 80118e0 <_kill_r+0x1c>
 80118de:	6023      	str	r3, [r4, #0]
 80118e0:	bd38      	pop	{r3, r4, r5, pc}
 80118e2:	bf00      	nop
 80118e4:	240251c8 	.word	0x240251c8

080118e8 <_getpid_r>:
 80118e8:	f7f0 bde0 	b.w	80024ac <_getpid>
 80118ec:	0000      	movs	r0, r0
	...

080118f0 <sqrt>:
 80118f0:	b508      	push	{r3, lr}
 80118f2:	ed2d 8b04 	vpush	{d8-d9}
 80118f6:	eeb0 8b40 	vmov.f64	d8, d0
 80118fa:	f000 fc48 	bl	801218e <__ieee754_sqrt>
 80118fe:	eeb4 8b48 	vcmp.f64	d8, d8
 8011902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011906:	d60c      	bvs.n	8011922 <sqrt+0x32>
 8011908:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8011928 <sqrt+0x38>
 801190c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011914:	d505      	bpl.n	8011922 <sqrt+0x32>
 8011916:	f7fb fcfb 	bl	800d310 <__errno>
 801191a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801191e:	2321      	movs	r3, #33	@ 0x21
 8011920:	6003      	str	r3, [r0, #0]
 8011922:	ecbd 8b04 	vpop	{d8-d9}
 8011926:	bd08      	pop	{r3, pc}
	...

08011930 <cos>:
 8011930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011932:	eeb0 7b40 	vmov.f64	d7, d0
 8011936:	ee17 3a90 	vmov	r3, s15
 801193a:	4a21      	ldr	r2, [pc, #132]	@ (80119c0 <cos+0x90>)
 801193c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011940:	4293      	cmp	r3, r2
 8011942:	d806      	bhi.n	8011952 <cos+0x22>
 8011944:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80119b8 <cos+0x88>
 8011948:	b005      	add	sp, #20
 801194a:	f85d eb04 	ldr.w	lr, [sp], #4
 801194e:	f000 bc9b 	b.w	8012288 <__kernel_cos>
 8011952:	4a1c      	ldr	r2, [pc, #112]	@ (80119c4 <cos+0x94>)
 8011954:	4293      	cmp	r3, r2
 8011956:	d904      	bls.n	8011962 <cos+0x32>
 8011958:	ee30 0b40 	vsub.f64	d0, d0, d0
 801195c:	b005      	add	sp, #20
 801195e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011962:	4668      	mov	r0, sp
 8011964:	f000 fd50 	bl	8012408 <__ieee754_rem_pio2>
 8011968:	f000 0003 	and.w	r0, r0, #3
 801196c:	2801      	cmp	r0, #1
 801196e:	d009      	beq.n	8011984 <cos+0x54>
 8011970:	2802      	cmp	r0, #2
 8011972:	d010      	beq.n	8011996 <cos+0x66>
 8011974:	b9b0      	cbnz	r0, 80119a4 <cos+0x74>
 8011976:	ed9d 1b02 	vldr	d1, [sp, #8]
 801197a:	ed9d 0b00 	vldr	d0, [sp]
 801197e:	f000 fc83 	bl	8012288 <__kernel_cos>
 8011982:	e7eb      	b.n	801195c <cos+0x2c>
 8011984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011988:	ed9d 0b00 	vldr	d0, [sp]
 801198c:	f000 fce4 	bl	8012358 <__kernel_sin>
 8011990:	eeb1 0b40 	vneg.f64	d0, d0
 8011994:	e7e2      	b.n	801195c <cos+0x2c>
 8011996:	ed9d 1b02 	vldr	d1, [sp, #8]
 801199a:	ed9d 0b00 	vldr	d0, [sp]
 801199e:	f000 fc73 	bl	8012288 <__kernel_cos>
 80119a2:	e7f5      	b.n	8011990 <cos+0x60>
 80119a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80119a8:	ed9d 0b00 	vldr	d0, [sp]
 80119ac:	2001      	movs	r0, #1
 80119ae:	f000 fcd3 	bl	8012358 <__kernel_sin>
 80119b2:	e7d3      	b.n	801195c <cos+0x2c>
 80119b4:	f3af 8000 	nop.w
	...
 80119c0:	3fe921fb 	.word	0x3fe921fb
 80119c4:	7fefffff 	.word	0x7fefffff

080119c8 <sin>:
 80119c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119ca:	eeb0 7b40 	vmov.f64	d7, d0
 80119ce:	ee17 3a90 	vmov	r3, s15
 80119d2:	4a21      	ldr	r2, [pc, #132]	@ (8011a58 <sin+0x90>)
 80119d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119d8:	4293      	cmp	r3, r2
 80119da:	d807      	bhi.n	80119ec <sin+0x24>
 80119dc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8011a50 <sin+0x88>
 80119e0:	2000      	movs	r0, #0
 80119e2:	b005      	add	sp, #20
 80119e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80119e8:	f000 bcb6 	b.w	8012358 <__kernel_sin>
 80119ec:	4a1b      	ldr	r2, [pc, #108]	@ (8011a5c <sin+0x94>)
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d904      	bls.n	80119fc <sin+0x34>
 80119f2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80119f6:	b005      	add	sp, #20
 80119f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80119fc:	4668      	mov	r0, sp
 80119fe:	f000 fd03 	bl	8012408 <__ieee754_rem_pio2>
 8011a02:	f000 0003 	and.w	r0, r0, #3
 8011a06:	2801      	cmp	r0, #1
 8011a08:	d00a      	beq.n	8011a20 <sin+0x58>
 8011a0a:	2802      	cmp	r0, #2
 8011a0c:	d00f      	beq.n	8011a2e <sin+0x66>
 8011a0e:	b9c0      	cbnz	r0, 8011a42 <sin+0x7a>
 8011a10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a14:	ed9d 0b00 	vldr	d0, [sp]
 8011a18:	2001      	movs	r0, #1
 8011a1a:	f000 fc9d 	bl	8012358 <__kernel_sin>
 8011a1e:	e7ea      	b.n	80119f6 <sin+0x2e>
 8011a20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a24:	ed9d 0b00 	vldr	d0, [sp]
 8011a28:	f000 fc2e 	bl	8012288 <__kernel_cos>
 8011a2c:	e7e3      	b.n	80119f6 <sin+0x2e>
 8011a2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a32:	ed9d 0b00 	vldr	d0, [sp]
 8011a36:	2001      	movs	r0, #1
 8011a38:	f000 fc8e 	bl	8012358 <__kernel_sin>
 8011a3c:	eeb1 0b40 	vneg.f64	d0, d0
 8011a40:	e7d9      	b.n	80119f6 <sin+0x2e>
 8011a42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a46:	ed9d 0b00 	vldr	d0, [sp]
 8011a4a:	f000 fc1d 	bl	8012288 <__kernel_cos>
 8011a4e:	e7f5      	b.n	8011a3c <sin+0x74>
	...
 8011a58:	3fe921fb 	.word	0x3fe921fb
 8011a5c:	7fefffff 	.word	0x7fefffff

08011a60 <log>:
 8011a60:	b4f0      	push	{r4, r5, r6, r7}
 8011a62:	ee10 0a90 	vmov	r0, s1
 8011a66:	ee10 3a10 	vmov	r3, s0
 8011a6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011a6e:	429c      	cmp	r4, r3
 8011a70:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8011a74:	4c70      	ldr	r4, [pc, #448]	@ (8011c38 <log+0x1d8>)
 8011a76:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8011a7a:	418c      	sbcs	r4, r1
 8011a7c:	ed2d 8b02 	vpush	{d8}
 8011a80:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8011a84:	d35a      	bcc.n	8011b3c <log+0xdc>
 8011a86:	4a6d      	ldr	r2, [pc, #436]	@ (8011c3c <log+0x1dc>)
 8011a88:	4290      	cmp	r0, r2
 8011a8a:	bf08      	it	eq
 8011a8c:	2b00      	cmpeq	r3, #0
 8011a8e:	f000 80c4 	beq.w	8011c1a <log+0x1ba>
 8011a92:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8011a96:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011a9a:	4b69      	ldr	r3, [pc, #420]	@ (8011c40 <log+0x1e0>)
 8011a9c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8011aa0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8011aa4:	ee20 4b02 	vmul.f64	d4, d0, d2
 8011aa8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8011aac:	eea6 7b00 	vfma.f64	d7, d6, d0
 8011ab0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8011ab4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8011ab8:	eea6 7b02 	vfma.f64	d7, d6, d2
 8011abc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8011ac0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8011ac4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8011ac8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8011acc:	eea5 6b02 	vfma.f64	d6, d5, d2
 8011ad0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8011ad4:	eea3 5b00 	vfma.f64	d5, d3, d0
 8011ad8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8011adc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8011ae0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8011ae4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011ae8:	eea5 6b04 	vfma.f64	d6, d5, d4
 8011aec:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8011af0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011af4:	eeb0 2b47 	vmov.f64	d2, d7
 8011af8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8011c20 <log+0x1c0>
 8011afc:	eeb0 6b40 	vmov.f64	d6, d0
 8011b00:	eeb0 3b40 	vmov.f64	d3, d0
 8011b04:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011b08:	eea0 6b47 	vfms.f64	d6, d0, d7
 8011b0c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8011b10:	ee26 1b06 	vmul.f64	d1, d6, d6
 8011b14:	eea1 3b05 	vfma.f64	d3, d1, d5
 8011b18:	ee30 7b43 	vsub.f64	d7, d0, d3
 8011b1c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8011b20:	eea1 7b05 	vfma.f64	d7, d1, d5
 8011b24:	ee25 5b08 	vmul.f64	d5, d5, d8
 8011b28:	eea5 7b00 	vfma.f64	d7, d5, d0
 8011b2c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8011b30:	ee33 0b07 	vadd.f64	d0, d3, d7
 8011b34:	ecbd 8b02 	vpop	{d8}
 8011b38:	bcf0      	pop	{r4, r5, r6, r7}
 8011b3a:	4770      	bx	lr
 8011b3c:	f1a2 0410 	sub.w	r4, r2, #16
 8011b40:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8011b44:	428c      	cmp	r4, r1
 8011b46:	d923      	bls.n	8011b90 <log+0x130>
 8011b48:	18d9      	adds	r1, r3, r3
 8011b4a:	eb40 0400 	adc.w	r4, r0, r0
 8011b4e:	4321      	orrs	r1, r4
 8011b50:	d105      	bne.n	8011b5e <log+0xfe>
 8011b52:	ecbd 8b02 	vpop	{d8}
 8011b56:	2001      	movs	r0, #1
 8011b58:	bcf0      	pop	{r4, r5, r6, r7}
 8011b5a:	f000 be05 	b.w	8012768 <__math_divzero>
 8011b5e:	4939      	ldr	r1, [pc, #228]	@ (8011c44 <log+0x1e4>)
 8011b60:	4288      	cmp	r0, r1
 8011b62:	bf08      	it	eq
 8011b64:	2b00      	cmpeq	r3, #0
 8011b66:	d0e5      	beq.n	8011b34 <log+0xd4>
 8011b68:	0413      	lsls	r3, r2, #16
 8011b6a:	d403      	bmi.n	8011b74 <log+0x114>
 8011b6c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8011b70:	4393      	bics	r3, r2
 8011b72:	d104      	bne.n	8011b7e <log+0x11e>
 8011b74:	ecbd 8b02 	vpop	{d8}
 8011b78:	bcf0      	pop	{r4, r5, r6, r7}
 8011b7a:	f000 be0d 	b.w	8012798 <__math_invalid>
 8011b7e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011c28 <log+0x1c8>
 8011b82:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011b86:	ec53 2b17 	vmov	r2, r3, d7
 8011b8a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8011b8e:	4613      	mov	r3, r2
 8011b90:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8011b94:	492a      	ldr	r1, [pc, #168]	@ (8011c40 <log+0x1e0>)
 8011b96:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8011b9a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8011b9e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8011ba2:	0d15      	lsrs	r5, r2, #20
 8011ba4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8011ba8:	052d      	lsls	r5, r5, #20
 8011baa:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8011bae:	1e1e      	subs	r6, r3, #0
 8011bb0:	1b47      	subs	r7, r0, r5
 8011bb2:	ec47 6b16 	vmov	d6, r6, r7
 8011bb6:	1512      	asrs	r2, r2, #20
 8011bb8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011bbc:	ee07 2a90 	vmov	s15, r2
 8011bc0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8011bc4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8011bc8:	ed91 4b00 	vldr	d4, [r1]
 8011bcc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8011bd0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8011bd4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011bd8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8011bdc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8011be0:	ed91 7b02 	vldr	d7, [r1, #8]
 8011be4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8011be8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8011bec:	ed91 7b04 	vldr	d7, [r1, #16]
 8011bf0:	ed91 6b08 	vldr	d6, [r1, #32]
 8011bf4:	eea7 0b02 	vfma.f64	d0, d7, d2
 8011bf8:	ed91 7b06 	vldr	d7, [r1, #24]
 8011bfc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8011c00:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011c04:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8011c08:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011c0c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8011c10:	eea1 0b07 	vfma.f64	d0, d1, d7
 8011c14:	ee30 0b04 	vadd.f64	d0, d0, d4
 8011c18:	e78c      	b.n	8011b34 <log+0xd4>
 8011c1a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8011c30 <log+0x1d0>
 8011c1e:	e789      	b.n	8011b34 <log+0xd4>
 8011c20:	00000000 	.word	0x00000000
 8011c24:	41a00000 	.word	0x41a00000
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	43300000 	.word	0x43300000
	...
 8011c38:	000308ff 	.word	0x000308ff
 8011c3c:	3ff00000 	.word	0x3ff00000
 8011c40:	080133d0 	.word	0x080133d0
 8011c44:	7ff00000 	.word	0x7ff00000

08011c48 <checkint>:
 8011c48:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011c4c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8011c50:	429a      	cmp	r2, r3
 8011c52:	b570      	push	{r4, r5, r6, lr}
 8011c54:	dd2a      	ble.n	8011cac <checkint+0x64>
 8011c56:	f240 4333 	movw	r3, #1075	@ 0x433
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	dc24      	bgt.n	8011ca8 <checkint+0x60>
 8011c5e:	1a9b      	subs	r3, r3, r2
 8011c60:	f1a3 0620 	sub.w	r6, r3, #32
 8011c64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c68:	fa02 f403 	lsl.w	r4, r2, r3
 8011c6c:	fa02 f606 	lsl.w	r6, r2, r6
 8011c70:	f1c3 0520 	rsb	r5, r3, #32
 8011c74:	fa22 f505 	lsr.w	r5, r2, r5
 8011c78:	4334      	orrs	r4, r6
 8011c7a:	432c      	orrs	r4, r5
 8011c7c:	409a      	lsls	r2, r3
 8011c7e:	ea20 0202 	bic.w	r2, r0, r2
 8011c82:	ea21 0404 	bic.w	r4, r1, r4
 8011c86:	4322      	orrs	r2, r4
 8011c88:	f1a3 0420 	sub.w	r4, r3, #32
 8011c8c:	f1c3 0220 	rsb	r2, r3, #32
 8011c90:	d10c      	bne.n	8011cac <checkint+0x64>
 8011c92:	40d8      	lsrs	r0, r3
 8011c94:	fa01 f302 	lsl.w	r3, r1, r2
 8011c98:	4318      	orrs	r0, r3
 8011c9a:	40e1      	lsrs	r1, r4
 8011c9c:	4308      	orrs	r0, r1
 8011c9e:	f000 0001 	and.w	r0, r0, #1
 8011ca2:	f1d0 0002 	rsbs	r0, r0, #2
 8011ca6:	bd70      	pop	{r4, r5, r6, pc}
 8011ca8:	2002      	movs	r0, #2
 8011caa:	e7fc      	b.n	8011ca6 <checkint+0x5e>
 8011cac:	2000      	movs	r0, #0
 8011cae:	e7fa      	b.n	8011ca6 <checkint+0x5e>

08011cb0 <pow>:
 8011cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb4:	ee10 4a90 	vmov	r4, s1
 8011cb8:	ed2d 8b0a 	vpush	{d8-d12}
 8011cbc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8011cc0:	ee11 aa90 	vmov	sl, s3
 8011cc4:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011cc8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	ee10 5a10 	vmov	r5, s0
 8011cd2:	ee11 0a10 	vmov	r0, s2
 8011cd6:	b087      	sub	sp, #28
 8011cd8:	46c4      	mov	ip, r8
 8011cda:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8011cde:	d806      	bhi.n	8011cee <pow+0x3e>
 8011ce0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8011ce4:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8011ce8:	2b7f      	cmp	r3, #127	@ 0x7f
 8011cea:	f240 8157 	bls.w	8011f9c <pow+0x2ec>
 8011cee:	1802      	adds	r2, r0, r0
 8011cf0:	eb4a 010a 	adc.w	r1, sl, sl
 8011cf4:	f06f 0b01 	mvn.w	fp, #1
 8011cf8:	1e57      	subs	r7, r2, #1
 8011cfa:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8011cfe:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8011d02:	45bb      	cmp	fp, r7
 8011d04:	eb7e 0303 	sbcs.w	r3, lr, r3
 8011d08:	d242      	bcs.n	8011d90 <pow+0xe0>
 8011d0a:	ea52 0301 	orrs.w	r3, r2, r1
 8011d0e:	f04f 0300 	mov.w	r3, #0
 8011d12:	d10c      	bne.n	8011d2e <pow+0x7e>
 8011d14:	196d      	adds	r5, r5, r5
 8011d16:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8011d1a:	4164      	adcs	r4, r4
 8011d1c:	42ab      	cmp	r3, r5
 8011d1e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011d22:	41a3      	sbcs	r3, r4
 8011d24:	f0c0 808f 	bcc.w	8011e46 <pow+0x196>
 8011d28:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011d2c:	e02b      	b.n	8011d86 <pow+0xd6>
 8011d2e:	4ed4      	ldr	r6, [pc, #848]	@ (8012080 <pow+0x3d0>)
 8011d30:	42b4      	cmp	r4, r6
 8011d32:	bf08      	it	eq
 8011d34:	429d      	cmpeq	r5, r3
 8011d36:	d109      	bne.n	8011d4c <pow+0x9c>
 8011d38:	1800      	adds	r0, r0, r0
 8011d3a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8011d3e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8011d42:	4283      	cmp	r3, r0
 8011d44:	4bcf      	ldr	r3, [pc, #828]	@ (8012084 <pow+0x3d4>)
 8011d46:	eb73 030a 	sbcs.w	r3, r3, sl
 8011d4a:	e7eb      	b.n	8011d24 <pow+0x74>
 8011d4c:	196d      	adds	r5, r5, r5
 8011d4e:	48ce      	ldr	r0, [pc, #824]	@ (8012088 <pow+0x3d8>)
 8011d50:	4164      	adcs	r4, r4
 8011d52:	42ab      	cmp	r3, r5
 8011d54:	eb70 0604 	sbcs.w	r6, r0, r4
 8011d58:	d375      	bcc.n	8011e46 <pow+0x196>
 8011d5a:	4281      	cmp	r1, r0
 8011d5c:	bf08      	it	eq
 8011d5e:	429a      	cmpeq	r2, r3
 8011d60:	d171      	bne.n	8011e46 <pow+0x196>
 8011d62:	4aca      	ldr	r2, [pc, #808]	@ (801208c <pow+0x3dc>)
 8011d64:	4294      	cmp	r4, r2
 8011d66:	bf08      	it	eq
 8011d68:	429d      	cmpeq	r5, r3
 8011d6a:	d0dd      	beq.n	8011d28 <pow+0x78>
 8011d6c:	4294      	cmp	r4, r2
 8011d6e:	ea6f 0a0a 	mvn.w	sl, sl
 8011d72:	bf34      	ite	cc
 8011d74:	2400      	movcc	r4, #0
 8011d76:	2401      	movcs	r4, #1
 8011d78:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8011d7c:	4554      	cmp	r4, sl
 8011d7e:	f040 81dc 	bne.w	801213a <pow+0x48a>
 8011d82:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011d86:	b007      	add	sp, #28
 8011d88:	ecbd 8b0a 	vpop	{d8-d12}
 8011d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d90:	196f      	adds	r7, r5, r5
 8011d92:	eb44 0904 	adc.w	r9, r4, r4
 8011d96:	1e7a      	subs	r2, r7, #1
 8011d98:	f169 0300 	sbc.w	r3, r9, #0
 8011d9c:	4593      	cmp	fp, r2
 8011d9e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8011da2:	d225      	bcs.n	8011df0 <pow+0x140>
 8011da4:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011da8:	2c00      	cmp	r4, #0
 8011daa:	da13      	bge.n	8011dd4 <pow+0x124>
 8011dac:	4651      	mov	r1, sl
 8011dae:	f7ff ff4b 	bl	8011c48 <checkint>
 8011db2:	2801      	cmp	r0, #1
 8011db4:	d10e      	bne.n	8011dd4 <pow+0x124>
 8011db6:	eeb1 0b40 	vneg.f64	d0, d0
 8011dba:	ea57 0909 	orrs.w	r9, r7, r9
 8011dbe:	d10b      	bne.n	8011dd8 <pow+0x128>
 8011dc0:	f1ba 0f00 	cmp.w	sl, #0
 8011dc4:	dadf      	bge.n	8011d86 <pow+0xd6>
 8011dc6:	b007      	add	sp, #28
 8011dc8:	ecbd 8b0a 	vpop	{d8-d12}
 8011dcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd0:	f000 bcca 	b.w	8012768 <__math_divzero>
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	e7f0      	b.n	8011dba <pow+0x10a>
 8011dd8:	f1ba 0f00 	cmp.w	sl, #0
 8011ddc:	dad3      	bge.n	8011d86 <pow+0xd6>
 8011dde:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011de2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011de6:	ed8d 7b00 	vstr	d7, [sp]
 8011dea:	ed9d 0b00 	vldr	d0, [sp]
 8011dee:	e7ca      	b.n	8011d86 <pow+0xd6>
 8011df0:	2c00      	cmp	r4, #0
 8011df2:	da2b      	bge.n	8011e4c <pow+0x19c>
 8011df4:	4651      	mov	r1, sl
 8011df6:	f7ff ff27 	bl	8011c48 <checkint>
 8011dfa:	b930      	cbnz	r0, 8011e0a <pow+0x15a>
 8011dfc:	b007      	add	sp, #28
 8011dfe:	ecbd 8b0a 	vpop	{d8-d12}
 8011e02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e06:	f000 bcc7 	b.w	8012798 <__math_invalid>
 8011e0a:	1e41      	subs	r1, r0, #1
 8011e0c:	4248      	negs	r0, r1
 8011e0e:	4148      	adcs	r0, r1
 8011e10:	0480      	lsls	r0, r0, #18
 8011e12:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011e16:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8011e1a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8011e1e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8011e22:	2b7f      	cmp	r3, #127	@ 0x7f
 8011e24:	d92d      	bls.n	8011e82 <pow+0x1d2>
 8011e26:	4b96      	ldr	r3, [pc, #600]	@ (8012080 <pow+0x3d0>)
 8011e28:	2000      	movs	r0, #0
 8011e2a:	429c      	cmp	r4, r3
 8011e2c:	bf08      	it	eq
 8011e2e:	4285      	cmpeq	r5, r0
 8011e30:	f43f af7a 	beq.w	8011d28 <pow+0x78>
 8011e34:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8011e38:	428a      	cmp	r2, r1
 8011e3a:	d80c      	bhi.n	8011e56 <pow+0x1a6>
 8011e3c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011e40:	42a8      	cmp	r0, r5
 8011e42:	41a3      	sbcs	r3, r4
 8011e44:	d204      	bcs.n	8011e50 <pow+0x1a0>
 8011e46:	ee31 0b00 	vadd.f64	d0, d1, d0
 8011e4a:	e79c      	b.n	8011d86 <pow+0xd6>
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e7e4      	b.n	8011e1a <pow+0x16a>
 8011e50:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011e54:	e797      	b.n	8011d86 <pow+0xd6>
 8011e56:	2d01      	cmp	r5, #1
 8011e58:	eb74 0303 	sbcs.w	r3, r4, r3
 8011e5c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011e60:	bf34      	ite	cc
 8011e62:	2301      	movcc	r3, #1
 8011e64:	2300      	movcs	r3, #0
 8011e66:	4296      	cmp	r6, r2
 8011e68:	bf8c      	ite	hi
 8011e6a:	2600      	movhi	r6, #0
 8011e6c:	2601      	movls	r6, #1
 8011e6e:	42b3      	cmp	r3, r6
 8011e70:	f000 809c 	beq.w	8011fac <pow+0x2fc>
 8011e74:	b007      	add	sp, #28
 8011e76:	ecbd 8b0a 	vpop	{d8-d12}
 8011e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7e:	f000 bc6b 	b.w	8012758 <__math_oflow>
 8011e82:	f1bc 0f00 	cmp.w	ip, #0
 8011e86:	d10a      	bne.n	8011e9e <pow+0x1ee>
 8011e88:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8012070 <pow+0x3c0>
 8011e8c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011e90:	ec53 2b17 	vmov	r2, r3, d7
 8011e94:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8011e98:	4615      	mov	r5, r2
 8011e9a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8011e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8012090 <pow+0x3e0>)
 8011ea0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8011ea4:	4422      	add	r2, r4
 8011ea6:	1513      	asrs	r3, r2, #20
 8011ea8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8011eac:	ee03 3a10 	vmov	s6, r3
 8011eb0:	0d12      	lsrs	r2, r2, #20
 8011eb2:	4b78      	ldr	r3, [pc, #480]	@ (8012094 <pow+0x3e4>)
 8011eb4:	0512      	lsls	r2, r2, #20
 8011eb6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8011eba:	1aa7      	subs	r7, r4, r2
 8011ebc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8011ec0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8011ec4:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8011ec8:	1e2e      	subs	r6, r5, #0
 8011eca:	ec47 6b14 	vmov	d4, r6, r7
 8011ece:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8011ed2:	eea4 6b05 	vfma.f64	d6, d4, d5
 8011ed6:	ed93 5b00 	vldr	d5, [r3]
 8011eda:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8011ede:	eea3 2b05 	vfma.f64	d2, d3, d5
 8011ee2:	ed93 5b02 	vldr	d5, [r3, #8]
 8011ee6:	ee36 4b02 	vadd.f64	d4, d6, d2
 8011eea:	ee32 2b44 	vsub.f64	d2, d2, d4
 8011eee:	eea3 7b05 	vfma.f64	d7, d3, d5
 8011ef2:	ed93 5b04 	vldr	d5, [r3, #16]
 8011ef6:	ee32 2b06 	vadd.f64	d2, d2, d6
 8011efa:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011efe:	ee26 5b05 	vmul.f64	d5, d6, d5
 8011f02:	ee26 0b05 	vmul.f64	d0, d6, d5
 8011f06:	ee34 8b00 	vadd.f64	d8, d4, d0
 8011f0a:	eeb0 9b40 	vmov.f64	d9, d0
 8011f0e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8011f12:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8011f16:	ee34 ab00 	vadd.f64	d10, d4, d0
 8011f1a:	ed93 5b06 	vldr	d5, [r3, #24]
 8011f1e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011f22:	ee37 7b09 	vadd.f64	d7, d7, d9
 8011f26:	ed93 4b08 	vldr	d4, [r3, #32]
 8011f2a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8011f2e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8011f32:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011f36:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8011f3a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8011f3e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011f42:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8011f46:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011f4a:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011f4e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011f52:	eeab 7b05 	vfma.f64	d7, d11, d5
 8011f56:	ee38 4b07 	vadd.f64	d4, d8, d7
 8011f5a:	ee21 6b04 	vmul.f64	d6, d1, d4
 8011f5e:	ee16 3a90 	vmov	r3, s13
 8011f62:	eeb0 5b46 	vmov.f64	d5, d6
 8011f66:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011f6a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8011f6e:	18b2      	adds	r2, r6, r2
 8011f70:	2a3e      	cmp	r2, #62	@ 0x3e
 8011f72:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8011f76:	ee38 8b44 	vsub.f64	d8, d8, d4
 8011f7a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8011f7e:	eea1 5b08 	vfma.f64	d5, d1, d8
 8011f82:	d91b      	bls.n	8011fbc <pow+0x30c>
 8011f84:	2a00      	cmp	r2, #0
 8011f86:	da0b      	bge.n	8011fa0 <pow+0x2f0>
 8011f88:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011f8c:	ee36 0b00 	vadd.f64	d0, d6, d0
 8011f90:	2800      	cmp	r0, #0
 8011f92:	f43f aef8 	beq.w	8011d86 <pow+0xd6>
 8011f96:	eeb1 0b40 	vneg.f64	d0, d0
 8011f9a:	e6f4      	b.n	8011d86 <pow+0xd6>
 8011f9c:	2000      	movs	r0, #0
 8011f9e:	e77e      	b.n	8011e9e <pow+0x1ee>
 8011fa0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8011fa4:	d909      	bls.n	8011fba <pow+0x30a>
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f6bf af64 	bge.w	8011e74 <pow+0x1c4>
 8011fac:	b007      	add	sp, #28
 8011fae:	ecbd 8b0a 	vpop	{d8-d12}
 8011fb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb6:	f000 bbc7 	b.w	8012748 <__math_uflow>
 8011fba:	2600      	movs	r6, #0
 8011fbc:	4936      	ldr	r1, [pc, #216]	@ (8012098 <pow+0x3e8>)
 8011fbe:	ed91 4b02 	vldr	d4, [r1, #8]
 8011fc2:	ed91 3b00 	vldr	d3, [r1]
 8011fc6:	eeb0 7b44 	vmov.f64	d7, d4
 8011fca:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011fce:	ee17 5a10 	vmov	r5, s14
 8011fd2:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011fd6:	ed91 4b04 	vldr	d4, [r1, #16]
 8011fda:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8011fde:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011fe2:	ed91 4b06 	vldr	d4, [r1, #24]
 8011fe6:	18dc      	adds	r4, r3, r3
 8011fe8:	f104 030f 	add.w	r3, r4, #15
 8011fec:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011ff0:	eea7 6b04 	vfma.f64	d6, d7, d4
 8011ff4:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8011ff8:	ee35 5b06 	vadd.f64	d5, d5, d6
 8011ffc:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012000:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8012004:	ed91 4b08 	vldr	d4, [r1, #32]
 8012008:	ee35 7b07 	vadd.f64	d7, d5, d7
 801200c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8012010:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012014:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8012018:	eea6 7b04 	vfma.f64	d7, d6, d4
 801201c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8012020:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8012024:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8012028:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801202c:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012030:	1940      	adds	r0, r0, r5
 8012032:	2700      	movs	r7, #0
 8012034:	eb17 020c 	adds.w	r2, r7, ip
 8012038:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801203c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012040:	2e00      	cmp	r6, #0
 8012042:	d175      	bne.n	8012130 <pow+0x480>
 8012044:	42bd      	cmp	r5, r7
 8012046:	db29      	blt.n	801209c <pow+0x3ec>
 8012048:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801204c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8012050:	4610      	mov	r0, r2
 8012052:	ec41 0b10 	vmov	d0, r0, r1
 8012056:	eea7 0b00 	vfma.f64	d0, d7, d0
 801205a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012078 <pow+0x3c8>
 801205e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012062:	b007      	add	sp, #28
 8012064:	ecbd 8b0a 	vpop	{d8-d12}
 8012068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	f000 bbac 	b.w	80127c8 <__math_check_oflow>
 8012070:	00000000 	.word	0x00000000
 8012074:	43300000 	.word	0x43300000
 8012078:	00000000 	.word	0x00000000
 801207c:	7f000000 	.word	0x7f000000
 8012080:	3ff00000 	.word	0x3ff00000
 8012084:	fff00000 	.word	0xfff00000
 8012088:	ffe00000 	.word	0xffe00000
 801208c:	7fe00000 	.word	0x7fe00000
 8012090:	c0196aab 	.word	0xc0196aab
 8012094:	08013c60 	.word	0x08013c60
 8012098:	08014e30 	.word	0x08014e30
 801209c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80120a0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80120a4:	4610      	mov	r0, r2
 80120a6:	ec41 0b15 	vmov	d5, r0, r1
 80120aa:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80120ae:	ee27 6b05 	vmul.f64	d6, d7, d5
 80120b2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80120b6:	eeb0 4bc7 	vabs.f64	d4, d7
 80120ba:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80120be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8012140 <pow+0x490>
 80120c6:	d52a      	bpl.n	801211e <pow+0x46e>
 80120c8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80120cc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80120d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d4:	ee35 5b06 	vadd.f64	d5, d5, d6
 80120d8:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 80120dc:	bf58      	it	pl
 80120de:	eeb0 4b43 	vmovpl.f64	d4, d3
 80120e2:	ee37 3b04 	vadd.f64	d3, d7, d4
 80120e6:	ee34 6b43 	vsub.f64	d6, d4, d3
 80120ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80120ee:	ee36 6b05 	vadd.f64	d6, d6, d5
 80120f2:	ee36 6b03 	vadd.f64	d6, d6, d3
 80120f6:	ee36 7b44 	vsub.f64	d7, d6, d4
 80120fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012102:	d104      	bne.n	801210e <pow+0x45e>
 8012104:	4632      	mov	r2, r6
 8012106:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801210a:	ec43 2b17 	vmov	d7, r2, r3
 801210e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012112:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012116:	ee26 6b00 	vmul.f64	d6, d6, d0
 801211a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801211e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8012122:	b007      	add	sp, #28
 8012124:	ecbd 8b0a 	vpop	{d8-d12}
 8012128:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801212c:	f000 bb43 	b.w	80127b6 <__math_check_uflow>
 8012130:	ec43 2b10 	vmov	d0, r2, r3
 8012134:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012138:	e625      	b.n	8011d86 <pow+0xd6>
 801213a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8012148 <pow+0x498>
 801213e:	e622      	b.n	8011d86 <pow+0xd6>
 8012140:	00000000 	.word	0x00000000
 8012144:	00100000 	.word	0x00100000
	...

08012150 <cabs>:
 8012150:	b508      	push	{r3, lr}
 8012152:	ed2d 8b06 	vpush	{d8-d10}
 8012156:	eeb0 ab40 	vmov.f64	d10, d0
 801215a:	eeb0 9b41 	vmov.f64	d9, d1
 801215e:	f000 f815 	bl	801218c <creal>
 8012162:	eeb0 1b49 	vmov.f64	d1, d9
 8012166:	eeb0 8b40 	vmov.f64	d8, d0
 801216a:	eeb0 0b4a 	vmov.f64	d0, d10
 801216e:	f000 f80a 	bl	8012186 <cimag>
 8012172:	eeb0 1b40 	vmov.f64	d1, d0
 8012176:	eeb0 0b48 	vmov.f64	d0, d8
 801217a:	ecbd 8b06 	vpop	{d8-d10}
 801217e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012182:	f000 ba85 	b.w	8012690 <hypot>

08012186 <cimag>:
 8012186:	eeb0 0b41 	vmov.f64	d0, d1
 801218a:	4770      	bx	lr

0801218c <creal>:
 801218c:	4770      	bx	lr

0801218e <__ieee754_sqrt>:
 801218e:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012192:	4770      	bx	lr
 8012194:	0000      	movs	r0, r0
	...

08012198 <floor>:
 8012198:	ee10 3a90 	vmov	r3, s1
 801219c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80121a0:	ee10 2a10 	vmov	r2, s0
 80121a4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80121a8:	2913      	cmp	r1, #19
 80121aa:	b530      	push	{r4, r5, lr}
 80121ac:	4615      	mov	r5, r2
 80121ae:	dc33      	bgt.n	8012218 <floor+0x80>
 80121b0:	2900      	cmp	r1, #0
 80121b2:	da18      	bge.n	80121e6 <floor+0x4e>
 80121b4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8012278 <floor+0xe0>
 80121b8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80121bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80121c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c4:	dd0a      	ble.n	80121dc <floor+0x44>
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	da50      	bge.n	801226c <floor+0xd4>
 80121ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80121ce:	4313      	orrs	r3, r2
 80121d0:	2200      	movs	r2, #0
 80121d2:	4293      	cmp	r3, r2
 80121d4:	4b2a      	ldr	r3, [pc, #168]	@ (8012280 <floor+0xe8>)
 80121d6:	bf08      	it	eq
 80121d8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80121dc:	4619      	mov	r1, r3
 80121de:	4610      	mov	r0, r2
 80121e0:	ec41 0b10 	vmov	d0, r0, r1
 80121e4:	e01f      	b.n	8012226 <floor+0x8e>
 80121e6:	4827      	ldr	r0, [pc, #156]	@ (8012284 <floor+0xec>)
 80121e8:	4108      	asrs	r0, r1
 80121ea:	ea03 0400 	and.w	r4, r3, r0
 80121ee:	4314      	orrs	r4, r2
 80121f0:	d019      	beq.n	8012226 <floor+0x8e>
 80121f2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012278 <floor+0xe0>
 80121f6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80121fa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80121fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012202:	ddeb      	ble.n	80121dc <floor+0x44>
 8012204:	2b00      	cmp	r3, #0
 8012206:	bfbe      	ittt	lt
 8012208:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801220c:	410a      	asrlt	r2, r1
 801220e:	189b      	addlt	r3, r3, r2
 8012210:	ea23 0300 	bic.w	r3, r3, r0
 8012214:	2200      	movs	r2, #0
 8012216:	e7e1      	b.n	80121dc <floor+0x44>
 8012218:	2933      	cmp	r1, #51	@ 0x33
 801221a:	dd05      	ble.n	8012228 <floor+0x90>
 801221c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012220:	d101      	bne.n	8012226 <floor+0x8e>
 8012222:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012226:	bd30      	pop	{r4, r5, pc}
 8012228:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801222c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012230:	40e0      	lsrs	r0, r4
 8012232:	4210      	tst	r0, r2
 8012234:	d0f7      	beq.n	8012226 <floor+0x8e>
 8012236:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012278 <floor+0xe0>
 801223a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801223e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012246:	ddc9      	ble.n	80121dc <floor+0x44>
 8012248:	2b00      	cmp	r3, #0
 801224a:	da02      	bge.n	8012252 <floor+0xba>
 801224c:	2914      	cmp	r1, #20
 801224e:	d103      	bne.n	8012258 <floor+0xc0>
 8012250:	3301      	adds	r3, #1
 8012252:	ea22 0200 	bic.w	r2, r2, r0
 8012256:	e7c1      	b.n	80121dc <floor+0x44>
 8012258:	2401      	movs	r4, #1
 801225a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801225e:	fa04 f101 	lsl.w	r1, r4, r1
 8012262:	440a      	add	r2, r1
 8012264:	42aa      	cmp	r2, r5
 8012266:	bf38      	it	cc
 8012268:	191b      	addcc	r3, r3, r4
 801226a:	e7f2      	b.n	8012252 <floor+0xba>
 801226c:	2200      	movs	r2, #0
 801226e:	4613      	mov	r3, r2
 8012270:	e7b4      	b.n	80121dc <floor+0x44>
 8012272:	bf00      	nop
 8012274:	f3af 8000 	nop.w
 8012278:	8800759c 	.word	0x8800759c
 801227c:	7e37e43c 	.word	0x7e37e43c
 8012280:	bff00000 	.word	0xbff00000
 8012284:	000fffff 	.word	0x000fffff

08012288 <__kernel_cos>:
 8012288:	eeb0 5b40 	vmov.f64	d5, d0
 801228c:	ee15 1a90 	vmov	r1, s11
 8012290:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012294:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012298:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801229c:	d204      	bcs.n	80122a8 <__kernel_cos+0x20>
 801229e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80122a2:	ee17 3a90 	vmov	r3, s15
 80122a6:	b343      	cbz	r3, 80122fa <__kernel_cos+0x72>
 80122a8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80122ac:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80122b0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8012320 <__kernel_cos+0x98>
 80122b4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012328 <__kernel_cos+0xa0>
 80122b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80122bc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8012330 <__kernel_cos+0xa8>
 80122c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80122c4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012338 <__kernel_cos+0xb0>
 80122c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80122cc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8012340 <__kernel_cos+0xb8>
 80122d0:	4b1f      	ldr	r3, [pc, #124]	@ (8012350 <__kernel_cos+0xc8>)
 80122d2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80122d6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012348 <__kernel_cos+0xc0>
 80122da:	4299      	cmp	r1, r3
 80122dc:	eea7 4b06 	vfma.f64	d4, d7, d6
 80122e0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80122e4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80122e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80122ec:	eea6 1b04 	vfma.f64	d1, d6, d4
 80122f0:	d804      	bhi.n	80122fc <__kernel_cos+0x74>
 80122f2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80122f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80122fa:	4770      	bx	lr
 80122fc:	4b15      	ldr	r3, [pc, #84]	@ (8012354 <__kernel_cos+0xcc>)
 80122fe:	4299      	cmp	r1, r3
 8012300:	d809      	bhi.n	8012316 <__kernel_cos+0x8e>
 8012302:	2200      	movs	r2, #0
 8012304:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8012308:	ec43 2b16 	vmov	d6, r2, r3
 801230c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012310:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012314:	e7ed      	b.n	80122f2 <__kernel_cos+0x6a>
 8012316:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801231a:	e7f7      	b.n	801230c <__kernel_cos+0x84>
 801231c:	f3af 8000 	nop.w
 8012320:	be8838d4 	.word	0xbe8838d4
 8012324:	bda8fae9 	.word	0xbda8fae9
 8012328:	bdb4b1c4 	.word	0xbdb4b1c4
 801232c:	3e21ee9e 	.word	0x3e21ee9e
 8012330:	809c52ad 	.word	0x809c52ad
 8012334:	be927e4f 	.word	0xbe927e4f
 8012338:	19cb1590 	.word	0x19cb1590
 801233c:	3efa01a0 	.word	0x3efa01a0
 8012340:	16c15177 	.word	0x16c15177
 8012344:	bf56c16c 	.word	0xbf56c16c
 8012348:	5555554c 	.word	0x5555554c
 801234c:	3fa55555 	.word	0x3fa55555
 8012350:	3fd33332 	.word	0x3fd33332
 8012354:	3fe90000 	.word	0x3fe90000

08012358 <__kernel_sin>:
 8012358:	ee10 3a90 	vmov	r3, s1
 801235c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012360:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012364:	d204      	bcs.n	8012370 <__kernel_sin+0x18>
 8012366:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801236a:	ee17 3a90 	vmov	r3, s15
 801236e:	b35b      	cbz	r3, 80123c8 <__kernel_sin+0x70>
 8012370:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012374:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012378:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80123d0 <__kernel_sin+0x78>
 801237c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80123d8 <__kernel_sin+0x80>
 8012380:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012384:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80123e0 <__kernel_sin+0x88>
 8012388:	eea4 7b06 	vfma.f64	d7, d4, d6
 801238c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80123e8 <__kernel_sin+0x90>
 8012390:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012394:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80123f0 <__kernel_sin+0x98>
 8012398:	eea4 7b06 	vfma.f64	d7, d4, d6
 801239c:	b930      	cbnz	r0, 80123ac <__kernel_sin+0x54>
 801239e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80123f8 <__kernel_sin+0xa0>
 80123a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80123a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80123aa:	4770      	bx	lr
 80123ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80123b0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80123b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80123b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80123bc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012400 <__kernel_sin+0xa8>
 80123c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80123c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop
 80123cc:	f3af 8000 	nop.w
 80123d0:	5acfd57c 	.word	0x5acfd57c
 80123d4:	3de5d93a 	.word	0x3de5d93a
 80123d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80123dc:	be5ae5e6 	.word	0xbe5ae5e6
 80123e0:	57b1fe7d 	.word	0x57b1fe7d
 80123e4:	3ec71de3 	.word	0x3ec71de3
 80123e8:	19c161d5 	.word	0x19c161d5
 80123ec:	bf2a01a0 	.word	0xbf2a01a0
 80123f0:	1110f8a6 	.word	0x1110f8a6
 80123f4:	3f811111 	.word	0x3f811111
 80123f8:	55555549 	.word	0x55555549
 80123fc:	bfc55555 	.word	0xbfc55555
 8012400:	55555549 	.word	0x55555549
 8012404:	3fc55555 	.word	0x3fc55555

08012408 <__ieee754_rem_pio2>:
 8012408:	b570      	push	{r4, r5, r6, lr}
 801240a:	eeb0 7b40 	vmov.f64	d7, d0
 801240e:	ee17 5a90 	vmov	r5, s15
 8012412:	4b99      	ldr	r3, [pc, #612]	@ (8012678 <__ieee754_rem_pio2+0x270>)
 8012414:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012418:	429e      	cmp	r6, r3
 801241a:	b088      	sub	sp, #32
 801241c:	4604      	mov	r4, r0
 801241e:	d807      	bhi.n	8012430 <__ieee754_rem_pio2+0x28>
 8012420:	2200      	movs	r2, #0
 8012422:	2300      	movs	r3, #0
 8012424:	ed84 0b00 	vstr	d0, [r4]
 8012428:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801242c:	2000      	movs	r0, #0
 801242e:	e01b      	b.n	8012468 <__ieee754_rem_pio2+0x60>
 8012430:	4b92      	ldr	r3, [pc, #584]	@ (801267c <__ieee754_rem_pio2+0x274>)
 8012432:	429e      	cmp	r6, r3
 8012434:	d83b      	bhi.n	80124ae <__ieee754_rem_pio2+0xa6>
 8012436:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801243a:	2d00      	cmp	r5, #0
 801243c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8012638 <__ieee754_rem_pio2+0x230>
 8012440:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8012444:	dd19      	ble.n	801247a <__ieee754_rem_pio2+0x72>
 8012446:	ee30 7b46 	vsub.f64	d7, d0, d6
 801244a:	429e      	cmp	r6, r3
 801244c:	d00e      	beq.n	801246c <__ieee754_rem_pio2+0x64>
 801244e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8012640 <__ieee754_rem_pio2+0x238>
 8012452:	ee37 6b45 	vsub.f64	d6, d7, d5
 8012456:	ee37 7b46 	vsub.f64	d7, d7, d6
 801245a:	ed84 6b00 	vstr	d6, [r4]
 801245e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012462:	ed84 7b02 	vstr	d7, [r4, #8]
 8012466:	2001      	movs	r0, #1
 8012468:	b008      	add	sp, #32
 801246a:	bd70      	pop	{r4, r5, r6, pc}
 801246c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8012648 <__ieee754_rem_pio2+0x240>
 8012470:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8012650 <__ieee754_rem_pio2+0x248>
 8012474:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012478:	e7eb      	b.n	8012452 <__ieee754_rem_pio2+0x4a>
 801247a:	429e      	cmp	r6, r3
 801247c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012480:	d00e      	beq.n	80124a0 <__ieee754_rem_pio2+0x98>
 8012482:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8012640 <__ieee754_rem_pio2+0x238>
 8012486:	ee37 6b05 	vadd.f64	d6, d7, d5
 801248a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801248e:	ed84 6b00 	vstr	d6, [r4]
 8012492:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801249a:	ed84 7b02 	vstr	d7, [r4, #8]
 801249e:	e7e3      	b.n	8012468 <__ieee754_rem_pio2+0x60>
 80124a0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8012648 <__ieee754_rem_pio2+0x240>
 80124a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8012650 <__ieee754_rem_pio2+0x248>
 80124a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80124ac:	e7eb      	b.n	8012486 <__ieee754_rem_pio2+0x7e>
 80124ae:	4b74      	ldr	r3, [pc, #464]	@ (8012680 <__ieee754_rem_pio2+0x278>)
 80124b0:	429e      	cmp	r6, r3
 80124b2:	d870      	bhi.n	8012596 <__ieee754_rem_pio2+0x18e>
 80124b4:	f000 f914 	bl	80126e0 <fabs>
 80124b8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80124bc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012658 <__ieee754_rem_pio2+0x250>
 80124c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80124c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80124c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80124cc:	ee17 0a90 	vmov	r0, s15
 80124d0:	eeb1 4b45 	vneg.f64	d4, d5
 80124d4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8012638 <__ieee754_rem_pio2+0x230>
 80124d8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80124dc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8012640 <__ieee754_rem_pio2+0x238>
 80124e0:	281f      	cmp	r0, #31
 80124e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80124e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80124ea:	dc05      	bgt.n	80124f8 <__ieee754_rem_pio2+0xf0>
 80124ec:	4b65      	ldr	r3, [pc, #404]	@ (8012684 <__ieee754_rem_pio2+0x27c>)
 80124ee:	1e42      	subs	r2, r0, #1
 80124f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124f4:	42b3      	cmp	r3, r6
 80124f6:	d109      	bne.n	801250c <__ieee754_rem_pio2+0x104>
 80124f8:	ee16 3a90 	vmov	r3, s13
 80124fc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012500:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8012504:	2b10      	cmp	r3, #16
 8012506:	ea4f 5226 	mov.w	r2, r6, asr #20
 801250a:	dc02      	bgt.n	8012512 <__ieee754_rem_pio2+0x10a>
 801250c:	ed84 6b00 	vstr	d6, [r4]
 8012510:	e01a      	b.n	8012548 <__ieee754_rem_pio2+0x140>
 8012512:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8012648 <__ieee754_rem_pio2+0x240>
 8012516:	eeb0 6b40 	vmov.f64	d6, d0
 801251a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801251e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012522:	eea4 7b03 	vfma.f64	d7, d4, d3
 8012526:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8012650 <__ieee754_rem_pio2+0x248>
 801252a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801252e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8012532:	ee13 3a90 	vmov	r3, s7
 8012536:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	2b31      	cmp	r3, #49	@ 0x31
 801253e:	dc17      	bgt.n	8012570 <__ieee754_rem_pio2+0x168>
 8012540:	eeb0 0b46 	vmov.f64	d0, d6
 8012544:	ed84 3b00 	vstr	d3, [r4]
 8012548:	ed94 6b00 	vldr	d6, [r4]
 801254c:	2d00      	cmp	r5, #0
 801254e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012552:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012556:	ed84 0b02 	vstr	d0, [r4, #8]
 801255a:	da85      	bge.n	8012468 <__ieee754_rem_pio2+0x60>
 801255c:	eeb1 6b46 	vneg.f64	d6, d6
 8012560:	eeb1 0b40 	vneg.f64	d0, d0
 8012564:	ed84 6b00 	vstr	d6, [r4]
 8012568:	ed84 0b02 	vstr	d0, [r4, #8]
 801256c:	4240      	negs	r0, r0
 801256e:	e77b      	b.n	8012468 <__ieee754_rem_pio2+0x60>
 8012570:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8012660 <__ieee754_rem_pio2+0x258>
 8012574:	eeb0 0b46 	vmov.f64	d0, d6
 8012578:	eea4 0b07 	vfma.f64	d0, d4, d7
 801257c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8012580:	eea4 6b07 	vfma.f64	d6, d4, d7
 8012584:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8012668 <__ieee754_rem_pio2+0x260>
 8012588:	eeb0 7b46 	vmov.f64	d7, d6
 801258c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8012590:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012594:	e7ba      	b.n	801250c <__ieee754_rem_pio2+0x104>
 8012596:	4b3c      	ldr	r3, [pc, #240]	@ (8012688 <__ieee754_rem_pio2+0x280>)
 8012598:	429e      	cmp	r6, r3
 801259a:	d906      	bls.n	80125aa <__ieee754_rem_pio2+0x1a2>
 801259c:	ee30 7b40 	vsub.f64	d7, d0, d0
 80125a0:	ed80 7b02 	vstr	d7, [r0, #8]
 80125a4:	ed80 7b00 	vstr	d7, [r0]
 80125a8:	e740      	b.n	801242c <__ieee754_rem_pio2+0x24>
 80125aa:	ee10 3a10 	vmov	r3, s0
 80125ae:	1532      	asrs	r2, r6, #20
 80125b0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80125b4:	4618      	mov	r0, r3
 80125b6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80125ba:	ec41 0b17 	vmov	d7, r0, r1
 80125be:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80125c2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8012670 <__ieee754_rem_pio2+0x268>
 80125c6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80125ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80125ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 80125d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80125d6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80125da:	a808      	add	r0, sp, #32
 80125dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80125e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80125e4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80125e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80125ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80125f0:	2103      	movs	r1, #3
 80125f2:	ed30 7b02 	vldmdb	r0!, {d7}
 80125f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80125fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fe:	460b      	mov	r3, r1
 8012600:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8012604:	d0f5      	beq.n	80125f2 <__ieee754_rem_pio2+0x1ea>
 8012606:	4921      	ldr	r1, [pc, #132]	@ (801268c <__ieee754_rem_pio2+0x284>)
 8012608:	9101      	str	r1, [sp, #4]
 801260a:	2102      	movs	r1, #2
 801260c:	9100      	str	r1, [sp, #0]
 801260e:	a802      	add	r0, sp, #8
 8012610:	4621      	mov	r1, r4
 8012612:	f000 f8ed 	bl	80127f0 <__kernel_rem_pio2>
 8012616:	2d00      	cmp	r5, #0
 8012618:	f6bf af26 	bge.w	8012468 <__ieee754_rem_pio2+0x60>
 801261c:	ed94 7b00 	vldr	d7, [r4]
 8012620:	eeb1 7b47 	vneg.f64	d7, d7
 8012624:	ed84 7b00 	vstr	d7, [r4]
 8012628:	ed94 7b02 	vldr	d7, [r4, #8]
 801262c:	eeb1 7b47 	vneg.f64	d7, d7
 8012630:	ed84 7b02 	vstr	d7, [r4, #8]
 8012634:	e79a      	b.n	801256c <__ieee754_rem_pio2+0x164>
 8012636:	bf00      	nop
 8012638:	54400000 	.word	0x54400000
 801263c:	3ff921fb 	.word	0x3ff921fb
 8012640:	1a626331 	.word	0x1a626331
 8012644:	3dd0b461 	.word	0x3dd0b461
 8012648:	1a600000 	.word	0x1a600000
 801264c:	3dd0b461 	.word	0x3dd0b461
 8012650:	2e037073 	.word	0x2e037073
 8012654:	3ba3198a 	.word	0x3ba3198a
 8012658:	6dc9c883 	.word	0x6dc9c883
 801265c:	3fe45f30 	.word	0x3fe45f30
 8012660:	2e000000 	.word	0x2e000000
 8012664:	3ba3198a 	.word	0x3ba3198a
 8012668:	252049c1 	.word	0x252049c1
 801266c:	397b839a 	.word	0x397b839a
 8012670:	00000000 	.word	0x00000000
 8012674:	41700000 	.word	0x41700000
 8012678:	3fe921fb 	.word	0x3fe921fb
 801267c:	4002d97b 	.word	0x4002d97b
 8012680:	413921fb 	.word	0x413921fb
 8012684:	08014ca8 	.word	0x08014ca8
 8012688:	7fefffff 	.word	0x7fefffff
 801268c:	08014d28 	.word	0x08014d28

08012690 <hypot>:
 8012690:	b508      	push	{r3, lr}
 8012692:	ed2d 8b06 	vpush	{d8-d10}
 8012696:	eeb0 ab40 	vmov.f64	d10, d0
 801269a:	eeb0 9b41 	vmov.f64	d9, d1
 801269e:	f000 fb23 	bl	8012ce8 <__ieee754_hypot>
 80126a2:	eeb0 8b40 	vmov.f64	d8, d0
 80126a6:	f000 f823 	bl	80126f0 <finite>
 80126aa:	b978      	cbnz	r0, 80126cc <hypot+0x3c>
 80126ac:	eeb0 0b4a 	vmov.f64	d0, d10
 80126b0:	f000 f81e 	bl	80126f0 <finite>
 80126b4:	b150      	cbz	r0, 80126cc <hypot+0x3c>
 80126b6:	eeb0 0b49 	vmov.f64	d0, d9
 80126ba:	f000 f819 	bl	80126f0 <finite>
 80126be:	b128      	cbz	r0, 80126cc <hypot+0x3c>
 80126c0:	f7fa fe26 	bl	800d310 <__errno>
 80126c4:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 80126d8 <hypot+0x48>
 80126c8:	2322      	movs	r3, #34	@ 0x22
 80126ca:	6003      	str	r3, [r0, #0]
 80126cc:	eeb0 0b48 	vmov.f64	d0, d8
 80126d0:	ecbd 8b06 	vpop	{d8-d10}
 80126d4:	bd08      	pop	{r3, pc}
 80126d6:	bf00      	nop
 80126d8:	00000000 	.word	0x00000000
 80126dc:	7ff00000 	.word	0x7ff00000

080126e0 <fabs>:
 80126e0:	ec51 0b10 	vmov	r0, r1, d0
 80126e4:	4602      	mov	r2, r0
 80126e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80126ea:	ec43 2b10 	vmov	d0, r2, r3
 80126ee:	4770      	bx	lr

080126f0 <finite>:
 80126f0:	b082      	sub	sp, #8
 80126f2:	ed8d 0b00 	vstr	d0, [sp]
 80126f6:	9801      	ldr	r0, [sp, #4]
 80126f8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80126fc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8012700:	0fc0      	lsrs	r0, r0, #31
 8012702:	b002      	add	sp, #8
 8012704:	4770      	bx	lr

08012706 <with_errno>:
 8012706:	b510      	push	{r4, lr}
 8012708:	ed2d 8b02 	vpush	{d8}
 801270c:	eeb0 8b40 	vmov.f64	d8, d0
 8012710:	4604      	mov	r4, r0
 8012712:	f7fa fdfd 	bl	800d310 <__errno>
 8012716:	eeb0 0b48 	vmov.f64	d0, d8
 801271a:	ecbd 8b02 	vpop	{d8}
 801271e:	6004      	str	r4, [r0, #0]
 8012720:	bd10      	pop	{r4, pc}

08012722 <xflow>:
 8012722:	b082      	sub	sp, #8
 8012724:	b158      	cbz	r0, 801273e <xflow+0x1c>
 8012726:	eeb1 7b40 	vneg.f64	d7, d0
 801272a:	ed8d 7b00 	vstr	d7, [sp]
 801272e:	ed9d 7b00 	vldr	d7, [sp]
 8012732:	2022      	movs	r0, #34	@ 0x22
 8012734:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012738:	b002      	add	sp, #8
 801273a:	f7ff bfe4 	b.w	8012706 <with_errno>
 801273e:	eeb0 7b40 	vmov.f64	d7, d0
 8012742:	e7f2      	b.n	801272a <xflow+0x8>
 8012744:	0000      	movs	r0, r0
	...

08012748 <__math_uflow>:
 8012748:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012750 <__math_uflow+0x8>
 801274c:	f7ff bfe9 	b.w	8012722 <xflow>
 8012750:	00000000 	.word	0x00000000
 8012754:	10000000 	.word	0x10000000

08012758 <__math_oflow>:
 8012758:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012760 <__math_oflow+0x8>
 801275c:	f7ff bfe1 	b.w	8012722 <xflow>
 8012760:	00000000 	.word	0x00000000
 8012764:	70000000 	.word	0x70000000

08012768 <__math_divzero>:
 8012768:	b082      	sub	sp, #8
 801276a:	2800      	cmp	r0, #0
 801276c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012770:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012774:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012778:	ed8d 7b00 	vstr	d7, [sp]
 801277c:	ed9d 0b00 	vldr	d0, [sp]
 8012780:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012790 <__math_divzero+0x28>
 8012784:	2022      	movs	r0, #34	@ 0x22
 8012786:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801278a:	b002      	add	sp, #8
 801278c:	f7ff bfbb 	b.w	8012706 <with_errno>
	...

08012798 <__math_invalid>:
 8012798:	eeb0 7b40 	vmov.f64	d7, d0
 801279c:	eeb4 7b47 	vcmp.f64	d7, d7
 80127a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80127a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80127ac:	d602      	bvs.n	80127b4 <__math_invalid+0x1c>
 80127ae:	2021      	movs	r0, #33	@ 0x21
 80127b0:	f7ff bfa9 	b.w	8012706 <with_errno>
 80127b4:	4770      	bx	lr

080127b6 <__math_check_uflow>:
 80127b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80127ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127be:	d102      	bne.n	80127c6 <__math_check_uflow+0x10>
 80127c0:	2022      	movs	r0, #34	@ 0x22
 80127c2:	f7ff bfa0 	b.w	8012706 <with_errno>
 80127c6:	4770      	bx	lr

080127c8 <__math_check_oflow>:
 80127c8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80127e8 <__math_check_oflow+0x20>
 80127cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80127d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80127d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d8:	dd02      	ble.n	80127e0 <__math_check_oflow+0x18>
 80127da:	2022      	movs	r0, #34	@ 0x22
 80127dc:	f7ff bf93 	b.w	8012706 <with_errno>
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	f3af 8000 	nop.w
 80127e8:	ffffffff 	.word	0xffffffff
 80127ec:	7fefffff 	.word	0x7fefffff

080127f0 <__kernel_rem_pio2>:
 80127f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f4:	ed2d 8b06 	vpush	{d8-d10}
 80127f8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80127fc:	469b      	mov	fp, r3
 80127fe:	9001      	str	r0, [sp, #4]
 8012800:	4bbb      	ldr	r3, [pc, #748]	@ (8012af0 <__kernel_rem_pio2+0x300>)
 8012802:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8012804:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8012808:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801280c:	f112 0f14 	cmn.w	r2, #20
 8012810:	bfa8      	it	ge
 8012812:	1ed3      	subge	r3, r2, #3
 8012814:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8012818:	bfb8      	it	lt
 801281a:	2300      	movlt	r3, #0
 801281c:	f06f 0517 	mvn.w	r5, #23
 8012820:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8012ad8 <__kernel_rem_pio2+0x2e8>
 8012824:	bfa4      	itt	ge
 8012826:	2018      	movge	r0, #24
 8012828:	fb93 f3f0 	sdivge	r3, r3, r0
 801282c:	fb03 5505 	mla	r5, r3, r5, r5
 8012830:	eba3 040a 	sub.w	r4, r3, sl
 8012834:	4415      	add	r5, r2
 8012836:	460f      	mov	r7, r1
 8012838:	eb09 060a 	add.w	r6, r9, sl
 801283c:	a81a      	add	r0, sp, #104	@ 0x68
 801283e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8012842:	2200      	movs	r2, #0
 8012844:	42b2      	cmp	r2, r6
 8012846:	dd0e      	ble.n	8012866 <__kernel_rem_pio2+0x76>
 8012848:	aa1a      	add	r2, sp, #104	@ 0x68
 801284a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801284e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8012852:	2600      	movs	r6, #0
 8012854:	454e      	cmp	r6, r9
 8012856:	dc25      	bgt.n	80128a4 <__kernel_rem_pio2+0xb4>
 8012858:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8012ad8 <__kernel_rem_pio2+0x2e8>
 801285c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012860:	4614      	mov	r4, r2
 8012862:	2000      	movs	r0, #0
 8012864:	e015      	b.n	8012892 <__kernel_rem_pio2+0xa2>
 8012866:	42d4      	cmn	r4, r2
 8012868:	d409      	bmi.n	801287e <__kernel_rem_pio2+0x8e>
 801286a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801286e:	ee07 1a90 	vmov	s15, r1
 8012872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012876:	eca0 7b02 	vstmia	r0!, {d7}
 801287a:	3201      	adds	r2, #1
 801287c:	e7e2      	b.n	8012844 <__kernel_rem_pio2+0x54>
 801287e:	eeb0 7b46 	vmov.f64	d7, d6
 8012882:	e7f8      	b.n	8012876 <__kernel_rem_pio2+0x86>
 8012884:	ecbc 5b02 	vldmia	ip!, {d5}
 8012888:	ed94 6b00 	vldr	d6, [r4]
 801288c:	3001      	adds	r0, #1
 801288e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012892:	4550      	cmp	r0, sl
 8012894:	f1a4 0408 	sub.w	r4, r4, #8
 8012898:	ddf4      	ble.n	8012884 <__kernel_rem_pio2+0x94>
 801289a:	ecae 7b02 	vstmia	lr!, {d7}
 801289e:	3601      	adds	r6, #1
 80128a0:	3208      	adds	r2, #8
 80128a2:	e7d7      	b.n	8012854 <__kernel_rem_pio2+0x64>
 80128a4:	aa06      	add	r2, sp, #24
 80128a6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8012ae0 <__kernel_rem_pio2+0x2f0>
 80128aa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8012ae8 <__kernel_rem_pio2+0x2f8>
 80128ae:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80128b2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80128b6:	9203      	str	r2, [sp, #12]
 80128b8:	9302      	str	r3, [sp, #8]
 80128ba:	464c      	mov	r4, r9
 80128bc:	00e3      	lsls	r3, r4, #3
 80128be:	9304      	str	r3, [sp, #16]
 80128c0:	ab92      	add	r3, sp, #584	@ 0x248
 80128c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128c6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80128ca:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80128cc:	ab06      	add	r3, sp, #24
 80128ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80128d2:	461e      	mov	r6, r3
 80128d4:	4620      	mov	r0, r4
 80128d6:	2800      	cmp	r0, #0
 80128d8:	f1a2 0208 	sub.w	r2, r2, #8
 80128dc:	dc4a      	bgt.n	8012974 <__kernel_rem_pio2+0x184>
 80128de:	4628      	mov	r0, r5
 80128e0:	9305      	str	r3, [sp, #20]
 80128e2:	f000 fab5 	bl	8012e50 <scalbn>
 80128e6:	eeb0 8b40 	vmov.f64	d8, d0
 80128ea:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80128ee:	ee28 0b00 	vmul.f64	d0, d8, d0
 80128f2:	f7ff fc51 	bl	8012198 <floor>
 80128f6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80128fa:	eea0 8b47 	vfms.f64	d8, d0, d7
 80128fe:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012902:	2d00      	cmp	r5, #0
 8012904:	ee17 8a90 	vmov	r8, s15
 8012908:	9b05      	ldr	r3, [sp, #20]
 801290a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801290e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8012912:	dd41      	ble.n	8012998 <__kernel_rem_pio2+0x1a8>
 8012914:	1e60      	subs	r0, r4, #1
 8012916:	aa06      	add	r2, sp, #24
 8012918:	f1c5 0c18 	rsb	ip, r5, #24
 801291c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8012920:	fa46 f20c 	asr.w	r2, r6, ip
 8012924:	4490      	add	r8, r2
 8012926:	fa02 f20c 	lsl.w	r2, r2, ip
 801292a:	1ab6      	subs	r6, r6, r2
 801292c:	aa06      	add	r2, sp, #24
 801292e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8012932:	f1c5 0217 	rsb	r2, r5, #23
 8012936:	4116      	asrs	r6, r2
 8012938:	2e00      	cmp	r6, #0
 801293a:	dd3c      	ble.n	80129b6 <__kernel_rem_pio2+0x1c6>
 801293c:	f04f 0c00 	mov.w	ip, #0
 8012940:	f108 0801 	add.w	r8, r8, #1
 8012944:	4660      	mov	r0, ip
 8012946:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801294a:	4564      	cmp	r4, ip
 801294c:	dc66      	bgt.n	8012a1c <__kernel_rem_pio2+0x22c>
 801294e:	2d00      	cmp	r5, #0
 8012950:	dd03      	ble.n	801295a <__kernel_rem_pio2+0x16a>
 8012952:	2d01      	cmp	r5, #1
 8012954:	d072      	beq.n	8012a3c <__kernel_rem_pio2+0x24c>
 8012956:	2d02      	cmp	r5, #2
 8012958:	d07a      	beq.n	8012a50 <__kernel_rem_pio2+0x260>
 801295a:	2e02      	cmp	r6, #2
 801295c:	d12b      	bne.n	80129b6 <__kernel_rem_pio2+0x1c6>
 801295e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012962:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012966:	b330      	cbz	r0, 80129b6 <__kernel_rem_pio2+0x1c6>
 8012968:	4628      	mov	r0, r5
 801296a:	f000 fa71 	bl	8012e50 <scalbn>
 801296e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012972:	e020      	b.n	80129b6 <__kernel_rem_pio2+0x1c6>
 8012974:	ee20 7b09 	vmul.f64	d7, d0, d9
 8012978:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801297c:	3801      	subs	r0, #1
 801297e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012982:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012986:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801298a:	eca6 0a01 	vstmia	r6!, {s0}
 801298e:	ed92 0b00 	vldr	d0, [r2]
 8012992:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012996:	e79e      	b.n	80128d6 <__kernel_rem_pio2+0xe6>
 8012998:	d105      	bne.n	80129a6 <__kernel_rem_pio2+0x1b6>
 801299a:	1e62      	subs	r2, r4, #1
 801299c:	a906      	add	r1, sp, #24
 801299e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80129a2:	15f6      	asrs	r6, r6, #23
 80129a4:	e7c8      	b.n	8012938 <__kernel_rem_pio2+0x148>
 80129a6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80129aa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80129ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b2:	da31      	bge.n	8012a18 <__kernel_rem_pio2+0x228>
 80129b4:	2600      	movs	r6, #0
 80129b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80129ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129be:	f040 809b 	bne.w	8012af8 <__kernel_rem_pio2+0x308>
 80129c2:	1e62      	subs	r2, r4, #1
 80129c4:	2000      	movs	r0, #0
 80129c6:	454a      	cmp	r2, r9
 80129c8:	da49      	bge.n	8012a5e <__kernel_rem_pio2+0x26e>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d062      	beq.n	8012a94 <__kernel_rem_pio2+0x2a4>
 80129ce:	3c01      	subs	r4, #1
 80129d0:	ab06      	add	r3, sp, #24
 80129d2:	3d18      	subs	r5, #24
 80129d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d0f8      	beq.n	80129ce <__kernel_rem_pio2+0x1de>
 80129dc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80129e0:	4628      	mov	r0, r5
 80129e2:	f000 fa35 	bl	8012e50 <scalbn>
 80129e6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8012ae0 <__kernel_rem_pio2+0x2f0>
 80129ea:	1c62      	adds	r2, r4, #1
 80129ec:	a96a      	add	r1, sp, #424	@ 0x1a8
 80129ee:	00d3      	lsls	r3, r2, #3
 80129f0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80129f4:	4622      	mov	r2, r4
 80129f6:	2a00      	cmp	r2, #0
 80129f8:	f280 80a8 	bge.w	8012b4c <__kernel_rem_pio2+0x35c>
 80129fc:	4622      	mov	r2, r4
 80129fe:	2a00      	cmp	r2, #0
 8012a00:	f2c0 80c6 	blt.w	8012b90 <__kernel_rem_pio2+0x3a0>
 8012a04:	a96a      	add	r1, sp, #424	@ 0x1a8
 8012a06:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012a0a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8012ad8 <__kernel_rem_pio2+0x2e8>
 8012a0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8012af4 <__kernel_rem_pio2+0x304>
 8012a12:	2000      	movs	r0, #0
 8012a14:	1aa1      	subs	r1, r4, r2
 8012a16:	e0b0      	b.n	8012b7a <__kernel_rem_pio2+0x38a>
 8012a18:	2602      	movs	r6, #2
 8012a1a:	e78f      	b.n	801293c <__kernel_rem_pio2+0x14c>
 8012a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a20:	b948      	cbnz	r0, 8012a36 <__kernel_rem_pio2+0x246>
 8012a22:	b122      	cbz	r2, 8012a2e <__kernel_rem_pio2+0x23e>
 8012a24:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8012a28:	f843 2c04 	str.w	r2, [r3, #-4]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	f10c 0c01 	add.w	ip, ip, #1
 8012a32:	4610      	mov	r0, r2
 8012a34:	e789      	b.n	801294a <__kernel_rem_pio2+0x15a>
 8012a36:	ebae 0202 	sub.w	r2, lr, r2
 8012a3a:	e7f5      	b.n	8012a28 <__kernel_rem_pio2+0x238>
 8012a3c:	1e62      	subs	r2, r4, #1
 8012a3e:	ab06      	add	r3, sp, #24
 8012a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012a48:	a906      	add	r1, sp, #24
 8012a4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012a4e:	e784      	b.n	801295a <__kernel_rem_pio2+0x16a>
 8012a50:	1e62      	subs	r2, r4, #1
 8012a52:	ab06      	add	r3, sp, #24
 8012a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012a5c:	e7f4      	b.n	8012a48 <__kernel_rem_pio2+0x258>
 8012a5e:	ab06      	add	r3, sp, #24
 8012a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a64:	3a01      	subs	r2, #1
 8012a66:	4318      	orrs	r0, r3
 8012a68:	e7ad      	b.n	80129c6 <__kernel_rem_pio2+0x1d6>
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d0fa      	beq.n	8012a6a <__kernel_rem_pio2+0x27a>
 8012a74:	9a04      	ldr	r2, [sp, #16]
 8012a76:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8012a7a:	446a      	add	r2, sp
 8012a7c:	eb04 000b 	add.w	r0, r4, fp
 8012a80:	a91a      	add	r1, sp, #104	@ 0x68
 8012a82:	1c66      	adds	r6, r4, #1
 8012a84:	3a98      	subs	r2, #152	@ 0x98
 8012a86:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8012a8a:	4423      	add	r3, r4
 8012a8c:	42b3      	cmp	r3, r6
 8012a8e:	da04      	bge.n	8012a9a <__kernel_rem_pio2+0x2aa>
 8012a90:	461c      	mov	r4, r3
 8012a92:	e713      	b.n	80128bc <__kernel_rem_pio2+0xcc>
 8012a94:	9a03      	ldr	r2, [sp, #12]
 8012a96:	2301      	movs	r3, #1
 8012a98:	e7e8      	b.n	8012a6c <__kernel_rem_pio2+0x27c>
 8012a9a:	9902      	ldr	r1, [sp, #8]
 8012a9c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8012aa0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8012aa4:	9104      	str	r1, [sp, #16]
 8012aa6:	ee07 1a90 	vmov	s15, r1
 8012aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012aae:	2400      	movs	r4, #0
 8012ab0:	eca0 7b02 	vstmia	r0!, {d7}
 8012ab4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012ad8 <__kernel_rem_pio2+0x2e8>
 8012ab8:	4686      	mov	lr, r0
 8012aba:	4554      	cmp	r4, sl
 8012abc:	dd03      	ble.n	8012ac6 <__kernel_rem_pio2+0x2d6>
 8012abe:	eca2 7b02 	vstmia	r2!, {d7}
 8012ac2:	3601      	adds	r6, #1
 8012ac4:	e7e2      	b.n	8012a8c <__kernel_rem_pio2+0x29c>
 8012ac6:	ecbc 5b02 	vldmia	ip!, {d5}
 8012aca:	ed3e 6b02 	vldmdb	lr!, {d6}
 8012ace:	3401      	adds	r4, #1
 8012ad0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012ad4:	e7f1      	b.n	8012aba <__kernel_rem_pio2+0x2ca>
 8012ad6:	bf00      	nop
	...
 8012ae4:	3e700000 	.word	0x3e700000
 8012ae8:	00000000 	.word	0x00000000
 8012aec:	41700000 	.word	0x41700000
 8012af0:	080156e0 	.word	0x080156e0
 8012af4:	080156a0 	.word	0x080156a0
 8012af8:	4268      	negs	r0, r5
 8012afa:	eeb0 0b48 	vmov.f64	d0, d8
 8012afe:	f000 f9a7 	bl	8012e50 <scalbn>
 8012b02:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8012cd0 <__kernel_rem_pio2+0x4e0>
 8012b06:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8012b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0e:	db17      	blt.n	8012b40 <__kernel_rem_pio2+0x350>
 8012b10:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8012cd8 <__kernel_rem_pio2+0x4e8>
 8012b14:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012b18:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8012b1c:	aa06      	add	r2, sp, #24
 8012b1e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012b22:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012b26:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012b2a:	3518      	adds	r5, #24
 8012b2c:	ee10 3a10 	vmov	r3, s0
 8012b30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012b34:	ee17 3a10 	vmov	r3, s14
 8012b38:	3401      	adds	r4, #1
 8012b3a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012b3e:	e74d      	b.n	80129dc <__kernel_rem_pio2+0x1ec>
 8012b40:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012b44:	aa06      	add	r2, sp, #24
 8012b46:	ee10 3a10 	vmov	r3, s0
 8012b4a:	e7f6      	b.n	8012b3a <__kernel_rem_pio2+0x34a>
 8012b4c:	a806      	add	r0, sp, #24
 8012b4e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012b52:	9001      	str	r0, [sp, #4]
 8012b54:	ee07 0a90 	vmov	s15, r0
 8012b58:	3a01      	subs	r2, #1
 8012b5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012b5e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012b62:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012b66:	ed21 7b02 	vstmdb	r1!, {d7}
 8012b6a:	e744      	b.n	80129f6 <__kernel_rem_pio2+0x206>
 8012b6c:	ecbc 5b02 	vldmia	ip!, {d5}
 8012b70:	ecb5 6b02 	vldmia	r5!, {d6}
 8012b74:	3001      	adds	r0, #1
 8012b76:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012b7a:	4548      	cmp	r0, r9
 8012b7c:	dc01      	bgt.n	8012b82 <__kernel_rem_pio2+0x392>
 8012b7e:	4281      	cmp	r1, r0
 8012b80:	daf4      	bge.n	8012b6c <__kernel_rem_pio2+0x37c>
 8012b82:	a842      	add	r0, sp, #264	@ 0x108
 8012b84:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012b88:	ed81 7b00 	vstr	d7, [r1]
 8012b8c:	3a01      	subs	r2, #1
 8012b8e:	e736      	b.n	80129fe <__kernel_rem_pio2+0x20e>
 8012b90:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012b92:	2a02      	cmp	r2, #2
 8012b94:	dc0a      	bgt.n	8012bac <__kernel_rem_pio2+0x3bc>
 8012b96:	2a00      	cmp	r2, #0
 8012b98:	dc2d      	bgt.n	8012bf6 <__kernel_rem_pio2+0x406>
 8012b9a:	d046      	beq.n	8012c2a <__kernel_rem_pio2+0x43a>
 8012b9c:	f008 0007 	and.w	r0, r8, #7
 8012ba0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8012ba4:	ecbd 8b06 	vpop	{d8-d10}
 8012ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bac:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8012bae:	2a03      	cmp	r2, #3
 8012bb0:	d1f4      	bne.n	8012b9c <__kernel_rem_pio2+0x3ac>
 8012bb2:	a942      	add	r1, sp, #264	@ 0x108
 8012bb4:	f1a3 0208 	sub.w	r2, r3, #8
 8012bb8:	440a      	add	r2, r1
 8012bba:	4611      	mov	r1, r2
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	f1a1 0108 	sub.w	r1, r1, #8
 8012bc4:	dc52      	bgt.n	8012c6c <__kernel_rem_pio2+0x47c>
 8012bc6:	4621      	mov	r1, r4
 8012bc8:	2901      	cmp	r1, #1
 8012bca:	f1a2 0208 	sub.w	r2, r2, #8
 8012bce:	dc5d      	bgt.n	8012c8c <__kernel_rem_pio2+0x49c>
 8012bd0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8012ce0 <__kernel_rem_pio2+0x4f0>
 8012bd4:	aa42      	add	r2, sp, #264	@ 0x108
 8012bd6:	4413      	add	r3, r2
 8012bd8:	2c01      	cmp	r4, #1
 8012bda:	dc67      	bgt.n	8012cac <__kernel_rem_pio2+0x4bc>
 8012bdc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8012be0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8012be4:	2e00      	cmp	r6, #0
 8012be6:	d167      	bne.n	8012cb8 <__kernel_rem_pio2+0x4c8>
 8012be8:	ed87 5b00 	vstr	d5, [r7]
 8012bec:	ed87 6b02 	vstr	d6, [r7, #8]
 8012bf0:	ed87 7b04 	vstr	d7, [r7, #16]
 8012bf4:	e7d2      	b.n	8012b9c <__kernel_rem_pio2+0x3ac>
 8012bf6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8012ce0 <__kernel_rem_pio2+0x4f0>
 8012bfa:	aa42      	add	r2, sp, #264	@ 0x108
 8012bfc:	4413      	add	r3, r2
 8012bfe:	4622      	mov	r2, r4
 8012c00:	2a00      	cmp	r2, #0
 8012c02:	da24      	bge.n	8012c4e <__kernel_rem_pio2+0x45e>
 8012c04:	b34e      	cbz	r6, 8012c5a <__kernel_rem_pio2+0x46a>
 8012c06:	eeb1 7b46 	vneg.f64	d7, d6
 8012c0a:	ed87 7b00 	vstr	d7, [r7]
 8012c0e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8012c12:	aa44      	add	r2, sp, #272	@ 0x110
 8012c14:	2301      	movs	r3, #1
 8012c16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012c1a:	429c      	cmp	r4, r3
 8012c1c:	da20      	bge.n	8012c60 <__kernel_rem_pio2+0x470>
 8012c1e:	b10e      	cbz	r6, 8012c24 <__kernel_rem_pio2+0x434>
 8012c20:	eeb1 7b47 	vneg.f64	d7, d7
 8012c24:	ed87 7b02 	vstr	d7, [r7, #8]
 8012c28:	e7b8      	b.n	8012b9c <__kernel_rem_pio2+0x3ac>
 8012c2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8012ce0 <__kernel_rem_pio2+0x4f0>
 8012c2e:	aa42      	add	r2, sp, #264	@ 0x108
 8012c30:	4413      	add	r3, r2
 8012c32:	2c00      	cmp	r4, #0
 8012c34:	da05      	bge.n	8012c42 <__kernel_rem_pio2+0x452>
 8012c36:	b10e      	cbz	r6, 8012c3c <__kernel_rem_pio2+0x44c>
 8012c38:	eeb1 7b47 	vneg.f64	d7, d7
 8012c3c:	ed87 7b00 	vstr	d7, [r7]
 8012c40:	e7ac      	b.n	8012b9c <__kernel_rem_pio2+0x3ac>
 8012c42:	ed33 6b02 	vldmdb	r3!, {d6}
 8012c46:	3c01      	subs	r4, #1
 8012c48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012c4c:	e7f1      	b.n	8012c32 <__kernel_rem_pio2+0x442>
 8012c4e:	ed33 7b02 	vldmdb	r3!, {d7}
 8012c52:	3a01      	subs	r2, #1
 8012c54:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012c58:	e7d2      	b.n	8012c00 <__kernel_rem_pio2+0x410>
 8012c5a:	eeb0 7b46 	vmov.f64	d7, d6
 8012c5e:	e7d4      	b.n	8012c0a <__kernel_rem_pio2+0x41a>
 8012c60:	ecb2 6b02 	vldmia	r2!, {d6}
 8012c64:	3301      	adds	r3, #1
 8012c66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012c6a:	e7d6      	b.n	8012c1a <__kernel_rem_pio2+0x42a>
 8012c6c:	ed91 7b00 	vldr	d7, [r1]
 8012c70:	ed91 5b02 	vldr	d5, [r1, #8]
 8012c74:	3801      	subs	r0, #1
 8012c76:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012c7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012c7e:	ed81 6b00 	vstr	d6, [r1]
 8012c82:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012c86:	ed81 7b02 	vstr	d7, [r1, #8]
 8012c8a:	e798      	b.n	8012bbe <__kernel_rem_pio2+0x3ce>
 8012c8c:	ed92 7b00 	vldr	d7, [r2]
 8012c90:	ed92 5b02 	vldr	d5, [r2, #8]
 8012c94:	3901      	subs	r1, #1
 8012c96:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012c9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012c9e:	ed82 6b00 	vstr	d6, [r2]
 8012ca2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012ca6:	ed82 7b02 	vstr	d7, [r2, #8]
 8012caa:	e78d      	b.n	8012bc8 <__kernel_rem_pio2+0x3d8>
 8012cac:	ed33 6b02 	vldmdb	r3!, {d6}
 8012cb0:	3c01      	subs	r4, #1
 8012cb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012cb6:	e78f      	b.n	8012bd8 <__kernel_rem_pio2+0x3e8>
 8012cb8:	eeb1 5b45 	vneg.f64	d5, d5
 8012cbc:	eeb1 6b46 	vneg.f64	d6, d6
 8012cc0:	ed87 5b00 	vstr	d5, [r7]
 8012cc4:	eeb1 7b47 	vneg.f64	d7, d7
 8012cc8:	ed87 6b02 	vstr	d6, [r7, #8]
 8012ccc:	e790      	b.n	8012bf0 <__kernel_rem_pio2+0x400>
 8012cce:	bf00      	nop
 8012cd0:	00000000 	.word	0x00000000
 8012cd4:	41700000 	.word	0x41700000
 8012cd8:	00000000 	.word	0x00000000
 8012cdc:	3e700000 	.word	0x3e700000
	...

08012ce8 <__ieee754_hypot>:
 8012ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cea:	ec51 0b10 	vmov	r0, r1, d0
 8012cee:	ec53 2b11 	vmov	r2, r3, d1
 8012cf2:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8012cf6:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8012cfa:	42a5      	cmp	r5, r4
 8012cfc:	da05      	bge.n	8012d0a <__ieee754_hypot+0x22>
 8012cfe:	462e      	mov	r6, r5
 8012d00:	4625      	mov	r5, r4
 8012d02:	4634      	mov	r4, r6
 8012d04:	4606      	mov	r6, r0
 8012d06:	4610      	mov	r0, r2
 8012d08:	4632      	mov	r2, r6
 8012d0a:	4623      	mov	r3, r4
 8012d0c:	ec43 2b14 	vmov	d4, r2, r3
 8012d10:	1b2b      	subs	r3, r5, r4
 8012d12:	4629      	mov	r1, r5
 8012d14:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8012d18:	ec41 0b10 	vmov	d0, r0, r1
 8012d1c:	dd02      	ble.n	8012d24 <__ieee754_hypot+0x3c>
 8012d1e:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d24:	4b46      	ldr	r3, [pc, #280]	@ (8012e40 <__ieee754_hypot+0x158>)
 8012d26:	429d      	cmp	r5, r3
 8012d28:	dd58      	ble.n	8012ddc <__ieee754_hypot+0xf4>
 8012d2a:	4b46      	ldr	r3, [pc, #280]	@ (8012e44 <__ieee754_hypot+0x15c>)
 8012d2c:	429d      	cmp	r5, r3
 8012d2e:	dd0f      	ble.n	8012d50 <__ieee754_hypot+0x68>
 8012d30:	ee14 3a10 	vmov	r3, s8
 8012d34:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8012d38:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012d3c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8012d40:	4305      	orrs	r5, r0
 8012d42:	bf18      	it	ne
 8012d44:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8012d48:	431c      	orrs	r4, r3
 8012d4a:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8012d4e:	e7e8      	b.n	8012d22 <__ieee754_hypot+0x3a>
 8012d50:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8012d54:	4602      	mov	r2, r0
 8012d56:	462b      	mov	r3, r5
 8012d58:	ec43 2b10 	vmov	d0, r2, r3
 8012d5c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8012d60:	ec53 2b14 	vmov	r2, r3, d4
 8012d64:	4623      	mov	r3, r4
 8012d66:	ec43 2b14 	vmov	d4, r2, r3
 8012d6a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8012d6e:	4b36      	ldr	r3, [pc, #216]	@ (8012e48 <__ieee754_hypot+0x160>)
 8012d70:	429c      	cmp	r4, r3
 8012d72:	dc0e      	bgt.n	8012d92 <__ieee754_hypot+0xaa>
 8012d74:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8012d78:	da32      	bge.n	8012de0 <__ieee754_hypot+0xf8>
 8012d7a:	ee14 3a10 	vmov	r3, s8
 8012d7e:	4323      	orrs	r3, r4
 8012d80:	d0cf      	beq.n	8012d22 <__ieee754_hypot+0x3a>
 8012d82:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8012e38 <__ieee754_hypot+0x150>
 8012d86:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8012d8a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8012d8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012d92:	ee30 5b44 	vsub.f64	d5, d0, d4
 8012d96:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8012d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9e:	f04f 0200 	mov.w	r2, #0
 8012da2:	d52e      	bpl.n	8012e02 <__ieee754_hypot+0x11a>
 8012da4:	462b      	mov	r3, r5
 8012da6:	ec43 2b17 	vmov	d7, r2, r3
 8012daa:	ee30 6b07 	vadd.f64	d6, d0, d7
 8012dae:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012db2:	ee26 0b00 	vmul.f64	d0, d6, d0
 8012db6:	eea4 0b04 	vfma.f64	d0, d4, d4
 8012dba:	eea7 0b07 	vfma.f64	d0, d7, d7
 8012dbe:	f7ff f9e6 	bl	801218e <__ieee754_sqrt>
 8012dc2:	2e00      	cmp	r6, #0
 8012dc4:	d0ad      	beq.n	8012d22 <__ieee754_hypot+0x3a>
 8012dc6:	0533      	lsls	r3, r6, #20
 8012dc8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012dcc:	2000      	movs	r0, #0
 8012dce:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012dd2:	ec41 0b17 	vmov	d7, r0, r1
 8012dd6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012dda:	e7a2      	b.n	8012d22 <__ieee754_hypot+0x3a>
 8012ddc:	2600      	movs	r6, #0
 8012dde:	e7c6      	b.n	8012d6e <__ieee754_hypot+0x86>
 8012de0:	ec53 2b10 	vmov	r2, r3, d0
 8012de4:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8012de8:	462b      	mov	r3, r5
 8012dea:	ec43 2b10 	vmov	d0, r2, r3
 8012dee:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8012df2:	ec53 2b14 	vmov	r2, r3, d4
 8012df6:	4623      	mov	r3, r4
 8012df8:	ec43 2b14 	vmov	d4, r2, r3
 8012dfc:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8012e00:	e7c7      	b.n	8012d92 <__ieee754_hypot+0xaa>
 8012e02:	4623      	mov	r3, r4
 8012e04:	ec43 2b16 	vmov	d6, r2, r3
 8012e08:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8012e12:	ec43 2b17 	vmov	d7, r2, r3
 8012e16:	ee34 3b46 	vsub.f64	d3, d4, d6
 8012e1a:	eeb0 2b47 	vmov.f64	d2, d7
 8012e1e:	ee90 2b01 	vfnms.f64	d2, d0, d1
 8012e22:	ee24 0b02 	vmul.f64	d0, d4, d2
 8012e26:	eea3 0b07 	vfma.f64	d0, d3, d7
 8012e2a:	eea5 0b05 	vfma.f64	d0, d5, d5
 8012e2e:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012e32:	e7c4      	b.n	8012dbe <__ieee754_hypot+0xd6>
 8012e34:	f3af 8000 	nop.w
 8012e38:	00000000 	.word	0x00000000
 8012e3c:	7fd00000 	.word	0x7fd00000
 8012e40:	5f300000 	.word	0x5f300000
 8012e44:	7fefffff 	.word	0x7fefffff
 8012e48:	20afffff 	.word	0x20afffff
 8012e4c:	00000000 	.word	0x00000000

08012e50 <scalbn>:
 8012e50:	ee10 1a90 	vmov	r1, s1
 8012e54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012e58:	b98b      	cbnz	r3, 8012e7e <scalbn+0x2e>
 8012e5a:	ee10 3a10 	vmov	r3, s0
 8012e5e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012e62:	4319      	orrs	r1, r3
 8012e64:	d00a      	beq.n	8012e7c <scalbn+0x2c>
 8012e66:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012f18 <scalbn+0xc8>
 8012e6a:	4b37      	ldr	r3, [pc, #220]	@ (8012f48 <scalbn+0xf8>)
 8012e6c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012e70:	4298      	cmp	r0, r3
 8012e72:	da0b      	bge.n	8012e8c <scalbn+0x3c>
 8012e74:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012f20 <scalbn+0xd0>
 8012e78:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012e7c:	4770      	bx	lr
 8012e7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d107      	bne.n	8012e96 <scalbn+0x46>
 8012e86:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012e8a:	4770      	bx	lr
 8012e8c:	ee10 1a90 	vmov	r1, s1
 8012e90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012e94:	3b36      	subs	r3, #54	@ 0x36
 8012e96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012e9a:	4290      	cmp	r0, r2
 8012e9c:	dd0d      	ble.n	8012eba <scalbn+0x6a>
 8012e9e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8012f28 <scalbn+0xd8>
 8012ea2:	ee10 3a90 	vmov	r3, s1
 8012ea6:	eeb0 6b47 	vmov.f64	d6, d7
 8012eaa:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8012f30 <scalbn+0xe0>
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012eb4:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012eb8:	4770      	bx	lr
 8012eba:	4418      	add	r0, r3
 8012ebc:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8012ec0:	4298      	cmp	r0, r3
 8012ec2:	dcec      	bgt.n	8012e9e <scalbn+0x4e>
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	dd0a      	ble.n	8012ede <scalbn+0x8e>
 8012ec8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8012ecc:	ec53 2b10 	vmov	r2, r3, d0
 8012ed0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8012ed4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012ed8:	ec43 2b10 	vmov	d0, r2, r3
 8012edc:	4770      	bx	lr
 8012ede:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8012ee2:	da09      	bge.n	8012ef8 <scalbn+0xa8>
 8012ee4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8012f20 <scalbn+0xd0>
 8012ee8:	ee10 3a90 	vmov	r3, s1
 8012eec:	eeb0 6b47 	vmov.f64	d6, d7
 8012ef0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8012f38 <scalbn+0xe8>
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	e7db      	b.n	8012eb0 <scalbn+0x60>
 8012ef8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8012efc:	ec53 2b10 	vmov	r2, r3, d0
 8012f00:	3036      	adds	r0, #54	@ 0x36
 8012f02:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8012f06:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012f0a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012f40 <scalbn+0xf0>
 8012f0e:	ec43 2b10 	vmov	d0, r2, r3
 8012f12:	e7b1      	b.n	8012e78 <scalbn+0x28>
 8012f14:	f3af 8000 	nop.w
 8012f18:	00000000 	.word	0x00000000
 8012f1c:	43500000 	.word	0x43500000
 8012f20:	c2f8f359 	.word	0xc2f8f359
 8012f24:	01a56e1f 	.word	0x01a56e1f
 8012f28:	8800759c 	.word	0x8800759c
 8012f2c:	7e37e43c 	.word	0x7e37e43c
 8012f30:	8800759c 	.word	0x8800759c
 8012f34:	fe37e43c 	.word	0xfe37e43c
 8012f38:	c2f8f359 	.word	0xc2f8f359
 8012f3c:	81a56e1f 	.word	0x81a56e1f
 8012f40:	00000000 	.word	0x00000000
 8012f44:	3c900000 	.word	0x3c900000
 8012f48:	ffff3cb0 	.word	0xffff3cb0

08012f4c <_init>:
 8012f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f4e:	bf00      	nop
 8012f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f52:	bc08      	pop	{r3}
 8012f54:	469e      	mov	lr, r3
 8012f56:	4770      	bx	lr

08012f58 <_fini>:
 8012f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5a:	bf00      	nop
 8012f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f5e:	bc08      	pop	{r3}
 8012f60:	469e      	mov	lr, r3
 8012f62:	4770      	bx	lr
