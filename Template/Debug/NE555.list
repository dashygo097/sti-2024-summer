
NE555.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005784  08005784  00006784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800578c  0800578c  0000678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08005794  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  24000010  080057a4  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000110  080057a4  00007110  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000147a8  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025ea  00000000  00000000  0001b7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fc8  00000000  00000000  0001ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c54  00000000  00000000  0001ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036fb6  00000000  00000000  0001f9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001560a  00000000  00000000  000569a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161410  00000000  00000000  0006bfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cd3bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000426c  00000000  00000000  001cd400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001d166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005734 	.word	0x08005734

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005734 	.word	0x08005734

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <MX_GPIO_Init+0xb8>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e4:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <MX_GPIO_Init+0xb8>)
 80005e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_GPIO_Init+0xb8>)
 80005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <MX_GPIO_Init+0xb8>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000602:	4a1f      	ldr	r2, [pc, #124]	@ (8000680 <MX_GPIO_Init+0xb8>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060c:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_GPIO_Init+0xb8>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <MX_GPIO_Init+0xb8>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_GPIO_Init+0xb8>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_GPIO_Init+0xb8>)
 800062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4811      	ldr	r0, [pc, #68]	@ (8000684 <MX_GPIO_Init+0xbc>)
 800063e:	f000 ff8f 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <MX_GPIO_Init+0xbc>)
 800065a:	f000 fdb9 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_GPIO_Init+0xc0>)
 8000672:	f000 fdad 	bl	80011d0 <HAL_GPIO_Init>

}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	58024400 	.word	0x58024400
 8000684:	58020000 	.word	0x58020000
 8000688:	58020400 	.word	0x58020400

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000692:	f000 f931 	bl	80008f8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000696:	4b3e      	ldr	r3, [pc, #248]	@ (8000790 <main+0x104>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d11b      	bne.n	80006da <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a2:	f3bf 8f4f 	dsb	sy
}
 80006a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a8:	f3bf 8f6f 	isb	sy
}
 80006ac:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006ae:	4b38      	ldr	r3, [pc, #224]	@ (8000790 <main+0x104>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c2:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <main+0x104>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a32      	ldr	r2, [pc, #200]	@ (8000790 <main+0x104>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ce:	f3bf 8f4f 	dsb	sy
}
 80006d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d4:	f3bf 8f6f 	isb	sy
}
 80006d8:	e000      	b.n	80006dc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <main+0x104>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d138      	bne.n	800075a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <main+0x104>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006f0:	f3bf 8f4f 	dsb	sy
}
 80006f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <main+0x104>)
 80006f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006fc:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	0b5b      	lsrs	r3, r3, #13
 8000702:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000706:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	08db      	lsrs	r3, r3, #3
 800070c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000710:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	015a      	lsls	r2, r3, #5
 8000716:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800071a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000720:	491b      	ldr	r1, [pc, #108]	@ (8000790 <main+0x104>)
 8000722:	4313      	orrs	r3, r2
 8000724:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	603a      	str	r2, [r7, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1ef      	bne.n	8000712 <main+0x86>
    } while(sets-- != 0U);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1e5      	bne.n	8000708 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800073c:	f3bf 8f4f 	dsb	sy
}
 8000740:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <main+0x104>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <main+0x104>)
 8000748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800074c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074e:	f3bf 8f4f 	dsb	sy
}
 8000752:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000754:	f3bf 8f6f 	isb	sy
}
 8000758:	e000      	b.n	800075c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800075a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 fb3a 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f81c 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f7ff ff30 	bl	80005c8 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000768:	f000 f9fc 	bl	8000b64 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800076c:	f000 fa52 	bl	8000c14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int Pin_State ;
    /* USER CODE END WHILE */
	  Pin_State = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8000770:	2101      	movs	r1, #1
 8000772:	4808      	ldr	r0, [pc, #32]	@ (8000794 <main+0x108>)
 8000774:	f000 fedc 	bl	8001530 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,Pin_State);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	2102      	movs	r1, #2
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <main+0x10c>)
 8000786:	f000 feeb 	bl	8001560 <HAL_GPIO_WritePin>
  {
 800078a:	bf00      	nop
 800078c:	e7f0      	b.n	8000770 <main+0xe4>
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	58020400 	.word	0x58020400
 8000798:	58020000 	.word	0x58020000

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09e      	sub	sp, #120	@ 0x78
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a6:	224c      	movs	r2, #76	@ 0x4c
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 ff96 	bl	80056dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 ff8f 	bl	80056dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007be:	2002      	movs	r0, #2
 80007c0:	f000 fee8 	bl	8001594 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b48      	ldr	r3, [pc, #288]	@ (80008ec <SystemClock_Config+0x150>)
 80007ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007cc:	4a47      	ldr	r2, [pc, #284]	@ (80008ec <SystemClock_Config+0x150>)
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007d4:	4b45      	ldr	r3, [pc, #276]	@ (80008ec <SystemClock_Config+0x150>)
 80007d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b44      	ldr	r3, [pc, #272]	@ (80008f0 <SystemClock_Config+0x154>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a43      	ldr	r2, [pc, #268]	@ (80008f0 <SystemClock_Config+0x154>)
 80007e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b41      	ldr	r3, [pc, #260]	@ (80008f0 <SystemClock_Config+0x154>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f6:	bf00      	nop
 80007f8:	4b3d      	ldr	r3, [pc, #244]	@ (80008f0 <SystemClock_Config+0x154>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000804:	d1f8      	bne.n	80007f8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b3b      	ldr	r3, [pc, #236]	@ (80008f4 <SystemClock_Config+0x158>)
 8000808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800080c:	4a39      	ldr	r2, [pc, #228]	@ (80008f4 <SystemClock_Config+0x158>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000816:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <SystemClock_Config+0x158>)
 8000818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800081c:	f003 0302 	and.w	r3, r3, #2
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <SystemClock_Config+0x154>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a30      	ldr	r2, [pc, #192]	@ (80008f0 <SystemClock_Config+0x154>)
 800082e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <SystemClock_Config+0x154>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <SystemClock_Config+0x150>)
 8000840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000842:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <SystemClock_Config+0x150>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <SystemClock_Config+0x150>)
 800084c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000856:	bf00      	nop
 8000858:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <SystemClock_Config+0x154>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000864:	d1f8      	bne.n	8000858 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000866:	2301      	movs	r3, #1
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000874:	2302      	movs	r3, #2
 8000876:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000878:	2305      	movs	r3, #5
 800087a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800087c:	23c0      	movs	r3, #192	@ 0xc0
 800087e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000884:	2302      	movs	r3, #2
 8000886:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800088c:	2308      	movs	r3, #8
 800088e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000890:	2300      	movs	r3, #0
 8000892:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800089c:	4618      	mov	r0, r3
 800089e:	f000 feb3 	bl	8001608 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x110>
  {
    Error_Handler();
 80008a8:	f000 f884 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	233f      	movs	r3, #63	@ 0x3f
 80008ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2303      	movs	r3, #3
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b8:	2308      	movs	r3, #8
 80008ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008bc:	2340      	movs	r3, #64	@ 0x40
 80008be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c0:	2340      	movs	r3, #64	@ 0x40
 80008c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2104      	movs	r1, #4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 faf3 	bl	8001ec0 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80008e0:	f000 f868 	bl	80009b4 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3778      	adds	r7, #120	@ 0x78
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58000400 	.word	0x58000400
 80008f0:	58024800 	.word	0x58024800
 80008f4:	58024400 	.word	0x58024400

080008f8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800090a:	f000 fbe5 	bl	80010d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800090e:	2301      	movs	r3, #1
 8000910:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000912:	2300      	movs	r3, #0
 8000914:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000916:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800091a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800091c:	2312      	movs	r3, #18
 800091e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000920:	2300      	movs	r3, #0
 8000922:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000924:	2301      	movs	r3, #1
 8000926:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000928:	2303      	movs	r3, #3
 800092a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000934:	2301      	movs	r3, #1
 8000936:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000938:	2301      	movs	r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800093c:	463b      	mov	r3, r7
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fc02 	bl	8001148 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000944:	2301      	movs	r3, #1
 8000946:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000948:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800094c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800094e:	2310      	movs	r3, #16
 8000950:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800095a:	463b      	mov	r3, r7
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fbf3 	bl	8001148 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000962:	2302      	movs	r3, #2
 8000964:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MPU_Config+0xb4>)
 8000968:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800096a:	463b      	mov	r3, r7
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fbeb 	bl	8001148 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000972:	2303      	movs	r3, #3
 8000974:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MPU_Config+0xb8>)
 8000978:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800097a:	230e      	movs	r3, #14
 800097c:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800097e:	463b      	mov	r3, r7
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fbe1 	bl	8001148 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000986:	2304      	movs	r3, #4
 8000988:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800098a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800098e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000990:	230f      	movs	r3, #15
 8000992:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000994:	463b      	mov	r3, r7
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fbd6 	bl	8001148 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800099c:	2004      	movs	r0, #4
 800099e:	f000 fbb3 	bl	8001108 <HAL_MPU_Enable>

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	30020000 	.word	0x30020000
 80009b0:	30040000 	.word	0x30040000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_MspInit+0x30>)
 80009c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009cc:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_MspInit+0x30>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_MspInit+0x30>)
 80009d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	58024400 	.word	0x58024400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 fa35 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a58:	4b37      	ldr	r3, [pc, #220]	@ (8000b38 <SystemInit+0xe4>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a36      	ldr	r2, [pc, #216]	@ (8000b38 <SystemInit+0xe4>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a68:	4b34      	ldr	r3, [pc, #208]	@ (8000b3c <SystemInit+0xe8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	d807      	bhi.n	8000a84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a74:	4b31      	ldr	r3, [pc, #196]	@ (8000b3c <SystemInit+0xe8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f023 030f 	bic.w	r3, r3, #15
 8000a7c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b3c <SystemInit+0xe8>)
 8000a7e:	f043 0307 	orr.w	r3, r3, #7
 8000a82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a84:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <SystemInit+0xec>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a2d      	ldr	r2, [pc, #180]	@ (8000b40 <SystemInit+0xec>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a90:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <SystemInit+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <SystemInit+0xec>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4929      	ldr	r1, [pc, #164]	@ (8000b40 <SystemInit+0xec>)
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <SystemInit+0xf0>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aa2:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <SystemInit+0xe8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aae:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <SystemInit+0xe8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	4a21      	ldr	r2, [pc, #132]	@ (8000b3c <SystemInit+0xe8>)
 8000ab8:	f043 0307 	orr.w	r3, r3, #7
 8000abc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000abe:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <SystemInit+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <SystemInit+0xec>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <SystemInit+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <SystemInit+0xec>)
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <SystemInit+0xf4>)
 8000ad4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <SystemInit+0xec>)
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <SystemInit+0xf8>)
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <SystemInit+0xec>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	@ (8000b50 <SystemInit+0xfc>)
 8000ae0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <SystemInit+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <SystemInit+0xec>)
 8000aea:	4a19      	ldr	r2, [pc, #100]	@ (8000b50 <SystemInit+0xfc>)
 8000aec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <SystemInit+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <SystemInit+0xec>)
 8000af6:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <SystemInit+0xfc>)
 8000af8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <SystemInit+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <SystemInit+0xec>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0e      	ldr	r2, [pc, #56]	@ (8000b40 <SystemInit+0xec>)
 8000b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <SystemInit+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <SystemInit+0x100>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <SystemInit+0x104>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b1e:	d202      	bcs.n	8000b26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <SystemInit+0x108>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <SystemInit+0x10c>)
 8000b28:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	52002000 	.word	0x52002000
 8000b40:	58024400 	.word	0x58024400
 8000b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b48:	02020200 	.word	0x02020200
 8000b4c:	01ff0000 	.word	0x01ff0000
 8000b50:	01010280 	.word	0x01010280
 8000b54:	5c001000 	.word	0x5c001000
 8000b58:	ffff0000 	.word	0xffff0000
 8000b5c:	51008108 	.word	0x51008108
 8000b60:	52004000 	.word	0x52004000

08000b64 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b74:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_TIM7_Init+0x64>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <MX_TIM7_Init+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_TIM7_Init+0x64>)
 8000b7c:	22ef      	movs	r2, #239	@ 0xef
 8000b7e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_TIM7_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <MX_TIM7_Init+0x64>)
 8000b88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_TIM7_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <MX_TIM7_Init+0x64>)
 8000b96:	f003 fb4b 	bl	8004230 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ba0:	f7ff ff08 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_TIM7_Init+0x64>)
 8000bb2:	f003 fc2f 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000bbc:	f7ff fefa 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2400002c 	.word	0x2400002c
 8000bcc:	40001400 	.word	0x40001400

08000bd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <HAL_TIM_Base_MspInit+0x3c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d10e      	bne.n	8000c00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <HAL_TIM_Base_MspInit+0x40>)
 8000be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000be8:	4a09      	ldr	r2, [pc, #36]	@ (8000c10 <HAL_TIM_Base_MspInit+0x40>)
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <HAL_TIM_Base_MspInit+0x40>)
 8000bf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bf8:	f003 0320 	and.w	r3, r3, #32
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40001400 	.word	0x40001400
 8000c10:	58024400 	.word	0x58024400

08000c14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <MX_USART1_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c5e:	f003 fc67 	bl	8004530 <HAL_UART_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f7ff fea4 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c70:	f004 fc69 	bl	8005546 <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f7ff fe9b 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c82:	f004 fc9e 	bl	80055c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f7ff fe92 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c92:	f004 fc1f 	bl	80054d4 <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f7ff fe8a 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000078 	.word	0x24000078
 8000ca8:	40011000 	.word	0x40011000

08000cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ba      	sub	sp, #232	@ 0xe8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	22c0      	movs	r2, #192	@ 0xc0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 fd05 	bl	80056dc <memset>
  if(uartHandle->Instance==USART1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a27      	ldr	r2, [pc, #156]	@ (8000d74 <HAL_UART_MspInit+0xc8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d146      	bne.n	8000d6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cdc:	f04f 0201 	mov.w	r2, #1
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fc70 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cfe:	f7ff fe59 	bl	80009b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d08:	4a1b      	ldr	r2, [pc, #108]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d3e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_UART_MspInit+0xd0>)
 8000d66:	f000 fa33 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	37e8      	adds	r7, #232	@ 0xe8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40011000 	.word	0x40011000
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020400 	.word	0x58020400

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d84:	f7ff fe66 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f004 fc9d 	bl	80056ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fc6b 	bl	800068c <main>
  bx  lr
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dc0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000dc4:	08005794 	.word	0x08005794
  ldr r2, =_sbss
 8000dc8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000dcc:	24000110 	.word	0x24000110

08000dd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC3_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f000 f94a 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000de0:	f001 fa24 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8000de4:	4602      	mov	r2, r0
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <HAL_Init+0x68>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	4913      	ldr	r1, [pc, #76]	@ (8000e40 <HAL_Init+0x6c>)
 8000df2:	5ccb      	ldrb	r3, [r1, r3]
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <HAL_Init+0x68>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <HAL_Init+0x6c>)
 8000e08:	5cd3      	ldrb	r3, [r2, r3]
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
 8000e14:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <HAL_Init+0x70>)
 8000e16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e18:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <HAL_Init+0x74>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f000 f814 	bl	8000e4c <HAL_InitTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e002      	b.n	8000e34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2e:	f7ff fdc7 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	0800574c 	.word	0x0800574c
 8000e44:	24000004 	.word	0x24000004
 8000e48:	24000000 	.word	0x24000000

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_InitTick+0x60>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e021      	b.n	8000ea4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_InitTick+0x64>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <HAL_InitTick+0x60>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f921 	bl	80010be <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e94:	f000 f8f9 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	@ (8000eb4 <HAL_InitTick+0x68>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2400000c 	.word	0x2400000c
 8000eb0:	24000000 	.word	0x24000000
 8000eb4:	24000008 	.word	0x24000008

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2400000c 	.word	0x2400000c
 8000edc:	2400010c 	.word	0x2400010c

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2400010c 	.word	0x2400010c

08000ef8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetREVID+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0c1b      	lsrs	r3, r3, #16
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	5c001000 	.word	0x5c001000

08000f10 <__NVIC_SetPriorityGrouping>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x40>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x40>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	05fa0000 	.word	0x05fa0000

08000f58 <__NVIC_GetPriorityGrouping>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff47 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff5e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff90 	bl	8000fc8 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5f 	bl	8000f74 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffb2 	bl	8001030 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010dc:	f3bf 8f5f 	dmb	sy
}
 80010e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HAL_MPU_Disable+0x28>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <HAL_MPU_Disable+0x28>)
 80010e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_MPU_Disable+0x2c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	e000ed90 	.word	0xe000ed90

08001108 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <HAL_MPU_Enable+0x38>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_MPU_Enable+0x3c>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111e:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <HAL_MPU_Enable+0x3c>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001124:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed90 	.word	0xe000ed90
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	785a      	ldrb	r2, [r3, #1]
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_MPU_ConfigRegion+0x84>)
 8001156:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d029      	beq.n	80011b4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001160:	4a1a      	ldr	r2, [pc, #104]	@ (80011cc <HAL_MPU_ConfigRegion+0x84>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7b1b      	ldrb	r3, [r3, #12]
 800116c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7adb      	ldrb	r3, [r3, #11]
 8001172:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001174:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a9b      	ldrb	r3, [r3, #10]
 800117a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800117c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b5b      	ldrb	r3, [r3, #13]
 8001182:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001184:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7b9b      	ldrb	r3, [r3, #14]
 800118a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800118c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7bdb      	ldrb	r3, [r3, #15]
 8001192:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001194:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7a5b      	ldrb	r3, [r3, #9]
 800119a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800119c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7a1b      	ldrb	r3, [r3, #8]
 80011a2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011a4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ae:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80011b2:	e005      	b.n	80011c0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_MPU_ConfigRegion+0x84>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <HAL_MPU_ConfigRegion+0x84>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed90 	.word	0xe000ed90

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011de:	4b89      	ldr	r3, [pc, #548]	@ (8001404 <HAL_GPIO_Init+0x234>)
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011e2:	e194      	b.n	800150e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8186 	beq.w	8001508 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d005      	beq.n	8001214 <HAL_GPIO_Init+0x44>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d130      	bne.n	8001276 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124a:	2201      	movs	r2, #1
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 0201 	and.w	r2, r3, #1
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b03      	cmp	r3, #3
 8001280:	d017      	beq.n	80012b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80e0 	beq.w	8001508 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <HAL_GPIO_Init+0x238>)
 800134a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800134e:	4a2e      	ldr	r2, [pc, #184]	@ (8001408 <HAL_GPIO_Init+0x238>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001358:	4b2b      	ldr	r3, [pc, #172]	@ (8001408 <HAL_GPIO_Init+0x238>)
 800135a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001366:	4a29      	ldr	r2, [pc, #164]	@ (800140c <HAL_GPIO_Init+0x23c>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a20      	ldr	r2, [pc, #128]	@ (8001410 <HAL_GPIO_Init+0x240>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d052      	beq.n	8001438 <HAL_GPIO_Init+0x268>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1f      	ldr	r2, [pc, #124]	@ (8001414 <HAL_GPIO_Init+0x244>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_GPIO_Init+0x22e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <HAL_GPIO_Init+0x248>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x22a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_GPIO_Init+0x24c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <HAL_GPIO_Init+0x250>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001424 <HAL_GPIO_Init+0x254>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001428 <HAL_GPIO_Init+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a19      	ldr	r2, [pc, #100]	@ (800142c <HAL_GPIO_Init+0x25c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <HAL_GPIO_Init+0x260>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <HAL_GPIO_Init+0x264>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x20e>
 80013da:	2309      	movs	r3, #9
 80013dc:	e02d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013de:	230a      	movs	r3, #10
 80013e0:	e02b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e029      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e027      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e025      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e023      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e021      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e01f      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e01d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e01b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 8001402:	bf00      	nop
 8001404:	58000080 	.word	0x58000080
 8001408:	58024400 	.word	0x58024400
 800140c:	58000400 	.word	0x58000400
 8001410:	58020000 	.word	0x58020000
 8001414:	58020400 	.word	0x58020400
 8001418:	58020800 	.word	0x58020800
 800141c:	58020c00 	.word	0x58020c00
 8001420:	58021000 	.word	0x58021000
 8001424:	58021400 	.word	0x58021400
 8001428:	58021800 	.word	0x58021800
 800142c:	58021c00 	.word	0x58021c00
 8001430:	58022000 	.word	0x58022000
 8001434:	58022400 	.word	0x58022400
 8001438:	2300      	movs	r3, #0
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144a:	4938      	ldr	r1, [pc, #224]	@ (800152c <HAL_GPIO_Init+0x35c>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800147e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	3301      	adds	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f ae63 	bne.w	80011e4 <HAL_GPIO_Init+0x14>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3724      	adds	r7, #36	@ 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58000400 	.word	0x58000400

08001530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e001      	b.n	8001552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_PWREx_ConfigSupply+0x70>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d00a      	beq.n	80015be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_PWREx_ConfigSupply+0x70>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d001      	beq.n	80015ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e01f      	b.n	80015fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e01d      	b.n	80015fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_PWREx_ConfigSupply+0x70>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	490f      	ldr	r1, [pc, #60]	@ (8001604 <HAL_PWREx_ConfigSupply+0x70>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015ce:	f7ff fc87 	bl	8000ee0 <HAL_GetTick>
 80015d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015d4:	e009      	b.n	80015ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015d6:	f7ff fc83 	bl	8000ee0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e4:	d901      	bls.n	80015ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e007      	b.n	80015fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_PWREx_ConfigSupply+0x70>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015f6:	d1ee      	bne.n	80015d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	58024800 	.word	0x58024800

08001608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	@ 0x30
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f000 bc48 	b.w	8001eac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 808c 	beq.w	8001742 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162a:	4b96      	ldr	r3, [pc, #600]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001634:	4b93      	ldr	r3, [pc, #588]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800163a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800163c:	2b10      	cmp	r3, #16
 800163e:	d007      	beq.n	8001650 <HAL_RCC_OscConfig+0x48>
 8001640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001642:	2b18      	cmp	r3, #24
 8001644:	d111      	bne.n	800166a <HAL_RCC_OscConfig+0x62>
 8001646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b8c      	ldr	r3, [pc, #560]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d071      	beq.n	8001740 <HAL_RCC_OscConfig+0x138>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d16d      	bne.n	8001740 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	f000 bc21 	b.w	8001eac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x7a>
 8001674:	4b83      	ldr	r3, [pc, #524]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a82      	ldr	r2, [pc, #520]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e02e      	b.n	80016e0 <HAL_RCC_OscConfig+0xd8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x9c>
 800168a:	4b7e      	ldr	r3, [pc, #504]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7d      	ldr	r2, [pc, #500]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b7b      	ldr	r3, [pc, #492]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a7a      	ldr	r2, [pc, #488]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0xd8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0xc0>
 80016ae:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a74      	ldr	r2, [pc, #464]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b72      	ldr	r3, [pc, #456]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a71      	ldr	r2, [pc, #452]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0xd8>
 80016c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6d      	ldr	r2, [pc, #436]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d015      	beq.n	8001714 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fbfa 	bl	8000ee0 <HAL_GetTick>
 80016ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fbf6 	bl	8000ee0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e3d2      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001706:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ee      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe8>
 8001712:	e016      	b.n	8001742 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fbe4 	bl	8000ee0 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fbe0 	bl	8000ee0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e3bc      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001732:	4b54      	ldr	r3, [pc, #336]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ee      	bne.n	800171c <HAL_RCC_OscConfig+0x114>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80cb 	beq.w	80018e6 <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001750:	4b4c      	ldr	r3, [pc, #304]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800175a:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800175c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_RCC_OscConfig+0x16e>
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	2b18      	cmp	r3, #24
 800176a:	d156      	bne.n	800181a <HAL_RCC_OscConfig+0x212>
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d151      	bne.n	800181a <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001776:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x186>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e38e      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800178e:	4b3d      	ldr	r3, [pc, #244]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0219 	bic.w	r2, r3, #25
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	493a      	ldr	r1, [pc, #232]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb9e 	bl	8000ee0 <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fb9a 	bl	8000ee0 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e378      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ba:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	f7ff fb97 	bl	8000ef8 <HAL_GetREVID>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d817      	bhi.n	8001804 <HAL_RCC_OscConfig+0x1fc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2b40      	cmp	r3, #64	@ 0x40
 80017da:	d108      	bne.n	80017ee <HAL_RCC_OscConfig+0x1e6>
 80017dc:	4b29      	ldr	r3, [pc, #164]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017e4:	4a27      	ldr	r2, [pc, #156]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ec:	e07b      	b.n	80018e6 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	031b      	lsls	r3, r3, #12
 80017fc:	4921      	ldr	r1, [pc, #132]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001802:	e070      	b.n	80018e6 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b1f      	ldr	r3, [pc, #124]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	491c      	ldr	r1, [pc, #112]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	e065      	b.n	80018e6 <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d048      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 0219 	bic.w	r2, r3, #25
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4915      	ldr	r1, [pc, #84]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fb54 	bl	8000ee0 <HAL_GetTick>
 8001838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff fb50 	bl	8000ee0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e32e      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	f7ff fb4d 	bl	8000ef8 <HAL_GetREVID>
 800185e:	4603      	mov	r3, r0
 8001860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001864:	4293      	cmp	r3, r2
 8001866:	d81a      	bhi.n	800189e <HAL_RCC_OscConfig+0x296>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b40      	cmp	r3, #64	@ 0x40
 800186e:	d10b      	bne.n	8001888 <HAL_RCC_OscConfig+0x280>
 8001870:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001878:	4a02      	ldr	r2, [pc, #8]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187e:	6053      	str	r3, [r2, #4]
 8001880:	e031      	b.n	80018e6 <HAL_RCC_OscConfig+0x2de>
 8001882:	bf00      	nop
 8001884:	58024400 	.word	0x58024400
 8001888:	4b9c      	ldr	r3, [pc, #624]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	031b      	lsls	r3, r3, #12
 8001896:	4999      	ldr	r1, [pc, #612]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
 800189c:	e023      	b.n	80018e6 <HAL_RCC_OscConfig+0x2de>
 800189e:	4b97      	ldr	r3, [pc, #604]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	061b      	lsls	r3, r3, #24
 80018ac:	4993      	ldr	r1, [pc, #588]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
 80018b2:	e018      	b.n	80018e6 <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b4:	4b91      	ldr	r3, [pc, #580]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a90      	ldr	r2, [pc, #576]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb0e 	bl	8000ee0 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fb0a 	bl	8000ee0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e2e8      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018da:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80a9 	beq.w	8001a46 <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f4:	4b81      	ldr	r3, [pc, #516]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018fe:	4b7f      	ldr	r3, [pc, #508]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b08      	cmp	r3, #8
 8001908:	d007      	beq.n	800191a <HAL_RCC_OscConfig+0x312>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b18      	cmp	r3, #24
 800190e:	d13a      	bne.n	8001986 <HAL_RCC_OscConfig+0x37e>
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d135      	bne.n	8001986 <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800191a:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x32a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	2b80      	cmp	r3, #128	@ 0x80
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e2bc      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001932:	f7ff fae1 	bl	8000ef8 <HAL_GetREVID>
 8001936:	4603      	mov	r3, r0
 8001938:	f241 0203 	movw	r2, #4099	@ 0x1003
 800193c:	4293      	cmp	r3, r2
 800193e:	d817      	bhi.n	8001970 <HAL_RCC_OscConfig+0x368>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	2b20      	cmp	r3, #32
 8001946:	d108      	bne.n	800195a <HAL_RCC_OscConfig+0x352>
 8001948:	4b6c      	ldr	r3, [pc, #432]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001950:	4a6a      	ldr	r2, [pc, #424]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001952:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001956:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001958:	e075      	b.n	8001a46 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800195a:	4b68      	ldr	r3, [pc, #416]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	069b      	lsls	r3, r3, #26
 8001968:	4964      	ldr	r1, [pc, #400]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800196e:	e06a      	b.n	8001a46 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001970:	4b62      	ldr	r3, [pc, #392]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	495f      	ldr	r1, [pc, #380]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001984:	e05f      	b.n	8001a46 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d042      	beq.n	8001a14 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800198e:	4b5b      	ldr	r3, [pc, #364]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5a      	ldr	r2, [pc, #360]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff faa1 	bl	8000ee0 <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019a2:	f7ff fa9d 	bl	8000ee0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e27b      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019b4:	4b51      	ldr	r3, [pc, #324]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019c0:	f7ff fa9a 	bl	8000ef8 <HAL_GetREVID>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d817      	bhi.n	80019fe <HAL_RCC_OscConfig+0x3f6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3e0>
 80019d6:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80019de:	4a47      	ldr	r2, [pc, #284]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019e4:	6053      	str	r3, [r2, #4]
 80019e6:	e02e      	b.n	8001a46 <HAL_RCC_OscConfig+0x43e>
 80019e8:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	069b      	lsls	r3, r3, #26
 80019f6:	4941      	ldr	r1, [pc, #260]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e023      	b.n	8001a46 <HAL_RCC_OscConfig+0x43e>
 80019fe:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	493b      	ldr	r1, [pc, #236]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60cb      	str	r3, [r1, #12]
 8001a12:	e018      	b.n	8001a46 <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a14:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a38      	ldr	r2, [pc, #224]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fa5e 	bl	8000ee0 <HAL_GetTick>
 8001a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a28:	f7ff fa5a 	bl	8000ee0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e238      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a3a:	4b30      	ldr	r3, [pc, #192]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d019      	beq.n	8001a8e <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a5e:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff fa3b 	bl	8000ee0 <HAL_GetTick>
 8001a6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6e:	f7ff fa37 	bl	8000ee0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e215      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x466>
 8001a8c:	e018      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a92:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fa21 	bl	8000ee0 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fa1d 	bl	8000ee0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1fb      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d039      	beq.n	8001b40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f9fe 	bl	8000ee0 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae8:	f7ff f9fa 	bl	8000ee0 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d904      	bls.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1d8      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
 8001afa:	bf00      	nop
 8001afc:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b00:	4b65      	ldr	r3, [pc, #404]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ed      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x4e0>
 8001b0c:	e018      	b.n	8001b40 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b0e:	4b62      	ldr	r3, [pc, #392]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a61      	ldr	r2, [pc, #388]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001b14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f9e1 	bl	8000ee0 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b22:	f7ff f9dd 	bl	8000ee0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1bb      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b34:	4b58      	ldr	r3, [pc, #352]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8081 	beq.w	8001c50 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b4e:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_OscConfig+0x694>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <HAL_RCC_OscConfig+0x694>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b5a:	f7ff f9c1 	bl	8000ee0 <HAL_GetTick>
 8001b5e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7ff f9bd 	bl	8000ee0 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	@ 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e19b      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b74:	4b49      	ldr	r3, [pc, #292]	@ (8001c9c <HAL_RCC_OscConfig+0x694>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x58e>
 8001b88:	4b43      	ldr	r3, [pc, #268]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8c:	4a42      	ldr	r2, [pc, #264]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b94:	e02d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x5ea>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5b0>
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001baa:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	4a3a      	ldr	r2, [pc, #232]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x5ea>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x5d2>
 8001bc0:	4b35      	ldr	r3, [pc, #212]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc4:	4a34      	ldr	r2, [pc, #208]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bcc:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd0:	4a31      	ldr	r2, [pc, #196]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x5ea>
 8001bda:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bde:	4a2e      	ldr	r2, [pc, #184]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bea:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f971 	bl	8000ee0 <HAL_GetTick>
 8001bfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f96d 	bl	8000ee0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e149      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x5fa>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff f95b 	bl	8000ee0 <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7ff f957 	bl	8000ee0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e133      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c44:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8128 	beq.w	8001eaa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c62:	2b18      	cmp	r3, #24
 8001c64:	f000 80b8 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	f040 8099 	bne.w	8001da4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a08      	ldr	r2, [pc, #32]	@ (8001c98 <HAL_RCC_OscConfig+0x690>)
 8001c78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f92f 	bl	8000ee0 <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c84:	e00c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f92b 	bl	8000ee0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d905      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e109      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ca0:	4b84      	ldr	r3, [pc, #528]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ec      	bne.n	8001c86 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b81      	ldr	r3, [pc, #516]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cb0:	4b81      	ldr	r3, [pc, #516]	@ (8001eb8 <HAL_RCC_OscConfig+0x8b0>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	497c      	ldr	r1, [pc, #496]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	628b      	str	r3, [r1, #40]	@ 0x28
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	025b      	lsls	r3, r3, #9
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001cf6:	496f      	ldr	r1, [pc, #444]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cfc:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d00:	4a6c      	ldr	r2, [pc, #432]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d08:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001ebc <HAL_RCC_OscConfig+0x8b4>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d14:	00d2      	lsls	r2, r2, #3
 8001d16:	4967      	ldr	r1, [pc, #412]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d1c:	4b65      	ldr	r3, [pc, #404]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	f023 020c 	bic.w	r2, r3, #12
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4962      	ldr	r1, [pc, #392]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d2e:	4b61      	ldr	r3, [pc, #388]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	f023 0202 	bic.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	495e      	ldr	r1, [pc, #376]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d40:	4b5c      	ldr	r3, [pc, #368]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d4c:	4b59      	ldr	r3, [pc, #356]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	4a58      	ldr	r2, [pc, #352]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d58:	4b56      	ldr	r3, [pc, #344]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	4a55      	ldr	r2, [pc, #340]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d64:	4b53      	ldr	r3, [pc, #332]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	4a52      	ldr	r2, [pc, #328]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b50      	ldr	r3, [pc, #320]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f8b0 	bl	8000ee0 <HAL_GetTick>
 8001d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f8ac 	bl	8000ee0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e08a      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x77c>
 8001da2:	e082      	b.n	8001eaa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b43      	ldr	r3, [pc, #268]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a42      	ldr	r2, [pc, #264]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff f896 	bl	8000ee0 <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff f892 	bl	8000ee0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e070      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dca:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x7b0>
 8001dd6:	e068      	b.n	8001eaa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001dd8:	4b36      	ldr	r3, [pc, #216]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001dde:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d031      	beq.n	8001e50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0203 	and.w	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d12a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d122      	bne.n	8001e50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d11a      	bne.n	8001e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0a5b      	lsrs	r3, r3, #9
 8001e1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d111      	bne.n	8001e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	0e1b      	lsrs	r3, r3, #24
 8001e42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e02b      	b.n	8001eac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d01f      	beq.n	8001eaa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e76:	f7ff f833 	bl	8000ee0 <HAL_GetTick>
 8001e7a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e7c:	bf00      	nop
 8001e7e:	f7ff f82f 	bl	8000ee0 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d0f9      	beq.n	8001e7e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_OscConfig+0x8b4>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e96:	00d2      	lsls	r2, r2, #3
 8001e98:	4906      	ldr	r1, [pc, #24]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3730      	adds	r7, #48	@ 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	fffffc0c 	.word	0xfffffc0c
 8001ebc:	ffff0007 	.word	0xffff0007

08001ec0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e19c      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b87      	ldr	r3, [pc, #540]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 020f 	bic.w	r2, r3, #15
 8001eea:	4985      	ldr	r1, [pc, #532]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b83      	ldr	r3, [pc, #524]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e184      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b7b      	ldr	r3, [pc, #492]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f20:	4b78      	ldr	r3, [pc, #480]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4975      	ldr	r1, [pc, #468]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	496a      	ldr	r1, [pc, #424]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	4b64      	ldr	r3, [pc, #400]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f7c:	4b61      	ldr	r3, [pc, #388]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	495e      	ldr	r1, [pc, #376]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	4b59      	ldr	r3, [pc, #356]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001faa:	4b56      	ldr	r3, [pc, #344]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4953      	ldr	r1, [pc, #332]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f023 020f 	bic.w	r2, r3, #15
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4947      	ldr	r1, [pc, #284]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d055      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ff6:	4b43      	ldr	r3, [pc, #268]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4940      	ldr	r1, [pc, #256]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002004:	4313      	orrs	r3, r2
 8002006:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d107      	bne.n	8002020 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002010:	4b3c      	ldr	r3, [pc, #240]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d121      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0f6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d107      	bne.n	8002038 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002028:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d115      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0ea      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002040:	4b30      	ldr	r3, [pc, #192]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0de      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002050:	4b2c      	ldr	r3, [pc, #176]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002060:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4925      	ldr	r1, [pc, #148]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800206e:	4313      	orrs	r3, r2
 8002070:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002072:	f7fe ff35 	bl	8000ee0 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002078:	e00a      	b.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe ff31 	bl	8000ee0 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0be      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002090:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	429a      	cmp	r2, r3
 80020a0:	d1eb      	bne.n	800207a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d208      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	490e      	ldr	r1, [pc, #56]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d214      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4906      	ldr	r1, [pc, #24]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e086      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
 8002100:	52002000 	.word	0x52002000
 8002104:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002120:	429a      	cmp	r2, r3
 8002122:	d208      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002124:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4939      	ldr	r1, [pc, #228]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002132:	4313      	orrs	r3, r2
 8002134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800214e:	429a      	cmp	r2, r3
 8002150:	d208      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	492e      	ldr	r1, [pc, #184]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002160:	4313      	orrs	r3, r2
 8002162:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d010      	beq.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800217c:	429a      	cmp	r2, r3
 800217e:	d208      	bcs.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4922      	ldr	r1, [pc, #136]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800218e:	4313      	orrs	r3, r2
 8002190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d208      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4917      	ldr	r1, [pc, #92]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021c0:	f000 f834 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	4912      	ldr	r1, [pc, #72]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_RCC_ClockConfig+0x360>)
 80021f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_RCC_ClockConfig+0x364>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCC_ClockConfig+0x368>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fe22 	bl	8000e4c <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	58024400 	.word	0x58024400
 800221c:	0800574c 	.word	0x0800574c
 8002220:	24000004 	.word	0x24000004
 8002224:	24000000 	.word	0x24000000
 8002228:	24000008 	.word	0x24000008

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4bb3      	ldr	r3, [pc, #716]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800223a:	2b18      	cmp	r3, #24
 800223c:	f200 8155 	bhi.w	80024ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002240:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002246:	bf00      	nop
 8002248:	080022ad 	.word	0x080022ad
 800224c:	080024eb 	.word	0x080024eb
 8002250:	080024eb 	.word	0x080024eb
 8002254:	080024eb 	.word	0x080024eb
 8002258:	080024eb 	.word	0x080024eb
 800225c:	080024eb 	.word	0x080024eb
 8002260:	080024eb 	.word	0x080024eb
 8002264:	080024eb 	.word	0x080024eb
 8002268:	080022d3 	.word	0x080022d3
 800226c:	080024eb 	.word	0x080024eb
 8002270:	080024eb 	.word	0x080024eb
 8002274:	080024eb 	.word	0x080024eb
 8002278:	080024eb 	.word	0x080024eb
 800227c:	080024eb 	.word	0x080024eb
 8002280:	080024eb 	.word	0x080024eb
 8002284:	080024eb 	.word	0x080024eb
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080024eb 	.word	0x080024eb
 8002290:	080024eb 	.word	0x080024eb
 8002294:	080024eb 	.word	0x080024eb
 8002298:	080024eb 	.word	0x080024eb
 800229c:	080024eb 	.word	0x080024eb
 80022a0:	080024eb 	.word	0x080024eb
 80022a4:	080024eb 	.word	0x080024eb
 80022a8:	080022df 	.word	0x080022df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ac:	4b94      	ldr	r3, [pc, #592]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022b8:	4b91      	ldr	r3, [pc, #580]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	4a90      	ldr	r2, [pc, #576]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022ca:	e111      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ce:	61bb      	str	r3, [r7, #24]
      break;
 80022d0:	e10e      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80022d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022d4:	61bb      	str	r3, [r7, #24]
      break;
 80022d6:	e10b      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80022d8:	4b8c      	ldr	r3, [pc, #560]	@ (800250c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022da:	61bb      	str	r3, [r7, #24]
      break;
 80022dc:	e108      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022e8:	4b85      	ldr	r3, [pc, #532]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022f4:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022fe:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80e1 	beq.w	80024e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b02      	cmp	r3, #2
 8002326:	f000 8083 	beq.w	8002430 <HAL_RCC_GetSysClockFreq+0x204>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f200 80a1 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x248>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x114>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d056      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800233e:	e099      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002340:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02d      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800234c:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	4a6b      	ldr	r2, [pc, #428]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002376:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002386:	ed97 6a02 	vldr	s12, [r7, #8]
 800238a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800238e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800239a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023a6:	e087      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002514 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ea:	e065      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fe:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002412:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800242e:	e043      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800251c <HAL_RCC_GetSysClockFreq+0x2f0>
 800243e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002442:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002452:	ed97 6a02 	vldr	s12, [r7, #8]
 8002456:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800245a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002472:	e021      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c2:	3301      	adds	r3, #1
 80024c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024dc:	ee17 3a90 	vmov	r3, s15
 80024e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
      break;
 80024e8:	e002      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024ec:	61bb      	str	r3, [r7, #24]
      break;
 80024ee:	bf00      	nop
  }

  return sysclockfreq;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	58024400 	.word	0x58024400
 8002504:	03d09000 	.word	0x03d09000
 8002508:	003d0900 	.word	0x003d0900
 800250c:	017d7840 	.word	0x017d7840
 8002510:	46000000 	.word	0x46000000
 8002514:	4c742400 	.word	0x4c742400
 8002518:	4a742400 	.word	0x4a742400
 800251c:	4bbebc20 	.word	0x4bbebc20

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002526:	f7ff fe81 	bl	800222c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490f      	ldr	r1, [pc, #60]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002544:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 800255c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800255e:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58024400 	.word	0x58024400
 8002574:	0800574c 	.word	0x0800574c
 8002578:	24000004 	.word	0x24000004
 800257c:	24000000 	.word	0x24000000

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002584:	f7ff ffcc 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58024400 	.word	0x58024400
 80025a8:	0800574c 	.word	0x0800574c

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025b0:	f7ff ffb6 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58024400 	.word	0x58024400
 80025d4:	0800574c 	.word	0x0800574c

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0ca      	sub	sp, #296	@ 0x128
 80025de:	af00      	add	r7, sp, #0
 80025e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025fc:	2500      	movs	r5, #0
 80025fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002602:	d049      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800260a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800260e:	d02f      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002610:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002614:	d828      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800261a:	d01a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800261c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002620:	d822      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800262a:	d007      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800262c:	e01c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262e:	4bb8      	ldr	r3, [pc, #736]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	4ab7      	ldr	r2, [pc, #732]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800263a:	e01a      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800263c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002640:	3308      	adds	r3, #8
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fc8f 	bl	8003f68 <RCCEx_PLL2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002650:	e00f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002656:	3328      	adds	r3, #40	@ 0x28
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fd36 	bl	80040cc <RCCEx_PLL3_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002666:	e004      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800267a:	4ba5      	ldr	r3, [pc, #660]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800267c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002688:	4aa1      	ldr	r2, [pc, #644]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268a:	430b      	orrs	r3, r1
 800268c:	6513      	str	r3, [r2, #80]	@ 0x50
 800268e:	e003      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80026a4:	f04f 0900 	mov.w	r9, #0
 80026a8:	ea58 0309 	orrs.w	r3, r8, r9
 80026ac:	d047      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d82a      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d5 	.word	0x080026d5
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	08002717 	.word	0x08002717
 80026d0:	08002717 	.word	0x08002717
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e0:	e01a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e6:	3308      	adds	r3, #8
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fc3c 	bl	8003f68 <RCCEx_PLL2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026f6:	e00f      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026fc:	3328      	adds	r3, #40	@ 0x28
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fce3 	bl	80040cc <RCCEx_PLL3_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800270c:	e004      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002720:	4b7b      	ldr	r3, [pc, #492]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002724:	f023 0107 	bic.w	r1, r3, #7
 8002728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	4a78      	ldr	r2, [pc, #480]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002730:	430b      	orrs	r3, r1
 8002732:	6513      	str	r3, [r2, #80]	@ 0x50
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800273a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800273e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800274a:	f04f 0b00 	mov.w	fp, #0
 800274e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002752:	d04c      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800275e:	d030      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002764:	d829      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002766:	2bc0      	cmp	r3, #192	@ 0xc0
 8002768:	d02d      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800276a:	2bc0      	cmp	r3, #192	@ 0xc0
 800276c:	d825      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800276e:	2b80      	cmp	r3, #128	@ 0x80
 8002770:	d018      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002772:	2b80      	cmp	r3, #128	@ 0x80
 8002774:	d821      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800277a:	2b40      	cmp	r3, #64	@ 0x40
 800277c:	d007      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800277e:	e01c      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002780:	4b63      	ldr	r3, [pc, #396]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800278c:	e01c      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002792:	3308      	adds	r3, #8
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fbe6 	bl	8003f68 <RCCEx_PLL2_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027a2:	e011      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a8:	3328      	adds	r3, #40	@ 0x28
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fc8d 	bl	80040cc <RCCEx_PLL3_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027b8:	e006      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027c0:	e002      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80027d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	4a4c      	ldr	r2, [pc, #304]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80027fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002804:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002808:	460b      	mov	r3, r1
 800280a:	4313      	orrs	r3, r2
 800280c:	d053      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800280e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800281a:	d035      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800281c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002820:	d82e      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002822:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002826:	d031      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002828:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800282c:	d828      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002832:	d01a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002834:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002838:	d822      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800283e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002842:	d007      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002844:	e01c      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002846:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800284c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002852:	e01c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002858:	3308      	adds	r3, #8
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fb83 	bl	8003f68 <RCCEx_PLL2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002868:	e011      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800286a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286e:	3328      	adds	r3, #40	@ 0x28
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fc2a 	bl	80040cc <RCCEx_PLL3_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800287e:	e006      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002886:	e002      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002888:	bf00      	nop
 800288a:	e000      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800288c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80028a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80028c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80028d0:	460b      	mov	r3, r1
 80028d2:	4313      	orrs	r3, r2
 80028d4:	d056      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80028d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e2:	d038      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80028e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e8:	d831      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028ee:	d034      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80028f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028f4:	d82b      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028fa:	d01d      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002900:	d825      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800290c:	e01f      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002914:	4ba2      	ldr	r3, [pc, #648]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	4aa1      	ldr	r2, [pc, #644]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002920:	e01c      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002926:	3308      	adds	r3, #8
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fb1c 	bl	8003f68 <RCCEx_PLL2_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002936:	e011      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800293c:	3328      	adds	r3, #40	@ 0x28
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fbc3 	bl	80040cc <RCCEx_PLL3_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800294c:	e006      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800295a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002964:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800296c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002970:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002974:	4a8a      	ldr	r2, [pc, #552]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002976:	430b      	orrs	r3, r1
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
 800297a:	e003      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002990:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800299a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d03a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	2b30      	cmp	r3, #48	@ 0x30
 80029ac:	d01f      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80029ae:	2b30      	cmp	r3, #48	@ 0x30
 80029b0:	d819      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d815      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d111      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	4a76      	ldr	r2, [pc, #472]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029ce:	e011      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d4:	3308      	adds	r3, #8
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fac5 	bl	8003f68 <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029e4:	e006      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029fc:	4b68      	ldr	r3, [pc, #416]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a10:	e003      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002a26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	d051      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a44:	d035      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a4a:	d82e      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a50:	d031      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a56:	d828      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5c:	d01a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d822      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6c:	d007      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a82:	3308      	adds	r3, #8
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fa6e 	bl	8003f68 <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a92:	e011      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a98:	3328      	adds	r3, #40	@ 0x28
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fb15 	bl	80040cc <RCCEx_PLL3_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e006      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ac0:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ace:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ad4:	e003      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002af4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002af8:	460b      	mov	r3, r1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	d056      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b08:	d033      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0e:	d82c      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b14:	d02f      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b1a:	d826      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b20:	d02b      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b26:	d820      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b2c:	d012      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b32:	d81a      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d022      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d115      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	3308      	adds	r3, #8
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fa0e 	bl	8003f68 <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b52:	e015      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b58:	3328      	adds	r3, #40	@ 0x28
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fab5 	bl	80040cc <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b68:	e00a      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b70:	e006      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b96:	4a02      	ldr	r2, [pc, #8]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b9c:	e006      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b9e:	bf00      	nop
 8002ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	d055      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd8:	d033      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bde:	d82c      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be4:	d02f      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bea:	d826      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bf0:	d02b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bf6:	d820      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfc:	d012      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c02:	d81a      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d022      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c12:	3308      	adds	r3, #8
 8002c14:	2101      	movs	r1, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f9a6 	bl	8003f68 <RCCEx_PLL2_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c22:	e015      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c28:	3328      	adds	r3, #40	@ 0x28
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fa4d 	bl	80040cc <RCCEx_PLL3_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c38:	e00a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c58:	4ba3      	ldr	r3, [pc, #652]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c68:	4a9f      	ldr	r2, [pc, #636]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6e:	e003      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c92:	460b      	mov	r3, r1
 8002c94:	4313      	orrs	r3, r2
 8002c96:	d037      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca8:	d816      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cb2:	d111      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	4a8b      	ldr	r2, [pc, #556]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cc0:	e00f      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f94c 	bl	8003f68 <RCCEx_PLL2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cde:	e000      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cfe:	e003      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4313      	orrs	r3, r2
 8002d26:	d039      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d81c      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002d32:	a201      	add	r2, pc, #4	@ (adr r2, 8002d38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d75 	.word	0x08002d75
 8002d3c:	08002d49 	.word	0x08002d49
 8002d40:	08002d57 	.word	0x08002d57
 8002d44:	08002d75 	.word	0x08002d75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d48:	4b67      	ldr	r3, [pc, #412]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d54:	e00f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f902 	bl	8003f68 <RCCEx_PLL2_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d7e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d82:	f023 0103 	bic.w	r1, r3, #3
 8002d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	4a56      	ldr	r2, [pc, #344]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d92:	e003      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002db2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002db6:	460b      	mov	r3, r1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f000 809f 	beq.w	8002efc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dca:	f7fe f889 	bl	8000ee0 <HAL_GetTick>
 8002dce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd2:	e00b      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe f884 	bl	8000ee0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b64      	cmp	r3, #100	@ 0x64
 8002de2:	d903      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dea:	e005      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dec:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ed      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d179      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e00:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e0c:	4053      	eors	r3, r2
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e16:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e22:	4b31      	ldr	r3, [pc, #196]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e4e:	d118      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f846 	bl	8000ee0 <HAL_GetTick>
 8002e54:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e58:	e00d      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe f841 	bl	8000ee0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e64:	1ad2      	subs	r2, r2, r3
 8002e66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d903      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002e74:	e005      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e76:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0eb      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d129      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e9a:	d10e      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002eac:	091a      	lsrs	r2, r3, #4
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6113      	str	r3, [r2, #16]
 8002eb8:	e005      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ec4:	6113      	str	r3, [r2, #16]
 8002ec6:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ece:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002edc:	e00e      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002ee6:	e009      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002ee8:	58024400 	.word	0x58024400
 8002eec:	58024800 	.word	0x58024800
 8002ef0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f002 0301 	and.w	r3, r2, #1
 8002f08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f000 8089 	beq.w	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f24:	2b28      	cmp	r3, #40	@ 0x28
 8002f26:	d86b      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08003009 	.word	0x08003009
 8002f34:	08003001 	.word	0x08003001
 8002f38:	08003001 	.word	0x08003001
 8002f3c:	08003001 	.word	0x08003001
 8002f40:	08003001 	.word	0x08003001
 8002f44:	08003001 	.word	0x08003001
 8002f48:	08003001 	.word	0x08003001
 8002f4c:	08003001 	.word	0x08003001
 8002f50:	08002fd5 	.word	0x08002fd5
 8002f54:	08003001 	.word	0x08003001
 8002f58:	08003001 	.word	0x08003001
 8002f5c:	08003001 	.word	0x08003001
 8002f60:	08003001 	.word	0x08003001
 8002f64:	08003001 	.word	0x08003001
 8002f68:	08003001 	.word	0x08003001
 8002f6c:	08003001 	.word	0x08003001
 8002f70:	08002feb 	.word	0x08002feb
 8002f74:	08003001 	.word	0x08003001
 8002f78:	08003001 	.word	0x08003001
 8002f7c:	08003001 	.word	0x08003001
 8002f80:	08003001 	.word	0x08003001
 8002f84:	08003001 	.word	0x08003001
 8002f88:	08003001 	.word	0x08003001
 8002f8c:	08003001 	.word	0x08003001
 8002f90:	08003009 	.word	0x08003009
 8002f94:	08003001 	.word	0x08003001
 8002f98:	08003001 	.word	0x08003001
 8002f9c:	08003001 	.word	0x08003001
 8002fa0:	08003001 	.word	0x08003001
 8002fa4:	08003001 	.word	0x08003001
 8002fa8:	08003001 	.word	0x08003001
 8002fac:	08003001 	.word	0x08003001
 8002fb0:	08003009 	.word	0x08003009
 8002fb4:	08003001 	.word	0x08003001
 8002fb8:	08003001 	.word	0x08003001
 8002fbc:	08003001 	.word	0x08003001
 8002fc0:	08003001 	.word	0x08003001
 8002fc4:	08003001 	.word	0x08003001
 8002fc8:	08003001 	.word	0x08003001
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003009 	.word	0x08003009
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd8:	3308      	adds	r3, #8
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 ffc3 	bl	8003f68 <RCCEx_PLL2_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fe8:	e00f      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fee:	3328      	adds	r3, #40	@ 0x28
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f86a 	bl	80040cc <RCCEx_PLL3_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ffe:	e004      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003012:	4bbf      	ldr	r3, [pc, #764]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003020:	4abb      	ldr	r2, [pc, #748]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003022:	430b      	orrs	r3, r1
 8003024:	6553      	str	r3, [r2, #84]	@ 0x54
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f002 0302 	and.w	r3, r2, #2
 800303c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003046:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800304a:	460b      	mov	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	d041      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003056:	2b05      	cmp	r3, #5
 8003058:	d824      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	080030ad 	.word	0x080030ad
 8003064:	08003079 	.word	0x08003079
 8003068:	0800308f 	.word	0x0800308f
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	3308      	adds	r3, #8
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 ff71 	bl	8003f68 <RCCEx_PLL2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800308c:	e00f      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003092:	3328      	adds	r3, #40	@ 0x28
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f001 f818 	bl	80040cc <RCCEx_PLL3_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80030a2:	e004      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030b6:	4b96      	ldr	r3, [pc, #600]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ba:	f023 0107 	bic.w	r1, r3, #7
 80030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030c4:	4a92      	ldr	r2, [pc, #584]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030c6:	430b      	orrs	r3, r1
 80030c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80030ca:	e003      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f002 0304 	and.w	r3, r2, #4
 80030e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	d044      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d825      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003100:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003155 	.word	0x08003155
 800310c:	08003121 	.word	0x08003121
 8003110:	08003137 	.word	0x08003137
 8003114:	08003155 	.word	0x08003155
 8003118:	08003155 	.word	0x08003155
 800311c:	08003155 	.word	0x08003155
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003124:	3308      	adds	r3, #8
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 ff1d 	bl	8003f68 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003134:	e00f      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313a:	3328      	adds	r3, #40	@ 0x28
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f000 ffc4 	bl	80040cc <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800315e:	4b6c      	ldr	r3, [pc, #432]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f023 0107 	bic.w	r1, r3, #7
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316e:	4a68      	ldr	r2, [pc, #416]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003170:	430b      	orrs	r3, r1
 8003172:	6593      	str	r3, [r2, #88]	@ 0x58
 8003174:	e003      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f002 0320 	and.w	r3, r2, #32
 800318a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003198:	460b      	mov	r3, r1
 800319a:	4313      	orrs	r3, r2
 800319c:	d055      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031aa:	d033      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80031ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b0:	d82c      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d02f      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031bc:	d826      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c2:	d02b      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80031c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c8:	d820      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ce:	d012      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80031d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d4:	d81a      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d022      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80031da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031de:	d115      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e4:	3308      	adds	r3, #8
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 febd 	bl	8003f68 <RCCEx_PLL2_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031f4:	e015      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	3328      	adds	r3, #40	@ 0x28
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 ff64 	bl	80040cc <RCCEx_PLL3_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800320a:	e00a      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003212:	e006      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003214:	bf00      	nop
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10b      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322a:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323a:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800323c:	430b      	orrs	r3, r1
 800323e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003260:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003264:	460b      	mov	r3, r1
 8003266:	4313      	orrs	r3, r2
 8003268:	d058      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003272:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003276:	d033      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003278:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800327c:	d82c      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003282:	d02f      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003288:	d826      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800328a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800328e:	d02b      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003290:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003294:	d820      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800329a:	d012      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800329c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a0:	d81a      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d022      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d115      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	3308      	adds	r3, #8
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fe57 	bl	8003f68 <RCCEx_PLL2_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032c0:	e015      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c6:	3328      	adds	r3, #40	@ 0x28
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fefe 	bl	80040cc <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032d6:	e00a      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032de:	e006      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032e0:	bf00      	nop
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032e4:	bf00      	nop
 80032e6:	e002      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10e      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003302:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003306:	4a02      	ldr	r2, [pc, #8]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6593      	str	r3, [r2, #88]	@ 0x58
 800330c:	e006      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003332:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003336:	460b      	mov	r3, r1
 8003338:	4313      	orrs	r3, r2
 800333a:	d055      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003340:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003344:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003348:	d033      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800334a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800334e:	d82c      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003354:	d02f      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335a:	d826      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800335c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003360:	d02b      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003362:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003366:	d820      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800336c:	d012      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800336e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003372:	d81a      	bhi.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d022      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800337c:	d115      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003382:	3308      	adds	r3, #8
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fdee 	bl	8003f68 <RCCEx_PLL2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003392:	e015      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003398:	3328      	adds	r3, #40	@ 0x28
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fe95 	bl	80040cc <RCCEx_PLL3_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80033a8:	e00a      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033b2:	bf00      	nop
 80033b4:	e004      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033b6:	bf00      	nop
 80033b8:	e002      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033d8:	4a9d      	ldr	r2, [pc, #628]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033de:	e003      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f002 0308 	and.w	r3, r2, #8
 80033f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003402:	460b      	mov	r3, r1
 8003404:	4313      	orrs	r3, r2
 8003406:	d01e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003414:	d10c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341a:	3328      	adds	r3, #40	@ 0x28
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fe54 	bl	80040cc <RCCEx_PLL3_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003430:	4b87      	ldr	r3, [pc, #540]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003440:	4a83      	ldr	r2, [pc, #524]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003442:	430b      	orrs	r3, r1
 8003444:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f002 0310 	and.w	r3, r2, #16
 8003452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003456:	2300      	movs	r3, #0
 8003458:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800345c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003460:	460b      	mov	r3, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	d01e      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800346e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003472:	d10c      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003478:	3328      	adds	r3, #40	@ 0x28
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fe25 	bl	80040cc <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800348e:	4b70      	ldr	r3, [pc, #448]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800349e:	4a6c      	ldr	r2, [pc, #432]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80034b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d03e      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d0:	d022      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80034d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d6:	d81b      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e0:	d00b      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80034e2:	e015      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e8:	3308      	adds	r3, #8
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fd3b 	bl	8003f68 <RCCEx_PLL2_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034f8:	e00f      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	3328      	adds	r3, #40	@ 0x28
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fde2 	bl	80040cc <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003522:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003532:	4a47      	ldr	r2, [pc, #284]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6593      	str	r3, [r2, #88]	@ 0x58
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800354e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003550:	2300      	movs	r3, #0
 8003552:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003554:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003558:	460b      	mov	r3, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800356a:	d01f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800356c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003570:	d818      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003576:	d003      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800357c:	d007      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003580:	4b33      	ldr	r3, [pc, #204]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800358c:	e00f      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	3328      	adds	r3, #40	@ 0x28
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fd98 	bl	80040cc <RCCEx_PLL3_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80035a2:	e004      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80035ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b6:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80035e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80035e4:	2300      	movs	r3, #0
 80035e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80035e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035ec:	460b      	mov	r3, r1
 80035ee:	4313      	orrs	r3, r2
 80035f0:	d034      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003600:	d007      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003610:	e00e      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	3308      	adds	r3, #8
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fca4 	bl	8003f68 <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003638:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800363a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003646:	4a02      	ldr	r2, [pc, #8]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003648:	430b      	orrs	r3, r1
 800364a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800364c:	e006      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800366a:	2300      	movs	r3, #0
 800366c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800366e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003672:	460b      	mov	r3, r1
 8003674:	4313      	orrs	r3, r2
 8003676:	d00c      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	3328      	adds	r3, #40	@ 0x28
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fd23 	bl	80040cc <RCCEx_PLL3_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800369e:	663b      	str	r3, [r7, #96]	@ 0x60
 80036a0:	2300      	movs	r3, #0
 80036a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80036a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d038      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ba:	d018      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80036bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036c0:	d811      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c6:	d014      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036cc:	d80b      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d011      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d6:	d106      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4bc3      	ldr	r3, [pc, #780]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4ac2      	ldr	r2, [pc, #776]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036e4:	e008      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ec:	e004      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003700:	4bb9      	ldr	r3, [pc, #740]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003704:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003710:	4ab5      	ldr	r2, [pc, #724]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6553      	str	r3, [r2, #84]	@ 0x54
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800372c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800372e:	2300      	movs	r3, #0
 8003730:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003732:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800373c:	4baa      	ldr	r3, [pc, #680]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800373e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003740:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374a:	4aa7      	ldr	r2, [pc, #668]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800374c:	430b      	orrs	r3, r1
 800374e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800375c:	653b      	str	r3, [r7, #80]	@ 0x50
 800375e:	2300      	movs	r3, #0
 8003760:	657b      	str	r3, [r7, #84]	@ 0x54
 8003762:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800376c:	4b9e      	ldr	r3, [pc, #632]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800377c:	4a9a      	ldr	r2, [pc, #616]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800377e:	430b      	orrs	r3, r1
 8003780:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800378e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003794:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800379e:	4b92      	ldr	r3, [pc, #584]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ac:	4a8e      	ldr	r2, [pc, #568]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80037be:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c0:	2300      	movs	r3, #0
 80037c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037ce:	4b86      	ldr	r3, [pc, #536]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4a85      	ldr	r2, [pc, #532]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037d8:	6113      	str	r3, [r2, #16]
 80037da:	4b83      	ldr	r3, [pc, #524]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037e6:	4a80      	ldr	r2, [pc, #512]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80037f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037fa:	2300      	movs	r3, #0
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003808:	4b77      	ldr	r3, [pc, #476]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	4a74      	ldr	r2, [pc, #464]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003818:	430b      	orrs	r3, r1
 800381a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003828:	633b      	str	r3, [r7, #48]	@ 0x30
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
 800382e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003838:	4b6b      	ldr	r3, [pc, #428]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003848:	4a67      	ldr	r2, [pc, #412]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800384a:	430b      	orrs	r3, r1
 800384c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	2100      	movs	r1, #0
 8003858:	62b9      	str	r1, [r7, #40]	@ 0x28
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003860:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d011      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	3308      	adds	r3, #8
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb78 	bl	8003f68 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800387e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	2100      	movs	r1, #0
 8003898:	6239      	str	r1, [r7, #32]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80038a4:	460b      	mov	r3, r1
 80038a6:	4313      	orrs	r3, r2
 80038a8:	d011      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	3308      	adds	r3, #8
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb58 	bl	8003f68 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	2100      	movs	r1, #0
 80038d8:	61b9      	str	r1, [r7, #24]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038e4:	460b      	mov	r3, r1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	d011      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	3308      	adds	r3, #8
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fb38 	bl	8003f68 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	2100      	movs	r1, #0
 8003918:	6139      	str	r1, [r7, #16]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d011      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3328      	adds	r3, #40	@ 0x28
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fbca 	bl	80040cc <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	2100      	movs	r1, #0
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d011      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3328      	adds	r3, #40	@ 0x28
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fbaa 	bl	80040cc <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800398a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	2100      	movs	r1, #0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	607b      	str	r3, [r7, #4]
 80039a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d011      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	3328      	adds	r3, #40	@ 0x28
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fb8a 	bl	80040cc <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80039ce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
}
 80039dc:	4618      	mov	r0, r3
 80039de:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80039e2:	46bd      	mov	sp, r7
 80039e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e8:	58024400 	.word	0x58024400

080039ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039f0:	f7fe fd96 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4904      	ldr	r1, [pc, #16]	@ (8003a14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	58024400 	.word	0x58024400
 8003a14:	0800574c 	.word	0x0800574c

08003a18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a20:	4ba1      	ldr	r3, [pc, #644]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a2a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	0b1b      	lsrs	r3, r3, #12
 8003a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a36:	4b9c      	ldr	r3, [pc, #624]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a42:	4b99      	ldr	r3, [pc, #612]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8111 	beq.w	8003c88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f000 8083 	beq.w	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d056      	beq.n	8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a82:	e099      	b.n	8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a84:	4b88      	ldr	r3, [pc, #544]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d02d      	beq.n	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a90:	4b85      	ldr	r3, [pc, #532]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	4a84      	ldr	r2, [pc, #528]	@ (8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ace:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003aea:	e087      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b2e:	e065      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b59      	ldr	r3, [pc, #356]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b72:	e043      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b48      	ldr	r3, [pc, #288]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bb6:	e021      	b.n	8003bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b37      	ldr	r3, [pc, #220]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c22:	ee17 2a90 	vmov	r2, s15
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c50:	ee17 2a90 	vmov	r2, s15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c58:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	0e1b      	lsrs	r3, r3, #24
 8003c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7e:	ee17 2a90 	vmov	r2, s15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c86:	e008      	b.n	8003c9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
}
 8003c9a:	bf00      	nop
 8003c9c:	3724      	adds	r7, #36	@ 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	03d09000 	.word	0x03d09000
 8003cb0:	46000000 	.word	0x46000000
 8003cb4:	4c742400 	.word	0x4c742400
 8003cb8:	4a742400 	.word	0x4a742400
 8003cbc:	4bbebc20 	.word	0x4bbebc20

08003cc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cd2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	0d1b      	lsrs	r3, r3, #20
 8003cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003cde:	4b9c      	ldr	r3, [pc, #624]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cea:	4b99      	ldr	r3, [pc, #612]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	08db      	lsrs	r3, r3, #3
 8003cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8111 	beq.w	8003f30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f000 8083 	beq.w	8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	f200 80a1 	bhi.w	8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d056      	beq.n	8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d2a:	e099      	b.n	8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d2c:	4b88      	ldr	r3, [pc, #544]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02d      	beq.n	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d38:	4b85      	ldr	r3, [pc, #532]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	08db      	lsrs	r3, r3, #3
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	4a84      	ldr	r2, [pc, #528]	@ (8003f54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
 8003d48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b7b      	ldr	r3, [pc, #492]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d92:	e087      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dd6:	e065      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	4b59      	ldr	r3, [pc, #356]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e1a:	e043      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	4b48      	ldr	r3, [pc, #288]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e5e:	e021      	b.n	8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	4b37      	ldr	r3, [pc, #220]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ea2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	0a5b      	lsrs	r3, r3, #9
 8003eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eca:	ee17 2a90 	vmov	r2, s15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ee8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef8:	ee17 2a90 	vmov	r2, s15
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f00:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	0e1b      	lsrs	r3, r3, #24
 8003f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f26:	ee17 2a90 	vmov	r2, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f2e:	e008      	b.n	8003f42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
}
 8003f42:	bf00      	nop
 8003f44:	3724      	adds	r7, #36	@ 0x24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	58024400 	.word	0x58024400
 8003f54:	03d09000 	.word	0x03d09000
 8003f58:	46000000 	.word	0x46000000
 8003f5c:	4c742400 	.word	0x4c742400
 8003f60:	4a742400 	.word	0x4a742400
 8003f64:	4bbebc20 	.word	0x4bbebc20

08003f68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f76:	4b53      	ldr	r3, [pc, #332]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d101      	bne.n	8003f86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e099      	b.n	80040ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f86:	4b4f      	ldr	r3, [pc, #316]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f92:	f7fc ffa5 	bl	8000ee0 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f98:	e008      	b.n	8003fac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f9a:	f7fc ffa1 	bl	8000ee0 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e086      	b.n	80040ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fac:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fb8:	4b42      	ldr	r3, [pc, #264]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	493f      	ldr	r1, [pc, #252]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	025b      	lsls	r3, r3, #9
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	061b      	lsls	r3, r3, #24
 8003ff8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ffc:	4931      	ldr	r1, [pc, #196]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004002:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	492d      	ldr	r1, [pc, #180]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004010:	4313      	orrs	r3, r2
 8004012:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004014:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	f023 0220 	bic.w	r2, r3, #32
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	4928      	ldr	r1, [pc, #160]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004026:	4b27      	ldr	r3, [pc, #156]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	4a26      	ldr	r2, [pc, #152]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800402c:	f023 0310 	bic.w	r3, r3, #16
 8004030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004032:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <RCCEx_PLL2_Config+0x160>)
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	69d2      	ldr	r2, [r2, #28]
 800403e:	00d2      	lsls	r2, r2, #3
 8004040:	4920      	ldr	r1, [pc, #128]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800404c:	f043 0310 	orr.w	r3, r3, #16
 8004050:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004058:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800405e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004062:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004064:	e00f      	b.n	8004086 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d106      	bne.n	800407a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800406c:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004078:	e005      	b.n	8004086 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800407a:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004080:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004084:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004086:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a0e      	ldr	r2, [pc, #56]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 800408c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004092:	f7fc ff25 	bl	8000ee0 <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004098:	e008      	b.n	80040ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800409a:	f7fc ff21 	bl	8000ee0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e006      	b.n	80040ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <RCCEx_PLL2_Config+0x15c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	58024400 	.word	0x58024400
 80040c8:	ffff0007 	.word	0xffff0007

080040cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040da:	4b53      	ldr	r3, [pc, #332]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d101      	bne.n	80040ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e099      	b.n	800421e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f6:	f7fc fef3 	bl	8000ee0 <HAL_GetTick>
 80040fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040fe:	f7fc feef 	bl	8000ee0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e086      	b.n	800421e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004110:	4b45      	ldr	r3, [pc, #276]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800411c:	4b42      	ldr	r3, [pc, #264]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	051b      	lsls	r3, r3, #20
 800412a:	493f      	ldr	r1, [pc, #252]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	3b01      	subs	r3, #1
 8004136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	3b01      	subs	r3, #1
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	b29b      	uxth	r3, r3
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	3b01      	subs	r3, #1
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004160:	4931      	ldr	r1, [pc, #196]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004166:	4b30      	ldr	r3, [pc, #192]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	492d      	ldr	r1, [pc, #180]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004178:	4b2b      	ldr	r3, [pc, #172]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4928      	ldr	r1, [pc, #160]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004186:	4313      	orrs	r3, r2
 8004188:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800418a:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004194:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004196:	4b24      	ldr	r3, [pc, #144]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004198:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <RCCEx_PLL3_Config+0x160>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	69d2      	ldr	r2, [r2, #28]
 80041a2:	00d2      	lsls	r2, r2, #3
 80041a4:	4920      	ldr	r1, [pc, #128]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041c8:	e00f      	b.n	80041ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d106      	bne.n	80041de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041d0:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041dc:	e005      	b.n	80041ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041de:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	4a11      	ldr	r2, [pc, #68]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fc fe73 	bl	8000ee0 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041fc:	e008      	b.n	8004210 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041fe:	f7fc fe6f 	bl	8000ee0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <RCCEx_PLL3_Config+0x15c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
 800422c:	ffff0007 	.word	0xffff0007

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e049      	b.n	80042d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fcba 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 f836 	bl	80042e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a40      	ldr	r2, [pc, #256]	@ (80043f4 <TIM_Base_SetConfig+0x114>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fe:	d00f      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3d      	ldr	r2, [pc, #244]	@ (80043f8 <TIM_Base_SetConfig+0x118>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a3c      	ldr	r2, [pc, #240]	@ (80043fc <TIM_Base_SetConfig+0x11c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a3b      	ldr	r2, [pc, #236]	@ (8004400 <TIM_Base_SetConfig+0x120>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a3a      	ldr	r2, [pc, #232]	@ (8004404 <TIM_Base_SetConfig+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2f      	ldr	r2, [pc, #188]	@ (80043f4 <TIM_Base_SetConfig+0x114>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01f      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004340:	d01b      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2c      	ldr	r2, [pc, #176]	@ (80043f8 <TIM_Base_SetConfig+0x118>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d017      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2b      	ldr	r2, [pc, #172]	@ (80043fc <TIM_Base_SetConfig+0x11c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2a      	ldr	r2, [pc, #168]	@ (8004400 <TIM_Base_SetConfig+0x120>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00f      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a29      	ldr	r2, [pc, #164]	@ (8004404 <TIM_Base_SetConfig+0x124>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00b      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a28      	ldr	r2, [pc, #160]	@ (8004408 <TIM_Base_SetConfig+0x128>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d007      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a27      	ldr	r2, [pc, #156]	@ (800440c <TIM_Base_SetConfig+0x12c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d003      	beq.n	800437a <TIM_Base_SetConfig+0x9a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a26      	ldr	r2, [pc, #152]	@ (8004410 <TIM_Base_SetConfig+0x130>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d108      	bne.n	800438c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a10      	ldr	r2, [pc, #64]	@ (80043f4 <TIM_Base_SetConfig+0x114>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00f      	beq.n	80043d8 <TIM_Base_SetConfig+0xf8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <TIM_Base_SetConfig+0x124>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00b      	beq.n	80043d8 <TIM_Base_SetConfig+0xf8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a11      	ldr	r2, [pc, #68]	@ (8004408 <TIM_Base_SetConfig+0x128>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <TIM_Base_SetConfig+0xf8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a10      	ldr	r2, [pc, #64]	@ (800440c <TIM_Base_SetConfig+0x12c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_Base_SetConfig+0xf8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004410 <TIM_Base_SetConfig+0x130>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	615a      	str	r2, [r3, #20]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40010400 	.word	0x40010400
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800

08004414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004428:	2302      	movs	r3, #2
 800442a:	e06d      	b.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a30      	ldr	r2, [pc, #192]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2f      	ldr	r2, [pc, #188]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d108      	bne.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a20      	ldr	r2, [pc, #128]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449e:	d01d      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1d      	ldr	r2, [pc, #116]	@ (800451c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a15      	ldr	r2, [pc, #84]	@ (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40010000 	.word	0x40010000
 8004518:	40010400 	.word	0x40010400
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40001800 	.word	0x40001800
 800452c:	40014000 	.word	0x40014000

08004530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e042      	b.n	80045c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc fba9 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2224      	movs	r2, #36	@ 0x24
 800455e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f82c 	bl	80045d0 <UART_SetConfig>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e022      	b.n	80045c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fd88 	bl	80050a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800459e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fe0f 	bl	80051e4 <UART_CheckIdleState>
 80045c6:	4603      	mov	r3, r0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d4:	b092      	sub	sp, #72	@ 0x48
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4bbe      	ldr	r3, [pc, #760]	@ (80048f8 <UART_SetConfig+0x328>)
 8004600:	4013      	ands	r3, r2
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004608:	430b      	orrs	r3, r1
 800460a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4ab3      	ldr	r2, [pc, #716]	@ (80048fc <UART_SetConfig+0x32c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004638:	4313      	orrs	r3, r2
 800463a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	4baf      	ldr	r3, [pc, #700]	@ (8004900 <UART_SetConfig+0x330>)
 8004644:	4013      	ands	r3, r2
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800464c:	430b      	orrs	r3, r1
 800464e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	f023 010f 	bic.w	r1, r3, #15
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4aa6      	ldr	r2, [pc, #664]	@ (8004904 <UART_SetConfig+0x334>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d177      	bne.n	8004760 <UART_SetConfig+0x190>
 8004670:	4ba5      	ldr	r3, [pc, #660]	@ (8004908 <UART_SetConfig+0x338>)
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004678:	2b28      	cmp	r3, #40	@ 0x28
 800467a:	d86d      	bhi.n	8004758 <UART_SetConfig+0x188>
 800467c:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <UART_SetConfig+0xb4>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	08004729 	.word	0x08004729
 8004688:	08004759 	.word	0x08004759
 800468c:	08004759 	.word	0x08004759
 8004690:	08004759 	.word	0x08004759
 8004694:	08004759 	.word	0x08004759
 8004698:	08004759 	.word	0x08004759
 800469c:	08004759 	.word	0x08004759
 80046a0:	08004759 	.word	0x08004759
 80046a4:	08004731 	.word	0x08004731
 80046a8:	08004759 	.word	0x08004759
 80046ac:	08004759 	.word	0x08004759
 80046b0:	08004759 	.word	0x08004759
 80046b4:	08004759 	.word	0x08004759
 80046b8:	08004759 	.word	0x08004759
 80046bc:	08004759 	.word	0x08004759
 80046c0:	08004759 	.word	0x08004759
 80046c4:	08004739 	.word	0x08004739
 80046c8:	08004759 	.word	0x08004759
 80046cc:	08004759 	.word	0x08004759
 80046d0:	08004759 	.word	0x08004759
 80046d4:	08004759 	.word	0x08004759
 80046d8:	08004759 	.word	0x08004759
 80046dc:	08004759 	.word	0x08004759
 80046e0:	08004759 	.word	0x08004759
 80046e4:	08004741 	.word	0x08004741
 80046e8:	08004759 	.word	0x08004759
 80046ec:	08004759 	.word	0x08004759
 80046f0:	08004759 	.word	0x08004759
 80046f4:	08004759 	.word	0x08004759
 80046f8:	08004759 	.word	0x08004759
 80046fc:	08004759 	.word	0x08004759
 8004700:	08004759 	.word	0x08004759
 8004704:	08004749 	.word	0x08004749
 8004708:	08004759 	.word	0x08004759
 800470c:	08004759 	.word	0x08004759
 8004710:	08004759 	.word	0x08004759
 8004714:	08004759 	.word	0x08004759
 8004718:	08004759 	.word	0x08004759
 800471c:	08004759 	.word	0x08004759
 8004720:	08004759 	.word	0x08004759
 8004724:	08004751 	.word	0x08004751
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472e:	e222      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004736:	e21e      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e21a      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004746:	e216      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004748:	2320      	movs	r3, #32
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474e:	e212      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004750:	2340      	movs	r3, #64	@ 0x40
 8004752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004756:	e20e      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475e:	e20a      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a69      	ldr	r2, [pc, #420]	@ (800490c <UART_SetConfig+0x33c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d130      	bne.n	80047cc <UART_SetConfig+0x1fc>
 800476a:	4b67      	ldr	r3, [pc, #412]	@ (8004908 <UART_SetConfig+0x338>)
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b05      	cmp	r3, #5
 8004774:	d826      	bhi.n	80047c4 <UART_SetConfig+0x1f4>
 8004776:	a201      	add	r2, pc, #4	@ (adr r2, 800477c <UART_SetConfig+0x1ac>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	08004795 	.word	0x08004795
 8004780:	0800479d 	.word	0x0800479d
 8004784:	080047a5 	.word	0x080047a5
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047bd 	.word	0x080047bd
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800479a:	e1ec      	b.n	8004b76 <UART_SetConfig+0x5a6>
 800479c:	2304      	movs	r3, #4
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a2:	e1e8      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80047a4:	2308      	movs	r3, #8
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047aa:	e1e4      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80047ac:	2310      	movs	r3, #16
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b2:	e1e0      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80047b4:	2320      	movs	r3, #32
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ba:	e1dc      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80047bc:	2340      	movs	r3, #64	@ 0x40
 80047be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c2:	e1d8      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80047c4:	2380      	movs	r3, #128	@ 0x80
 80047c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ca:	e1d4      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004910 <UART_SetConfig+0x340>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d130      	bne.n	8004838 <UART_SetConfig+0x268>
 80047d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004908 <UART_SetConfig+0x338>)
 80047d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d826      	bhi.n	8004830 <UART_SetConfig+0x260>
 80047e2:	a201      	add	r2, pc, #4	@ (adr r2, 80047e8 <UART_SetConfig+0x218>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	08004801 	.word	0x08004801
 80047ec:	08004809 	.word	0x08004809
 80047f0:	08004811 	.word	0x08004811
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004829 	.word	0x08004829
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004806:	e1b6      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004808:	2304      	movs	r3, #4
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480e:	e1b2      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004810:	2308      	movs	r3, #8
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004816:	e1ae      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481e:	e1aa      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004820:	2320      	movs	r3, #32
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e1a6      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004828:	2340      	movs	r3, #64	@ 0x40
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482e:	e1a2      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004830:	2380      	movs	r3, #128	@ 0x80
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004836:	e19e      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a35      	ldr	r2, [pc, #212]	@ (8004914 <UART_SetConfig+0x344>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d130      	bne.n	80048a4 <UART_SetConfig+0x2d4>
 8004842:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <UART_SetConfig+0x338>)
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b05      	cmp	r3, #5
 800484c:	d826      	bhi.n	800489c <UART_SetConfig+0x2cc>
 800484e:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <UART_SetConfig+0x284>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	0800486d 	.word	0x0800486d
 8004858:	08004875 	.word	0x08004875
 800485c:	0800487d 	.word	0x0800487d
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004872:	e180      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487a:	e17c      	b.n	8004b76 <UART_SetConfig+0x5a6>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004882:	e178      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488a:	e174      	b.n	8004b76 <UART_SetConfig+0x5a6>
 800488c:	2320      	movs	r3, #32
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004892:	e170      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004894:	2340      	movs	r3, #64	@ 0x40
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489a:	e16c      	b.n	8004b76 <UART_SetConfig+0x5a6>
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a2:	e168      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <UART_SetConfig+0x348>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d142      	bne.n	8004934 <UART_SetConfig+0x364>
 80048ae:	4b16      	ldr	r3, [pc, #88]	@ (8004908 <UART_SetConfig+0x338>)
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d838      	bhi.n	800492c <UART_SetConfig+0x35c>
 80048ba:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <UART_SetConfig+0x2f0>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d9 	.word	0x080048d9
 80048c4:	080048e1 	.word	0x080048e1
 80048c8:	080048e9 	.word	0x080048e9
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	0800491d 	.word	0x0800491d
 80048d4:	08004925 	.word	0x08004925
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048de:	e14a      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e6:	e146      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ee:	e142      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f6:	e13e      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80048f8:	cfff69f3 	.word	0xcfff69f3
 80048fc:	58000c00 	.word	0x58000c00
 8004900:	11fff4ff 	.word	0x11fff4ff
 8004904:	40011000 	.word	0x40011000
 8004908:	58024400 	.word	0x58024400
 800490c:	40004400 	.word	0x40004400
 8004910:	40004800 	.word	0x40004800
 8004914:	40004c00 	.word	0x40004c00
 8004918:	40005000 	.word	0x40005000
 800491c:	2320      	movs	r3, #32
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004922:	e128      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004924:	2340      	movs	r3, #64	@ 0x40
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492a:	e124      	b.n	8004b76 <UART_SetConfig+0x5a6>
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004932:	e120      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4acb      	ldr	r2, [pc, #812]	@ (8004c68 <UART_SetConfig+0x698>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d176      	bne.n	8004a2c <UART_SetConfig+0x45c>
 800493e:	4bcb      	ldr	r3, [pc, #812]	@ (8004c6c <UART_SetConfig+0x69c>)
 8004940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004946:	2b28      	cmp	r3, #40	@ 0x28
 8004948:	d86c      	bhi.n	8004a24 <UART_SetConfig+0x454>
 800494a:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <UART_SetConfig+0x380>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	080049f5 	.word	0x080049f5
 8004954:	08004a25 	.word	0x08004a25
 8004958:	08004a25 	.word	0x08004a25
 800495c:	08004a25 	.word	0x08004a25
 8004960:	08004a25 	.word	0x08004a25
 8004964:	08004a25 	.word	0x08004a25
 8004968:	08004a25 	.word	0x08004a25
 800496c:	08004a25 	.word	0x08004a25
 8004970:	080049fd 	.word	0x080049fd
 8004974:	08004a25 	.word	0x08004a25
 8004978:	08004a25 	.word	0x08004a25
 800497c:	08004a25 	.word	0x08004a25
 8004980:	08004a25 	.word	0x08004a25
 8004984:	08004a25 	.word	0x08004a25
 8004988:	08004a25 	.word	0x08004a25
 800498c:	08004a25 	.word	0x08004a25
 8004990:	08004a05 	.word	0x08004a05
 8004994:	08004a25 	.word	0x08004a25
 8004998:	08004a25 	.word	0x08004a25
 800499c:	08004a25 	.word	0x08004a25
 80049a0:	08004a25 	.word	0x08004a25
 80049a4:	08004a25 	.word	0x08004a25
 80049a8:	08004a25 	.word	0x08004a25
 80049ac:	08004a25 	.word	0x08004a25
 80049b0:	08004a0d 	.word	0x08004a0d
 80049b4:	08004a25 	.word	0x08004a25
 80049b8:	08004a25 	.word	0x08004a25
 80049bc:	08004a25 	.word	0x08004a25
 80049c0:	08004a25 	.word	0x08004a25
 80049c4:	08004a25 	.word	0x08004a25
 80049c8:	08004a25 	.word	0x08004a25
 80049cc:	08004a25 	.word	0x08004a25
 80049d0:	08004a15 	.word	0x08004a15
 80049d4:	08004a25 	.word	0x08004a25
 80049d8:	08004a25 	.word	0x08004a25
 80049dc:	08004a25 	.word	0x08004a25
 80049e0:	08004a25 	.word	0x08004a25
 80049e4:	08004a25 	.word	0x08004a25
 80049e8:	08004a25 	.word	0x08004a25
 80049ec:	08004a25 	.word	0x08004a25
 80049f0:	08004a1d 	.word	0x08004a1d
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e0bc      	b.n	8004b76 <UART_SetConfig+0x5a6>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e0b8      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e0b4      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a12:	e0b0      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a14:	2320      	movs	r3, #32
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1a:	e0ac      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a1c:	2340      	movs	r3, #64	@ 0x40
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a22:	e0a8      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2a:	e0a4      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a8f      	ldr	r2, [pc, #572]	@ (8004c70 <UART_SetConfig+0x6a0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d130      	bne.n	8004a98 <UART_SetConfig+0x4c8>
 8004a36:	4b8d      	ldr	r3, [pc, #564]	@ (8004c6c <UART_SetConfig+0x69c>)
 8004a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d826      	bhi.n	8004a90 <UART_SetConfig+0x4c0>
 8004a42:	a201      	add	r2, pc, #4	@ (adr r2, 8004a48 <UART_SetConfig+0x478>)
 8004a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a48:	08004a61 	.word	0x08004a61
 8004a4c:	08004a69 	.word	0x08004a69
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a66:	e086      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6e:	e082      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a70:	2308      	movs	r3, #8
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a76:	e07e      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7e:	e07a      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a80:	2320      	movs	r3, #32
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a86:	e076      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a88:	2340      	movs	r3, #64	@ 0x40
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8e:	e072      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a90:	2380      	movs	r3, #128	@ 0x80
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a96:	e06e      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a75      	ldr	r2, [pc, #468]	@ (8004c74 <UART_SetConfig+0x6a4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d130      	bne.n	8004b04 <UART_SetConfig+0x534>
 8004aa2:	4b72      	ldr	r3, [pc, #456]	@ (8004c6c <UART_SetConfig+0x69c>)
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d826      	bhi.n	8004afc <UART_SetConfig+0x52c>
 8004aae:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <UART_SetConfig+0x4e4>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004acd 	.word	0x08004acd
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	08004add 	.word	0x08004add
 8004ac0:	08004ae5 	.word	0x08004ae5
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad2:	e050      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ada:	e04c      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004adc:	2308      	movs	r3, #8
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e048      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aea:	e044      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004aec:	2320      	movs	r3, #32
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af2:	e040      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004af4:	2340      	movs	r3, #64	@ 0x40
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afa:	e03c      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004afc:	2380      	movs	r3, #128	@ 0x80
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b02:	e038      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5b      	ldr	r2, [pc, #364]	@ (8004c78 <UART_SetConfig+0x6a8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d130      	bne.n	8004b70 <UART_SetConfig+0x5a0>
 8004b0e:	4b57      	ldr	r3, [pc, #348]	@ (8004c6c <UART_SetConfig+0x69c>)
 8004b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b05      	cmp	r3, #5
 8004b18:	d826      	bhi.n	8004b68 <UART_SetConfig+0x598>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <UART_SetConfig+0x550>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b39 	.word	0x08004b39
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	08004b49 	.word	0x08004b49
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3e:	e01a      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b46:	e016      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4e:	e012      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b56:	e00e      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b58:	2320      	movs	r3, #32
 8004b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5e:	e00a      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b60:	2340      	movs	r3, #64	@ 0x40
 8004b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b66:	e006      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b68:	2380      	movs	r3, #128	@ 0x80
 8004b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6e:	e002      	b.n	8004b76 <UART_SetConfig+0x5a6>
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c78 <UART_SetConfig+0x6a8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	f040 80f8 	bne.w	8004d72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	dc46      	bgt.n	8004c18 <UART_SetConfig+0x648>
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	f2c0 8082 	blt.w	8004c94 <UART_SetConfig+0x6c4>
 8004b90:	3b02      	subs	r3, #2
 8004b92:	2b1e      	cmp	r3, #30
 8004b94:	d87e      	bhi.n	8004c94 <UART_SetConfig+0x6c4>
 8004b96:	a201      	add	r2, pc, #4	@ (adr r2, 8004b9c <UART_SetConfig+0x5cc>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004c1f 	.word	0x08004c1f
 8004ba0:	08004c95 	.word	0x08004c95
 8004ba4:	08004c27 	.word	0x08004c27
 8004ba8:	08004c95 	.word	0x08004c95
 8004bac:	08004c95 	.word	0x08004c95
 8004bb0:	08004c95 	.word	0x08004c95
 8004bb4:	08004c37 	.word	0x08004c37
 8004bb8:	08004c95 	.word	0x08004c95
 8004bbc:	08004c95 	.word	0x08004c95
 8004bc0:	08004c95 	.word	0x08004c95
 8004bc4:	08004c95 	.word	0x08004c95
 8004bc8:	08004c95 	.word	0x08004c95
 8004bcc:	08004c95 	.word	0x08004c95
 8004bd0:	08004c95 	.word	0x08004c95
 8004bd4:	08004c47 	.word	0x08004c47
 8004bd8:	08004c95 	.word	0x08004c95
 8004bdc:	08004c95 	.word	0x08004c95
 8004be0:	08004c95 	.word	0x08004c95
 8004be4:	08004c95 	.word	0x08004c95
 8004be8:	08004c95 	.word	0x08004c95
 8004bec:	08004c95 	.word	0x08004c95
 8004bf0:	08004c95 	.word	0x08004c95
 8004bf4:	08004c95 	.word	0x08004c95
 8004bf8:	08004c95 	.word	0x08004c95
 8004bfc:	08004c95 	.word	0x08004c95
 8004c00:	08004c95 	.word	0x08004c95
 8004c04:	08004c95 	.word	0x08004c95
 8004c08:	08004c95 	.word	0x08004c95
 8004c0c:	08004c95 	.word	0x08004c95
 8004c10:	08004c95 	.word	0x08004c95
 8004c14:	08004c87 	.word	0x08004c87
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
 8004c1a:	d037      	beq.n	8004c8c <UART_SetConfig+0x6bc>
 8004c1c:	e03a      	b.n	8004c94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004c1e:	f7fe fee5 	bl	80039ec <HAL_RCCEx_GetD3PCLK1Freq>
 8004c22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c24:	e03c      	b.n	8004ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fef4 	bl	8003a18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c34:	e034      	b.n	8004ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c36:	f107 0318 	add.w	r3, r7, #24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f840 	bl	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c44:	e02c      	b.n	8004ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c46:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <UART_SetConfig+0x69c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <UART_SetConfig+0x69c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	4a07      	ldr	r2, [pc, #28]	@ (8004c7c <UART_SetConfig+0x6ac>)
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c64:	e01c      	b.n	8004ca0 <UART_SetConfig+0x6d0>
 8004c66:	bf00      	nop
 8004c68:	40011400 	.word	0x40011400
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	40007800 	.word	0x40007800
 8004c74:	40007c00 	.word	0x40007c00
 8004c78:	58000c00 	.word	0x58000c00
 8004c7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004c80:	4b9d      	ldr	r3, [pc, #628]	@ (8004ef8 <UART_SetConfig+0x928>)
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c84:	e00c      	b.n	8004ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c86:	4b9d      	ldr	r3, [pc, #628]	@ (8004efc <UART_SetConfig+0x92c>)
 8004c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c8a:	e009      	b.n	8004ca0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c92:	e005      	b.n	8004ca0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 81de 	beq.w	8005064 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	4a94      	ldr	r2, [pc, #592]	@ (8004f00 <UART_SetConfig+0x930>)
 8004cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d305      	bcc.n	8004cd8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d903      	bls.n	8004ce0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004cde:	e1c1      	b.n	8005064 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	60fa      	str	r2, [r7, #12]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	4a84      	ldr	r2, [pc, #528]	@ (8004f00 <UART_SetConfig+0x930>)
 8004cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d02:	f7fb fae9 	bl	80002d8 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	020b      	lsls	r3, r1, #8
 8004d18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d1c:	0202      	lsls	r2, r0, #8
 8004d1e:	6979      	ldr	r1, [r7, #20]
 8004d20:	6849      	ldr	r1, [r1, #4]
 8004d22:	0849      	lsrs	r1, r1, #1
 8004d24:	2000      	movs	r0, #0
 8004d26:	460c      	mov	r4, r1
 8004d28:	4605      	mov	r5, r0
 8004d2a:	eb12 0804 	adds.w	r8, r2, r4
 8004d2e:	eb43 0905 	adc.w	r9, r3, r5
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	469a      	mov	sl, r3
 8004d3a:	4693      	mov	fp, r2
 8004d3c:	4652      	mov	r2, sl
 8004d3e:	465b      	mov	r3, fp
 8004d40:	4640      	mov	r0, r8
 8004d42:	4649      	mov	r1, r9
 8004d44:	f7fb fac8 	bl	80002d8 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d56:	d308      	bcc.n	8004d6a <UART_SetConfig+0x79a>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5e:	d204      	bcs.n	8004d6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d66:	60da      	str	r2, [r3, #12]
 8004d68:	e17c      	b.n	8005064 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d70:	e178      	b.n	8005064 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d7a:	f040 80c5 	bne.w	8004f08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004d7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	dc48      	bgt.n	8004e18 <UART_SetConfig+0x848>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	db7b      	blt.n	8004e82 <UART_SetConfig+0x8b2>
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d879      	bhi.n	8004e82 <UART_SetConfig+0x8b2>
 8004d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <UART_SetConfig+0x7c4>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004e1f 	.word	0x08004e1f
 8004d98:	08004e27 	.word	0x08004e27
 8004d9c:	08004e83 	.word	0x08004e83
 8004da0:	08004e83 	.word	0x08004e83
 8004da4:	08004e2f 	.word	0x08004e2f
 8004da8:	08004e83 	.word	0x08004e83
 8004dac:	08004e83 	.word	0x08004e83
 8004db0:	08004e83 	.word	0x08004e83
 8004db4:	08004e3f 	.word	0x08004e3f
 8004db8:	08004e83 	.word	0x08004e83
 8004dbc:	08004e83 	.word	0x08004e83
 8004dc0:	08004e83 	.word	0x08004e83
 8004dc4:	08004e83 	.word	0x08004e83
 8004dc8:	08004e83 	.word	0x08004e83
 8004dcc:	08004e83 	.word	0x08004e83
 8004dd0:	08004e83 	.word	0x08004e83
 8004dd4:	08004e4f 	.word	0x08004e4f
 8004dd8:	08004e83 	.word	0x08004e83
 8004ddc:	08004e83 	.word	0x08004e83
 8004de0:	08004e83 	.word	0x08004e83
 8004de4:	08004e83 	.word	0x08004e83
 8004de8:	08004e83 	.word	0x08004e83
 8004dec:	08004e83 	.word	0x08004e83
 8004df0:	08004e83 	.word	0x08004e83
 8004df4:	08004e83 	.word	0x08004e83
 8004df8:	08004e83 	.word	0x08004e83
 8004dfc:	08004e83 	.word	0x08004e83
 8004e00:	08004e83 	.word	0x08004e83
 8004e04:	08004e83 	.word	0x08004e83
 8004e08:	08004e83 	.word	0x08004e83
 8004e0c:	08004e83 	.word	0x08004e83
 8004e10:	08004e83 	.word	0x08004e83
 8004e14:	08004e75 	.word	0x08004e75
 8004e18:	2b40      	cmp	r3, #64	@ 0x40
 8004e1a:	d02e      	beq.n	8004e7a <UART_SetConfig+0x8aa>
 8004e1c:	e031      	b.n	8004e82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e1e:	f7fd fbaf 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004e22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e24:	e033      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e26:	f7fd fbc1 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e2c:	e02f      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe fdf0 	bl	8003a18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e3c:	e027      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e3e:	f107 0318 	add.w	r3, r7, #24
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fe ff3c 	bl	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e4c:	e01f      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f04 <UART_SetConfig+0x934>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f04 <UART_SetConfig+0x934>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	4a24      	ldr	r2, [pc, #144]	@ (8004ef8 <UART_SetConfig+0x928>)
 8004e66:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e6c:	e00f      	b.n	8004e8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e6e:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <UART_SetConfig+0x928>)
 8004e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e72:	e00c      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e74:	4b21      	ldr	r3, [pc, #132]	@ (8004efc <UART_SetConfig+0x92c>)
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e78:	e009      	b.n	8004e8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e80:	e005      	b.n	8004e8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80e7 	beq.w	8005064 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	4a19      	ldr	r2, [pc, #100]	@ (8004f00 <UART_SetConfig+0x930>)
 8004e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea8:	005a      	lsls	r2, r3, #1
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	441a      	add	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	d916      	bls.n	8004ef0 <UART_SetConfig+0x920>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec8:	d212      	bcs.n	8004ef0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f023 030f 	bic.w	r3, r3, #15
 8004ed2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e0b9      	b.n	8005064 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ef6:	e0b5      	b.n	8005064 <UART_SetConfig+0xa94>
 8004ef8:	03d09000 	.word	0x03d09000
 8004efc:	003d0900 	.word	0x003d0900
 8004f00:	0800575c 	.word	0x0800575c
 8004f04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	dc49      	bgt.n	8004fa4 <UART_SetConfig+0x9d4>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	db7c      	blt.n	800500e <UART_SetConfig+0xa3e>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d87a      	bhi.n	800500e <UART_SetConfig+0xa3e>
 8004f18:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <UART_SetConfig+0x950>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004fab 	.word	0x08004fab
 8004f24:	08004fb3 	.word	0x08004fb3
 8004f28:	0800500f 	.word	0x0800500f
 8004f2c:	0800500f 	.word	0x0800500f
 8004f30:	08004fbb 	.word	0x08004fbb
 8004f34:	0800500f 	.word	0x0800500f
 8004f38:	0800500f 	.word	0x0800500f
 8004f3c:	0800500f 	.word	0x0800500f
 8004f40:	08004fcb 	.word	0x08004fcb
 8004f44:	0800500f 	.word	0x0800500f
 8004f48:	0800500f 	.word	0x0800500f
 8004f4c:	0800500f 	.word	0x0800500f
 8004f50:	0800500f 	.word	0x0800500f
 8004f54:	0800500f 	.word	0x0800500f
 8004f58:	0800500f 	.word	0x0800500f
 8004f5c:	0800500f 	.word	0x0800500f
 8004f60:	08004fdb 	.word	0x08004fdb
 8004f64:	0800500f 	.word	0x0800500f
 8004f68:	0800500f 	.word	0x0800500f
 8004f6c:	0800500f 	.word	0x0800500f
 8004f70:	0800500f 	.word	0x0800500f
 8004f74:	0800500f 	.word	0x0800500f
 8004f78:	0800500f 	.word	0x0800500f
 8004f7c:	0800500f 	.word	0x0800500f
 8004f80:	0800500f 	.word	0x0800500f
 8004f84:	0800500f 	.word	0x0800500f
 8004f88:	0800500f 	.word	0x0800500f
 8004f8c:	0800500f 	.word	0x0800500f
 8004f90:	0800500f 	.word	0x0800500f
 8004f94:	0800500f 	.word	0x0800500f
 8004f98:	0800500f 	.word	0x0800500f
 8004f9c:	0800500f 	.word	0x0800500f
 8004fa0:	08005001 	.word	0x08005001
 8004fa4:	2b40      	cmp	r3, #64	@ 0x40
 8004fa6:	d02e      	beq.n	8005006 <UART_SetConfig+0xa36>
 8004fa8:	e031      	b.n	800500e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004faa:	f7fd fae9 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004fb0:	e033      	b.n	800501a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb2:	f7fd fafb 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004fb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004fb8:	e02f      	b.n	800501a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fd2a 	bl	8003a18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fc8:	e027      	b.n	800501a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fca:	f107 0318 	add.w	r3, r7, #24
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fe76 	bl	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd8:	e01f      	b.n	800501a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fda:	4b2d      	ldr	r3, [pc, #180]	@ (8005090 <UART_SetConfig+0xac0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8005090 <UART_SetConfig+0xac0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	08db      	lsrs	r3, r3, #3
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	4a28      	ldr	r2, [pc, #160]	@ (8005094 <UART_SetConfig+0xac4>)
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ff8:	e00f      	b.n	800501a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004ffa:	4b26      	ldr	r3, [pc, #152]	@ (8005094 <UART_SetConfig+0xac4>)
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ffe:	e00c      	b.n	800501a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005000:	4b25      	ldr	r3, [pc, #148]	@ (8005098 <UART_SetConfig+0xac8>)
 8005002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005004:	e009      	b.n	800501a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800500c:	e005      	b.n	800501a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005018:	bf00      	nop
    }

    if (pclk != 0U)
 800501a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d021      	beq.n	8005064 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <UART_SetConfig+0xacc>)
 8005026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800502a:	461a      	mov	r2, r3
 800502c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	441a      	add	r2, r3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	2b0f      	cmp	r3, #15
 8005048:	d909      	bls.n	800505e <UART_SetConfig+0xa8e>
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005050:	d205      	bcs.n	800505e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	b29a      	uxth	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60da      	str	r2, [r3, #12]
 800505c:	e002      	b.n	8005064 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2201      	movs	r2, #1
 8005068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2201      	movs	r2, #1
 8005070:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2200      	movs	r2, #0
 8005078:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005080:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005084:	4618      	mov	r0, r3
 8005086:	3748      	adds	r7, #72	@ 0x48
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508e:	bf00      	nop
 8005090:	58024400 	.word	0x58024400
 8005094:	03d09000 	.word	0x03d09000
 8005098:	003d0900 	.word	0x003d0900
 800509c:	0800575c 	.word	0x0800575c

080050a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800519e:	d10a      	bne.n	80051b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b098      	sub	sp, #96	@ 0x60
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f4:	f7fb fe74 	bl	8000ee0 <HAL_GetTick>
 80051f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d12f      	bne.n	8005268 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005208:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005210:	2200      	movs	r2, #0
 8005212:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f88e 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d022      	beq.n	8005268 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005236:	653b      	str	r3, [r7, #80]	@ 0x50
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005240:	647b      	str	r3, [r7, #68]	@ 0x44
 8005242:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800524e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e6      	bne.n	8005222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e063      	b.n	8005330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d149      	bne.n	800530a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005276:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527e:	2200      	movs	r2, #0
 8005280:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f857 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d03c      	beq.n	800530a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	623b      	str	r3, [r7, #32]
   return(result);
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e6      	bne.n	8005290 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e2:	61fa      	str	r2, [r7, #28]
 80052e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	69b9      	ldr	r1, [r7, #24]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	617b      	str	r3, [r7, #20]
   return(result);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e012      	b.n	8005330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3758      	adds	r7, #88	@ 0x58
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005348:	e049      	b.n	80053de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005350:	d045      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fb fdc5 	bl	8000ee0 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <UART_WaitOnFlagUntilTimeout+0x30>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e048      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d031      	beq.n	80053de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b08      	cmp	r3, #8
 8005386:	d110      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2208      	movs	r2, #8
 800538e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f839 	bl	8005408 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2208      	movs	r2, #8
 800539a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e029      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b8:	d111      	bne.n	80053de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f81f 	bl	8005408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e00f      	b.n	80053fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d0a6      	beq.n	800534a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b095      	sub	sp, #84	@ 0x54
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800542e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005430:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800543c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e6      	bne.n	8005410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	61fb      	str	r3, [r7, #28]
   return(result);
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <UART_EndRxTransfer+0xc8>)
 8005456:	4013      	ands	r3, r2
 8005458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005464:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d118      	bne.n	80054b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	60bb      	str	r3, [r7, #8]
   return(result);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f023 0310 	bic.w	r3, r3, #16
 8005492:	647b      	str	r3, [r7, #68]	@ 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6979      	ldr	r1, [r7, #20]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	613b      	str	r3, [r7, #16]
   return(result);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e6      	bne.n	800547e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054c4:	bf00      	nop
 80054c6:	3754      	adds	r7, #84	@ 0x54
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	effffffe 	.word	0xeffffffe

080054d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_UARTEx_DisableFifoMode+0x16>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e027      	b.n	800553a <HAL_UARTEx_DisableFifoMode+0x66>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2224      	movs	r2, #36	@ 0x24
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800555a:	2302      	movs	r3, #2
 800555c:	e02d      	b.n	80055ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	@ 0x24
 800556a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f850 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e02d      	b.n	8005636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2224      	movs	r2, #36	@ 0x24
 80055e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0201 	bic.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f812 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800564c:	2b00      	cmp	r3, #0
 800564e:	d108      	bne.n	8005662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005660:	e031      	b.n	80056c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005662:	2310      	movs	r3, #16
 8005664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005666:	2310      	movs	r3, #16
 8005668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	0e5b      	lsrs	r3, r3, #25
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	0f5b      	lsrs	r3, r3, #29
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800568a:	7bbb      	ldrb	r3, [r7, #14]
 800568c:	7b3a      	ldrb	r2, [r7, #12]
 800568e:	4911      	ldr	r1, [pc, #68]	@ (80056d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005690:	5c8a      	ldrb	r2, [r1, r2]
 8005692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005696:	7b3a      	ldrb	r2, [r7, #12]
 8005698:	490f      	ldr	r1, [pc, #60]	@ (80056d8 <UARTEx_SetNbDataToProcess+0x98>)
 800569a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800569c:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	7b7a      	ldrb	r2, [r7, #13]
 80056ac:	4909      	ldr	r1, [pc, #36]	@ (80056d4 <UARTEx_SetNbDataToProcess+0x94>)
 80056ae:	5c8a      	ldrb	r2, [r1, r2]
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056b4:	7b7a      	ldrb	r2, [r7, #13]
 80056b6:	4908      	ldr	r1, [pc, #32]	@ (80056d8 <UARTEx_SetNbDataToProcess+0x98>)
 80056b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	08005774 	.word	0x08005774
 80056d8:	0800577c 	.word	0x0800577c

080056dc <memset>:
 80056dc:	4402      	add	r2, r0
 80056de:	4603      	mov	r3, r0
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d100      	bne.n	80056e6 <memset+0xa>
 80056e4:	4770      	bx	lr
 80056e6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ea:	e7f9      	b.n	80056e0 <memset+0x4>

080056ec <__libc_init_array>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005724 <__libc_init_array+0x38>)
 80056f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005728 <__libc_init_array+0x3c>)
 80056f2:	1b64      	subs	r4, r4, r5
 80056f4:	10a4      	asrs	r4, r4, #2
 80056f6:	2600      	movs	r6, #0
 80056f8:	42a6      	cmp	r6, r4
 80056fa:	d109      	bne.n	8005710 <__libc_init_array+0x24>
 80056fc:	4d0b      	ldr	r5, [pc, #44]	@ (800572c <__libc_init_array+0x40>)
 80056fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005730 <__libc_init_array+0x44>)
 8005700:	f000 f818 	bl	8005734 <_init>
 8005704:	1b64      	subs	r4, r4, r5
 8005706:	10a4      	asrs	r4, r4, #2
 8005708:	2600      	movs	r6, #0
 800570a:	42a6      	cmp	r6, r4
 800570c:	d105      	bne.n	800571a <__libc_init_array+0x2e>
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	f855 3b04 	ldr.w	r3, [r5], #4
 8005714:	4798      	blx	r3
 8005716:	3601      	adds	r6, #1
 8005718:	e7ee      	b.n	80056f8 <__libc_init_array+0xc>
 800571a:	f855 3b04 	ldr.w	r3, [r5], #4
 800571e:	4798      	blx	r3
 8005720:	3601      	adds	r6, #1
 8005722:	e7f2      	b.n	800570a <__libc_init_array+0x1e>
 8005724:	0800578c 	.word	0x0800578c
 8005728:	0800578c 	.word	0x0800578c
 800572c:	0800578c 	.word	0x0800578c
 8005730:	08005790 	.word	0x08005790

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
