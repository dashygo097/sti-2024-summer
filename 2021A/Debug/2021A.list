
2021A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002858  08015498  08015498  00016498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017cf0  08017cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017cf8  08017cf8  00018cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017d00  08017d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000928  24000000  08017d04  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  24000940  0801862c  00019940  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010bcc  24004940  0801c62c  0001d940  2**3
                  ALLOC
  9 ._user_heap_stack 00004004  2401550c  0801c62c  0001e50c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001d940  2**0
                  CONTENTS, READONLY
 11 .debug_info   00025042  00000000  00000000  0001d96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004827  00000000  00000000  000429b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b90  00000000  00000000  000471d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001568  00000000  00000000  00048d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d705  00000000  00000000  0004a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00027cbd  00000000  00000000  000879d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017b938  00000000  00000000  000af692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0022afca  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008cac  00000000  00000000  0022b010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000058  00000000  00000000  00233cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004940 	.word	0x24004940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801547c 	.word	0x0801547c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004944 	.word	0x24004944
 80002dc:	0801547c 	.word	0x0801547c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f013 fb1c 	bl	8013f90 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f013 feae 	bl	80146c8 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f013 fc10 	bl	80141e0 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000c58 <FFT+0x238>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f013 fa16 	bl	8013ef8 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000c58 <FFT+0x238>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f013 f9b3 	bl	8013e60 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8000c60 <FFT+0x240>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size +100];
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000b50:	1e4b      	subs	r3, r1, #1
 8000b52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b56:	460a      	mov	r2, r1
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4690      	mov	r8, r2
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b6a:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6e:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b72:	460a      	mov	r2, r1
 8000b74:	2300      	movs	r3, #0
 8000b76:	4614      	mov	r4, r2
 8000b78:	461d      	mov	r5, r3
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	f04f 0300 	mov.w	r3, #0
 8000b82:	01eb      	lsls	r3, r5, #7
 8000b84:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b88:	01e2      	lsls	r2, r4, #7
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	3307      	adds	r3, #7
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	ebad 0d03 	sub.w	sp, sp, r3
 8000b98:	466b      	mov	r3, sp
 8000b9a:	3307      	adds	r3, #7
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X =A;
 8000ba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bac:	e027      	b.n	8000bfe <FFT+0x1de>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000bae:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fec0 	bl	8000938 <rev>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	ed93 7b00 	vldr	d7, [r3]
 8000bc4:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000c60 <FFT+0x240>
 8000bc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bcc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4413      	add	r3, r2
 8000bd6:	ed83 7b00 	vstr	d7, [r3]
 8000bda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	f103 0108 	add.w	r1, r3, #8
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbd2      	blt.n	8000bae <FFT+0x18e>
    }
    
    int s , m , k , j;
    double complex omega , t , u;

    for(s = 1 ; s <size ; s*=2)
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0e:	e0f8      	b.n	8000e02 <FFT+0x3e2>
    {
        m = s*2;
 8000c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k < size ; k+=m)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1e:	e0e5      	b.n	8000dec <FFT+0x3cc>
        {
            omega = 1;
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <FFT+0x248>)
 8000c26:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2 ; j++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <FFT+0x248>)
 8000c4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c52:	e0ba      	b.n	8000dca <FFT+0x3aa>
 8000c54:	f3af 8000 	nop.w
 8000c58:	54442d18 	.word	0x54442d18
 8000c5c:	401921fb 	.word	0x401921fb
	...
 8000c68:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c74:	441a      	add	r2, r3
 8000c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da00      	bge.n	8000c7e <FFT+0x25e>
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c84:	011a      	lsls	r2, r3, #4
 8000c86:	440a      	add	r2, r1
 8000c88:	ed92 7b00 	vldr	d7, [r2]
 8000c8c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	4413      	add	r3, r2
 8000c92:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c96:	eeb0 3b46 	vmov.f64	d3, d6
 8000c9a:	eeb0 2b47 	vmov.f64	d2, d7
 8000c9e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ca2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000ca6:	f7ff fb8b 	bl	80003c0 <__muldc3>
 8000caa:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000cae:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000cb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cc2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cca:	18d1      	adds	r1, r2, r3
 8000ccc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cce:	010b      	lsls	r3, r1, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cdc:	010b      	lsls	r3, r1, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cf0:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cf4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d00:	4413      	add	r3, r2
 8000d02:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d06:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d0e:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d12:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d16:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d1c:	011a      	lsls	r2, r3, #4
 8000d1e:	440a      	add	r2, r1
 8000d20:	ed82 6b00 	vstr	d6, [r2]
 8000d24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4413      	add	r3, r2
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d30:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d38:	441a      	add	r2, r3
 8000d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da00      	bge.n	8000d42 <FFT+0x322>
 8000d40:	3301      	adds	r3, #1
 8000d42:	105b      	asrs	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d4a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d52:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d56:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d5e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d60:	011a      	lsls	r2, r3, #4
 8000d62:	440a      	add	r2, r1
 8000d64:	ed82 6b00 	vstr	d6, [r2]
 8000d68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3308      	adds	r3, #8
 8000d70:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d80:	011a      	lsls	r2, r3, #4
 8000d82:	440a      	add	r2, r1
 8000d84:	ed92 7b00 	vldr	d7, [r2]
 8000d88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4413      	add	r3, r2
 8000d90:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d94:	eeb0 3b46 	vmov.f64	d3, d6
 8000d98:	eeb0 2b47 	vmov.f64	d2, d7
 8000d9c:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000da0:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000da4:	f7ff fb0c 	bl	80003c0 <__muldc3>
 8000da8:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000dac:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000db0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000db4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000dbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2 ; j++)
 8000dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da00      	bge.n	8000dd2 <FFT+0x3b2>
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	105b      	asrs	r3, r3, #1
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f6ff af46 	blt.w	8000c6c <FFT+0x24c>
        for ( k = 0 ; k < size ; k+=m)
 8000de0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000de6:	4413      	add	r3, r2
 8000de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000dec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	f6ff af14 	blt.w	8000c20 <FFT+0x200>
    for(s = 1 ; s <size ; s*=2)
 8000df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f6ff af01 	blt.w	8000c10 <FFT+0x1f0>
            } 
        }
    }
    return X;
 8000e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e10:	46b5      	mov	sp, r6

}
 8000e12:	4618      	mov	r0, r3
 8000e14:	37a4      	adds	r7, #164	@ 0xa4
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e20 <FFT_Mag>:

double * FFT_Mag(int size , double x[])
{
 8000e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e24:	b08d      	sub	sp, #52	@ 0x34
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
 8000e2c:	466b      	mov	r3, sp
 8000e2e:	461e      	mov	r6, r3
    double A[size +100];
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000e36:	1e4b      	subs	r3, r1, #1
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4690      	mov	r8, r2
 8000e40:	4699      	mov	r9, r3
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000e4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000e52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000e56:	460a      	mov	r2, r1
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	01ab      	lsls	r3, r5, #6
 8000e68:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000e6c:	01a2      	lsls	r2, r4, #6
 8000e6e:	460b      	mov	r3, r1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	3307      	adds	r3, #7
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7c:	466b      	mov	r3, sp
 8000e7e:	3307      	adds	r3, #7
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    double cr , ci;
    double complex*X = FFT(size , x);
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fdc9 	bl	8000a20 <FFT>
 8000e8e:	6238      	str	r0, [r7, #32]
    for (int i = 0 ; i < size ; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e94:	e035      	b.n	8000f02 <FFT_Mag+0xe2>
    {
        cr = (creal(X[i]) * creal(X[i]));
 8000e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	6a3a      	ldr	r2, [r7, #32]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	ed93 6b00 	vldr	d6, [r3]
 8000ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	ed93 7b00 	vldr	d7, [r3]
 8000eae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000eb2:	ed87 7b04 	vstr	d7, [r7, #16]
        ci = (cimag(X[i]) * cimag(X[i]));
 8000eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	6a3a      	ldr	r2, [r7, #32]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	ed93 6b02 	vldr	d6, [r3, #8]
 8000ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	6a3a      	ldr	r2, [r7, #32]
 8000ec8:	4413      	add	r3, r2
 8000eca:	ed93 7b02 	vldr	d7, [r3, #8]
 8000ece:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed2:	ed87 7b02 	vstr	d7, [r7, #8]
        A[i] = (cr + ci)/size;
 8000ed6:	ed97 6b04 	vldr	d6, [r7, #16]
 8000eda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ede:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000eec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0 ; i < size ; i++)
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	3301      	adds	r3, #1
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbc5      	blt.n	8000e96 <FFT_Mag+0x76>
    }
    double* a = A;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	61fb      	str	r3, [r7, #28]
    return a;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	46b5      	mov	sp, r6
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3734      	adds	r7, #52	@ 0x34
 8000f16:	46bd      	mov	sp, r7
 8000f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <Blackman>:

    return p;
}

double* Blackman(int size , int left , int right , double x[])
{
 8000f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f24:	ed2d 8b04 	vpush	{d8-d9}
 8000f28:	b089      	sub	sp, #36	@ 0x24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	466b      	mov	r3, sp
 8000f36:	461e      	mov	r6, r3
    double A[size  +100];
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000f3e:	1e4b      	subs	r3, r1, #1
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	460a      	mov	r2, r1
 8000f44:	2300      	movs	r3, #0
 8000f46:	4690      	mov	r8, r2
 8000f48:	4699      	mov	r9, r3
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000f56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000f5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000f5e:	460a      	mov	r2, r1
 8000f60:	2300      	movs	r3, #0
 8000f62:	4614      	mov	r4, r2
 8000f64:	461d      	mov	r5, r3
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	01ab      	lsls	r3, r5, #6
 8000f70:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000f74:	01a2      	lsls	r2, r4, #6
 8000f76:	460b      	mov	r3, r1
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	ebad 0d03 	sub.w	sp, sp, r3
 8000f84:	466b      	mov	r3, sp
 8000f86:	3307      	adds	r3, #7
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
    double *a = A ;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	613b      	str	r3, [r7, #16]

    for (int i = 0 ; i < size ; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e06b      	b.n	8001070 <Blackman+0x150>
    {
    	if (i < right && i >=  left)
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	da5a      	bge.n	8001056 <Blackman+0x136>
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	db56      	blt.n	8001056 <Blackman+0x136>
    	{
    		A[i] = 10* x[i] * ( 0.42 + 0.08* cos(4*M_PI*(i - left )/(right - left - 1)) - 0.5*cos(2*M_PI*(i - left )/(right - left - 1)));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	ed93 7b00 	vldr	d7, [r3]
 8000fb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000fb8:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fca:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8001090 <Blackman+0x170>
 8000fce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fe2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000fe6:	eeb0 0b45 	vmov.f64	d0, d5
 8000fea:	f012 ff39 	bl	8013e60 <cos>
 8000fee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ff2:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8001098 <Blackman+0x178>
 8000ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ffa:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80010a0 <Blackman+0x180>
 8000ffe:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001010:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80010a8 <Blackman+0x188>
 8001014:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	3b01      	subs	r3, #1
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001028:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800102c:	eeb0 0b45 	vmov.f64	d0, d5
 8001030:	f012 ff16 	bl	8013e60 <cos>
 8001034:	eeb0 7b40 	vmov.f64	d7, d0
 8001038:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800103c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001040:	ee39 7b47 	vsub.f64	d7, d9, d7
 8001044:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	ed83 7b00 	vstr	d7, [r3]
 8001054:	e009      	b.n	800106a <Blackman+0x14a>
    	}
    	else
    	{
    		A[i] = 0;
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	18d1      	adds	r1, r2, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	db8f      	blt.n	8000f98 <Blackman+0x78>
    	}
    }
    return a;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	46b5      	mov	sp, r6
}
 800107c:	4618      	mov	r0, r3
 800107e:	3724      	adds	r7, #36	@ 0x24
 8001080:	46bd      	mov	sp, r7
 8001082:	ecbd 8b04 	vpop	{d8-d9}
 8001086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	54442d18 	.word	0x54442d18
 8001094:	402921fb 	.word	0x402921fb
 8001098:	47ae147b 	.word	0x47ae147b
 800109c:	3fb47ae1 	.word	0x3fb47ae1
 80010a0:	ae147ae1 	.word	0xae147ae1
 80010a4:	3fdae147 	.word	0x3fdae147
 80010a8:	54442d18 	.word	0x54442d18
 80010ac:	401921fb 	.word	0x401921fb

080010b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <MX_ADC1_Init+0xe8>)
 80010d6:	4a31      	ldr	r2, [pc, #196]	@ (800119c <MX_ADC1_Init+0xec>)
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010da:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <MX_ADC1_Init+0xe8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <MX_ADC1_Init+0xe8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <MX_ADC1_Init+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <MX_ADC1_Init+0xe8>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <MX_ADC1_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <MX_ADC1_Init+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001100:	2201      	movs	r2, #1
 8001102:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_ADC1_Init+0xe8>)
 800110c:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001114:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001118:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_ADC1_Init+0xe8>)
 800111c:	2203      	movs	r2, #3
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_ADC1_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	4818      	ldr	r0, [pc, #96]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001136:	f002 fe5d 	bl	8003df4 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001140:	f001 fa6c 	bl	800261c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4812      	ldr	r0, [pc, #72]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001150:	f004 f99e 	bl	8005490 <HAL_ADCEx_MultiModeConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800115a:	f001 fa5f 	bl	800261c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <MX_ADC1_Init+0xf0>)
 8001160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001162:	2306      	movs	r3, #6
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001166:	2302      	movs	r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800116e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001170:	2304      	movs	r3, #4
 8001172:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_ADC1_Init+0xe8>)
 8001182:	f003 fa31 	bl	80045e8 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800118c:	f001 fa46 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	@ 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2400495c 	.word	0x2400495c
 800119c:	40022000 	.word	0x40022000
 80011a0:	0c900008 	.word	0x0c900008

080011a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ba      	sub	sp, #232	@ 0xe8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	22c0      	movs	r2, #192	@ 0xc0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00e faea 	bl	800f79e <memset>
  if(adcHandle->Instance==ADC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a43      	ldr	r2, [pc, #268]	@ (80012dc <HAL_ADC_MspInit+0x138>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d17e      	bne.n	80012d2 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011d4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80011e0:	2319      	movs	r3, #25
 80011e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 80011e4:	23c8      	movs	r3, #200	@ 0xc8
 80011e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4618      	mov	r0, r3
 800120c:	f009 f808 	bl	800a220 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001216:	f001 fa01 	bl	800261c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <HAL_ADC_MspInit+0x13c>)
 800121c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001220:	4a2f      	ldr	r2, [pc, #188]	@ (80012e0 <HAL_ADC_MspInit+0x13c>)
 8001222:	f043 0320 	orr.w	r3, r3, #32
 8001226:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800122a:	4b2d      	ldr	r3, [pc, #180]	@ (80012e0 <HAL_ADC_MspInit+0x13c>)
 800122c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <HAL_ADC_MspInit+0x13c>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123e:	4a28      	ldr	r2, [pc, #160]	@ (80012e0 <HAL_ADC_MspInit+0x13c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001248:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <HAL_ADC_MspInit+0x13c>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001256:	2340      	movs	r3, #64	@ 0x40
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800126c:	4619      	mov	r1, r3
 800126e:	481d      	ldr	r0, [pc, #116]	@ (80012e4 <HAL_ADC_MspInit+0x140>)
 8001270:	f006 ff66 	bl	8008140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 8001276:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <HAL_ADC_MspInit+0x148>)
 8001278:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 800127c:	2209      	movs	r2, #9
 800127e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 8001296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800129a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 800129e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012b6:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 80012b8:	f004 fcb4 	bl	8005c24 <HAL_DMA_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 80012c2:	f001 f9ab 	bl	800261c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a07      	ldr	r2, [pc, #28]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 80012ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <HAL_ADC_MspInit+0x144>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012d2:	bf00      	nop
 80012d4:	37e8      	adds	r7, #232	@ 0xe8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58020000 	.word	0x58020000
 80012e8:	240049c0 	.word	0x240049c0
 80012ec:	40020010 	.word	0x40020010

080012f0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_ADC_MspDeInit+0x3c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d110      	bne.n	8001324 <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_ADC_MspDeInit+0x40>)
 8001304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001308:	4a09      	ldr	r2, [pc, #36]	@ (8001330 <HAL_ADC_MspDeInit+0x40>)
 800130a:	f023 0320 	bic.w	r3, r3, #32
 800130e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8001312:	2140      	movs	r1, #64	@ 0x40
 8001314:	4807      	ldr	r0, [pc, #28]	@ (8001334 <HAL_ADC_MspDeInit+0x44>)
 8001316:	f007 f8c3 	bl	80084a0 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4618      	mov	r0, r3
 8001320:	f004 ffdc 	bl	80062dc <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40022000 	.word	0x40022000
 8001330:	58024400 	.word	0x58024400
 8001334:	58020000 	.word	0x58020000

08001338 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2224      	movs	r2, #36	@ 0x24
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f00e fa2a 	bl	800f79e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_DAC1_Init+0x5c>)
 800134c:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <MX_DAC1_Init+0x60>)
 800134e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001350:	4810      	ldr	r0, [pc, #64]	@ (8001394 <MX_DAC1_Init+0x5c>)
 8001352:	f004 fb07 	bl	8005964 <HAL_DAC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800135c:	f001 f95e 	bl	800261c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001368:	2302      	movs	r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2210      	movs	r2, #16
 8001378:	4619      	mov	r1, r3
 800137a:	4806      	ldr	r0, [pc, #24]	@ (8001394 <MX_DAC1_Init+0x5c>)
 800137c:	f004 fb14 	bl	80059a8 <HAL_DAC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001386:	f001 f949 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	@ 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	24004a38 	.word	0x24004a38
 8001398:	40007400 	.word	0x40007400

0800139c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a30      	ldr	r2, [pc, #192]	@ (800147c <HAL_DAC_MspInit+0xe0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d159      	bne.n	8001472 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80013be:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <HAL_DAC_MspInit+0xe4>)
 80013c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001480 <HAL_DAC_MspInit+0xe4>)
 80013c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001480 <HAL_DAC_MspInit+0xe4>)
 80013d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <HAL_DAC_MspInit+0xe4>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	4a27      	ldr	r2, [pc, #156]	@ (8001480 <HAL_DAC_MspInit+0xe4>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <HAL_DAC_MspInit+0xe4>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013fa:	2320      	movs	r3, #32
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fe:	2303      	movs	r3, #3
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	481d      	ldr	r0, [pc, #116]	@ (8001484 <HAL_DAC_MspInit+0xe8>)
 800140e:	f006 fe97 	bl	8008140 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_DAC_MspInit+0xf0>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 800141a:	2244      	movs	r2, #68	@ 0x44
 800141c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 8001420:	2240      	movs	r2, #64	@ 0x40
 8001422:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 800142c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 8001434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001438:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 8001444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001448:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001450:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001456:	480c      	ldr	r0, [pc, #48]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 8001458:	f004 fbe4 	bl	8005c24 <HAL_DMA_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001462:	f001 f8db 	bl	800261c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <HAL_DAC_MspInit+0xec>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40007400 	.word	0x40007400
 8001480:	58024400 	.word	0x58024400
 8001484:	58020000 	.word	0x58020000
 8001488:	24004a4c 	.word	0x24004a4c
 800148c:	40020028 	.word	0x40020028

08001490 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_DMA_Init+0x4c>)
 8001498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800149c:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <MX_DMA_Init+0x4c>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <MX_DMA_Init+0x4c>)
 80014a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	200b      	movs	r0, #11
 80014ba:	f004 f9a2 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014be:	200b      	movs	r0, #11
 80014c0:	f004 f9b9 	bl	8005836 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	200c      	movs	r0, #12
 80014ca:	f004 f99a 	bl	8005802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014ce:	200c      	movs	r0, #12
 80014d0:	f004 f9b1 	bl	8005836 <HAL_NVIC_EnableIRQ>

}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	58024400 	.word	0x58024400

080014e0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	4b19      	ldr	r3, [pc, #100]	@ (800154c <MX_GPIO_Init+0x6c>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <MX_GPIO_Init+0x6c>)
 80014ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_GPIO_Init+0x6c>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_GPIO_Init+0x6c>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150a:	4a10      	ldr	r2, [pc, #64]	@ (800154c <MX_GPIO_Init+0x6c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <MX_GPIO_Init+0x6c>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <MX_GPIO_Init+0x6c>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001528:	4a08      	ldr	r2, [pc, #32]	@ (800154c <MX_GPIO_Init+0x6c>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_GPIO_Init+0x6c>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]

}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	58024400 	.word	0x58024400

08001550 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <MX_I2C1_Init+0x74>)
 8001556:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <MX_I2C1_Init+0x78>)
 8001558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <MX_I2C1_Init+0x74>)
 800155c:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <MX_I2C1_Init+0x7c>)
 800155e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <MX_I2C1_Init+0x74>)
 8001568:	2201      	movs	r2, #1
 800156a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <MX_I2C1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_I2C1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_I2C1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_I2C1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_I2C1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800158a:	480e      	ldr	r0, [pc, #56]	@ (80015c4 <MX_I2C1_Init+0x74>)
 800158c:	f007 f892 	bl	80086b4 <HAL_I2C_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001596:	f001 f841 	bl	800261c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159a:	2100      	movs	r1, #0
 800159c:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <MX_I2C1_Init+0x74>)
 800159e:	f007 fd85 	bl	80090ac <HAL_I2CEx_ConfigAnalogFilter>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015a8:	f001 f838 	bl	800261c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015ac:	2100      	movs	r1, #0
 80015ae:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_I2C1_Init+0x74>)
 80015b0:	f007 fdc7 	bl	8009142 <HAL_I2CEx_ConfigDigitalFilter>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ba:	f001 f82f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	24004ac4 	.word	0x24004ac4
 80015c8:	40005400 	.word	0x40005400
 80015cc:	00b03fdb 	.word	0x00b03fdb

080015d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0ba      	sub	sp, #232	@ 0xe8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	22c0      	movs	r2, #192	@ 0xc0
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00e f8d4 	bl	800f79e <memset>
  if(i2cHandle->Instance==I2C1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a26      	ldr	r2, [pc, #152]	@ (8001694 <HAL_I2C_MspInit+0xc4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d145      	bne.n	800168c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001600:	f04f 0208 	mov.w	r2, #8
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4618      	mov	r0, r3
 8001618:	f008 fe02 	bl	800a220 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001622:	f000 fffb 	bl	800261c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <HAL_I2C_MspInit+0xc8>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162c:	4a1a      	ldr	r2, [pc, #104]	@ (8001698 <HAL_I2C_MspInit+0xc8>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_I2C_MspInit+0xc8>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001644:	23c0      	movs	r3, #192	@ 0xc0
 8001646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165c:	2304      	movs	r3, #4
 800165e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <HAL_I2C_MspInit+0xcc>)
 800166a:	f006 fd69 	bl	8008140 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_I2C_MspInit+0xc8>)
 8001670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001674:	4a08      	ldr	r2, [pc, #32]	@ (8001698 <HAL_I2C_MspInit+0xc8>)
 8001676:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800167a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_I2C_MspInit+0xc8>)
 8001680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800168c:	bf00      	nop
 800168e:	37e8      	adds	r7, #232	@ 0xe8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40005400 	.word	0x40005400
 8001698:	58024400 	.word	0x58024400
 800169c:	58020400 	.word	0x58020400

080016a0 <PrintMag>:
	i--;
	}
	str_2[j] = '\0';
}
void PrintMag(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
	 for (i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 80016a6:	4b48      	ldr	r3, [pc, #288]	@ (80017c8 <PrintMag+0x128>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e07e      	b.n	80017ac <PrintMag+0x10c>
		  	  {
//		  		  sprintf(str_2 , "%.5lf" , (P[i]));
		  		  if (max[0] < P[i] &&  i < 50 && i > 10 )
 80016ae:	4b47      	ldr	r3, [pc, #284]	@ (80017cc <PrintMag+0x12c>)
 80016b0:	ed93 6b00 	vldr	d6, [r3]
 80016b4:	4b46      	ldr	r3, [pc, #280]	@ (80017d0 <PrintMag+0x130>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <PrintMag+0x128>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	ed93 7b00 	vldr	d7, [r3]
 80016c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d517      	bpl.n	80016fe <PrintMag+0x5e>
 80016ce:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <PrintMag+0x128>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b31      	cmp	r3, #49	@ 0x31
 80016d4:	dc13      	bgt.n	80016fe <PrintMag+0x5e>
 80016d6:	4b3c      	ldr	r3, [pc, #240]	@ (80017c8 <PrintMag+0x128>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b0a      	cmp	r3, #10
 80016dc:	dd0f      	ble.n	80016fe <PrintMag+0x5e>
		  		  {
		  			  max_index[0] = i * 1 ;
 80016de:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <PrintMag+0x128>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a3c      	ldr	r2, [pc, #240]	@ (80017d4 <PrintMag+0x134>)
 80016e4:	6013      	str	r3, [r2, #0]
		  		  	  max[0] =P[i];
 80016e6:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <PrintMag+0x130>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <PrintMag+0x128>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	4935      	ldr	r1, [pc, #212]	@ (80017cc <PrintMag+0x12c>)
 80016f8:	e9c1 2300 	strd	r2, r3, [r1]
 80016fc:	e00d      	b.n	800171a <PrintMag+0x7a>

		  		  }
		  		  else if (i < 100 )
 80016fe:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <PrintMag+0x128>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b63      	cmp	r3, #99	@ 0x63
 8001704:	dc09      	bgt.n	800171a <PrintMag+0x7a>
		  		  {
		  		      max_index[0] = max_index[0];
 8001706:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <PrintMag+0x134>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a32      	ldr	r2, [pc, #200]	@ (80017d4 <PrintMag+0x134>)
 800170c:	6013      	str	r3, [r2, #0]
		  		  	  max[0] = max[0];
 800170e:	4b2f      	ldr	r3, [pc, #188]	@ (80017cc <PrintMag+0x12c>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	492d      	ldr	r1, [pc, #180]	@ (80017cc <PrintMag+0x12c>)
 8001716:	e9c1 2300 	strd	r2, r3, [r1]
		  		  }
		  		  for (int j = 1 ; j  <= 5 ; j ++)
 800171a:	2301      	movs	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	e03d      	b.n	800179c <PrintMag+0xfc>
		  		  {
		  			  if (max[j] < P[i] && i < (max_index[6]+20)*(j) &&  i >(max_index[6]-20)*(j) )
 8001720:	4a2a      	ldr	r2, [pc, #168]	@ (80017cc <PrintMag+0x12c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	ed93 6b00 	vldr	d6, [r3]
 800172c:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <PrintMag+0x130>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <PrintMag+0x128>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	ed93 7b00 	vldr	d7, [r3]
 800173c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d527      	bpl.n	8001796 <PrintMag+0xf6>
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <PrintMag+0x134>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	3314      	adds	r3, #20
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	fb03 f202 	mul.w	r2, r3, r2
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <PrintMag+0x128>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	dd1d      	ble.n	8001796 <PrintMag+0xf6>
 800175a:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <PrintMag+0x134>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	3b14      	subs	r3, #20
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	fb03 f202 	mul.w	r2, r3, r2
 8001766:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <PrintMag+0x128>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	da13      	bge.n	8001796 <PrintMag+0xf6>
		  			  	  {
		  			  		  max_index[j] = i * 1 ;
 800176e:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <PrintMag+0x128>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4918      	ldr	r1, [pc, #96]	@ (80017d4 <PrintMag+0x134>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  			  	  	  max[j] =P[i];
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <PrintMag+0x130>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <PrintMag+0x128>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4413      	add	r3, r2
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	4810      	ldr	r0, [pc, #64]	@ (80017cc <PrintMag+0x12c>)
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	00c9      	lsls	r1, r1, #3
 8001790:	4401      	add	r1, r0
 8001792:	e9c1 2300 	strd	r2, r3, [r1]
		  		  for (int j = 1 ; j  <= 5 ; j ++)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	ddbe      	ble.n	8001720 <PrintMag+0x80>
	 for (i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <PrintMag+0x128>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4a07      	ldr	r2, [pc, #28]	@ (80017c8 <PrintMag+0x128>)
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <PrintMag+0x128>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017b4:	f6ff af7b 	blt.w	80016ae <PrintMag+0xe>
		  			  	  }
		  		  }
//		  		HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		  		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
		  	  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	24014b80 	.word	0x24014b80
 80017cc:	24000228 	.word	0x24000228
 80017d0:	24004b70 	.word	0x24004b70
 80017d4:	24004b1c 	.word	0x24004b1c

080017d8 <PrintTHD>:

void PrintTHD(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	ed2d 8b02 	vpush	{d8}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
	  uo[0] = max[0];
 80017e2:	4bb3      	ldr	r3, [pc, #716]	@ (8001ab0 <PrintTHD+0x2d8>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	49b2      	ldr	r1, [pc, #712]	@ (8001ab4 <PrintTHD+0x2dc>)
 80017ea:	e9c1 2300 	strd	r2, r3, [r1]
	  double rate[5]={0};
 80017ee:	463b      	mov	r3, r7
 80017f0:	2228      	movs	r2, #40	@ 0x28
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00d ffd2 	bl	800f79e <memset>
	  for (i = 1 ; i <= 5; i++)
 80017fa:	4baf      	ldr	r3, [pc, #700]	@ (8001ab8 <PrintTHD+0x2e0>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e037      	b.n	8001872 <PrintTHD+0x9a>
	  {
		uo[i] = (max[i]);
 8001802:	4bad      	ldr	r3, [pc, #692]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4aac      	ldr	r2, [pc, #688]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001808:	6811      	ldr	r1, [r2, #0]
 800180a:	4aa9      	ldr	r2, [pc, #676]	@ (8001ab0 <PrintTHD+0x2d8>)
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	48a7      	ldr	r0, [pc, #668]	@ (8001ab4 <PrintTHD+0x2dc>)
 8001816:	00c9      	lsls	r1, r1, #3
 8001818:	4401      	add	r1, r0
 800181a:	e9c1 2300 	strd	r2, r3, [r1]

		rate[i-1]=sqrt(uo[i])/sqrt(uo[1]) * 100;
 800181e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4aa4      	ldr	r2, [pc, #656]	@ (8001ab4 <PrintTHD+0x2dc>)
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	ed93 7b00 	vldr	d7, [r3]
 800182c:	eeb0 0b47 	vmov.f64	d0, d7
 8001830:	f012 faf6 	bl	8013e20 <sqrt>
 8001834:	eeb0 8b40 	vmov.f64	d8, d0
 8001838:	4b9e      	ldr	r3, [pc, #632]	@ (8001ab4 <PrintTHD+0x2dc>)
 800183a:	ed93 7b02 	vldr	d7, [r3, #8]
 800183e:	eeb0 0b47 	vmov.f64	d0, d7
 8001842:	f012 faed 	bl	8013e20 <sqrt>
 8001846:	eeb0 6b40 	vmov.f64	d6, d0
 800184a:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800184e:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3b01      	subs	r3, #1
 8001854:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8001aa8 <PrintTHD+0x2d0>
 8001858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	3328      	adds	r3, #40	@ 0x28
 8001860:	443b      	add	r3, r7
 8001862:	3b28      	subs	r3, #40	@ 0x28
 8001864:	ed83 7b00 	vstr	d7, [r3]
	  for (i = 1 ; i <= 5; i++)
 8001868:	4b93      	ldr	r3, [pc, #588]	@ (8001ab8 <PrintTHD+0x2e0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a92      	ldr	r2, [pc, #584]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b91      	ldr	r3, [pc, #580]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b05      	cmp	r3, #5
 8001878:	ddc3      	ble.n	8001802 <PrintTHD+0x2a>


	  }
	  Oled_Init();
 800187a:	f000 ff0b 	bl	8002694 <Oled_Init>
	  //Oled_Screen_Clear();
	  HAL_Delay(500);
 800187e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001882:	f002 f84f 	bl	8003924 <HAL_Delay>
	  Oled_WriteAsciiString("%%\n");
 8001886:	488d      	ldr	r0, [pc, #564]	@ (8001abc <PrintTHD+0x2e4>)
 8001888:	f001 f85a 	bl	8002940 <Oled_WriteAsciiString>
	  sprintf(str_2 , "Uo1/Uo1=%.2lf" , (rate[0]));
 800188c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001890:	498b      	ldr	r1, [pc, #556]	@ (8001ac0 <PrintTHD+0x2e8>)
 8001892:	488c      	ldr	r0, [pc, #560]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001894:	f00d ff20 	bl	800f6d8 <sprintf>
	  Oled_WriteAsciiString(str_2);
 8001898:	488a      	ldr	r0, [pc, #552]	@ (8001ac4 <PrintTHD+0x2ec>)
 800189a:	f001 f851 	bl	8002940 <Oled_WriteAsciiString>
	  Oled_WriteAsciiString("%%\n");
 800189e:	4887      	ldr	r0, [pc, #540]	@ (8001abc <PrintTHD+0x2e4>)
 80018a0:	f001 f84e 	bl	8002940 <Oled_WriteAsciiString>
	  	  sprintf(str_2 , "Uo2/Uo1=%.2lf" , (rate[1]));
 80018a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a8:	4987      	ldr	r1, [pc, #540]	@ (8001ac8 <PrintTHD+0x2f0>)
 80018aa:	4886      	ldr	r0, [pc, #536]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018ac:	f00d ff14 	bl	800f6d8 <sprintf>
	  	  Oled_WriteAsciiString(str_2);
 80018b0:	4884      	ldr	r0, [pc, #528]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018b2:	f001 f845 	bl	8002940 <Oled_WriteAsciiString>
	  	Oled_WriteAsciiString("%%\n");
 80018b6:	4881      	ldr	r0, [pc, #516]	@ (8001abc <PrintTHD+0x2e4>)
 80018b8:	f001 f842 	bl	8002940 <Oled_WriteAsciiString>
	  	sprintf(str_2 , "Uo3/Uo1=%.2lf" , (rate[2]));
 80018bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c0:	4982      	ldr	r1, [pc, #520]	@ (8001acc <PrintTHD+0x2f4>)
 80018c2:	4880      	ldr	r0, [pc, #512]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018c4:	f00d ff08 	bl	800f6d8 <sprintf>
	  		  	  Oled_WriteAsciiString(str_2);
 80018c8:	487e      	ldr	r0, [pc, #504]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018ca:	f001 f839 	bl	8002940 <Oled_WriteAsciiString>
	  		  	Oled_WriteAsciiString("%%\n");
 80018ce:	487b      	ldr	r0, [pc, #492]	@ (8001abc <PrintTHD+0x2e4>)
 80018d0:	f001 f836 	bl	8002940 <Oled_WriteAsciiString>
	  		  sprintf(str_2 , "Uo4/Uo1=%.2lf" , (rate[3]));
 80018d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d8:	497d      	ldr	r1, [pc, #500]	@ (8001ad0 <PrintTHD+0x2f8>)
 80018da:	487a      	ldr	r0, [pc, #488]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018dc:	f00d fefc 	bl	800f6d8 <sprintf>
	  		Oled_WriteAsciiString(str_2);
 80018e0:	4878      	ldr	r0, [pc, #480]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018e2:	f001 f82d 	bl	8002940 <Oled_WriteAsciiString>
	  		Oled_WriteAsciiString("%%\n");
 80018e6:	4875      	ldr	r0, [pc, #468]	@ (8001abc <PrintTHD+0x2e4>)
 80018e8:	f001 f82a 	bl	8002940 <Oled_WriteAsciiString>
	  		sprintf(str_2 , "Uo5/Uo1=%.2lf" , (rate[4]));
 80018ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018f0:	4978      	ldr	r1, [pc, #480]	@ (8001ad4 <PrintTHD+0x2fc>)
 80018f2:	4874      	ldr	r0, [pc, #464]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018f4:	f00d fef0 	bl	800f6d8 <sprintf>
	  		Oled_WriteAsciiString(str_2);
 80018f8:	4872      	ldr	r0, [pc, #456]	@ (8001ac4 <PrintTHD+0x2ec>)
 80018fa:	f001 f821 	bl	8002940 <Oled_WriteAsciiString>
	  		Oled_WriteAsciiString("%%\n");
 80018fe:	486f      	ldr	r0, [pc, #444]	@ (8001abc <PrintTHD+0x2e4>)
 8001900:	f001 f81e 	bl	8002940 <Oled_WriteAsciiString>
//	  			  Oled_WriteAsciiString(str_2);
//	  			Oled_WriteAsciiString("\n");
//	  				  sprintf(str_2 , "Uo5/Uo1=%.2lf" , (rate[4]));
//	  				  Oled_WriteAsciiString(str_2);
//	  				Oled_WriteAsciiString("\n");
	  sprintf(str_2 , "x2.val=%d\xff\xff\xff" ,(int) (rate[0] * 100));
 8001904:	ed97 7b00 	vldr	d7, [r7]
 8001908:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8001aa8 <PrintTHD+0x2d0>
 800190c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001910:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001914:	ee17 2a90 	vmov	r2, s15
 8001918:	496f      	ldr	r1, [pc, #444]	@ (8001ad8 <PrintTHD+0x300>)
 800191a:	486a      	ldr	r0, [pc, #424]	@ (8001ac4 <PrintTHD+0x2ec>)
 800191c:	f00d fedc 	bl	800f6d8 <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 15 ,HAL_MAX_DELAY);
 8001920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001924:	220f      	movs	r2, #15
 8001926:	4967      	ldr	r1, [pc, #412]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001928:	486c      	ldr	r0, [pc, #432]	@ (8001adc <PrintTHD+0x304>)
 800192a:	f00c fcff 	bl	800e32c <HAL_UART_Transmit>
	  sprintf(str_2 , "x3.val=%d\xff\xff\xff" ,(int) (rate[1] * 100));
 800192e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001932:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8001aa8 <PrintTHD+0x2d0>
 8001936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800193a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800193e:	ee17 2a90 	vmov	r2, s15
 8001942:	4967      	ldr	r1, [pc, #412]	@ (8001ae0 <PrintTHD+0x308>)
 8001944:	485f      	ldr	r0, [pc, #380]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001946:	f00d fec7 	bl	800f6d8 <sprintf>
	  	  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 21 ,HAL_MAX_DELAY);
 800194a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800194e:	2215      	movs	r2, #21
 8001950:	495c      	ldr	r1, [pc, #368]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001952:	4862      	ldr	r0, [pc, #392]	@ (8001adc <PrintTHD+0x304>)
 8001954:	f00c fcea 	bl	800e32c <HAL_UART_Transmit>
	  	sprintf(str_2 , "x4.val=%d\xff\xff\xff" ,(int) (rate[2] * 100));
 8001958:	ed97 7b04 	vldr	d7, [r7, #16]
 800195c:	ed9f 6b52 	vldr	d6, [pc, #328]	@ 8001aa8 <PrintTHD+0x2d0>
 8001960:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001964:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001968:	ee17 2a90 	vmov	r2, s15
 800196c:	495d      	ldr	r1, [pc, #372]	@ (8001ae4 <PrintTHD+0x30c>)
 800196e:	4855      	ldr	r0, [pc, #340]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001970:	f00d feb2 	bl	800f6d8 <sprintf>
	  		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 18,HAL_MAX_DELAY);
 8001974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001978:	2212      	movs	r2, #18
 800197a:	4952      	ldr	r1, [pc, #328]	@ (8001ac4 <PrintTHD+0x2ec>)
 800197c:	4857      	ldr	r0, [pc, #348]	@ (8001adc <PrintTHD+0x304>)
 800197e:	f00c fcd5 	bl	800e32c <HAL_UART_Transmit>
	  		sprintf(str_2 , "x5.val=%d\xff\xff\xff" ,(int) (rate[3] * 100));
 8001982:	ed97 7b06 	vldr	d7, [r7, #24]
 8001986:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8001aa8 <PrintTHD+0x2d0>
 800198a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800198e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001992:	ee17 2a90 	vmov	r2, s15
 8001996:	4954      	ldr	r1, [pc, #336]	@ (8001ae8 <PrintTHD+0x310>)
 8001998:	484a      	ldr	r0, [pc, #296]	@ (8001ac4 <PrintTHD+0x2ec>)
 800199a:	f00d fe9d 	bl	800f6d8 <sprintf>
	  			  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 21 ,HAL_MAX_DELAY);
 800199e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019a2:	2215      	movs	r2, #21
 80019a4:	4947      	ldr	r1, [pc, #284]	@ (8001ac4 <PrintTHD+0x2ec>)
 80019a6:	484d      	ldr	r0, [pc, #308]	@ (8001adc <PrintTHD+0x304>)
 80019a8:	f00c fcc0 	bl	800e32c <HAL_UART_Transmit>
	  			sprintf(str_2 , "x6.val=%d\xff\xff\xff" ,(int) (rate[4] * 100));
 80019ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80019b0:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 8001aa8 <PrintTHD+0x2d0>
 80019b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019bc:	ee17 2a90 	vmov	r2, s15
 80019c0:	494a      	ldr	r1, [pc, #296]	@ (8001aec <PrintTHD+0x314>)
 80019c2:	4840      	ldr	r0, [pc, #256]	@ (8001ac4 <PrintTHD+0x2ec>)
 80019c4:	f00d fe88 	bl	800f6d8 <sprintf>
	  				  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 21 ,HAL_MAX_DELAY);
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019cc:	2215      	movs	r2, #21
 80019ce:	493d      	ldr	r1, [pc, #244]	@ (8001ac4 <PrintTHD+0x2ec>)
 80019d0:	4842      	ldr	r0, [pc, #264]	@ (8001adc <PrintTHD+0x304>)
 80019d2:	f00c fcab 	bl	800e32c <HAL_UART_Transmit>

	  THD = sqrt(uo[5] + uo[2] + uo[3] + uo[4]) / (sqrt(uo[1])) * 100;
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <PrintTHD+0x2dc>)
 80019d8:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80019dc:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <PrintTHD+0x2dc>)
 80019de:	ed93 7b04 	vldr	d7, [r3, #16]
 80019e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019e6:	4b33      	ldr	r3, [pc, #204]	@ (8001ab4 <PrintTHD+0x2dc>)
 80019e8:	ed93 7b06 	vldr	d7, [r3, #24]
 80019ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019f0:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <PrintTHD+0x2dc>)
 80019f2:	ed93 7b08 	vldr	d7, [r3, #32]
 80019f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019fa:	eeb0 0b47 	vmov.f64	d0, d7
 80019fe:	f012 fa0f 	bl	8013e20 <sqrt>
 8001a02:	eeb0 8b40 	vmov.f64	d8, d0
 8001a06:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab4 <PrintTHD+0x2dc>)
 8001a08:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001a10:	f012 fa06 	bl	8013e20 <sqrt>
 8001a14:	eeb0 6b40 	vmov.f64	d6, d0
 8001a18:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001a1c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001aa8 <PrintTHD+0x2d0>
 8001a20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a24:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <PrintTHD+0x318>)
 8001a26:	ed83 7b00 	vstr	d7, [r3]
	  sprintf(str_2 , "x1.val=%d\xff\xff\xff" ,(int) (THD * 100));
 8001a2a:	4b31      	ldr	r3, [pc, #196]	@ (8001af0 <PrintTHD+0x318>)
 8001a2c:	ed93 7b00 	vldr	d7, [r3]
 8001a30:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8001aa8 <PrintTHD+0x2d0>
 8001a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a38:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a3c:	ee17 2a90 	vmov	r2, s15
 8001a40:	492c      	ldr	r1, [pc, #176]	@ (8001af4 <PrintTHD+0x31c>)
 8001a42:	4820      	ldr	r0, [pc, #128]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001a44:	f00d fe48 	bl	800f6d8 <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 21 ,HAL_MAX_DELAY);
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4c:	2215      	movs	r2, #21
 8001a4e:	491d      	ldr	r1, [pc, #116]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001a50:	4822      	ldr	r0, [pc, #136]	@ (8001adc <PrintTHD+0x304>)
 8001a52:	f00c fc6b 	bl	800e32c <HAL_UART_Transmit>
	  sprintf(str_2 , "THD=%.2lf" , THD);
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <PrintTHD+0x318>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	4926      	ldr	r1, [pc, #152]	@ (8001af8 <PrintTHD+0x320>)
 8001a5e:	4819      	ldr	r0, [pc, #100]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001a60:	f00d fe3a 	bl	800f6d8 <sprintf>
	  	  Oled_WriteAsciiString(str_2);
 8001a64:	4817      	ldr	r0, [pc, #92]	@ (8001ac4 <PrintTHD+0x2ec>)
 8001a66:	f000 ff6b 	bl	8002940 <Oled_WriteAsciiString>
	  	  Oled_WriteAsciiString("%%\n");
 8001a6a:	4814      	ldr	r0, [pc, #80]	@ (8001abc <PrintTHD+0x2e4>)
 8001a6c:	f000 ff68 	bl	8002940 <Oled_WriteAsciiString>
	  	HAL_Delay(500);
 8001a70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a74:	f001 ff56 	bl	8003924 <HAL_Delay>
	for(i=0;i<8192;i++)
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e004      	b.n	8001a8a <PrintTHD+0x2b2>
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <PrintTHD+0x2e0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a92:	dbf5      	blt.n	8001a80 <PrintTHD+0x2a8>
//	    	  HAL_UART_Transmit(&huart1,(uint8_t *)"add 2,1,x" , 11 ,HAL_MAX_DELAY);
//	    	  HAL_UART_Transmit(&huart1, (uint8_t *)str_2,11,HAL_MAX_DELAY);
//        HAL_UART_Transmit(&huart1, (uint8_t *)"\xff\xff\xff",15,HAL_MAX_DELAY);
   }

	}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	@ 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	ecbd 8b02 	vpop	{d8}
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	40590000 	.word	0x40590000
 8001ab0:	24000228 	.word	0x24000228
 8001ab4:	24014b90 	.word	0x24014b90
 8001ab8:	24014b80 	.word	0x24014b80
 8001abc:	08015498 	.word	0x08015498
 8001ac0:	0801549c 	.word	0x0801549c
 8001ac4:	24004b38 	.word	0x24004b38
 8001ac8:	080154ac 	.word	0x080154ac
 8001acc:	080154bc 	.word	0x080154bc
 8001ad0:	080154cc 	.word	0x080154cc
 8001ad4:	080154dc 	.word	0x080154dc
 8001ad8:	080154ec 	.word	0x080154ec
 8001adc:	24015168 	.word	0x24015168
 8001ae0:	080154fc 	.word	0x080154fc
 8001ae4:	0801550c 	.word	0x0801550c
 8001ae8:	0801551c 	.word	0x0801551c
 8001aec:	0801552c 	.word	0x0801552c
 8001af0:	24014bc0 	.word	0x24014bc0
 8001af4:	0801553c 	.word	0x0801553c
 8001af8:	0801554c 	.word	0x0801554c

08001afc <Para_init>:



void Para_init(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	for (i = 0 ; i < 6 ; i ++)
 8001b00:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <Para_init+0x80>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e015      	b.n	8001b34 <Para_init+0x38>
		  {
			  max[i] = 0;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <Para_init+0x80>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <Para_init+0x84>)
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	18d1      	adds	r1, r2, r3
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9c1 2300 	strd	r2, r3, [r1]
			  max_index[i] = 0;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <Para_init+0x80>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <Para_init+0x88>)
 8001b24:	2100      	movs	r1, #0
 8001b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0 ; i < 6 ; i ++)
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <Para_init+0x80>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <Para_init+0x80>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <Para_init+0x80>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	dde5      	ble.n	8001b08 <Para_init+0xc>

		  }
		  for ( i = 0 ; i < FO_LENGTH_HIGH ; i++)
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <Para_init+0x80>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e010      	b.n	8001b66 <Para_init+0x6a>
		  {
			  P[i] = 0;
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <Para_init+0x8c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <Para_init+0x80>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	18d1      	adds	r1, r2, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9c1 2300 	strd	r2, r3, [r1]
		  for ( i = 0 ; i < FO_LENGTH_HIGH ; i++)
 8001b5c:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <Para_init+0x80>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <Para_init+0x80>)
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <Para_init+0x80>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b6e:	dbe9      	blt.n	8001b44 <Para_init+0x48>
		  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	24014b80 	.word	0x24014b80
 8001b80:	24000228 	.word	0x24000228
 8001b84:	24004b1c 	.word	0x24004b1c
 8001b88:	24004b70 	.word	0x24004b70

08001b8c <adc_init>:

void adc_init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
	MX_ADC1_Init();
 8001b90:	f7ff fa8e 	bl	80010b0 <MX_ADC1_Init>
	HAL_Delay(300);
 8001b94:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b98:	f001 fec4 	bl	8003924 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001b9c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	481a      	ldr	r0, [pc, #104]	@ (8001c0c <adc_init+0x80>)
 8001ba4:	f003 fc10 	bl	80053c8 <HAL_ADCEx_Calibration_Start>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <adc_init+0x34>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb2:	222f      	movs	r2, #47	@ 0x2f
 8001bb4:	4916      	ldr	r1, [pc, #88]	@ (8001c10 <adc_init+0x84>)
 8001bb6:	4817      	ldr	r0, [pc, #92]	@ (8001c14 <adc_init+0x88>)
 8001bb8:	f00c fbb8 	bl	800e32c <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001bbc:	f000 fd2e 	bl	800261c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH_HIGH) != HAL_OK)
 8001bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc4:	4914      	ldr	r1, [pc, #80]	@ (8001c18 <adc_init+0x8c>)
 8001bc6:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <adc_init+0x80>)
 8001bc8:	f002 fc36 	bl	8004438 <HAL_ADC_Start_DMA>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d008      	beq.n	8001be4 <adc_init+0x58>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd6:	2225      	movs	r2, #37	@ 0x25
 8001bd8:	4910      	ldr	r1, [pc, #64]	@ (8001c1c <adc_init+0x90>)
 8001bda:	480e      	ldr	r0, [pc, #56]	@ (8001c14 <adc_init+0x88>)
 8001bdc:	f00c fba6 	bl	800e32c <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001be0:	f000 fd1c 	bl	800261c <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001be4:	480e      	ldr	r0, [pc, #56]	@ (8001c20 <adc_init+0x94>)
 8001be6:	f00b f871 	bl	800cccc <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001bea:	bf00      	nop
 8001bec:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <adc_init+0x98>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0fa      	beq.n	8001bec <adc_init+0x60>
	AdcConvEnd = 0;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <adc_init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8001bfc:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <adc_init+0x80>)
 8001bfe:	f002 fa9b 	bl	8004138 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001c02:	4807      	ldr	r0, [pc, #28]	@ (8001c20 <adc_init+0x94>)
 8001c04:	f00b f8d2 	bl	800cdac <HAL_TIM_Base_Stop>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2400495c 	.word	0x2400495c
 8001c10:	08015558 	.word	0x08015558
 8001c14:	24015168 	.word	0x24015168
 8001c18:	24000940 	.word	0x24000940
 8001c1c:	08015588 	.word	0x08015588
 8001c20:	2401511c 	.word	0x2401511c
 8001c24:	24004b18 	.word	0x24004b18

08001c28 <ADC1_Get>:

void ADC1_Get(int pa , double con)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	ed87 0b00 	vstr	d0, [r7]
	//	Fre_Get_TIM();
		HAL_Delay(300);
 8001c34:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c38:	f001 fe74 	bl	8003924 <HAL_Delay>

		adc_init();
 8001c3c:	f7ff ffa6 	bl	8001b8c <adc_init>

		  for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	82fb      	strh	r3, [r7, #22]
 8001c44:	e03a      	b.n	8001cbc <ADC1_Get+0x94>
		  	    {
		  	    	  voltage = ((double)adc1_data[temp]*3.3)/65535 *3 ;
 8001c46:	8afb      	ldrh	r3, [r7, #22]
 8001c48:	4a33      	ldr	r2, [pc, #204]	@ (8001d18 <ADC1_Get+0xf0>)
 8001c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c56:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8001d08 <ADC1_Get+0xe0>
 8001c5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c5e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8001d10 <ADC1_Get+0xe8>
 8001c62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c66:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001c6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <ADC1_Get+0xf4>)
 8001c70:	ed83 7b00 	vstr	d7, [r3]

		  	    	  v[temp] = voltage;
 8001c74:	8af9      	ldrh	r1, [r7, #22]
 8001c76:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <ADC1_Get+0xf4>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	4828      	ldr	r0, [pc, #160]	@ (8001d20 <ADC1_Get+0xf8>)
 8001c7e:	00c9      	lsls	r1, r1, #3
 8001c80:	4401      	add	r1, r0
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]
		  	    	  sprintf(str_2 , "%.5f" , v[temp]);
 8001c86:	8afb      	ldrh	r3, [r7, #22]
 8001c88:	4a25      	ldr	r2, [pc, #148]	@ (8001d20 <ADC1_Get+0xf8>)
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	4924      	ldr	r1, [pc, #144]	@ (8001d24 <ADC1_Get+0xfc>)
 8001c94:	4824      	ldr	r0, [pc, #144]	@ (8001d28 <ADC1_Get+0x100>)
 8001c96:	f00d fd1f 	bl	800f6d8 <sprintf>
		  	    	  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	4921      	ldr	r1, [pc, #132]	@ (8001d28 <ADC1_Get+0x100>)
 8001ca2:	4822      	ldr	r0, [pc, #136]	@ (8001d2c <ADC1_Get+0x104>)
 8001ca4:	f00c fb42 	bl	800e32c <HAL_UART_Transmit>
		  	    	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cac:	2201      	movs	r2, #1
 8001cae:	4920      	ldr	r1, [pc, #128]	@ (8001d30 <ADC1_Get+0x108>)
 8001cb0:	481e      	ldr	r0, [pc, #120]	@ (8001d2c <ADC1_Get+0x104>)
 8001cb2:	f00c fb3b 	bl	800e32c <HAL_UART_Transmit>
		  for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++)
 8001cb6:	8afb      	ldrh	r3, [r7, #22]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	82fb      	strh	r3, [r7, #22]
 8001cbc:	8afb      	ldrh	r3, [r7, #22]
 8001cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cc2:	d3c0      	bcc.n	8001c46 <ADC1_Get+0x1e>
		  	    }

		  MX_TIM15_Init();
 8001cc4:	f001 faca 	bl	800325c <MX_TIM15_Init>
		  HAL_Delay(100);
 8001cc8:	2064      	movs	r0, #100	@ 0x64
 8001cca:	f001 fe2b 	bl	8003924 <HAL_Delay>
		  //X = FFT(FO_LENGTH_HIGH , v) ;
		  s = FFT_ADC1(FO_LENGTH_HIGH , v , pa) ;
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4913      	ldr	r1, [pc, #76]	@ (8001d20 <ADC1_Get+0xf8>)
 8001cd2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cd6:	f000 fe4b 	bl	8002970 <FFT_ADC1>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4a15      	ldr	r2, [pc, #84]	@ (8001d34 <ADC1_Get+0x10c>)
 8001cde:	6013      	str	r3, [r2, #0]
		  max_index[6] = (*s) * con;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <ADC1_Get+0x10c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	ed93 6b00 	vldr	d6, [r3]
 8001ce8:	ed97 7b00 	vldr	d7, [r7]
 8001cec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001cf0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001cf4:	ee17 2a90 	vmov	r2, s15
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <ADC1_Get+0x110>)
 8001cfa:	619a      	str	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	f3af 8000 	nop.w
 8001d08:	66666666 	.word	0x66666666
 8001d0c:	400a6666 	.word	0x400a6666
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40efffe0 	.word	0x40efffe0
 8001d18:	24000940 	.word	0x24000940
 8001d1c:	24004b78 	.word	0x24004b78
 8001d20:	24004b80 	.word	0x24004b80
 8001d24:	080155b0 	.word	0x080155b0
 8001d28:	24004b38 	.word	0x24004b38
 8001d2c:	24015168 	.word	0x24015168
 8001d30:	080155b8 	.word	0x080155b8
 8001d34:	24014bc8 	.word	0x24014bc8
 8001d38:	24004b1c 	.word	0x24004b1c

08001d3c <HandleFFT>:

void HandleFFT(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
//				  sprintf(str_2 , "%.2f" , *s);
//				  HAL_UART_Transmit(&huart1 ,(uint8_t *)"Frequency:", 10 , HAL_MAX_DELAY);
//			  	  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 5   ,HAL_MAX_DELAY);
//			  	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"kHz\n", 4 , HAL_MAX_DELAY);
			  	  for (i = 1 ; i <= 5; i++)
 8001d42:	4b36      	ldr	r3, [pc, #216]	@ (8001e1c <HandleFFT+0xe0>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e05a      	b.n	8001e00 <HandleFFT+0xc4>
			  	  {
			  		  if (flag == 1)
 8001d4a:	4b35      	ldr	r3, [pc, #212]	@ (8001e20 <HandleFFT+0xe4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d123      	bne.n	8001d9a <HandleFFT+0x5e>
			  		  {
			  			X= Blackman(FO_LENGTH_HIGH ,(max_index[6]-max_index[6]/2)*i,(max_index[6]+max_index[6]/2)*i, v);
 8001d52:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <HandleFFT+0xe8>)
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	4b33      	ldr	r3, [pc, #204]	@ (8001e24 <HandleFFT+0xe8>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da00      	bge.n	8001d60 <HandleFFT+0x24>
 8001d5e:	3301      	adds	r3, #1
 8001d60:	105b      	asrs	r3, r3, #1
 8001d62:	425b      	negs	r3, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <HandleFFT+0xe0>)
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	fb02 f103 	mul.w	r1, r2, r3
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <HandleFFT+0xe8>)
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <HandleFFT+0xe8>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da00      	bge.n	8001d7c <HandleFFT+0x40>
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	105b      	asrs	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a26      	ldr	r2, [pc, #152]	@ (8001e1c <HandleFFT+0xe0>)
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	fb03 f202 	mul.w	r2, r3, r2
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HandleFFT+0xec>)
 8001d8a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d8e:	f7ff f8c7 	bl	8000f20 <Blackman>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a25      	ldr	r2, [pc, #148]	@ (8001e2c <HandleFFT+0xf0>)
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e002      	b.n	8001da0 <HandleFFT+0x64>
			  		  }
			  		  else
			  		  {
			  			  X = v;
 8001d9a:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <HandleFFT+0xf0>)
 8001d9c:	4a22      	ldr	r2, [pc, #136]	@ (8001e28 <HandleFFT+0xec>)
 8001d9e:	601a      	str	r2, [r3, #0]
			  		  }

			  		  p = FFT_Mag(FO_LENGTH_HIGH , X);
 8001da0:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <HandleFFT+0xf0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001daa:	f7ff f839 	bl	8000e20 <FFT_Mag>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e30 <HandleFFT+0xf4>)
 8001db2:	6013      	str	r3, [r2, #0]
			  		  for (int j = 0 ; j  <FO_LENGTH_HIGH ; j++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	e019      	b.n	8001dee <HandleFFT+0xb2>
			  		  {
			  			  P[j]+=p[j];
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <HandleFFT+0xf8>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	ed93 6b00 	vldr	d6, [r3]
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HandleFFT+0xf4>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	ed93 7b00 	vldr	d7, [r3]
 8001dd6:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <HandleFFT+0xf8>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001de4:	ed83 7b00 	vstr	d7, [r3]
			  		  for (int j = 0 ; j  <FO_LENGTH_HIGH ; j++)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3301      	adds	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001df4:	dbe1      	blt.n	8001dba <HandleFFT+0x7e>
			  	  for (i = 1 ; i <= 5; i++)
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <HandleFFT+0xe0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HandleFFT+0xe0>)
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HandleFFT+0xe0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b05      	cmp	r3, #5
 8001e06:	dda0      	ble.n	8001d4a <HandleFFT+0xe>
			  		  }
			  	  }
			  	  //P = FFT_Bartlett(FO_LENGTH_HIGH , 16 ,  x);

			  	  PrintMag();
 8001e08:	f7ff fc4a 	bl	80016a0 <PrintMag>
			  	  PrintTHD();
 8001e0c:	f7ff fce4 	bl	80017d8 <PrintTHD>
			  	  Para_init();
 8001e10:	f7ff fe74 	bl	8001afc <Para_init>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	24014b80 	.word	0x24014b80
 8001e20:	24014b88 	.word	0x24014b88
 8001e24:	24004b1c 	.word	0x24004b1c
 8001e28:	24004b80 	.word	0x24004b80
 8001e2c:	24004b6c 	.word	0x24004b6c
 8001e30:	24004b74 	.word	0x24004b74
 8001e34:	24004b70 	.word	0x24004b70

08001e38 <ADC_FFT>:

void ADC_FFT(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
      //Oled_Init();
      //Oled_Screen_Clear();
	  HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e40:	220b      	movs	r2, #11
 8001e42:	4959      	ldr	r1, [pc, #356]	@ (8001fa8 <ADC_FFT+0x170>)
 8001e44:	4859      	ldr	r0, [pc, #356]	@ (8001fac <ADC_FFT+0x174>)
 8001e46:	f00c fa71 	bl	800e32c <HAL_UART_Transmit>
	  Para_init();
 8001e4a:	f7ff fe57 	bl	8001afc <Para_init>
	  para = 1;
 8001e4e:	4b58      	ldr	r3, [pc, #352]	@ (8001fb0 <ADC_FFT+0x178>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Stop(&htim15);
 8001e54:	4857      	ldr	r0, [pc, #348]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001e56:	f00a ffa9 	bl	800cdac <HAL_TIM_Base_Stop>
	  MX_MyTIM15_Init(para);
 8001e5a:	4b55      	ldr	r3, [pc, #340]	@ (8001fb0 <ADC_FFT+0x178>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 fb48 	bl	80034f4 <MX_MyTIM15_Init>
	  HAL_TIM_Base_Start(&htim15);
 8001e64:	4853      	ldr	r0, [pc, #332]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001e66:	f00a ff31 	bl	800cccc <HAL_TIM_Base_Start>
	  ADC1_Get(1,210);
 8001e6a:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8001f80 <ADC_FFT+0x148>
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7ff feda 	bl	8001c28 <ADC1_Get>
	  Para_init();
 8001e74:	f7ff fe42 	bl	8001afc <Para_init>
	  if (max_index[6] < 750)
 8001e78:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb8 <ADC_FFT+0x180>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001e80:	4293      	cmp	r3, r2
 8001e82:	dc02      	bgt.n	8001e8a <ADC_FFT+0x52>
	  {
		  HandleFFT();
 8001e84:	f7ff ff5a 	bl	8001d3c <HandleFFT>
 8001e88:	e05b      	b.n	8001f42 <ADC_FFT+0x10a>
	  }
	  else
	  {
		  HAL_Delay(100);
 8001e8a:	2064      	movs	r0, #100	@ 0x64
 8001e8c:	f001 fd4a 	bl	8003924 <HAL_Delay>
		  Para_init();
 8001e90:	f7ff fe34 	bl	8001afc <Para_init>
		  para = 2;
 8001e94:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <ADC_FFT+0x178>)
 8001e96:	2202      	movs	r2, #2
 8001e98:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim15);
 8001e9a:	4846      	ldr	r0, [pc, #280]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001e9c:	f00a ff86 	bl	800cdac <HAL_TIM_Base_Stop>
		  MX_MyTIM15_Init(para);
 8001ea0:	4b43      	ldr	r3, [pc, #268]	@ (8001fb0 <ADC_FFT+0x178>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fb25 	bl	80034f4 <MX_MyTIM15_Init>
		  HAL_TIM_Base_Start(&htim15);
 8001eaa:	4842      	ldr	r0, [pc, #264]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001eac:	f00a ff0e 	bl	800cccc <HAL_TIM_Base_Start>
		  ADC1_Get(2 , 56.75 );
 8001eb0:	ed9f 0b35 	vldr	d0, [pc, #212]	@ 8001f88 <ADC_FFT+0x150>
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f7ff feb7 	bl	8001c28 <ADC1_Get>
		  if (max_index[6] < 750  )
 8001eba:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb8 <ADC_FFT+0x180>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	dc02      	bgt.n	8001ecc <ADC_FFT+0x94>
		  {
			  HandleFFT();
 8001ec6:	f7ff ff39 	bl	8001d3c <HandleFFT>
 8001eca:	e03a      	b.n	8001f42 <ADC_FFT+0x10a>
		  }
		  else
		  {
			  HAL_Delay(100);
 8001ecc:	2064      	movs	r0, #100	@ 0x64
 8001ece:	f001 fd29 	bl	8003924 <HAL_Delay>
			  Para_init();
 8001ed2:	f7ff fe13 	bl	8001afc <Para_init>
			  para = 3;
 8001ed6:	4b36      	ldr	r3, [pc, #216]	@ (8001fb0 <ADC_FFT+0x178>)
 8001ed8:	2203      	movs	r2, #3
 8001eda:	601a      	str	r2, [r3, #0]
			  HAL_TIM_Base_Stop(&htim15);
 8001edc:	4835      	ldr	r0, [pc, #212]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001ede:	f00a ff65 	bl	800cdac <HAL_TIM_Base_Stop>
			  MX_MyTIM15_Init(para);
 8001ee2:	4b33      	ldr	r3, [pc, #204]	@ (8001fb0 <ADC_FFT+0x178>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fb04 	bl	80034f4 <MX_MyTIM15_Init>
			  HAL_TIM_Base_Start(&htim15);
 8001eec:	4831      	ldr	r0, [pc, #196]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001eee:	f00a feed 	bl	800cccc <HAL_TIM_Base_Start>
			  ADC1_Get(3 , 14.6);
 8001ef2:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 8001f90 <ADC_FFT+0x158>
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f7ff fe96 	bl	8001c28 <ADC1_Get>
			  if (max_index[6] < 750)
 8001efc:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <ADC_FFT+0x180>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001f04:	4293      	cmp	r3, r2
 8001f06:	dc02      	bgt.n	8001f0e <ADC_FFT+0xd6>
			  {
				  HandleFFT();
 8001f08:	f7ff ff18 	bl	8001d3c <HandleFFT>
 8001f0c:	e019      	b.n	8001f42 <ADC_FFT+0x10a>
			  }
			  else
			  {
				  HAL_Delay(100);
 8001f0e:	2064      	movs	r0, #100	@ 0x64
 8001f10:	f001 fd08 	bl	8003924 <HAL_Delay>
				  Para_init();
 8001f14:	f7ff fdf2 	bl	8001afc <Para_init>
				  para = 4;
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <ADC_FFT+0x178>)
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	601a      	str	r2, [r3, #0]
				  HAL_TIM_Base_Stop(&htim15);
 8001f1e:	4825      	ldr	r0, [pc, #148]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001f20:	f00a ff44 	bl	800cdac <HAL_TIM_Base_Stop>
				  MX_MyTIM15_Init(para);
 8001f24:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <ADC_FFT+0x178>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 fae3 	bl	80034f4 <MX_MyTIM15_Init>
				  HAL_TIM_Base_Start(&htim15);
 8001f2e:	4821      	ldr	r0, [pc, #132]	@ (8001fb4 <ADC_FFT+0x17c>)
 8001f30:	f00a fecc 	bl	800cccc <HAL_TIM_Base_Start>
				  ADC1_Get(4 , 7.085);
 8001f34:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001f98 <ADC_FFT+0x160>
 8001f38:	2004      	movs	r0, #4
 8001f3a:	f7ff fe75 	bl	8001c28 <ADC1_Get>
				  HandleFFT();
 8001f3e:	f7ff fefd 	bl	8001d3c <HandleFFT>
			  }
		  }
	  }
	  if (THD < 10 || THD > 55)
 8001f42:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <ADC_FFT+0x184>)
 8001f44:	ed93 7b00 	vldr	d7, [r3]
 8001f48:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8001f4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	d409      	bmi.n	8001f6a <ADC_FFT+0x132>
 8001f56:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <ADC_FFT+0x184>)
 8001f58:	ed93 7b00 	vldr	d7, [r3]
 8001f5c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8001fa0 <ADC_FFT+0x168>
 8001f60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	dd03      	ble.n	8001f72 <ADC_FFT+0x13a>
	  {
		  flag = 0;
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <ADC_FFT+0x188>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e003      	b.n	8001f7a <ADC_FFT+0x142>
	  }
	  else
	  {
		  flag = 1;
 8001f72:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <ADC_FFT+0x188>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
	  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	00000000 	.word	0x00000000
 8001f84:	406a4000 	.word	0x406a4000
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	404c6000 	.word	0x404c6000
 8001f90:	33333333 	.word	0x33333333
 8001f94:	402d3333 	.word	0x402d3333
 8001f98:	3d70a3d7 	.word	0x3d70a3d7
 8001f9c:	401c570a 	.word	0x401c570a
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	404b8000 	.word	0x404b8000
 8001fa8:	080155bc 	.word	0x080155bc
 8001fac:	24015168 	.word	0x24015168
 8001fb0:	24014b84 	.word	0x24014b84
 8001fb4:	2401511c 	.word	0x2401511c
 8001fb8:	24004b1c 	.word	0x24004b1c
 8001fbc:	24014bc0 	.word	0x24014bc0
 8001fc0:	24014b88 	.word	0x24014b88

08001fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001fca:	f000 fac9 	bl	8002560 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001fce:	4b46      	ldr	r3, [pc, #280]	@ (80020e8 <main+0x124>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11b      	bne.n	8002012 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fda:	f3bf 8f4f 	dsb	sy
}
 8001fde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fe0:	f3bf 8f6f 	isb	sy
}
 8001fe4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001fe6:	4b40      	ldr	r3, [pc, #256]	@ (80020e8 <main+0x124>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001fee:	f3bf 8f4f 	dsb	sy
}
 8001ff2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ff4:	f3bf 8f6f 	isb	sy
}
 8001ff8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <main+0x124>)
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	4a3a      	ldr	r2, [pc, #232]	@ (80020e8 <main+0x124>)
 8002000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002004:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002006:	f3bf 8f4f 	dsb	sy
}
 800200a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800200c:	f3bf 8f6f 	isb	sy
}
 8002010:	e000      	b.n	8002014 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002012:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002014:	4b34      	ldr	r3, [pc, #208]	@ (80020e8 <main+0x124>)
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d138      	bne.n	8002092 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002020:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <main+0x124>)
 8002022:	2200      	movs	r2, #0
 8002024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002028:	f3bf 8f4f 	dsb	sy
}
 800202c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800202e:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <main+0x124>)
 8002030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002034:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0b5b      	lsrs	r3, r3, #13
 800203a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800203e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	08db      	lsrs	r3, r3, #3
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002052:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002058:	4923      	ldr	r1, [pc, #140]	@ (80020e8 <main+0x124>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ef      	bne.n	800204a <main+0x86>
    } while(sets-- != 0U);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1e5a      	subs	r2, r3, #1
 800206e:	60ba      	str	r2, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002074:	f3bf 8f4f 	dsb	sy
}
 8002078:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <main+0x124>)
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4a1a      	ldr	r2, [pc, #104]	@ (80020e8 <main+0x124>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002084:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002086:	f3bf 8f4f 	dsb	sy
}
 800208a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800208c:	f3bf 8f6f 	isb	sy
}
 8002090:	e000      	b.n	8002094 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002092:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002094:	f001 fbb4 	bl	8003800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002098:	f000 f82c 	bl	80020f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800209c:	f7ff fa20 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80020a0:	f7ff f9f6 	bl	8001490 <MX_DMA_Init>
  MX_TIM7_Init();
 80020a4:	f001 f8a4 	bl	80031f0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80020a8:	f001 faca 	bl	8003640 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80020ac:	f7ff fa50 	bl	8001550 <MX_I2C1_Init>
  MX_TIM15_Init();
 80020b0:	f001 f8d4 	bl	800325c <MX_TIM15_Init>
  MX_TIM2_Init();
 80020b4:	f000 ff8c 	bl	8002fd0 <MX_TIM2_Init>
  MX_DAC1_Init();
 80020b8:	f7ff f93e 	bl	8001338 <MX_DAC1_Init>
  MX_TIM5_Init();
 80020bc:	f001 f826 	bl	800310c <MX_TIM5_Init>
  MX_TIM4_Init();
 80020c0:	f000 ffd4 	bl	800306c <MX_TIM4_Init>
  MX_ADC1_Init();
 80020c4:	f7fe fff4 	bl	80010b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Oled_Init();
 80020c8:	f000 fae4 	bl	8002694 <Oled_Init>
  __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <main+0x128>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0201 	mvn.w	r2, #1
 80020d4:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <main+0x12c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f06f 0201 	mvn.w	r2, #1
 80020de:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_FFT();
 80020e0:	f7ff feaa 	bl	8001e38 <ADC_FFT>
 80020e4:	e7fc      	b.n	80020e0 <main+0x11c>
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00
 80020ec:	24015038 	.word	0x24015038
 80020f0:	24015084 	.word	0x24015084

080020f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b09e      	sub	sp, #120	@ 0x78
 80020f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020fe:	224c      	movs	r2, #76	@ 0x4c
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f00d fb4b 	bl	800f79e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	2220      	movs	r2, #32
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f00d fb44 	bl	800f79e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002116:	2002      	movs	r0, #2
 8002118:	f007 f860 	bl	80091dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <SystemClock_Config+0x160>)
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <SystemClock_Config+0x160>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800212c:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <SystemClock_Config+0x160>)
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b48      	ldr	r3, [pc, #288]	@ (8002258 <SystemClock_Config+0x164>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	4a47      	ldr	r2, [pc, #284]	@ (8002258 <SystemClock_Config+0x164>)
 800213c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002140:	6193      	str	r3, [r2, #24]
 8002142:	4b45      	ldr	r3, [pc, #276]	@ (8002258 <SystemClock_Config+0x164>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800214e:	bf00      	nop
 8002150:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <SystemClock_Config+0x164>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800215c:	d1f8      	bne.n	8002150 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <SystemClock_Config+0x168>)
 8002160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002164:	4a3d      	ldr	r2, [pc, #244]	@ (800225c <SystemClock_Config+0x168>)
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800216e:	4b3b      	ldr	r3, [pc, #236]	@ (800225c <SystemClock_Config+0x168>)
 8002170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800217c:	2300      	movs	r3, #0
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4b35      	ldr	r3, [pc, #212]	@ (8002258 <SystemClock_Config+0x164>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a34      	ldr	r2, [pc, #208]	@ (8002258 <SystemClock_Config+0x164>)
 8002186:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b32      	ldr	r3, [pc, #200]	@ (8002258 <SystemClock_Config+0x164>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b2f      	ldr	r3, [pc, #188]	@ (8002254 <SystemClock_Config+0x160>)
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	4a2e      	ldr	r2, [pc, #184]	@ (8002254 <SystemClock_Config+0x160>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80021a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002254 <SystemClock_Config+0x160>)
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021ae:	bf00      	nop
 80021b0:	4b29      	ldr	r3, [pc, #164]	@ (8002258 <SystemClock_Config+0x164>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021bc:	d1f8      	bne.n	80021b0 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80021be:	4b27      	ldr	r3, [pc, #156]	@ (800225c <SystemClock_Config+0x168>)
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	4a25      	ldr	r2, [pc, #148]	@ (800225c <SystemClock_Config+0x168>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d8:	2302      	movs	r3, #2
 80021da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021dc:	2302      	movs	r3, #2
 80021de:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80021e0:	2305      	movs	r3, #5
 80021e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80021e4:	23c0      	movs	r3, #192	@ 0xc0
 80021e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021f0:	2302      	movs	r3, #2
 80021f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80021f4:	2308      	movs	r3, #8
 80021f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002200:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002204:	4618      	mov	r0, r3
 8002206:	f007 f823 	bl	8009250 <HAL_RCC_OscConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002210:	f000 fa04 	bl	800261c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002214:	233f      	movs	r3, #63	@ 0x3f
 8002216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002218:	2303      	movs	r3, #3
 800221a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002220:	2308      	movs	r3, #8
 8002222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002224:	2340      	movs	r3, #64	@ 0x40
 8002226:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002228:	2340      	movs	r3, #64	@ 0x40
 800222a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800222c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002232:	2340      	movs	r3, #64	@ 0x40
 8002234:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	2104      	movs	r1, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f007 fc63 	bl	8009b08 <HAL_RCC_ClockConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002248:	f000 f9e8 	bl	800261c <Error_Handler>
  }
}
 800224c:	bf00      	nop
 800224e:	3778      	adds	r7, #120	@ 0x78
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58000400 	.word	0x58000400
 8002258:	58024800 	.word	0x58024800
 800225c:	58024400 	.word	0x58024400

08002260 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8002268:	4b04      	ldr	r3, [pc, #16]	@ (800227c <HAL_ADC_ConvCpltCallback+0x1c>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	24004b18 	.word	0x24004b18

08002280 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 //printf("捕获回调\n");
	if(!GATE_OPEN)
 8002288:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <HAL_TIM_IC_CaptureCallback+0x100>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10e      	bne.n	80022ae <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		//启动闸门 TIM5 �??始计数标准信�??
		__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8002290:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <HAL_TIM_IC_CaptureCallback+0x104>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0201 	mvn.w	r2, #1
 8002298:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim4);
 800229a:	483a      	ldr	r0, [pc, #232]	@ (8002384 <HAL_TIM_IC_CaptureCallback+0x104>)
 800229c:	f00a fdae 	bl	800cdfc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start(&htim2);
 80022a0:	4839      	ldr	r0, [pc, #228]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x108>)
 80022a2:	f00a fd13 	bl	800cccc <HAL_TIM_Base_Start>
		GATE_OPEN=1;
 80022a6:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <HAL_TIM_IC_CaptureCallback+0x100>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	801a      	strh	r2, [r3, #0]
 80022ac:	e016      	b.n	80022dc <HAL_TIM_IC_CaptureCallback+0x5c>
	}
	else{
		//测频中，捕捉到一次信�?? 输入计数值加1
		Nx++;
 80022ae:	4b37      	ldr	r3, [pc, #220]	@ (800238c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	4a35      	ldr	r2, [pc, #212]	@ (800238c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80022b6:	6013      	str	r3, [r2, #0]
		if(Nx>10000){
 80022b8:	4b34      	ldr	r3, [pc, #208]	@ (800238c <HAL_TIM_IC_CaptureCallback+0x10c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d90b      	bls.n	80022dc <HAL_TIM_IC_CaptureCallback+0x5c>
			HAL_TIM_Base_Stop(&htim2);
 80022c4:	4830      	ldr	r0, [pc, #192]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x108>)
 80022c6:	f00a fd71 	bl	800cdac <HAL_TIM_Base_Stop>
			HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 80022ca:	2100      	movs	r1, #0
 80022cc:	4830      	ldr	r0, [pc, #192]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x110>)
 80022ce:	f00a ffed 	bl	800d2ac <HAL_TIM_IC_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim4);
 80022d2:	482c      	ldr	r0, [pc, #176]	@ (8002384 <HAL_TIM_IC_CaptureCallback+0x104>)
 80022d4:	f00a fe0a 	bl	800ceec <HAL_TIM_Base_Stop_IT>
            Turn2HIGH_FREQUENCY_MODE();
 80022d8:	f000 f904 	bl	80024e4 <Turn2HIGH_FREQUENCY_MODE>
		}
	}

	if(GATE_OPEN&&GATE_READY2CLOSE)
 80022dc:	4b28      	ldr	r3, [pc, #160]	@ (8002380 <HAL_TIM_IC_CaptureCallback+0x100>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d03e      	beq.n	8002362 <HAL_TIM_IC_CaptureCallback+0xe2>
 80022e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002394 <HAL_TIM_IC_CaptureCallback+0x114>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03a      	beq.n	8002362 <HAL_TIM_IC_CaptureCallback+0xe2>
	{
		//关闭闸门 停止捕捉
		HAL_TIM_Base_Stop(&htim2);
 80022ec:	4826      	ldr	r0, [pc, #152]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x108>)
 80022ee:	f00a fd5d 	bl	800cdac <HAL_TIM_Base_Stop>
		HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 80022f2:	2100      	movs	r1, #0
 80022f4:	4826      	ldr	r0, [pc, #152]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x110>)
 80022f6:	f00a ffd9 	bl	800d2ac <HAL_TIM_IC_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 80022fa:	4822      	ldr	r0, [pc, #136]	@ (8002384 <HAL_TIM_IC_CaptureCallback+0x104>)
 80022fc:	f00a fdf6 	bl	800ceec <HAL_TIM_Base_Stop_IT>
		//锁存Nx Nb数据 计算频率
		Nb=__HAL_TIM_GetCounter(&htim2);
 8002300:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	4a24      	ldr	r2, [pc, #144]	@ (8002398 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002308:	6013      	str	r3, [r2, #0]
		fre=((double)Nx)/((double)Nb)*240000000.000000;
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_TIM_IC_CaptureCallback+0x10c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002316:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002322:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002326:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8002370 <HAL_TIM_IC_CaptureCallback+0xf0>
 800232a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002330:	ed83 7b00 	vstr	d7, [r3]
		//判断
		if(fre<10000.0)
 8002334:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002336:	ed93 7b00 	vldr	d7, [r3]
 800233a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8002378 <HAL_TIM_IC_CaptureCallback+0xf8>
 800233e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	d50a      	bpl.n	800235e <HAL_TIM_IC_CaptureCallback+0xde>
		{
			capture_Cnt++;
 8002348:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002352:	701a      	strb	r2, [r3, #0]
			//准备下一次测
			__HAL_TIM_SetCounter(&htim2,0);  //计数不会因为定时器暂停�?�清
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	@ 0x24
		else
		{
            Turn2HIGH_FREQUENCY_MODE();
		}
	}
}
 800235c:	e001      	b.n	8002362 <HAL_TIM_IC_CaptureCallback+0xe2>
            Turn2HIGH_FREQUENCY_MODE();
 800235e:	f000 f8c1 	bl	80024e4 <Turn2HIGH_FREQUENCY_MODE>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	00000000 	.word	0x00000000
 8002374:	41ac9c38 	.word	0x41ac9c38
 8002378:	00000000 	.word	0x00000000
 800237c:	40c38800 	.word	0x40c38800
 8002380:	24014bcc 	.word	0x24014bcc
 8002384:	24015038 	.word	0x24015038
 8002388:	24014fec 	.word	0x24014fec
 800238c:	24014bd0 	.word	0x24014bd0
 8002390:	24015084 	.word	0x24015084
 8002394:	24014bce 	.word	0x24014bce
 8002398:	24014bd4 	.word	0x24014bd4
 800239c:	24014bd8 	.word	0x24014bd8
 80023a0:	24014be0 	.word	0x24014be0
 80023a4:	00000000 	.word	0x00000000

080023a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	//闸门溢出 规定测量时间
	if(TIM4 == htim->Instance&&Fre_State==LOW_FREQUENCY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a32      	ldr	r2, [pc, #200]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x22>
 80023ba:	4b32      	ldr	r3, [pc, #200]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b9f      	cmp	r3, #159	@ 0x9f
 80023c0:	d103      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x22>
    {
			GATE_READY2CLOSE=1;
 80023c2:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	801a      	strh	r2, [r3, #0]
			else
			{
				Turn2LOW_FREQUENCY_MODE();
			}
    }
}
 80023c8:	e04d      	b.n	8002466 <HAL_TIM_PeriodElapsedCallback+0xbe>
	else if(TIM4 == htim->Instance&&Fre_State==HIGH_FREQUENCY)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d148      	bne.n	8002466 <HAL_TIM_PeriodElapsedCallback+0xbe>
 80023d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2ba1      	cmp	r3, #161	@ 0xa1
 80023da:	d144      	bne.n	8002466 <HAL_TIM_PeriodElapsedCallback+0xbe>
			HAL_TIM_Base_Stop_IT(&htim4);
 80023dc:	482b      	ldr	r0, [pc, #172]	@ (800248c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80023de:	f00a fd85 	bl	800ceec <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim5);
 80023e2:	482b      	ldr	r0, [pc, #172]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80023e4:	f00a fd82 	bl	800ceec <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop(&htim2);
 80023e8:	482a      	ldr	r0, [pc, #168]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80023ea:	f00a fcdf 	bl	800cdac <HAL_TIM_Base_Stop>
			Nx+=TIM5->CNT;
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80023f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023f2:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a28      	ldr	r2, [pc, #160]	@ (800249c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80023fa:	6013      	str	r3, [r2, #0]
			Nb=TIM2->CNT;
 80023fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	4a27      	ldr	r2, [pc, #156]	@ (80024a0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002404:	6013      	str	r3, [r2, #0]
	    	fre=((double)Nx)/((double)Nb)*240000000.000000;
 8002406:	4b25      	ldr	r3, [pc, #148]	@ (800249c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800241e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002422:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002470 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8002426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800242a:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800242c:	ed83 7b00 	vstr	d7, [r3]
			if(fre>=10000.0)
 8002430:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002432:	ed93 7b00 	vldr	d7, [r3]
 8002436:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8002478 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800243a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	db0e      	blt.n	8002462 <HAL_TIM_PeriodElapsedCallback+0xba>
			  capture_Cnt++;
 8002444:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800244e:	701a      	strb	r2, [r3, #0]
	  	      __HAL_TIM_SetCounter(&htim2,0);
 8002450:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24
			  __HAL_TIM_SetCounter(&htim5,0);
 8002458:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002460:	e001      	b.n	8002466 <HAL_TIM_PeriodElapsedCallback+0xbe>
				Turn2LOW_FREQUENCY_MODE();
 8002462:	f000 f863 	bl	800252c <Turn2LOW_FREQUENCY_MODE>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	00000000 	.word	0x00000000
 8002474:	41ac9c38 	.word	0x41ac9c38
 8002478:	00000000 	.word	0x00000000
 800247c:	40c38800 	.word	0x40c38800
 8002480:	40000800 	.word	0x40000800
 8002484:	24000260 	.word	0x24000260
 8002488:	24014bce 	.word	0x24014bce
 800248c:	24015038 	.word	0x24015038
 8002490:	24015084 	.word	0x24015084
 8002494:	24014fec 	.word	0x24014fec
 8002498:	40000c00 	.word	0x40000c00
 800249c:	24014bd0 	.word	0x24014bd0
 80024a0:	24014bd4 	.word	0x24014bd4
 80024a4:	24014bd8 	.word	0x24014bd8
 80024a8:	24014be0 	.word	0x24014be0

080024ac <Parameter_Init>:

void Parameter_Init(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

	GATE_OPEN=0;
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <Parameter_Init+0x28>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	801a      	strh	r2, [r3, #0]
	GATE_READY2CLOSE=0;
 80024b6:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <Parameter_Init+0x2c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	801a      	strh	r2, [r3, #0]
	Nx=0;
 80024bc:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <Parameter_Init+0x30>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
	Nb=0;
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <Parameter_Init+0x34>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	24014bcc 	.word	0x24014bcc
 80024d8:	24014bce 	.word	0x24014bce
 80024dc:	24014bd0 	.word	0x24014bd0
 80024e0:	24014bd4 	.word	0x24014bd4

080024e4 <Turn2HIGH_FREQUENCY_MODE>:

void Turn2HIGH_FREQUENCY_MODE(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
   // printf("高频测量\n");
		    Fre_State=HIGH_FREQUENCY;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <Turn2HIGH_FREQUENCY_MODE+0x38>)
 80024ea:	22a1      	movs	r2, #161	@ 0xa1
 80024ec:	701a      	strb	r2, [r3, #0]
			MX_TIM5_Init_ETR();
 80024ee:	f000 ffb9 	bl	8003464 <MX_TIM5_Init_ETR>

			Parameter_Init();
 80024f2:	f7ff ffdb 	bl	80024ac <Parameter_Init>
	  	   __HAL_TIM_SetCounter(&htim2,0);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <Turn2HIGH_FREQUENCY_MODE+0x3c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SetCounter(&htim5,0);
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <Turn2HIGH_FREQUENCY_MODE+0x40>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24

			HAL_TIM_Base_Start_IT(&htim4);
 8002506:	4808      	ldr	r0, [pc, #32]	@ (8002528 <Turn2HIGH_FREQUENCY_MODE+0x44>)
 8002508:	f00a fc78 	bl	800cdfc <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim5);
 800250c:	4805      	ldr	r0, [pc, #20]	@ (8002524 <Turn2HIGH_FREQUENCY_MODE+0x40>)
 800250e:	f00a fc75 	bl	800cdfc <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8002512:	4803      	ldr	r0, [pc, #12]	@ (8002520 <Turn2HIGH_FREQUENCY_MODE+0x3c>)
 8002514:	f00a fbda 	bl	800cccc <HAL_TIM_Base_Start>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	24000260 	.word	0x24000260
 8002520:	24014fec 	.word	0x24014fec
 8002524:	24015084 	.word	0x24015084
 8002528:	24015038 	.word	0x24015038

0800252c <Turn2LOW_FREQUENCY_MODE>:

void Turn2LOW_FREQUENCY_MODE(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
   // printf("低频测量\n");
		Fre_State=LOW_FREQUENCY;
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <Turn2LOW_FREQUENCY_MODE+0x28>)
 8002532:	229f      	movs	r2, #159	@ 0x9f
 8002534:	701a      	strb	r2, [r3, #0]
		Parameter_Init();
 8002536:	f7ff ffb9 	bl	80024ac <Parameter_Init>
	    __HAL_TIM_SetCounter(&htim2,0);
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <Turn2LOW_FREQUENCY_MODE+0x2c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24
		MX_TIM5_Init();
 8002542:	f000 fde3 	bl	800310c <MX_TIM5_Init>
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);    //启动输入捕获
 8002546:	2100      	movs	r1, #0
 8002548:	4804      	ldr	r0, [pc, #16]	@ (800255c <Turn2LOW_FREQUENCY_MODE+0x30>)
 800254a:	f00a fd5f 	bl	800d00c <HAL_TIM_IC_Start_IT>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	24000260 	.word	0x24000260
 8002558:	24014fec 	.word	0x24014fec
 800255c:	24015084 	.word	0x24015084

08002560 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002566:	463b      	mov	r3, r7
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002572:	f003 f97b 	bl	800586c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800257a:	2300      	movs	r3, #0
 800257c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800257e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8002582:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002584:	2312      	movs	r3, #18
 8002586:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002588:	2300      	movs	r3, #0
 800258a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800258c:	2301      	movs	r3, #1
 800258e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002590:	2303      	movs	r3, #3
 8002592:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800259c:	2301      	movs	r3, #1
 800259e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025a4:	463b      	mov	r3, r7
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 f998 	bl	80058dc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80025b0:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80025b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80025b6:	2310      	movs	r3, #16
 80025b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025c2:	463b      	mov	r3, r7
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 f989 	bl	80058dc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80025ca:	2302      	movs	r3, #2
 80025cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80025ce:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <MPU_Config+0xb4>)
 80025d0:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025d2:	463b      	mov	r3, r7
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 f981 	bl	80058dc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80025da:	2303      	movs	r3, #3
 80025dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <MPU_Config+0xb8>)
 80025e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80025e2:	230e      	movs	r3, #14
 80025e4:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025e6:	463b      	mov	r3, r7
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 f977 	bl	80058dc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80025ee:	2304      	movs	r3, #4
 80025f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80025f2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80025f6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80025f8:	230f      	movs	r3, #15
 80025fa:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025fc:	463b      	mov	r3, r7
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 f96c 	bl	80058dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002604:	2004      	movs	r0, #4
 8002606:	f003 f949 	bl	800589c <HAL_MPU_Enable>

}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	30020000 	.word	0x30020000
 8002618:	30040000 	.word	0x30040000

0800261c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002620:	b672      	cpsid	i
}
 8002622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <Error_Handler+0x8>

08002628 <Oled_Write_Cmd>:

int pages = 0;
uint8_t GRAM[8][128];
uint8_t *ADptr = GRAM[0];//ADDRESS ptr

void Oled_Write_Cmd(uint8_t cmd){
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af04      	add	r7, sp, #16
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&hi2c1, OLED_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0xff);
 8002632:	23ff      	movs	r3, #255	@ 0xff
 8002634:	9302      	str	r3, [sp, #8]
 8002636:	2301      	movs	r3, #1
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	1dfb      	adds	r3, r7, #7
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2301      	movs	r3, #1
 8002640:	2200      	movs	r2, #0
 8002642:	2178      	movs	r1, #120	@ 0x78
 8002644:	4803      	ldr	r0, [pc, #12]	@ (8002654 <Oled_Write_Cmd+0x2c>)
 8002646:	f006 f9b9 	bl	80089bc <HAL_I2C_Mem_Write>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	24004ac4 	.word	0x24004ac4

08002658 <Oled_Write_Data>:

void Oled_Write_Data(uint8_t data)//Write Shift
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af04      	add	r7, sp, #16
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, OLED_ADDRESS, 0x40, I2C_MEMADD_SIZE_8BIT,&data, 1, 0xff);
 8002662:	23ff      	movs	r3, #255	@ 0xff
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	2301      	movs	r3, #1
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2301      	movs	r3, #1
 8002670:	2240      	movs	r2, #64	@ 0x40
 8002672:	2178      	movs	r1, #120	@ 0x78
 8002674:	4805      	ldr	r0, [pc, #20]	@ (800268c <Oled_Write_Data+0x34>)
 8002676:	f006 f9a1 	bl	80089bc <HAL_I2C_Mem_Write>
    ADptr += CharLen;
 800267a:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <Oled_Write_Data+0x38>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3306      	adds	r3, #6
 8002680:	4a03      	ldr	r2, [pc, #12]	@ (8002690 <Oled_Write_Data+0x38>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	24004ac4 	.word	0x24004ac4
 8002690:	24000264 	.word	0x24000264

08002694 <Oled_Init>:

void Oled_Init()//Initialize Oled
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	Oled_RstFrame();
 8002698:	f000 f85a 	bl	8002750 <Oled_RstFrame>
	Oled_Write_Cmd(0xAE);//--display off
 800269c:	20ae      	movs	r0, #174	@ 0xae
 800269e:	f7ff ffc3 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x00);//---set low column address
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7ff ffc0 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x10);//---set high column address
 80026a8:	2010      	movs	r0, #16
 80026aa:	f7ff ffbd 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x40);//--set start line address
 80026ae:	2040      	movs	r0, #64	@ 0x40
 80026b0:	f7ff ffba 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xB0);//--set page address
 80026b4:	20b0      	movs	r0, #176	@ 0xb0
 80026b6:	f7ff ffb7 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x81); // contract control
 80026ba:	2081      	movs	r0, #129	@ 0x81
 80026bc:	f7ff ffb4 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xFF);//--128
 80026c0:	20ff      	movs	r0, #255	@ 0xff
 80026c2:	f7ff ffb1 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xA1);//set segment remap
 80026c6:	20a1      	movs	r0, #161	@ 0xa1
 80026c8:	f7ff ffae 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xA6);//--normal / reverse
 80026cc:	20a6      	movs	r0, #166	@ 0xa6
 80026ce:	f7ff ffab 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xA8);//--set multiplex ratio(1 to 64)
 80026d2:	20a8      	movs	r0, #168	@ 0xa8
 80026d4:	f7ff ffa8 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x3F);//--1/32 duty
 80026d8:	203f      	movs	r0, #63	@ 0x3f
 80026da:	f7ff ffa5 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xC8);//Com scan direction
 80026de:	20c8      	movs	r0, #200	@ 0xc8
 80026e0:	f7ff ffa2 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xD3);//-set display offset
 80026e4:	20d3      	movs	r0, #211	@ 0xd3
 80026e6:	f7ff ff9f 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x00);//
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7ff ff9c 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xD5);//set osc division
 80026f0:	20d5      	movs	r0, #213	@ 0xd5
 80026f2:	f7ff ff99 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x80);//
 80026f6:	2080      	movs	r0, #128	@ 0x80
 80026f8:	f7ff ff96 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xD8);//set area color mode off
 80026fc:	20d8      	movs	r0, #216	@ 0xd8
 80026fe:	f7ff ff93 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x05);//
 8002702:	2005      	movs	r0, #5
 8002704:	f7ff ff90 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xD9);//Set Pre-Charge Period
 8002708:	20d9      	movs	r0, #217	@ 0xd9
 800270a:	f7ff ff8d 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xF1);//
 800270e:	20f1      	movs	r0, #241	@ 0xf1
 8002710:	f7ff ff8a 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xDA);//set com pin configuartion
 8002714:	20da      	movs	r0, #218	@ 0xda
 8002716:	f7ff ff87 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x12);//
 800271a:	2012      	movs	r0, #18
 800271c:	f7ff ff84 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xDB);//set Vcomh
 8002720:	20db      	movs	r0, #219	@ 0xdb
 8002722:	f7ff ff81 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x30);//
 8002726:	2030      	movs	r0, #48	@ 0x30
 8002728:	f7ff ff7e 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x8D);//set charge pump enable
 800272c:	208d      	movs	r0, #141	@ 0x8d
 800272e:	f7ff ff7b 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0x14);//
 8002732:	2014      	movs	r0, #20
 8002734:	f7ff ff78 	bl	8002628 <Oled_Write_Cmd>
	Oled_Write_Cmd(0xAF);//--turn on oled panel
 8002738:	20af      	movs	r0, #175	@ 0xaf
 800273a:	f7ff ff75 	bl	8002628 <Oled_Write_Cmd>
	Oled_ShowFrame();
 800273e:	f000 f813 	bl	8002768 <Oled_ShowFrame>
	pages = 0;
 8002742:	4b02      	ldr	r3, [pc, #8]	@ (800274c <Oled_Init+0xb8>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	24014be4 	.word	0x24014be4

08002750 <Oled_RstFrame>:
 * UNLESS I HAVE TIME  :L
 *
 */

void Oled_RstFrame(void )//Reset Frame
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0

	memset(GRAM , 0 , sizeof(GRAM));
 8002754:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002758:	2100      	movs	r1, #0
 800275a:	4802      	ldr	r0, [pc, #8]	@ (8002764 <Oled_RstFrame+0x14>)
 800275c:	f00d f81f 	bl	800f79e <memset>
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	24014be8 	.word	0x24014be8

08002768 <Oled_ShowFrame>:

void Oled_ShowFrame(void )//Show Frame
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0a4      	sub	sp, #144	@ 0x90
 800276c:	af02      	add	r7, sp, #8
	uint8_t Buffer[129];
	Buffer[0] = 0x40;
 800276e:	2340      	movs	r3, #64	@ 0x40
 8002770:	703b      	strb	r3, [r7, #0]
	for (int i = 0 ; i < 8; i++){
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002778:	e026      	b.n	80027c8 <Oled_ShowFrame+0x60>
		memcpy(Buffer + 1 , GRAM[i] , 128);
 800277a:	463b      	mov	r3, r7
 800277c:	3301      	adds	r3, #1
 800277e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002782:	01d2      	lsls	r2, r2, #7
 8002784:	4915      	ldr	r1, [pc, #84]	@ (80027dc <Oled_ShowFrame+0x74>)
 8002786:	4411      	add	r1, r2
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	4618      	mov	r0, r3
 800278c:	f00d f884 	bl	800f898 <memcpy>
		Oled_Write_Cmd(0xB0 + i);
 8002790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3b50      	subs	r3, #80	@ 0x50
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff44 	bl	8002628 <Oled_Write_Cmd>
		Oled_Write_Cmd(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7ff ff41 	bl	8002628 <Oled_Write_Cmd>
		Oled_Write_Cmd(0x10);
 80027a6:	2010      	movs	r0, #16
 80027a8:	f7ff ff3e 	bl	8002628 <Oled_Write_Cmd>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, Buffer , sizeof(Buffer), HAL_MAX_DELAY);
 80027ac:	463a      	mov	r2, r7
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2381      	movs	r3, #129	@ 0x81
 80027b6:	2178      	movs	r1, #120	@ 0x78
 80027b8:	4809      	ldr	r0, [pc, #36]	@ (80027e0 <Oled_ShowFrame+0x78>)
 80027ba:	f006 f80b 	bl	80087d4 <HAL_I2C_Master_Transmit>
	for (int i = 0 ; i < 8; i++){
 80027be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027c2:	3301      	adds	r3, #1
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027cc:	2b07      	cmp	r3, #7
 80027ce:	ddd4      	ble.n	800277a <Oled_ShowFrame+0x12>
	}
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3788      	adds	r7, #136	@ 0x88
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	24014be8 	.word	0x24014be8
 80027e0:	24004ac4 	.word	0x24004ac4

080027e4 <Oled_WriteChar>:
	}
	ADptr = GRAM[0];
}

void Oled_WriteChar(uint8_t data)//Receive data from u(s)art or anything else to Register
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
	uint8_t *ascii = ascii_8x6[data];
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002828 <Oled_WriteChar+0x44>)
 80027fa:	4413      	add	r3, r2
 80027fc:	60bb      	str	r3, [r7, #8]
	for (int i = 0 ; i < 6; i ++ ){
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e009      	b.n	8002818 <Oled_WriteChar+0x34>
		Oled_Write_Data(ascii[i]);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff23 	bl	8002658 <Oled_Write_Data>
	for (int i = 0 ; i < 6; i ++ ){
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b05      	cmp	r3, #5
 800281c:	ddf2      	ble.n	8002804 <Oled_WriteChar+0x20>
	}
}
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	24000000 	.word	0x24000000

0800282c <Oled_WriteAsciiChar>:
}

/* better WriteFunctions below:
 * Oled_WriteAsciiChar() is used to write */

void Oled_WriteAsciiChar(uint8_t data){
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]

	uint8_t delta = (ADptr - GRAM[0])/6;
 8002836:	4b3e      	ldr	r3, [pc, #248]	@ (8002930 <Oled_WriteAsciiChar+0x104>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3e      	ldr	r2, [pc, #248]	@ (8002934 <Oled_WriteAsciiChar+0x108>)
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	4a3e      	ldr	r2, [pc, #248]	@ (8002938 <Oled_WriteAsciiChar+0x10c>)
 8002840:	fb82 1203 	smull	r1, r2, r2, r3
 8002844:	17db      	asrs	r3, r3, #31
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	73fb      	strb	r3, [r7, #15]
	//int pages = delta/128 ;
	if (data == ' '){
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2b20      	cmp	r3, #32
 800284e:	d103      	bne.n	8002858 <Oled_WriteAsciiChar+0x2c>
		Oled_WriteChar(0);
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff ffc7 	bl	80027e4 <Oled_WriteChar>
	else if (data == '=')
	{
		Oled_WriteChar(29);
	}

}
 8002856:	e067      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if('0' <= data && data <= '9'){
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	2b2f      	cmp	r3, #47	@ 0x2f
 800285c:	d909      	bls.n	8002872 <Oled_WriteAsciiChar+0x46>
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b39      	cmp	r3, #57	@ 0x39
 8002862:	d806      	bhi.n	8002872 <Oled_WriteAsciiChar+0x46>
		Oled_WriteChar(data - 32);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	3b20      	subs	r3, #32
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ffba 	bl	80027e4 <Oled_WriteChar>
 8002870:	e05a      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if ('a' <= data && data <= 'z' ){
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b60      	cmp	r3, #96	@ 0x60
 8002876:	d909      	bls.n	800288c <Oled_WriteAsciiChar+0x60>
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b7a      	cmp	r3, #122	@ 0x7a
 800287c:	d806      	bhi.n	800288c <Oled_WriteAsciiChar+0x60>
		Oled_WriteChar(data - 32);
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	3b20      	subs	r3, #32
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ffad 	bl	80027e4 <Oled_WriteChar>
 800288a:	e04d      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if ('A' <= data && data <= 'Z'){
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d909      	bls.n	80028a6 <Oled_WriteAsciiChar+0x7a>
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b5a      	cmp	r3, #90	@ 0x5a
 8002896:	d806      	bhi.n	80028a6 <Oled_WriteAsciiChar+0x7a>
		Oled_WriteChar(data - 32);
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	3b20      	subs	r3, #32
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff ffa0 	bl	80027e4 <Oled_WriteChar>
 80028a4:	e040      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if (data == '.'){
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80028aa:	d103      	bne.n	80028b4 <Oled_WriteAsciiChar+0x88>
		Oled_WriteChar(14);
 80028ac:	200e      	movs	r0, #14
 80028ae:	f7ff ff99 	bl	80027e4 <Oled_WriteChar>
}
 80028b2:	e039      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if (data == '\n'){
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b0a      	cmp	r3, #10
 80028b8:	d113      	bne.n	80028e2 <Oled_WriteAsciiChar+0xb6>
		pages++;
 80028ba:	4b20      	ldr	r3, [pc, #128]	@ (800293c <Oled_WriteAsciiChar+0x110>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	4a1e      	ldr	r2, [pc, #120]	@ (800293c <Oled_WriteAsciiChar+0x110>)
 80028c2:	6013      	str	r3, [r2, #0]
		Oled_Write_Cmd(0xB0 + pages);
 80028c4:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <Oled_WriteAsciiChar+0x110>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	3b50      	subs	r3, #80	@ 0x50
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff feaa 	bl	8002628 <Oled_Write_Cmd>
		Oled_Write_Cmd(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fea7 	bl	8002628 <Oled_Write_Cmd>
		Oled_Write_Cmd(0x10);
 80028da:	2010      	movs	r0, #16
 80028dc:	f7ff fea4 	bl	8002628 <Oled_Write_Cmd>
}
 80028e0:	e022      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if (data == ',')
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80028e6:	d103      	bne.n	80028f0 <Oled_WriteAsciiChar+0xc4>
		Oled_WriteChar(12);
 80028e8:	200c      	movs	r0, #12
 80028ea:	f7ff ff7b 	bl	80027e4 <Oled_WriteChar>
}
 80028ee:	e01b      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if (data == ':')
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80028f4:	d103      	bne.n	80028fe <Oled_WriteAsciiChar+0xd2>
		Oled_WriteChar('9' -31);
 80028f6:	201a      	movs	r0, #26
 80028f8:	f7ff ff74 	bl	80027e4 <Oled_WriteChar>
}
 80028fc:	e014      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if (data == '-')
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b2d      	cmp	r3, #45	@ 0x2d
 8002902:	d103      	bne.n	800290c <Oled_WriteAsciiChar+0xe0>
		Oled_WriteChar(13);
 8002904:	200d      	movs	r0, #13
 8002906:	f7ff ff6d 	bl	80027e4 <Oled_WriteChar>
}
 800290a:	e00d      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if (data == '/')
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002910:	d103      	bne.n	800291a <Oled_WriteAsciiChar+0xee>
		Oled_WriteChar(15);
 8002912:	200f      	movs	r0, #15
 8002914:	f7ff ff66 	bl	80027e4 <Oled_WriteChar>
}
 8002918:	e006      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
	else if (data == '=')
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b3d      	cmp	r3, #61	@ 0x3d
 800291e:	d103      	bne.n	8002928 <Oled_WriteAsciiChar+0xfc>
		Oled_WriteChar(29);
 8002920:	201d      	movs	r0, #29
 8002922:	f7ff ff5f 	bl	80027e4 <Oled_WriteChar>
}
 8002926:	e7ff      	b.n	8002928 <Oled_WriteAsciiChar+0xfc>
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	24000264 	.word	0x24000264
 8002934:	24014be8 	.word	0x24014be8
 8002938:	2aaaaaab 	.word	0x2aaaaaab
 800293c:	24014be4 	.word	0x24014be4

08002940 <Oled_WriteAsciiString>:

void Oled_WriteAsciiString(char * str)//Write a string
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	while (*str){
 8002948:	e007      	b.n	800295a <Oled_WriteAsciiString+0x1a>
		Oled_WriteAsciiChar(*str);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff6c 	bl	800282c <Oled_WriteAsciiChar>
		str++;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3301      	adds	r3, #1
 8002958:	607b      	str	r3, [r7, #4]
	while (*str){
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f3      	bne.n	800294a <Oled_WriteAsciiString+0xa>
	}
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	0000      	movs	r0, r0
	...

08002970 <FFT_ADC1>:
	}
	return ptr;
}

double* FFT_ADC1(int size , double *x ,int pa)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0a0      	sub	sp, #128	@ 0x80
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
	char str_2[50];
	int i = 0 , max_index = 0  ,min_index = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002980:	2300      	movs	r3, #0
 8002982:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002984:	2300      	movs	r3, #0
 8002986:	677b      	str	r3, [r7, #116]	@ 0x74
	double max , min ;
	double  s1;
	double *s = &s1;
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	double complex *X =FFT(FO_LENGTH_HIGH, x);
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002994:	f7fe f844 	bl	8000a20 <FFT>
 8002998:	65b8      	str	r0, [r7, #88]	@ 0x58
	  for (i = 0 ; i < FO_LENGTH_HIGH ; i++)
 800299a:	2300      	movs	r3, #0
 800299c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800299e:	e0da      	b.n	8002b56 <FFT_ADC1+0x1e6>
	  {
		  sprintf(str_2 , "%.5lf" , cabs(X[i]));
 80029a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029a6:	4413      	add	r3, r2
 80029a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029b0:	ec41 0b16 	vmov	d6, r0, r1
 80029b4:	ec43 2b17 	vmov	d7, r2, r3
 80029b8:	eeb0 0b46 	vmov.f64	d0, d6
 80029bc:	eeb0 1b47 	vmov.f64	d1, d7
 80029c0:	f011 fe5e 	bl	8014680 <cabs>
 80029c4:	ec53 2b10 	vmov	r2, r3, d0
 80029c8:	f107 001c 	add.w	r0, r7, #28
 80029cc:	499c      	ldr	r1, [pc, #624]	@ (8002c40 <FFT_ADC1+0x2d0>)
 80029ce:	f00c fe83 	bl	800f6d8 <sprintf>
		  if (max < cabs(X[i]) && i < 4096 &&  i > 50 && cabs(X[i]) > 20)
 80029d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029d8:	4413      	add	r3, r2
 80029da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029e2:	ec41 0b16 	vmov	d6, r0, r1
 80029e6:	ec43 2b17 	vmov	d7, r2, r3
 80029ea:	eeb0 0b46 	vmov.f64	d0, d6
 80029ee:	eeb0 1b47 	vmov.f64	d1, d7
 80029f2:	f011 fe45 	bl	8014680 <cabs>
 80029f6:	eeb0 6b40 	vmov.f64	d6, d0
 80029fa:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80029fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d540      	bpl.n	8002a8a <FFT_ADC1+0x11a>
 8002a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0e:	da3c      	bge.n	8002a8a <FFT_ADC1+0x11a>
 8002a10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a12:	2b32      	cmp	r3, #50	@ 0x32
 8002a14:	dd39      	ble.n	8002a8a <FFT_ADC1+0x11a>
 8002a16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a1c:	4413      	add	r3, r2
 8002a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a26:	ec41 0b16 	vmov	d6, r0, r1
 8002a2a:	ec43 2b17 	vmov	d7, r2, r3
 8002a2e:	eeb0 0b46 	vmov.f64	d0, d6
 8002a32:	eeb0 1b47 	vmov.f64	d1, d7
 8002a36:	f011 fe23 	bl	8014680 <cabs>
 8002a3a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a3e:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8002a42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4a:	dd1e      	ble.n	8002a8a <FFT_ADC1+0x11a>
		  {
			  max_index = i * 1.0 ;
 8002a4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002a5a:	ee17 3a90 	vmov	r3, s15
 8002a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
			  max =cabs(X[i]);
 8002a60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a66:	4413      	add	r3, r2
 8002a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a70:	ec41 0b16 	vmov	d6, r0, r1
 8002a74:	ec43 2b17 	vmov	d7, r2, r3
 8002a78:	eeb0 0b46 	vmov.f64	d0, d6
 8002a7c:	eeb0 1b47 	vmov.f64	d1, d7
 8002a80:	f011 fdfe 	bl	8014680 <cabs>
 8002a84:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
 8002a88:	e053      	b.n	8002b32 <FFT_ADC1+0x1c2>

		  }
		  else if (min > cabs(X[i]) && i < 4096 && i > 50 && cabs(X[i]) < -20)
 8002a8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a90:	4413      	add	r3, r2
 8002a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a9a:	ec41 0b16 	vmov	d6, r0, r1
 8002a9e:	ec43 2b17 	vmov	d7, r2, r3
 8002aa2:	eeb0 0b46 	vmov.f64	d0, d6
 8002aa6:	eeb0 1b47 	vmov.f64	d1, d7
 8002aaa:	f011 fde9 	bl	8014680 <cabs>
 8002aae:	eeb0 6b40 	vmov.f64	d6, d0
 8002ab2:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8002ab6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	dd38      	ble.n	8002b32 <FFT_ADC1+0x1c2>
 8002ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac6:	da34      	bge.n	8002b32 <FFT_ADC1+0x1c2>
 8002ac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aca:	2b32      	cmp	r3, #50	@ 0x32
 8002acc:	dd31      	ble.n	8002b32 <FFT_ADC1+0x1c2>
 8002ace:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ad4:	4413      	add	r3, r2
 8002ad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ada:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ade:	ec41 0b16 	vmov	d6, r0, r1
 8002ae2:	ec43 2b17 	vmov	d7, r2, r3
 8002ae6:	eeb0 0b46 	vmov.f64	d0, d6
 8002aea:	eeb0 1b47 	vmov.f64	d1, d7
 8002aee:	f011 fdc7 	bl	8014680 <cabs>
 8002af2:	eeb0 7b40 	vmov.f64	d7, d0
 8002af6:	eebb 6b04 	vmov.f64	d6, #180	@ 0xc1a00000 -20.0
 8002afa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b02:	d516      	bpl.n	8002b32 <FFT_ADC1+0x1c2>
		  {
			  min_index = i ;
 8002b04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b06:	677b      	str	r3, [r7, #116]	@ 0x74
			  min = cabs(X[i]);
 8002b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b0e:	4413      	add	r3, r2
 8002b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b18:	ec41 0b16 	vmov	d6, r0, r1
 8002b1c:	ec43 2b17 	vmov	d7, r2, r3
 8002b20:	eeb0 0b46 	vmov.f64	d0, d6
 8002b24:	eeb0 1b47 	vmov.f64	d1, d7
 8002b28:	f011 fdaa 	bl	8014680 <cabs>
 8002b2c:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8002b30:	bf00      	nop
			  max = max;
			  min_index = min_index ;
			  min = min;
		  }

		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7 ,HAL_MAX_DELAY);
 8002b32:	f107 011c 	add.w	r1, r7, #28
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	4841      	ldr	r0, [pc, #260]	@ (8002c44 <FFT_ADC1+0x2d4>)
 8002b3e:	f00b fbf5 	bl	800e32c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n" , 1 , HAL_MAX_DELAY);
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b46:	2201      	movs	r2, #1
 8002b48:	493f      	ldr	r1, [pc, #252]	@ (8002c48 <FFT_ADC1+0x2d8>)
 8002b4a:	483e      	ldr	r0, [pc, #248]	@ (8002c44 <FFT_ADC1+0x2d4>)
 8002b4c:	f00b fbee 	bl	800e32c <HAL_UART_Transmit>
	  for (i = 0 ; i < FO_LENGTH_HIGH ; i++)
 8002b50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b52:	3301      	adds	r3, #1
 8002b54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5c:	f6ff af20 	blt.w	80029a0 <FFT_ADC1+0x30>
	  }
	  double index = (max_index - min_index < 5)?(max_index + min_index ) : (2*max_index);
 8002b60:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	dc07      	bgt.n	8002b7a <FFT_ADC1+0x20a>
 8002b6a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002b6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6e:	4413      	add	r3, r2
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b78:	e005      	b.n	8002b86 <FFT_ADC1+0x216>
 8002b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b86:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	  if (para ==1)
 8002b8a:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <FFT_ADC1+0x2dc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10c      	bne.n	8002bac <FFT_ADC1+0x23c>
	  {
		  s1 =  index*19 / (8192) ;
 8002b92:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002b96:	eeb3 6b03 	vmov.f64	d6, #51	@ 0x41980000  19.0
 8002b9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b9e:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002c20 <FFT_ADC1+0x2b0>
 8002ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ba6:	ed87 7b04 	vstr	d7, [r7, #16]
 8002baa:	e031      	b.n	8002c10 <FFT_ADC1+0x2a0>
	  }
	  else if (para == 2)
 8002bac:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <FFT_ADC1+0x2dc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d10c      	bne.n	8002bce <FFT_ADC1+0x25e>
	  {
		  s1 =  index*70.65 / (8192) ;
 8002bb4:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002bb8:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8002c28 <FFT_ADC1+0x2b8>
 8002bbc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002bc0:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8002c20 <FFT_ADC1+0x2b0>
 8002bc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bc8:	ed87 7b04 	vstr	d7, [r7, #16]
 8002bcc:	e020      	b.n	8002c10 <FFT_ADC1+0x2a0>
	  }
	  else if (para == 3)
 8002bce:	4b1f      	ldr	r3, [pc, #124]	@ (8002c4c <FFT_ADC1+0x2dc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d10c      	bne.n	8002bf0 <FFT_ADC1+0x280>
	  {
		  s1 =  index*286.5 / (8192) ;
 8002bd6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002bda:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8002c30 <FFT_ADC1+0x2c0>
 8002bde:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002be2:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8002c20 <FFT_ADC1+0x2b0>
 8002be6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bea:	ed87 7b04 	vstr	d7, [r7, #16]
 8002bee:	e00f      	b.n	8002c10 <FFT_ADC1+0x2a0>
	  }
	  else if (para == 4)
 8002bf0:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <FFT_ADC1+0x2dc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d10b      	bne.n	8002c10 <FFT_ADC1+0x2a0>
	  {
		  s1 = index*571.5 / (8192) ;
 8002bf8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8002bfc:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8002c38 <FFT_ADC1+0x2c8>
 8002c00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c04:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 8002c20 <FFT_ADC1+0x2b0>
 8002c08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c0c:	ed87 7b04 	vstr	d7, [r7, #16]
	  }
//	  sprintf(str_2 , "%d" , max_index);
//	  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7 ,HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n" , 1 , HAL_MAX_DELAY);
	  //free(X);
	  return s ;
 8002c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3780      	adds	r7, #128	@ 0x80
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	f3af 8000 	nop.w
 8002c20:	00000000 	.word	0x00000000
 8002c24:	40c00000 	.word	0x40c00000
 8002c28:	9999999a 	.word	0x9999999a
 8002c2c:	4051a999 	.word	0x4051a999
 8002c30:	00000000 	.word	0x00000000
 8002c34:	4071e800 	.word	0x4071e800
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	4081dc00 	.word	0x4081dc00
 8002c40:	080155fc 	.word	0x080155fc
 8002c44:	24015168 	.word	0x24015168
 8002c48:	08015604 	.word	0x08015604
 8002c4c:	24014b84 	.word	0x24014b84

08002c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <HAL_MspInit+0x30>)
 8002c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c5c:	4a08      	ldr	r2, [pc, #32]	@ (8002c80 <HAL_MspInit+0x30>)
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_MspInit+0x30>)
 8002c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	58024400 	.word	0x58024400

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <NMI_Handler+0x4>

08002c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cda:	f000 fe03 	bl	80038e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <DMA1_Stream0_IRQHandler+0x10>)
 8002cea:	f003 ff17 	bl	8006b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	240049c0 	.word	0x240049c0

08002cf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002cfc:	4802      	ldr	r0, [pc, #8]	@ (8002d08 <DMA1_Stream1_IRQHandler+0x10>)
 8002cfe:	f003 ff0d 	bl	8006b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	24004a4c 	.word	0x24004a4c

08002d0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d10:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <TIM4_IRQHandler+0x10>)
 8002d12:	f00a fb89 	bl	800d428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	24015038 	.word	0x24015038

08002d20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d24:	4802      	ldr	r0, [pc, #8]	@ (8002d30 <TIM5_IRQHandler+0x10>)
 8002d26:	f00a fb7f 	bl	800d428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	24015084 	.word	0x24015084

08002d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return 1;
 8002d38:	2301      	movs	r3, #1
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_kill>:

int _kill(int pid, int sig)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d4e:	f00c fd75 	bl	800f83c <__errno>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2216      	movs	r2, #22
 8002d56:	601a      	str	r2, [r3, #0]
  return -1;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_exit>:

void _exit (int status)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ffe7 	bl	8002d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d76:	bf00      	nop
 8002d78:	e7fd      	b.n	8002d76 <_exit+0x12>

08002d7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e00a      	b.n	8002da2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d8c:	f3af 8000 	nop.w
 8002d90:	4601      	mov	r1, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	60ba      	str	r2, [r7, #8]
 8002d98:	b2ca      	uxtb	r2, r1
 8002d9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	dbf0      	blt.n	8002d8c <_read+0x12>
  }

  return len;
 8002daa:	687b      	ldr	r3, [r7, #4]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e009      	b.n	8002dda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	60ba      	str	r2, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	dbf1      	blt.n	8002dc6 <_write+0x12>
  }
  return len;
 8002de2:	687b      	ldr	r3, [r7, #4]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_close>:

int _close(int file)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e14:	605a      	str	r2, [r3, #4]
  return 0;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_isatty>:

int _isatty(int file)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e5c:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <_sbrk+0x5c>)
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <_sbrk+0x60>)
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <_sbrk+0x64>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e70:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <_sbrk+0x64>)
 8002e72:	4a12      	ldr	r2, [pc, #72]	@ (8002ebc <_sbrk+0x68>)
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d207      	bcs.n	8002e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e84:	f00c fcda 	bl	800f83c <__errno>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e92:	e009      	b.n	8002ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <_sbrk+0x64>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <_sbrk+0x64>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a05      	ldr	r2, [pc, #20]	@ (8002eb8 <_sbrk+0x64>)
 8002ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	24080000 	.word	0x24080000
 8002eb4:	00001000 	.word	0x00001000
 8002eb8:	24014fe8 	.word	0x24014fe8
 8002ebc:	24015510 	.word	0x24015510

08002ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ec4:	4b37      	ldr	r3, [pc, #220]	@ (8002fa4 <SystemInit+0xe4>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	4a36      	ldr	r2, [pc, #216]	@ (8002fa4 <SystemInit+0xe4>)
 8002ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ed4:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <SystemInit+0xe8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d807      	bhi.n	8002ef0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ee0:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <SystemInit+0xe8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 030f 	bic.w	r3, r3, #15
 8002ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa8 <SystemInit+0xe8>)
 8002eea:	f043 0307 	orr.w	r3, r3, #7
 8002eee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <SystemInit+0xec>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8002fac <SystemInit+0xec>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002efc:	4b2b      	ldr	r3, [pc, #172]	@ (8002fac <SystemInit+0xec>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	@ (8002fac <SystemInit+0xec>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4929      	ldr	r1, [pc, #164]	@ (8002fac <SystemInit+0xec>)
 8002f08:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <SystemInit+0xf0>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f0e:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <SystemInit+0xe8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f1a:	4b23      	ldr	r3, [pc, #140]	@ (8002fa8 <SystemInit+0xe8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 030f 	bic.w	r3, r3, #15
 8002f22:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <SystemInit+0xe8>)
 8002f24:	f043 0307 	orr.w	r3, r3, #7
 8002f28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f2a:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <SystemInit+0xec>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f30:	4b1e      	ldr	r3, [pc, #120]	@ (8002fac <SystemInit+0xec>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f36:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <SystemInit+0xec>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <SystemInit+0xec>)
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <SystemInit+0xf4>)
 8002f40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <SystemInit+0xec>)
 8002f44:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb8 <SystemInit+0xf8>)
 8002f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f48:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <SystemInit+0xec>)
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fbc <SystemInit+0xfc>)
 8002f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f4e:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <SystemInit+0xec>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f54:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <SystemInit+0xec>)
 8002f56:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <SystemInit+0xfc>)
 8002f58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <SystemInit+0xec>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f60:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <SystemInit+0xec>)
 8002f62:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <SystemInit+0xfc>)
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f66:	4b11      	ldr	r3, [pc, #68]	@ (8002fac <SystemInit+0xec>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <SystemInit+0xec>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	@ (8002fac <SystemInit+0xec>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <SystemInit+0xec>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <SystemInit+0x100>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <SystemInit+0x104>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f8a:	d202      	bcs.n	8002f92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <SystemInit+0x108>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <SystemInit+0x10c>)
 8002f94:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00
 8002fa8:	52002000 	.word	0x52002000
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fb4:	02020200 	.word	0x02020200
 8002fb8:	01ff0000 	.word	0x01ff0000
 8002fbc:	01010280 	.word	0x01010280
 8002fc0:	5c001000 	.word	0x5c001000
 8002fc4:	ffff0000 	.word	0xffff0000
 8002fc8:	51008108 	.word	0x51008108
 8002fcc:	52004000 	.word	0x52004000

08002fd0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <MX_TIM2_Init+0x98>)
 8002ff0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ff4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <MX_TIM2_Init+0x98>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <MX_TIM2_Init+0x98>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003002:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <MX_TIM2_Init+0x98>)
 8003004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003008:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300a:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <MX_TIM2_Init+0x98>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003010:	4b15      	ldr	r3, [pc, #84]	@ (8003068 <MX_TIM2_Init+0x98>)
 8003012:	2200      	movs	r2, #0
 8003014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003016:	4814      	ldr	r0, [pc, #80]	@ (8003068 <MX_TIM2_Init+0x98>)
 8003018:	f009 fe00 	bl	800cc1c <HAL_TIM_Base_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003022:	f7ff fafb 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800302a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4619      	mov	r1, r3
 8003032:	480d      	ldr	r0, [pc, #52]	@ (8003068 <MX_TIM2_Init+0x98>)
 8003034:	f00a fbb4 	bl	800d7a0 <HAL_TIM_ConfigClockSource>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800303e:	f7ff faed 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4806      	ldr	r0, [pc, #24]	@ (8003068 <MX_TIM2_Init+0x98>)
 8003050:	f00b f870 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800305a:	f7ff fadf 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	24014fec 	.word	0x24014fec

0800306c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003072:	f107 0310 	add.w	r3, r7, #16
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800308a:	4b1e      	ldr	r3, [pc, #120]	@ (8003104 <MX_TIM4_Init+0x98>)
 800308c:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <MX_TIM4_Init+0x9c>)
 800308e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000-1;
 8003090:	4b1c      	ldr	r3, [pc, #112]	@ (8003104 <MX_TIM4_Init+0x98>)
 8003092:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8003096:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003098:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <MX_TIM4_Init+0x98>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800309e:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <MX_TIM4_Init+0x98>)
 80030a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80030a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a6:	4b17      	ldr	r3, [pc, #92]	@ (8003104 <MX_TIM4_Init+0x98>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ac:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <MX_TIM4_Init+0x98>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030b2:	4814      	ldr	r0, [pc, #80]	@ (8003104 <MX_TIM4_Init+0x98>)
 80030b4:	f009 fdb2 	bl	800cc1c <HAL_TIM_Base_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80030be:	f7ff faad 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4619      	mov	r1, r3
 80030ce:	480d      	ldr	r0, [pc, #52]	@ (8003104 <MX_TIM4_Init+0x98>)
 80030d0:	f00a fb66 	bl	800d7a0 <HAL_TIM_ConfigClockSource>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80030da:	f7ff fa9f 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	@ (8003104 <MX_TIM4_Init+0x98>)
 80030ec:	f00b f822 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80030f6:	f7ff fa91 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	24015038 	.word	0x24015038
 8003108:	40000800 	.word	0x40000800

0800310c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	@ 0x30
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003112:	f107 0320 	add.w	r3, r7, #32
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003138:	4b2b      	ldr	r3, [pc, #172]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 800313a:	4a2c      	ldr	r2, [pc, #176]	@ (80031ec <MX_TIM5_Init+0xe0>)
 800313c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800313e:	4b2a      	ldr	r3, [pc, #168]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003144:	4b28      	ldr	r3, [pc, #160]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800314a:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 800314c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003150:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003152:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003158:	4b23      	ldr	r3, [pc, #140]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800315e:	4822      	ldr	r0, [pc, #136]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 8003160:	f009 fd5c 	bl	800cc1c <HAL_TIM_Base_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 800316a:	f7ff fa57 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800316e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003172:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003174:	f107 0320 	add.w	r3, r7, #32
 8003178:	4619      	mov	r1, r3
 800317a:	481b      	ldr	r0, [pc, #108]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 800317c:	f00a fb10 	bl	800d7a0 <HAL_TIM_ConfigClockSource>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003186:	f7ff fa49 	bl	800261c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800318a:	4817      	ldr	r0, [pc, #92]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 800318c:	f009 fedd 	bl	800cf4a <HAL_TIM_IC_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8003196:	f7ff fa41 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80031a2:	f107 0314 	add.w	r3, r7, #20
 80031a6:	4619      	mov	r1, r3
 80031a8:	480f      	ldr	r0, [pc, #60]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 80031aa:	f00a ffc3 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80031b4:	f7ff fa32 	bl	800261c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031b8:	2300      	movs	r3, #0
 80031ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031bc:	2301      	movs	r3, #1
 80031be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	2200      	movs	r2, #0
 80031cc:	4619      	mov	r1, r3
 80031ce:	4806      	ldr	r0, [pc, #24]	@ (80031e8 <MX_TIM5_Init+0xdc>)
 80031d0:	f00a fa49 	bl	800d666 <HAL_TIM_IC_ConfigChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 80031da:	f7ff fa1f 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80031de:	bf00      	nop
 80031e0:	3730      	adds	r7, #48	@ 0x30
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	24015084 	.word	0x24015084
 80031ec:	40000c00 	.word	0x40000c00

080031f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003200:	4b14      	ldr	r3, [pc, #80]	@ (8003254 <MX_TIM7_Init+0x64>)
 8003202:	4a15      	ldr	r2, [pc, #84]	@ (8003258 <MX_TIM7_Init+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <MX_TIM7_Init+0x64>)
 8003208:	22ef      	movs	r2, #239	@ 0xef
 800320a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <MX_TIM7_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003212:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <MX_TIM7_Init+0x64>)
 8003214:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003218:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321a:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <MX_TIM7_Init+0x64>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003220:	480c      	ldr	r0, [pc, #48]	@ (8003254 <MX_TIM7_Init+0x64>)
 8003222:	f009 fcfb 	bl	800cc1c <HAL_TIM_Base_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800322c:	f7ff f9f6 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4805      	ldr	r0, [pc, #20]	@ (8003254 <MX_TIM7_Init+0x64>)
 800323e:	f00a ff79 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003248:	f7ff f9e8 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	240150d0 	.word	0x240150d0
 8003258:	40001400 	.word	0x40001400

0800325c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800327a:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <MX_TIM15_Init+0x98>)
 800327c:	4a1e      	ldr	r2, [pc, #120]	@ (80032f8 <MX_TIM15_Init+0x9c>)
 800327e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 20- 1;
 8003280:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <MX_TIM15_Init+0x98>)
 8003282:	2213      	movs	r2, #19
 8003284:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <MX_TIM15_Init+0x98>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 201-1;
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <MX_TIM15_Init+0x98>)
 800328e:	22c8      	movs	r2, #200	@ 0xc8
 8003290:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	4b18      	ldr	r3, [pc, #96]	@ (80032f4 <MX_TIM15_Init+0x98>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003298:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <MX_TIM15_Init+0x98>)
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <MX_TIM15_Init+0x98>)
 80032a0:	2280      	movs	r2, #128	@ 0x80
 80032a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80032a4:	4813      	ldr	r0, [pc, #76]	@ (80032f4 <MX_TIM15_Init+0x98>)
 80032a6:	f009 fcb9 	bl	800cc1c <HAL_TIM_Base_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80032b0:	f7ff f9b4 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80032ba:	f107 0310 	add.w	r3, r7, #16
 80032be:	4619      	mov	r1, r3
 80032c0:	480c      	ldr	r0, [pc, #48]	@ (80032f4 <MX_TIM15_Init+0x98>)
 80032c2:	f00a fa6d 	bl	800d7a0 <HAL_TIM_ConfigClockSource>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80032cc:	f7ff f9a6 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032d0:	2320      	movs	r3, #32
 80032d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4805      	ldr	r0, [pc, #20]	@ (80032f4 <MX_TIM15_Init+0x98>)
 80032de:	f00a ff29 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80032e8:	f7ff f998 	bl	800261c <Error_Handler>
//  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7 ,HAL_MAX_DELAY);
//  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n" , 1 , HAL_MAX_DELAY);

  /* USER CODE END TIM15_Init 2 */

}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	2401511c 	.word	0x2401511c
 80032f8:	40014000 	.word	0x40014000

080032fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08e      	sub	sp, #56	@ 0x38
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331c:	d10f      	bne.n	800333e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800331e:	4b4b      	ldr	r3, [pc, #300]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003324:	4a49      	ldr	r2, [pc, #292]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800332e:	4b47      	ldr	r3, [pc, #284]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800333c:	e081      	b.n	8003442 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM4)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a43      	ldr	r2, [pc, #268]	@ (8003450 <HAL_TIM_Base_MspInit+0x154>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d117      	bne.n	8003378 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003348:	4b40      	ldr	r3, [pc, #256]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 800334a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800334e:	4a3f      	ldr	r2, [pc, #252]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003358:	4b3c      	ldr	r3, [pc, #240]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 800335a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003366:	2200      	movs	r2, #0
 8003368:	2100      	movs	r1, #0
 800336a:	201e      	movs	r0, #30
 800336c:	f002 fa49 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003370:	201e      	movs	r0, #30
 8003372:	f002 fa60 	bl	8005836 <HAL_NVIC_EnableIRQ>
}
 8003376:	e064      	b.n	8003442 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a35      	ldr	r2, [pc, #212]	@ (8003454 <HAL_TIM_Base_MspInit+0x158>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d136      	bne.n	80033f0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003382:	4b32      	ldr	r3, [pc, #200]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003388:	4a30      	ldr	r2, [pc, #192]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 800338a:	f043 0308 	orr.w	r3, r3, #8
 800338e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003392:	4b2e      	ldr	r3, [pc, #184]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a0:	4b2a      	ldr	r3, [pc, #168]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a6:	4a29      	ldr	r2, [pc, #164]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b0:	4b26      	ldr	r3, [pc, #152]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033be:	2301      	movs	r3, #1
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80033ce:	2302      	movs	r3, #2
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d6:	4619      	mov	r1, r3
 80033d8:	481f      	ldr	r0, [pc, #124]	@ (8003458 <HAL_TIM_Base_MspInit+0x15c>)
 80033da:	f004 feb1 	bl	8008140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	2032      	movs	r0, #50	@ 0x32
 80033e4:	f002 fa0d 	bl	8005802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80033e8:	2032      	movs	r0, #50	@ 0x32
 80033ea:	f002 fa24 	bl	8005836 <HAL_NVIC_EnableIRQ>
}
 80033ee:	e028      	b.n	8003442 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a19      	ldr	r2, [pc, #100]	@ (800345c <HAL_TIM_Base_MspInit+0x160>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10f      	bne.n	800341a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033fa:	4b14      	ldr	r3, [pc, #80]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 80033fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003400:	4a12      	ldr	r2, [pc, #72]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003402:	f043 0320 	orr.w	r3, r3, #32
 8003406:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 800340c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
}
 8003418:	e013      	b.n	8003442 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM15)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a10      	ldr	r2, [pc, #64]	@ (8003460 <HAL_TIM_Base_MspInit+0x164>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10e      	bne.n	8003442 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003430:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_TIM_Base_MspInit+0x150>)
 8003436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800343a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
}
 8003442:	bf00      	nop
 8003444:	3738      	adds	r7, #56	@ 0x38
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	58024400 	.word	0x58024400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	58020000 	.word	0x58020000
 800345c:	40001400 	.word	0x40001400
 8003460:	40014000 	.word	0x40014000

08003464 <MX_TIM5_Init_ETR>:
  }
}

/* USER CODE BEGIN 1 */
void MX_TIM5_Init_ETR(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0


  TIM_SlaveConfigTypeDef sSlaveConfig ;
  TIM_MasterConfigTypeDef sMasterConfig ;

  htim5.Instance = TIM5;
 800346a:	4b20      	ldr	r3, [pc, #128]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 800346c:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <MX_TIM5_Init_ETR+0x8c>)
 800346e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003470:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 8003472:	2200      	movs	r2, #0
 8003474:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003476:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800347c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 800347e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003482:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003484:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800348a:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003490:	4816      	ldr	r0, [pc, #88]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 8003492:	f009 fbc3 	bl	800cc1c <HAL_TIM_Base_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM5_Init_ETR+0x3c>
  {
    Error_Handler();
 800349c:	f7ff f8be 	bl	800261c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80034a0:	2307      	movs	r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80034a4:	2350      	movs	r3, #80	@ 0x50
 80034a6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	4619      	mov	r1, r3
 80034b6:	480d      	ldr	r0, [pc, #52]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 80034b8:	f00a fa6a 	bl	800d990 <HAL_TIM_SlaveConfigSynchro>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM5_Init_ETR+0x62>
  {
    Error_Handler();
 80034c2:	f7ff f8ab 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034ce:	463b      	mov	r3, r7
 80034d0:	4619      	mov	r1, r3
 80034d2:	4806      	ldr	r0, [pc, #24]	@ (80034ec <MX_TIM5_Init_ETR+0x88>)
 80034d4:	f00a fe2e 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM5_Init_ETR+0x7e>
  {
    Error_Handler();
 80034de:	f7ff f89d 	bl	800261c <Error_Handler>
  }
}
 80034e2:	bf00      	nop
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	24015084 	.word	0x24015084
 80034f0:	40000c00 	.word	0x40000c00

080034f4 <MX_MyTIM15_Init>:

void MX_MyTIM15_Init(int pa)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034fc:	f107 0318 	add.w	r3, r7, #24
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003516:	4b48      	ldr	r3, [pc, #288]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003518:	4a48      	ldr	r2, [pc, #288]	@ (800363c <MX_MyTIM15_Init+0x148>)
 800351a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 21- 1;
 800351c:	4b46      	ldr	r3, [pc, #280]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 800351e:	2214      	movs	r2, #20
 8003520:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003522:	4b45      	ldr	r3, [pc, #276]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 201 - 1 ;//(401 - 1)1kHz->134 <6k|(81 - 1)5k->134 <30k|(21 -1 )20k->134 < 120k
 8003528:	4b43      	ldr	r3, [pc, #268]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 800352a:	22c8      	movs	r2, #200	@ 0xc8
 800352c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800352e:	4b42      	ldr	r3, [pc, #264]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003534:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003536:	2200      	movs	r2, #0
 8003538:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800353a:	4b3f      	ldr	r3, [pc, #252]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 800353c:	2280      	movs	r2, #128	@ 0x80
 800353e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003540:	483d      	ldr	r0, [pc, #244]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003542:	f009 fb6b 	bl	800cc1c <HAL_TIM_Base_Init>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_MyTIM15_Init+0x5c>
  {
    Error_Handler();
 800354c:	f7ff f866 	bl	800261c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003554:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003556:	f107 0318 	add.w	r3, r7, #24
 800355a:	4619      	mov	r1, r3
 800355c:	4836      	ldr	r0, [pc, #216]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 800355e:	f00a f91f 	bl	800d7a0 <HAL_TIM_ConfigClockSource>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_MyTIM15_Init+0x78>
  {
    Error_Handler();
 8003568:	f7ff f858 	bl	800261c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800356c:	2320      	movs	r3, #32
 800356e:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	4619      	mov	r1, r3
 800357a:	482f      	ldr	r0, [pc, #188]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 800357c:	f00a fdda 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_MyTIM15_Init+0x96>
  {
    Error_Handler();
 8003586:	f7ff f849 	bl	800261c <Error_Handler>
//  sprintf(str_2 , "%d" , (int)htim15.Init.Period);
//  HAL_UART_Transmit(&huart1,(uint8_t *)"TIM:" , 4 ,HAL_MAX_DELAY);
//  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7 ,HAL_MAX_DELAY);
//  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n" , 1 , HAL_MAX_DELAY);
  //__HAL_TIM_SET_AUTORELOAD(&htim15, (int)(4000000/fre));
  if (pa == 1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d113      	bne.n	80035b8 <MX_MyTIM15_Init+0xc4>
  {
	  __HAL_TIM_SET_AUTORELOAD(&htim15, 301 -1);
 8003590:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003598:	62da      	str	r2, [r3, #44]	@ 0x2c
 800359a:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 800359c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035a0:	60da      	str	r2, [r3, #12]
	  TIM15->ARR = 301 - 1;
 80035a2:	4b26      	ldr	r3, [pc, #152]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035a4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	  TIM15->CR1 &= ~TIM_CR1_ARPE;
 80035aa:	4b24      	ldr	r3, [pc, #144]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a23      	ldr	r2, [pc, #140]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035b4:	6013      	str	r3, [r2, #0]

  //htim15.Init.Period = 4000000/fre ;

  /* USER CODE END TIM15_Init 2 */

}
 80035b6:	e03a      	b.n	800362e <MX_MyTIM15_Init+0x13a>
	  if (pa == 2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d110      	bne.n	80035e0 <MX_MyTIM15_Init+0xec>
	    __HAL_TIM_SET_AUTORELOAD(&htim15, 81 -1 );
 80035be:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2250      	movs	r2, #80	@ 0x50
 80035c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 80035c8:	2250      	movs	r2, #80	@ 0x50
 80035ca:	60da      	str	r2, [r3, #12]
	    TIM15->ARR = 81 -1 ;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035ce:	2250      	movs	r2, #80	@ 0x50
 80035d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	    TIM15->CR1 &= ~TIM_CR1_ARPE;
 80035d2:	4b1a      	ldr	r3, [pc, #104]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a19      	ldr	r2, [pc, #100]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	e026      	b.n	800362e <MX_MyTIM15_Init+0x13a>
	  else if (pa == 3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d110      	bne.n	8003608 <MX_MyTIM15_Init+0x114>
	    	__HAL_TIM_SET_AUTORELOAD(&htim15, 20 -1 );
 80035e6:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2213      	movs	r2, #19
 80035ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035ee:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 80035f0:	2213      	movs	r2, #19
 80035f2:	60da      	str	r2, [r3, #12]
	    	TIM15->ARR = 20 -1 ;
 80035f4:	4b11      	ldr	r3, [pc, #68]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035f6:	2213      	movs	r2, #19
 80035f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	    	TIM15->CR1 &= ~TIM_CR1_ARPE;
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <MX_MyTIM15_Init+0x148>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a0f      	ldr	r2, [pc, #60]	@ (800363c <MX_MyTIM15_Init+0x148>)
 8003600:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	e012      	b.n	800362e <MX_MyTIM15_Init+0x13a>
	  else if (pa == 4)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d10f      	bne.n	800362e <MX_MyTIM15_Init+0x13a>
	    		__HAL_TIM_SET_AUTORELOAD(&htim15, 10 -1 );
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2209      	movs	r2, #9
 8003614:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <MX_MyTIM15_Init+0x144>)
 8003618:	2209      	movs	r2, #9
 800361a:	60da      	str	r2, [r3, #12]
	    		TIM15->ARR = 10 -1 ;
 800361c:	4b07      	ldr	r3, [pc, #28]	@ (800363c <MX_MyTIM15_Init+0x148>)
 800361e:	2209      	movs	r2, #9
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c
	    		TIM15->CR1 &= ~TIM_CR1_ARPE;
 8003622:	4b06      	ldr	r3, [pc, #24]	@ (800363c <MX_MyTIM15_Init+0x148>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a05      	ldr	r2, [pc, #20]	@ (800363c <MX_MyTIM15_Init+0x148>)
 8003628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800362c:	6013      	str	r3, [r2, #0]
}
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	@ 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2401511c 	.word	0x2401511c
 800363c:	40014000 	.word	0x40014000

08003640 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003644:	4b22      	ldr	r3, [pc, #136]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 8003646:	4a23      	ldr	r2, [pc, #140]	@ (80036d4 <MX_USART1_UART_Init+0x94>)
 8003648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800364a:	4b21      	ldr	r3, [pc, #132]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 800364c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003652:	4b1f      	ldr	r3, [pc, #124]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003658:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800365e:	4b1c      	ldr	r3, [pc, #112]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003664:	4b1a      	ldr	r3, [pc, #104]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 8003666:	220c      	movs	r2, #12
 8003668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366a:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003670:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003676:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 8003678:	2200      	movs	r2, #0
 800367a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800367c:	4b14      	ldr	r3, [pc, #80]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 800367e:	2200      	movs	r2, #0
 8003680:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003682:	4b13      	ldr	r3, [pc, #76]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 8003684:	2200      	movs	r2, #0
 8003686:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003688:	4811      	ldr	r0, [pc, #68]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 800368a:	f00a fdff 	bl	800e28c <HAL_UART_Init>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003694:	f7fe ffc2 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003698:	2100      	movs	r1, #0
 800369a:	480d      	ldr	r0, [pc, #52]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 800369c:	f00b fe8f 	bl	800f3be <HAL_UARTEx_SetTxFifoThreshold>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80036a6:	f7fe ffb9 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036aa:	2100      	movs	r1, #0
 80036ac:	4808      	ldr	r0, [pc, #32]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 80036ae:	f00b fec4 	bl	800f43a <HAL_UARTEx_SetRxFifoThreshold>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80036b8:	f7fe ffb0 	bl	800261c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80036bc:	4804      	ldr	r0, [pc, #16]	@ (80036d0 <MX_USART1_UART_Init+0x90>)
 80036be:	f00b fe45 	bl	800f34c <HAL_UARTEx_DisableFifoMode>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80036c8:	f7fe ffa8 	bl	800261c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036cc:	bf00      	nop
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	24015168 	.word	0x24015168
 80036d4:	40011000 	.word	0x40011000

080036d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0ba      	sub	sp, #232	@ 0xe8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	22c0      	movs	r2, #192	@ 0xc0
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f00c f850 	bl	800f79e <memset>
  if(uartHandle->Instance==USART1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <HAL_UART_MspInit+0xc8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d146      	bne.n	8003796 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003708:	f04f 0201 	mov.w	r2, #1
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800371a:	f107 0310 	add.w	r3, r7, #16
 800371e:	4618      	mov	r0, r3
 8003720:	f006 fd7e 	bl	800a220 <HAL_RCCEx_PeriphCLKConfig>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800372a:	f7fe ff77 	bl	800261c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800372e:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_UART_MspInit+0xcc>)
 8003730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003734:	4a1b      	ldr	r2, [pc, #108]	@ (80037a4 <HAL_UART_MspInit+0xcc>)
 8003736:	f043 0310 	orr.w	r3, r3, #16
 800373a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800373e:	4b19      	ldr	r3, [pc, #100]	@ (80037a4 <HAL_UART_MspInit+0xcc>)
 8003740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374c:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <HAL_UART_MspInit+0xcc>)
 800374e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003752:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <HAL_UART_MspInit+0xcc>)
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800375c:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_UART_MspInit+0xcc>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800376a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800376e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003784:	2304      	movs	r3, #4
 8003786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800378e:	4619      	mov	r1, r3
 8003790:	4805      	ldr	r0, [pc, #20]	@ (80037a8 <HAL_UART_MspInit+0xd0>)
 8003792:	f004 fcd5 	bl	8008140 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003796:	bf00      	nop
 8003798:	37e8      	adds	r7, #232	@ 0xe8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40011000 	.word	0x40011000
 80037a4:	58024400 	.word	0x58024400
 80037a8:	58020400 	.word	0x58020400

080037ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80037ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037b0:	f7ff fb86 	bl	8002ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037b4:	480c      	ldr	r0, [pc, #48]	@ (80037e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037b6:	490d      	ldr	r1, [pc, #52]	@ (80037ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037b8:	4a0d      	ldr	r2, [pc, #52]	@ (80037f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037bc:	e002      	b.n	80037c4 <LoopCopyDataInit>

080037be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037c2:	3304      	adds	r3, #4

080037c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c8:	d3f9      	bcc.n	80037be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ca:	4a0a      	ldr	r2, [pc, #40]	@ (80037f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037cc:	4c0a      	ldr	r4, [pc, #40]	@ (80037f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037d0:	e001      	b.n	80037d6 <LoopFillZerobss>

080037d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d4:	3204      	adds	r2, #4

080037d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d8:	d3fb      	bcc.n	80037d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037da:	f00c f835 	bl	800f848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037de:	f7fe fbf1 	bl	8001fc4 <main>
  bx  lr
 80037e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80037e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80037ec:	24000928 	.word	0x24000928
  ldr r2, =_sidata
 80037f0:	08017d04 	.word	0x08017d04
  ldr r2, =_sbss
 80037f4:	24004940 	.word	0x24004940
  ldr r4, =_ebss
 80037f8:	2401550c 	.word	0x2401550c

080037fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037fc:	e7fe      	b.n	80037fc <ADC3_IRQHandler>
	...

08003800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003806:	2003      	movs	r0, #3
 8003808:	f001 fff0 	bl	80057ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800380c:	f006 fb32 	bl	8009e74 <HAL_RCC_GetSysClockFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <HAL_Init+0x68>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	4913      	ldr	r1, [pc, #76]	@ (800386c <HAL_Init+0x6c>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800382a:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <HAL_Init+0x68>)
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	4a0e      	ldr	r2, [pc, #56]	@ (800386c <HAL_Init+0x6c>)
 8003834:	5cd3      	ldrb	r3, [r2, r3]
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	4a0b      	ldr	r2, [pc, #44]	@ (8003870 <HAL_Init+0x70>)
 8003842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003844:	4a0b      	ldr	r2, [pc, #44]	@ (8003874 <HAL_Init+0x74>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800384a:	200f      	movs	r0, #15
 800384c:	f000 f814 	bl	8003878 <HAL_InitTick>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e002      	b.n	8003860 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800385a:	f7ff f9f9 	bl	8002c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	58024400 	.word	0x58024400
 800386c:	08015608 	.word	0x08015608
 8003870:	2400026c 	.word	0x2400026c
 8003874:	24000268 	.word	0x24000268

08003878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003880:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <HAL_InitTick+0x60>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e021      	b.n	80038d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800388c:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <HAL_InitTick+0x64>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_InitTick+0x60>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800389a:	fbb3 f3f1 	udiv	r3, r3, r1
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 ffd5 	bl	8005852 <HAL_SYSTICK_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00e      	b.n	80038d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b0f      	cmp	r3, #15
 80038b6:	d80a      	bhi.n	80038ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b8:	2200      	movs	r2, #0
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038c0:	f001 ff9f 	bl	8005802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038c4:	4a06      	ldr	r2, [pc, #24]	@ (80038e0 <HAL_InitTick+0x68>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	24000274 	.word	0x24000274
 80038dc:	24000268 	.word	0x24000268
 80038e0:	24000270 	.word	0x24000270

080038e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_IncTick+0x20>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_IncTick+0x24>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4413      	add	r3, r2
 80038f4:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <HAL_IncTick+0x24>)
 80038f6:	6013      	str	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	24000274 	.word	0x24000274
 8003908:	240151fc 	.word	0x240151fc

0800390c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return uwTick;
 8003910:	4b03      	ldr	r3, [pc, #12]	@ (8003920 <HAL_GetTick+0x14>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	240151fc 	.word	0x240151fc

08003924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800392c:	f7ff ffee 	bl	800390c <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800393c:	d005      	beq.n	800394a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <HAL_Delay+0x44>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800394a:	bf00      	nop
 800394c:	f7ff ffde 	bl	800390c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	429a      	cmp	r2, r3
 800395a:	d8f7      	bhi.n	800394c <HAL_Delay+0x28>
  {
  }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	24000274 	.word	0x24000274

0800396c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <HAL_GetREVID+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	0c1b      	lsrs	r3, r3, #16
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	5c001000 	.word	0x5c001000

08003984 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3360      	adds	r3, #96	@ 0x60
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	611a      	str	r2, [r3, #16]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b087      	sub	sp, #28
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3360      	adds	r3, #96	@ 0x60
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	601a      	str	r2, [r3, #0]
  }
}
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b087      	sub	sp, #28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3330      	adds	r3, #48	@ 0x30
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	4413      	add	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	211f      	movs	r1, #31
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	401a      	ands	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0e9b      	lsrs	r3, r3, #26
 8003af2:	f003 011f 	and.w	r1, r3, #31
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	431a      	orrs	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f023 0203 	bic.w	r2, r3, #3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3314      	adds	r3, #20
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	0e5b      	lsrs	r3, r3, #25
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	4413      	add	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	0d1b      	lsrs	r3, r3, #20
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2107      	movs	r1, #7
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	401a      	ands	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	0d1b      	lsrs	r3, r3, #20
 8003b72:	f003 031f 	and.w	r3, r3, #31
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0318 	and.w	r3, r3, #24
 8003bb2:	4908      	ldr	r1, [pc, #32]	@ (8003bd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bb4:	40d9      	lsrs	r1, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	400b      	ands	r3, r1
 8003bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	000fffff 	.word	0x000fffff

08003bd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 031f 	and.w	r3, r3, #31
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6093      	str	r3, [r2, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	5fffffc0 	.word	0x5fffffc0

08003c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c2c:	d101      	bne.n	8003c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	6fffffc0 	.word	0x6fffffc0

08003c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c7c:	d101      	bne.n	8003c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <LL_ADC_Enable+0x24>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	7fffffc0 	.word	0x7fffffc0

08003cb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <LL_ADC_Disable+0x24>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	f043 0202 	orr.w	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	7fffffc0 	.word	0x7fffffc0

08003ce0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <LL_ADC_IsEnabled+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <LL_ADC_IsEnabled+0x1a>
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d101      	bne.n	8003d1e <LL_ADC_IsDisableOngoing+0x18>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_ADC_IsDisableOngoing+0x1a>
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <LL_ADC_REG_StartConversion+0x24>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	7fffffc0 	.word	0x7fffffc0

08003d54 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <LL_ADC_REG_StopConversion+0x24>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	f043 0210 	orr.w	r2, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	7fffffc0 	.word	0x7fffffc0

08003d7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d101      	bne.n	8003d94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <LL_ADC_INJ_StopConversion+0x24>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	7fffffc0 	.word	0x7fffffc0

08003dcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d101      	bne.n	8003de4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b089      	sub	sp, #36	@ 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e18f      	b.n	800412e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fd f9c1 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff feef 	bl	8003c18 <LL_ADC_IsDeepPowerDownEnabled>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fed5 	bl	8003bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff0a 	bl	8003c68 <LL_ADC_IsInternalRegulatorEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d114      	bne.n	8003e84 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff feee 	bl	8003c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e64:	4b87      	ldr	r3, [pc, #540]	@ (8004084 <HAL_ADC_Init+0x290>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	4a87      	ldr	r2, [pc, #540]	@ (8004088 <HAL_ADC_Init+0x294>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	099b      	lsrs	r3, r3, #6
 8003e72:	3301      	adds	r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e76:	e002      	b.n	8003e7e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f9      	bne.n	8003e78 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff feed 	bl	8003c68 <LL_ADC_IsInternalRegulatorEnabled>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e98:	f043 0210 	orr.w	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff61 	bl	8003d7c <LL_ADC_REG_IsConversionOngoing>
 8003eba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 8129 	bne.w	800411c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f040 8125 	bne.w	800411c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fefa 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d136      	bne.n	8003f60 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a65      	ldr	r2, [pc, #404]	@ (800408c <HAL_ADC_Init+0x298>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_ADC_Init+0x112>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a63      	ldr	r2, [pc, #396]	@ (8004090 <HAL_ADC_Init+0x29c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10e      	bne.n	8003f24 <HAL_ADC_Init+0x130>
 8003f06:	4861      	ldr	r0, [pc, #388]	@ (800408c <HAL_ADC_Init+0x298>)
 8003f08:	f7ff feea 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	4860      	ldr	r0, [pc, #384]	@ (8004090 <HAL_ADC_Init+0x29c>)
 8003f10:	f7ff fee6 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4323      	orrs	r3, r4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e008      	b.n	8003f36 <HAL_ADC_Init+0x142>
 8003f24:	485b      	ldr	r0, [pc, #364]	@ (8004094 <HAL_ADC_Init+0x2a0>)
 8003f26:	f7ff fedb 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a53      	ldr	r2, [pc, #332]	@ (800408c <HAL_ADC_Init+0x298>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_ADC_Init+0x15a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a51      	ldr	r2, [pc, #324]	@ (8004090 <HAL_ADC_Init+0x29c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_Init+0x15e>
 8003f4e:	4a52      	ldr	r2, [pc, #328]	@ (8004098 <HAL_ADC_Init+0x2a4>)
 8003f50:	e000      	b.n	8003f54 <HAL_ADC_Init+0x160>
 8003f52:	4a52      	ldr	r2, [pc, #328]	@ (800409c <HAL_ADC_Init+0x2a8>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7ff fd12 	bl	8003984 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003f60:	f7ff fd04 	bl	800396c <HAL_GetREVID>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d914      	bls.n	8003f98 <HAL_ADC_Init+0x1a4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d110      	bne.n	8003f98 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7d5b      	ldrb	r3, [r3, #21]
 8003f7a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f80:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7f1b      	ldrb	r3, [r3, #28]
 8003f8c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003f8e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f90:	f043 030c 	orr.w	r3, r3, #12
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e00d      	b.n	8003fb4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7d5b      	ldrb	r3, [r3, #21]
 8003f9c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fa2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003fa8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7f1b      	ldrb	r3, [r3, #28]
 8003fae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	7f1b      	ldrb	r3, [r3, #28]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d106      	bne.n	8003fca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	045b      	lsls	r3, r3, #17
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	4b2c      	ldr	r3, [pc, #176]	@ (80040a0 <HAL_ADC_Init+0x2ac>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff febc 	bl	8003d7c <LL_ADC_REG_IsConversionOngoing>
 8004004:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fede 	bl	8003dcc <LL_ADC_INJ_IsConversionOngoing>
 8004010:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d15f      	bne.n	80040d8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d15c      	bne.n	80040d8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7d1b      	ldrb	r3, [r3, #20]
 8004022:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	4b1c      	ldr	r3, [pc, #112]	@ (80040a4 <HAL_ADC_Init+0x2b0>)
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	430b      	orrs	r3, r1
 800403e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004046:	2b01      	cmp	r3, #1
 8004048:	d130      	bne.n	80040ac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <HAL_ADC_Init+0x2b4>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800405e:	3a01      	subs	r2, #1
 8004060:	0411      	lsls	r1, r2, #16
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004072:	430a      	orrs	r2, r1
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	611a      	str	r2, [r3, #16]
 8004080:	e01c      	b.n	80040bc <HAL_ADC_Init+0x2c8>
 8004082:	bf00      	nop
 8004084:	24000268 	.word	0x24000268
 8004088:	053e2d63 	.word	0x053e2d63
 800408c:	40022000 	.word	0x40022000
 8004090:	40022100 	.word	0x40022100
 8004094:	58026000 	.word	0x58026000
 8004098:	40022300 	.word	0x40022300
 800409c:	58026300 	.word	0x58026300
 80040a0:	fff0c003 	.word	0xfff0c003
 80040a4:	ffffbffc 	.word	0xffffbffc
 80040a8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f001 f812 	bl	80050fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d10c      	bne.n	80040fa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	f023 010f 	bic.w	r1, r3, #15
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80040f8:	e007      	b.n	800410a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 020f 	bic.w	r2, r2, #15
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	655a      	str	r2, [r3, #84]	@ 0x54
 800411a:	e007      	b.n	800412c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	f043 0210 	orr.w	r2, r3, #16
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800412c:	7ffb      	ldrb	r3, [r7, #31]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3724      	adds	r7, #36	@ 0x24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd90      	pop	{r4, r7, pc}
 8004136:	bf00      	nop

08004138 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e16e      	b.n	8004428 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f043 0202 	orr.w	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004156:	2103      	movs	r1, #3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fd95 	bl	8004c88 <ADC_ConversionStop>
 800415e:	4603      	mov	r3, r0
 8004160:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004170:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fecb 	bl	8004f14 <ADC_Disable>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b8c      	ldr	r3, [pc, #560]	@ (80043cc <HAL_ADC_DeInit+0x294>)
 800419a:	400b      	ands	r3, r1
 800419c:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80041a6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 80041b6:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80041c6:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 80041d6:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80041e6:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6919      	ldr	r1, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b77      	ldr	r3, [pc, #476]	@ (80043d0 <HAL_ADC_DeInit+0x298>)
 80041f4:	400b      	ands	r3, r1
 80041f6:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8004206:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8004216:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004226:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004248:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800425c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004270:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004284:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b50      	ldr	r3, [pc, #320]	@ (80043d4 <HAL_ADC_DeInit+0x29c>)
 8004294:	400b      	ands	r3, r1
 8004296:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b4d      	ldr	r3, [pc, #308]	@ (80043d8 <HAL_ADC_DeInit+0x2a0>)
 80042a4:	400b      	ands	r3, r1
 80042a6:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b49      	ldr	r3, [pc, #292]	@ (80043d8 <HAL_ADC_DeInit+0x2a0>)
 80042b4:	400b      	ands	r3, r1
 80042b6:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b46      	ldr	r3, [pc, #280]	@ (80043dc <HAL_ADC_DeInit+0x2a4>)
 80042c4:	400b      	ands	r3, r1
 80042c6:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b34      	ldr	r3, [pc, #208]	@ (80043e0 <HAL_ADC_DeInit+0x2a8>)
 800430e:	400b      	ands	r3, r1
 8004310:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <HAL_ADC_DeInit+0x2a8>)
 8004322:	400b      	ands	r3, r1
 8004324:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <HAL_ADC_DeInit+0x2a8>)
 8004336:	400b      	ands	r3, r1
 8004338:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 800434c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a23      	ldr	r2, [pc, #140]	@ (80043e4 <HAL_ADC_DeInit+0x2ac>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_ADC_DeInit+0x22c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a22      	ldr	r2, [pc, #136]	@ (80043e8 <HAL_ADC_DeInit+0x2b0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10e      	bne.n	8004382 <HAL_ADC_DeInit+0x24a>
 8004364:	481f      	ldr	r0, [pc, #124]	@ (80043e4 <HAL_ADC_DeInit+0x2ac>)
 8004366:	f7ff fcbb 	bl	8003ce0 <LL_ADC_IsEnabled>
 800436a:	4604      	mov	r4, r0
 800436c:	481e      	ldr	r0, [pc, #120]	@ (80043e8 <HAL_ADC_DeInit+0x2b0>)
 800436e:	f7ff fcb7 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004372:	4603      	mov	r3, r0
 8004374:	4323      	orrs	r3, r4
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e008      	b.n	8004394 <HAL_ADC_DeInit+0x25c>
 8004382:	481a      	ldr	r0, [pc, #104]	@ (80043ec <HAL_ADC_DeInit+0x2b4>)
 8004384:	f7ff fcac 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	bf0c      	ite	eq
 800438e:	2301      	moveq	r3, #1
 8004390:	2300      	movne	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d036      	beq.n	8004406 <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a11      	ldr	r2, [pc, #68]	@ (80043e4 <HAL_ADC_DeInit+0x2ac>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_ADC_DeInit+0x274>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a10      	ldr	r2, [pc, #64]	@ (80043e8 <HAL_ADC_DeInit+0x2b0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <HAL_ADC_DeInit+0x278>
 80043ac:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <HAL_ADC_DeInit+0x2b8>)
 80043ae:	e000      	b.n	80043b2 <HAL_ADC_DeInit+0x27a>
 80043b0:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <HAL_ADC_DeInit+0x2bc>)
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <HAL_ADC_DeInit+0x2ac>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_ADC_DeInit+0x290>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <HAL_ADC_DeInit+0x2b0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d117      	bne.n	80043f8 <HAL_ADC_DeInit+0x2c0>
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <HAL_ADC_DeInit+0x2b8>)
 80043ca:	e016      	b.n	80043fa <HAL_ADC_DeInit+0x2c2>
 80043cc:	fffff800 	.word	0xfffff800
 80043d0:	fc00f81c 	.word	0xfc00f81c
 80043d4:	e0820830 	.word	0xe0820830
 80043d8:	e0820820 	.word	0xe0820820
 80043dc:	fffff820 	.word	0xfffff820
 80043e0:	fff00000 	.word	0xfff00000
 80043e4:	40022000 	.word	0x40022000
 80043e8:	40022100 	.word	0x40022100
 80043ec:	58026000 	.word	0x58026000
 80043f0:	40022300 	.word	0x40022300
 80043f4:	58026300 	.word	0x58026300
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <HAL_ADC_DeInit+0x2f8>)
 80043fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004434 <HAL_ADC_DeInit+0x2fc>)
 80043fc:	400b      	ands	r3, r1
 80043fe:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fc ff75 	bl	80012f0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	58026300 	.word	0x58026300
 8004434:	fe0030e0 	.word	0xfe0030e0

08004438 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a55      	ldr	r2, [pc, #340]	@ (80045a0 <HAL_ADC_Start_DMA+0x168>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_ADC_Start_DMA+0x20>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a54      	ldr	r2, [pc, #336]	@ (80045a4 <HAL_ADC_Start_DMA+0x16c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d101      	bne.n	800445c <HAL_ADC_Start_DMA+0x24>
 8004458:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <HAL_ADC_Start_DMA+0x170>)
 800445a:	e000      	b.n	800445e <HAL_ADC_Start_DMA+0x26>
 800445c:	4b53      	ldr	r3, [pc, #332]	@ (80045ac <HAL_ADC_Start_DMA+0x174>)
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fbba 	bl	8003bd8 <LL_ADC_GetMultimode>
 8004464:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fc86 	bl	8003d7c <LL_ADC_REG_IsConversionOngoing>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	f040 808c 	bne.w	8004590 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_ADC_Start_DMA+0x4e>
 8004482:	2302      	movs	r3, #2
 8004484:	e087      	b.n	8004596 <HAL_ADC_Start_DMA+0x15e>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d002      	beq.n	80044a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b09      	cmp	r3, #9
 800449e:	d170      	bne.n	8004582 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fcad 	bl	8004e00 <ADC_Enable>
 80044a6:	4603      	mov	r3, r0
 80044a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d163      	bne.n	8004578 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044b4:	4b3e      	ldr	r3, [pc, #248]	@ (80045b0 <HAL_ADC_Start_DMA+0x178>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a37      	ldr	r2, [pc, #220]	@ (80045a4 <HAL_ADC_Start_DMA+0x16c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d002      	beq.n	80044d0 <HAL_ADC_Start_DMA+0x98>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	e000      	b.n	80044d2 <HAL_ADC_Start_DMA+0x9a>
 80044d0:	4b33      	ldr	r3, [pc, #204]	@ (80045a0 <HAL_ADC_Start_DMA+0x168>)
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d002      	beq.n	80044e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d006      	beq.n	8004506 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fc:	f023 0206 	bic.w	r2, r3, #6
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	659a      	str	r2, [r3, #88]	@ 0x58
 8004504:	e002      	b.n	800450c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004510:	4a28      	ldr	r2, [pc, #160]	@ (80045b4 <HAL_ADC_Start_DMA+0x17c>)
 8004512:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004518:	4a27      	ldr	r2, [pc, #156]	@ (80045b8 <HAL_ADC_Start_DMA+0x180>)
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004520:	4a26      	ldr	r2, [pc, #152]	@ (80045bc <HAL_ADC_Start_DMA+0x184>)
 8004522:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	221c      	movs	r2, #28
 800452a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0210 	orr.w	r2, r2, #16
 8004542:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f7ff fadf 	bl	8003b12 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3340      	adds	r3, #64	@ 0x40
 800455e:	4619      	mov	r1, r3
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f002 f870 	bl	8006648 <HAL_DMA_Start_IT>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fbdb 	bl	8003d2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004576:	e00d      	b.n	8004594 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8004580:	e008      	b.n	8004594 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800458e:	e001      	b.n	8004594 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40022000 	.word	0x40022000
 80045a4:	40022100 	.word	0x40022100
 80045a8:	40022300 	.word	0x40022300
 80045ac:	58026300 	.word	0x58026300
 80045b0:	fffff0fe 	.word	0xfffff0fe
 80045b4:	08004fd3 	.word	0x08004fd3
 80045b8:	080050ab 	.word	0x080050ab
 80045bc:	080050c7 	.word	0x080050c7

080045c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b0a1      	sub	sp, #132	@ 0x84
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a9d      	ldr	r2, [pc, #628]	@ (8004878 <HAL_ADC_ConfigChannel+0x290>)
 8004602:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x2a>
 800460e:	2302      	movs	r3, #2
 8004610:	e321      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x66e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fbac 	bl	8003d7c <LL_ADC_REG_IsConversionOngoing>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8306 	bne.w	8004c38 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004634:	2b00      	cmp	r3, #0
 8004636:	d108      	bne.n	800464a <HAL_ADC_ConfigChannel+0x62>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0e9b      	lsrs	r3, r3, #26
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	2201      	movs	r2, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	e016      	b.n	8004678 <HAL_ADC_ConfigChannel+0x90>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004658:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800465a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800465c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004662:	2320      	movs	r3, #32
 8004664:	e003      	b.n	800466e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004668:	fab3 f383 	clz	r3, r3
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	2201      	movs	r2, #1
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	69d1      	ldr	r1, [r2, #28]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	430b      	orrs	r3, r1
 8004684:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7ff fa11 	bl	8003aba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fb6d 	bl	8003d7c <LL_ADC_REG_IsConversionOngoing>
 80046a2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fb8f 	bl	8003dcc <LL_ADC_INJ_IsConversionOngoing>
 80046ae:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 80b3 	bne.w	800481e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 80af 	bne.w	800481e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	461a      	mov	r2, r3
 80046ce:	f7ff fa33 	bl	8003b38 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046d2:	4b6a      	ldr	r3, [pc, #424]	@ (800487c <HAL_ADC_ConfigChannel+0x294>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80046da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046de:	d10b      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x110>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	e01d      	b.n	8004734 <HAL_ADC_ConfigChannel+0x14c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <HAL_ADC_ConfigChannel+0x136>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	e00a      	b.n	8004734 <HAL_ADC_ConfigChannel+0x14c>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b04      	cmp	r3, #4
 800473c:	d027      	beq.n	800478e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6919      	ldr	r1, [r3, #16]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800474c:	f7ff f94e 	bl	80039ec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6919      	ldr	r1, [r3, #16]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	7e5b      	ldrb	r3, [r3, #25]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d102      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x17e>
 8004760:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004764:	e000      	b.n	8004768 <HAL_ADC_ConfigChannel+0x180>
 8004766:	2300      	movs	r3, #0
 8004768:	461a      	mov	r2, r3
 800476a:	f7ff f978 	bl	8003a5e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6919      	ldr	r1, [r3, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	7e1b      	ldrb	r3, [r3, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d102      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x19c>
 800477e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004782:	e000      	b.n	8004786 <HAL_ADC_ConfigChannel+0x19e>
 8004784:	2300      	movs	r3, #0
 8004786:	461a      	mov	r2, r3
 8004788:	f7ff f950 	bl	8003a2c <LL_ADC_SetDataRightShift>
 800478c:	e047      	b.n	800481e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004794:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	069b      	lsls	r3, r3, #26
 800479e:	429a      	cmp	r2, r3
 80047a0:	d107      	bne.n	80047b2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80047b0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	069b      	lsls	r3, r3, #26
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d107      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80047d4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	069b      	lsls	r3, r3, #26
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d107      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80047f8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	069b      	lsls	r3, r3, #26
 800480a:	429a      	cmp	r2, r3
 800480c:	d107      	bne.n	800481e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800481c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fa5c 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 820d 	bne.w	8004c4a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6819      	ldr	r1, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	461a      	mov	r2, r3
 800483e:	f7ff f9a7 	bl	8003b90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	4a0c      	ldr	r2, [pc, #48]	@ (8004878 <HAL_ADC_ConfigChannel+0x290>)
 8004848:	4293      	cmp	r3, r2
 800484a:	f040 8133 	bne.w	8004ab4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800485a:	2b00      	cmp	r3, #0
 800485c:	d110      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x298>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	0e9b      	lsrs	r3, r3, #26
 8004864:	3301      	adds	r3, #1
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2b09      	cmp	r3, #9
 800486c:	bf94      	ite	ls
 800486e:	2301      	movls	r3, #1
 8004870:	2300      	movhi	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e01e      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x2cc>
 8004876:	bf00      	nop
 8004878:	47ff0000 	.word	0x47ff0000
 800487c:	5c001000 	.word	0x5c001000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800488e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004890:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004898:	2320      	movs	r3, #32
 800489a:	e003      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800489c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2b09      	cmp	r3, #9
 80048ac:	bf94      	ite	ls
 80048ae:	2301      	movls	r3, #1
 80048b0:	2300      	movhi	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d079      	beq.n	80049ac <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d107      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x2ec>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	3301      	adds	r3, #1
 80048cc:	069b      	lsls	r3, r3, #26
 80048ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048d2:	e015      	b.n	8004900 <HAL_ADC_ConfigChannel+0x318>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80048e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80048ec:	2320      	movs	r3, #32
 80048ee:	e003      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80048f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	3301      	adds	r3, #1
 80048fa:	069b      	lsls	r3, r3, #26
 80048fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x338>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	3301      	adds	r3, #1
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2101      	movs	r1, #1
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	e017      	b.n	8004950 <HAL_ADC_ConfigChannel+0x368>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800492e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004930:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004938:	2320      	movs	r3, #32
 800493a:	e003      	b.n	8004944 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800493c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800493e:	fab3 f383 	clz	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	3301      	adds	r3, #1
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	ea42 0103 	orr.w	r1, r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x38e>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	3301      	adds	r3, #1
 8004968:	f003 021f 	and.w	r2, r3, #31
 800496c:	4613      	mov	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	051b      	lsls	r3, r3, #20
 8004974:	e018      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x3c0>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800498e:	2320      	movs	r3, #32
 8004990:	e003      	b.n	800499a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004994:	fab3 f383 	clz	r3, r3
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3301      	adds	r3, #1
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	4613      	mov	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	4413      	add	r3, r2
 80049a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a8:	430b      	orrs	r3, r1
 80049aa:	e07e      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x3e0>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0e9b      	lsrs	r3, r3, #26
 80049be:	3301      	adds	r3, #1
 80049c0:	069b      	lsls	r3, r3, #26
 80049c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049c6:	e015      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x40c>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80049da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e003      	b.n	80049ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	069b      	lsls	r3, r3, #26
 80049f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x42c>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	3301      	adds	r3, #1
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	e017      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x45c>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	61bb      	str	r3, [r7, #24]
  return result;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e003      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	ea42 0103 	orr.w	r1, r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10d      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x488>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0e9b      	lsrs	r3, r3, #26
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f003 021f 	and.w	r2, r3, #31
 8004a60:	4613      	mov	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	3b1e      	subs	r3, #30
 8004a68:	051b      	lsls	r3, r3, #20
 8004a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	e01b      	b.n	8004aa8 <HAL_ADC_ConfigChannel+0x4c0>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	60fb      	str	r3, [r7, #12]
  return result;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e003      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	f003 021f 	and.w	r2, r3, #31
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3b1e      	subs	r3, #30
 8004aa2:	051b      	lsls	r3, r3, #20
 8004aa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f7ff f842 	bl	8003b38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f280 80c6 	bge.w	8004c4a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a67      	ldr	r2, [pc, #412]	@ (8004c60 <HAL_ADC_ConfigChannel+0x678>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_ADC_ConfigChannel+0x4ea>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a65      	ldr	r2, [pc, #404]	@ (8004c64 <HAL_ADC_ConfigChannel+0x67c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x4ee>
 8004ad2:	4b65      	ldr	r3, [pc, #404]	@ (8004c68 <HAL_ADC_ConfigChannel+0x680>)
 8004ad4:	e000      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x4f0>
 8004ad6:	4b65      	ldr	r3, [pc, #404]	@ (8004c6c <HAL_ADC_ConfigChannel+0x684>)
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fe ff79 	bl	80039d0 <LL_ADC_GetCommonPathInternalCh>
 8004ade:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c60 <HAL_ADC_ConfigChannel+0x678>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_ADC_ConfigChannel+0x50c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a5d      	ldr	r2, [pc, #372]	@ (8004c64 <HAL_ADC_ConfigChannel+0x67c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d10e      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x52a>
 8004af4:	485a      	ldr	r0, [pc, #360]	@ (8004c60 <HAL_ADC_ConfigChannel+0x678>)
 8004af6:	f7ff f8f3 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004afa:	4604      	mov	r4, r0
 8004afc:	4859      	ldr	r0, [pc, #356]	@ (8004c64 <HAL_ADC_ConfigChannel+0x67c>)
 8004afe:	f7ff f8ef 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4323      	orrs	r3, r4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e008      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x53c>
 8004b12:	4857      	ldr	r0, [pc, #348]	@ (8004c70 <HAL_ADC_ConfigChannel+0x688>)
 8004b14:	f7ff f8e4 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d07d      	beq.n	8004c24 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a51      	ldr	r2, [pc, #324]	@ (8004c74 <HAL_ADC_ConfigChannel+0x68c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d130      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x5ac>
 8004b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d12b      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a4b      	ldr	r2, [pc, #300]	@ (8004c70 <HAL_ADC_ConfigChannel+0x688>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	f040 8081 	bne.w	8004c4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a44      	ldr	r2, [pc, #272]	@ (8004c60 <HAL_ADC_ConfigChannel+0x678>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_ADC_ConfigChannel+0x574>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a43      	ldr	r2, [pc, #268]	@ (8004c64 <HAL_ADC_ConfigChannel+0x67c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x578>
 8004b5c:	4a42      	ldr	r2, [pc, #264]	@ (8004c68 <HAL_ADC_ConfigChannel+0x680>)
 8004b5e:	e000      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x57a>
 8004b60:	4a42      	ldr	r2, [pc, #264]	@ (8004c6c <HAL_ADC_ConfigChannel+0x684>)
 8004b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7fe ff1d 	bl	80039aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b70:	4b41      	ldr	r3, [pc, #260]	@ (8004c78 <HAL_ADC_ConfigChannel+0x690>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	4a41      	ldr	r2, [pc, #260]	@ (8004c7c <HAL_ADC_ConfigChannel+0x694>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	3301      	adds	r3, #1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004b84:	e002      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f9      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b92:	e05a      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a39      	ldr	r2, [pc, #228]	@ (8004c80 <HAL_ADC_ConfigChannel+0x698>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d11e      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x5f4>
 8004b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d119      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a30      	ldr	r2, [pc, #192]	@ (8004c70 <HAL_ADC_ConfigChannel+0x688>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d14b      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004c60 <HAL_ADC_ConfigChannel+0x678>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_ADC_ConfigChannel+0x5de>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a28      	ldr	r2, [pc, #160]	@ (8004c64 <HAL_ADC_ConfigChannel+0x67c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d101      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x5e2>
 8004bc6:	4a28      	ldr	r2, [pc, #160]	@ (8004c68 <HAL_ADC_ConfigChannel+0x680>)
 8004bc8:	e000      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x5e4>
 8004bca:	4a28      	ldr	r2, [pc, #160]	@ (8004c6c <HAL_ADC_ConfigChannel+0x684>)
 8004bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f7fe fee8 	bl	80039aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bda:	e036      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a28      	ldr	r2, [pc, #160]	@ (8004c84 <HAL_ADC_ConfigChannel+0x69c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d131      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
 8004be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d12c      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c70 <HAL_ADC_ConfigChannel+0x688>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d127      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <HAL_ADC_ConfigChannel+0x678>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_ADC_ConfigChannel+0x626>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a16      	ldr	r2, [pc, #88]	@ (8004c64 <HAL_ADC_ConfigChannel+0x67c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x62a>
 8004c0e:	4a16      	ldr	r2, [pc, #88]	@ (8004c68 <HAL_ADC_ConfigChannel+0x680>)
 8004c10:	e000      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x62c>
 8004c12:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <HAL_ADC_ConfigChannel+0x684>)
 8004c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fe fec4 	bl	80039aa <LL_ADC_SetCommonPathInternalCh>
 8004c22:	e012      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004c36:	e008      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3784      	adds	r7, #132	@ 0x84
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40022000 	.word	0x40022000
 8004c64:	40022100 	.word	0x40022100
 8004c68:	40022300 	.word	0x40022300
 8004c6c:	58026300 	.word	0x58026300
 8004c70:	58026000 	.word	0x58026000
 8004c74:	cb840000 	.word	0xcb840000
 8004c78:	24000268 	.word	0x24000268
 8004c7c:	053e2d63 	.word	0x053e2d63
 8004c80:	c7520000 	.word	0xc7520000
 8004c84:	cfb80000 	.word	0xcfb80000

08004c88 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff f86c 	bl	8003d7c <LL_ADC_REG_IsConversionOngoing>
 8004ca4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f88e 	bl	8003dcc <LL_ADC_INJ_IsConversionOngoing>
 8004cb0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8098 	beq.w	8004df0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d02a      	beq.n	8004d24 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7d5b      	ldrb	r3, [r3, #21]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d126      	bne.n	8004d24 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	7d1b      	ldrb	r3, [r3, #20]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d122      	bne.n	8004d24 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004ce2:	e014      	b.n	8004d0e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	4a45      	ldr	r2, [pc, #276]	@ (8004dfc <ADC_ConversionStop+0x174>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d90d      	bls.n	8004d08 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf0:	f043 0210 	orr.w	r2, r3, #16
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfc:	f043 0201 	orr.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e074      	b.n	8004df2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b40      	cmp	r3, #64	@ 0x40
 8004d1a:	d1e3      	bne.n	8004ce4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2240      	movs	r2, #64	@ 0x40
 8004d22:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d014      	beq.n	8004d54 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff f824 	bl	8003d7c <LL_ADC_REG_IsConversionOngoing>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe ffe1 	bl	8003d06 <LL_ADC_IsDisableOngoing>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f800 	bl	8003d54 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d014      	beq.n	8004d84 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff f834 	bl	8003dcc <LL_ADC_INJ_IsConversionOngoing>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe ffc9 	bl	8003d06 <LL_ADC_IsDisableOngoing>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff f810 	bl	8003da4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d005      	beq.n	8004d96 <ADC_ConversionStop+0x10e>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d105      	bne.n	8004d9c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004d90:	230c      	movs	r3, #12
 8004d92:	617b      	str	r3, [r7, #20]
        break;
 8004d94:	e005      	b.n	8004da2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004d96:	2308      	movs	r3, #8
 8004d98:	617b      	str	r3, [r7, #20]
        break;
 8004d9a:	e002      	b.n	8004da2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	617b      	str	r3, [r7, #20]
        break;
 8004da0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004da2:	f7fe fdb3 	bl	800390c <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004da8:	e01b      	b.n	8004de2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004daa:	f7fe fdaf 	bl	800390c <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	d914      	bls.n	8004de2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dca:	f043 0210 	orr.w	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e007      	b.n	8004df2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1dc      	bne.n	8004daa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	000cdbff 	.word	0x000cdbff

08004e00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fe ff67 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d16e      	bne.n	8004ef6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	4b38      	ldr	r3, [pc, #224]	@ (8004f00 <ADC_Enable+0x100>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2a:	f043 0210 	orr.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e36:	f043 0201 	orr.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e05a      	b.n	8004ef8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe ff22 	bl	8003c90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e4c:	f7fe fd5e 	bl	800390c <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2b      	ldr	r2, [pc, #172]	@ (8004f04 <ADC_Enable+0x104>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <ADC_Enable+0x66>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a29      	ldr	r2, [pc, #164]	@ (8004f08 <ADC_Enable+0x108>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <ADC_Enable+0x6a>
 8004e66:	4b29      	ldr	r3, [pc, #164]	@ (8004f0c <ADC_Enable+0x10c>)
 8004e68:	e000      	b.n	8004e6c <ADC_Enable+0x6c>
 8004e6a:	4b29      	ldr	r3, [pc, #164]	@ (8004f10 <ADC_Enable+0x110>)
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe feb3 	bl	8003bd8 <LL_ADC_GetMultimode>
 8004e72:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a23      	ldr	r2, [pc, #140]	@ (8004f08 <ADC_Enable+0x108>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d002      	beq.n	8004e84 <ADC_Enable+0x84>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	e000      	b.n	8004e86 <ADC_Enable+0x86>
 8004e84:	4b1f      	ldr	r3, [pc, #124]	@ (8004f04 <ADC_Enable+0x104>)
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02c      	beq.n	8004ee8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d130      	bne.n	8004ef6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e94:	e028      	b.n	8004ee8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe ff20 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fef0 	bl	8003c90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004eb0:	f7fe fd2c 	bl	800390c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d914      	bls.n	8004ee8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d00d      	beq.n	8004ee8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed0:	f043 0210 	orr.w	r2, r3, #16
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004edc:	f043 0201 	orr.w	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e007      	b.n	8004ef8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d1cf      	bne.n	8004e96 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	8000003f 	.word	0x8000003f
 8004f04:	40022000 	.word	0x40022000
 8004f08:	40022100 	.word	0x40022100
 8004f0c:	40022300 	.word	0x40022300
 8004f10:	58026300 	.word	0x58026300

08004f14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fef0 	bl	8003d06 <LL_ADC_IsDisableOngoing>
 8004f26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fed7 	bl	8003ce0 <LL_ADC_IsEnabled>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d047      	beq.n	8004fc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d144      	bne.n	8004fc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030d 	and.w	r3, r3, #13
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d10c      	bne.n	8004f66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe feb1 	bl	8003cb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f5e:	f7fe fcd5 	bl	800390c <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f64:	e029      	b.n	8004fba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6a:	f043 0210 	orr.w	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f76:	f043 0201 	orr.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e023      	b.n	8004fca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f82:	f7fe fcc3 	bl	800390c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d914      	bls.n	8004fba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa2:	f043 0210 	orr.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e007      	b.n	8004fca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1dc      	bne.n	8004f82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d14b      	bne.n	8005084 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d021      	beq.n	800504a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fd42 	bl	8003a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d032      	beq.n	800507c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d12b      	bne.n	800507c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005034:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11f      	bne.n	800507c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	f043 0201 	orr.w	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	655a      	str	r2, [r3, #84]	@ 0x54
 8005048:	e018      	b.n	800507c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d111      	bne.n	800507c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d105      	bne.n	800507c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005074:	f043 0201 	orr.w	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7fd f8ef 	bl	8002260 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005082:	e00e      	b.n	80050a2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff fa9f 	bl	80045d4 <HAL_ADC_ErrorCallback>
}
 8005096:	e004      	b.n	80050a2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff fa81 	bl	80045c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e4:	f043 0204 	orr.w	r2, r3, #4
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fa71 	bl	80045d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a7a      	ldr	r2, [pc, #488]	@ (80052f4 <ADC_ConfigureBoostMode+0x1f8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <ADC_ConfigureBoostMode+0x1c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a79      	ldr	r2, [pc, #484]	@ (80052f8 <ADC_ConfigureBoostMode+0x1fc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d109      	bne.n	800512c <ADC_ConfigureBoostMode+0x30>
 8005118:	4b78      	ldr	r3, [pc, #480]	@ (80052fc <ADC_ConfigureBoostMode+0x200>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e008      	b.n	800513e <ADC_ConfigureBoostMode+0x42>
 800512c:	4b74      	ldr	r3, [pc, #464]	@ (8005300 <ADC_ConfigureBoostMode+0x204>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01c      	beq.n	800517c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005142:	f005 f811 	bl	800a168 <HAL_RCC_GetHCLKFreq>
 8005146:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005150:	d010      	beq.n	8005174 <ADC_ConfigureBoostMode+0x78>
 8005152:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005156:	d873      	bhi.n	8005240 <ADC_ConfigureBoostMode+0x144>
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800515c:	d002      	beq.n	8005164 <ADC_ConfigureBoostMode+0x68>
 800515e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005162:	d16d      	bne.n	8005240 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	60fb      	str	r3, [r7, #12]
        break;
 8005172:	e068      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	089b      	lsrs	r3, r3, #2
 8005178:	60fb      	str	r3, [r7, #12]
        break;
 800517a:	e064      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800517c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	f006 fa56 	bl	800b634 <HAL_RCCEx_GetPeriphCLKFreq>
 8005188:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005192:	d051      	beq.n	8005238 <ADC_ConfigureBoostMode+0x13c>
 8005194:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005198:	d854      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 800519a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800519e:	d047      	beq.n	8005230 <ADC_ConfigureBoostMode+0x134>
 80051a0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80051a4:	d84e      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051a6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80051aa:	d03d      	beq.n	8005228 <ADC_ConfigureBoostMode+0x12c>
 80051ac:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80051b0:	d848      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051b6:	d033      	beq.n	8005220 <ADC_ConfigureBoostMode+0x124>
 80051b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051bc:	d842      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051be:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80051c2:	d029      	beq.n	8005218 <ADC_ConfigureBoostMode+0x11c>
 80051c4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80051c8:	d83c      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80051ce:	d01a      	beq.n	8005206 <ADC_ConfigureBoostMode+0x10a>
 80051d0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80051d4:	d836      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80051da:	d014      	beq.n	8005206 <ADC_ConfigureBoostMode+0x10a>
 80051dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80051e0:	d830      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e6:	d00e      	beq.n	8005206 <ADC_ConfigureBoostMode+0x10a>
 80051e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ec:	d82a      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051f2:	d008      	beq.n	8005206 <ADC_ConfigureBoostMode+0x10a>
 80051f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051f8:	d824      	bhi.n	8005244 <ADC_ConfigureBoostMode+0x148>
 80051fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051fe:	d002      	beq.n	8005206 <ADC_ConfigureBoostMode+0x10a>
 8005200:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005204:	d11e      	bne.n	8005244 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	0c9b      	lsrs	r3, r3, #18
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	60fb      	str	r3, [r7, #12]
        break;
 8005216:	e016      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	60fb      	str	r3, [r7, #12]
        break;
 800521e:	e012      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	60fb      	str	r3, [r7, #12]
        break;
 8005226:	e00e      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	60fb      	str	r3, [r7, #12]
        break;
 800522e:	e00a      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	09db      	lsrs	r3, r3, #7
 8005234:	60fb      	str	r3, [r7, #12]
        break;
 8005236:	e006      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	60fb      	str	r3, [r7, #12]
        break;
 800523e:	e002      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005244:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005246:	f7fe fb91 	bl	800396c <HAL_GetREVID>
 800524a:	4603      	mov	r3, r0
 800524c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005250:	4293      	cmp	r3, r2
 8005252:	d815      	bhi.n	8005280 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a2b      	ldr	r2, [pc, #172]	@ (8005304 <ADC_ConfigureBoostMode+0x208>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d908      	bls.n	800526e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800526a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800526c:	e03e      	b.n	80052ec <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800527c:	609a      	str	r2, [r3, #8]
}
 800527e:	e035      	b.n	80052ec <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <ADC_ConfigureBoostMode+0x20c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d808      	bhi.n	80052a0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800529c:	609a      	str	r2, [r3, #8]
}
 800529e:	e025      	b.n	80052ec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a1a      	ldr	r2, [pc, #104]	@ (800530c <ADC_ConfigureBoostMode+0x210>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d80a      	bhi.n	80052be <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	e016      	b.n	80052ec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <ADC_ConfigureBoostMode+0x214>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d80a      	bhi.n	80052dc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d8:	609a      	str	r2, [r3, #8]
}
 80052da:	e007      	b.n	80052ec <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40022100 	.word	0x40022100
 80052fc:	40022300 	.word	0x40022300
 8005300:	58026300 	.word	0x58026300
 8005304:	01312d00 	.word	0x01312d00
 8005308:	005f5e10 	.word	0x005f5e10
 800530c:	00bebc20 	.word	0x00bebc20
 8005310:	017d7840 	.word	0x017d7840

08005314 <LL_ADC_IsEnabled>:
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <LL_ADC_IsEnabled+0x18>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <LL_ADC_IsEnabled+0x1a>
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <LL_ADC_StartCalibration>:
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	4b09      	ldr	r3, [pc, #36]	@ (8005374 <LL_ADC_StartCalibration+0x38>)
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800535c:	430a      	orrs	r2, r1
 800535e:	4313      	orrs	r3, r2
 8005360:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	3ffeffc0 	.word	0x3ffeffc0

08005378 <LL_ADC_IsCalibrationOnGoing>:
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800538c:	d101      	bne.n	8005392 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <LL_ADC_REG_IsConversionOngoing>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d101      	bne.n	80053b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e04c      	b.n	8005480 <HAL_ADCEx_Calibration_Start+0xb8>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fd90 	bl	8004f14 <ADC_Disable>
 80053f4:	4603      	mov	r3, r0
 80053f6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d135      	bne.n	800546a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005402:	4b21      	ldr	r3, [pc, #132]	@ (8005488 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005404:	4013      	ands	r3, r2
 8005406:	f043 0202 	orr.w	r2, r3, #2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff90 	bl	800533c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800541c:	e014      	b.n	8005448 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	3301      	adds	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4a19      	ldr	r2, [pc, #100]	@ (800548c <HAL_ADCEx_Calibration_Start+0xc4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d30d      	bcc.n	8005448 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	f023 0312 	bic.w	r3, r3, #18
 8005434:	f043 0210 	orr.w	r2, r3, #16
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e01b      	b.n	8005480 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff ff93 	bl	8005378 <LL_ADC_IsCalibrationOnGoing>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e2      	bne.n	800541e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	f023 0303 	bic.w	r3, r3, #3
 8005460:	f043 0201 	orr.w	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	655a      	str	r2, [r3, #84]	@ 0x54
 8005468:	e005      	b.n	8005476 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	f043 0210 	orr.w	r2, r3, #16
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	ffffeefd 	.word	0xffffeefd
 800548c:	25c3f800 	.word	0x25c3f800

08005490 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b09f      	sub	sp, #124	@ 0x7c
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e0be      	b.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80054b6:	2300      	movs	r3, #0
 80054b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d102      	bne.n	80054ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80054c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	e001      	b.n	80054d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80054ce:	2300      	movs	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10b      	bne.n	80054f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e09d      	b.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff54 	bl	80053a0 <LL_ADC_REG_IsConversionOngoing>
 80054f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff ff4e 	bl	80053a0 <LL_ADC_REG_IsConversionOngoing>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d17f      	bne.n	800560a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800550a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800550c:	2b00      	cmp	r3, #0
 800550e:	d17c      	bne.n	800560a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a47      	ldr	r2, [pc, #284]	@ (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a46      	ldr	r2, [pc, #280]	@ (8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005524:	4b45      	ldr	r3, [pc, #276]	@ (800563c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005526:	e000      	b.n	800552a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005528:	4b45      	ldr	r3, [pc, #276]	@ (8005640 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800552a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d039      	beq.n	80055a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	431a      	orrs	r2, r3
 8005542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005544:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3a      	ldr	r2, [pc, #232]	@ (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a38      	ldr	r2, [pc, #224]	@ (8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10e      	bne.n	8005578 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800555a:	4836      	ldr	r0, [pc, #216]	@ (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800555c:	f7ff feda 	bl	8005314 <LL_ADC_IsEnabled>
 8005560:	4604      	mov	r4, r0
 8005562:	4835      	ldr	r0, [pc, #212]	@ (8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005564:	f7ff fed6 	bl	8005314 <LL_ADC_IsEnabled>
 8005568:	4603      	mov	r3, r0
 800556a:	4323      	orrs	r3, r4
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e008      	b.n	800558a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005578:	4832      	ldr	r0, [pc, #200]	@ (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800557a:	f7ff fecb 	bl	8005314 <LL_ADC_IsEnabled>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d047      	beq.n	800561e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800558e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	4b2d      	ldr	r3, [pc, #180]	@ (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005594:	4013      	ands	r3, r2
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	6811      	ldr	r1, [r2, #0]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	6892      	ldr	r2, [r2, #8]
 800559e:	430a      	orrs	r2, r1
 80055a0:	431a      	orrs	r2, r3
 80055a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055a6:	e03a      	b.n	800561e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80055a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10e      	bne.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80055c8:	481a      	ldr	r0, [pc, #104]	@ (8005634 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055ca:	f7ff fea3 	bl	8005314 <LL_ADC_IsEnabled>
 80055ce:	4604      	mov	r4, r0
 80055d0:	4819      	ldr	r0, [pc, #100]	@ (8005638 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055d2:	f7ff fe9f 	bl	8005314 <LL_ADC_IsEnabled>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4323      	orrs	r3, r4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e008      	b.n	80055f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80055e6:	4817      	ldr	r0, [pc, #92]	@ (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055e8:	f7ff fe94 	bl	8005314 <LL_ADC_IsEnabled>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005602:	4013      	ands	r3, r2
 8005604:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005606:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005608:	e009      	b.n	800561e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800561c:	e000      	b.n	8005620 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800561e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005628:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800562c:	4618      	mov	r0, r3
 800562e:	377c      	adds	r7, #124	@ 0x7c
 8005630:	46bd      	mov	sp, r7
 8005632:	bd90      	pop	{r4, r7, pc}
 8005634:	40022000 	.word	0x40022000
 8005638:	40022100 	.word	0x40022100
 800563c:	40022300 	.word	0x40022300
 8005640:	58026300 	.word	0x58026300
 8005644:	58026000 	.word	0x58026000
 8005648:	fffff0e0 	.word	0xfffff0e0

0800564c <__NVIC_SetPriorityGrouping>:
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800565c:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <__NVIC_SetPriorityGrouping+0x40>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005668:	4013      	ands	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005674:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <__NVIC_SetPriorityGrouping+0x44>)
 8005676:	4313      	orrs	r3, r2
 8005678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800567a:	4a04      	ldr	r2, [pc, #16]	@ (800568c <__NVIC_SetPriorityGrouping+0x40>)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	60d3      	str	r3, [r2, #12]
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000ed00 	.word	0xe000ed00
 8005690:	05fa0000 	.word	0x05fa0000

08005694 <__NVIC_GetPriorityGrouping>:
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005698:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <__NVIC_GetPriorityGrouping+0x18>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	f003 0307 	and.w	r3, r3, #7
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	e000ed00 	.word	0xe000ed00

080056b0 <__NVIC_EnableIRQ>:
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	db0b      	blt.n	80056da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	f003 021f 	and.w	r2, r3, #31
 80056c8:	4907      	ldr	r1, [pc, #28]	@ (80056e8 <__NVIC_EnableIRQ+0x38>)
 80056ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2001      	movs	r0, #1
 80056d2:	fa00 f202 	lsl.w	r2, r0, r2
 80056d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	e000e100 	.word	0xe000e100

080056ec <__NVIC_SetPriority>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	6039      	str	r1, [r7, #0]
 80056f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db0a      	blt.n	8005716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	490c      	ldr	r1, [pc, #48]	@ (8005738 <__NVIC_SetPriority+0x4c>)
 8005706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800570a:	0112      	lsls	r2, r2, #4
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	440b      	add	r3, r1
 8005710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005714:	e00a      	b.n	800572c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4908      	ldr	r1, [pc, #32]	@ (800573c <__NVIC_SetPriority+0x50>)
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	3b04      	subs	r3, #4
 8005724:	0112      	lsls	r2, r2, #4
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	440b      	add	r3, r1
 800572a:	761a      	strb	r2, [r3, #24]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	e000e100 	.word	0xe000e100
 800573c:	e000ed00 	.word	0xe000ed00

08005740 <NVIC_EncodePriority>:
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	@ 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f1c3 0307 	rsb	r3, r3, #7
 800575a:	2b04      	cmp	r3, #4
 800575c:	bf28      	it	cs
 800575e:	2304      	movcs	r3, #4
 8005760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3304      	adds	r3, #4
 8005766:	2b06      	cmp	r3, #6
 8005768:	d902      	bls.n	8005770 <NVIC_EncodePriority+0x30>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3b03      	subs	r3, #3
 800576e:	e000      	b.n	8005772 <NVIC_EncodePriority+0x32>
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005774:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43da      	mvns	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	401a      	ands	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005788:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	43d9      	mvns	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005798:	4313      	orrs	r3, r2
}
 800579a:	4618      	mov	r0, r3
 800579c:	3724      	adds	r7, #36	@ 0x24
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057b8:	d301      	bcc.n	80057be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ba:	2301      	movs	r3, #1
 80057bc:	e00f      	b.n	80057de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057be:	4a0a      	ldr	r2, [pc, #40]	@ (80057e8 <SysTick_Config+0x40>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057c6:	210f      	movs	r1, #15
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057cc:	f7ff ff8e 	bl	80056ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <SysTick_Config+0x40>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057d6:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <SysTick_Config+0x40>)
 80057d8:	2207      	movs	r2, #7
 80057da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	e000e010 	.word	0xe000e010

080057ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff29 	bl	800564c <__NVIC_SetPriorityGrouping>
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b086      	sub	sp, #24
 8005806:	af00      	add	r7, sp, #0
 8005808:	4603      	mov	r3, r0
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005810:	f7ff ff40 	bl	8005694 <__NVIC_GetPriorityGrouping>
 8005814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	6978      	ldr	r0, [r7, #20]
 800581c:	f7ff ff90 	bl	8005740 <NVIC_EncodePriority>
 8005820:	4602      	mov	r2, r0
 8005822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff ff5f 	bl	80056ec <__NVIC_SetPriority>
}
 800582e:	bf00      	nop
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	4603      	mov	r3, r0
 800583e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff ff33 	bl	80056b0 <__NVIC_EnableIRQ>
}
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ffa4 	bl	80057a8 <SysTick_Config>
 8005860:	4603      	mov	r3, r0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005870:	f3bf 8f5f 	dmb	sy
}
 8005874:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005876:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <HAL_MPU_Disable+0x28>)
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	4a06      	ldr	r2, [pc, #24]	@ (8005894 <HAL_MPU_Disable+0x28>)
 800587c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005880:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005882:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <HAL_MPU_Disable+0x2c>)
 8005884:	2200      	movs	r2, #0
 8005886:	605a      	str	r2, [r3, #4]
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	e000ed00 	.word	0xe000ed00
 8005898:	e000ed90 	.word	0xe000ed90

0800589c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80058a4:	4a0b      	ldr	r2, [pc, #44]	@ (80058d4 <HAL_MPU_Enable+0x38>)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80058ae:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <HAL_MPU_Enable+0x3c>)
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	4a09      	ldr	r2, [pc, #36]	@ (80058d8 <HAL_MPU_Enable+0x3c>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80058ba:	f3bf 8f4f 	dsb	sy
}
 80058be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80058c0:	f3bf 8f6f 	isb	sy
}
 80058c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	e000ed90 	.word	0xe000ed90
 80058d8:	e000ed00 	.word	0xe000ed00

080058dc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	785a      	ldrb	r2, [r3, #1]
 80058e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005960 <HAL_MPU_ConfigRegion+0x84>)
 80058ea:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d029      	beq.n	8005948 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80058f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005960 <HAL_MPU_ConfigRegion+0x84>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7b1b      	ldrb	r3, [r3, #12]
 8005900:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	7adb      	ldrb	r3, [r3, #11]
 8005906:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005908:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7a9b      	ldrb	r3, [r3, #10]
 800590e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005910:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7b5b      	ldrb	r3, [r3, #13]
 8005916:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005918:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	7b9b      	ldrb	r3, [r3, #14]
 800591e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005920:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7bdb      	ldrb	r3, [r3, #15]
 8005926:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005928:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7a5b      	ldrb	r3, [r3, #9]
 800592e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005930:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	7a1b      	ldrb	r3, [r3, #8]
 8005936:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005938:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005940:	4a07      	ldr	r2, [pc, #28]	@ (8005960 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005942:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005944:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005946:	e005      	b.n	8005954 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005948:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <HAL_MPU_ConfigRegion+0x84>)
 800594a:	2200      	movs	r2, #0
 800594c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800594e:	4b04      	ldr	r3, [pc, #16]	@ (8005960 <HAL_MPU_ConfigRegion+0x84>)
 8005950:	2200      	movs	r2, #0
 8005952:	611a      	str	r2, [r3, #16]
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed90 	.word	0xe000ed90

08005964 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e014      	b.n	80059a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fb fd08 	bl	800139c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	795b      	ldrb	r3, [r3, #5]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_DAC_ConfigChannel+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e12a      	b.n	8005c16 <HAL_DAC_ConfigChannel+0x26e>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2202      	movs	r2, #2
 80059ca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	f040 8081 	bne.w	8005ad8 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80059d6:	f7fd ff99 	bl	800390c <HAL_GetTick>
 80059da:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d140      	bne.n	8005a64 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059e2:	e018      	b.n	8005a16 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059e4:	f7fd ff92 	bl	800390c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d911      	bls.n	8005a16 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f8:	4b89      	ldr	r3, [pc, #548]	@ (8005c20 <HAL_DAC_ConfigChannel+0x278>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2203      	movs	r2, #3
 8005a10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0ff      	b.n	8005c16 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a1c:	4b80      	ldr	r3, [pc, #512]	@ (8005c20 <HAL_DAC_ConfigChannel+0x278>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1df      	bne.n	80059e4 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005a24:	2001      	movs	r0, #1
 8005a26:	f7fd ff7d 	bl	8003924 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	6992      	ldr	r2, [r2, #24]
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a34:	e023      	b.n	8005a7e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a36:	f7fd ff69 	bl	800390c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d90f      	bls.n	8005a64 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da0a      	bge.n	8005a64 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f043 0208 	orr.w	r2, r3, #8
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e0d8      	b.n	8005c16 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dbe3      	blt.n	8005a36 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f7fd ff58 	bl	8003924 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	6992      	ldr	r2, [r2, #24]
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	ea02 0103 	and.w	r1, r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	21ff      	movs	r1, #255	@ 0xff
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	ea02 0103 	and.w	r1, r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d11d      	bne.n	8005b1c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	221f      	movs	r2, #31
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4013      	ands	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	43db      	mvns	r3, r3
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4013      	ands	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d102      	bne.n	8005b46 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e00f      	b.n	8005b66 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d102      	bne.n	8005b54 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	e008      	b.n	8005b66 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	e001      	b.n	8005b66 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43da      	mvns	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	400a      	ands	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6819      	ldr	r1, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	22c0      	movs	r2, #192	@ 0xc0
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43da      	mvns	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	400a      	ands	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20008000 	.word	0x20008000

08005c24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c2c:	f7fd fe6e 	bl	800390c <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e316      	b.n	800626a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a66      	ldr	r2, [pc, #408]	@ (8005ddc <HAL_DMA_Init+0x1b8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d04a      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a65      	ldr	r2, [pc, #404]	@ (8005de0 <HAL_DMA_Init+0x1bc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d045      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a63      	ldr	r2, [pc, #396]	@ (8005de4 <HAL_DMA_Init+0x1c0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d040      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a62      	ldr	r2, [pc, #392]	@ (8005de8 <HAL_DMA_Init+0x1c4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d03b      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a60      	ldr	r2, [pc, #384]	@ (8005dec <HAL_DMA_Init+0x1c8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d036      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a5f      	ldr	r2, [pc, #380]	@ (8005df0 <HAL_DMA_Init+0x1cc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d031      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005df4 <HAL_DMA_Init+0x1d0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d02c      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a5c      	ldr	r2, [pc, #368]	@ (8005df8 <HAL_DMA_Init+0x1d4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d027      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a5a      	ldr	r2, [pc, #360]	@ (8005dfc <HAL_DMA_Init+0x1d8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a59      	ldr	r2, [pc, #356]	@ (8005e00 <HAL_DMA_Init+0x1dc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d01d      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a57      	ldr	r2, [pc, #348]	@ (8005e04 <HAL_DMA_Init+0x1e0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a56      	ldr	r2, [pc, #344]	@ (8005e08 <HAL_DMA_Init+0x1e4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a54      	ldr	r2, [pc, #336]	@ (8005e0c <HAL_DMA_Init+0x1e8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a53      	ldr	r2, [pc, #332]	@ (8005e10 <HAL_DMA_Init+0x1ec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a51      	ldr	r2, [pc, #324]	@ (8005e14 <HAL_DMA_Init+0x1f0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_DMA_Init+0xb8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a50      	ldr	r2, [pc, #320]	@ (8005e18 <HAL_DMA_Init+0x1f4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d101      	bne.n	8005ce0 <HAL_DMA_Init+0xbc>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <HAL_DMA_Init+0xbe>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 813b 	beq.w	8005f5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a37      	ldr	r2, [pc, #220]	@ (8005ddc <HAL_DMA_Init+0x1b8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04a      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a36      	ldr	r2, [pc, #216]	@ (8005de0 <HAL_DMA_Init+0x1bc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d045      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a34      	ldr	r2, [pc, #208]	@ (8005de4 <HAL_DMA_Init+0x1c0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d040      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a33      	ldr	r2, [pc, #204]	@ (8005de8 <HAL_DMA_Init+0x1c4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d03b      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a31      	ldr	r2, [pc, #196]	@ (8005dec <HAL_DMA_Init+0x1c8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d036      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a30      	ldr	r2, [pc, #192]	@ (8005df0 <HAL_DMA_Init+0x1cc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d031      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2e      	ldr	r2, [pc, #184]	@ (8005df4 <HAL_DMA_Init+0x1d0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02c      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2d      	ldr	r2, [pc, #180]	@ (8005df8 <HAL_DMA_Init+0x1d4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d027      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8005dfc <HAL_DMA_Init+0x1d8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2a      	ldr	r2, [pc, #168]	@ (8005e00 <HAL_DMA_Init+0x1dc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d01d      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a28      	ldr	r2, [pc, #160]	@ (8005e04 <HAL_DMA_Init+0x1e0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a27      	ldr	r2, [pc, #156]	@ (8005e08 <HAL_DMA_Init+0x1e4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a25      	ldr	r2, [pc, #148]	@ (8005e0c <HAL_DMA_Init+0x1e8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a24      	ldr	r2, [pc, #144]	@ (8005e10 <HAL_DMA_Init+0x1ec>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a22      	ldr	r2, [pc, #136]	@ (8005e14 <HAL_DMA_Init+0x1f0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_DMA_Init+0x174>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a21      	ldr	r2, [pc, #132]	@ (8005e18 <HAL_DMA_Init+0x1f4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d108      	bne.n	8005daa <HAL_DMA_Init+0x186>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e007      	b.n	8005dba <HAL_DMA_Init+0x196>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dba:	e02f      	b.n	8005e1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dbc:	f7fd fda6 	bl	800390c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d928      	bls.n	8005e1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e246      	b.n	800626a <HAL_DMA_Init+0x646>
 8005ddc:	40020010 	.word	0x40020010
 8005de0:	40020028 	.word	0x40020028
 8005de4:	40020040 	.word	0x40020040
 8005de8:	40020058 	.word	0x40020058
 8005dec:	40020070 	.word	0x40020070
 8005df0:	40020088 	.word	0x40020088
 8005df4:	400200a0 	.word	0x400200a0
 8005df8:	400200b8 	.word	0x400200b8
 8005dfc:	40020410 	.word	0x40020410
 8005e00:	40020428 	.word	0x40020428
 8005e04:	40020440 	.word	0x40020440
 8005e08:	40020458 	.word	0x40020458
 8005e0c:	40020470 	.word	0x40020470
 8005e10:	40020488 	.word	0x40020488
 8005e14:	400204a0 	.word	0x400204a0
 8005e18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1c8      	bne.n	8005dbc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4b83      	ldr	r3, [pc, #524]	@ (8006044 <HAL_DMA_Init+0x420>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d107      	bne.n	8005e80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005e80:	4b71      	ldr	r3, [pc, #452]	@ (8006048 <HAL_DMA_Init+0x424>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b71      	ldr	r3, [pc, #452]	@ (800604c <HAL_DMA_Init+0x428>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e8c:	d328      	bcc.n	8005ee0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b28      	cmp	r3, #40	@ 0x28
 8005e94:	d903      	bls.n	8005e9e <HAL_DMA_Init+0x27a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e9c:	d917      	bls.n	8005ece <HAL_DMA_Init+0x2aa>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ea4:	d903      	bls.n	8005eae <HAL_DMA_Init+0x28a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b42      	cmp	r3, #66	@ 0x42
 8005eac:	d90f      	bls.n	8005ece <HAL_DMA_Init+0x2aa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b46      	cmp	r3, #70	@ 0x46
 8005eb4:	d903      	bls.n	8005ebe <HAL_DMA_Init+0x29a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b48      	cmp	r3, #72	@ 0x48
 8005ebc:	d907      	bls.n	8005ece <HAL_DMA_Init+0x2aa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b4e      	cmp	r3, #78	@ 0x4e
 8005ec4:	d905      	bls.n	8005ed2 <HAL_DMA_Init+0x2ae>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b52      	cmp	r3, #82	@ 0x52
 8005ecc:	d801      	bhi.n	8005ed2 <HAL_DMA_Init+0x2ae>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <HAL_DMA_Init+0x2b0>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ede:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d117      	bne.n	8005f3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 ff85 	bl	8007e2c <DMA_CheckFifoParam>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2240      	movs	r2, #64	@ 0x40
 8005f2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e197      	b.n	800626a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 fec0 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	223f      	movs	r2, #63	@ 0x3f
 8005f56:	409a      	lsls	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	e0cd      	b.n	80060fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a3b      	ldr	r2, [pc, #236]	@ (8006050 <HAL_DMA_Init+0x42c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d022      	beq.n	8005fae <HAL_DMA_Init+0x38a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a39      	ldr	r2, [pc, #228]	@ (8006054 <HAL_DMA_Init+0x430>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01d      	beq.n	8005fae <HAL_DMA_Init+0x38a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a38      	ldr	r2, [pc, #224]	@ (8006058 <HAL_DMA_Init+0x434>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d018      	beq.n	8005fae <HAL_DMA_Init+0x38a>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a36      	ldr	r2, [pc, #216]	@ (800605c <HAL_DMA_Init+0x438>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_DMA_Init+0x38a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a35      	ldr	r2, [pc, #212]	@ (8006060 <HAL_DMA_Init+0x43c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_DMA_Init+0x38a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a33      	ldr	r2, [pc, #204]	@ (8006064 <HAL_DMA_Init+0x440>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_DMA_Init+0x38a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a32      	ldr	r2, [pc, #200]	@ (8006068 <HAL_DMA_Init+0x444>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_DMA_Init+0x38a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a30      	ldr	r2, [pc, #192]	@ (800606c <HAL_DMA_Init+0x448>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d101      	bne.n	8005fb2 <HAL_DMA_Init+0x38e>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <HAL_DMA_Init+0x390>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8097 	beq.w	80060e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a24      	ldr	r2, [pc, #144]	@ (8006050 <HAL_DMA_Init+0x42c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d021      	beq.n	8006008 <HAL_DMA_Init+0x3e4>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a22      	ldr	r2, [pc, #136]	@ (8006054 <HAL_DMA_Init+0x430>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01c      	beq.n	8006008 <HAL_DMA_Init+0x3e4>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a21      	ldr	r2, [pc, #132]	@ (8006058 <HAL_DMA_Init+0x434>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d017      	beq.n	8006008 <HAL_DMA_Init+0x3e4>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800605c <HAL_DMA_Init+0x438>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d012      	beq.n	8006008 <HAL_DMA_Init+0x3e4>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8006060 <HAL_DMA_Init+0x43c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00d      	beq.n	8006008 <HAL_DMA_Init+0x3e4>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8006064 <HAL_DMA_Init+0x440>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d008      	beq.n	8006008 <HAL_DMA_Init+0x3e4>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8006068 <HAL_DMA_Init+0x444>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <HAL_DMA_Init+0x3e4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a19      	ldr	r2, [pc, #100]	@ (800606c <HAL_DMA_Init+0x448>)
 8006006:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4b13      	ldr	r3, [pc, #76]	@ (8006070 <HAL_DMA_Init+0x44c>)
 8006024:	4013      	ands	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b40      	cmp	r3, #64	@ 0x40
 800602e:	d021      	beq.n	8006074 <HAL_DMA_Init+0x450>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b80      	cmp	r3, #128	@ 0x80
 8006036:	d102      	bne.n	800603e <HAL_DMA_Init+0x41a>
 8006038:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800603c:	e01b      	b.n	8006076 <HAL_DMA_Init+0x452>
 800603e:	2300      	movs	r3, #0
 8006040:	e019      	b.n	8006076 <HAL_DMA_Init+0x452>
 8006042:	bf00      	nop
 8006044:	fe10803f 	.word	0xfe10803f
 8006048:	5c001000 	.word	0x5c001000
 800604c:	ffff0000 	.word	0xffff0000
 8006050:	58025408 	.word	0x58025408
 8006054:	5802541c 	.word	0x5802541c
 8006058:	58025430 	.word	0x58025430
 800605c:	58025444 	.word	0x58025444
 8006060:	58025458 	.word	0x58025458
 8006064:	5802546c 	.word	0x5802546c
 8006068:	58025480 	.word	0x58025480
 800606c:	58025494 	.word	0x58025494
 8006070:	fffe000f 	.word	0xfffe000f
 8006074:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68d2      	ldr	r2, [r2, #12]
 800607a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800607c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006084:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800608c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800609c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	4b6e      	ldr	r3, [pc, #440]	@ (8006274 <HAL_DMA_Init+0x650>)
 80060bc:	4413      	add	r3, r2
 80060be:	4a6e      	ldr	r2, [pc, #440]	@ (8006278 <HAL_DMA_Init+0x654>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	009a      	lsls	r2, r3, #2
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fdfb 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 80060d2:	4603      	mov	r3, r0
 80060d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	2201      	movs	r2, #1
 80060e0:	409a      	lsls	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	e008      	b.n	80060fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2240      	movs	r2, #64	@ 0x40
 80060ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2203      	movs	r2, #3
 80060f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e0b7      	b.n	800626a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a5f      	ldr	r2, [pc, #380]	@ (800627c <HAL_DMA_Init+0x658>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d072      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5d      	ldr	r2, [pc, #372]	@ (8006280 <HAL_DMA_Init+0x65c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d06d      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5c      	ldr	r2, [pc, #368]	@ (8006284 <HAL_DMA_Init+0x660>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d068      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5a      	ldr	r2, [pc, #360]	@ (8006288 <HAL_DMA_Init+0x664>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d063      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a59      	ldr	r2, [pc, #356]	@ (800628c <HAL_DMA_Init+0x668>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d05e      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a57      	ldr	r2, [pc, #348]	@ (8006290 <HAL_DMA_Init+0x66c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d059      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a56      	ldr	r2, [pc, #344]	@ (8006294 <HAL_DMA_Init+0x670>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d054      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a54      	ldr	r2, [pc, #336]	@ (8006298 <HAL_DMA_Init+0x674>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04f      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a53      	ldr	r2, [pc, #332]	@ (800629c <HAL_DMA_Init+0x678>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d04a      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a51      	ldr	r2, [pc, #324]	@ (80062a0 <HAL_DMA_Init+0x67c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d045      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a50      	ldr	r2, [pc, #320]	@ (80062a4 <HAL_DMA_Init+0x680>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d040      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a4e      	ldr	r2, [pc, #312]	@ (80062a8 <HAL_DMA_Init+0x684>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d03b      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4d      	ldr	r2, [pc, #308]	@ (80062ac <HAL_DMA_Init+0x688>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d036      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a4b      	ldr	r2, [pc, #300]	@ (80062b0 <HAL_DMA_Init+0x68c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d031      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4a      	ldr	r2, [pc, #296]	@ (80062b4 <HAL_DMA_Init+0x690>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d02c      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a48      	ldr	r2, [pc, #288]	@ (80062b8 <HAL_DMA_Init+0x694>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d027      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a47      	ldr	r2, [pc, #284]	@ (80062bc <HAL_DMA_Init+0x698>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d022      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a45      	ldr	r2, [pc, #276]	@ (80062c0 <HAL_DMA_Init+0x69c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d01d      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a44      	ldr	r2, [pc, #272]	@ (80062c4 <HAL_DMA_Init+0x6a0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d018      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a42      	ldr	r2, [pc, #264]	@ (80062c8 <HAL_DMA_Init+0x6a4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a41      	ldr	r2, [pc, #260]	@ (80062cc <HAL_DMA_Init+0x6a8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00e      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a3f      	ldr	r2, [pc, #252]	@ (80062d0 <HAL_DMA_Init+0x6ac>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a3e      	ldr	r2, [pc, #248]	@ (80062d4 <HAL_DMA_Init+0x6b0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_DMA_Init+0x5c6>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a3c      	ldr	r2, [pc, #240]	@ (80062d8 <HAL_DMA_Init+0x6b4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d101      	bne.n	80061ee <HAL_DMA_Init+0x5ca>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <HAL_DMA_Init+0x5cc>
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d032      	beq.n	800625a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fe95 	bl	8007f24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b80      	cmp	r3, #128	@ 0x80
 8006200:	d102      	bne.n	8006208 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800621c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <HAL_DMA_Init+0x624>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b08      	cmp	r3, #8
 800622c:	d80c      	bhi.n	8006248 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 ff12 	bl	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	e008      	b.n	800625a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	a7fdabf8 	.word	0xa7fdabf8
 8006278:	cccccccd 	.word	0xcccccccd
 800627c:	40020010 	.word	0x40020010
 8006280:	40020028 	.word	0x40020028
 8006284:	40020040 	.word	0x40020040
 8006288:	40020058 	.word	0x40020058
 800628c:	40020070 	.word	0x40020070
 8006290:	40020088 	.word	0x40020088
 8006294:	400200a0 	.word	0x400200a0
 8006298:	400200b8 	.word	0x400200b8
 800629c:	40020410 	.word	0x40020410
 80062a0:	40020428 	.word	0x40020428
 80062a4:	40020440 	.word	0x40020440
 80062a8:	40020458 	.word	0x40020458
 80062ac:	40020470 	.word	0x40020470
 80062b0:	40020488 	.word	0x40020488
 80062b4:	400204a0 	.word	0x400204a0
 80062b8:	400204b8 	.word	0x400204b8
 80062bc:	58025408 	.word	0x58025408
 80062c0:	5802541c 	.word	0x5802541c
 80062c4:	58025430 	.word	0x58025430
 80062c8:	58025444 	.word	0x58025444
 80062cc:	58025458 	.word	0x58025458
 80062d0:	5802546c 	.word	0x5802546c
 80062d4:	58025480 	.word	0x58025480
 80062d8:	58025494 	.word	0x58025494

080062dc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e1a8      	b.n	8006640 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a82      	ldr	r2, [pc, #520]	@ (80064fc <HAL_DMA_DeInit+0x220>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d04a      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a80      	ldr	r2, [pc, #512]	@ (8006500 <HAL_DMA_DeInit+0x224>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d045      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7f      	ldr	r2, [pc, #508]	@ (8006504 <HAL_DMA_DeInit+0x228>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d040      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a7d      	ldr	r2, [pc, #500]	@ (8006508 <HAL_DMA_DeInit+0x22c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d03b      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a7c      	ldr	r2, [pc, #496]	@ (800650c <HAL_DMA_DeInit+0x230>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d036      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a7a      	ldr	r2, [pc, #488]	@ (8006510 <HAL_DMA_DeInit+0x234>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d031      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a79      	ldr	r2, [pc, #484]	@ (8006514 <HAL_DMA_DeInit+0x238>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d02c      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a77      	ldr	r2, [pc, #476]	@ (8006518 <HAL_DMA_DeInit+0x23c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d027      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a76      	ldr	r2, [pc, #472]	@ (800651c <HAL_DMA_DeInit+0x240>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d022      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a74      	ldr	r2, [pc, #464]	@ (8006520 <HAL_DMA_DeInit+0x244>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d01d      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a73      	ldr	r2, [pc, #460]	@ (8006524 <HAL_DMA_DeInit+0x248>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a71      	ldr	r2, [pc, #452]	@ (8006528 <HAL_DMA_DeInit+0x24c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a70      	ldr	r2, [pc, #448]	@ (800652c <HAL_DMA_DeInit+0x250>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a6e      	ldr	r2, [pc, #440]	@ (8006530 <HAL_DMA_DeInit+0x254>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a6d      	ldr	r2, [pc, #436]	@ (8006534 <HAL_DMA_DeInit+0x258>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_DMA_DeInit+0xb2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a6b      	ldr	r2, [pc, #428]	@ (8006538 <HAL_DMA_DeInit+0x25c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d108      	bne.n	80063a0 <HAL_DMA_DeInit+0xc4>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e007      	b.n	80063b0 <HAL_DMA_DeInit+0xd4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a51      	ldr	r2, [pc, #324]	@ (80064fc <HAL_DMA_DeInit+0x220>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d04a      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a50      	ldr	r2, [pc, #320]	@ (8006500 <HAL_DMA_DeInit+0x224>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d045      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a4e      	ldr	r2, [pc, #312]	@ (8006504 <HAL_DMA_DeInit+0x228>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d040      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a4d      	ldr	r2, [pc, #308]	@ (8006508 <HAL_DMA_DeInit+0x22c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d03b      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a4b      	ldr	r2, [pc, #300]	@ (800650c <HAL_DMA_DeInit+0x230>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d036      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006510 <HAL_DMA_DeInit+0x234>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d031      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a48      	ldr	r2, [pc, #288]	@ (8006514 <HAL_DMA_DeInit+0x238>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d02c      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a47      	ldr	r2, [pc, #284]	@ (8006518 <HAL_DMA_DeInit+0x23c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d027      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a45      	ldr	r2, [pc, #276]	@ (800651c <HAL_DMA_DeInit+0x240>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d022      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a44      	ldr	r2, [pc, #272]	@ (8006520 <HAL_DMA_DeInit+0x244>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d01d      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a42      	ldr	r2, [pc, #264]	@ (8006524 <HAL_DMA_DeInit+0x248>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d018      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a41      	ldr	r2, [pc, #260]	@ (8006528 <HAL_DMA_DeInit+0x24c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d013      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a3f      	ldr	r2, [pc, #252]	@ (800652c <HAL_DMA_DeInit+0x250>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00e      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a3e      	ldr	r2, [pc, #248]	@ (8006530 <HAL_DMA_DeInit+0x254>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d009      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a3c      	ldr	r2, [pc, #240]	@ (8006534 <HAL_DMA_DeInit+0x258>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <HAL_DMA_DeInit+0x174>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3b      	ldr	r2, [pc, #236]	@ (8006538 <HAL_DMA_DeInit+0x25c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d101      	bne.n	8006454 <HAL_DMA_DeInit+0x178>
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <HAL_DMA_DeInit+0x17a>
 8006454:	2300      	movs	r3, #0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d025      	beq.n	80064a6 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2200      	movs	r2, #0
 8006468:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2221      	movs	r2, #33	@ 0x21
 8006488:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fc1c 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 8006490:	4603      	mov	r3, r0
 8006492:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	223f      	movs	r2, #63	@ 0x3f
 800649e:	409a      	lsls	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	609a      	str	r2, [r3, #8]
 80064a4:	e081      	b.n	80065aa <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a24      	ldr	r2, [pc, #144]	@ (800653c <HAL_DMA_DeInit+0x260>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <HAL_DMA_DeInit+0x21a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <HAL_DMA_DeInit+0x264>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01d      	beq.n	80064f6 <HAL_DMA_DeInit+0x21a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a21      	ldr	r2, [pc, #132]	@ (8006544 <HAL_DMA_DeInit+0x268>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_DMA_DeInit+0x21a>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006548 <HAL_DMA_DeInit+0x26c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_DMA_DeInit+0x21a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1e      	ldr	r2, [pc, #120]	@ (800654c <HAL_DMA_DeInit+0x270>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_DMA_DeInit+0x21a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006550 <HAL_DMA_DeInit+0x274>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_DMA_DeInit+0x21a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <HAL_DMA_DeInit+0x278>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_DMA_DeInit+0x21a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a19      	ldr	r2, [pc, #100]	@ (8006558 <HAL_DMA_DeInit+0x27c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d132      	bne.n	800655c <HAL_DMA_DeInit+0x280>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e031      	b.n	800655e <HAL_DMA_DeInit+0x282>
 80064fa:	bf00      	nop
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
 800653c:	58025408 	.word	0x58025408
 8006540:	5802541c 	.word	0x5802541c
 8006544:	58025430 	.word	0x58025430
 8006548:	58025444 	.word	0x58025444
 800654c:	58025458 	.word	0x58025458
 8006550:	5802546c 	.word	0x5802546c
 8006554:	58025480 	.word	0x58025480
 8006558:	58025494 	.word	0x58025494
 800655c:	2300      	movs	r3, #0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d021      	beq.n	80065a6 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2200      	movs	r2, #0
 8006578:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2200      	movs	r2, #0
 8006580:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2200      	movs	r2, #0
 8006588:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fb9c 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 8006590:	4603      	mov	r3, r0
 8006592:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2201      	movs	r2, #1
 800659e:	409a      	lsls	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	605a      	str	r2, [r3, #4]
 80065a4:	e001      	b.n	80065aa <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e04a      	b.n	8006640 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fcba 	bl	8007f24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80065c8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <HAL_DMA_DeInit+0x316>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d80b      	bhi.n	80065f2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fd3c 	bl	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065f0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e226      	b.n	8006ab2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_DMA_Start_IT+0x2a>
 800666e:	2302      	movs	r3, #2
 8006670:	e21f      	b.n	8006ab2 <HAL_DMA_Start_IT+0x46a>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	f040 820a 	bne.w	8006a9c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a68      	ldr	r2, [pc, #416]	@ (800683c <HAL_DMA_Start_IT+0x1f4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d04a      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a66      	ldr	r2, [pc, #408]	@ (8006840 <HAL_DMA_Start_IT+0x1f8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d045      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a65      	ldr	r2, [pc, #404]	@ (8006844 <HAL_DMA_Start_IT+0x1fc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d040      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a63      	ldr	r2, [pc, #396]	@ (8006848 <HAL_DMA_Start_IT+0x200>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d03b      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a62      	ldr	r2, [pc, #392]	@ (800684c <HAL_DMA_Start_IT+0x204>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d036      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a60      	ldr	r2, [pc, #384]	@ (8006850 <HAL_DMA_Start_IT+0x208>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d031      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a5f      	ldr	r2, [pc, #380]	@ (8006854 <HAL_DMA_Start_IT+0x20c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d02c      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006858 <HAL_DMA_Start_IT+0x210>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d027      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a5c      	ldr	r2, [pc, #368]	@ (800685c <HAL_DMA_Start_IT+0x214>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d022      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5a      	ldr	r2, [pc, #360]	@ (8006860 <HAL_DMA_Start_IT+0x218>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01d      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a59      	ldr	r2, [pc, #356]	@ (8006864 <HAL_DMA_Start_IT+0x21c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a57      	ldr	r2, [pc, #348]	@ (8006868 <HAL_DMA_Start_IT+0x220>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a56      	ldr	r2, [pc, #344]	@ (800686c <HAL_DMA_Start_IT+0x224>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a54      	ldr	r2, [pc, #336]	@ (8006870 <HAL_DMA_Start_IT+0x228>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a53      	ldr	r2, [pc, #332]	@ (8006874 <HAL_DMA_Start_IT+0x22c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_DMA_Start_IT+0xee>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a51      	ldr	r2, [pc, #324]	@ (8006878 <HAL_DMA_Start_IT+0x230>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d108      	bne.n	8006748 <HAL_DMA_Start_IT+0x100>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	e007      	b.n	8006758 <HAL_DMA_Start_IT+0x110>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f001 f906 	bl	8007970 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a34      	ldr	r2, [pc, #208]	@ (800683c <HAL_DMA_Start_IT+0x1f4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d04a      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a33      	ldr	r2, [pc, #204]	@ (8006840 <HAL_DMA_Start_IT+0x1f8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d045      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a31      	ldr	r2, [pc, #196]	@ (8006844 <HAL_DMA_Start_IT+0x1fc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d040      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a30      	ldr	r2, [pc, #192]	@ (8006848 <HAL_DMA_Start_IT+0x200>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d03b      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a2e      	ldr	r2, [pc, #184]	@ (800684c <HAL_DMA_Start_IT+0x204>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d036      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a2d      	ldr	r2, [pc, #180]	@ (8006850 <HAL_DMA_Start_IT+0x208>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d031      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006854 <HAL_DMA_Start_IT+0x20c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02c      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006858 <HAL_DMA_Start_IT+0x210>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d027      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a28      	ldr	r2, [pc, #160]	@ (800685c <HAL_DMA_Start_IT+0x214>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d022      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a27      	ldr	r2, [pc, #156]	@ (8006860 <HAL_DMA_Start_IT+0x218>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01d      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a25      	ldr	r2, [pc, #148]	@ (8006864 <HAL_DMA_Start_IT+0x21c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a24      	ldr	r2, [pc, #144]	@ (8006868 <HAL_DMA_Start_IT+0x220>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a22      	ldr	r2, [pc, #136]	@ (800686c <HAL_DMA_Start_IT+0x224>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a21      	ldr	r2, [pc, #132]	@ (8006870 <HAL_DMA_Start_IT+0x228>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006874 <HAL_DMA_Start_IT+0x22c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_DMA_Start_IT+0x1bc>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006878 <HAL_DMA_Start_IT+0x230>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d101      	bne.n	8006808 <HAL_DMA_Start_IT+0x1c0>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <HAL_DMA_Start_IT+0x1c2>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d036      	beq.n	800687c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f023 021e 	bic.w	r2, r3, #30
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0216 	orr.w	r2, r2, #22
 8006820:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d03e      	beq.n	80068a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0208 	orr.w	r2, r2, #8
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e035      	b.n	80068a8 <HAL_DMA_Start_IT+0x260>
 800683c:	40020010 	.word	0x40020010
 8006840:	40020028 	.word	0x40020028
 8006844:	40020040 	.word	0x40020040
 8006848:	40020058 	.word	0x40020058
 800684c:	40020070 	.word	0x40020070
 8006850:	40020088 	.word	0x40020088
 8006854:	400200a0 	.word	0x400200a0
 8006858:	400200b8 	.word	0x400200b8
 800685c:	40020410 	.word	0x40020410
 8006860:	40020428 	.word	0x40020428
 8006864:	40020440 	.word	0x40020440
 8006868:	40020458 	.word	0x40020458
 800686c:	40020470 	.word	0x40020470
 8006870:	40020488 	.word	0x40020488
 8006874:	400204a0 	.word	0x400204a0
 8006878:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f023 020e 	bic.w	r2, r3, #14
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 020a 	orr.w	r2, r2, #10
 800688e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0204 	orr.w	r2, r2, #4
 80068a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a83      	ldr	r2, [pc, #524]	@ (8006abc <HAL_DMA_Start_IT+0x474>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d072      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a82      	ldr	r2, [pc, #520]	@ (8006ac0 <HAL_DMA_Start_IT+0x478>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d06d      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a80      	ldr	r2, [pc, #512]	@ (8006ac4 <HAL_DMA_Start_IT+0x47c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d068      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a7f      	ldr	r2, [pc, #508]	@ (8006ac8 <HAL_DMA_Start_IT+0x480>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d063      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a7d      	ldr	r2, [pc, #500]	@ (8006acc <HAL_DMA_Start_IT+0x484>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d05e      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a7c      	ldr	r2, [pc, #496]	@ (8006ad0 <HAL_DMA_Start_IT+0x488>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d059      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a7a      	ldr	r2, [pc, #488]	@ (8006ad4 <HAL_DMA_Start_IT+0x48c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d054      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a79      	ldr	r2, [pc, #484]	@ (8006ad8 <HAL_DMA_Start_IT+0x490>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d04f      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a77      	ldr	r2, [pc, #476]	@ (8006adc <HAL_DMA_Start_IT+0x494>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d04a      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a76      	ldr	r2, [pc, #472]	@ (8006ae0 <HAL_DMA_Start_IT+0x498>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d045      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a74      	ldr	r2, [pc, #464]	@ (8006ae4 <HAL_DMA_Start_IT+0x49c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d040      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a73      	ldr	r2, [pc, #460]	@ (8006ae8 <HAL_DMA_Start_IT+0x4a0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d03b      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a71      	ldr	r2, [pc, #452]	@ (8006aec <HAL_DMA_Start_IT+0x4a4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d036      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a70      	ldr	r2, [pc, #448]	@ (8006af0 <HAL_DMA_Start_IT+0x4a8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d031      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6e      	ldr	r2, [pc, #440]	@ (8006af4 <HAL_DMA_Start_IT+0x4ac>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d02c      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6d      	ldr	r2, [pc, #436]	@ (8006af8 <HAL_DMA_Start_IT+0x4b0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d027      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a6b      	ldr	r2, [pc, #428]	@ (8006afc <HAL_DMA_Start_IT+0x4b4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d022      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a6a      	ldr	r2, [pc, #424]	@ (8006b00 <HAL_DMA_Start_IT+0x4b8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d01d      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a68      	ldr	r2, [pc, #416]	@ (8006b04 <HAL_DMA_Start_IT+0x4bc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d018      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a67      	ldr	r2, [pc, #412]	@ (8006b08 <HAL_DMA_Start_IT+0x4c0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a65      	ldr	r2, [pc, #404]	@ (8006b0c <HAL_DMA_Start_IT+0x4c4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a64      	ldr	r2, [pc, #400]	@ (8006b10 <HAL_DMA_Start_IT+0x4c8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d009      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a62      	ldr	r2, [pc, #392]	@ (8006b14 <HAL_DMA_Start_IT+0x4cc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_DMA_Start_IT+0x350>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a61      	ldr	r2, [pc, #388]	@ (8006b18 <HAL_DMA_Start_IT+0x4d0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d101      	bne.n	800699c <HAL_DMA_Start_IT+0x354>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <HAL_DMA_Start_IT+0x356>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01a      	beq.n	80069d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a37      	ldr	r2, [pc, #220]	@ (8006abc <HAL_DMA_Start_IT+0x474>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d04a      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a36      	ldr	r2, [pc, #216]	@ (8006ac0 <HAL_DMA_Start_IT+0x478>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d045      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a34      	ldr	r2, [pc, #208]	@ (8006ac4 <HAL_DMA_Start_IT+0x47c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d040      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a33      	ldr	r2, [pc, #204]	@ (8006ac8 <HAL_DMA_Start_IT+0x480>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d03b      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a31      	ldr	r2, [pc, #196]	@ (8006acc <HAL_DMA_Start_IT+0x484>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d036      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a30      	ldr	r2, [pc, #192]	@ (8006ad0 <HAL_DMA_Start_IT+0x488>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d031      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2e      	ldr	r2, [pc, #184]	@ (8006ad4 <HAL_DMA_Start_IT+0x48c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d02c      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad8 <HAL_DMA_Start_IT+0x490>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d027      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006adc <HAL_DMA_Start_IT+0x494>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d022      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ae0 <HAL_DMA_Start_IT+0x498>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d01d      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a28      	ldr	r2, [pc, #160]	@ (8006ae4 <HAL_DMA_Start_IT+0x49c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d018      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a27      	ldr	r2, [pc, #156]	@ (8006ae8 <HAL_DMA_Start_IT+0x4a0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d013      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a25      	ldr	r2, [pc, #148]	@ (8006aec <HAL_DMA_Start_IT+0x4a4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00e      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a24      	ldr	r2, [pc, #144]	@ (8006af0 <HAL_DMA_Start_IT+0x4a8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d009      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a22      	ldr	r2, [pc, #136]	@ (8006af4 <HAL_DMA_Start_IT+0x4ac>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d004      	beq.n	8006a78 <HAL_DMA_Start_IT+0x430>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a21      	ldr	r2, [pc, #132]	@ (8006af8 <HAL_DMA_Start_IT+0x4b0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d108      	bne.n	8006a8a <HAL_DMA_Start_IT+0x442>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e012      	b.n	8006ab0 <HAL_DMA_Start_IT+0x468>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0201 	orr.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e009      	b.n	8006ab0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
 8006afc:	58025408 	.word	0x58025408
 8006b00:	5802541c 	.word	0x5802541c
 8006b04:	58025430 	.word	0x58025430
 8006b08:	58025444 	.word	0x58025444
 8006b0c:	58025458 	.word	0x58025458
 8006b10:	5802546c 	.word	0x5802546c
 8006b14:	58025480 	.word	0x58025480
 8006b18:	58025494 	.word	0x58025494

08006b1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	@ 0x28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b28:	4b67      	ldr	r3, [pc, #412]	@ (8006cc8 <HAL_DMA_IRQHandler+0x1ac>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a67      	ldr	r2, [pc, #412]	@ (8006ccc <HAL_DMA_IRQHandler+0x1b0>)
 8006b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b32:	0a9b      	lsrs	r3, r3, #10
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a5f      	ldr	r2, [pc, #380]	@ (8006cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d04a      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8006cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d045      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a5c      	ldr	r2, [pc, #368]	@ (8006cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d040      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a5a      	ldr	r2, [pc, #360]	@ (8006cdc <HAL_DMA_IRQHandler+0x1c0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d03b      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a59      	ldr	r2, [pc, #356]	@ (8006ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d036      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a57      	ldr	r2, [pc, #348]	@ (8006ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d031      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a56      	ldr	r2, [pc, #344]	@ (8006ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d02c      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a54      	ldr	r2, [pc, #336]	@ (8006cec <HAL_DMA_IRQHandler+0x1d0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d027      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a53      	ldr	r2, [pc, #332]	@ (8006cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a51      	ldr	r2, [pc, #324]	@ (8006cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01d      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a50      	ldr	r2, [pc, #320]	@ (8006cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8006cfc <HAL_DMA_IRQHandler+0x1e0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a4d      	ldr	r2, [pc, #308]	@ (8006d00 <HAL_DMA_IRQHandler+0x1e4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8006d04 <HAL_DMA_IRQHandler+0x1e8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a4a      	ldr	r2, [pc, #296]	@ (8006d08 <HAL_DMA_IRQHandler+0x1ec>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_DMA_IRQHandler+0xd2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a48      	ldr	r2, [pc, #288]	@ (8006d0c <HAL_DMA_IRQHandler+0x1f0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d101      	bne.n	8006bf2 <HAL_DMA_IRQHandler+0xd6>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xd8>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 842b 	beq.w	8007450 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	2208      	movs	r2, #8
 8006c04:	409a      	lsls	r2, r3
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80a2 	beq.w	8006d54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d04a      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d045      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	@ (8006cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d040      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <HAL_DMA_IRQHandler+0x1c0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d03b      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a28      	ldr	r2, [pc, #160]	@ (8006ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d036      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a27      	ldr	r2, [pc, #156]	@ (8006ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d031      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a25      	ldr	r2, [pc, #148]	@ (8006ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d02c      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a24      	ldr	r2, [pc, #144]	@ (8006cec <HAL_DMA_IRQHandler+0x1d0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d027      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a22      	ldr	r2, [pc, #136]	@ (8006cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d022      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a21      	ldr	r2, [pc, #132]	@ (8006cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d01d      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d018      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1e      	ldr	r2, [pc, #120]	@ (8006cfc <HAL_DMA_IRQHandler+0x1e0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d00 <HAL_DMA_IRQHandler+0x1e4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00e      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1b      	ldr	r2, [pc, #108]	@ (8006d04 <HAL_DMA_IRQHandler+0x1e8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a19      	ldr	r2, [pc, #100]	@ (8006d08 <HAL_DMA_IRQHandler+0x1ec>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x194>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a18      	ldr	r2, [pc, #96]	@ (8006d0c <HAL_DMA_IRQHandler+0x1f0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d12f      	bne.n	8006d10 <HAL_DMA_IRQHandler+0x1f4>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bf14      	ite	ne
 8006cbe:	2301      	movne	r3, #1
 8006cc0:	2300      	moveq	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	e02e      	b.n	8006d24 <HAL_DMA_IRQHandler+0x208>
 8006cc6:	bf00      	nop
 8006cc8:	24000268 	.word	0x24000268
 8006ccc:	1b4e81b5 	.word	0x1b4e81b5
 8006cd0:	40020010 	.word	0x40020010
 8006cd4:	40020028 	.word	0x40020028
 8006cd8:	40020040 	.word	0x40020040
 8006cdc:	40020058 	.word	0x40020058
 8006ce0:	40020070 	.word	0x40020070
 8006ce4:	40020088 	.word	0x40020088
 8006ce8:	400200a0 	.word	0x400200a0
 8006cec:	400200b8 	.word	0x400200b8
 8006cf0:	40020410 	.word	0x40020410
 8006cf4:	40020428 	.word	0x40020428
 8006cf8:	40020440 	.word	0x40020440
 8006cfc:	40020458 	.word	0x40020458
 8006d00:	40020470 	.word	0x40020470
 8006d04:	40020488 	.word	0x40020488
 8006d08:	400204a0 	.word	0x400204a0
 8006d0c:	400204b8 	.word	0x400204b8
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d015      	beq.n	8006d54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0204 	bic.w	r2, r2, #4
 8006d36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2208      	movs	r2, #8
 8006d42:	409a      	lsls	r2, r3
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4c:	f043 0201 	orr.w	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d06e      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a69      	ldr	r2, [pc, #420]	@ (8006f14 <HAL_DMA_IRQHandler+0x3f8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d04a      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a67      	ldr	r2, [pc, #412]	@ (8006f18 <HAL_DMA_IRQHandler+0x3fc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d045      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a66      	ldr	r2, [pc, #408]	@ (8006f1c <HAL_DMA_IRQHandler+0x400>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d040      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a64      	ldr	r2, [pc, #400]	@ (8006f20 <HAL_DMA_IRQHandler+0x404>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d03b      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a63      	ldr	r2, [pc, #396]	@ (8006f24 <HAL_DMA_IRQHandler+0x408>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d036      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a61      	ldr	r2, [pc, #388]	@ (8006f28 <HAL_DMA_IRQHandler+0x40c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d031      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a60      	ldr	r2, [pc, #384]	@ (8006f2c <HAL_DMA_IRQHandler+0x410>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d02c      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a5e      	ldr	r2, [pc, #376]	@ (8006f30 <HAL_DMA_IRQHandler+0x414>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d027      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8006f34 <HAL_DMA_IRQHandler+0x418>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d022      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8006f38 <HAL_DMA_IRQHandler+0x41c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01d      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8006f3c <HAL_DMA_IRQHandler+0x420>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d018      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a58      	ldr	r2, [pc, #352]	@ (8006f40 <HAL_DMA_IRQHandler+0x424>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a57      	ldr	r2, [pc, #348]	@ (8006f44 <HAL_DMA_IRQHandler+0x428>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a55      	ldr	r2, [pc, #340]	@ (8006f48 <HAL_DMA_IRQHandler+0x42c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a54      	ldr	r2, [pc, #336]	@ (8006f4c <HAL_DMA_IRQHandler+0x430>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x2ee>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a52      	ldr	r2, [pc, #328]	@ (8006f50 <HAL_DMA_IRQHandler+0x434>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d10a      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x304>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bf14      	ite	ne
 8006e18:	2301      	movne	r3, #1
 8006e1a:	2300      	moveq	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	e003      	b.n	8006e28 <HAL_DMA_IRQHandler+0x30c>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	2201      	movs	r2, #1
 8006e36:	409a      	lsls	r2, r3
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e40:	f043 0202 	orr.w	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2204      	movs	r2, #4
 8006e52:	409a      	lsls	r2, r3
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 808f 	beq.w	8006f7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2c      	ldr	r2, [pc, #176]	@ (8006f14 <HAL_DMA_IRQHandler+0x3f8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d04a      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8006f18 <HAL_DMA_IRQHandler+0x3fc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d045      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a29      	ldr	r2, [pc, #164]	@ (8006f1c <HAL_DMA_IRQHandler+0x400>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d040      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a27      	ldr	r2, [pc, #156]	@ (8006f20 <HAL_DMA_IRQHandler+0x404>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d03b      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a26      	ldr	r2, [pc, #152]	@ (8006f24 <HAL_DMA_IRQHandler+0x408>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d036      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a24      	ldr	r2, [pc, #144]	@ (8006f28 <HAL_DMA_IRQHandler+0x40c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d031      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a23      	ldr	r2, [pc, #140]	@ (8006f2c <HAL_DMA_IRQHandler+0x410>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d02c      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a21      	ldr	r2, [pc, #132]	@ (8006f30 <HAL_DMA_IRQHandler+0x414>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d027      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a20      	ldr	r2, [pc, #128]	@ (8006f34 <HAL_DMA_IRQHandler+0x418>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8006f38 <HAL_DMA_IRQHandler+0x41c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f3c <HAL_DMA_IRQHandler+0x420>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d018      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f40 <HAL_DMA_IRQHandler+0x424>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1a      	ldr	r2, [pc, #104]	@ (8006f44 <HAL_DMA_IRQHandler+0x428>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a18      	ldr	r2, [pc, #96]	@ (8006f48 <HAL_DMA_IRQHandler+0x42c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a17      	ldr	r2, [pc, #92]	@ (8006f4c <HAL_DMA_IRQHandler+0x430>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <HAL_DMA_IRQHandler+0x3e2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a15      	ldr	r2, [pc, #84]	@ (8006f50 <HAL_DMA_IRQHandler+0x434>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d12a      	bne.n	8006f54 <HAL_DMA_IRQHandler+0x438>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	e023      	b.n	8006f5c <HAL_DMA_IRQHandler+0x440>
 8006f14:	40020010 	.word	0x40020010
 8006f18:	40020028 	.word	0x40020028
 8006f1c:	40020040 	.word	0x40020040
 8006f20:	40020058 	.word	0x40020058
 8006f24:	40020070 	.word	0x40020070
 8006f28:	40020088 	.word	0x40020088
 8006f2c:	400200a0 	.word	0x400200a0
 8006f30:	400200b8 	.word	0x400200b8
 8006f34:	40020410 	.word	0x40020410
 8006f38:	40020428 	.word	0x40020428
 8006f3c:	40020440 	.word	0x40020440
 8006f40:	40020458 	.word	0x40020458
 8006f44:	40020470 	.word	0x40020470
 8006f48:	40020488 	.word	0x40020488
 8006f4c:	400204a0 	.word	0x400204a0
 8006f50:	400204b8 	.word	0x400204b8
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00d      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2204      	movs	r2, #4
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f74:	f043 0204 	orr.w	r2, r3, #4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f80:	f003 031f 	and.w	r3, r3, #31
 8006f84:	2210      	movs	r2, #16
 8006f86:	409a      	lsls	r2, r3
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80a6 	beq.w	80070de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a85      	ldr	r2, [pc, #532]	@ (80071ac <HAL_DMA_IRQHandler+0x690>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d04a      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a83      	ldr	r2, [pc, #524]	@ (80071b0 <HAL_DMA_IRQHandler+0x694>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d045      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a82      	ldr	r2, [pc, #520]	@ (80071b4 <HAL_DMA_IRQHandler+0x698>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d040      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a80      	ldr	r2, [pc, #512]	@ (80071b8 <HAL_DMA_IRQHandler+0x69c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03b      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a7f      	ldr	r2, [pc, #508]	@ (80071bc <HAL_DMA_IRQHandler+0x6a0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d036      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a7d      	ldr	r2, [pc, #500]	@ (80071c0 <HAL_DMA_IRQHandler+0x6a4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d031      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a7c      	ldr	r2, [pc, #496]	@ (80071c4 <HAL_DMA_IRQHandler+0x6a8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d02c      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a7a      	ldr	r2, [pc, #488]	@ (80071c8 <HAL_DMA_IRQHandler+0x6ac>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d027      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a79      	ldr	r2, [pc, #484]	@ (80071cc <HAL_DMA_IRQHandler+0x6b0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a77      	ldr	r2, [pc, #476]	@ (80071d0 <HAL_DMA_IRQHandler+0x6b4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a76      	ldr	r2, [pc, #472]	@ (80071d4 <HAL_DMA_IRQHandler+0x6b8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a74      	ldr	r2, [pc, #464]	@ (80071d8 <HAL_DMA_IRQHandler+0x6bc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a73      	ldr	r2, [pc, #460]	@ (80071dc <HAL_DMA_IRQHandler+0x6c0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a71      	ldr	r2, [pc, #452]	@ (80071e0 <HAL_DMA_IRQHandler+0x6c4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a70      	ldr	r2, [pc, #448]	@ (80071e4 <HAL_DMA_IRQHandler+0x6c8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_DMA_IRQHandler+0x516>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6e      	ldr	r2, [pc, #440]	@ (80071e8 <HAL_DMA_IRQHandler+0x6cc>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d10a      	bne.n	8007048 <HAL_DMA_IRQHandler+0x52c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	e009      	b.n	800705c <HAL_DMA_IRQHandler+0x540>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf14      	ite	ne
 8007056:	2301      	movne	r3, #1
 8007058:	2300      	moveq	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d03e      	beq.n	80070de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	2210      	movs	r2, #16
 800706a:	409a      	lsls	r2, r3
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d018      	beq.n	80070b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d108      	bne.n	800709e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d024      	beq.n	80070de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	4798      	blx	r3
 800709c:	e01f      	b.n	80070de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01b      	beq.n	80070de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
 80070ae:	e016      	b.n	80070de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d107      	bne.n	80070ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0208 	bic.w	r2, r2, #8
 80070cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	2220      	movs	r2, #32
 80070e8:	409a      	lsls	r2, r3
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f000 8110 	beq.w	8007314 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2c      	ldr	r2, [pc, #176]	@ (80071ac <HAL_DMA_IRQHandler+0x690>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d04a      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2b      	ldr	r2, [pc, #172]	@ (80071b0 <HAL_DMA_IRQHandler+0x694>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d045      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a29      	ldr	r2, [pc, #164]	@ (80071b4 <HAL_DMA_IRQHandler+0x698>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d040      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a28      	ldr	r2, [pc, #160]	@ (80071b8 <HAL_DMA_IRQHandler+0x69c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d03b      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a26      	ldr	r2, [pc, #152]	@ (80071bc <HAL_DMA_IRQHandler+0x6a0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d036      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a25      	ldr	r2, [pc, #148]	@ (80071c0 <HAL_DMA_IRQHandler+0x6a4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d031      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a23      	ldr	r2, [pc, #140]	@ (80071c4 <HAL_DMA_IRQHandler+0x6a8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d02c      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a22      	ldr	r2, [pc, #136]	@ (80071c8 <HAL_DMA_IRQHandler+0x6ac>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d027      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a20      	ldr	r2, [pc, #128]	@ (80071cc <HAL_DMA_IRQHandler+0x6b0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d022      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1f      	ldr	r2, [pc, #124]	@ (80071d0 <HAL_DMA_IRQHandler+0x6b4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d01d      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1d      	ldr	r2, [pc, #116]	@ (80071d4 <HAL_DMA_IRQHandler+0x6b8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d018      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1c      	ldr	r2, [pc, #112]	@ (80071d8 <HAL_DMA_IRQHandler+0x6bc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1a      	ldr	r2, [pc, #104]	@ (80071dc <HAL_DMA_IRQHandler+0x6c0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00e      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a19      	ldr	r2, [pc, #100]	@ (80071e0 <HAL_DMA_IRQHandler+0x6c4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a17      	ldr	r2, [pc, #92]	@ (80071e4 <HAL_DMA_IRQHandler+0x6c8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <HAL_DMA_IRQHandler+0x678>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a16      	ldr	r2, [pc, #88]	@ (80071e8 <HAL_DMA_IRQHandler+0x6cc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d12b      	bne.n	80071ec <HAL_DMA_IRQHandler+0x6d0>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	e02a      	b.n	8007200 <HAL_DMA_IRQHandler+0x6e4>
 80071aa:	bf00      	nop
 80071ac:	40020010 	.word	0x40020010
 80071b0:	40020028 	.word	0x40020028
 80071b4:	40020040 	.word	0x40020040
 80071b8:	40020058 	.word	0x40020058
 80071bc:	40020070 	.word	0x40020070
 80071c0:	40020088 	.word	0x40020088
 80071c4:	400200a0 	.word	0x400200a0
 80071c8:	400200b8 	.word	0x400200b8
 80071cc:	40020410 	.word	0x40020410
 80071d0:	40020428 	.word	0x40020428
 80071d4:	40020440 	.word	0x40020440
 80071d8:	40020458 	.word	0x40020458
 80071dc:	40020470 	.word	0x40020470
 80071e0:	40020488 	.word	0x40020488
 80071e4:	400204a0 	.word	0x400204a0
 80071e8:	400204b8 	.word	0x400204b8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bf14      	ite	ne
 80071fa:	2301      	movne	r3, #1
 80071fc:	2300      	moveq	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8087 	beq.w	8007314 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	2220      	movs	r2, #32
 8007210:	409a      	lsls	r2, r3
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b04      	cmp	r3, #4
 8007220:	d139      	bne.n	8007296 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0216 	bic.w	r2, r2, #22
 8007230:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007240:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <HAL_DMA_IRQHandler+0x736>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0208 	bic.w	r2, r2, #8
 8007260:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	223f      	movs	r2, #63	@ 0x3f
 800726c:	409a      	lsls	r2, r3
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 834a 	beq.w	8007920 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
          }
          return;
 8007294:	e344      	b.n	8007920 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d018      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d108      	bne.n	80072c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d02c      	beq.n	8007314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
 80072c2:	e027      	b.n	8007314 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d023      	beq.n	8007314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
 80072d4:	e01e      	b.n	8007314 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10f      	bne.n	8007304 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0210 	bic.w	r2, r2, #16
 80072f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8306 	beq.w	800792a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8088 	beq.w	800743c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2204      	movs	r2, #4
 8007330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a7a      	ldr	r2, [pc, #488]	@ (8007524 <HAL_DMA_IRQHandler+0xa08>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d04a      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a79      	ldr	r2, [pc, #484]	@ (8007528 <HAL_DMA_IRQHandler+0xa0c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d045      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a77      	ldr	r2, [pc, #476]	@ (800752c <HAL_DMA_IRQHandler+0xa10>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d040      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a76      	ldr	r2, [pc, #472]	@ (8007530 <HAL_DMA_IRQHandler+0xa14>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d03b      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a74      	ldr	r2, [pc, #464]	@ (8007534 <HAL_DMA_IRQHandler+0xa18>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d036      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a73      	ldr	r2, [pc, #460]	@ (8007538 <HAL_DMA_IRQHandler+0xa1c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d031      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a71      	ldr	r2, [pc, #452]	@ (800753c <HAL_DMA_IRQHandler+0xa20>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d02c      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a70      	ldr	r2, [pc, #448]	@ (8007540 <HAL_DMA_IRQHandler+0xa24>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d027      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6e      	ldr	r2, [pc, #440]	@ (8007544 <HAL_DMA_IRQHandler+0xa28>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d022      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a6d      	ldr	r2, [pc, #436]	@ (8007548 <HAL_DMA_IRQHandler+0xa2c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01d      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6b      	ldr	r2, [pc, #428]	@ (800754c <HAL_DMA_IRQHandler+0xa30>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d018      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a6a      	ldr	r2, [pc, #424]	@ (8007550 <HAL_DMA_IRQHandler+0xa34>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a68      	ldr	r2, [pc, #416]	@ (8007554 <HAL_DMA_IRQHandler+0xa38>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a67      	ldr	r2, [pc, #412]	@ (8007558 <HAL_DMA_IRQHandler+0xa3c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a65      	ldr	r2, [pc, #404]	@ (800755c <HAL_DMA_IRQHandler+0xa40>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_DMA_IRQHandler+0x8b8>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a64      	ldr	r2, [pc, #400]	@ (8007560 <HAL_DMA_IRQHandler+0xa44>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d108      	bne.n	80073e6 <HAL_DMA_IRQHandler+0x8ca>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e007      	b.n	80073f6 <HAL_DMA_IRQHandler+0x8da>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fe:	429a      	cmp	r2, r3
 8007400:	d307      	bcc.n	8007412 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f2      	bne.n	80073f6 <HAL_DMA_IRQHandler+0x8da>
 8007410:	e000      	b.n	8007414 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007412:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2203      	movs	r2, #3
 8007426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800742a:	e003      	b.n	8007434 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8272 	beq.w	800792a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
 800744e:	e26c      	b.n	800792a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a43      	ldr	r2, [pc, #268]	@ (8007564 <HAL_DMA_IRQHandler+0xa48>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d022      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x984>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a42      	ldr	r2, [pc, #264]	@ (8007568 <HAL_DMA_IRQHandler+0xa4c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d01d      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x984>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a40      	ldr	r2, [pc, #256]	@ (800756c <HAL_DMA_IRQHandler+0xa50>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d018      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x984>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a3f      	ldr	r2, [pc, #252]	@ (8007570 <HAL_DMA_IRQHandler+0xa54>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x984>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a3d      	ldr	r2, [pc, #244]	@ (8007574 <HAL_DMA_IRQHandler+0xa58>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x984>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a3c      	ldr	r2, [pc, #240]	@ (8007578 <HAL_DMA_IRQHandler+0xa5c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x984>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a3a      	ldr	r2, [pc, #232]	@ (800757c <HAL_DMA_IRQHandler+0xa60>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x984>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a39      	ldr	r2, [pc, #228]	@ (8007580 <HAL_DMA_IRQHandler+0xa64>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d101      	bne.n	80074a4 <HAL_DMA_IRQHandler+0x988>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e000      	b.n	80074a6 <HAL_DMA_IRQHandler+0x98a>
 80074a4:	2300      	movs	r3, #0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 823f 	beq.w	800792a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2204      	movs	r2, #4
 80074be:	409a      	lsls	r2, r3
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80cd 	beq.w	8007664 <HAL_DMA_IRQHandler+0xb48>
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80c7 	beq.w	8007664 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	2204      	movs	r2, #4
 80074e0:	409a      	lsls	r2, r3
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d049      	beq.n	8007584 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 8210 	beq.w	8007924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800750c:	e20a      	b.n	8007924 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 8206 	beq.w	8007924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007520:	e200      	b.n	8007924 <HAL_DMA_IRQHandler+0xe08>
 8007522:	bf00      	nop
 8007524:	40020010 	.word	0x40020010
 8007528:	40020028 	.word	0x40020028
 800752c:	40020040 	.word	0x40020040
 8007530:	40020058 	.word	0x40020058
 8007534:	40020070 	.word	0x40020070
 8007538:	40020088 	.word	0x40020088
 800753c:	400200a0 	.word	0x400200a0
 8007540:	400200b8 	.word	0x400200b8
 8007544:	40020410 	.word	0x40020410
 8007548:	40020428 	.word	0x40020428
 800754c:	40020440 	.word	0x40020440
 8007550:	40020458 	.word	0x40020458
 8007554:	40020470 	.word	0x40020470
 8007558:	40020488 	.word	0x40020488
 800755c:	400204a0 	.word	0x400204a0
 8007560:	400204b8 	.word	0x400204b8
 8007564:	58025408 	.word	0x58025408
 8007568:	5802541c 	.word	0x5802541c
 800756c:	58025430 	.word	0x58025430
 8007570:	58025444 	.word	0x58025444
 8007574:	58025458 	.word	0x58025458
 8007578:	5802546c 	.word	0x5802546c
 800757c:	58025480 	.word	0x58025480
 8007580:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d160      	bne.n	8007650 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a7f      	ldr	r2, [pc, #508]	@ (8007790 <HAL_DMA_IRQHandler+0xc74>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d04a      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a7d      	ldr	r2, [pc, #500]	@ (8007794 <HAL_DMA_IRQHandler+0xc78>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d045      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a7c      	ldr	r2, [pc, #496]	@ (8007798 <HAL_DMA_IRQHandler+0xc7c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d040      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a7a      	ldr	r2, [pc, #488]	@ (800779c <HAL_DMA_IRQHandler+0xc80>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d03b      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a79      	ldr	r2, [pc, #484]	@ (80077a0 <HAL_DMA_IRQHandler+0xc84>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d036      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a77      	ldr	r2, [pc, #476]	@ (80077a4 <HAL_DMA_IRQHandler+0xc88>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d031      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a76      	ldr	r2, [pc, #472]	@ (80077a8 <HAL_DMA_IRQHandler+0xc8c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d02c      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a74      	ldr	r2, [pc, #464]	@ (80077ac <HAL_DMA_IRQHandler+0xc90>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d027      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a73      	ldr	r2, [pc, #460]	@ (80077b0 <HAL_DMA_IRQHandler+0xc94>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d022      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a71      	ldr	r2, [pc, #452]	@ (80077b4 <HAL_DMA_IRQHandler+0xc98>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d01d      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a70      	ldr	r2, [pc, #448]	@ (80077b8 <HAL_DMA_IRQHandler+0xc9c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d018      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a6e      	ldr	r2, [pc, #440]	@ (80077bc <HAL_DMA_IRQHandler+0xca0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d013      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a6d      	ldr	r2, [pc, #436]	@ (80077c0 <HAL_DMA_IRQHandler+0xca4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00e      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a6b      	ldr	r2, [pc, #428]	@ (80077c4 <HAL_DMA_IRQHandler+0xca8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d009      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a6a      	ldr	r2, [pc, #424]	@ (80077c8 <HAL_DMA_IRQHandler+0xcac>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d004      	beq.n	800762e <HAL_DMA_IRQHandler+0xb12>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a68      	ldr	r2, [pc, #416]	@ (80077cc <HAL_DMA_IRQHandler+0xcb0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d108      	bne.n	8007640 <HAL_DMA_IRQHandler+0xb24>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0208 	bic.w	r2, r2, #8
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e007      	b.n	8007650 <HAL_DMA_IRQHandler+0xb34>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0204 	bic.w	r2, r2, #4
 800764e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8165 	beq.w	8007924 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007662:	e15f      	b.n	8007924 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007668:	f003 031f 	and.w	r3, r3, #31
 800766c:	2202      	movs	r2, #2
 800766e:	409a      	lsls	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4013      	ands	r3, r2
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80c5 	beq.w	8007804 <HAL_DMA_IRQHandler+0xce8>
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80bf 	beq.w	8007804 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800768a:	f003 031f 	and.w	r3, r3, #31
 800768e:	2202      	movs	r2, #2
 8007690:	409a      	lsls	r2, r3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d018      	beq.n	80076d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 813a 	beq.w	8007928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076bc:	e134      	b.n	8007928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 8130 	beq.w	8007928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076d0:	e12a      	b.n	8007928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f040 8089 	bne.w	80077f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007790 <HAL_DMA_IRQHandler+0xc74>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d04a      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a29      	ldr	r2, [pc, #164]	@ (8007794 <HAL_DMA_IRQHandler+0xc78>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d045      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a28      	ldr	r2, [pc, #160]	@ (8007798 <HAL_DMA_IRQHandler+0xc7c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d040      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a26      	ldr	r2, [pc, #152]	@ (800779c <HAL_DMA_IRQHandler+0xc80>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d03b      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a25      	ldr	r2, [pc, #148]	@ (80077a0 <HAL_DMA_IRQHandler+0xc84>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d036      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a23      	ldr	r2, [pc, #140]	@ (80077a4 <HAL_DMA_IRQHandler+0xc88>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d031      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a22      	ldr	r2, [pc, #136]	@ (80077a8 <HAL_DMA_IRQHandler+0xc8c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d02c      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a20      	ldr	r2, [pc, #128]	@ (80077ac <HAL_DMA_IRQHandler+0xc90>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d027      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1f      	ldr	r2, [pc, #124]	@ (80077b0 <HAL_DMA_IRQHandler+0xc94>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d022      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1d      	ldr	r2, [pc, #116]	@ (80077b4 <HAL_DMA_IRQHandler+0xc98>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01d      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1c      	ldr	r2, [pc, #112]	@ (80077b8 <HAL_DMA_IRQHandler+0xc9c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d018      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1a      	ldr	r2, [pc, #104]	@ (80077bc <HAL_DMA_IRQHandler+0xca0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d013      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a19      	ldr	r2, [pc, #100]	@ (80077c0 <HAL_DMA_IRQHandler+0xca4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00e      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a17      	ldr	r2, [pc, #92]	@ (80077c4 <HAL_DMA_IRQHandler+0xca8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d009      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a16      	ldr	r2, [pc, #88]	@ (80077c8 <HAL_DMA_IRQHandler+0xcac>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d004      	beq.n	800777e <HAL_DMA_IRQHandler+0xc62>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a14      	ldr	r2, [pc, #80]	@ (80077cc <HAL_DMA_IRQHandler+0xcb0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d128      	bne.n	80077d0 <HAL_DMA_IRQHandler+0xcb4>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0214 	bic.w	r2, r2, #20
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e027      	b.n	80077e0 <HAL_DMA_IRQHandler+0xcc4>
 8007790:	40020010 	.word	0x40020010
 8007794:	40020028 	.word	0x40020028
 8007798:	40020040 	.word	0x40020040
 800779c:	40020058 	.word	0x40020058
 80077a0:	40020070 	.word	0x40020070
 80077a4:	40020088 	.word	0x40020088
 80077a8:	400200a0 	.word	0x400200a0
 80077ac:	400200b8 	.word	0x400200b8
 80077b0:	40020410 	.word	0x40020410
 80077b4:	40020428 	.word	0x40020428
 80077b8:	40020440 	.word	0x40020440
 80077bc:	40020458 	.word	0x40020458
 80077c0:	40020470 	.word	0x40020470
 80077c4:	40020488 	.word	0x40020488
 80077c8:	400204a0 	.word	0x400204a0
 80077cc:	400204b8 	.word	0x400204b8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 020a 	bic.w	r2, r2, #10
 80077de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8097 	beq.w	8007928 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007802:	e091      	b.n	8007928 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007808:	f003 031f 	and.w	r3, r3, #31
 800780c:	2208      	movs	r2, #8
 800780e:	409a      	lsls	r2, r3
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	4013      	ands	r3, r2
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8088 	beq.w	800792a <HAL_DMA_IRQHandler+0xe0e>
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8082 	beq.w	800792a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a41      	ldr	r2, [pc, #260]	@ (8007930 <HAL_DMA_IRQHandler+0xe14>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d04a      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a3f      	ldr	r2, [pc, #252]	@ (8007934 <HAL_DMA_IRQHandler+0xe18>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d045      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a3e      	ldr	r2, [pc, #248]	@ (8007938 <HAL_DMA_IRQHandler+0xe1c>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d040      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a3c      	ldr	r2, [pc, #240]	@ (800793c <HAL_DMA_IRQHandler+0xe20>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d03b      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a3b      	ldr	r2, [pc, #236]	@ (8007940 <HAL_DMA_IRQHandler+0xe24>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d036      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a39      	ldr	r2, [pc, #228]	@ (8007944 <HAL_DMA_IRQHandler+0xe28>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d031      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a38      	ldr	r2, [pc, #224]	@ (8007948 <HAL_DMA_IRQHandler+0xe2c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d02c      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a36      	ldr	r2, [pc, #216]	@ (800794c <HAL_DMA_IRQHandler+0xe30>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d027      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a35      	ldr	r2, [pc, #212]	@ (8007950 <HAL_DMA_IRQHandler+0xe34>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d022      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a33      	ldr	r2, [pc, #204]	@ (8007954 <HAL_DMA_IRQHandler+0xe38>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d01d      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a32      	ldr	r2, [pc, #200]	@ (8007958 <HAL_DMA_IRQHandler+0xe3c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d018      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a30      	ldr	r2, [pc, #192]	@ (800795c <HAL_DMA_IRQHandler+0xe40>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d013      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a2f      	ldr	r2, [pc, #188]	@ (8007960 <HAL_DMA_IRQHandler+0xe44>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00e      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007964 <HAL_DMA_IRQHandler+0xe48>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d009      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007968 <HAL_DMA_IRQHandler+0xe4c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_DMA_IRQHandler+0xdaa>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a2a      	ldr	r2, [pc, #168]	@ (800796c <HAL_DMA_IRQHandler+0xe50>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d108      	bne.n	80078d8 <HAL_DMA_IRQHandler+0xdbc>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 021c 	bic.w	r2, r2, #28
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e007      	b.n	80078e8 <HAL_DMA_IRQHandler+0xdcc>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 020e 	bic.w	r2, r2, #14
 80078e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2201      	movs	r2, #1
 80078f2:	409a      	lsls	r2, r3
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
 800791e:	e004      	b.n	800792a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007920:	bf00      	nop
 8007922:	e002      	b.n	800792a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007924:	bf00      	nop
 8007926:	e000      	b.n	800792a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007928:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800792a:	3728      	adds	r7, #40	@ 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40020010 	.word	0x40020010
 8007934:	40020028 	.word	0x40020028
 8007938:	40020040 	.word	0x40020040
 800793c:	40020058 	.word	0x40020058
 8007940:	40020070 	.word	0x40020070
 8007944:	40020088 	.word	0x40020088
 8007948:	400200a0 	.word	0x400200a0
 800794c:	400200b8 	.word	0x400200b8
 8007950:	40020410 	.word	0x40020410
 8007954:	40020428 	.word	0x40020428
 8007958:	40020440 	.word	0x40020440
 800795c:	40020458 	.word	0x40020458
 8007960:	40020470 	.word	0x40020470
 8007964:	40020488 	.word	0x40020488
 8007968:	400204a0 	.word	0x400204a0
 800796c:	400204b8 	.word	0x400204b8

08007970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007988:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a7f      	ldr	r2, [pc, #508]	@ (8007b8c <DMA_SetConfig+0x21c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d072      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a7d      	ldr	r2, [pc, #500]	@ (8007b90 <DMA_SetConfig+0x220>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d06d      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a7c      	ldr	r2, [pc, #496]	@ (8007b94 <DMA_SetConfig+0x224>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d068      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a7a      	ldr	r2, [pc, #488]	@ (8007b98 <DMA_SetConfig+0x228>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d063      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a79      	ldr	r2, [pc, #484]	@ (8007b9c <DMA_SetConfig+0x22c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d05e      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a77      	ldr	r2, [pc, #476]	@ (8007ba0 <DMA_SetConfig+0x230>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d059      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a76      	ldr	r2, [pc, #472]	@ (8007ba4 <DMA_SetConfig+0x234>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d054      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a74      	ldr	r2, [pc, #464]	@ (8007ba8 <DMA_SetConfig+0x238>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d04f      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a73      	ldr	r2, [pc, #460]	@ (8007bac <DMA_SetConfig+0x23c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d04a      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a71      	ldr	r2, [pc, #452]	@ (8007bb0 <DMA_SetConfig+0x240>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d045      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a70      	ldr	r2, [pc, #448]	@ (8007bb4 <DMA_SetConfig+0x244>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d040      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a6e      	ldr	r2, [pc, #440]	@ (8007bb8 <DMA_SetConfig+0x248>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d03b      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a6d      	ldr	r2, [pc, #436]	@ (8007bbc <DMA_SetConfig+0x24c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d036      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a6b      	ldr	r2, [pc, #428]	@ (8007bc0 <DMA_SetConfig+0x250>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d031      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a6a      	ldr	r2, [pc, #424]	@ (8007bc4 <DMA_SetConfig+0x254>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d02c      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a68      	ldr	r2, [pc, #416]	@ (8007bc8 <DMA_SetConfig+0x258>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a67      	ldr	r2, [pc, #412]	@ (8007bcc <DMA_SetConfig+0x25c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d022      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a65      	ldr	r2, [pc, #404]	@ (8007bd0 <DMA_SetConfig+0x260>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01d      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a64      	ldr	r2, [pc, #400]	@ (8007bd4 <DMA_SetConfig+0x264>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a62      	ldr	r2, [pc, #392]	@ (8007bd8 <DMA_SetConfig+0x268>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a61      	ldr	r2, [pc, #388]	@ (8007bdc <DMA_SetConfig+0x26c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a5f      	ldr	r2, [pc, #380]	@ (8007be0 <DMA_SetConfig+0x270>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a5e      	ldr	r2, [pc, #376]	@ (8007be4 <DMA_SetConfig+0x274>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a5c      	ldr	r2, [pc, #368]	@ (8007be8 <DMA_SetConfig+0x278>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d101      	bne.n	8007a7e <DMA_SetConfig+0x10e>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <DMA_SetConfig+0x110>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00d      	beq.n	8007aa0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007a8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007a9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a39      	ldr	r2, [pc, #228]	@ (8007b8c <DMA_SetConfig+0x21c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d04a      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a38      	ldr	r2, [pc, #224]	@ (8007b90 <DMA_SetConfig+0x220>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d045      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a36      	ldr	r2, [pc, #216]	@ (8007b94 <DMA_SetConfig+0x224>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d040      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a35      	ldr	r2, [pc, #212]	@ (8007b98 <DMA_SetConfig+0x228>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d03b      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a33      	ldr	r2, [pc, #204]	@ (8007b9c <DMA_SetConfig+0x22c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d036      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a32      	ldr	r2, [pc, #200]	@ (8007ba0 <DMA_SetConfig+0x230>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d031      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a30      	ldr	r2, [pc, #192]	@ (8007ba4 <DMA_SetConfig+0x234>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d02c      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2f      	ldr	r2, [pc, #188]	@ (8007ba8 <DMA_SetConfig+0x238>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d027      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2d      	ldr	r2, [pc, #180]	@ (8007bac <DMA_SetConfig+0x23c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d022      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a2c      	ldr	r2, [pc, #176]	@ (8007bb0 <DMA_SetConfig+0x240>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d01d      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a2a      	ldr	r2, [pc, #168]	@ (8007bb4 <DMA_SetConfig+0x244>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d018      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a29      	ldr	r2, [pc, #164]	@ (8007bb8 <DMA_SetConfig+0x248>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a27      	ldr	r2, [pc, #156]	@ (8007bbc <DMA_SetConfig+0x24c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00e      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a26      	ldr	r2, [pc, #152]	@ (8007bc0 <DMA_SetConfig+0x250>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a24      	ldr	r2, [pc, #144]	@ (8007bc4 <DMA_SetConfig+0x254>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a23      	ldr	r2, [pc, #140]	@ (8007bc8 <DMA_SetConfig+0x258>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d101      	bne.n	8007b44 <DMA_SetConfig+0x1d4>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <DMA_SetConfig+0x1d6>
 8007b44:	2300      	movs	r3, #0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d059      	beq.n	8007bfe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	223f      	movs	r2, #63	@ 0x3f
 8007b54:	409a      	lsls	r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007b68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d138      	bne.n	8007bec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b8a:	e086      	b.n	8007c9a <DMA_SetConfig+0x32a>
 8007b8c:	40020010 	.word	0x40020010
 8007b90:	40020028 	.word	0x40020028
 8007b94:	40020040 	.word	0x40020040
 8007b98:	40020058 	.word	0x40020058
 8007b9c:	40020070 	.word	0x40020070
 8007ba0:	40020088 	.word	0x40020088
 8007ba4:	400200a0 	.word	0x400200a0
 8007ba8:	400200b8 	.word	0x400200b8
 8007bac:	40020410 	.word	0x40020410
 8007bb0:	40020428 	.word	0x40020428
 8007bb4:	40020440 	.word	0x40020440
 8007bb8:	40020458 	.word	0x40020458
 8007bbc:	40020470 	.word	0x40020470
 8007bc0:	40020488 	.word	0x40020488
 8007bc4:	400204a0 	.word	0x400204a0
 8007bc8:	400204b8 	.word	0x400204b8
 8007bcc:	58025408 	.word	0x58025408
 8007bd0:	5802541c 	.word	0x5802541c
 8007bd4:	58025430 	.word	0x58025430
 8007bd8:	58025444 	.word	0x58025444
 8007bdc:	58025458 	.word	0x58025458
 8007be0:	5802546c 	.word	0x5802546c
 8007be4:	58025480 	.word	0x58025480
 8007be8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]
}
 8007bfc:	e04d      	b.n	8007c9a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a29      	ldr	r2, [pc, #164]	@ (8007ca8 <DMA_SetConfig+0x338>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d022      	beq.n	8007c4e <DMA_SetConfig+0x2de>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a27      	ldr	r2, [pc, #156]	@ (8007cac <DMA_SetConfig+0x33c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01d      	beq.n	8007c4e <DMA_SetConfig+0x2de>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a26      	ldr	r2, [pc, #152]	@ (8007cb0 <DMA_SetConfig+0x340>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d018      	beq.n	8007c4e <DMA_SetConfig+0x2de>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a24      	ldr	r2, [pc, #144]	@ (8007cb4 <DMA_SetConfig+0x344>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <DMA_SetConfig+0x2de>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a23      	ldr	r2, [pc, #140]	@ (8007cb8 <DMA_SetConfig+0x348>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00e      	beq.n	8007c4e <DMA_SetConfig+0x2de>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a21      	ldr	r2, [pc, #132]	@ (8007cbc <DMA_SetConfig+0x34c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d009      	beq.n	8007c4e <DMA_SetConfig+0x2de>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a20      	ldr	r2, [pc, #128]	@ (8007cc0 <DMA_SetConfig+0x350>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <DMA_SetConfig+0x2de>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc4 <DMA_SetConfig+0x354>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d101      	bne.n	8007c52 <DMA_SetConfig+0x2e2>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <DMA_SetConfig+0x2e4>
 8007c52:	2300      	movs	r3, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d020      	beq.n	8007c9a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	2201      	movs	r2, #1
 8007c62:	409a      	lsls	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b40      	cmp	r3, #64	@ 0x40
 8007c76:	d108      	bne.n	8007c8a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	60da      	str	r2, [r3, #12]
}
 8007c88:	e007      	b.n	8007c9a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]
}
 8007c9a:	bf00      	nop
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	58025408 	.word	0x58025408
 8007cac:	5802541c 	.word	0x5802541c
 8007cb0:	58025430 	.word	0x58025430
 8007cb4:	58025444 	.word	0x58025444
 8007cb8:	58025458 	.word	0x58025458
 8007cbc:	5802546c 	.word	0x5802546c
 8007cc0:	58025480 	.word	0x58025480
 8007cc4:	58025494 	.word	0x58025494

08007cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a42      	ldr	r2, [pc, #264]	@ (8007de0 <DMA_CalcBaseAndBitshift+0x118>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d04a      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a41      	ldr	r2, [pc, #260]	@ (8007de4 <DMA_CalcBaseAndBitshift+0x11c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d045      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8007de8 <DMA_CalcBaseAndBitshift+0x120>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d040      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8007dec <DMA_CalcBaseAndBitshift+0x124>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d03b      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8007df0 <DMA_CalcBaseAndBitshift+0x128>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d036      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a3b      	ldr	r2, [pc, #236]	@ (8007df4 <DMA_CalcBaseAndBitshift+0x12c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d031      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a39      	ldr	r2, [pc, #228]	@ (8007df8 <DMA_CalcBaseAndBitshift+0x130>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d02c      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a38      	ldr	r2, [pc, #224]	@ (8007dfc <DMA_CalcBaseAndBitshift+0x134>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d027      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a36      	ldr	r2, [pc, #216]	@ (8007e00 <DMA_CalcBaseAndBitshift+0x138>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d022      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a35      	ldr	r2, [pc, #212]	@ (8007e04 <DMA_CalcBaseAndBitshift+0x13c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d01d      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a33      	ldr	r2, [pc, #204]	@ (8007e08 <DMA_CalcBaseAndBitshift+0x140>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d018      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a32      	ldr	r2, [pc, #200]	@ (8007e0c <DMA_CalcBaseAndBitshift+0x144>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d013      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a30      	ldr	r2, [pc, #192]	@ (8007e10 <DMA_CalcBaseAndBitshift+0x148>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00e      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a2f      	ldr	r2, [pc, #188]	@ (8007e14 <DMA_CalcBaseAndBitshift+0x14c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d009      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a2d      	ldr	r2, [pc, #180]	@ (8007e18 <DMA_CalcBaseAndBitshift+0x150>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d004      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8007e1c <DMA_CalcBaseAndBitshift+0x154>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d101      	bne.n	8007d74 <DMA_CalcBaseAndBitshift+0xac>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <DMA_CalcBaseAndBitshift+0xae>
 8007d74:	2300      	movs	r3, #0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d024      	beq.n	8007dc4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	3b10      	subs	r3, #16
 8007d82:	4a27      	ldr	r2, [pc, #156]	@ (8007e20 <DMA_CalcBaseAndBitshift+0x158>)
 8007d84:	fba2 2303 	umull	r2, r3, r2, r3
 8007d88:	091b      	lsrs	r3, r3, #4
 8007d8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	4a24      	ldr	r2, [pc, #144]	@ (8007e24 <DMA_CalcBaseAndBitshift+0x15c>)
 8007d94:	5cd3      	ldrb	r3, [r2, r3]
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d908      	bls.n	8007db4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	4b1f      	ldr	r3, [pc, #124]	@ (8007e28 <DMA_CalcBaseAndBitshift+0x160>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	1d1a      	adds	r2, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	659a      	str	r2, [r3, #88]	@ 0x58
 8007db2:	e00d      	b.n	8007dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <DMA_CalcBaseAndBitshift+0x160>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dc2:	e005      	b.n	8007dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	40020010 	.word	0x40020010
 8007de4:	40020028 	.word	0x40020028
 8007de8:	40020040 	.word	0x40020040
 8007dec:	40020058 	.word	0x40020058
 8007df0:	40020070 	.word	0x40020070
 8007df4:	40020088 	.word	0x40020088
 8007df8:	400200a0 	.word	0x400200a0
 8007dfc:	400200b8 	.word	0x400200b8
 8007e00:	40020410 	.word	0x40020410
 8007e04:	40020428 	.word	0x40020428
 8007e08:	40020440 	.word	0x40020440
 8007e0c:	40020458 	.word	0x40020458
 8007e10:	40020470 	.word	0x40020470
 8007e14:	40020488 	.word	0x40020488
 8007e18:	400204a0 	.word	0x400204a0
 8007e1c:	400204b8 	.word	0x400204b8
 8007e20:	aaaaaaab 	.word	0xaaaaaaab
 8007e24:	08015618 	.word	0x08015618
 8007e28:	fffffc00 	.word	0xfffffc00

08007e2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d120      	bne.n	8007e82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d858      	bhi.n	8007efa <DMA_CheckFifoParam+0xce>
 8007e48:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <DMA_CheckFifoParam+0x24>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e73 	.word	0x08007e73
 8007e58:	08007e61 	.word	0x08007e61
 8007e5c:	08007efb 	.word	0x08007efb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d048      	beq.n	8007efe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e70:	e045      	b.n	8007efe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007e7a:	d142      	bne.n	8007f02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e80:	e03f      	b.n	8007f02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e8a:	d123      	bne.n	8007ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d838      	bhi.n	8007f06 <DMA_CheckFifoParam+0xda>
 8007e94:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <DMA_CheckFifoParam+0x70>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007eb3 	.word	0x08007eb3
 8007ea4:	08007ead 	.word	0x08007ead
 8007ea8:	08007ec5 	.word	0x08007ec5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
        break;
 8007eb0:	e030      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d025      	beq.n	8007f0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ec2:	e022      	b.n	8007f0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007ecc:	d11f      	bne.n	8007f0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ed2:	e01c      	b.n	8007f0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d902      	bls.n	8007ee2 <DMA_CheckFifoParam+0xb6>
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d003      	beq.n	8007ee8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ee0:	e018      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ee6:	e015      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00e      	beq.n	8007f12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef8:	e00b      	b.n	8007f12 <DMA_CheckFifoParam+0xe6>
        break;
 8007efa:	bf00      	nop
 8007efc:	e00a      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007efe:	bf00      	nop
 8007f00:	e008      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f02:	bf00      	nop
 8007f04:	e006      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f06:	bf00      	nop
 8007f08:	e004      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
    break;
 8007f12:	bf00      	nop
    }
  }

  return status;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop

08007f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a38      	ldr	r2, [pc, #224]	@ (8008018 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d022      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a36      	ldr	r2, [pc, #216]	@ (800801c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01d      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a35      	ldr	r2, [pc, #212]	@ (8008020 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d018      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a33      	ldr	r2, [pc, #204]	@ (8008024 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a32      	ldr	r2, [pc, #200]	@ (8008028 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a30      	ldr	r2, [pc, #192]	@ (800802c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2f      	ldr	r2, [pc, #188]	@ (8008030 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8008034 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d101      	bne.n	8007f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01a      	beq.n	8007fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	3b08      	subs	r3, #8
 8007f94:	4a28      	ldr	r2, [pc, #160]	@ (8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007f96:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9a:	091b      	lsrs	r3, r3, #4
 8007f9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4b26      	ldr	r3, [pc, #152]	@ (800803c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a24      	ldr	r2, [pc, #144]	@ (8008040 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007fb0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2201      	movs	r2, #1
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007fc0:	e024      	b.n	800800c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	3b10      	subs	r3, #16
 8007fca:	4a1e      	ldr	r2, [pc, #120]	@ (8008044 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd0:	091b      	lsrs	r3, r3, #4
 8007fd2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8008048 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d806      	bhi.n	8007fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4a1b      	ldr	r2, [pc, #108]	@ (800804c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d902      	bls.n	8007fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4b18      	ldr	r3, [pc, #96]	@ (8008050 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a16      	ldr	r2, [pc, #88]	@ (8008054 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ffc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	2201      	movs	r2, #1
 8008006:	409a      	lsls	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800800c:	bf00      	nop
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	58025408 	.word	0x58025408
 800801c:	5802541c 	.word	0x5802541c
 8008020:	58025430 	.word	0x58025430
 8008024:	58025444 	.word	0x58025444
 8008028:	58025458 	.word	0x58025458
 800802c:	5802546c 	.word	0x5802546c
 8008030:	58025480 	.word	0x58025480
 8008034:	58025494 	.word	0x58025494
 8008038:	cccccccd 	.word	0xcccccccd
 800803c:	16009600 	.word	0x16009600
 8008040:	58025880 	.word	0x58025880
 8008044:	aaaaaaab 	.word	0xaaaaaaab
 8008048:	400204b8 	.word	0x400204b8
 800804c:	4002040f 	.word	0x4002040f
 8008050:	10008200 	.word	0x10008200
 8008054:	40020880 	.word	0x40020880

08008058 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d04a      	beq.n	8008104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b08      	cmp	r3, #8
 8008072:	d847      	bhi.n	8008104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a25      	ldr	r2, [pc, #148]	@ (8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d022      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a24      	ldr	r2, [pc, #144]	@ (8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d01d      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a22      	ldr	r2, [pc, #136]	@ (8008118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d018      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a21      	ldr	r2, [pc, #132]	@ (800811c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d013      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00e      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1b      	ldr	r2, [pc, #108]	@ (800812c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d101      	bne.n	80080c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4b17      	ldr	r3, [pc, #92]	@ (8008130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a15      	ldr	r2, [pc, #84]	@ (8008134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80080e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80080e2:	e009      	b.n	80080f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a11      	ldr	r2, [pc, #68]	@ (800813c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80080f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	2201      	movs	r2, #1
 80080fe:	409a      	lsls	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	58025408 	.word	0x58025408
 8008114:	5802541c 	.word	0x5802541c
 8008118:	58025430 	.word	0x58025430
 800811c:	58025444 	.word	0x58025444
 8008120:	58025458 	.word	0x58025458
 8008124:	5802546c 	.word	0x5802546c
 8008128:	58025480 	.word	0x58025480
 800812c:	58025494 	.word	0x58025494
 8008130:	1600963f 	.word	0x1600963f
 8008134:	58025940 	.word	0x58025940
 8008138:	1000823f 	.word	0x1000823f
 800813c:	40020940 	.word	0x40020940

08008140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	@ 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800814a:	2300      	movs	r3, #0
 800814c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800814e:	4b89      	ldr	r3, [pc, #548]	@ (8008374 <HAL_GPIO_Init+0x234>)
 8008150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008152:	e194      	b.n	800847e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	2101      	movs	r1, #1
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	fa01 f303 	lsl.w	r3, r1, r3
 8008160:	4013      	ands	r3, r2
 8008162:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8186 	beq.w	8008478 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	2b01      	cmp	r3, #1
 8008176:	d005      	beq.n	8008184 <HAL_GPIO_Init+0x44>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f003 0303 	and.w	r3, r3, #3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d130      	bne.n	80081e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	2203      	movs	r2, #3
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	43db      	mvns	r3, r3
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	4013      	ands	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081ba:	2201      	movs	r2, #1
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	43db      	mvns	r3, r3
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	4013      	ands	r3, r2
 80081c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	091b      	lsrs	r3, r3, #4
 80081d0:	f003 0201 	and.w	r2, r3, #1
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	fa02 f303 	lsl.w	r3, r2, r3
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	4313      	orrs	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d017      	beq.n	8008222 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	2203      	movs	r2, #3
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43db      	mvns	r3, r3
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	4013      	ands	r3, r2
 8008208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	4313      	orrs	r3, r2
 800821a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	2b02      	cmp	r3, #2
 800822c:	d123      	bne.n	8008276 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	08da      	lsrs	r2, r3, #3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3208      	adds	r2, #8
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	220f      	movs	r2, #15
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43db      	mvns	r3, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	4013      	ands	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	4313      	orrs	r3, r2
 8008266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	08da      	lsrs	r2, r3, #3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3208      	adds	r2, #8
 8008270:	69b9      	ldr	r1, [r7, #24]
 8008272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	2203      	movs	r2, #3
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	43db      	mvns	r3, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4013      	ands	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 0203 	and.w	r2, r3, #3
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80e0 	beq.w	8008478 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008378 <HAL_GPIO_Init+0x238>)
 80082ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082be:	4a2e      	ldr	r2, [pc, #184]	@ (8008378 <HAL_GPIO_Init+0x238>)
 80082c0:	f043 0302 	orr.w	r3, r3, #2
 80082c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80082c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008378 <HAL_GPIO_Init+0x238>)
 80082ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082d6:	4a29      	ldr	r2, [pc, #164]	@ (800837c <HAL_GPIO_Init+0x23c>)
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	089b      	lsrs	r3, r3, #2
 80082dc:	3302      	adds	r3, #2
 80082de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	220f      	movs	r2, #15
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	4013      	ands	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a20      	ldr	r2, [pc, #128]	@ (8008380 <HAL_GPIO_Init+0x240>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d052      	beq.n	80083a8 <HAL_GPIO_Init+0x268>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a1f      	ldr	r2, [pc, #124]	@ (8008384 <HAL_GPIO_Init+0x244>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d031      	beq.n	800836e <HAL_GPIO_Init+0x22e>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1e      	ldr	r2, [pc, #120]	@ (8008388 <HAL_GPIO_Init+0x248>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d02b      	beq.n	800836a <HAL_GPIO_Init+0x22a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1d      	ldr	r2, [pc, #116]	@ (800838c <HAL_GPIO_Init+0x24c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d025      	beq.n	8008366 <HAL_GPIO_Init+0x226>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1c      	ldr	r2, [pc, #112]	@ (8008390 <HAL_GPIO_Init+0x250>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d01f      	beq.n	8008362 <HAL_GPIO_Init+0x222>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a1b      	ldr	r2, [pc, #108]	@ (8008394 <HAL_GPIO_Init+0x254>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d019      	beq.n	800835e <HAL_GPIO_Init+0x21e>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a1a      	ldr	r2, [pc, #104]	@ (8008398 <HAL_GPIO_Init+0x258>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <HAL_GPIO_Init+0x21a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a19      	ldr	r2, [pc, #100]	@ (800839c <HAL_GPIO_Init+0x25c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00d      	beq.n	8008356 <HAL_GPIO_Init+0x216>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a18      	ldr	r2, [pc, #96]	@ (80083a0 <HAL_GPIO_Init+0x260>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <HAL_GPIO_Init+0x212>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a17      	ldr	r2, [pc, #92]	@ (80083a4 <HAL_GPIO_Init+0x264>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d101      	bne.n	800834e <HAL_GPIO_Init+0x20e>
 800834a:	2309      	movs	r3, #9
 800834c:	e02d      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800834e:	230a      	movs	r3, #10
 8008350:	e02b      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008352:	2308      	movs	r3, #8
 8008354:	e029      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008356:	2307      	movs	r3, #7
 8008358:	e027      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800835a:	2306      	movs	r3, #6
 800835c:	e025      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800835e:	2305      	movs	r3, #5
 8008360:	e023      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008362:	2304      	movs	r3, #4
 8008364:	e021      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008366:	2303      	movs	r3, #3
 8008368:	e01f      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800836a:	2302      	movs	r3, #2
 800836c:	e01d      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800836e:	2301      	movs	r3, #1
 8008370:	e01b      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008372:	bf00      	nop
 8008374:	58000080 	.word	0x58000080
 8008378:	58024400 	.word	0x58024400
 800837c:	58000400 	.word	0x58000400
 8008380:	58020000 	.word	0x58020000
 8008384:	58020400 	.word	0x58020400
 8008388:	58020800 	.word	0x58020800
 800838c:	58020c00 	.word	0x58020c00
 8008390:	58021000 	.word	0x58021000
 8008394:	58021400 	.word	0x58021400
 8008398:	58021800 	.word	0x58021800
 800839c:	58021c00 	.word	0x58021c00
 80083a0:	58022000 	.word	0x58022000
 80083a4:	58022400 	.word	0x58022400
 80083a8:	2300      	movs	r3, #0
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	f002 0203 	and.w	r2, r2, #3
 80083b0:	0092      	lsls	r2, r2, #2
 80083b2:	4093      	lsls	r3, r2
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083ba:	4938      	ldr	r1, [pc, #224]	@ (800849c <HAL_GPIO_Init+0x35c>)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	089b      	lsrs	r3, r3, #2
 80083c0:	3302      	adds	r3, #2
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	43db      	mvns	r3, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	4013      	ands	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80083ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80083f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	43db      	mvns	r3, r3
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	4013      	ands	r3, r2
 8008406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800841c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	43db      	mvns	r3, r3
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	4013      	ands	r3, r2
 8008432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	4313      	orrs	r3, r2
 8008446:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	43db      	mvns	r3, r3
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	4013      	ands	r3, r2
 800845c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	3301      	adds	r3, #1
 800847c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	fa22 f303 	lsr.w	r3, r2, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	f47f ae63 	bne.w	8008154 <HAL_GPIO_Init+0x14>
  }
}
 800848e:	bf00      	nop
 8008490:	bf00      	nop
 8008492:	3724      	adds	r7, #36	@ 0x24
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	58000400 	.word	0x58000400

080084a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084ae:	4b75      	ldr	r3, [pc, #468]	@ (8008684 <HAL_GPIO_DeInit+0x1e4>)
 80084b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80084b2:	e0d9      	b.n	8008668 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80084b4:	2201      	movs	r2, #1
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	4013      	ands	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80cc 	beq.w	8008662 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80084ca:	4a6f      	ldr	r2, [pc, #444]	@ (8008688 <HAL_GPIO_DeInit+0x1e8>)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	089b      	lsrs	r3, r3, #2
 80084d0:	3302      	adds	r3, #2
 80084d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	220f      	movs	r2, #15
 80084e2:	fa02 f303 	lsl.w	r3, r2, r3
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4013      	ands	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a67      	ldr	r2, [pc, #412]	@ (800868c <HAL_GPIO_DeInit+0x1ec>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d037      	beq.n	8008564 <HAL_GPIO_DeInit+0xc4>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a66      	ldr	r2, [pc, #408]	@ (8008690 <HAL_GPIO_DeInit+0x1f0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d031      	beq.n	8008560 <HAL_GPIO_DeInit+0xc0>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a65      	ldr	r2, [pc, #404]	@ (8008694 <HAL_GPIO_DeInit+0x1f4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d02b      	beq.n	800855c <HAL_GPIO_DeInit+0xbc>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a64      	ldr	r2, [pc, #400]	@ (8008698 <HAL_GPIO_DeInit+0x1f8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d025      	beq.n	8008558 <HAL_GPIO_DeInit+0xb8>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a63      	ldr	r2, [pc, #396]	@ (800869c <HAL_GPIO_DeInit+0x1fc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d01f      	beq.n	8008554 <HAL_GPIO_DeInit+0xb4>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a62      	ldr	r2, [pc, #392]	@ (80086a0 <HAL_GPIO_DeInit+0x200>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d019      	beq.n	8008550 <HAL_GPIO_DeInit+0xb0>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a61      	ldr	r2, [pc, #388]	@ (80086a4 <HAL_GPIO_DeInit+0x204>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d013      	beq.n	800854c <HAL_GPIO_DeInit+0xac>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a60      	ldr	r2, [pc, #384]	@ (80086a8 <HAL_GPIO_DeInit+0x208>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00d      	beq.n	8008548 <HAL_GPIO_DeInit+0xa8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a5f      	ldr	r2, [pc, #380]	@ (80086ac <HAL_GPIO_DeInit+0x20c>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d007      	beq.n	8008544 <HAL_GPIO_DeInit+0xa4>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a5e      	ldr	r2, [pc, #376]	@ (80086b0 <HAL_GPIO_DeInit+0x210>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d101      	bne.n	8008540 <HAL_GPIO_DeInit+0xa0>
 800853c:	2309      	movs	r3, #9
 800853e:	e012      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008540:	230a      	movs	r3, #10
 8008542:	e010      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008544:	2308      	movs	r3, #8
 8008546:	e00e      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008548:	2307      	movs	r3, #7
 800854a:	e00c      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 800854c:	2306      	movs	r3, #6
 800854e:	e00a      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008550:	2305      	movs	r3, #5
 8008552:	e008      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008554:	2304      	movs	r3, #4
 8008556:	e006      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008558:	2303      	movs	r3, #3
 800855a:	e004      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 800855c:	2302      	movs	r3, #2
 800855e:	e002      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <HAL_GPIO_DeInit+0xc6>
 8008564:	2300      	movs	r3, #0
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	f002 0203 	and.w	r2, r2, #3
 800856c:	0092      	lsls	r2, r2, #2
 800856e:	4093      	lsls	r3, r2
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	429a      	cmp	r2, r3
 8008574:	d136      	bne.n	80085e4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	43db      	mvns	r3, r3
 800857e:	401a      	ands	r2, r3
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	43db      	mvns	r3, r3
 800858c:	401a      	ands	r2, r3
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	43db      	mvns	r3, r3
 800859c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085a0:	4013      	ands	r3, r2
 80085a2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80085a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085b2:	4013      	ands	r3, r2
 80085b4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f003 0303 	and.w	r3, r3, #3
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	220f      	movs	r2, #15
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80085c6:	4a30      	ldr	r2, [pc, #192]	@ (8008688 <HAL_GPIO_DeInit+0x1e8>)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	089b      	lsrs	r3, r3, #2
 80085cc:	3302      	adds	r3, #2
 80085ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	43da      	mvns	r2, r3
 80085d6:	482c      	ldr	r0, [pc, #176]	@ (8008688 <HAL_GPIO_DeInit+0x1e8>)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	089b      	lsrs	r3, r3, #2
 80085dc:	400a      	ands	r2, r1
 80085de:	3302      	adds	r3, #2
 80085e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	2103      	movs	r1, #3
 80085ee:	fa01 f303 	lsl.w	r3, r1, r3
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	08da      	lsrs	r2, r3, #3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3208      	adds	r2, #8
 8008600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	220f      	movs	r2, #15
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	43db      	mvns	r3, r3
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	08d2      	lsrs	r2, r2, #3
 8008618:	4019      	ands	r1, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3208      	adds	r2, #8
 800861e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	2103      	movs	r1, #3
 800862c:	fa01 f303 	lsl.w	r3, r1, r3
 8008630:	43db      	mvns	r3, r3
 8008632:	401a      	ands	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	2101      	movs	r1, #1
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	fa01 f303 	lsl.w	r3, r1, r3
 8008644:	43db      	mvns	r3, r3
 8008646:	401a      	ands	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	2103      	movs	r1, #3
 8008656:	fa01 f303 	lsl.w	r3, r1, r3
 800865a:	43db      	mvns	r3, r3
 800865c:	401a      	ands	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	3301      	adds	r3, #1
 8008666:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	f47f af1f 	bne.w	80084b4 <HAL_GPIO_DeInit+0x14>
  }
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	58000080 	.word	0x58000080
 8008688:	58000400 	.word	0x58000400
 800868c:	58020000 	.word	0x58020000
 8008690:	58020400 	.word	0x58020400
 8008694:	58020800 	.word	0x58020800
 8008698:	58020c00 	.word	0x58020c00
 800869c:	58021000 	.word	0x58021000
 80086a0:	58021400 	.word	0x58021400
 80086a4:	58021800 	.word	0x58021800
 80086a8:	58021c00 	.word	0x58021c00
 80086ac:	58022000 	.word	0x58022000
 80086b0:	58022400 	.word	0x58022400

080086b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e07f      	b.n	80087c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7f8 ff78 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2224      	movs	r2, #36	@ 0x24
 80086e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0201 	bic.w	r2, r2, #1
 80086f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d107      	bne.n	800872e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	e006      	b.n	800873c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800873a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d104      	bne.n	800874e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800874c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6859      	ldr	r1, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b1d      	ldr	r3, [pc, #116]	@ (80087d0 <HAL_I2C_Init+0x11c>)
 800875a:	430b      	orrs	r3, r1
 800875c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68da      	ldr	r2, [r3, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800876c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691a      	ldr	r2, [r3, #16]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	69d9      	ldr	r1, [r3, #28]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a1a      	ldr	r2, [r3, #32]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0201 	orr.w	r2, r2, #1
 80087a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	02008000 	.word	0x02008000

080087d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af02      	add	r7, sp, #8
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	461a      	mov	r2, r3
 80087e0:	460b      	mov	r3, r1
 80087e2:	817b      	strh	r3, [r7, #10]
 80087e4:	4613      	mov	r3, r2
 80087e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	f040 80da 	bne.w	80089aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_I2C_Master_Transmit+0x30>
 8008800:	2302      	movs	r3, #2
 8008802:	e0d3      	b.n	80089ac <HAL_I2C_Master_Transmit+0x1d8>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800880c:	f7fb f87e 	bl	800390c <HAL_GetTick>
 8008810:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	2319      	movs	r3, #25
 8008818:	2201      	movs	r2, #1
 800881a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 fa58 	bl	8008cd4 <I2C_WaitOnFlagUntilTimeout>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e0be      	b.n	80089ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2221      	movs	r2, #33	@ 0x21
 8008832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2210      	movs	r2, #16
 800883a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	893a      	ldrh	r2, [r7, #8]
 800884e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800885a:	b29b      	uxth	r3, r3
 800885c:	2bff      	cmp	r3, #255	@ 0xff
 800885e:	d90e      	bls.n	800887e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	22ff      	movs	r2, #255	@ 0xff
 8008864:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800886a:	b2da      	uxtb	r2, r3
 800886c:	8979      	ldrh	r1, [r7, #10]
 800886e:	4b51      	ldr	r3, [pc, #324]	@ (80089b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 fbe6 	bl	8009048 <I2C_TransferConfig>
 800887c:	e06c      	b.n	8008958 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800888c:	b2da      	uxtb	r2, r3
 800888e:	8979      	ldrh	r1, [r7, #10]
 8008890:	4b48      	ldr	r3, [pc, #288]	@ (80089b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fbd5 	bl	8009048 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800889e:	e05b      	b.n	8008958 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	6a39      	ldr	r1, [r7, #32]
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 fa64 	bl	8008d72 <I2C_WaitOnTXISFlagUntilTimeout>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e07b      	b.n	80089ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	3b01      	subs	r3, #1
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d034      	beq.n	8008958 <HAL_I2C_Master_Transmit+0x184>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d130      	bne.n	8008958 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	2200      	movs	r2, #0
 80088fe:	2180      	movs	r1, #128	@ 0x80
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f9e7 	bl	8008cd4 <I2C_WaitOnFlagUntilTimeout>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e04d      	b.n	80089ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	2bff      	cmp	r3, #255	@ 0xff
 8008918:	d90e      	bls.n	8008938 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	22ff      	movs	r2, #255	@ 0xff
 800891e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008924:	b2da      	uxtb	r2, r3
 8008926:	8979      	ldrh	r1, [r7, #10]
 8008928:	2300      	movs	r3, #0
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fb89 	bl	8009048 <I2C_TransferConfig>
 8008936:	e00f      	b.n	8008958 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800893c:	b29a      	uxth	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008946:	b2da      	uxtb	r2, r3
 8008948:	8979      	ldrh	r1, [r7, #10]
 800894a:	2300      	movs	r3, #0
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 fb78 	bl	8009048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d19e      	bne.n	80088a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	6a39      	ldr	r1, [r7, #32]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 fa4a 	bl	8008e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e01a      	b.n	80089ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2220      	movs	r2, #32
 800897c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6859      	ldr	r1, [r3, #4]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4b0b      	ldr	r3, [pc, #44]	@ (80089b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800898a:	400b      	ands	r3, r1
 800898c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	80002000 	.word	0x80002000
 80089b8:	fe00e800 	.word	0xfe00e800

080089bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	4608      	mov	r0, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	461a      	mov	r2, r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	817b      	strh	r3, [r7, #10]
 80089ce:	460b      	mov	r3, r1
 80089d0:	813b      	strh	r3, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b20      	cmp	r3, #32
 80089e0:	f040 80f9 	bne.w	8008bd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_I2C_Mem_Write+0x34>
 80089ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0ed      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d101      	bne.n	8008a0a <HAL_I2C_Mem_Write+0x4e>
 8008a06:	2302      	movs	r3, #2
 8008a08:	e0e6      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a12:	f7fa ff7b 	bl	800390c <HAL_GetTick>
 8008a16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	2319      	movs	r3, #25
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f955 	bl	8008cd4 <I2C_WaitOnFlagUntilTimeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0d1      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2221      	movs	r2, #33	@ 0x21
 8008a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2240      	movs	r2, #64	@ 0x40
 8008a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a3a      	ldr	r2, [r7, #32]
 8008a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a5c:	88f8      	ldrh	r0, [r7, #6]
 8008a5e:	893a      	ldrh	r2, [r7, #8]
 8008a60:	8979      	ldrh	r1, [r7, #10]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f8b9 	bl	8008be4 <I2C_RequestMemoryWrite>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e0a9      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	2bff      	cmp	r3, #255	@ 0xff
 8008a8c:	d90e      	bls.n	8008aac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	22ff      	movs	r2, #255	@ 0xff
 8008a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	8979      	ldrh	r1, [r7, #10]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 facf 	bl	8009048 <I2C_TransferConfig>
 8008aaa:	e00f      	b.n	8008acc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	8979      	ldrh	r1, [r7, #10]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fabe 	bl	8009048 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f94e 	bl	8008d72 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e07b      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	3b01      	subs	r3, #1
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d034      	beq.n	8008b84 <HAL_I2C_Mem_Write+0x1c8>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d130      	bne.n	8008b84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2180      	movs	r1, #128	@ 0x80
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 f8d1 	bl	8008cd4 <I2C_WaitOnFlagUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e04d      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2bff      	cmp	r3, #255	@ 0xff
 8008b44:	d90e      	bls.n	8008b64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	22ff      	movs	r2, #255	@ 0xff
 8008b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	8979      	ldrh	r1, [r7, #10]
 8008b54:	2300      	movs	r3, #0
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fa73 	bl	8009048 <I2C_TransferConfig>
 8008b62:	e00f      	b.n	8008b84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	8979      	ldrh	r1, [r7, #10]
 8008b76:	2300      	movs	r3, #0
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 fa62 	bl	8009048 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d19e      	bne.n	8008acc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f934 	bl	8008e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e01a      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6859      	ldr	r1, [r3, #4]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008be0 <HAL_I2C_Mem_Write+0x224>)
 8008bb6:	400b      	ands	r3, r1
 8008bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e000      	b.n	8008bd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008bd6:	2302      	movs	r3, #2
  }
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	fe00e800 	.word	0xfe00e800

08008be4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	4608      	mov	r0, r1
 8008bee:	4611      	mov	r1, r2
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	817b      	strh	r3, [r7, #10]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	813b      	strh	r3, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	8979      	ldrh	r1, [r7, #10]
 8008c04:	4b20      	ldr	r3, [pc, #128]	@ (8008c88 <I2C_RequestMemoryWrite+0xa4>)
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fa1b 	bl	8009048 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	69b9      	ldr	r1, [r7, #24]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f8ab 	bl	8008d72 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e02c      	b.n	8008c80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d105      	bne.n	8008c38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c2c:	893b      	ldrh	r3, [r7, #8]
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c36:	e015      	b.n	8008c64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c38:	893b      	ldrh	r3, [r7, #8]
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	69b9      	ldr	r1, [r7, #24]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 f891 	bl	8008d72 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e012      	b.n	8008c80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c5a:	893b      	ldrh	r3, [r7, #8]
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2180      	movs	r1, #128	@ 0x80
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 f830 	bl	8008cd4 <I2C_WaitOnFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	80002000 	.word	0x80002000

08008c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d103      	bne.n	8008caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d007      	beq.n	8008cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	619a      	str	r2, [r3, #24]
  }
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ce4:	e031      	b.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cec:	d02d      	beq.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cee:	f7fa fe0d 	bl	800390c <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d302      	bcc.n	8008d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d122      	bne.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	bf0c      	ite	eq
 8008d14:	2301      	moveq	r3, #1
 8008d16:	2300      	movne	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d113      	bne.n	8008d4a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d26:	f043 0220 	orr.w	r2, r3, #32
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e00f      	b.n	8008d6a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4013      	ands	r3, r2
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	bf0c      	ite	eq
 8008d5a:	2301      	moveq	r3, #1
 8008d5c:	2300      	movne	r3, #0
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d0be      	beq.n	8008ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d7e:	e033      	b.n	8008de8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	68b9      	ldr	r1, [r7, #8]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 f87f 	bl	8008e88 <I2C_IsErrorOccurred>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e031      	b.n	8008df8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d9a:	d025      	beq.n	8008de8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9c:	f7fa fdb6 	bl	800390c <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d302      	bcc.n	8008db2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d11a      	bne.n	8008de8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d013      	beq.n	8008de8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc4:	f043 0220 	orr.w	r2, r3, #32
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e007      	b.n	8008df8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d1c4      	bne.n	8008d80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e0c:	e02f      	b.n	8008e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f838 	bl	8008e88 <I2C_IsErrorOccurred>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e02d      	b.n	8008e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e22:	f7fa fd73 	bl	800390c <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d302      	bcc.n	8008e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11a      	bne.n	8008e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d013      	beq.n	8008e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4a:	f043 0220 	orr.w	r2, r3, #32
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e007      	b.n	8008e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d1c8      	bne.n	8008e0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08a      	sub	sp, #40	@ 0x28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	f003 0310 	and.w	r3, r3, #16
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d068      	beq.n	8008f86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2210      	movs	r2, #16
 8008eba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ebc:	e049      	b.n	8008f52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ec4:	d045      	beq.n	8008f52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ec6:	f7fa fd21 	bl	800390c <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d302      	bcc.n	8008edc <I2C_IsErrorOccurred+0x54>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d13a      	bne.n	8008f52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ee6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008eee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008efe:	d121      	bne.n	8008f44 <I2C_IsErrorOccurred+0xbc>
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f06:	d01d      	beq.n	8008f44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008f08:	7cfb      	ldrb	r3, [r7, #19]
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d01a      	beq.n	8008f44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008f1e:	f7fa fcf5 	bl	800390c <HAL_GetTick>
 8008f22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f24:	e00e      	b.n	8008f44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008f26:	f7fa fcf1 	bl	800390c <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b19      	cmp	r3, #25
 8008f32:	d907      	bls.n	8008f44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	f043 0320 	orr.w	r3, r3, #32
 8008f3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008f42:	e006      	b.n	8008f52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d1e9      	bne.n	8008f26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f003 0320 	and.w	r3, r3, #32
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d003      	beq.n	8008f68 <I2C_IsErrorOccurred+0xe0>
 8008f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0aa      	beq.n	8008ebe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d103      	bne.n	8008f78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2220      	movs	r2, #32
 8008f76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	f043 0304 	orr.w	r3, r3, #4
 8008f7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	f043 0301 	orr.w	r3, r3, #1
 8008f9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00b      	beq.n	8008fd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	f043 0308 	orr.w	r3, r3, #8
 8008fc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008fca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	f043 0302 	orr.w	r3, r3, #2
 8008fe2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01c      	beq.n	8009036 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7ff fe45 	bl	8008c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6859      	ldr	r1, [r3, #4]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <I2C_IsErrorOccurred+0x1bc>)
 800900e:	400b      	ands	r3, r1
 8009010:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	431a      	orrs	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800903a:	4618      	mov	r0, r3
 800903c:	3728      	adds	r7, #40	@ 0x28
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	fe00e800 	.word	0xfe00e800

08009048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	817b      	strh	r3, [r7, #10]
 8009056:	4613      	mov	r3, r2
 8009058:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800905a:	897b      	ldrh	r3, [r7, #10]
 800905c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009060:	7a7b      	ldrb	r3, [r7, #9]
 8009062:	041b      	lsls	r3, r3, #16
 8009064:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009068:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	4313      	orrs	r3, r2
 8009072:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009076:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	0d5b      	lsrs	r3, r3, #21
 8009082:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009086:	4b08      	ldr	r3, [pc, #32]	@ (80090a8 <I2C_TransferConfig+0x60>)
 8009088:	430b      	orrs	r3, r1
 800908a:	43db      	mvns	r3, r3
 800908c:	ea02 0103 	and.w	r1, r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	430a      	orrs	r2, r1
 8009098:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800909a:	bf00      	nop
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	03ff63ff 	.word	0x03ff63ff

080090ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d138      	bne.n	8009134 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d101      	bne.n	80090d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e032      	b.n	8009136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2224      	movs	r2, #36	@ 0x24
 80090dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0201 	bic.w	r2, r2, #1
 80090ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6819      	ldr	r1, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0201 	orr.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2220      	movs	r2, #32
 8009124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	e000      	b.n	8009136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009134:	2302      	movs	r3, #2
  }
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b20      	cmp	r3, #32
 8009156:	d139      	bne.n	80091cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009162:	2302      	movs	r3, #2
 8009164:	e033      	b.n	80091ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2224      	movs	r2, #36	@ 0x24
 8009172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009194:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	021b      	lsls	r3, r3, #8
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0201 	orr.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e000      	b.n	80091ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091cc:	2302      	movs	r3, #2
  }
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
	...

080091dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80091e4:	4b19      	ldr	r3, [pc, #100]	@ (800924c <HAL_PWREx_ConfigSupply+0x70>)
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d00a      	beq.n	8009206 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80091f0:	4b16      	ldr	r3, [pc, #88]	@ (800924c <HAL_PWREx_ConfigSupply+0x70>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f003 0307 	and.w	r3, r3, #7
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d001      	beq.n	8009202 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e01f      	b.n	8009242 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	e01d      	b.n	8009242 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009206:	4b11      	ldr	r3, [pc, #68]	@ (800924c <HAL_PWREx_ConfigSupply+0x70>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f023 0207 	bic.w	r2, r3, #7
 800920e:	490f      	ldr	r1, [pc, #60]	@ (800924c <HAL_PWREx_ConfigSupply+0x70>)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4313      	orrs	r3, r2
 8009214:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009216:	f7fa fb79 	bl	800390c <HAL_GetTick>
 800921a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800921c:	e009      	b.n	8009232 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800921e:	f7fa fb75 	bl	800390c <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800922c:	d901      	bls.n	8009232 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e007      	b.n	8009242 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009232:	4b06      	ldr	r3, [pc, #24]	@ (800924c <HAL_PWREx_ConfigSupply+0x70>)
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800923a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800923e:	d1ee      	bne.n	800921e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	58024800 	.word	0x58024800

08009250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08c      	sub	sp, #48	@ 0x30
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	f000 bc48 	b.w	8009af4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 808c 	beq.w	800938a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009272:	4b96      	ldr	r3, [pc, #600]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800927a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800927c:	4b93      	ldr	r3, [pc, #588]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800927e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009280:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009284:	2b10      	cmp	r3, #16
 8009286:	d007      	beq.n	8009298 <HAL_RCC_OscConfig+0x48>
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	2b18      	cmp	r3, #24
 800928c:	d111      	bne.n	80092b2 <HAL_RCC_OscConfig+0x62>
 800928e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009290:	f003 0303 	and.w	r3, r3, #3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d10c      	bne.n	80092b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009298:	4b8c      	ldr	r3, [pc, #560]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d071      	beq.n	8009388 <HAL_RCC_OscConfig+0x138>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d16d      	bne.n	8009388 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f000 bc21 	b.w	8009af4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092ba:	d106      	bne.n	80092ca <HAL_RCC_OscConfig+0x7a>
 80092bc:	4b83      	ldr	r3, [pc, #524]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a82      	ldr	r2, [pc, #520]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	e02e      	b.n	8009328 <HAL_RCC_OscConfig+0xd8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10c      	bne.n	80092ec <HAL_RCC_OscConfig+0x9c>
 80092d2:	4b7e      	ldr	r3, [pc, #504]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a7d      	ldr	r2, [pc, #500]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	4b7b      	ldr	r3, [pc, #492]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a7a      	ldr	r2, [pc, #488]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	e01d      	b.n	8009328 <HAL_RCC_OscConfig+0xd8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092f4:	d10c      	bne.n	8009310 <HAL_RCC_OscConfig+0xc0>
 80092f6:	4b75      	ldr	r3, [pc, #468]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a74      	ldr	r2, [pc, #464]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80092fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	4b72      	ldr	r3, [pc, #456]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a71      	ldr	r2, [pc, #452]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	e00b      	b.n	8009328 <HAL_RCC_OscConfig+0xd8>
 8009310:	4b6e      	ldr	r3, [pc, #440]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a6d      	ldr	r2, [pc, #436]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4b6b      	ldr	r3, [pc, #428]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a6a      	ldr	r2, [pc, #424]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d015      	beq.n	800935c <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7fa faec 	bl	800390c <HAL_GetTick>
 8009334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009336:	e00a      	b.n	800934e <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009338:	f7fa fae8 	bl	800390c <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009346:	4293      	cmp	r3, r2
 8009348:	d901      	bls.n	800934e <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e3d2      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800934e:	4b5f      	ldr	r3, [pc, #380]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0ee      	beq.n	8009338 <HAL_RCC_OscConfig+0xe8>
 800935a:	e016      	b.n	800938a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935c:	f7fa fad6 	bl	800390c <HAL_GetTick>
 8009360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009362:	e00a      	b.n	800937a <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009364:	f7fa fad2 	bl	800390c <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009372:	4293      	cmp	r3, r2
 8009374:	d901      	bls.n	800937a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e3bc      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800937a:	4b54      	ldr	r3, [pc, #336]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1ee      	bne.n	8009364 <HAL_RCC_OscConfig+0x114>
 8009386:	e000      	b.n	800938a <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 80cb 	beq.w	800952e <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009398:	4b4c      	ldr	r3, [pc, #304]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093a2:	4b4a      	ldr	r3, [pc, #296]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <HAL_RCC_OscConfig+0x16e>
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	2b18      	cmp	r3, #24
 80093b2:	d156      	bne.n	8009462 <HAL_RCC_OscConfig+0x212>
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d151      	bne.n	8009462 <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093be:	4b43      	ldr	r3, [pc, #268]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <HAL_RCC_OscConfig+0x186>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e38e      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093d6:	4b3d      	ldr	r3, [pc, #244]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f023 0219 	bic.w	r2, r3, #25
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	493a      	ldr	r1, [pc, #232]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e8:	f7fa fa90 	bl	800390c <HAL_GetTick>
 80093ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093f0:	f7fa fa8c 	bl	800390c <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e378      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009402:	4b32      	ldr	r3, [pc, #200]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800940e:	f7fa faad 	bl	800396c <HAL_GetREVID>
 8009412:	4603      	mov	r3, r0
 8009414:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009418:	4293      	cmp	r3, r2
 800941a:	d817      	bhi.n	800944c <HAL_RCC_OscConfig+0x1fc>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	2b40      	cmp	r3, #64	@ 0x40
 8009422:	d108      	bne.n	8009436 <HAL_RCC_OscConfig+0x1e6>
 8009424:	4b29      	ldr	r3, [pc, #164]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800942c:	4a27      	ldr	r2, [pc, #156]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800942e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009432:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009434:	e07b      	b.n	800952e <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009436:	4b25      	ldr	r3, [pc, #148]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	031b      	lsls	r3, r3, #12
 8009444:	4921      	ldr	r1, [pc, #132]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009446:	4313      	orrs	r3, r2
 8009448:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800944a:	e070      	b.n	800952e <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800944c:	4b1f      	ldr	r3, [pc, #124]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	061b      	lsls	r3, r3, #24
 800945a:	491c      	ldr	r1, [pc, #112]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800945c:	4313      	orrs	r3, r2
 800945e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009460:	e065      	b.n	800952e <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d048      	beq.n	80094fc <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800946a:	4b18      	ldr	r3, [pc, #96]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f023 0219 	bic.w	r2, r3, #25
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	4915      	ldr	r1, [pc, #84]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009478:	4313      	orrs	r3, r2
 800947a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800947c:	f7fa fa46 	bl	800390c <HAL_GetTick>
 8009480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009482:	e008      	b.n	8009496 <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009484:	f7fa fa42 	bl	800390c <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b02      	cmp	r3, #2
 8009490:	d901      	bls.n	8009496 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e32e      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009496:	4b0d      	ldr	r3, [pc, #52]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0304 	and.w	r3, r3, #4
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0f0      	beq.n	8009484 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094a2:	f7fa fa63 	bl	800396c <HAL_GetREVID>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d81a      	bhi.n	80094e6 <HAL_RCC_OscConfig+0x296>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b40      	cmp	r3, #64	@ 0x40
 80094b6:	d10b      	bne.n	80094d0 <HAL_RCC_OscConfig+0x280>
 80094b8:	4b04      	ldr	r3, [pc, #16]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80094c0:	4a02      	ldr	r2, [pc, #8]	@ (80094cc <HAL_RCC_OscConfig+0x27c>)
 80094c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094c6:	6053      	str	r3, [r2, #4]
 80094c8:	e031      	b.n	800952e <HAL_RCC_OscConfig+0x2de>
 80094ca:	bf00      	nop
 80094cc:	58024400 	.word	0x58024400
 80094d0:	4b9c      	ldr	r3, [pc, #624]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	031b      	lsls	r3, r3, #12
 80094de:	4999      	ldr	r1, [pc, #612]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	604b      	str	r3, [r1, #4]
 80094e4:	e023      	b.n	800952e <HAL_RCC_OscConfig+0x2de>
 80094e6:	4b97      	ldr	r3, [pc, #604]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	061b      	lsls	r3, r3, #24
 80094f4:	4993      	ldr	r1, [pc, #588]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	604b      	str	r3, [r1, #4]
 80094fa:	e018      	b.n	800952e <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094fc:	4b91      	ldr	r3, [pc, #580]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a90      	ldr	r2, [pc, #576]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009502:	f023 0301 	bic.w	r3, r3, #1
 8009506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009508:	f7fa fa00 	bl	800390c <HAL_GetTick>
 800950c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800950e:	e008      	b.n	8009522 <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009510:	f7fa f9fc 	bl	800390c <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d901      	bls.n	8009522 <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e2e8      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009522:	4b88      	ldr	r3, [pc, #544]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0304 	and.w	r3, r3, #4
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1f0      	bne.n	8009510 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0310 	and.w	r3, r3, #16
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 80a9 	beq.w	800968e <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800953c:	4b81      	ldr	r3, [pc, #516]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009544:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009546:	4b7f      	ldr	r3, [pc, #508]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	2b08      	cmp	r3, #8
 8009550:	d007      	beq.n	8009562 <HAL_RCC_OscConfig+0x312>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b18      	cmp	r3, #24
 8009556:	d13a      	bne.n	80095ce <HAL_RCC_OscConfig+0x37e>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f003 0303 	and.w	r3, r3, #3
 800955e:	2b01      	cmp	r3, #1
 8009560:	d135      	bne.n	80095ce <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009562:	4b78      	ldr	r3, [pc, #480]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <HAL_RCC_OscConfig+0x32a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	2b80      	cmp	r3, #128	@ 0x80
 8009574:	d001      	beq.n	800957a <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e2bc      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800957a:	f7fa f9f7 	bl	800396c <HAL_GetREVID>
 800957e:	4603      	mov	r3, r0
 8009580:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009584:	4293      	cmp	r3, r2
 8009586:	d817      	bhi.n	80095b8 <HAL_RCC_OscConfig+0x368>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	2b20      	cmp	r3, #32
 800958e:	d108      	bne.n	80095a2 <HAL_RCC_OscConfig+0x352>
 8009590:	4b6c      	ldr	r3, [pc, #432]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009598:	4a6a      	ldr	r2, [pc, #424]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 800959a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800959e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095a0:	e075      	b.n	800968e <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095a2:	4b68      	ldr	r3, [pc, #416]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	069b      	lsls	r3, r3, #26
 80095b0:	4964      	ldr	r1, [pc, #400]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095b6:	e06a      	b.n	800968e <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095b8:	4b62      	ldr	r3, [pc, #392]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	061b      	lsls	r3, r3, #24
 80095c6:	495f      	ldr	r1, [pc, #380]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095cc:	e05f      	b.n	800968e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d042      	beq.n	800965c <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80095d6:	4b5b      	ldr	r3, [pc, #364]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a5a      	ldr	r2, [pc, #360]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80095dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e2:	f7fa f993 	bl	800390c <HAL_GetTick>
 80095e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095e8:	e008      	b.n	80095fc <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095ea:	f7fa f98f 	bl	800390c <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d901      	bls.n	80095fc <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e27b      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095fc:	4b51      	ldr	r3, [pc, #324]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0f0      	beq.n	80095ea <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009608:	f7fa f9b0 	bl	800396c <HAL_GetREVID>
 800960c:	4603      	mov	r3, r0
 800960e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009612:	4293      	cmp	r3, r2
 8009614:	d817      	bhi.n	8009646 <HAL_RCC_OscConfig+0x3f6>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	2b20      	cmp	r3, #32
 800961c:	d108      	bne.n	8009630 <HAL_RCC_OscConfig+0x3e0>
 800961e:	4b49      	ldr	r3, [pc, #292]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009626:	4a47      	ldr	r2, [pc, #284]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009628:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800962c:	6053      	str	r3, [r2, #4]
 800962e:	e02e      	b.n	800968e <HAL_RCC_OscConfig+0x43e>
 8009630:	4b44      	ldr	r3, [pc, #272]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	069b      	lsls	r3, r3, #26
 800963e:	4941      	ldr	r1, [pc, #260]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009640:	4313      	orrs	r3, r2
 8009642:	604b      	str	r3, [r1, #4]
 8009644:	e023      	b.n	800968e <HAL_RCC_OscConfig+0x43e>
 8009646:	4b3f      	ldr	r3, [pc, #252]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	061b      	lsls	r3, r3, #24
 8009654:	493b      	ldr	r1, [pc, #236]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009656:	4313      	orrs	r3, r2
 8009658:	60cb      	str	r3, [r1, #12]
 800965a:	e018      	b.n	800968e <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800965c:	4b39      	ldr	r3, [pc, #228]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a38      	ldr	r2, [pc, #224]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009668:	f7fa f950 	bl	800390c <HAL_GetTick>
 800966c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800966e:	e008      	b.n	8009682 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009670:	f7fa f94c 	bl	800390c <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	2b02      	cmp	r3, #2
 800967c:	d901      	bls.n	8009682 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e238      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009682:	4b30      	ldr	r3, [pc, #192]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1f0      	bne.n	8009670 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 0308 	and.w	r3, r3, #8
 8009696:	2b00      	cmp	r3, #0
 8009698:	d036      	beq.n	8009708 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d019      	beq.n	80096d6 <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096a2:	4b28      	ldr	r3, [pc, #160]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80096a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096a6:	4a27      	ldr	r2, [pc, #156]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80096a8:	f043 0301 	orr.w	r3, r3, #1
 80096ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ae:	f7fa f92d 	bl	800390c <HAL_GetTick>
 80096b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096b4:	e008      	b.n	80096c8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096b6:	f7fa f929 	bl	800390c <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d901      	bls.n	80096c8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e215      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80096ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096cc:	f003 0302 	and.w	r3, r3, #2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0f0      	beq.n	80096b6 <HAL_RCC_OscConfig+0x466>
 80096d4:	e018      	b.n	8009708 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80096d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096da:	4a1a      	ldr	r2, [pc, #104]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80096dc:	f023 0301 	bic.w	r3, r3, #1
 80096e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096e2:	f7fa f913 	bl	800390c <HAL_GetTick>
 80096e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096e8:	e008      	b.n	80096fc <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096ea:	f7fa f90f 	bl	800390c <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d901      	bls.n	80096fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e1fb      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096fc:	4b11      	ldr	r3, [pc, #68]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 80096fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1f0      	bne.n	80096ea <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b00      	cmp	r3, #0
 8009712:	d039      	beq.n	8009788 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d01c      	beq.n	8009756 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800971c:	4b09      	ldr	r3, [pc, #36]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a08      	ldr	r2, [pc, #32]	@ (8009744 <HAL_RCC_OscConfig+0x4f4>)
 8009722:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009726:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009728:	f7fa f8f0 	bl	800390c <HAL_GetTick>
 800972c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800972e:	e00b      	b.n	8009748 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009730:	f7fa f8ec 	bl	800390c <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d904      	bls.n	8009748 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e1d8      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
 8009742:	bf00      	nop
 8009744:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009748:	4b65      	ldr	r3, [pc, #404]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0ed      	beq.n	8009730 <HAL_RCC_OscConfig+0x4e0>
 8009754:	e018      	b.n	8009788 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009756:	4b62      	ldr	r3, [pc, #392]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a61      	ldr	r2, [pc, #388]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 800975c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009760:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009762:	f7fa f8d3 	bl	800390c <HAL_GetTick>
 8009766:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009768:	e008      	b.n	800977c <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800976a:	f7fa f8cf 	bl	800390c <HAL_GetTick>
 800976e:	4602      	mov	r2, r0
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	2b02      	cmp	r3, #2
 8009776:	d901      	bls.n	800977c <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e1bb      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800977c:	4b58      	ldr	r3, [pc, #352]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1f0      	bne.n	800976a <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 8081 	beq.w	8009898 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009796:	4b53      	ldr	r3, [pc, #332]	@ (80098e4 <HAL_RCC_OscConfig+0x694>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a52      	ldr	r2, [pc, #328]	@ (80098e4 <HAL_RCC_OscConfig+0x694>)
 800979c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097a2:	f7fa f8b3 	bl	800390c <HAL_GetTick>
 80097a6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097a8:	e008      	b.n	80097bc <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097aa:	f7fa f8af 	bl	800390c <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	2b64      	cmp	r3, #100	@ 0x64
 80097b6:	d901      	bls.n	80097bc <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e19b      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097bc:	4b49      	ldr	r3, [pc, #292]	@ (80098e4 <HAL_RCC_OscConfig+0x694>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0f0      	beq.n	80097aa <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d106      	bne.n	80097de <HAL_RCC_OscConfig+0x58e>
 80097d0:	4b43      	ldr	r3, [pc, #268]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80097d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097d4:	4a42      	ldr	r2, [pc, #264]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80097d6:	f043 0301 	orr.w	r3, r3, #1
 80097da:	6713      	str	r3, [r2, #112]	@ 0x70
 80097dc:	e02d      	b.n	800983a <HAL_RCC_OscConfig+0x5ea>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10c      	bne.n	8009800 <HAL_RCC_OscConfig+0x5b0>
 80097e6:	4b3e      	ldr	r3, [pc, #248]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80097e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ea:	4a3d      	ldr	r2, [pc, #244]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80097ec:	f023 0301 	bic.w	r3, r3, #1
 80097f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80097f2:	4b3b      	ldr	r3, [pc, #236]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80097f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097f6:	4a3a      	ldr	r2, [pc, #232]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80097f8:	f023 0304 	bic.w	r3, r3, #4
 80097fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80097fe:	e01c      	b.n	800983a <HAL_RCC_OscConfig+0x5ea>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	2b05      	cmp	r3, #5
 8009806:	d10c      	bne.n	8009822 <HAL_RCC_OscConfig+0x5d2>
 8009808:	4b35      	ldr	r3, [pc, #212]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 800980a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800980c:	4a34      	ldr	r2, [pc, #208]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 800980e:	f043 0304 	orr.w	r3, r3, #4
 8009812:	6713      	str	r3, [r2, #112]	@ 0x70
 8009814:	4b32      	ldr	r3, [pc, #200]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 8009816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009818:	4a31      	ldr	r2, [pc, #196]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 800981a:	f043 0301 	orr.w	r3, r3, #1
 800981e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009820:	e00b      	b.n	800983a <HAL_RCC_OscConfig+0x5ea>
 8009822:	4b2f      	ldr	r3, [pc, #188]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 8009824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009826:	4a2e      	ldr	r2, [pc, #184]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 8009828:	f023 0301 	bic.w	r3, r3, #1
 800982c:	6713      	str	r3, [r2, #112]	@ 0x70
 800982e:	4b2c      	ldr	r3, [pc, #176]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 8009830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009832:	4a2b      	ldr	r2, [pc, #172]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 8009834:	f023 0304 	bic.w	r3, r3, #4
 8009838:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d015      	beq.n	800986e <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009842:	f7fa f863 	bl	800390c <HAL_GetTick>
 8009846:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009848:	e00a      	b.n	8009860 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800984a:	f7fa f85f 	bl	800390c <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009858:	4293      	cmp	r3, r2
 800985a:	d901      	bls.n	8009860 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e149      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009860:	4b1f      	ldr	r3, [pc, #124]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 8009862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0ee      	beq.n	800984a <HAL_RCC_OscConfig+0x5fa>
 800986c:	e014      	b.n	8009898 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800986e:	f7fa f84d 	bl	800390c <HAL_GetTick>
 8009872:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009874:	e00a      	b.n	800988c <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009876:	f7fa f849 	bl	800390c <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009884:	4293      	cmp	r3, r2
 8009886:	d901      	bls.n	800988c <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e133      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800988c:	4b14      	ldr	r3, [pc, #80]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 800988e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1ee      	bne.n	8009876 <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8128 	beq.w	8009af2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80098a2:	4b0f      	ldr	r3, [pc, #60]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098aa:	2b18      	cmp	r3, #24
 80098ac:	f000 80b8 	beq.w	8009a20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	f040 8099 	bne.w	80099ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ba:	4b09      	ldr	r3, [pc, #36]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a08      	ldr	r2, [pc, #32]	@ (80098e0 <HAL_RCC_OscConfig+0x690>)
 80098c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c6:	f7fa f821 	bl	800390c <HAL_GetTick>
 80098ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098cc:	e00c      	b.n	80098e8 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ce:	f7fa f81d 	bl	800390c <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d905      	bls.n	80098e8 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e109      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
 80098e0:	58024400 	.word	0x58024400
 80098e4:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098e8:	4b84      	ldr	r3, [pc, #528]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1ec      	bne.n	80098ce <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098f4:	4b81      	ldr	r3, [pc, #516]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80098f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098f8:	4b81      	ldr	r3, [pc, #516]	@ (8009b00 <HAL_RCC_OscConfig+0x8b0>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009904:	0112      	lsls	r2, r2, #4
 8009906:	430a      	orrs	r2, r1
 8009908:	497c      	ldr	r1, [pc, #496]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 800990a:	4313      	orrs	r3, r2
 800990c:	628b      	str	r3, [r1, #40]	@ 0x28
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009912:	3b01      	subs	r3, #1
 8009914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991c:	3b01      	subs	r3, #1
 800991e:	025b      	lsls	r3, r3, #9
 8009920:	b29b      	uxth	r3, r3
 8009922:	431a      	orrs	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009928:	3b01      	subs	r3, #1
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009936:	3b01      	subs	r3, #1
 8009938:	061b      	lsls	r3, r3, #24
 800993a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800993e:	496f      	ldr	r1, [pc, #444]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009940:	4313      	orrs	r3, r2
 8009942:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009944:	4b6d      	ldr	r3, [pc, #436]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009948:	4a6c      	ldr	r2, [pc, #432]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 800994a:	f023 0301 	bic.w	r3, r3, #1
 800994e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009950:	4b6a      	ldr	r3, [pc, #424]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009954:	4b6b      	ldr	r3, [pc, #428]	@ (8009b04 <HAL_RCC_OscConfig+0x8b4>)
 8009956:	4013      	ands	r3, r2
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800995c:	00d2      	lsls	r2, r2, #3
 800995e:	4967      	ldr	r1, [pc, #412]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009960:	4313      	orrs	r3, r2
 8009962:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009964:	4b65      	ldr	r3, [pc, #404]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009968:	f023 020c 	bic.w	r2, r3, #12
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009970:	4962      	ldr	r1, [pc, #392]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009972:	4313      	orrs	r3, r2
 8009974:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009976:	4b61      	ldr	r3, [pc, #388]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997a:	f023 0202 	bic.w	r2, r3, #2
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009982:	495e      	ldr	r1, [pc, #376]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009984:	4313      	orrs	r3, r2
 8009986:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009988:	4b5c      	ldr	r3, [pc, #368]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 800998a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998c:	4a5b      	ldr	r2, [pc, #364]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 800998e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009994:	4b59      	ldr	r3, [pc, #356]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009998:	4a58      	ldr	r2, [pc, #352]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 800999a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800999e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80099a0:	4b56      	ldr	r3, [pc, #344]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a4:	4a55      	ldr	r2, [pc, #340]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80099aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80099ac:	4b53      	ldr	r3, [pc, #332]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b0:	4a52      	ldr	r2, [pc, #328]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099b2:	f043 0301 	orr.w	r3, r3, #1
 80099b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099b8:	4b50      	ldr	r3, [pc, #320]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a4f      	ldr	r2, [pc, #316]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c4:	f7f9 ffa2 	bl	800390c <HAL_GetTick>
 80099c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099ca:	e008      	b.n	80099de <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099cc:	f7f9 ff9e 	bl	800390c <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d901      	bls.n	80099de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e08a      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099de:	4b47      	ldr	r3, [pc, #284]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0f0      	beq.n	80099cc <HAL_RCC_OscConfig+0x77c>
 80099ea:	e082      	b.n	8009af2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099ec:	4b43      	ldr	r3, [pc, #268]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a42      	ldr	r2, [pc, #264]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 80099f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f8:	f7f9 ff88 	bl	800390c <HAL_GetTick>
 80099fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099fe:	e008      	b.n	8009a12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a00:	f7f9 ff84 	bl	800390c <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d901      	bls.n	8009a12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e070      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a12:	4b3a      	ldr	r3, [pc, #232]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1f0      	bne.n	8009a00 <HAL_RCC_OscConfig+0x7b0>
 8009a1e:	e068      	b.n	8009af2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009a20:	4b36      	ldr	r3, [pc, #216]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009a26:	4b35      	ldr	r3, [pc, #212]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d031      	beq.n	8009a98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	f003 0203 	and.w	r2, r3, #3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d12a      	bne.n	8009a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	091b      	lsrs	r3, r3, #4
 8009a46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d122      	bne.n	8009a98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d11a      	bne.n	8009a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	0a5b      	lsrs	r3, r3, #9
 8009a66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d111      	bne.n	8009a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	0c1b      	lsrs	r3, r3, #16
 8009a78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d108      	bne.n	8009a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	0e1b      	lsrs	r3, r3, #24
 8009a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d001      	beq.n	8009a9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e02b      	b.n	8009af4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a9c:	4b17      	ldr	r3, [pc, #92]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa0:	08db      	lsrs	r3, r3, #3
 8009aa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009aa6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d01f      	beq.n	8009af2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009ab2:	4b12      	ldr	r3, [pc, #72]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	4a11      	ldr	r2, [pc, #68]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009ab8:	f023 0301 	bic.w	r3, r3, #1
 8009abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009abe:	f7f9 ff25 	bl	800390c <HAL_GetTick>
 8009ac2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ac4:	bf00      	nop
 8009ac6:	f7f9 ff21 	bl	800390c <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d0f9      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b04 <HAL_RCC_OscConfig+0x8b4>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ade:	00d2      	lsls	r2, r2, #3
 8009ae0:	4906      	ldr	r1, [pc, #24]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009ae6:	4b05      	ldr	r3, [pc, #20]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aea:	4a04      	ldr	r2, [pc, #16]	@ (8009afc <HAL_RCC_OscConfig+0x8ac>)
 8009aec:	f043 0301 	orr.w	r3, r3, #1
 8009af0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3730      	adds	r7, #48	@ 0x30
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	58024400 	.word	0x58024400
 8009b00:	fffffc0c 	.word	0xfffffc0c
 8009b04:	ffff0007 	.word	0xffff0007

08009b08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e19c      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 030f 	and.w	r3, r3, #15
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d910      	bls.n	8009b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b2a:	4b87      	ldr	r3, [pc, #540]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f023 020f 	bic.w	r2, r3, #15
 8009b32:	4985      	ldr	r1, [pc, #532]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b3a:	4b83      	ldr	r3, [pc, #524]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 030f 	and.w	r3, r3, #15
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d001      	beq.n	8009b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e184      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d010      	beq.n	8009b7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	691a      	ldr	r2, [r3, #16]
 8009b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d908      	bls.n	8009b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b68:	4b78      	ldr	r3, [pc, #480]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	4975      	ldr	r1, [pc, #468]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d010      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695a      	ldr	r2, [r3, #20]
 8009b8a:	4b70      	ldr	r3, [pc, #448]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d908      	bls.n	8009ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b96:	4b6d      	ldr	r3, [pc, #436]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	496a      	ldr	r1, [pc, #424]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d010      	beq.n	8009bd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	699a      	ldr	r2, [r3, #24]
 8009bb8:	4b64      	ldr	r3, [pc, #400]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bba:	69db      	ldr	r3, [r3, #28]
 8009bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d908      	bls.n	8009bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009bc4:	4b61      	ldr	r3, [pc, #388]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	495e      	ldr	r1, [pc, #376]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d010      	beq.n	8009c04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69da      	ldr	r2, [r3, #28]
 8009be6:	4b59      	ldr	r3, [pc, #356]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d908      	bls.n	8009c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009bf2:	4b56      	ldr	r3, [pc, #344]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	4953      	ldr	r1, [pc, #332]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d010      	beq.n	8009c32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68da      	ldr	r2, [r3, #12]
 8009c14:	4b4d      	ldr	r3, [pc, #308]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d908      	bls.n	8009c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c20:	4b4a      	ldr	r3, [pc, #296]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	f023 020f 	bic.w	r2, r3, #15
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	4947      	ldr	r1, [pc, #284]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d055      	beq.n	8009cea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009c3e:	4b43      	ldr	r3, [pc, #268]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	4940      	ldr	r1, [pc, #256]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d107      	bne.n	8009c68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c58:	4b3c      	ldr	r3, [pc, #240]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d121      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e0f6      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d107      	bne.n	8009c80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c70:	4b36      	ldr	r3, [pc, #216]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d115      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0ea      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d107      	bne.n	8009c98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c88:	4b30      	ldr	r3, [pc, #192]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e0de      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c98:	4b2c      	ldr	r3, [pc, #176]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e0d6      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ca8:	4b28      	ldr	r3, [pc, #160]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	f023 0207 	bic.w	r2, r3, #7
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	4925      	ldr	r1, [pc, #148]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cba:	f7f9 fe27 	bl	800390c <HAL_GetTick>
 8009cbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cc0:	e00a      	b.n	8009cd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cc2:	f7f9 fe23 	bl	800390c <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d901      	bls.n	8009cd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e0be      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d1eb      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d010      	beq.n	8009d18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	4b14      	ldr	r3, [pc, #80]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f003 030f 	and.w	r3, r3, #15
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d208      	bcs.n	8009d18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d06:	4b11      	ldr	r3, [pc, #68]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	f023 020f 	bic.w	r2, r3, #15
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	490e      	ldr	r1, [pc, #56]	@ (8009d4c <HAL_RCC_ClockConfig+0x244>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d18:	4b0b      	ldr	r3, [pc, #44]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 030f 	and.w	r3, r3, #15
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d214      	bcs.n	8009d50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d26:	4b08      	ldr	r3, [pc, #32]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f023 020f 	bic.w	r2, r3, #15
 8009d2e:	4906      	ldr	r1, [pc, #24]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d36:	4b04      	ldr	r3, [pc, #16]	@ (8009d48 <HAL_RCC_ClockConfig+0x240>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d005      	beq.n	8009d50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e086      	b.n	8009e56 <HAL_RCC_ClockConfig+0x34e>
 8009d48:	52002000 	.word	0x52002000
 8009d4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	4b3f      	ldr	r3, [pc, #252]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d208      	bcs.n	8009d7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	4939      	ldr	r1, [pc, #228]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0308 	and.w	r3, r3, #8
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d010      	beq.n	8009dac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	695a      	ldr	r2, [r3, #20]
 8009d8e:	4b34      	ldr	r3, [pc, #208]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d208      	bcs.n	8009dac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d9a:	4b31      	ldr	r3, [pc, #196]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	492e      	ldr	r1, [pc, #184]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d010      	beq.n	8009dda <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	699a      	ldr	r2, [r3, #24]
 8009dbc:	4b28      	ldr	r3, [pc, #160]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d208      	bcs.n	8009dda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009dc8:	4b25      	ldr	r3, [pc, #148]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	4922      	ldr	r1, [pc, #136]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	69da      	ldr	r2, [r3, #28]
 8009dea:	4b1d      	ldr	r3, [pc, #116]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d208      	bcs.n	8009e08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009df6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	4917      	ldr	r1, [pc, #92]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009e08:	f000 f834 	bl	8009e74 <HAL_RCC_GetSysClockFreq>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	4b14      	ldr	r3, [pc, #80]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	f003 030f 	and.w	r3, r3, #15
 8009e18:	4912      	ldr	r1, [pc, #72]	@ (8009e64 <HAL_RCC_ClockConfig+0x35c>)
 8009e1a:	5ccb      	ldrb	r3, [r1, r3]
 8009e1c:	f003 031f 	and.w	r3, r3, #31
 8009e20:	fa22 f303 	lsr.w	r3, r2, r3
 8009e24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e26:	4b0e      	ldr	r3, [pc, #56]	@ (8009e60 <HAL_RCC_ClockConfig+0x358>)
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8009e64 <HAL_RCC_ClockConfig+0x35c>)
 8009e30:	5cd3      	ldrb	r3, [r2, r3]
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8009e68 <HAL_RCC_ClockConfig+0x360>)
 8009e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e40:	4a0a      	ldr	r2, [pc, #40]	@ (8009e6c <HAL_RCC_ClockConfig+0x364>)
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009e46:	4b0a      	ldr	r3, [pc, #40]	@ (8009e70 <HAL_RCC_ClockConfig+0x368>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7f9 fd14 	bl	8003878 <HAL_InitTick>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	58024400 	.word	0x58024400
 8009e64:	08015608 	.word	0x08015608
 8009e68:	2400026c 	.word	0x2400026c
 8009e6c:	24000268 	.word	0x24000268
 8009e70:	24000270 	.word	0x24000270

08009e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b089      	sub	sp, #36	@ 0x24
 8009e78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e7a:	4bb3      	ldr	r3, [pc, #716]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e82:	2b18      	cmp	r3, #24
 8009e84:	f200 8155 	bhi.w	800a132 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e88:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ef5 	.word	0x08009ef5
 8009e94:	0800a133 	.word	0x0800a133
 8009e98:	0800a133 	.word	0x0800a133
 8009e9c:	0800a133 	.word	0x0800a133
 8009ea0:	0800a133 	.word	0x0800a133
 8009ea4:	0800a133 	.word	0x0800a133
 8009ea8:	0800a133 	.word	0x0800a133
 8009eac:	0800a133 	.word	0x0800a133
 8009eb0:	08009f1b 	.word	0x08009f1b
 8009eb4:	0800a133 	.word	0x0800a133
 8009eb8:	0800a133 	.word	0x0800a133
 8009ebc:	0800a133 	.word	0x0800a133
 8009ec0:	0800a133 	.word	0x0800a133
 8009ec4:	0800a133 	.word	0x0800a133
 8009ec8:	0800a133 	.word	0x0800a133
 8009ecc:	0800a133 	.word	0x0800a133
 8009ed0:	08009f21 	.word	0x08009f21
 8009ed4:	0800a133 	.word	0x0800a133
 8009ed8:	0800a133 	.word	0x0800a133
 8009edc:	0800a133 	.word	0x0800a133
 8009ee0:	0800a133 	.word	0x0800a133
 8009ee4:	0800a133 	.word	0x0800a133
 8009ee8:	0800a133 	.word	0x0800a133
 8009eec:	0800a133 	.word	0x0800a133
 8009ef0:	08009f27 	.word	0x08009f27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef4:	4b94      	ldr	r3, [pc, #592]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d009      	beq.n	8009f14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f00:	4b91      	ldr	r3, [pc, #580]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	08db      	lsrs	r3, r3, #3
 8009f06:	f003 0303 	and.w	r3, r3, #3
 8009f0a:	4a90      	ldr	r2, [pc, #576]	@ (800a14c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009f12:	e111      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f14:	4b8d      	ldr	r3, [pc, #564]	@ (800a14c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f16:	61bb      	str	r3, [r7, #24]
      break;
 8009f18:	e10e      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009f1a:	4b8d      	ldr	r3, [pc, #564]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f1c:	61bb      	str	r3, [r7, #24]
      break;
 8009f1e:	e10b      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009f20:	4b8c      	ldr	r3, [pc, #560]	@ (800a154 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009f22:	61bb      	str	r3, [r7, #24]
      break;
 8009f24:	e108      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f26:	4b88      	ldr	r3, [pc, #544]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009f30:	4b85      	ldr	r3, [pc, #532]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f34:	091b      	lsrs	r3, r3, #4
 8009f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009f3c:	4b82      	ldr	r3, [pc, #520]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f46:	4b80      	ldr	r3, [pc, #512]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4a:	08db      	lsrs	r3, r3, #3
 8009f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	fb02 f303 	mul.w	r3, r2, r3
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80e1 	beq.w	800a12c <HAL_RCC_GetSysClockFreq+0x2b8>
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	f000 8083 	beq.w	800a078 <HAL_RCC_GetSysClockFreq+0x204>
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	f200 80a1 	bhi.w	800a0bc <HAL_RCC_GetSysClockFreq+0x248>
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_RCC_GetSysClockFreq+0x114>
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d056      	beq.n	800a034 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f86:	e099      	b.n	800a0bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f88:	4b6f      	ldr	r3, [pc, #444]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0320 	and.w	r3, r3, #32
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02d      	beq.n	8009ff0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f94:	4b6c      	ldr	r3, [pc, #432]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	08db      	lsrs	r3, r3, #3
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800a14c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	ee07 3a90 	vmov	s15, r3
 8009fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fbe:	4b62      	ldr	r3, [pc, #392]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009fee:	e087      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a15c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a002:	4b51      	ldr	r3, [pc, #324]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a012:	ed97 6a02 	vldr	s12, [r7, #8]
 800a016:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a032:	e065      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a046:	4b40      	ldr	r3, [pc, #256]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a056:	ed97 6a02 	vldr	s12, [r7, #8]
 800a05a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a076:	e043      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a082:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a164 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08a:	4b2f      	ldr	r3, [pc, #188]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a09e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0ba:	e021      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a160 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a158 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a100:	4b11      	ldr	r3, [pc, #68]	@ (800a148 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a104:	0a5b      	lsrs	r3, r3, #9
 800a106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a10a:	3301      	adds	r3, #1
 800a10c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	ee07 3a90 	vmov	s15, r3
 800a114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a118:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a124:	ee17 3a90 	vmov	r3, s15
 800a128:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a12a:	e005      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a12c:	2300      	movs	r3, #0
 800a12e:	61bb      	str	r3, [r7, #24]
      break;
 800a130:	e002      	b.n	800a138 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a132:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a134:	61bb      	str	r3, [r7, #24]
      break;
 800a136:	bf00      	nop
  }

  return sysclockfreq;
 800a138:	69bb      	ldr	r3, [r7, #24]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3724      	adds	r7, #36	@ 0x24
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	58024400 	.word	0x58024400
 800a14c:	03d09000 	.word	0x03d09000
 800a150:	003d0900 	.word	0x003d0900
 800a154:	017d7840 	.word	0x017d7840
 800a158:	46000000 	.word	0x46000000
 800a15c:	4c742400 	.word	0x4c742400
 800a160:	4a742400 	.word	0x4a742400
 800a164:	4bbebc20 	.word	0x4bbebc20

0800a168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a16e:	f7ff fe81 	bl	8009e74 <HAL_RCC_GetSysClockFreq>
 800a172:	4602      	mov	r2, r0
 800a174:	4b10      	ldr	r3, [pc, #64]	@ (800a1b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	0a1b      	lsrs	r3, r3, #8
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	490f      	ldr	r1, [pc, #60]	@ (800a1bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a180:	5ccb      	ldrb	r3, [r1, r3]
 800a182:	f003 031f 	and.w	r3, r3, #31
 800a186:	fa22 f303 	lsr.w	r3, r2, r3
 800a18a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a18c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	4a09      	ldr	r2, [pc, #36]	@ (800a1bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a196:	5cd3      	ldrb	r3, [r2, r3]
 800a198:	f003 031f 	and.w	r3, r3, #31
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a2:	4a07      	ldr	r2, [pc, #28]	@ (800a1c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1a6:	4a07      	ldr	r2, [pc, #28]	@ (800a1c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a1ac:	4b04      	ldr	r3, [pc, #16]	@ (800a1c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	58024400 	.word	0x58024400
 800a1bc:	08015608 	.word	0x08015608
 800a1c0:	2400026c 	.word	0x2400026c
 800a1c4:	24000268 	.word	0x24000268

0800a1c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a1cc:	f7ff ffcc 	bl	800a168 <HAL_RCC_GetHCLKFreq>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	4b06      	ldr	r3, [pc, #24]	@ (800a1ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	091b      	lsrs	r3, r3, #4
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	4904      	ldr	r1, [pc, #16]	@ (800a1f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1de:	5ccb      	ldrb	r3, [r1, r3]
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	08015608 	.word	0x08015608

0800a1f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a1f8:	f7ff ffb6 	bl	800a168 <HAL_RCC_GetHCLKFreq>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	4b06      	ldr	r3, [pc, #24]	@ (800a218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	4904      	ldr	r1, [pc, #16]	@ (800a21c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a20a:	5ccb      	ldrb	r3, [r1, r3]
 800a20c:	f003 031f 	and.w	r3, r3, #31
 800a210:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a214:	4618      	mov	r0, r3
 800a216:	bd80      	pop	{r7, pc}
 800a218:	58024400 	.word	0x58024400
 800a21c:	08015608 	.word	0x08015608

0800a220 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a224:	b0ca      	sub	sp, #296	@ 0x128
 800a226:	af00      	add	r7, sp, #0
 800a228:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a232:	2300      	movs	r3, #0
 800a234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a244:	2500      	movs	r5, #0
 800a246:	ea54 0305 	orrs.w	r3, r4, r5
 800a24a:	d049      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a252:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a256:	d02f      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a258:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a25c:	d828      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a25e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a262:	d01a      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a264:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a268:	d822      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a26e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a272:	d007      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a274:	e01c      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a276:	4bb8      	ldr	r3, [pc, #736]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27a:	4ab7      	ldr	r2, [pc, #732]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a27c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a282:	e01a      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a288:	3308      	adds	r3, #8
 800a28a:	2102      	movs	r1, #2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f002 fb61 	bl	800c954 <RCCEx_PLL2_Config>
 800a292:	4603      	mov	r3, r0
 800a294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a298:	e00f      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29e:	3328      	adds	r3, #40	@ 0x28
 800a2a0:	2102      	movs	r1, #2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f002 fc08 	bl	800cab8 <RCCEx_PLL3_Config>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a2ae:	e004      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2b6:	e000      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a2b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a2c2:	4ba5      	ldr	r3, [pc, #660]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a2c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2d0:	4aa1      	ldr	r2, [pc, #644]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a2d2:	430b      	orrs	r3, r1
 800a2d4:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2d6:	e003      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a2ec:	f04f 0900 	mov.w	r9, #0
 800a2f0:	ea58 0309 	orrs.w	r3, r8, r9
 800a2f4:	d047      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d82a      	bhi.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a300:	a201      	add	r2, pc, #4	@ (adr r2, 800a308 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a306:	bf00      	nop
 800a308:	0800a31d 	.word	0x0800a31d
 800a30c:	0800a32b 	.word	0x0800a32b
 800a310:	0800a341 	.word	0x0800a341
 800a314:	0800a35f 	.word	0x0800a35f
 800a318:	0800a35f 	.word	0x0800a35f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a31c:	4b8e      	ldr	r3, [pc, #568]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a320:	4a8d      	ldr	r2, [pc, #564]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a326:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a328:	e01a      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a32e:	3308      	adds	r3, #8
 800a330:	2100      	movs	r1, #0
 800a332:	4618      	mov	r0, r3
 800a334:	f002 fb0e 	bl	800c954 <RCCEx_PLL2_Config>
 800a338:	4603      	mov	r3, r0
 800a33a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a33e:	e00f      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a344:	3328      	adds	r3, #40	@ 0x28
 800a346:	2100      	movs	r1, #0
 800a348:	4618      	mov	r0, r3
 800a34a:	f002 fbb5 	bl	800cab8 <RCCEx_PLL3_Config>
 800a34e:	4603      	mov	r3, r0
 800a350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a354:	e004      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a35c:	e000      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a35e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10a      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a368:	4b7b      	ldr	r3, [pc, #492]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a36a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a36c:	f023 0107 	bic.w	r1, r3, #7
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a376:	4a78      	ldr	r2, [pc, #480]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a378:	430b      	orrs	r3, r1
 800a37a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a37c:	e003      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a392:	f04f 0b00 	mov.w	fp, #0
 800a396:	ea5a 030b 	orrs.w	r3, sl, fp
 800a39a:	d04c      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a6:	d030      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a3a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ac:	d829      	bhi.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a3ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3b0:	d02d      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a3b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a3b4:	d825      	bhi.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a3b6:	2b80      	cmp	r3, #128	@ 0x80
 800a3b8:	d018      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a3ba:	2b80      	cmp	r3, #128	@ 0x80
 800a3bc:	d821      	bhi.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a3c2:	2b40      	cmp	r3, #64	@ 0x40
 800a3c4:	d007      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a3c6:	e01c      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3c8:	4b63      	ldr	r3, [pc, #396]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	4a62      	ldr	r2, [pc, #392]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a3ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a3d4:	e01c      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3da:	3308      	adds	r3, #8
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f002 fab8 	bl	800c954 <RCCEx_PLL2_Config>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a3ea:	e011      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f0:	3328      	adds	r3, #40	@ 0x28
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f002 fb5f 	bl	800cab8 <RCCEx_PLL3_Config>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a400:	e006      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a408:	e002      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a40a:	bf00      	nop
 800a40c:	e000      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a40e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a418:	4b4f      	ldr	r3, [pc, #316]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a41c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a426:	4a4c      	ldr	r2, [pc, #304]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a428:	430b      	orrs	r3, r1
 800a42a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a42c:	e003      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a442:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a446:	2300      	movs	r3, #0
 800a448:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a44c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a450:	460b      	mov	r3, r1
 800a452:	4313      	orrs	r3, r2
 800a454:	d053      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a45e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a462:	d035      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a464:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a468:	d82e      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a46a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a46e:	d031      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a470:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a474:	d828      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a47a:	d01a      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a47c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a480:	d822      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a48a:	d007      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a48c:	e01c      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48e:	4b32      	ldr	r3, [pc, #200]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a492:	4a31      	ldr	r2, [pc, #196]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a498:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a49a:	e01c      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f002 fa55 	bl	800c954 <RCCEx_PLL2_Config>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a4b0:	e011      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b6:	3328      	adds	r3, #40	@ 0x28
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f002 fafc 	bl	800cab8 <RCCEx_PLL3_Config>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a4c6:	e006      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4ce:	e002      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a4d0:	bf00      	nop
 800a4d2:	e000      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10b      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a4de:	4b1e      	ldr	r3, [pc, #120]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a4ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4f4:	e003      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a50a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a50e:	2300      	movs	r3, #0
 800a510:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a514:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a518:	460b      	mov	r3, r1
 800a51a:	4313      	orrs	r3, r2
 800a51c:	d056      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a522:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a526:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a52a:	d038      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a52c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a530:	d831      	bhi.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a532:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a536:	d034      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a538:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a53c:	d82b      	bhi.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a53e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a542:	d01d      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a548:	d825      	bhi.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d006      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a54e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a552:	d00a      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a554:	e01f      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a55c:	4ba2      	ldr	r3, [pc, #648]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a560:	4aa1      	ldr	r2, [pc, #644]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a568:	e01c      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a56e:	3308      	adds	r3, #8
 800a570:	2100      	movs	r1, #0
 800a572:	4618      	mov	r0, r3
 800a574:	f002 f9ee 	bl	800c954 <RCCEx_PLL2_Config>
 800a578:	4603      	mov	r3, r0
 800a57a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a57e:	e011      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a584:	3328      	adds	r3, #40	@ 0x28
 800a586:	2100      	movs	r1, #0
 800a588:	4618      	mov	r0, r3
 800a58a:	f002 fa95 	bl	800cab8 <RCCEx_PLL3_Config>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a594:	e006      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a59c:	e002      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a59e:	bf00      	nop
 800a5a0:	e000      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a5a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10b      	bne.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a5ac:	4b8e      	ldr	r3, [pc, #568]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a5bc:	4a8a      	ldr	r2, [pc, #552]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5c2:	e003      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a5d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	d03a      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5f2:	2b30      	cmp	r3, #48	@ 0x30
 800a5f4:	d01f      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a5f6:	2b30      	cmp	r3, #48	@ 0x30
 800a5f8:	d819      	bhi.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a5fa:	2b20      	cmp	r3, #32
 800a5fc:	d00c      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d815      	bhi.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d019      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a606:	2b10      	cmp	r3, #16
 800a608:	d111      	bne.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a60a:	4b77      	ldr	r3, [pc, #476]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60e:	4a76      	ldr	r2, [pc, #472]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a616:	e011      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a61c:	3308      	adds	r3, #8
 800a61e:	2102      	movs	r1, #2
 800a620:	4618      	mov	r0, r3
 800a622:	f002 f997 	bl	800c954 <RCCEx_PLL2_Config>
 800a626:	4603      	mov	r3, r0
 800a628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a62c:	e006      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a634:	e002      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a636:	bf00      	nop
 800a638:	e000      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a63c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a644:	4b68      	ldr	r3, [pc, #416]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a648:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a652:	4a65      	ldr	r2, [pc, #404]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a654:	430b      	orrs	r3, r1
 800a656:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a658:	e003      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a65a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a65e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a66e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a672:	2300      	movs	r3, #0
 800a674:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a678:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4313      	orrs	r3, r2
 800a680:	d051      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a68c:	d035      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a68e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a692:	d82e      	bhi.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a694:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a698:	d031      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a69a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a69e:	d828      	bhi.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a6a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6a4:	d01a      	beq.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a6a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6aa:	d822      	bhi.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d003      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a6b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6b4:	d007      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a6b6:	e01c      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6b8:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6bc:	4a4a      	ldr	r2, [pc, #296]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a6be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6c4:	e01c      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f002 f940 	bl	800c954 <RCCEx_PLL2_Config>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6da:	e011      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6e0:	3328      	adds	r3, #40	@ 0x28
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f002 f9e7 	bl	800cab8 <RCCEx_PLL3_Config>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a6f0:	e006      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6f8:	e002      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a6fa:	bf00      	nop
 800a6fc:	e000      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a6fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a708:	4b37      	ldr	r3, [pc, #220]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a70c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a716:	4a34      	ldr	r2, [pc, #208]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a718:	430b      	orrs	r3, r1
 800a71a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a71c:	e003      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a736:	2300      	movs	r3, #0
 800a738:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a73c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a740:	460b      	mov	r3, r1
 800a742:	4313      	orrs	r3, r2
 800a744:	d056      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a74a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a74c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a750:	d033      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a752:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a756:	d82c      	bhi.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a758:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a75c:	d02f      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a75e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a762:	d826      	bhi.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a764:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a768:	d02b      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a76a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a76e:	d820      	bhi.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a774:	d012      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a776:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a77a:	d81a      	bhi.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d022      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a784:	d115      	bne.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a78a:	3308      	adds	r3, #8
 800a78c:	2101      	movs	r1, #1
 800a78e:	4618      	mov	r0, r3
 800a790:	f002 f8e0 	bl	800c954 <RCCEx_PLL2_Config>
 800a794:	4603      	mov	r3, r0
 800a796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a79a:	e015      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a0:	3328      	adds	r3, #40	@ 0x28
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f002 f987 	bl	800cab8 <RCCEx_PLL3_Config>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a7b0:	e00a      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7b8:	e006      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7ba:	bf00      	nop
 800a7bc:	e004      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7be:	bf00      	nop
 800a7c0:	e002      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7c2:	bf00      	nop
 800a7c4:	e000      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10d      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a7d0:	4b05      	ldr	r3, [pc, #20]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a7d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7de:	4a02      	ldr	r2, [pc, #8]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a7e4:	e006      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a7e6:	bf00      	nop
 800a7e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a804:	2300      	movs	r3, #0
 800a806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a80a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a80e:	460b      	mov	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	d055      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a81c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a820:	d033      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a826:	d82c      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82c:	d02f      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a82e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a832:	d826      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a834:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a838:	d02b      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a83a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a83e:	d820      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a844:	d012      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a84a:	d81a      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d022      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a854:	d115      	bne.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a85a:	3308      	adds	r3, #8
 800a85c:	2101      	movs	r1, #1
 800a85e:	4618      	mov	r0, r3
 800a860:	f002 f878 	bl	800c954 <RCCEx_PLL2_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a86a:	e015      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a870:	3328      	adds	r3, #40	@ 0x28
 800a872:	2101      	movs	r1, #1
 800a874:	4618      	mov	r0, r3
 800a876:	f002 f91f 	bl	800cab8 <RCCEx_PLL3_Config>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a880:	e00a      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a888:	e006      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a88a:	bf00      	nop
 800a88c:	e004      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a88e:	bf00      	nop
 800a890:	e002      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a892:	bf00      	nop
 800a894:	e000      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a896:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10b      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a8a0:	4ba3      	ldr	r3, [pc, #652]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a8a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8b0:	4a9f      	ldr	r2, [pc, #636]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a8b2:	430b      	orrs	r3, r1
 800a8b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8b6:	e003      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a8cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a8d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	d037      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ea:	d00e      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a8ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8f0:	d816      	bhi.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d018      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a8f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8fa:	d111      	bne.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8fc:	4b8c      	ldr	r3, [pc, #560]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a900:	4a8b      	ldr	r2, [pc, #556]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a908:	e00f      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90e:	3308      	adds	r3, #8
 800a910:	2101      	movs	r1, #1
 800a912:	4618      	mov	r0, r3
 800a914:	f002 f81e 	bl	800c954 <RCCEx_PLL2_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a91e:	e004      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a926:	e000      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a92a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10a      	bne.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a932:	4b7f      	ldr	r3, [pc, #508]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a936:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a93e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a940:	4a7b      	ldr	r2, [pc, #492]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a942:	430b      	orrs	r3, r1
 800a944:	6513      	str	r3, [r2, #80]	@ 0x50
 800a946:	e003      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a94c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a95c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a960:	2300      	movs	r3, #0
 800a962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a966:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a96a:	460b      	mov	r3, r1
 800a96c:	4313      	orrs	r3, r2
 800a96e:	d039      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a976:	2b03      	cmp	r3, #3
 800a978:	d81c      	bhi.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a97a:	a201      	add	r2, pc, #4	@ (adr r2, 800a980 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800a9bd 	.word	0x0800a9bd
 800a984:	0800a991 	.word	0x0800a991
 800a988:	0800a99f 	.word	0x0800a99f
 800a98c:	0800a9bd 	.word	0x0800a9bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a990:	4b67      	ldr	r3, [pc, #412]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a994:	4a66      	ldr	r2, [pc, #408]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a99a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a99c:	e00f      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	2102      	movs	r1, #2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 ffd4 	bl	800c954 <RCCEx_PLL2_Config>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a9b2:	e004      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9ba:	e000      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10a      	bne.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a9c6:	4b5a      	ldr	r3, [pc, #360]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ca:	f023 0103 	bic.w	r1, r3, #3
 800a9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9d4:	4a56      	ldr	r2, [pc, #344]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a9d6:	430b      	orrs	r3, r1
 800a9d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9da:	e003      	b.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a9f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a9fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4313      	orrs	r3, r2
 800aa02:	f000 809f 	beq.w	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa06:	4b4b      	ldr	r3, [pc, #300]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a4a      	ldr	r2, [pc, #296]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aa0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa12:	f7f8 ff7b 	bl	800390c <HAL_GetTick>
 800aa16:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa1a:	e00b      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa1c:	f7f8 ff76 	bl	800390c <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b64      	cmp	r3, #100	@ 0x64
 800aa2a:	d903      	bls.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa32:	e005      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa34:	4b3f      	ldr	r3, [pc, #252]	@ (800ab34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0ed      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800aa40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d179      	bne.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aa48:	4b39      	ldr	r3, [pc, #228]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aa4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa54:	4053      	eors	r3, r2
 800aa56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d015      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa5e:	4b34      	ldr	r3, [pc, #208]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa6a:	4b31      	ldr	r3, [pc, #196]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa6e:	4a30      	ldr	r2, [pc, #192]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa76:	4b2e      	ldr	r3, [pc, #184]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa7a:	4a2d      	ldr	r2, [pc, #180]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800aa82:	4a2b      	ldr	r2, [pc, #172]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aa84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aa92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa96:	d118      	bne.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa98:	f7f8 ff38 	bl	800390c <HAL_GetTick>
 800aa9c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aaa0:	e00d      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaa2:	f7f8 ff33 	bl	800390c <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800aaac:	1ad2      	subs	r2, r2, r3
 800aaae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d903      	bls.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800aabc:	e005      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aabe:	4b1c      	ldr	r3, [pc, #112]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0eb      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800aaca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d129      	bne.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aae2:	d10e      	bne.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800aae4:	4b12      	ldr	r3, [pc, #72]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aaec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aaf4:	091a      	lsrs	r2, r3, #4
 800aaf6:	4b10      	ldr	r3, [pc, #64]	@ (800ab38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800aaf8:	4013      	ands	r3, r2
 800aafa:	4a0d      	ldr	r2, [pc, #52]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aafc:	430b      	orrs	r3, r1
 800aafe:	6113      	str	r3, [r2, #16]
 800ab00:	e005      	b.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ab02:	4b0b      	ldr	r3, [pc, #44]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	4a0a      	ldr	r2, [pc, #40]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ab0c:	6113      	str	r3, [r2, #16]
 800ab0e:	4b08      	ldr	r3, [pc, #32]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ab12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ab1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab1e:	4a04      	ldr	r2, [pc, #16]	@ (800ab30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ab20:	430b      	orrs	r3, r1
 800ab22:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab24:	e00e      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ab26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ab2e:	e009      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ab30:	58024400 	.word	0x58024400
 800ab34:	58024800 	.word	0x58024800
 800ab38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	f002 0301 	and.w	r3, r2, #1
 800ab50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab54:	2300      	movs	r3, #0
 800ab56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4313      	orrs	r3, r2
 800ab62:	f000 8089 	beq.w	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab6c:	2b28      	cmp	r3, #40	@ 0x28
 800ab6e:	d86b      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ab70:	a201      	add	r2, pc, #4	@ (adr r2, 800ab78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ab72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab76:	bf00      	nop
 800ab78:	0800ac51 	.word	0x0800ac51
 800ab7c:	0800ac49 	.word	0x0800ac49
 800ab80:	0800ac49 	.word	0x0800ac49
 800ab84:	0800ac49 	.word	0x0800ac49
 800ab88:	0800ac49 	.word	0x0800ac49
 800ab8c:	0800ac49 	.word	0x0800ac49
 800ab90:	0800ac49 	.word	0x0800ac49
 800ab94:	0800ac49 	.word	0x0800ac49
 800ab98:	0800ac1d 	.word	0x0800ac1d
 800ab9c:	0800ac49 	.word	0x0800ac49
 800aba0:	0800ac49 	.word	0x0800ac49
 800aba4:	0800ac49 	.word	0x0800ac49
 800aba8:	0800ac49 	.word	0x0800ac49
 800abac:	0800ac49 	.word	0x0800ac49
 800abb0:	0800ac49 	.word	0x0800ac49
 800abb4:	0800ac49 	.word	0x0800ac49
 800abb8:	0800ac33 	.word	0x0800ac33
 800abbc:	0800ac49 	.word	0x0800ac49
 800abc0:	0800ac49 	.word	0x0800ac49
 800abc4:	0800ac49 	.word	0x0800ac49
 800abc8:	0800ac49 	.word	0x0800ac49
 800abcc:	0800ac49 	.word	0x0800ac49
 800abd0:	0800ac49 	.word	0x0800ac49
 800abd4:	0800ac49 	.word	0x0800ac49
 800abd8:	0800ac51 	.word	0x0800ac51
 800abdc:	0800ac49 	.word	0x0800ac49
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800ac49 	.word	0x0800ac49
 800abe8:	0800ac49 	.word	0x0800ac49
 800abec:	0800ac49 	.word	0x0800ac49
 800abf0:	0800ac49 	.word	0x0800ac49
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800ac51 	.word	0x0800ac51
 800abfc:	0800ac49 	.word	0x0800ac49
 800ac00:	0800ac49 	.word	0x0800ac49
 800ac04:	0800ac49 	.word	0x0800ac49
 800ac08:	0800ac49 	.word	0x0800ac49
 800ac0c:	0800ac49 	.word	0x0800ac49
 800ac10:	0800ac49 	.word	0x0800ac49
 800ac14:	0800ac49 	.word	0x0800ac49
 800ac18:	0800ac51 	.word	0x0800ac51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac20:	3308      	adds	r3, #8
 800ac22:	2101      	movs	r1, #1
 800ac24:	4618      	mov	r0, r3
 800ac26:	f001 fe95 	bl	800c954 <RCCEx_PLL2_Config>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac30:	e00f      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac36:	3328      	adds	r3, #40	@ 0x28
 800ac38:	2101      	movs	r1, #1
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 ff3c 	bl	800cab8 <RCCEx_PLL3_Config>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ac46:	e004      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac4e:	e000      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ac50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10a      	bne.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ac5a:	4bbf      	ldr	r3, [pc, #764]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ac5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ac62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac68:	4abb      	ldr	r2, [pc, #748]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ac6a:	430b      	orrs	r3, r1
 800ac6c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac6e:	e003      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f002 0302 	and.w	r3, r2, #2
 800ac84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ac92:	460b      	mov	r3, r1
 800ac94:	4313      	orrs	r3, r2
 800ac96:	d041      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac9e:	2b05      	cmp	r3, #5
 800aca0:	d824      	bhi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800aca2:	a201      	add	r2, pc, #4	@ (adr r2, 800aca8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800aca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca8:	0800acf5 	.word	0x0800acf5
 800acac:	0800acc1 	.word	0x0800acc1
 800acb0:	0800acd7 	.word	0x0800acd7
 800acb4:	0800acf5 	.word	0x0800acf5
 800acb8:	0800acf5 	.word	0x0800acf5
 800acbc:	0800acf5 	.word	0x0800acf5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc4:	3308      	adds	r3, #8
 800acc6:	2101      	movs	r1, #1
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 fe43 	bl	800c954 <RCCEx_PLL2_Config>
 800acce:	4603      	mov	r3, r0
 800acd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acd4:	e00f      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acda:	3328      	adds	r3, #40	@ 0x28
 800acdc:	2101      	movs	r1, #1
 800acde:	4618      	mov	r0, r3
 800ace0:	f001 feea 	bl	800cab8 <RCCEx_PLL3_Config>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800acea:	e004      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acf2:	e000      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800acf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10a      	bne.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800acfe:	4b96      	ldr	r3, [pc, #600]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad02:	f023 0107 	bic.w	r1, r3, #7
 800ad06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad0c:	4a92      	ldr	r2, [pc, #584]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad12:	e003      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ad1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f002 0304 	and.w	r3, r2, #4
 800ad28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	d044      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ad3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad44:	2b05      	cmp	r3, #5
 800ad46:	d825      	bhi.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ad48:	a201      	add	r2, pc, #4	@ (adr r2, 800ad50 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ad4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4e:	bf00      	nop
 800ad50:	0800ad9d 	.word	0x0800ad9d
 800ad54:	0800ad69 	.word	0x0800ad69
 800ad58:	0800ad7f 	.word	0x0800ad7f
 800ad5c:	0800ad9d 	.word	0x0800ad9d
 800ad60:	0800ad9d 	.word	0x0800ad9d
 800ad64:	0800ad9d 	.word	0x0800ad9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6c:	3308      	adds	r3, #8
 800ad6e:	2101      	movs	r1, #1
 800ad70:	4618      	mov	r0, r3
 800ad72:	f001 fdef 	bl	800c954 <RCCEx_PLL2_Config>
 800ad76:	4603      	mov	r3, r0
 800ad78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad7c:	e00f      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad82:	3328      	adds	r3, #40	@ 0x28
 800ad84:	2101      	movs	r1, #1
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 fe96 	bl	800cab8 <RCCEx_PLL3_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ad92:	e004      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad9a:	e000      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ad9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10b      	bne.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ada6:	4b6c      	ldr	r3, [pc, #432]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ada8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adaa:	f023 0107 	bic.w	r1, r3, #7
 800adae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adb6:	4a68      	ldr	r2, [pc, #416]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800adb8:	430b      	orrs	r3, r1
 800adba:	6593      	str	r3, [r2, #88]	@ 0x58
 800adbc:	e003      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800adc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f002 0320 	and.w	r3, r2, #32
 800add2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800add6:	2300      	movs	r3, #0
 800add8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800addc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ade0:	460b      	mov	r3, r1
 800ade2:	4313      	orrs	r3, r2
 800ade4:	d055      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ade6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adf2:	d033      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800adf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adf8:	d82c      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800adfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adfe:	d02f      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ae00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae04:	d826      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ae06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae0a:	d02b      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ae0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae10:	d820      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ae12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae16:	d012      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ae18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae1c:	d81a      	bhi.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d022      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ae22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae26:	d115      	bne.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 fd8f 	bl	800c954 <RCCEx_PLL2_Config>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae3c:	e015      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae42:	3328      	adds	r3, #40	@ 0x28
 800ae44:	2102      	movs	r1, #2
 800ae46:	4618      	mov	r0, r3
 800ae48:	f001 fe36 	bl	800cab8 <RCCEx_PLL3_Config>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ae52:	e00a      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae5a:	e006      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae5c:	bf00      	nop
 800ae5e:	e004      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae60:	bf00      	nop
 800ae62:	e002      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae64:	bf00      	nop
 800ae66:	e000      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ae68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10b      	bne.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae72:	4b39      	ldr	r3, [pc, #228]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ae7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae82:	4a35      	ldr	r2, [pc, #212]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ae84:	430b      	orrs	r3, r1
 800ae86:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae88:	e003      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ae92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ae9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aea2:	2300      	movs	r3, #0
 800aea4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aea8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800aeac:	460b      	mov	r3, r1
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	d058      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aeb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aeba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aebe:	d033      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aec0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aec4:	d82c      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeca:	d02f      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aed0:	d826      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aed2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aed6:	d02b      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aed8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aedc:	d820      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aede:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aee2:	d012      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aee8:	d81a      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d022      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800aeee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aef2:	d115      	bne.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef8:	3308      	adds	r3, #8
 800aefa:	2100      	movs	r1, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 fd29 	bl	800c954 <RCCEx_PLL2_Config>
 800af02:	4603      	mov	r3, r0
 800af04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800af08:	e015      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af0e:	3328      	adds	r3, #40	@ 0x28
 800af10:	2102      	movs	r1, #2
 800af12:	4618      	mov	r0, r3
 800af14:	f001 fdd0 	bl	800cab8 <RCCEx_PLL3_Config>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800af1e:	e00a      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af26:	e006      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af28:	bf00      	nop
 800af2a:	e004      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af2c:	bf00      	nop
 800af2e:	e002      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af30:	bf00      	nop
 800af32:	e000      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800af34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10e      	bne.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af3e:	4b06      	ldr	r3, [pc, #24]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800af46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af4e:	4a02      	ldr	r2, [pc, #8]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800af50:	430b      	orrs	r3, r1
 800af52:	6593      	str	r3, [r2, #88]	@ 0x58
 800af54:	e006      	b.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800af56:	bf00      	nop
 800af58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800af64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800af70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af74:	2300      	movs	r3, #0
 800af76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af7e:	460b      	mov	r3, r1
 800af80:	4313      	orrs	r3, r2
 800af82:	d055      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800af84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800af8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af90:	d033      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800af92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800af96:	d82c      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800af98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af9c:	d02f      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800af9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afa2:	d826      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800afa4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800afa8:	d02b      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800afaa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800afae:	d820      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800afb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afb4:	d012      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800afb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800afba:	d81a      	bhi.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d022      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800afc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afc4:	d115      	bne.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afca:	3308      	adds	r3, #8
 800afcc:	2100      	movs	r1, #0
 800afce:	4618      	mov	r0, r3
 800afd0:	f001 fcc0 	bl	800c954 <RCCEx_PLL2_Config>
 800afd4:	4603      	mov	r3, r0
 800afd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800afda:	e015      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe0:	3328      	adds	r3, #40	@ 0x28
 800afe2:	2102      	movs	r1, #2
 800afe4:	4618      	mov	r0, r3
 800afe6:	f001 fd67 	bl	800cab8 <RCCEx_PLL3_Config>
 800afea:	4603      	mov	r3, r0
 800afec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aff0:	e00a      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aff8:	e006      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800affa:	bf00      	nop
 800affc:	e004      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800affe:	bf00      	nop
 800b000:	e002      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b002:	bf00      	nop
 800b004:	e000      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10b      	bne.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b010:	4ba1      	ldr	r3, [pc, #644]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b014:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b01c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b020:	4a9d      	ldr	r2, [pc, #628]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b022:	430b      	orrs	r3, r1
 800b024:	6593      	str	r3, [r2, #88]	@ 0x58
 800b026:	e003      	b.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b02c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	f002 0308 	and.w	r3, r2, #8
 800b03c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b040:	2300      	movs	r3, #0
 800b042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b046:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b04a:	460b      	mov	r3, r1
 800b04c:	4313      	orrs	r3, r2
 800b04e:	d01e      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b05c:	d10c      	bne.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b062:	3328      	adds	r3, #40	@ 0x28
 800b064:	2102      	movs	r1, #2
 800b066:	4618      	mov	r0, r3
 800b068:	f001 fd26 	bl	800cab8 <RCCEx_PLL3_Config>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b078:	4b87      	ldr	r3, [pc, #540]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b07a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b07c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b088:	4a83      	ldr	r2, [pc, #524]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b08a:	430b      	orrs	r3, r1
 800b08c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b096:	f002 0310 	and.w	r3, r2, #16
 800b09a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	d01e      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b0b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0ba:	d10c      	bne.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c0:	3328      	adds	r3, #40	@ 0x28
 800b0c2:	2102      	movs	r1, #2
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f001 fcf7 	bl	800cab8 <RCCEx_PLL3_Config>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b0d6:	4b70      	ldr	r3, [pc, #448]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b0e6:	4a6c      	ldr	r2, [pc, #432]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b0f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b102:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b106:	460b      	mov	r3, r1
 800b108:	4313      	orrs	r3, r2
 800b10a:	d03e      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b118:	d022      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b11a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b11e:	d81b      	bhi.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b120:	2b00      	cmp	r3, #0
 800b122:	d003      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b128:	d00b      	beq.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b12a:	e015      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b130:	3308      	adds	r3, #8
 800b132:	2100      	movs	r1, #0
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fc0d 	bl	800c954 <RCCEx_PLL2_Config>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b140:	e00f      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b146:	3328      	adds	r3, #40	@ 0x28
 800b148:	2102      	movs	r1, #2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 fcb4 	bl	800cab8 <RCCEx_PLL3_Config>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b156:	e004      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b15e:	e000      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b160:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b16a:	4b4b      	ldr	r3, [pc, #300]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b16c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b16e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b176:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b17a:	4a47      	ldr	r2, [pc, #284]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b17c:	430b      	orrs	r3, r1
 800b17e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b180:	e003      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b196:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b198:	2300      	movs	r3, #0
 800b19a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b19c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	d03b      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1b2:	d01f      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b1b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b1b8:	d818      	bhi.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1be:	d003      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b1c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1c4:	d007      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b1c6:	e011      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c8:	4b33      	ldr	r3, [pc, #204]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1cc:	4a32      	ldr	r2, [pc, #200]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b1ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1d4:	e00f      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1da:	3328      	adds	r3, #40	@ 0x28
 800b1dc:	2101      	movs	r1, #1
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 fc6a 	bl	800cab8 <RCCEx_PLL3_Config>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b1ea:	e004      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b1f2:	e000      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10b      	bne.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1fe:	4b26      	ldr	r3, [pc, #152]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b202:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b20e:	4a22      	ldr	r2, [pc, #136]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b210:	430b      	orrs	r3, r1
 800b212:	6553      	str	r3, [r2, #84]	@ 0x54
 800b214:	e003      	b.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b21a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b22a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b22c:	2300      	movs	r3, #0
 800b22e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b230:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b234:	460b      	mov	r3, r1
 800b236:	4313      	orrs	r3, r2
 800b238:	d034      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b23e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b240:	2b00      	cmp	r3, #0
 800b242:	d003      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b248:	d007      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b24a:	e011      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b24c:	4b12      	ldr	r3, [pc, #72]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b250:	4a11      	ldr	r2, [pc, #68]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b258:	e00e      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b25e:	3308      	adds	r3, #8
 800b260:	2102      	movs	r1, #2
 800b262:	4618      	mov	r0, r3
 800b264:	f001 fb76 	bl	800c954 <RCCEx_PLL2_Config>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b26e:	e003      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b276:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10d      	bne.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b280:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b284:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b28c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b28e:	4a02      	ldr	r2, [pc, #8]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b290:	430b      	orrs	r3, r1
 800b292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b294:	e006      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b296:	bf00      	nop
 800b298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b29c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b2b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	d00c      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2c4:	3328      	adds	r3, #40	@ 0x28
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f001 fbf5 	bl	800cab8 <RCCEx_PLL3_Config>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b2e6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	d038      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b302:	d018      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b308:	d811      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b30a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b30e:	d014      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b314:	d80b      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d011      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b31a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b31e:	d106      	bne.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b320:	4bc3      	ldr	r3, [pc, #780]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b324:	4ac2      	ldr	r2, [pc, #776]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b32a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b32c:	e008      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b334:	e004      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b336:	bf00      	nop
 800b338:	e002      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b33a:	bf00      	nop
 800b33c:	e000      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b33e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10b      	bne.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b348:	4bb9      	ldr	r3, [pc, #740]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b34c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b358:	4ab5      	ldr	r2, [pc, #724]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b35a:	430b      	orrs	r3, r1
 800b35c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b35e:	e003      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b374:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b376:	2300      	movs	r3, #0
 800b378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b37a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b37e:	460b      	mov	r3, r1
 800b380:	4313      	orrs	r3, r2
 800b382:	d009      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b384:	4baa      	ldr	r3, [pc, #680]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b388:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b392:	4aa7      	ldr	r2, [pc, #668]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b394:	430b      	orrs	r3, r1
 800b396:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b3a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	d00a      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b3b4:	4b9e      	ldr	r3, [pc, #632]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b3c4:	4a9a      	ldr	r2, [pc, #616]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b3d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3d8:	2300      	movs	r3, #0
 800b3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	d009      	beq.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3e6:	4b92      	ldr	r3, [pc, #584]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f4:	4a8e      	ldr	r2, [pc, #568]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b3f6:	430b      	orrs	r3, r1
 800b3f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b406:	643b      	str	r3, [r7, #64]	@ 0x40
 800b408:	2300      	movs	r3, #0
 800b40a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b40c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b410:	460b      	mov	r3, r1
 800b412:	4313      	orrs	r3, r2
 800b414:	d00e      	beq.n	800b434 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b416:	4b86      	ldr	r3, [pc, #536]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	4a85      	ldr	r2, [pc, #532]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b41c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b420:	6113      	str	r3, [r2, #16]
 800b422:	4b83      	ldr	r3, [pc, #524]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b424:	6919      	ldr	r1, [r3, #16]
 800b426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b42a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b42e:	4a80      	ldr	r2, [pc, #512]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b430:	430b      	orrs	r3, r1
 800b432:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b440:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b442:	2300      	movs	r3, #0
 800b444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b446:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b44a:	460b      	mov	r3, r1
 800b44c:	4313      	orrs	r3, r2
 800b44e:	d009      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b450:	4b77      	ldr	r3, [pc, #476]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b454:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b45e:	4a74      	ldr	r2, [pc, #464]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b460:	430b      	orrs	r3, r1
 800b462:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b470:	633b      	str	r3, [r7, #48]	@ 0x30
 800b472:	2300      	movs	r3, #0
 800b474:	637b      	str	r3, [r7, #52]	@ 0x34
 800b476:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b47a:	460b      	mov	r3, r1
 800b47c:	4313      	orrs	r3, r2
 800b47e:	d00a      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b480:	4b6b      	ldr	r3, [pc, #428]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b484:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b490:	4a67      	ldr	r2, [pc, #412]	@ (800b630 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b492:	430b      	orrs	r3, r1
 800b494:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	2100      	movs	r1, #0
 800b4a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b4a2:	f003 0301 	and.w	r3, r3, #1
 800b4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	d011      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 fa4a 	bl	800c954 <RCCEx_PLL2_Config>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	2100      	movs	r1, #0
 800b4e0:	6239      	str	r1, [r7, #32]
 800b4e2:	f003 0302 	and.w	r3, r3, #2
 800b4e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	d011      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f001 fa2a 	bl	800c954 <RCCEx_PLL2_Config>
 800b500:	4603      	mov	r3, r0
 800b502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	2100      	movs	r1, #0
 800b520:	61b9      	str	r1, [r7, #24]
 800b522:	f003 0304 	and.w	r3, r3, #4
 800b526:	61fb      	str	r3, [r7, #28]
 800b528:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b52c:	460b      	mov	r3, r1
 800b52e:	4313      	orrs	r3, r2
 800b530:	d011      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b536:	3308      	adds	r3, #8
 800b538:	2102      	movs	r1, #2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f001 fa0a 	bl	800c954 <RCCEx_PLL2_Config>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	2100      	movs	r1, #0
 800b560:	6139      	str	r1, [r7, #16]
 800b562:	f003 0308 	and.w	r3, r3, #8
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b56c:	460b      	mov	r3, r1
 800b56e:	4313      	orrs	r3, r2
 800b570:	d011      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b576:	3328      	adds	r3, #40	@ 0x28
 800b578:	2100      	movs	r1, #0
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 fa9c 	bl	800cab8 <RCCEx_PLL3_Config>
 800b580:	4603      	mov	r3, r0
 800b582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b58e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59e:	2100      	movs	r1, #0
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	f003 0310 	and.w	r3, r3, #16
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	d011      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5b6:	3328      	adds	r3, #40	@ 0x28
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f001 fa7c 	bl	800cab8 <RCCEx_PLL3_Config>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	2100      	movs	r1, #0
 800b5e0:	6039      	str	r1, [r7, #0]
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	607b      	str	r3, [r7, #4]
 800b5e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	d011      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5f6:	3328      	adds	r3, #40	@ 0x28
 800b5f8:	2102      	movs	r1, #2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 fa5c 	bl	800cab8 <RCCEx_PLL3_Config>
 800b600:	4603      	mov	r3, r0
 800b602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b60e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b616:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	e000      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
}
 800b624:	4618      	mov	r0, r3
 800b626:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b62a:	46bd      	mov	sp, r7
 800b62c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b630:	58024400 	.word	0x58024400

0800b634 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b090      	sub	sp, #64	@ 0x40
 800b638:	af00      	add	r7, sp, #0
 800b63a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b642:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b646:	430b      	orrs	r3, r1
 800b648:	f040 8094 	bne.w	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b64c:	4b9e      	ldr	r3, [pc, #632]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b64e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b650:	f003 0307 	and.w	r3, r3, #7
 800b654:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	2b04      	cmp	r3, #4
 800b65a:	f200 8087 	bhi.w	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b65e:	a201      	add	r2, pc, #4	@ (adr r2, 800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b664:	0800b679 	.word	0x0800b679
 800b668:	0800b6a1 	.word	0x0800b6a1
 800b66c:	0800b6c9 	.word	0x0800b6c9
 800b670:	0800b765 	.word	0x0800b765
 800b674:	0800b6f1 	.word	0x0800b6f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b678:	4b93      	ldr	r3, [pc, #588]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b684:	d108      	bne.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f001 f810 	bl	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b694:	f000 bd45 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b69c:	f000 bd41 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6a0:	4b89      	ldr	r3, [pc, #548]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6ac:	d108      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6ae:	f107 0318 	add.w	r3, r7, #24
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 fd54 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6bc:	f000 bd31 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c4:	f000 bd2d 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6c8:	4b7f      	ldr	r3, [pc, #508]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6d4:	d108      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6d6:	f107 030c 	add.w	r3, r7, #12
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 fe94 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e4:	f000 bd1d 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ec:	f000 bd19 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6f0:	4b75      	ldr	r3, [pc, #468]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b6f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6fa:	4b73      	ldr	r3, [pc, #460]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0304 	and.w	r3, r3, #4
 800b702:	2b04      	cmp	r3, #4
 800b704:	d10c      	bne.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d109      	bne.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b70c:	4b6e      	ldr	r3, [pc, #440]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	08db      	lsrs	r3, r3, #3
 800b712:	f003 0303 	and.w	r3, r3, #3
 800b716:	4a6d      	ldr	r2, [pc, #436]	@ (800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b718:	fa22 f303 	lsr.w	r3, r2, r3
 800b71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b71e:	e01f      	b.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b720:	4b69      	ldr	r3, [pc, #420]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b72c:	d106      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b734:	d102      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b736:	4b66      	ldr	r3, [pc, #408]	@ (800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b73a:	e011      	b.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b73c:	4b62      	ldr	r3, [pc, #392]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b748:	d106      	bne.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b74a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b750:	d102      	bne.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b752:	4b60      	ldr	r3, [pc, #384]	@ (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b756:	e003      	b.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b75c:	f000 bce1 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b760:	f000 bcdf 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b764:	4b5c      	ldr	r3, [pc, #368]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b768:	f000 bcdb 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b770:	f000 bcd7 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b774:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b778:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b77c:	430b      	orrs	r3, r1
 800b77e:	f040 80ad 	bne.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b782:	4b51      	ldr	r3, [pc, #324]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b786:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b78a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b792:	d056      	beq.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b79a:	f200 8090 	bhi.w	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a0:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7a2:	f000 8088 	beq.w	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a8:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7aa:	f200 8088 	bhi.w	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b0:	2b80      	cmp	r3, #128	@ 0x80
 800b7b2:	d032      	beq.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b6:	2b80      	cmp	r3, #128	@ 0x80
 800b7b8:	f200 8081 	bhi.w	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c4:	2b40      	cmp	r3, #64	@ 0x40
 800b7c6:	d014      	beq.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b7c8:	e079      	b.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7d6:	d108      	bne.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 ff67 	bl	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e6:	f000 bc9c 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ee:	f000 bc98 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7f2:	4b35      	ldr	r3, [pc, #212]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7fe:	d108      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b800:	f107 0318 	add.w	r3, r7, #24
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fcab 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b80e:	f000 bc88 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b816:	f000 bc84 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b81a:	4b2b      	ldr	r3, [pc, #172]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b826:	d108      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b828:	f107 030c 	add.w	r3, r7, #12
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fdeb 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b836:	f000 bc74 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b83e:	f000 bc70 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b842:	4b21      	ldr	r3, [pc, #132]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b846:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b84a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b84c:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b04      	cmp	r3, #4
 800b856:	d10c      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d109      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b85e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	08db      	lsrs	r3, r3, #3
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	4a18      	ldr	r2, [pc, #96]	@ (800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b86a:	fa22 f303 	lsr.w	r3, r2, r3
 800b86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b870:	e01f      	b.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b872:	4b15      	ldr	r3, [pc, #84]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b87a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b87e:	d106      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b882:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b886:	d102      	bne.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b888:	4b11      	ldr	r3, [pc, #68]	@ (800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b88c:	e011      	b.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b88e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b89a:	d106      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b89e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a2:	d102      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8a8:	e003      	b.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b8ae:	f000 bc38 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8b2:	f000 bc36 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8b6:	4b08      	ldr	r3, [pc, #32]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ba:	f000 bc32 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8c2:	f000 bc2e 	b.w	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8c6:	bf00      	nop
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	03d09000 	.word	0x03d09000
 800b8d0:	003d0900 	.word	0x003d0900
 800b8d4:	017d7840 	.word	0x017d7840
 800b8d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8e0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	f040 809c 	bne.w	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b8ea:	4b9e      	ldr	r3, [pc, #632]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b8f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b8fa:	d054      	beq.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b902:	f200 808b 	bhi.w	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b908:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b90c:	f000 8083 	beq.w	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b912:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b916:	f200 8081 	bhi.w	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b920:	d02f      	beq.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b928:	d878      	bhi.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d004      	beq.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b936:	d012      	beq.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b938:	e070      	b.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b93a:	4b8a      	ldr	r3, [pc, #552]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b942:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b946:	d107      	bne.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 feaf 	bl	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b956:	e3e4      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b95c:	e3e1      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b95e:	4b81      	ldr	r3, [pc, #516]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b96a:	d107      	bne.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b96c:	f107 0318 	add.w	r3, r7, #24
 800b970:	4618      	mov	r0, r3
 800b972:	f000 fbf5 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b97a:	e3d2      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b980:	e3cf      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b982:	4b78      	ldr	r3, [pc, #480]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b98a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b98e:	d107      	bne.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b990:	f107 030c 	add.w	r3, r7, #12
 800b994:	4618      	mov	r0, r3
 800b996:	f000 fd37 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b99e:	e3c0      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a4:	e3bd      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9a6:	4b6f      	ldr	r3, [pc, #444]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9b0:	4b6c      	ldr	r3, [pc, #432]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 0304 	and.w	r3, r3, #4
 800b9b8:	2b04      	cmp	r3, #4
 800b9ba:	d10c      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d109      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9c2:	4b68      	ldr	r3, [pc, #416]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	08db      	lsrs	r3, r3, #3
 800b9c8:	f003 0303 	and.w	r3, r3, #3
 800b9cc:	4a66      	ldr	r2, [pc, #408]	@ (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9d4:	e01e      	b.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9d6:	4b63      	ldr	r3, [pc, #396]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9e2:	d106      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9ea:	d102      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b9ec:	4b5f      	ldr	r3, [pc, #380]	@ (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9f0:	e010      	b.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9f2:	4b5c      	ldr	r3, [pc, #368]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9fe:	d106      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ba00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba06:	d102      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba08:	4b59      	ldr	r3, [pc, #356]	@ (800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba0c:	e002      	b.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba12:	e386      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba14:	e385      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba16:	4b57      	ldr	r3, [pc, #348]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ba18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba1a:	e382      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba20:	e37f      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ba22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba26:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	f040 80a7 	bne.w	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ba30:	4b4c      	ldr	r3, [pc, #304]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba34:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ba38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba40:	d055      	beq.n	800baee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ba42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba48:	f200 8096 	bhi.w	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba52:	f000 8084 	beq.w	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba5c:	f200 808c 	bhi.w	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ba60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba66:	d030      	beq.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ba68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba6e:	f200 8083 	bhi.w	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ba72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d004      	beq.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ba78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba7e:	d012      	beq.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ba80:	e07a      	b.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba82:	4b38      	ldr	r3, [pc, #224]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba8e:	d107      	bne.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fe0b 	bl	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba9e:	e340      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa4:	e33d      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baa6:	4b2f      	ldr	r3, [pc, #188]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800baae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bab2:	d107      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bab4:	f107 0318 	add.w	r3, r7, #24
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fb51 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac2:	e32e      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bac8:	e32b      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800baca:	4b26      	ldr	r3, [pc, #152]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bad6:	d107      	bne.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bad8:	f107 030c 	add.w	r3, r7, #12
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fc93 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bae6:	e31c      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baec:	e319      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baee:	4b1d      	ldr	r3, [pc, #116]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800baf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baf2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800baf6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baf8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d10c      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d109      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb0a:	4b16      	ldr	r3, [pc, #88]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	08db      	lsrs	r3, r3, #3
 800bb10:	f003 0303 	and.w	r3, r3, #3
 800bb14:	4a14      	ldr	r2, [pc, #80]	@ (800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bb16:	fa22 f303 	lsr.w	r3, r2, r3
 800bb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb1c:	e01e      	b.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb1e:	4b11      	ldr	r3, [pc, #68]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb2a:	d106      	bne.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb32:	d102      	bne.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb34:	4b0d      	ldr	r3, [pc, #52]	@ (800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb38:	e010      	b.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb3a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb46:	d106      	bne.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800bb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb4e:	d102      	bne.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb50:	4b07      	ldr	r3, [pc, #28]	@ (800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb54:	e002      	b.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb5a:	e2e2      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb5c:	e2e1      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb5e:	4b05      	ldr	r3, [pc, #20]	@ (800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb62:	e2de      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb64:	58024400 	.word	0x58024400
 800bb68:	03d09000 	.word	0x03d09000
 800bb6c:	003d0900 	.word	0x003d0900
 800bb70:	017d7840 	.word	0x017d7840
 800bb74:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb7c:	e2d1      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bb7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb82:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800bb86:	430b      	orrs	r3, r1
 800bb88:	f040 809c 	bne.w	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bb8c:	4b93      	ldr	r3, [pc, #588]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bb8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb90:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bb94:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb9c:	d054      	beq.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bba4:	f200 808b 	bhi.w	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbae:	f000 8083 	beq.w	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbb8:	f200 8081 	bhi.w	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbc2:	d02f      	beq.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbca:	d878      	bhi.n	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d004      	beq.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbd8:	d012      	beq.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800bbda:	e070      	b.n	800bcbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbdc:	4b7f      	ldr	r3, [pc, #508]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bbe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbe8:	d107      	bne.n	800bbfa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 fd5e 	bl	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf8:	e293      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbfe:	e290      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc00:	4b76      	ldr	r3, [pc, #472]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc0c:	d107      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc0e:	f107 0318 	add.w	r3, r7, #24
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 faa4 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc1c:	e281      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc22:	e27e      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc24:	4b6d      	ldr	r3, [pc, #436]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc30:	d107      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc32:	f107 030c 	add.w	r3, r7, #12
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fbe6 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc40:	e26f      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc46:	e26c      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc48:	4b64      	ldr	r3, [pc, #400]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc50:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc52:	4b62      	ldr	r3, [pc, #392]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b04      	cmp	r3, #4
 800bc5c:	d10c      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800bc5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc64:	4b5d      	ldr	r3, [pc, #372]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	08db      	lsrs	r3, r3, #3
 800bc6a:	f003 0303 	and.w	r3, r3, #3
 800bc6e:	4a5c      	ldr	r2, [pc, #368]	@ (800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bc70:	fa22 f303 	lsr.w	r3, r2, r3
 800bc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc76:	e01e      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc78:	4b58      	ldr	r3, [pc, #352]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc84:	d106      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800bc86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc8c:	d102      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc8e:	4b55      	ldr	r3, [pc, #340]	@ (800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc92:	e010      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc94:	4b51      	ldr	r3, [pc, #324]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bca0:	d106      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800bca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bca8:	d102      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcaa:	4b4f      	ldr	r3, [pc, #316]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bcac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcae:	e002      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bcb4:	e235      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bcb6:	e234      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcb8:	4b4c      	ldr	r3, [pc, #304]	@ (800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800bcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcbc:	e231      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc2:	e22e      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bcc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800bccc:	430b      	orrs	r3, r1
 800bcce:	f040 808f 	bne.w	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bcd2:	4b42      	ldr	r3, [pc, #264]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bcd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcd6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800bcda:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bce2:	d06b      	beq.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800bce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bcea:	d874      	bhi.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bcf2:	d056      	beq.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bcfa:	d86c      	bhi.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd02:	d03b      	beq.n	800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800bd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd0a:	d864      	bhi.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd12:	d021      	beq.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800bd14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd1a:	d85c      	bhi.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d004      	beq.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800bd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd28:	d004      	beq.n	800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800bd2a:	e054      	b.n	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bd2c:	f7fe fa4c 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800bd30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd32:	e1f6      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd34:	4b29      	ldr	r3, [pc, #164]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd40:	d107      	bne.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd42:	f107 0318 	add.w	r3, r7, #24
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 fa0a 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd50:	e1e7      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd56:	e1e4      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd58:	4b20      	ldr	r3, [pc, #128]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd64:	d107      	bne.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fb4c 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd74:	e1d5      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd7a:	e1d2      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd7c:	4b17      	ldr	r3, [pc, #92]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d109      	bne.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd88:	4b14      	ldr	r3, [pc, #80]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	08db      	lsrs	r3, r3, #3
 800bd8e:	f003 0303 	and.w	r3, r3, #3
 800bd92:	4a13      	ldr	r2, [pc, #76]	@ (800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800bd94:	fa22 f303 	lsr.w	r3, r2, r3
 800bd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd9a:	e1c2      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bda0:	e1bf      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bda2:	4b0e      	ldr	r3, [pc, #56]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdae:	d102      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdb4:	e1b5      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdba:	e1b2      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bdbc:	4b07      	ldr	r3, [pc, #28]	@ (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdc8:	d102      	bne.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800bdca:	4b07      	ldr	r3, [pc, #28]	@ (800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800bdcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdce:	e1a8      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdd4:	e1a5      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdda:	e1a2      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bddc:	58024400 	.word	0x58024400
 800bde0:	03d09000 	.word	0x03d09000
 800bde4:	003d0900 	.word	0x003d0900
 800bde8:	017d7840 	.word	0x017d7840
 800bdec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800bdf8:	430b      	orrs	r3, r1
 800bdfa:	d173      	bne.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bdfc:	4b9c      	ldr	r3, [pc, #624]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bdfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800be04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800be06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be0c:	d02f      	beq.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800be0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be14:	d863      	bhi.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800be16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d004      	beq.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800be1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be22:	d012      	beq.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800be24:	e05b      	b.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be26:	4b92      	ldr	r3, [pc, #584]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be32:	d107      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be34:	f107 0318 	add.w	r3, r7, #24
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 f991 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be42:	e16e      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be48:	e16b      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be4a:	4b89      	ldr	r3, [pc, #548]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be56:	d107      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be58:	f107 030c 	add.w	r3, r7, #12
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 fad3 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be66:	e15c      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be6c:	e159      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be6e:	4b80      	ldr	r3, [pc, #512]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800be76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be78:	4b7d      	ldr	r3, [pc, #500]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b04      	cmp	r3, #4
 800be82:	d10c      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800be84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be8a:	4b79      	ldr	r3, [pc, #484]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	08db      	lsrs	r3, r3, #3
 800be90:	f003 0303 	and.w	r3, r3, #3
 800be94:	4a77      	ldr	r2, [pc, #476]	@ (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800be96:	fa22 f303 	lsr.w	r3, r2, r3
 800be9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be9c:	e01e      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be9e:	4b74      	ldr	r3, [pc, #464]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800beaa:	d106      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800beac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800beb2:	d102      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beb4:	4b70      	ldr	r3, [pc, #448]	@ (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800beb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800beb8:	e010      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beba:	4b6d      	ldr	r3, [pc, #436]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bec6:	d106      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800bec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bece:	d102      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bed0:	4b6a      	ldr	r3, [pc, #424]	@ (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bed4:	e002      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800beda:	e122      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bedc:	e121      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bede:	2300      	movs	r3, #0
 800bee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bee2:	e11e      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bee8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800beec:	430b      	orrs	r3, r1
 800beee:	d133      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bef0:	4b5f      	ldr	r3, [pc, #380]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800befa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befc:	2b00      	cmp	r3, #0
 800befe:	d004      	beq.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800bf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf06:	d012      	beq.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bf08:	e023      	b.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf0a:	4b59      	ldr	r3, [pc, #356]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bf16:	d107      	bne.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 fbc7 	bl	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf26:	e0fc      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf2c:	e0f9      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf2e:	4b50      	ldr	r3, [pc, #320]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf3a:	d107      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3c:	f107 0318 	add.w	r3, r7, #24
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 f90d 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf4a:	e0ea      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf50:	e0e7      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf56:	e0e4      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bf58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf5c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bf60:	430b      	orrs	r3, r1
 800bf62:	f040 808d 	bne.w	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf66:	4b42      	ldr	r3, [pc, #264]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bf68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf6a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bf6e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bf70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf76:	d06b      	beq.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf7e:	d874      	bhi.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf86:	d056      	beq.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8e:	d86c      	bhi.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bf90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf96:	d03b      	beq.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf9e:	d864      	bhi.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfa6:	d021      	beq.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfae:	d85c      	bhi.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d004      	beq.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfbc:	d004      	beq.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bfbe:	e054      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bfc0:	f000 f8b8 	bl	800c134 <HAL_RCCEx_GetD3PCLK1Freq>
 800bfc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bfc6:	e0ac      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfc8:	4b29      	ldr	r3, [pc, #164]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfd4:	d107      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfd6:	f107 0318 	add.w	r3, r7, #24
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f8c0 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe4:	e09d      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfea:	e09a      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfec:	4b20      	ldr	r3, [pc, #128]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bff8:	d107      	bne.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bffa:	f107 030c 	add.w	r3, r7, #12
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fa02 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c008:	e08b      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c00e:	e088      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c010:	4b17      	ldr	r3, [pc, #92]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f003 0304 	and.w	r3, r3, #4
 800c018:	2b04      	cmp	r3, #4
 800c01a:	d109      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c01c:	4b14      	ldr	r3, [pc, #80]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	08db      	lsrs	r3, r3, #3
 800c022:	f003 0303 	and.w	r3, r3, #3
 800c026:	4a13      	ldr	r2, [pc, #76]	@ (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c028:	fa22 f303 	lsr.w	r3, r2, r3
 800c02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c02e:	e078      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c034:	e075      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c036:	4b0e      	ldr	r3, [pc, #56]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c03e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c042:	d102      	bne.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c044:	4b0c      	ldr	r3, [pc, #48]	@ (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c048:	e06b      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c04e:	e068      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c050:	4b07      	ldr	r3, [pc, #28]	@ (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c05c:	d102      	bne.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c05e:	4b07      	ldr	r3, [pc, #28]	@ (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c062:	e05e      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c068:	e05b      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c06e:	e058      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c070:	58024400 	.word	0x58024400
 800c074:	03d09000 	.word	0x03d09000
 800c078:	003d0900 	.word	0x003d0900
 800c07c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c080:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c084:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c088:	430b      	orrs	r3, r1
 800c08a:	d148      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c08c:	4b27      	ldr	r3, [pc, #156]	@ (800c12c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c08e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c090:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c094:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c09c:	d02a      	beq.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0a4:	d838      	bhi.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d004      	beq.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0b2:	d00d      	beq.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c0b4:	e030      	b.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c12c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0c2:	d102      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0c8:	e02b      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0ce:	e028      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0d0:	4b16      	ldr	r3, [pc, #88]	@ (800c12c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c0dc:	d107      	bne.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 fae4 	bl	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ec:	e019      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0f2:	e016      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	@ (800c12c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c100:	d107      	bne.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c102:	f107 0318 	add.w	r3, r7, #24
 800c106:	4618      	mov	r0, r3
 800c108:	f000 f82a 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c110:	e007      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c116:	e004      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c118:	2300      	movs	r3, #0
 800c11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c11c:	e001      	b.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c124:	4618      	mov	r0, r3
 800c126:	3740      	adds	r7, #64	@ 0x40
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	58024400 	.word	0x58024400
 800c130:	017d7840 	.word	0x017d7840

0800c134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c138:	f7fe f816 	bl	800a168 <HAL_RCC_GetHCLKFreq>
 800c13c:	4602      	mov	r2, r0
 800c13e:	4b06      	ldr	r3, [pc, #24]	@ (800c158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	091b      	lsrs	r3, r3, #4
 800c144:	f003 0307 	and.w	r3, r3, #7
 800c148:	4904      	ldr	r1, [pc, #16]	@ (800c15c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c14a:	5ccb      	ldrb	r3, [r1, r3]
 800c14c:	f003 031f 	and.w	r3, r3, #31
 800c150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c154:	4618      	mov	r0, r3
 800c156:	bd80      	pop	{r7, pc}
 800c158:	58024400 	.word	0x58024400
 800c15c:	08015608 	.word	0x08015608

0800c160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c160:	b480      	push	{r7}
 800c162:	b089      	sub	sp, #36	@ 0x24
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c168:	4ba1      	ldr	r3, [pc, #644]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16c:	f003 0303 	and.w	r3, r3, #3
 800c170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c172:	4b9f      	ldr	r3, [pc, #636]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c176:	0b1b      	lsrs	r3, r3, #12
 800c178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c17c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c17e:	4b9c      	ldr	r3, [pc, #624]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c182:	091b      	lsrs	r3, r3, #4
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c18a:	4b99      	ldr	r3, [pc, #612]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18e:	08db      	lsrs	r3, r3, #3
 800c190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	fb02 f303 	mul.w	r3, r2, r3
 800c19a:	ee07 3a90 	vmov	s15, r3
 800c19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 8111 	beq.w	800c3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	f000 8083 	beq.w	800c2bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	f200 80a1 	bhi.w	800c300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d003      	beq.n	800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d056      	beq.n	800c278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c1ca:	e099      	b.n	800c300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1cc:	4b88      	ldr	r3, [pc, #544]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0320 	and.w	r3, r3, #32
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d02d      	beq.n	800c234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1d8:	4b85      	ldr	r3, [pc, #532]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	08db      	lsrs	r3, r3, #3
 800c1de:	f003 0303 	and.w	r3, r3, #3
 800c1e2:	4a84      	ldr	r2, [pc, #528]	@ (800c3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	ee07 3a90 	vmov	s15, r3
 800c1f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	ee07 3a90 	vmov	s15, r3
 800c1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c202:	4b7b      	ldr	r3, [pc, #492]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c212:	ed97 6a03 	vldr	s12, [r7, #12]
 800c216:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c21a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c21e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c22a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c232:	e087      	b.n	800c344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	ee07 3a90 	vmov	s15, r3
 800c23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c246:	4b6a      	ldr	r3, [pc, #424]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c256:	ed97 6a03 	vldr	s12, [r7, #12]
 800c25a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c25e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c276:	e065      	b.n	800c344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	ee07 3a90 	vmov	s15, r3
 800c27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c282:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28a:	4b59      	ldr	r3, [pc, #356]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c29a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c29e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2ba:	e043      	b.n	800c344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	ee07 3a90 	vmov	s15, r3
 800c2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ce:	4b48      	ldr	r3, [pc, #288]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2fe:	e021      	b.n	800c344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	ee07 3a90 	vmov	s15, r3
 800c306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c312:	4b37      	ldr	r3, [pc, #220]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31a:	ee07 3a90 	vmov	s15, r3
 800c31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c322:	ed97 6a03 	vldr	s12, [r7, #12]
 800c326:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c344:	4b2a      	ldr	r3, [pc, #168]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c348:	0a5b      	lsrs	r3, r3, #9
 800c34a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c35a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c35e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c36a:	ee17 2a90 	vmov	r2, s15
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c372:	4b1f      	ldr	r3, [pc, #124]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c376:	0c1b      	lsrs	r3, r3, #16
 800c378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c37c:	ee07 3a90 	vmov	s15, r3
 800c380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c38c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c398:	ee17 2a90 	vmov	r2, s15
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c3a0:	4b13      	ldr	r3, [pc, #76]	@ (800c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a4:	0e1b      	lsrs	r3, r3, #24
 800c3a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3aa:	ee07 3a90 	vmov	s15, r3
 800c3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3c6:	ee17 2a90 	vmov	r2, s15
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c3ce:	e008      	b.n	800c3e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	609a      	str	r2, [r3, #8]
}
 800c3e2:	bf00      	nop
 800c3e4:	3724      	adds	r7, #36	@ 0x24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	58024400 	.word	0x58024400
 800c3f4:	03d09000 	.word	0x03d09000
 800c3f8:	46000000 	.word	0x46000000
 800c3fc:	4c742400 	.word	0x4c742400
 800c400:	4a742400 	.word	0x4a742400
 800c404:	4bbebc20 	.word	0x4bbebc20

0800c408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c408:	b480      	push	{r7}
 800c40a:	b089      	sub	sp, #36	@ 0x24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c410:	4ba1      	ldr	r3, [pc, #644]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c41a:	4b9f      	ldr	r3, [pc, #636]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c41e:	0d1b      	lsrs	r3, r3, #20
 800c420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c426:	4b9c      	ldr	r3, [pc, #624]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42a:	0a1b      	lsrs	r3, r3, #8
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c432:	4b99      	ldr	r3, [pc, #612]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c436:	08db      	lsrs	r3, r3, #3
 800c438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	fb02 f303 	mul.w	r3, r2, r3
 800c442:	ee07 3a90 	vmov	s15, r3
 800c446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 8111 	beq.w	800c678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	2b02      	cmp	r3, #2
 800c45a:	f000 8083 	beq.w	800c564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	2b02      	cmp	r3, #2
 800c462:	f200 80a1 	bhi.w	800c5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d056      	beq.n	800c520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c472:	e099      	b.n	800c5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c474:	4b88      	ldr	r3, [pc, #544]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0320 	and.w	r3, r3, #32
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d02d      	beq.n	800c4dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c480:	4b85      	ldr	r3, [pc, #532]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	08db      	lsrs	r3, r3, #3
 800c486:	f003 0303 	and.w	r3, r3, #3
 800c48a:	4a84      	ldr	r2, [pc, #528]	@ (800c69c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c48c:	fa22 f303 	lsr.w	r3, r2, r3
 800c490:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4aa:	4b7b      	ldr	r3, [pc, #492]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b2:	ee07 3a90 	vmov	s15, r3
 800c4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c4da:	e087      	b.n	800c5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4ee:	4b6a      	ldr	r3, [pc, #424]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c502:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c50e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c51a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c51e:	e065      	b.n	800c5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	ee07 3a90 	vmov	s15, r3
 800c526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c532:	4b59      	ldr	r3, [pc, #356]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c542:	ed97 6a03 	vldr	s12, [r7, #12]
 800c546:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c55e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c562:	e043      	b.n	800c5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	ee07 3a90 	vmov	s15, r3
 800c56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c56e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c576:	4b48      	ldr	r3, [pc, #288]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c586:	ed97 6a03 	vldr	s12, [r7, #12]
 800c58a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5a6:	e021      	b.n	800c5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	ee07 3a90 	vmov	s15, r3
 800c5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ba:	4b37      	ldr	r3, [pc, #220]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c5ec:	4b2a      	ldr	r3, [pc, #168]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f0:	0a5b      	lsrs	r3, r3, #9
 800c5f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c602:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c606:	edd7 6a07 	vldr	s13, [r7, #28]
 800c60a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c60e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c612:	ee17 2a90 	vmov	r2, s15
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c61a:	4b1f      	ldr	r3, [pc, #124]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c61e:	0c1b      	lsrs	r3, r3, #16
 800c620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c62c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c630:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c634:	edd7 6a07 	vldr	s13, [r7, #28]
 800c638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c63c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c640:	ee17 2a90 	vmov	r2, s15
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c648:	4b13      	ldr	r3, [pc, #76]	@ (800c698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c64c:	0e1b      	lsrs	r3, r3, #24
 800c64e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c652:	ee07 3a90 	vmov	s15, r3
 800c656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c65e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c662:	edd7 6a07 	vldr	s13, [r7, #28]
 800c666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c66e:	ee17 2a90 	vmov	r2, s15
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c676:	e008      	b.n	800c68a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	609a      	str	r2, [r3, #8]
}
 800c68a:	bf00      	nop
 800c68c:	3724      	adds	r7, #36	@ 0x24
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	58024400 	.word	0x58024400
 800c69c:	03d09000 	.word	0x03d09000
 800c6a0:	46000000 	.word	0x46000000
 800c6a4:	4c742400 	.word	0x4c742400
 800c6a8:	4a742400 	.word	0x4a742400
 800c6ac:	4bbebc20 	.word	0x4bbebc20

0800c6b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b089      	sub	sp, #36	@ 0x24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6b8:	4ba0      	ldr	r3, [pc, #640]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6bc:	f003 0303 	and.w	r3, r3, #3
 800c6c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c6c2:	4b9e      	ldr	r3, [pc, #632]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6c6:	091b      	lsrs	r3, r3, #4
 800c6c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c6ce:	4b9b      	ldr	r3, [pc, #620]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d2:	f003 0301 	and.w	r3, r3, #1
 800c6d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c6d8:	4b98      	ldr	r3, [pc, #608]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6dc:	08db      	lsrs	r3, r3, #3
 800c6de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	fb02 f303 	mul.w	r3, r2, r3
 800c6e8:	ee07 3a90 	vmov	s15, r3
 800c6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 8111 	beq.w	800c91e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	f000 8083 	beq.w	800c80a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c704:	69bb      	ldr	r3, [r7, #24]
 800c706:	2b02      	cmp	r3, #2
 800c708:	f200 80a1 	bhi.w	800c84e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d056      	beq.n	800c7c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c718:	e099      	b.n	800c84e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c71a:	4b88      	ldr	r3, [pc, #544]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 0320 	and.w	r3, r3, #32
 800c722:	2b00      	cmp	r3, #0
 800c724:	d02d      	beq.n	800c782 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c726:	4b85      	ldr	r3, [pc, #532]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	08db      	lsrs	r3, r3, #3
 800c72c:	f003 0303 	and.w	r3, r3, #3
 800c730:	4a83      	ldr	r2, [pc, #524]	@ (800c940 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c732:	fa22 f303 	lsr.w	r3, r2, r3
 800c736:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	ee07 3a90 	vmov	s15, r3
 800c73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	ee07 3a90 	vmov	s15, r3
 800c748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c750:	4b7a      	ldr	r3, [pc, #488]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c758:	ee07 3a90 	vmov	s15, r3
 800c75c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c760:	ed97 6a03 	vldr	s12, [r7, #12]
 800c764:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c768:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c76c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c770:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c77c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c780:	e087      	b.n	800c892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	ee07 3a90 	vmov	s15, r3
 800c788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c794:	4b69      	ldr	r3, [pc, #420]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79c:	ee07 3a90 	vmov	s15, r3
 800c7a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7a8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7c4:	e065      	b.n	800c892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	ee07 3a90 	vmov	s15, r3
 800c7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c94c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c7d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7d8:	4b58      	ldr	r3, [pc, #352]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e0:	ee07 3a90 	vmov	s15, r3
 800c7e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c800:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c804:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c808:	e043      	b.n	800c892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	ee07 3a90 	vmov	s15, r3
 800c810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c814:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c81c:	4b47      	ldr	r3, [pc, #284]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c824:	ee07 3a90 	vmov	s15, r3
 800c828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c82c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c830:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c83c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c844:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c848:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c84c:	e021      	b.n	800c892 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	ee07 3a90 	vmov	s15, r3
 800c854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c858:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c85c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c860:	4b36      	ldr	r3, [pc, #216]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c868:	ee07 3a90 	vmov	s15, r3
 800c86c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c870:	ed97 6a03 	vldr	s12, [r7, #12]
 800c874:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c944 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c87c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c890:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c892:	4b2a      	ldr	r3, [pc, #168]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c896:	0a5b      	lsrs	r3, r3, #9
 800c898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c89c:	ee07 3a90 	vmov	s15, r3
 800c8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8b8:	ee17 2a90 	vmov	r2, s15
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8c4:	0c1b      	lsrs	r3, r3, #16
 800c8c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8e6:	ee17 2a90 	vmov	r2, s15
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c8ee:	4b13      	ldr	r3, [pc, #76]	@ (800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8f2:	0e1b      	lsrs	r3, r3, #24
 800c8f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8f8:	ee07 3a90 	vmov	s15, r3
 800c8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c904:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c908:	edd7 6a07 	vldr	s13, [r7, #28]
 800c90c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c914:	ee17 2a90 	vmov	r2, s15
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c91c:	e008      	b.n	800c930 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	609a      	str	r2, [r3, #8]
}
 800c930:	bf00      	nop
 800c932:	3724      	adds	r7, #36	@ 0x24
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	58024400 	.word	0x58024400
 800c940:	03d09000 	.word	0x03d09000
 800c944:	46000000 	.word	0x46000000
 800c948:	4c742400 	.word	0x4c742400
 800c94c:	4a742400 	.word	0x4a742400
 800c950:	4bbebc20 	.word	0x4bbebc20

0800c954 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c95e:	2300      	movs	r3, #0
 800c960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c962:	4b53      	ldr	r3, [pc, #332]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c966:	f003 0303 	and.w	r3, r3, #3
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	d101      	bne.n	800c972 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e099      	b.n	800caa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c972:	4b4f      	ldr	r3, [pc, #316]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a4e      	ldr	r2, [pc, #312]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c978:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c97c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c97e:	f7f6 ffc5 	bl	800390c <HAL_GetTick>
 800c982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c984:	e008      	b.n	800c998 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c986:	f7f6 ffc1 	bl	800390c <HAL_GetTick>
 800c98a:	4602      	mov	r2, r0
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	2b02      	cmp	r3, #2
 800c992:	d901      	bls.n	800c998 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c994:	2303      	movs	r3, #3
 800c996:	e086      	b.n	800caa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c998:	4b45      	ldr	r3, [pc, #276]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1f0      	bne.n	800c986 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c9a4:	4b42      	ldr	r3, [pc, #264]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	031b      	lsls	r3, r3, #12
 800c9b2:	493f      	ldr	r1, [pc, #252]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	025b      	lsls	r3, r3, #9
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	431a      	orrs	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	041b      	lsls	r3, r3, #16
 800c9d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	061b      	lsls	r3, r3, #24
 800c9e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c9e8:	4931      	ldr	r1, [pc, #196]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c9ee:	4b30      	ldr	r3, [pc, #192]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	492d      	ldr	r1, [pc, #180]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca00:	4b2b      	ldr	r3, [pc, #172]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca04:	f023 0220 	bic.w	r2, r3, #32
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	699b      	ldr	r3, [r3, #24]
 800ca0c:	4928      	ldr	r1, [pc, #160]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca12:	4b27      	ldr	r3, [pc, #156]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca16:	4a26      	ldr	r2, [pc, #152]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca18:	f023 0310 	bic.w	r3, r3, #16
 800ca1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca1e:	4b24      	ldr	r3, [pc, #144]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca22:	4b24      	ldr	r3, [pc, #144]	@ (800cab4 <RCCEx_PLL2_Config+0x160>)
 800ca24:	4013      	ands	r3, r2
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	69d2      	ldr	r2, [r2, #28]
 800ca2a:	00d2      	lsls	r2, r2, #3
 800ca2c:	4920      	ldr	r1, [pc, #128]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca32:	4b1f      	ldr	r3, [pc, #124]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca36:	4a1e      	ldr	r2, [pc, #120]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca38:	f043 0310 	orr.w	r3, r3, #16
 800ca3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d106      	bne.n	800ca52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ca44:	4b1a      	ldr	r3, [pc, #104]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca48:	4a19      	ldr	r2, [pc, #100]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ca4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ca50:	e00f      	b.n	800ca72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d106      	bne.n	800ca66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ca58:	4b15      	ldr	r3, [pc, #84]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5c:	4a14      	ldr	r2, [pc, #80]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ca64:	e005      	b.n	800ca72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ca66:	4b12      	ldr	r3, [pc, #72]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6a:	4a11      	ldr	r2, [pc, #68]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ca70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ca72:	4b0f      	ldr	r3, [pc, #60]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a0e      	ldr	r2, [pc, #56]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ca7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca7e:	f7f6 ff45 	bl	800390c <HAL_GetTick>
 800ca82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca84:	e008      	b.n	800ca98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca86:	f7f6 ff41 	bl	800390c <HAL_GetTick>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d901      	bls.n	800ca98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ca94:	2303      	movs	r3, #3
 800ca96:	e006      	b.n	800caa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca98:	4b05      	ldr	r3, [pc, #20]	@ (800cab0 <RCCEx_PLL2_Config+0x15c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d0f0      	beq.n	800ca86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	58024400 	.word	0x58024400
 800cab4:	ffff0007 	.word	0xffff0007

0800cab8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cac6:	4b53      	ldr	r3, [pc, #332]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caca:	f003 0303 	and.w	r3, r3, #3
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d101      	bne.n	800cad6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e099      	b.n	800cc0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cad6:	4b4f      	ldr	r3, [pc, #316]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a4e      	ldr	r2, [pc, #312]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cadc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cae2:	f7f6 ff13 	bl	800390c <HAL_GetTick>
 800cae6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cae8:	e008      	b.n	800cafc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800caea:	f7f6 ff0f 	bl	800390c <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	d901      	bls.n	800cafc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800caf8:	2303      	movs	r3, #3
 800cafa:	e086      	b.n	800cc0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cafc:	4b45      	ldr	r3, [pc, #276]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1f0      	bne.n	800caea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb08:	4b42      	ldr	r3, [pc, #264]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	051b      	lsls	r3, r3, #20
 800cb16:	493f      	ldr	r1, [pc, #252]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	628b      	str	r3, [r1, #40]	@ 0x28
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	3b01      	subs	r3, #1
 800cb22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	025b      	lsls	r3, r3, #9
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	431a      	orrs	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cb3e:	431a      	orrs	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	061b      	lsls	r3, r3, #24
 800cb48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cb4c:	4931      	ldr	r1, [pc, #196]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cb52:	4b30      	ldr	r3, [pc, #192]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	695b      	ldr	r3, [r3, #20]
 800cb5e:	492d      	ldr	r1, [pc, #180]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb60:	4313      	orrs	r3, r2
 800cb62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb64:	4b2b      	ldr	r3, [pc, #172]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	4928      	ldr	r1, [pc, #160]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb72:	4313      	orrs	r3, r2
 800cb74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb76:	4b27      	ldr	r3, [pc, #156]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb7a:	4a26      	ldr	r2, [pc, #152]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb82:	4b24      	ldr	r3, [pc, #144]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb86:	4b24      	ldr	r3, [pc, #144]	@ (800cc18 <RCCEx_PLL3_Config+0x160>)
 800cb88:	4013      	ands	r3, r2
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	69d2      	ldr	r2, [r2, #28]
 800cb8e:	00d2      	lsls	r2, r2, #3
 800cb90:	4920      	ldr	r1, [pc, #128]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb92:	4313      	orrs	r3, r2
 800cb94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cb96:	4b1f      	ldr	r3, [pc, #124]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9a:	4a1e      	ldr	r2, [pc, #120]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cb9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cba8:	4b1a      	ldr	r3, [pc, #104]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbac:	4a19      	ldr	r2, [pc, #100]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cbb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cbb4:	e00f      	b.n	800cbd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d106      	bne.n	800cbca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cbbc:	4b15      	ldr	r3, [pc, #84]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc0:	4a14      	ldr	r2, [pc, #80]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cbc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cbc8:	e005      	b.n	800cbd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cbca:	4b12      	ldr	r3, [pc, #72]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbce:	4a11      	ldr	r2, [pc, #68]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cbd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a0e      	ldr	r2, [pc, #56]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cbe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbe2:	f7f6 fe93 	bl	800390c <HAL_GetTick>
 800cbe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbe8:	e008      	b.n	800cbfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbea:	f7f6 fe8f 	bl	800390c <HAL_GetTick>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d901      	bls.n	800cbfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e006      	b.n	800cc0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbfc:	4b05      	ldr	r3, [pc, #20]	@ (800cc14 <RCCEx_PLL3_Config+0x15c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0f0      	beq.n	800cbea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	58024400 	.word	0x58024400
 800cc18:	ffff0007 	.word	0xffff0007

0800cc1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e049      	b.n	800ccc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d106      	bne.n	800cc48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7f6 fb5a 	bl	80032fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	3304      	adds	r3, #4
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	f000 fef8 	bl	800da50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2201      	movs	r2, #1
 800cc74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
	...

0800cccc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d001      	beq.n	800cce4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	e04c      	b.n	800cd7e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2202      	movs	r2, #2
 800cce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a26      	ldr	r2, [pc, #152]	@ (800cd8c <HAL_TIM_Base_Start+0xc0>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d022      	beq.n	800cd3c <HAL_TIM_Base_Start+0x70>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccfe:	d01d      	beq.n	800cd3c <HAL_TIM_Base_Start+0x70>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a22      	ldr	r2, [pc, #136]	@ (800cd90 <HAL_TIM_Base_Start+0xc4>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d018      	beq.n	800cd3c <HAL_TIM_Base_Start+0x70>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a21      	ldr	r2, [pc, #132]	@ (800cd94 <HAL_TIM_Base_Start+0xc8>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d013      	beq.n	800cd3c <HAL_TIM_Base_Start+0x70>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a1f      	ldr	r2, [pc, #124]	@ (800cd98 <HAL_TIM_Base_Start+0xcc>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d00e      	beq.n	800cd3c <HAL_TIM_Base_Start+0x70>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a1e      	ldr	r2, [pc, #120]	@ (800cd9c <HAL_TIM_Base_Start+0xd0>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d009      	beq.n	800cd3c <HAL_TIM_Base_Start+0x70>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a1c      	ldr	r2, [pc, #112]	@ (800cda0 <HAL_TIM_Base_Start+0xd4>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d004      	beq.n	800cd3c <HAL_TIM_Base_Start+0x70>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a1b      	ldr	r2, [pc, #108]	@ (800cda4 <HAL_TIM_Base_Start+0xd8>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d115      	bne.n	800cd68 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	689a      	ldr	r2, [r3, #8]
 800cd42:	4b19      	ldr	r3, [pc, #100]	@ (800cda8 <HAL_TIM_Base_Start+0xdc>)
 800cd44:	4013      	ands	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2b06      	cmp	r3, #6
 800cd4c:	d015      	beq.n	800cd7a <HAL_TIM_Base_Start+0xae>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd54:	d011      	beq.n	800cd7a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f042 0201 	orr.w	r2, r2, #1
 800cd64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd66:	e008      	b.n	800cd7a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f042 0201 	orr.w	r2, r2, #1
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	e000      	b.n	800cd7c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3714      	adds	r7, #20
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	40010000 	.word	0x40010000
 800cd90:	40000400 	.word	0x40000400
 800cd94:	40000800 	.word	0x40000800
 800cd98:	40000c00 	.word	0x40000c00
 800cd9c:	40010400 	.word	0x40010400
 800cda0:	40001800 	.word	0x40001800
 800cda4:	40014000 	.word	0x40014000
 800cda8:	00010007 	.word	0x00010007

0800cdac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6a1a      	ldr	r2, [r3, #32]
 800cdba:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10f      	bne.n	800cde4 <HAL_TIM_Base_Stop+0x38>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6a1a      	ldr	r2, [r3, #32]
 800cdca:	f240 4344 	movw	r3, #1092	@ 0x444
 800cdce:	4013      	ands	r3, r2
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d107      	bne.n	800cde4 <HAL_TIM_Base_Stop+0x38>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f022 0201 	bic.w	r2, r2, #1
 800cde2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d001      	beq.n	800ce14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	e054      	b.n	800cebe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2202      	movs	r2, #2
 800ce18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f042 0201 	orr.w	r2, r2, #1
 800ce2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a26      	ldr	r2, [pc, #152]	@ (800cecc <HAL_TIM_Base_Start_IT+0xd0>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d022      	beq.n	800ce7c <HAL_TIM_Base_Start_IT+0x80>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce3e:	d01d      	beq.n	800ce7c <HAL_TIM_Base_Start_IT+0x80>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a22      	ldr	r2, [pc, #136]	@ (800ced0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d018      	beq.n	800ce7c <HAL_TIM_Base_Start_IT+0x80>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a21      	ldr	r2, [pc, #132]	@ (800ced4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d013      	beq.n	800ce7c <HAL_TIM_Base_Start_IT+0x80>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a1f      	ldr	r2, [pc, #124]	@ (800ced8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d00e      	beq.n	800ce7c <HAL_TIM_Base_Start_IT+0x80>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a1e      	ldr	r2, [pc, #120]	@ (800cedc <HAL_TIM_Base_Start_IT+0xe0>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d009      	beq.n	800ce7c <HAL_TIM_Base_Start_IT+0x80>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a1c      	ldr	r2, [pc, #112]	@ (800cee0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d004      	beq.n	800ce7c <HAL_TIM_Base_Start_IT+0x80>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a1b      	ldr	r2, [pc, #108]	@ (800cee4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d115      	bne.n	800cea8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	689a      	ldr	r2, [r3, #8]
 800ce82:	4b19      	ldr	r3, [pc, #100]	@ (800cee8 <HAL_TIM_Base_Start_IT+0xec>)
 800ce84:	4013      	ands	r3, r2
 800ce86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2b06      	cmp	r3, #6
 800ce8c:	d015      	beq.n	800ceba <HAL_TIM_Base_Start_IT+0xbe>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce94:	d011      	beq.n	800ceba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f042 0201 	orr.w	r2, r2, #1
 800cea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cea6:	e008      	b.n	800ceba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f042 0201 	orr.w	r2, r2, #1
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	e000      	b.n	800cebc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	40010000 	.word	0x40010000
 800ced0:	40000400 	.word	0x40000400
 800ced4:	40000800 	.word	0x40000800
 800ced8:	40000c00 	.word	0x40000c00
 800cedc:	40010400 	.word	0x40010400
 800cee0:	40001800 	.word	0x40001800
 800cee4:	40014000 	.word	0x40014000
 800cee8:	00010007 	.word	0x00010007

0800ceec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	68da      	ldr	r2, [r3, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0201 	bic.w	r2, r2, #1
 800cf02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6a1a      	ldr	r2, [r3, #32]
 800cf0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cf0e:	4013      	ands	r3, r2
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10f      	bne.n	800cf34 <HAL_TIM_Base_Stop_IT+0x48>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6a1a      	ldr	r2, [r3, #32]
 800cf1a:	f240 4344 	movw	r3, #1092	@ 0x444
 800cf1e:	4013      	ands	r3, r2
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d107      	bne.n	800cf34 <HAL_TIM_Base_Stop_IT+0x48>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f022 0201 	bic.w	r2, r2, #1
 800cf32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	370c      	adds	r7, #12
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b082      	sub	sp, #8
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e049      	b.n	800cff0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d106      	bne.n	800cf76 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 f841 	bl	800cff8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2202      	movs	r2, #2
 800cf7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3304      	adds	r3, #4
 800cf86:	4619      	mov	r1, r3
 800cf88:	4610      	mov	r0, r2
 800cf8a:	f000 fd61 	bl	800da50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d104      	bne.n	800d02a <HAL_TIM_IC_Start_IT+0x1e>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d026:	b2db      	uxtb	r3, r3
 800d028:	e023      	b.n	800d072 <HAL_TIM_IC_Start_IT+0x66>
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b04      	cmp	r3, #4
 800d02e:	d104      	bne.n	800d03a <HAL_TIM_IC_Start_IT+0x2e>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d036:	b2db      	uxtb	r3, r3
 800d038:	e01b      	b.n	800d072 <HAL_TIM_IC_Start_IT+0x66>
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2b08      	cmp	r3, #8
 800d03e:	d104      	bne.n	800d04a <HAL_TIM_IC_Start_IT+0x3e>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d046:	b2db      	uxtb	r3, r3
 800d048:	e013      	b.n	800d072 <HAL_TIM_IC_Start_IT+0x66>
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b0c      	cmp	r3, #12
 800d04e:	d104      	bne.n	800d05a <HAL_TIM_IC_Start_IT+0x4e>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d056:	b2db      	uxtb	r3, r3
 800d058:	e00b      	b.n	800d072 <HAL_TIM_IC_Start_IT+0x66>
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	2b10      	cmp	r3, #16
 800d05e:	d104      	bne.n	800d06a <HAL_TIM_IC_Start_IT+0x5e>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d066:	b2db      	uxtb	r3, r3
 800d068:	e003      	b.n	800d072 <HAL_TIM_IC_Start_IT+0x66>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d070:	b2db      	uxtb	r3, r3
 800d072:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d104      	bne.n	800d084 <HAL_TIM_IC_Start_IT+0x78>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d080:	b2db      	uxtb	r3, r3
 800d082:	e013      	b.n	800d0ac <HAL_TIM_IC_Start_IT+0xa0>
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	2b04      	cmp	r3, #4
 800d088:	d104      	bne.n	800d094 <HAL_TIM_IC_Start_IT+0x88>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d090:	b2db      	uxtb	r3, r3
 800d092:	e00b      	b.n	800d0ac <HAL_TIM_IC_Start_IT+0xa0>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	2b08      	cmp	r3, #8
 800d098:	d104      	bne.n	800d0a4 <HAL_TIM_IC_Start_IT+0x98>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	e003      	b.n	800d0ac <HAL_TIM_IC_Start_IT+0xa0>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800d0ae:	7bbb      	ldrb	r3, [r7, #14]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d102      	bne.n	800d0ba <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800d0b4:	7b7b      	ldrb	r3, [r7, #13]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d001      	beq.n	800d0be <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e0e2      	b.n	800d284 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <HAL_TIM_IC_Start_IT+0xc2>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d0cc:	e023      	b.n	800d116 <HAL_TIM_IC_Start_IT+0x10a>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d104      	bne.n	800d0de <HAL_TIM_IC_Start_IT+0xd2>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2202      	movs	r2, #2
 800d0d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0dc:	e01b      	b.n	800d116 <HAL_TIM_IC_Start_IT+0x10a>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d104      	bne.n	800d0ee <HAL_TIM_IC_Start_IT+0xe2>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0ec:	e013      	b.n	800d116 <HAL_TIM_IC_Start_IT+0x10a>
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2b0c      	cmp	r3, #12
 800d0f2:	d104      	bne.n	800d0fe <HAL_TIM_IC_Start_IT+0xf2>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d0fc:	e00b      	b.n	800d116 <HAL_TIM_IC_Start_IT+0x10a>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b10      	cmp	r3, #16
 800d102:	d104      	bne.n	800d10e <HAL_TIM_IC_Start_IT+0x102>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2202      	movs	r2, #2
 800d108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d10c:	e003      	b.n	800d116 <HAL_TIM_IC_Start_IT+0x10a>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2202      	movs	r2, #2
 800d112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d104      	bne.n	800d126 <HAL_TIM_IC_Start_IT+0x11a>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2202      	movs	r2, #2
 800d120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d124:	e013      	b.n	800d14e <HAL_TIM_IC_Start_IT+0x142>
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	2b04      	cmp	r3, #4
 800d12a:	d104      	bne.n	800d136 <HAL_TIM_IC_Start_IT+0x12a>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2202      	movs	r2, #2
 800d130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d134:	e00b      	b.n	800d14e <HAL_TIM_IC_Start_IT+0x142>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b08      	cmp	r3, #8
 800d13a:	d104      	bne.n	800d146 <HAL_TIM_IC_Start_IT+0x13a>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d144:	e003      	b.n	800d14e <HAL_TIM_IC_Start_IT+0x142>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2202      	movs	r2, #2
 800d14a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b0c      	cmp	r3, #12
 800d152:	d841      	bhi.n	800d1d8 <HAL_TIM_IC_Start_IT+0x1cc>
 800d154:	a201      	add	r2, pc, #4	@ (adr r2, 800d15c <HAL_TIM_IC_Start_IT+0x150>)
 800d156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15a:	bf00      	nop
 800d15c:	0800d191 	.word	0x0800d191
 800d160:	0800d1d9 	.word	0x0800d1d9
 800d164:	0800d1d9 	.word	0x0800d1d9
 800d168:	0800d1d9 	.word	0x0800d1d9
 800d16c:	0800d1a3 	.word	0x0800d1a3
 800d170:	0800d1d9 	.word	0x0800d1d9
 800d174:	0800d1d9 	.word	0x0800d1d9
 800d178:	0800d1d9 	.word	0x0800d1d9
 800d17c:	0800d1b5 	.word	0x0800d1b5
 800d180:	0800d1d9 	.word	0x0800d1d9
 800d184:	0800d1d9 	.word	0x0800d1d9
 800d188:	0800d1d9 	.word	0x0800d1d9
 800d18c:	0800d1c7 	.word	0x0800d1c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68da      	ldr	r2, [r3, #12]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f042 0202 	orr.w	r2, r2, #2
 800d19e:	60da      	str	r2, [r3, #12]
      break;
 800d1a0:	e01d      	b.n	800d1de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68da      	ldr	r2, [r3, #12]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0204 	orr.w	r2, r2, #4
 800d1b0:	60da      	str	r2, [r3, #12]
      break;
 800d1b2:	e014      	b.n	800d1de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68da      	ldr	r2, [r3, #12]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0208 	orr.w	r2, r2, #8
 800d1c2:	60da      	str	r2, [r3, #12]
      break;
 800d1c4:	e00b      	b.n	800d1de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	68da      	ldr	r2, [r3, #12]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f042 0210 	orr.w	r2, r2, #16
 800d1d4:	60da      	str	r2, [r3, #12]
      break;
 800d1d6:	e002      	b.n	800d1de <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	73fb      	strb	r3, [r7, #15]
      break;
 800d1dc:	bf00      	nop
  }

  if (status == HAL_OK)
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d14e      	bne.n	800d282 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 ff7b 	bl	800e0e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a25      	ldr	r2, [pc, #148]	@ (800d28c <HAL_TIM_IC_Start_IT+0x280>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d022      	beq.n	800d242 <HAL_TIM_IC_Start_IT+0x236>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d204:	d01d      	beq.n	800d242 <HAL_TIM_IC_Start_IT+0x236>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a21      	ldr	r2, [pc, #132]	@ (800d290 <HAL_TIM_IC_Start_IT+0x284>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d018      	beq.n	800d242 <HAL_TIM_IC_Start_IT+0x236>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a1f      	ldr	r2, [pc, #124]	@ (800d294 <HAL_TIM_IC_Start_IT+0x288>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d013      	beq.n	800d242 <HAL_TIM_IC_Start_IT+0x236>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a1e      	ldr	r2, [pc, #120]	@ (800d298 <HAL_TIM_IC_Start_IT+0x28c>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d00e      	beq.n	800d242 <HAL_TIM_IC_Start_IT+0x236>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a1c      	ldr	r2, [pc, #112]	@ (800d29c <HAL_TIM_IC_Start_IT+0x290>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d009      	beq.n	800d242 <HAL_TIM_IC_Start_IT+0x236>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a1b      	ldr	r2, [pc, #108]	@ (800d2a0 <HAL_TIM_IC_Start_IT+0x294>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d004      	beq.n	800d242 <HAL_TIM_IC_Start_IT+0x236>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a19      	ldr	r2, [pc, #100]	@ (800d2a4 <HAL_TIM_IC_Start_IT+0x298>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d115      	bne.n	800d26e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	689a      	ldr	r2, [r3, #8]
 800d248:	4b17      	ldr	r3, [pc, #92]	@ (800d2a8 <HAL_TIM_IC_Start_IT+0x29c>)
 800d24a:	4013      	ands	r3, r2
 800d24c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	2b06      	cmp	r3, #6
 800d252:	d015      	beq.n	800d280 <HAL_TIM_IC_Start_IT+0x274>
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d25a:	d011      	beq.n	800d280 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f042 0201 	orr.w	r2, r2, #1
 800d26a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d26c:	e008      	b.n	800d280 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f042 0201 	orr.w	r2, r2, #1
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	e000      	b.n	800d282 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d280:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d282:	7bfb      	ldrb	r3, [r7, #15]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	40010000 	.word	0x40010000
 800d290:	40000400 	.word	0x40000400
 800d294:	40000800 	.word	0x40000800
 800d298:	40000c00 	.word	0x40000c00
 800d29c:	40010400 	.word	0x40010400
 800d2a0:	40001800 	.word	0x40001800
 800d2a4:	40014000 	.word	0x40014000
 800d2a8:	00010007 	.word	0x00010007

0800d2ac <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b0c      	cmp	r3, #12
 800d2be:	d841      	bhi.n	800d344 <HAL_TIM_IC_Stop_IT+0x98>
 800d2c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c8 <HAL_TIM_IC_Stop_IT+0x1c>)
 800d2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c6:	bf00      	nop
 800d2c8:	0800d2fd 	.word	0x0800d2fd
 800d2cc:	0800d345 	.word	0x0800d345
 800d2d0:	0800d345 	.word	0x0800d345
 800d2d4:	0800d345 	.word	0x0800d345
 800d2d8:	0800d30f 	.word	0x0800d30f
 800d2dc:	0800d345 	.word	0x0800d345
 800d2e0:	0800d345 	.word	0x0800d345
 800d2e4:	0800d345 	.word	0x0800d345
 800d2e8:	0800d321 	.word	0x0800d321
 800d2ec:	0800d345 	.word	0x0800d345
 800d2f0:	0800d345 	.word	0x0800d345
 800d2f4:	0800d345 	.word	0x0800d345
 800d2f8:	0800d333 	.word	0x0800d333
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68da      	ldr	r2, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f022 0202 	bic.w	r2, r2, #2
 800d30a:	60da      	str	r2, [r3, #12]
      break;
 800d30c:	e01d      	b.n	800d34a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68da      	ldr	r2, [r3, #12]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f022 0204 	bic.w	r2, r2, #4
 800d31c:	60da      	str	r2, [r3, #12]
      break;
 800d31e:	e014      	b.n	800d34a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	68da      	ldr	r2, [r3, #12]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f022 0208 	bic.w	r2, r2, #8
 800d32e:	60da      	str	r2, [r3, #12]
      break;
 800d330:	e00b      	b.n	800d34a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f022 0210 	bic.w	r2, r2, #16
 800d340:	60da      	str	r2, [r3, #12]
      break;
 800d342:	e002      	b.n	800d34a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	73fb      	strb	r3, [r7, #15]
      break;
 800d348:	bf00      	nop
  }

  if (status == HAL_OK)
 800d34a:	7bfb      	ldrb	r3, [r7, #15]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d166      	bne.n	800d41e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2200      	movs	r2, #0
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 fec5 	bl	800e0e8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6a1a      	ldr	r2, [r3, #32]
 800d364:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d368:	4013      	ands	r3, r2
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10f      	bne.n	800d38e <HAL_TIM_IC_Stop_IT+0xe2>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6a1a      	ldr	r2, [r3, #32]
 800d374:	f240 4344 	movw	r3, #1092	@ 0x444
 800d378:	4013      	ands	r3, r2
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d107      	bne.n	800d38e <HAL_TIM_IC_Stop_IT+0xe2>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f022 0201 	bic.w	r2, r2, #1
 800d38c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d104      	bne.n	800d39e <HAL_TIM_IC_Stop_IT+0xf2>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d39c:	e023      	b.n	800d3e6 <HAL_TIM_IC_Stop_IT+0x13a>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2b04      	cmp	r3, #4
 800d3a2:	d104      	bne.n	800d3ae <HAL_TIM_IC_Stop_IT+0x102>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3ac:	e01b      	b.n	800d3e6 <HAL_TIM_IC_Stop_IT+0x13a>
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2b08      	cmp	r3, #8
 800d3b2:	d104      	bne.n	800d3be <HAL_TIM_IC_Stop_IT+0x112>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3bc:	e013      	b.n	800d3e6 <HAL_TIM_IC_Stop_IT+0x13a>
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b0c      	cmp	r3, #12
 800d3c2:	d104      	bne.n	800d3ce <HAL_TIM_IC_Stop_IT+0x122>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3cc:	e00b      	b.n	800d3e6 <HAL_TIM_IC_Stop_IT+0x13a>
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2b10      	cmp	r3, #16
 800d3d2:	d104      	bne.n	800d3de <HAL_TIM_IC_Stop_IT+0x132>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3dc:	e003      	b.n	800d3e6 <HAL_TIM_IC_Stop_IT+0x13a>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d104      	bne.n	800d3f6 <HAL_TIM_IC_Stop_IT+0x14a>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3f4:	e013      	b.n	800d41e <HAL_TIM_IC_Stop_IT+0x172>
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	2b04      	cmp	r3, #4
 800d3fa:	d104      	bne.n	800d406 <HAL_TIM_IC_Stop_IT+0x15a>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d404:	e00b      	b.n	800d41e <HAL_TIM_IC_Stop_IT+0x172>
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	2b08      	cmp	r3, #8
 800d40a:	d104      	bne.n	800d416 <HAL_TIM_IC_Stop_IT+0x16a>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d414:	e003      	b.n	800d41e <HAL_TIM_IC_Stop_IT+0x172>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	f003 0302 	and.w	r3, r3, #2
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d122      	bne.n	800d484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	f003 0302 	and.w	r3, r3, #2
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d11b      	bne.n	800d484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f06f 0202 	mvn.w	r2, #2
 800d454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	f003 0303 	and.w	r3, r3, #3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7f4 ff08 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 800d470:	e005      	b.n	800d47e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 face 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fad5 	bl	800da28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	f003 0304 	and.w	r3, r3, #4
 800d48e:	2b04      	cmp	r3, #4
 800d490:	d122      	bne.n	800d4d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	f003 0304 	and.w	r3, r3, #4
 800d49c:	2b04      	cmp	r3, #4
 800d49e:	d11b      	bne.n	800d4d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f06f 0204 	mvn.w	r2, #4
 800d4a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	699b      	ldr	r3, [r3, #24]
 800d4b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7f4 fede 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 800d4c4:	e005      	b.n	800d4d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 faa4 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 faab 	bl	800da28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	f003 0308 	and.w	r3, r3, #8
 800d4e2:	2b08      	cmp	r3, #8
 800d4e4:	d122      	bne.n	800d52c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	f003 0308 	and.w	r3, r3, #8
 800d4f0:	2b08      	cmp	r3, #8
 800d4f2:	d11b      	bne.n	800d52c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f06f 0208 	mvn.w	r2, #8
 800d4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2204      	movs	r2, #4
 800d502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	69db      	ldr	r3, [r3, #28]
 800d50a:	f003 0303 	and.w	r3, r3, #3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7f4 feb4 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 800d518:	e005      	b.n	800d526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 fa7a 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fa81 	bl	800da28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	f003 0310 	and.w	r3, r3, #16
 800d536:	2b10      	cmp	r3, #16
 800d538:	d122      	bne.n	800d580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	f003 0310 	and.w	r3, r3, #16
 800d544:	2b10      	cmp	r3, #16
 800d546:	d11b      	bne.n	800d580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f06f 0210 	mvn.w	r2, #16
 800d550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2208      	movs	r2, #8
 800d556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	69db      	ldr	r3, [r3, #28]
 800d55e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7f4 fe8a 	bl	8002280 <HAL_TIM_IC_CaptureCallback>
 800d56c:	e005      	b.n	800d57a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fa50 	bl	800da14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fa57 	bl	800da28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d10e      	bne.n	800d5ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d107      	bne.n	800d5ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f06f 0201 	mvn.w	r2, #1
 800d5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7f4 fefe 	bl	80023a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5b6:	2b80      	cmp	r3, #128	@ 0x80
 800d5b8:	d10e      	bne.n	800d5d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5c4:	2b80      	cmp	r3, #128	@ 0x80
 800d5c6:	d107      	bne.n	800d5d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 fe46 	bl	800e264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5e6:	d10e      	bne.n	800d606 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5f2:	2b80      	cmp	r3, #128	@ 0x80
 800d5f4:	d107      	bne.n	800d606 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d5fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fe39 	bl	800e278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d610:	2b40      	cmp	r3, #64	@ 0x40
 800d612:	d10e      	bne.n	800d632 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d61e:	2b40      	cmp	r3, #64	@ 0x40
 800d620:	d107      	bne.n	800d632 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 fa05 	bl	800da3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	f003 0320 	and.w	r3, r3, #32
 800d63c:	2b20      	cmp	r3, #32
 800d63e:	d10e      	bne.n	800d65e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	f003 0320 	and.w	r3, r3, #32
 800d64a:	2b20      	cmp	r3, #32
 800d64c:	d107      	bne.n	800d65e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f06f 0220 	mvn.w	r2, #32
 800d656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 fdf9 	bl	800e250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d65e:	bf00      	nop
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b086      	sub	sp, #24
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d101      	bne.n	800d684 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d680:	2302      	movs	r3, #2
 800d682:	e088      	b.n	800d796 <HAL_TIM_IC_ConfigChannel+0x130>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2201      	movs	r2, #1
 800d688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d11b      	bne.n	800d6ca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800d6a2:	f000 fb59 	bl	800dd58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	699a      	ldr	r2, [r3, #24]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f022 020c 	bic.w	r2, r2, #12
 800d6b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6999      	ldr	r1, [r3, #24]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	689a      	ldr	r2, [r3, #8]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	430a      	orrs	r2, r1
 800d6c6:	619a      	str	r2, [r3, #24]
 800d6c8:	e060      	b.n	800d78c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b04      	cmp	r3, #4
 800d6ce:	d11c      	bne.n	800d70a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800d6e0:	f000 fbdd 	bl	800de9e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	699a      	ldr	r2, [r3, #24]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d6f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6999      	ldr	r1, [r3, #24]
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	021a      	lsls	r2, r3, #8
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	430a      	orrs	r2, r1
 800d706:	619a      	str	r2, [r3, #24]
 800d708:	e040      	b.n	800d78c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b08      	cmp	r3, #8
 800d70e:	d11b      	bne.n	800d748 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800d720:	f000 fc2a 	bl	800df78 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	69da      	ldr	r2, [r3, #28]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f022 020c 	bic.w	r2, r2, #12
 800d732:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	69d9      	ldr	r1, [r3, #28]
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	689a      	ldr	r2, [r3, #8]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	430a      	orrs	r2, r1
 800d744:	61da      	str	r2, [r3, #28]
 800d746:	e021      	b.n	800d78c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b0c      	cmp	r3, #12
 800d74c:	d11c      	bne.n	800d788 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800d75e:	f000 fc47 	bl	800dff0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	69da      	ldr	r2, [r3, #28]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d770:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	69d9      	ldr	r1, [r3, #28]
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	021a      	lsls	r2, r3, #8
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	61da      	str	r2, [r3, #28]
 800d786:	e001      	b.n	800d78c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d794:	7dfb      	ldrb	r3, [r7, #23]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3718      	adds	r7, #24
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
	...

0800d7a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d101      	bne.n	800d7bc <HAL_TIM_ConfigClockSource+0x1c>
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	e0dc      	b.n	800d976 <HAL_TIM_ConfigClockSource+0x1d6>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	4b6a      	ldr	r3, [pc, #424]	@ (800d980 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d7e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a64      	ldr	r2, [pc, #400]	@ (800d984 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	f000 80a9 	beq.w	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d7f8:	4a62      	ldr	r2, [pc, #392]	@ (800d984 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	f200 80ae 	bhi.w	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d800:	4a61      	ldr	r2, [pc, #388]	@ (800d988 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d802:	4293      	cmp	r3, r2
 800d804:	f000 80a1 	beq.w	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d808:	4a5f      	ldr	r2, [pc, #380]	@ (800d988 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	f200 80a6 	bhi.w	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d810:	4a5e      	ldr	r2, [pc, #376]	@ (800d98c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d812:	4293      	cmp	r3, r2
 800d814:	f000 8099 	beq.w	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d818:	4a5c      	ldr	r2, [pc, #368]	@ (800d98c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	f200 809e 	bhi.w	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d820:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d824:	f000 8091 	beq.w	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d828:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d82c:	f200 8096 	bhi.w	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d830:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d834:	f000 8089 	beq.w	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d83c:	f200 808e 	bhi.w	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d844:	d03e      	beq.n	800d8c4 <HAL_TIM_ConfigClockSource+0x124>
 800d846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d84a:	f200 8087 	bhi.w	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d84e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d852:	f000 8086 	beq.w	800d962 <HAL_TIM_ConfigClockSource+0x1c2>
 800d856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d85a:	d87f      	bhi.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d85c:	2b70      	cmp	r3, #112	@ 0x70
 800d85e:	d01a      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0xf6>
 800d860:	2b70      	cmp	r3, #112	@ 0x70
 800d862:	d87b      	bhi.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d864:	2b60      	cmp	r3, #96	@ 0x60
 800d866:	d050      	beq.n	800d90a <HAL_TIM_ConfigClockSource+0x16a>
 800d868:	2b60      	cmp	r3, #96	@ 0x60
 800d86a:	d877      	bhi.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d86c:	2b50      	cmp	r3, #80	@ 0x50
 800d86e:	d03c      	beq.n	800d8ea <HAL_TIM_ConfigClockSource+0x14a>
 800d870:	2b50      	cmp	r3, #80	@ 0x50
 800d872:	d873      	bhi.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d874:	2b40      	cmp	r3, #64	@ 0x40
 800d876:	d058      	beq.n	800d92a <HAL_TIM_ConfigClockSource+0x18a>
 800d878:	2b40      	cmp	r3, #64	@ 0x40
 800d87a:	d86f      	bhi.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d87c:	2b30      	cmp	r3, #48	@ 0x30
 800d87e:	d064      	beq.n	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d880:	2b30      	cmp	r3, #48	@ 0x30
 800d882:	d86b      	bhi.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d884:	2b20      	cmp	r3, #32
 800d886:	d060      	beq.n	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d888:	2b20      	cmp	r3, #32
 800d88a:	d867      	bhi.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d05c      	beq.n	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d890:	2b10      	cmp	r3, #16
 800d892:	d05a      	beq.n	800d94a <HAL_TIM_ConfigClockSource+0x1aa>
 800d894:	e062      	b.n	800d95c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d8a6:	f000 fbff 	bl	800e0a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d8b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	609a      	str	r2, [r3, #8]
      break;
 800d8c2:	e04f      	b.n	800d964 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d8d4:	f000 fbe8 	bl	800e0a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	689a      	ldr	r2, [r3, #8]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d8e6:	609a      	str	r2, [r3, #8]
      break;
 800d8e8:	e03c      	b.n	800d964 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	f000 faa2 	bl	800de40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2150      	movs	r1, #80	@ 0x50
 800d902:	4618      	mov	r0, r3
 800d904:	f000 fbb2 	bl	800e06c <TIM_ITRx_SetConfig>
      break;
 800d908:	e02c      	b.n	800d964 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d916:	461a      	mov	r2, r3
 800d918:	f000 fafe 	bl	800df18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2160      	movs	r1, #96	@ 0x60
 800d922:	4618      	mov	r0, r3
 800d924:	f000 fba2 	bl	800e06c <TIM_ITRx_SetConfig>
      break;
 800d928:	e01c      	b.n	800d964 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d936:	461a      	mov	r2, r3
 800d938:	f000 fa82 	bl	800de40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2140      	movs	r1, #64	@ 0x40
 800d942:	4618      	mov	r0, r3
 800d944:	f000 fb92 	bl	800e06c <TIM_ITRx_SetConfig>
      break;
 800d948:	e00c      	b.n	800d964 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4619      	mov	r1, r3
 800d954:	4610      	mov	r0, r2
 800d956:	f000 fb89 	bl	800e06c <TIM_ITRx_SetConfig>
      break;
 800d95a:	e003      	b.n	800d964 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d95c:	2301      	movs	r3, #1
 800d95e:	73fb      	strb	r3, [r7, #15]
      break;
 800d960:	e000      	b.n	800d964 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d974:	7bfb      	ldrb	r3, [r7, #15]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	ffceff88 	.word	0xffceff88
 800d984:	00100040 	.word	0x00100040
 800d988:	00100030 	.word	0x00100030
 800d98c:	00100020 	.word	0x00100020

0800d990 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d101      	bne.n	800d9a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	e031      	b.n	800da0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d9b8:	6839      	ldr	r1, [r7, #0]
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f8e2 	bl	800db84 <TIM_SlaveTimer_SetConfig>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d009      	beq.n	800d9da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e018      	b.n	800da0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	68da      	ldr	r2, [r3, #12]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68da      	ldr	r2, [r3, #12]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d9f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a40      	ldr	r2, [pc, #256]	@ (800db64 <TIM_Base_SetConfig+0x114>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d013      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da6e:	d00f      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a3d      	ldr	r2, [pc, #244]	@ (800db68 <TIM_Base_SetConfig+0x118>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d00b      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a3c      	ldr	r2, [pc, #240]	@ (800db6c <TIM_Base_SetConfig+0x11c>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d007      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a3b      	ldr	r2, [pc, #236]	@ (800db70 <TIM_Base_SetConfig+0x120>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d003      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4a3a      	ldr	r2, [pc, #232]	@ (800db74 <TIM_Base_SetConfig+0x124>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d108      	bne.n	800daa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a2f      	ldr	r2, [pc, #188]	@ (800db64 <TIM_Base_SetConfig+0x114>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d01f      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dab0:	d01b      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a2c      	ldr	r2, [pc, #176]	@ (800db68 <TIM_Base_SetConfig+0x118>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d017      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a2b      	ldr	r2, [pc, #172]	@ (800db6c <TIM_Base_SetConfig+0x11c>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d013      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a2a      	ldr	r2, [pc, #168]	@ (800db70 <TIM_Base_SetConfig+0x120>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00f      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a29      	ldr	r2, [pc, #164]	@ (800db74 <TIM_Base_SetConfig+0x124>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d00b      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a28      	ldr	r2, [pc, #160]	@ (800db78 <TIM_Base_SetConfig+0x128>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d007      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a27      	ldr	r2, [pc, #156]	@ (800db7c <TIM_Base_SetConfig+0x12c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d003      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a26      	ldr	r2, [pc, #152]	@ (800db80 <TIM_Base_SetConfig+0x130>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d108      	bne.n	800dafc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800daf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	68fa      	ldr	r2, [r7, #12]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	4313      	orrs	r3, r2
 800db08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	689a      	ldr	r2, [r3, #8]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a10      	ldr	r2, [pc, #64]	@ (800db64 <TIM_Base_SetConfig+0x114>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d00f      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a12      	ldr	r2, [pc, #72]	@ (800db74 <TIM_Base_SetConfig+0x124>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d00b      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a11      	ldr	r2, [pc, #68]	@ (800db78 <TIM_Base_SetConfig+0x128>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d007      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a10      	ldr	r2, [pc, #64]	@ (800db7c <TIM_Base_SetConfig+0x12c>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d003      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a0f      	ldr	r2, [pc, #60]	@ (800db80 <TIM_Base_SetConfig+0x130>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d103      	bne.n	800db50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	691a      	ldr	r2, [r3, #16]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	615a      	str	r2, [r3, #20]
}
 800db56:	bf00      	nop
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	40010000 	.word	0x40010000
 800db68:	40000400 	.word	0x40000400
 800db6c:	40000800 	.word	0x40000800
 800db70:	40000c00 	.word	0x40000c00
 800db74:	40010400 	.word	0x40010400
 800db78:	40014000 	.word	0x40014000
 800db7c:	40014400 	.word	0x40014400
 800db80:	40014800 	.word	0x40014800

0800db84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	4b65      	ldr	r3, [pc, #404]	@ (800dd34 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800db9e:	4013      	ands	r3, r2
 800dba0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	4b62      	ldr	r3, [pc, #392]	@ (800dd38 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	693a      	ldr	r2, [r7, #16]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	693a      	ldr	r2, [r7, #16]
 800dbc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	4a5c      	ldr	r2, [pc, #368]	@ (800dd3c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	f000 80ab 	beq.w	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbd2:	4a5a      	ldr	r2, [pc, #360]	@ (800dd3c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	f200 80a4 	bhi.w	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dbda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbde:	f000 80a3 	beq.w	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbe6:	f200 809c 	bhi.w	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dbea:	4a55      	ldr	r2, [pc, #340]	@ (800dd40 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	f000 809b 	beq.w	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dbf2:	4a53      	ldr	r2, [pc, #332]	@ (800dd40 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	f200 8094 	bhi.w	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dbfa:	4a52      	ldr	r2, [pc, #328]	@ (800dd44 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	f000 8093 	beq.w	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc02:	4a50      	ldr	r2, [pc, #320]	@ (800dd44 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	f200 808c 	bhi.w	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc0a:	4a4f      	ldr	r2, [pc, #316]	@ (800dd48 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	f000 808b 	beq.w	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc12:	4a4d      	ldr	r2, [pc, #308]	@ (800dd48 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	f200 8084 	bhi.w	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc1a:	4a4c      	ldr	r2, [pc, #304]	@ (800dd4c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	f000 8083 	beq.w	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc22:	4a4a      	ldr	r2, [pc, #296]	@ (800dd4c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d87c      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc28:	4a49      	ldr	r2, [pc, #292]	@ (800dd50 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d07c      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc2e:	4a48      	ldr	r2, [pc, #288]	@ (800dd50 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d876      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc34:	4a47      	ldr	r2, [pc, #284]	@ (800dd54 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d076      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc3a:	4a46      	ldr	r2, [pc, #280]	@ (800dd54 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d870      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc44:	d070      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc46:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc4a:	d86a      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc50:	d06a      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc56:	d864      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc58:	2b70      	cmp	r3, #112	@ 0x70
 800dc5a:	d01a      	beq.n	800dc92 <TIM_SlaveTimer_SetConfig+0x10e>
 800dc5c:	2b70      	cmp	r3, #112	@ 0x70
 800dc5e:	d860      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc60:	2b60      	cmp	r3, #96	@ 0x60
 800dc62:	d054      	beq.n	800dd0e <TIM_SlaveTimer_SetConfig+0x18a>
 800dc64:	2b60      	cmp	r3, #96	@ 0x60
 800dc66:	d85c      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc68:	2b50      	cmp	r3, #80	@ 0x50
 800dc6a:	d046      	beq.n	800dcfa <TIM_SlaveTimer_SetConfig+0x176>
 800dc6c:	2b50      	cmp	r3, #80	@ 0x50
 800dc6e:	d858      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc70:	2b40      	cmp	r3, #64	@ 0x40
 800dc72:	d019      	beq.n	800dca8 <TIM_SlaveTimer_SetConfig+0x124>
 800dc74:	2b40      	cmp	r3, #64	@ 0x40
 800dc76:	d854      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc78:	2b30      	cmp	r3, #48	@ 0x30
 800dc7a:	d055      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc7c:	2b30      	cmp	r3, #48	@ 0x30
 800dc7e:	d850      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc80:	2b20      	cmp	r3, #32
 800dc82:	d051      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc84:	2b20      	cmp	r3, #32
 800dc86:	d84c      	bhi.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d04d      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc8c:	2b10      	cmp	r3, #16
 800dc8e:	d04b      	beq.n	800dd28 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dc90:	e047      	b.n	800dd22 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800dca2:	f000 fa01 	bl	800e0a8 <TIM_ETR_SetConfig>
      break;
 800dca6:	e040      	b.n	800dd2a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b05      	cmp	r3, #5
 800dcae:	d101      	bne.n	800dcb4 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e03b      	b.n	800dd2c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	6a1a      	ldr	r2, [r3, #32]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f022 0201 	bic.w	r2, r2, #1
 800dcca:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dcda:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	011b      	lsls	r3, r3, #4
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	621a      	str	r2, [r3, #32]
      break;
 800dcf8:	e017      	b.n	800dd2a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd06:	461a      	mov	r2, r3
 800dd08:	f000 f89a 	bl	800de40 <TIM_TI1_ConfigInputStage>
      break;
 800dd0c:	e00d      	b.n	800dd2a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	f000 f8fc 	bl	800df18 <TIM_TI2_ConfigInputStage>
      break;
 800dd20:	e003      	b.n	800dd2a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	75fb      	strb	r3, [r7, #23]
      break;
 800dd26:	e000      	b.n	800dd2a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800dd28:	bf00      	nop
  }

  return status;
 800dd2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	ffcfff8f 	.word	0xffcfff8f
 800dd38:	fffefff8 	.word	0xfffefff8
 800dd3c:	00200010 	.word	0x00200010
 800dd40:	00100070 	.word	0x00100070
 800dd44:	00100060 	.word	0x00100060
 800dd48:	00100050 	.word	0x00100050
 800dd4c:	00100040 	.word	0x00100040
 800dd50:	00100030 	.word	0x00100030
 800dd54:	00100020 	.word	0x00100020

0800dd58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	f023 0201 	bic.w	r2, r3, #1
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	699b      	ldr	r3, [r3, #24]
 800dd76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4a28      	ldr	r2, [pc, #160]	@ (800de24 <TIM_TI1_SetConfig+0xcc>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d01b      	beq.n	800ddbe <TIM_TI1_SetConfig+0x66>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd8c:	d017      	beq.n	800ddbe <TIM_TI1_SetConfig+0x66>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	4a25      	ldr	r2, [pc, #148]	@ (800de28 <TIM_TI1_SetConfig+0xd0>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d013      	beq.n	800ddbe <TIM_TI1_SetConfig+0x66>
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	4a24      	ldr	r2, [pc, #144]	@ (800de2c <TIM_TI1_SetConfig+0xd4>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d00f      	beq.n	800ddbe <TIM_TI1_SetConfig+0x66>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	4a23      	ldr	r2, [pc, #140]	@ (800de30 <TIM_TI1_SetConfig+0xd8>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d00b      	beq.n	800ddbe <TIM_TI1_SetConfig+0x66>
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4a22      	ldr	r2, [pc, #136]	@ (800de34 <TIM_TI1_SetConfig+0xdc>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d007      	beq.n	800ddbe <TIM_TI1_SetConfig+0x66>
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	4a21      	ldr	r2, [pc, #132]	@ (800de38 <TIM_TI1_SetConfig+0xe0>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d003      	beq.n	800ddbe <TIM_TI1_SetConfig+0x66>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	4a20      	ldr	r2, [pc, #128]	@ (800de3c <TIM_TI1_SetConfig+0xe4>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d101      	bne.n	800ddc2 <TIM_TI1_SetConfig+0x6a>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e000      	b.n	800ddc4 <TIM_TI1_SetConfig+0x6c>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d008      	beq.n	800ddda <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f023 0303 	bic.w	r3, r3, #3
 800ddce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ddd0:	697a      	ldr	r2, [r7, #20]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	617b      	str	r3, [r7, #20]
 800ddd8:	e003      	b.n	800dde2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	f043 0301 	orr.w	r3, r3, #1
 800dde0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dde8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	011b      	lsls	r3, r3, #4
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	697a      	ldr	r2, [r7, #20]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f023 030a 	bic.w	r3, r3, #10
 800ddfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	f003 030a 	and.w	r3, r3, #10
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	4313      	orrs	r3, r2
 800de08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	697a      	ldr	r2, [r7, #20]
 800de0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	621a      	str	r2, [r3, #32]
}
 800de16:	bf00      	nop
 800de18:	371c      	adds	r7, #28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	40010000 	.word	0x40010000
 800de28:	40000400 	.word	0x40000400
 800de2c:	40000800 	.word	0x40000800
 800de30:	40000c00 	.word	0x40000c00
 800de34:	40010400 	.word	0x40010400
 800de38:	40001800 	.word	0x40001800
 800de3c:	40014000 	.word	0x40014000

0800de40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de40:	b480      	push	{r7}
 800de42:	b087      	sub	sp, #28
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6a1b      	ldr	r3, [r3, #32]
 800de50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6a1b      	ldr	r3, [r3, #32]
 800de56:	f023 0201 	bic.w	r2, r3, #1
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	699b      	ldr	r3, [r3, #24]
 800de62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	011b      	lsls	r3, r3, #4
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	4313      	orrs	r3, r2
 800de74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	f023 030a 	bic.w	r3, r3, #10
 800de7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	4313      	orrs	r3, r2
 800de84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	697a      	ldr	r2, [r7, #20]
 800de90:	621a      	str	r2, [r3, #32]
}
 800de92:	bf00      	nop
 800de94:	371c      	adds	r7, #28
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800de9e:	b480      	push	{r7}
 800dea0:	b087      	sub	sp, #28
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
 800deaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6a1b      	ldr	r3, [r3, #32]
 800deb0:	f023 0210 	bic.w	r2, r3, #16
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	699b      	ldr	r3, [r3, #24]
 800debc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6a1b      	ldr	r3, [r3, #32]
 800dec2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800deca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	021b      	lsls	r3, r3, #8
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dedc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	031b      	lsls	r3, r3, #12
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	4313      	orrs	r3, r2
 800dee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800def0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	011b      	lsls	r3, r3, #4
 800def6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800defa:	693a      	ldr	r2, [r7, #16]
 800defc:	4313      	orrs	r3, r2
 800defe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	697a      	ldr	r2, [r7, #20]
 800df04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	693a      	ldr	r2, [r7, #16]
 800df0a:	621a      	str	r2, [r3, #32]
}
 800df0c:	bf00      	nop
 800df0e:	371c      	adds	r7, #28
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	f023 0210 	bic.w	r2, r3, #16
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6a1b      	ldr	r3, [r3, #32]
 800df3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800df42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	031b      	lsls	r3, r3, #12
 800df48:	697a      	ldr	r2, [r7, #20]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800df54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	011b      	lsls	r3, r3, #4
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	697a      	ldr	r2, [r7, #20]
 800df64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	621a      	str	r2, [r3, #32]
}
 800df6c:	bf00      	nop
 800df6e:	371c      	adds	r7, #28
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800df78:	b480      	push	{r7}
 800df7a:	b087      	sub	sp, #28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	6a1b      	ldr	r3, [r3, #32]
 800df8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6a1b      	ldr	r3, [r3, #32]
 800df9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f023 0303 	bic.w	r3, r3, #3
 800dfa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800dfa6:	697a      	ldr	r2, [r7, #20]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dfb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	011b      	lsls	r3, r3, #4
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800dfc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	021b      	lsls	r3, r3, #8
 800dfce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	621a      	str	r2, [r3, #32]
}
 800dfe4:	bf00      	nop
 800dfe6:	371c      	adds	r7, #28
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b087      	sub	sp, #28
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
 800dffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6a1b      	ldr	r3, [r3, #32]
 800e002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	69db      	ldr	r3, [r3, #28]
 800e00e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6a1b      	ldr	r3, [r3, #32]
 800e014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e01c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	021b      	lsls	r3, r3, #8
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	4313      	orrs	r3, r2
 800e026:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e02e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	031b      	lsls	r3, r3, #12
 800e034:	b29b      	uxth	r3, r3
 800e036:	697a      	ldr	r2, [r7, #20]
 800e038:	4313      	orrs	r3, r2
 800e03a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800e042:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	031b      	lsls	r3, r3, #12
 800e048:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800e04c:	693a      	ldr	r2, [r7, #16]
 800e04e:	4313      	orrs	r3, r2
 800e050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	697a      	ldr	r2, [r7, #20]
 800e056:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	621a      	str	r2, [r3, #32]
}
 800e05e:	bf00      	nop
 800e060:	371c      	adds	r7, #28
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
	...

0800e06c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e07c:	68fa      	ldr	r2, [r7, #12]
 800e07e:	4b09      	ldr	r3, [pc, #36]	@ (800e0a4 <TIM_ITRx_SetConfig+0x38>)
 800e080:	4013      	ands	r3, r2
 800e082:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e084:	683a      	ldr	r2, [r7, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	4313      	orrs	r3, r2
 800e08a:	f043 0307 	orr.w	r3, r3, #7
 800e08e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	609a      	str	r2, [r3, #8]
}
 800e096:	bf00      	nop
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	ffcfff8f 	.word	0xffcfff8f

0800e0a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b087      	sub	sp, #28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e0c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	021a      	lsls	r2, r3, #8
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	609a      	str	r2, [r3, #8]
}
 800e0dc:	bf00      	nop
 800e0de:	371c      	adds	r7, #28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b087      	sub	sp, #28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	f003 031f 	and.w	r3, r3, #31
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6a1a      	ldr	r2, [r3, #32]
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	43db      	mvns	r3, r3
 800e10a:	401a      	ands	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6a1a      	ldr	r2, [r3, #32]
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	f003 031f 	and.w	r3, r3, #31
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	fa01 f303 	lsl.w	r3, r1, r3
 800e120:	431a      	orrs	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	621a      	str	r2, [r3, #32]
}
 800e126:	bf00      	nop
 800e128:	371c      	adds	r7, #28
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
	...

0800e134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e144:	2b01      	cmp	r3, #1
 800e146:	d101      	bne.n	800e14c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e148:	2302      	movs	r3, #2
 800e14a:	e06d      	b.n	800e228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2202      	movs	r2, #2
 800e158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a30      	ldr	r2, [pc, #192]	@ (800e234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d004      	beq.n	800e180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4a2f      	ldr	r2, [pc, #188]	@ (800e238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d108      	bne.n	800e192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	4313      	orrs	r3, r2
 800e190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a20      	ldr	r2, [pc, #128]	@ (800e234 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d022      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1be:	d01d      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a1d      	ldr	r2, [pc, #116]	@ (800e23c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d018      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a1c      	ldr	r2, [pc, #112]	@ (800e240 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d013      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a1a      	ldr	r2, [pc, #104]	@ (800e244 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d00e      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a15      	ldr	r2, [pc, #84]	@ (800e238 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d009      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a16      	ldr	r2, [pc, #88]	@ (800e248 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d004      	beq.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a15      	ldr	r2, [pc, #84]	@ (800e24c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d10c      	bne.n	800e216 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e202:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	4313      	orrs	r3, r2
 800e20c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	40010000 	.word	0x40010000
 800e238:	40010400 	.word	0x40010400
 800e23c:	40000400 	.word	0x40000400
 800e240:	40000800 	.word	0x40000800
 800e244:	40000c00 	.word	0x40000c00
 800e248:	40001800 	.word	0x40001800
 800e24c:	40014000 	.word	0x40014000

0800e250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e250:	b480      	push	{r7}
 800e252:	b083      	sub	sp, #12
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e258:	bf00      	nop
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e26c:	bf00      	nop
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e280:	bf00      	nop
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e042      	b.n	800e324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d106      	bne.n	800e2b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7f5 fa11 	bl	80036d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2224      	movs	r2, #36	@ 0x24
 800e2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f022 0201 	bic.w	r2, r2, #1
 800e2cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f8ba 	bl	800e448 <UART_SetConfig>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d101      	bne.n	800e2de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e022      	b.n	800e324 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 fe16 	bl	800ef18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e2fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	689a      	ldr	r2, [r3, #8]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e30a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f042 0201 	orr.w	r2, r2, #1
 800e31a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fe9d 	bl	800f05c <UART_CheckIdleState>
 800e322:	4603      	mov	r3, r0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b08a      	sub	sp, #40	@ 0x28
 800e330:	af02      	add	r7, sp, #8
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	603b      	str	r3, [r7, #0]
 800e338:	4613      	mov	r3, r2
 800e33a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e342:	2b20      	cmp	r3, #32
 800e344:	d17b      	bne.n	800e43e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <HAL_UART_Transmit+0x26>
 800e34c:	88fb      	ldrh	r3, [r7, #6]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d101      	bne.n	800e356 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e352:	2301      	movs	r3, #1
 800e354:	e074      	b.n	800e440 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2200      	movs	r2, #0
 800e35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2221      	movs	r2, #33	@ 0x21
 800e362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e366:	f7f5 fad1 	bl	800390c <HAL_GetTick>
 800e36a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	88fa      	ldrh	r2, [r7, #6]
 800e370:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	88fa      	ldrh	r2, [r7, #6]
 800e378:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e384:	d108      	bne.n	800e398 <HAL_UART_Transmit+0x6c>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d104      	bne.n	800e398 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e38e:	2300      	movs	r3, #0
 800e390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	61bb      	str	r3, [r7, #24]
 800e396:	e003      	b.n	800e3a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e3a0:	e030      	b.n	800e404 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	2180      	movs	r1, #128	@ 0x80
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 feff 	bl	800f1b0 <UART_WaitOnFlagUntilTimeout>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d005      	beq.n	800e3c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2220      	movs	r2, #32
 800e3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	e03d      	b.n	800e440 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10b      	bne.n	800e3e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	881b      	ldrh	r3, [r3, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e3d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	3302      	adds	r3, #2
 800e3de:	61bb      	str	r3, [r7, #24]
 800e3e0:	e007      	b.n	800e3f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	781a      	ldrb	r2, [r3, #0]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1c8      	bne.n	800e3a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	2200      	movs	r2, #0
 800e418:	2140      	movs	r1, #64	@ 0x40
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f000 fec8 	bl	800f1b0 <UART_WaitOnFlagUntilTimeout>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d005      	beq.n	800e432 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2220      	movs	r2, #32
 800e42a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	e006      	b.n	800e440 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2220      	movs	r2, #32
 800e436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	e000      	b.n	800e440 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e43e:	2302      	movs	r3, #2
  }
}
 800e440:	4618      	mov	r0, r3
 800e442:	3720      	adds	r7, #32
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e44c:	b092      	sub	sp, #72	@ 0x48
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	689a      	ldr	r2, [r3, #8]
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	431a      	orrs	r2, r3
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	431a      	orrs	r2, r3
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	4bbe      	ldr	r3, [pc, #760]	@ (800e770 <UART_SetConfig+0x328>)
 800e478:	4013      	ands	r3, r2
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e480:	430b      	orrs	r3, r1
 800e482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	68da      	ldr	r2, [r3, #12]
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	430a      	orrs	r2, r1
 800e498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	699b      	ldr	r3, [r3, #24]
 800e49e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4ab3      	ldr	r2, [pc, #716]	@ (800e774 <UART_SetConfig+0x32c>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d004      	beq.n	800e4b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	689a      	ldr	r2, [r3, #8]
 800e4ba:	4baf      	ldr	r3, [pc, #700]	@ (800e778 <UART_SetConfig+0x330>)
 800e4bc:	4013      	ands	r3, r2
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	6812      	ldr	r2, [r2, #0]
 800e4c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e4c4:	430b      	orrs	r3, r1
 800e4c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ce:	f023 010f 	bic.w	r1, r3, #15
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	430a      	orrs	r2, r1
 800e4dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4aa6      	ldr	r2, [pc, #664]	@ (800e77c <UART_SetConfig+0x334>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d177      	bne.n	800e5d8 <UART_SetConfig+0x190>
 800e4e8:	4ba5      	ldr	r3, [pc, #660]	@ (800e780 <UART_SetConfig+0x338>)
 800e4ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e4f0:	2b28      	cmp	r3, #40	@ 0x28
 800e4f2:	d86d      	bhi.n	800e5d0 <UART_SetConfig+0x188>
 800e4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800e4fc <UART_SetConfig+0xb4>)
 800e4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fa:	bf00      	nop
 800e4fc:	0800e5a1 	.word	0x0800e5a1
 800e500:	0800e5d1 	.word	0x0800e5d1
 800e504:	0800e5d1 	.word	0x0800e5d1
 800e508:	0800e5d1 	.word	0x0800e5d1
 800e50c:	0800e5d1 	.word	0x0800e5d1
 800e510:	0800e5d1 	.word	0x0800e5d1
 800e514:	0800e5d1 	.word	0x0800e5d1
 800e518:	0800e5d1 	.word	0x0800e5d1
 800e51c:	0800e5a9 	.word	0x0800e5a9
 800e520:	0800e5d1 	.word	0x0800e5d1
 800e524:	0800e5d1 	.word	0x0800e5d1
 800e528:	0800e5d1 	.word	0x0800e5d1
 800e52c:	0800e5d1 	.word	0x0800e5d1
 800e530:	0800e5d1 	.word	0x0800e5d1
 800e534:	0800e5d1 	.word	0x0800e5d1
 800e538:	0800e5d1 	.word	0x0800e5d1
 800e53c:	0800e5b1 	.word	0x0800e5b1
 800e540:	0800e5d1 	.word	0x0800e5d1
 800e544:	0800e5d1 	.word	0x0800e5d1
 800e548:	0800e5d1 	.word	0x0800e5d1
 800e54c:	0800e5d1 	.word	0x0800e5d1
 800e550:	0800e5d1 	.word	0x0800e5d1
 800e554:	0800e5d1 	.word	0x0800e5d1
 800e558:	0800e5d1 	.word	0x0800e5d1
 800e55c:	0800e5b9 	.word	0x0800e5b9
 800e560:	0800e5d1 	.word	0x0800e5d1
 800e564:	0800e5d1 	.word	0x0800e5d1
 800e568:	0800e5d1 	.word	0x0800e5d1
 800e56c:	0800e5d1 	.word	0x0800e5d1
 800e570:	0800e5d1 	.word	0x0800e5d1
 800e574:	0800e5d1 	.word	0x0800e5d1
 800e578:	0800e5d1 	.word	0x0800e5d1
 800e57c:	0800e5c1 	.word	0x0800e5c1
 800e580:	0800e5d1 	.word	0x0800e5d1
 800e584:	0800e5d1 	.word	0x0800e5d1
 800e588:	0800e5d1 	.word	0x0800e5d1
 800e58c:	0800e5d1 	.word	0x0800e5d1
 800e590:	0800e5d1 	.word	0x0800e5d1
 800e594:	0800e5d1 	.word	0x0800e5d1
 800e598:	0800e5d1 	.word	0x0800e5d1
 800e59c:	0800e5c9 	.word	0x0800e5c9
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5a6:	e222      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e5a8:	2304      	movs	r3, #4
 800e5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5ae:	e21e      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e5b0:	2308      	movs	r3, #8
 800e5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5b6:	e21a      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5be:	e216      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e5c0:	2320      	movs	r3, #32
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5c6:	e212      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e5c8:	2340      	movs	r3, #64	@ 0x40
 800e5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5ce:	e20e      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e5d0:	2380      	movs	r3, #128	@ 0x80
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5d6:	e20a      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a69      	ldr	r2, [pc, #420]	@ (800e784 <UART_SetConfig+0x33c>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d130      	bne.n	800e644 <UART_SetConfig+0x1fc>
 800e5e2:	4b67      	ldr	r3, [pc, #412]	@ (800e780 <UART_SetConfig+0x338>)
 800e5e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5e6:	f003 0307 	and.w	r3, r3, #7
 800e5ea:	2b05      	cmp	r3, #5
 800e5ec:	d826      	bhi.n	800e63c <UART_SetConfig+0x1f4>
 800e5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800e5f4 <UART_SetConfig+0x1ac>)
 800e5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f4:	0800e60d 	.word	0x0800e60d
 800e5f8:	0800e615 	.word	0x0800e615
 800e5fc:	0800e61d 	.word	0x0800e61d
 800e600:	0800e625 	.word	0x0800e625
 800e604:	0800e62d 	.word	0x0800e62d
 800e608:	0800e635 	.word	0x0800e635
 800e60c:	2300      	movs	r3, #0
 800e60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e612:	e1ec      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e614:	2304      	movs	r3, #4
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e61a:	e1e8      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e61c:	2308      	movs	r3, #8
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e622:	e1e4      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e624:	2310      	movs	r3, #16
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e62a:	e1e0      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e62c:	2320      	movs	r3, #32
 800e62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e632:	e1dc      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e634:	2340      	movs	r3, #64	@ 0x40
 800e636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e63a:	e1d8      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e63c:	2380      	movs	r3, #128	@ 0x80
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e642:	e1d4      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a4f      	ldr	r2, [pc, #316]	@ (800e788 <UART_SetConfig+0x340>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d130      	bne.n	800e6b0 <UART_SetConfig+0x268>
 800e64e:	4b4c      	ldr	r3, [pc, #304]	@ (800e780 <UART_SetConfig+0x338>)
 800e650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e652:	f003 0307 	and.w	r3, r3, #7
 800e656:	2b05      	cmp	r3, #5
 800e658:	d826      	bhi.n	800e6a8 <UART_SetConfig+0x260>
 800e65a:	a201      	add	r2, pc, #4	@ (adr r2, 800e660 <UART_SetConfig+0x218>)
 800e65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e660:	0800e679 	.word	0x0800e679
 800e664:	0800e681 	.word	0x0800e681
 800e668:	0800e689 	.word	0x0800e689
 800e66c:	0800e691 	.word	0x0800e691
 800e670:	0800e699 	.word	0x0800e699
 800e674:	0800e6a1 	.word	0x0800e6a1
 800e678:	2300      	movs	r3, #0
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e67e:	e1b6      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e680:	2304      	movs	r3, #4
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e686:	e1b2      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e688:	2308      	movs	r3, #8
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e68e:	e1ae      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e690:	2310      	movs	r3, #16
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e696:	e1aa      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e698:	2320      	movs	r3, #32
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e69e:	e1a6      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e6a0:	2340      	movs	r3, #64	@ 0x40
 800e6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6a6:	e1a2      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e6a8:	2380      	movs	r3, #128	@ 0x80
 800e6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ae:	e19e      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a35      	ldr	r2, [pc, #212]	@ (800e78c <UART_SetConfig+0x344>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d130      	bne.n	800e71c <UART_SetConfig+0x2d4>
 800e6ba:	4b31      	ldr	r3, [pc, #196]	@ (800e780 <UART_SetConfig+0x338>)
 800e6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6be:	f003 0307 	and.w	r3, r3, #7
 800e6c2:	2b05      	cmp	r3, #5
 800e6c4:	d826      	bhi.n	800e714 <UART_SetConfig+0x2cc>
 800e6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e6cc <UART_SetConfig+0x284>)
 800e6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6cc:	0800e6e5 	.word	0x0800e6e5
 800e6d0:	0800e6ed 	.word	0x0800e6ed
 800e6d4:	0800e6f5 	.word	0x0800e6f5
 800e6d8:	0800e6fd 	.word	0x0800e6fd
 800e6dc:	0800e705 	.word	0x0800e705
 800e6e0:	0800e70d 	.word	0x0800e70d
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ea:	e180      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e6ec:	2304      	movs	r3, #4
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6f2:	e17c      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e6f4:	2308      	movs	r3, #8
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6fa:	e178      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e6fc:	2310      	movs	r3, #16
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e702:	e174      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e704:	2320      	movs	r3, #32
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e70a:	e170      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e70c:	2340      	movs	r3, #64	@ 0x40
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e712:	e16c      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e714:	2380      	movs	r3, #128	@ 0x80
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e71a:	e168      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a1b      	ldr	r2, [pc, #108]	@ (800e790 <UART_SetConfig+0x348>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d142      	bne.n	800e7ac <UART_SetConfig+0x364>
 800e726:	4b16      	ldr	r3, [pc, #88]	@ (800e780 <UART_SetConfig+0x338>)
 800e728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e72a:	f003 0307 	and.w	r3, r3, #7
 800e72e:	2b05      	cmp	r3, #5
 800e730:	d838      	bhi.n	800e7a4 <UART_SetConfig+0x35c>
 800e732:	a201      	add	r2, pc, #4	@ (adr r2, 800e738 <UART_SetConfig+0x2f0>)
 800e734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e738:	0800e751 	.word	0x0800e751
 800e73c:	0800e759 	.word	0x0800e759
 800e740:	0800e761 	.word	0x0800e761
 800e744:	0800e769 	.word	0x0800e769
 800e748:	0800e795 	.word	0x0800e795
 800e74c:	0800e79d 	.word	0x0800e79d
 800e750:	2300      	movs	r3, #0
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e756:	e14a      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e758:	2304      	movs	r3, #4
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e75e:	e146      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e760:	2308      	movs	r3, #8
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e766:	e142      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e768:	2310      	movs	r3, #16
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e76e:	e13e      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e770:	cfff69f3 	.word	0xcfff69f3
 800e774:	58000c00 	.word	0x58000c00
 800e778:	11fff4ff 	.word	0x11fff4ff
 800e77c:	40011000 	.word	0x40011000
 800e780:	58024400 	.word	0x58024400
 800e784:	40004400 	.word	0x40004400
 800e788:	40004800 	.word	0x40004800
 800e78c:	40004c00 	.word	0x40004c00
 800e790:	40005000 	.word	0x40005000
 800e794:	2320      	movs	r3, #32
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e79a:	e128      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e79c:	2340      	movs	r3, #64	@ 0x40
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7a2:	e124      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e7a4:	2380      	movs	r3, #128	@ 0x80
 800e7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7aa:	e120      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4acb      	ldr	r2, [pc, #812]	@ (800eae0 <UART_SetConfig+0x698>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d176      	bne.n	800e8a4 <UART_SetConfig+0x45c>
 800e7b6:	4bcb      	ldr	r3, [pc, #812]	@ (800eae4 <UART_SetConfig+0x69c>)
 800e7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e7be:	2b28      	cmp	r3, #40	@ 0x28
 800e7c0:	d86c      	bhi.n	800e89c <UART_SetConfig+0x454>
 800e7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c8 <UART_SetConfig+0x380>)
 800e7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c8:	0800e86d 	.word	0x0800e86d
 800e7cc:	0800e89d 	.word	0x0800e89d
 800e7d0:	0800e89d 	.word	0x0800e89d
 800e7d4:	0800e89d 	.word	0x0800e89d
 800e7d8:	0800e89d 	.word	0x0800e89d
 800e7dc:	0800e89d 	.word	0x0800e89d
 800e7e0:	0800e89d 	.word	0x0800e89d
 800e7e4:	0800e89d 	.word	0x0800e89d
 800e7e8:	0800e875 	.word	0x0800e875
 800e7ec:	0800e89d 	.word	0x0800e89d
 800e7f0:	0800e89d 	.word	0x0800e89d
 800e7f4:	0800e89d 	.word	0x0800e89d
 800e7f8:	0800e89d 	.word	0x0800e89d
 800e7fc:	0800e89d 	.word	0x0800e89d
 800e800:	0800e89d 	.word	0x0800e89d
 800e804:	0800e89d 	.word	0x0800e89d
 800e808:	0800e87d 	.word	0x0800e87d
 800e80c:	0800e89d 	.word	0x0800e89d
 800e810:	0800e89d 	.word	0x0800e89d
 800e814:	0800e89d 	.word	0x0800e89d
 800e818:	0800e89d 	.word	0x0800e89d
 800e81c:	0800e89d 	.word	0x0800e89d
 800e820:	0800e89d 	.word	0x0800e89d
 800e824:	0800e89d 	.word	0x0800e89d
 800e828:	0800e885 	.word	0x0800e885
 800e82c:	0800e89d 	.word	0x0800e89d
 800e830:	0800e89d 	.word	0x0800e89d
 800e834:	0800e89d 	.word	0x0800e89d
 800e838:	0800e89d 	.word	0x0800e89d
 800e83c:	0800e89d 	.word	0x0800e89d
 800e840:	0800e89d 	.word	0x0800e89d
 800e844:	0800e89d 	.word	0x0800e89d
 800e848:	0800e88d 	.word	0x0800e88d
 800e84c:	0800e89d 	.word	0x0800e89d
 800e850:	0800e89d 	.word	0x0800e89d
 800e854:	0800e89d 	.word	0x0800e89d
 800e858:	0800e89d 	.word	0x0800e89d
 800e85c:	0800e89d 	.word	0x0800e89d
 800e860:	0800e89d 	.word	0x0800e89d
 800e864:	0800e89d 	.word	0x0800e89d
 800e868:	0800e895 	.word	0x0800e895
 800e86c:	2301      	movs	r3, #1
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e872:	e0bc      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e874:	2304      	movs	r3, #4
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e87a:	e0b8      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e87c:	2308      	movs	r3, #8
 800e87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e882:	e0b4      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e884:	2310      	movs	r3, #16
 800e886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e88a:	e0b0      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e88c:	2320      	movs	r3, #32
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e892:	e0ac      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e894:	2340      	movs	r3, #64	@ 0x40
 800e896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e89a:	e0a8      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e89c:	2380      	movs	r3, #128	@ 0x80
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8a2:	e0a4      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a8f      	ldr	r2, [pc, #572]	@ (800eae8 <UART_SetConfig+0x6a0>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d130      	bne.n	800e910 <UART_SetConfig+0x4c8>
 800e8ae:	4b8d      	ldr	r3, [pc, #564]	@ (800eae4 <UART_SetConfig+0x69c>)
 800e8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	2b05      	cmp	r3, #5
 800e8b8:	d826      	bhi.n	800e908 <UART_SetConfig+0x4c0>
 800e8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e8c0 <UART_SetConfig+0x478>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e8d9 	.word	0x0800e8d9
 800e8c4:	0800e8e1 	.word	0x0800e8e1
 800e8c8:	0800e8e9 	.word	0x0800e8e9
 800e8cc:	0800e8f1 	.word	0x0800e8f1
 800e8d0:	0800e8f9 	.word	0x0800e8f9
 800e8d4:	0800e901 	.word	0x0800e901
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8de:	e086      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8e6:	e082      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ee:	e07e      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8f6:	e07a      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e8f8:	2320      	movs	r3, #32
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8fe:	e076      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e900:	2340      	movs	r3, #64	@ 0x40
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e906:	e072      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e908:	2380      	movs	r3, #128	@ 0x80
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e90e:	e06e      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a75      	ldr	r2, [pc, #468]	@ (800eaec <UART_SetConfig+0x6a4>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d130      	bne.n	800e97c <UART_SetConfig+0x534>
 800e91a:	4b72      	ldr	r3, [pc, #456]	@ (800eae4 <UART_SetConfig+0x69c>)
 800e91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	2b05      	cmp	r3, #5
 800e924:	d826      	bhi.n	800e974 <UART_SetConfig+0x52c>
 800e926:	a201      	add	r2, pc, #4	@ (adr r2, 800e92c <UART_SetConfig+0x4e4>)
 800e928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92c:	0800e945 	.word	0x0800e945
 800e930:	0800e94d 	.word	0x0800e94d
 800e934:	0800e955 	.word	0x0800e955
 800e938:	0800e95d 	.word	0x0800e95d
 800e93c:	0800e965 	.word	0x0800e965
 800e940:	0800e96d 	.word	0x0800e96d
 800e944:	2300      	movs	r3, #0
 800e946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e94a:	e050      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e94c:	2304      	movs	r3, #4
 800e94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e952:	e04c      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e954:	2308      	movs	r3, #8
 800e956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e95a:	e048      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e95c:	2310      	movs	r3, #16
 800e95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e962:	e044      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e964:	2320      	movs	r3, #32
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e96a:	e040      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e96c:	2340      	movs	r3, #64	@ 0x40
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e972:	e03c      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e974:	2380      	movs	r3, #128	@ 0x80
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e97a:	e038      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a5b      	ldr	r2, [pc, #364]	@ (800eaf0 <UART_SetConfig+0x6a8>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d130      	bne.n	800e9e8 <UART_SetConfig+0x5a0>
 800e986:	4b57      	ldr	r3, [pc, #348]	@ (800eae4 <UART_SetConfig+0x69c>)
 800e988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e98a:	f003 0307 	and.w	r3, r3, #7
 800e98e:	2b05      	cmp	r3, #5
 800e990:	d826      	bhi.n	800e9e0 <UART_SetConfig+0x598>
 800e992:	a201      	add	r2, pc, #4	@ (adr r2, 800e998 <UART_SetConfig+0x550>)
 800e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e998:	0800e9b1 	.word	0x0800e9b1
 800e99c:	0800e9b9 	.word	0x0800e9b9
 800e9a0:	0800e9c1 	.word	0x0800e9c1
 800e9a4:	0800e9c9 	.word	0x0800e9c9
 800e9a8:	0800e9d1 	.word	0x0800e9d1
 800e9ac:	0800e9d9 	.word	0x0800e9d9
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b6:	e01a      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9be:	e016      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c6:	e012      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e9c8:	2310      	movs	r3, #16
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ce:	e00e      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e9d0:	2320      	movs	r3, #32
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d6:	e00a      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e9d8:	2340      	movs	r3, #64	@ 0x40
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9de:	e006      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e9e0:	2380      	movs	r3, #128	@ 0x80
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e6:	e002      	b.n	800e9ee <UART_SetConfig+0x5a6>
 800e9e8:	2380      	movs	r3, #128	@ 0x80
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a3f      	ldr	r2, [pc, #252]	@ (800eaf0 <UART_SetConfig+0x6a8>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	f040 80f8 	bne.w	800ebea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e9fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	2b20      	cmp	r3, #32
 800ea00:	dc46      	bgt.n	800ea90 <UART_SetConfig+0x648>
 800ea02:	2b02      	cmp	r3, #2
 800ea04:	f2c0 8082 	blt.w	800eb0c <UART_SetConfig+0x6c4>
 800ea08:	3b02      	subs	r3, #2
 800ea0a:	2b1e      	cmp	r3, #30
 800ea0c:	d87e      	bhi.n	800eb0c <UART_SetConfig+0x6c4>
 800ea0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea14 <UART_SetConfig+0x5cc>)
 800ea10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea14:	0800ea97 	.word	0x0800ea97
 800ea18:	0800eb0d 	.word	0x0800eb0d
 800ea1c:	0800ea9f 	.word	0x0800ea9f
 800ea20:	0800eb0d 	.word	0x0800eb0d
 800ea24:	0800eb0d 	.word	0x0800eb0d
 800ea28:	0800eb0d 	.word	0x0800eb0d
 800ea2c:	0800eaaf 	.word	0x0800eaaf
 800ea30:	0800eb0d 	.word	0x0800eb0d
 800ea34:	0800eb0d 	.word	0x0800eb0d
 800ea38:	0800eb0d 	.word	0x0800eb0d
 800ea3c:	0800eb0d 	.word	0x0800eb0d
 800ea40:	0800eb0d 	.word	0x0800eb0d
 800ea44:	0800eb0d 	.word	0x0800eb0d
 800ea48:	0800eb0d 	.word	0x0800eb0d
 800ea4c:	0800eabf 	.word	0x0800eabf
 800ea50:	0800eb0d 	.word	0x0800eb0d
 800ea54:	0800eb0d 	.word	0x0800eb0d
 800ea58:	0800eb0d 	.word	0x0800eb0d
 800ea5c:	0800eb0d 	.word	0x0800eb0d
 800ea60:	0800eb0d 	.word	0x0800eb0d
 800ea64:	0800eb0d 	.word	0x0800eb0d
 800ea68:	0800eb0d 	.word	0x0800eb0d
 800ea6c:	0800eb0d 	.word	0x0800eb0d
 800ea70:	0800eb0d 	.word	0x0800eb0d
 800ea74:	0800eb0d 	.word	0x0800eb0d
 800ea78:	0800eb0d 	.word	0x0800eb0d
 800ea7c:	0800eb0d 	.word	0x0800eb0d
 800ea80:	0800eb0d 	.word	0x0800eb0d
 800ea84:	0800eb0d 	.word	0x0800eb0d
 800ea88:	0800eb0d 	.word	0x0800eb0d
 800ea8c:	0800eaff 	.word	0x0800eaff
 800ea90:	2b40      	cmp	r3, #64	@ 0x40
 800ea92:	d037      	beq.n	800eb04 <UART_SetConfig+0x6bc>
 800ea94:	e03a      	b.n	800eb0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ea96:	f7fd fb4d 	bl	800c134 <HAL_RCCEx_GetD3PCLK1Freq>
 800ea9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ea9c:	e03c      	b.n	800eb18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fd fb5c 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eaa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaac:	e034      	b.n	800eb18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eaae:	f107 0318 	add.w	r3, r7, #24
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fd fca8 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eabc:	e02c      	b.n	800eb18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eabe:	4b09      	ldr	r3, [pc, #36]	@ (800eae4 <UART_SetConfig+0x69c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d016      	beq.n	800eaf8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eaca:	4b06      	ldr	r3, [pc, #24]	@ (800eae4 <UART_SetConfig+0x69c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	08db      	lsrs	r3, r3, #3
 800ead0:	f003 0303 	and.w	r3, r3, #3
 800ead4:	4a07      	ldr	r2, [pc, #28]	@ (800eaf4 <UART_SetConfig+0x6ac>)
 800ead6:	fa22 f303 	lsr.w	r3, r2, r3
 800eada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eadc:	e01c      	b.n	800eb18 <UART_SetConfig+0x6d0>
 800eade:	bf00      	nop
 800eae0:	40011400 	.word	0x40011400
 800eae4:	58024400 	.word	0x58024400
 800eae8:	40007800 	.word	0x40007800
 800eaec:	40007c00 	.word	0x40007c00
 800eaf0:	58000c00 	.word	0x58000c00
 800eaf4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800eaf8:	4b9d      	ldr	r3, [pc, #628]	@ (800ed70 <UART_SetConfig+0x928>)
 800eafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eafc:	e00c      	b.n	800eb18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eafe:	4b9d      	ldr	r3, [pc, #628]	@ (800ed74 <UART_SetConfig+0x92c>)
 800eb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb02:	e009      	b.n	800eb18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb0a:	e005      	b.n	800eb18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eb16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eb18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f000 81de 	beq.w	800eedc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb24:	4a94      	ldr	r2, [pc, #592]	@ (800ed78 <UART_SetConfig+0x930>)
 800eb26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb32:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	4413      	add	r3, r2
 800eb3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d305      	bcc.n	800eb50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d903      	bls.n	800eb58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eb50:	2301      	movs	r3, #1
 800eb52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eb56:	e1c1      	b.n	800eedc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	60bb      	str	r3, [r7, #8]
 800eb5e:	60fa      	str	r2, [r7, #12]
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb64:	4a84      	ldr	r2, [pc, #528]	@ (800ed78 <UART_SetConfig+0x930>)
 800eb66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	603b      	str	r3, [r7, #0]
 800eb70:	607a      	str	r2, [r7, #4]
 800eb72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb7a:	f7f1 fc09 	bl	8000390 <__aeabi_uldivmod>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4610      	mov	r0, r2
 800eb84:	4619      	mov	r1, r3
 800eb86:	f04f 0200 	mov.w	r2, #0
 800eb8a:	f04f 0300 	mov.w	r3, #0
 800eb8e:	020b      	lsls	r3, r1, #8
 800eb90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb94:	0202      	lsls	r2, r0, #8
 800eb96:	6979      	ldr	r1, [r7, #20]
 800eb98:	6849      	ldr	r1, [r1, #4]
 800eb9a:	0849      	lsrs	r1, r1, #1
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	460c      	mov	r4, r1
 800eba0:	4605      	mov	r5, r0
 800eba2:	eb12 0804 	adds.w	r8, r2, r4
 800eba6:	eb43 0905 	adc.w	r9, r3, r5
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	469a      	mov	sl, r3
 800ebb2:	4693      	mov	fp, r2
 800ebb4:	4652      	mov	r2, sl
 800ebb6:	465b      	mov	r3, fp
 800ebb8:	4640      	mov	r0, r8
 800ebba:	4649      	mov	r1, r9
 800ebbc:	f7f1 fbe8 	bl	8000390 <__aeabi_uldivmod>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ebce:	d308      	bcc.n	800ebe2 <UART_SetConfig+0x79a>
 800ebd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ebd6:	d204      	bcs.n	800ebe2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebde:	60da      	str	r2, [r3, #12]
 800ebe0:	e17c      	b.n	800eedc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ebe8:	e178      	b.n	800eedc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	69db      	ldr	r3, [r3, #28]
 800ebee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebf2:	f040 80c5 	bne.w	800ed80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ebf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ebfa:	2b20      	cmp	r3, #32
 800ebfc:	dc48      	bgt.n	800ec90 <UART_SetConfig+0x848>
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	db7b      	blt.n	800ecfa <UART_SetConfig+0x8b2>
 800ec02:	2b20      	cmp	r3, #32
 800ec04:	d879      	bhi.n	800ecfa <UART_SetConfig+0x8b2>
 800ec06:	a201      	add	r2, pc, #4	@ (adr r2, 800ec0c <UART_SetConfig+0x7c4>)
 800ec08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0c:	0800ec97 	.word	0x0800ec97
 800ec10:	0800ec9f 	.word	0x0800ec9f
 800ec14:	0800ecfb 	.word	0x0800ecfb
 800ec18:	0800ecfb 	.word	0x0800ecfb
 800ec1c:	0800eca7 	.word	0x0800eca7
 800ec20:	0800ecfb 	.word	0x0800ecfb
 800ec24:	0800ecfb 	.word	0x0800ecfb
 800ec28:	0800ecfb 	.word	0x0800ecfb
 800ec2c:	0800ecb7 	.word	0x0800ecb7
 800ec30:	0800ecfb 	.word	0x0800ecfb
 800ec34:	0800ecfb 	.word	0x0800ecfb
 800ec38:	0800ecfb 	.word	0x0800ecfb
 800ec3c:	0800ecfb 	.word	0x0800ecfb
 800ec40:	0800ecfb 	.word	0x0800ecfb
 800ec44:	0800ecfb 	.word	0x0800ecfb
 800ec48:	0800ecfb 	.word	0x0800ecfb
 800ec4c:	0800ecc7 	.word	0x0800ecc7
 800ec50:	0800ecfb 	.word	0x0800ecfb
 800ec54:	0800ecfb 	.word	0x0800ecfb
 800ec58:	0800ecfb 	.word	0x0800ecfb
 800ec5c:	0800ecfb 	.word	0x0800ecfb
 800ec60:	0800ecfb 	.word	0x0800ecfb
 800ec64:	0800ecfb 	.word	0x0800ecfb
 800ec68:	0800ecfb 	.word	0x0800ecfb
 800ec6c:	0800ecfb 	.word	0x0800ecfb
 800ec70:	0800ecfb 	.word	0x0800ecfb
 800ec74:	0800ecfb 	.word	0x0800ecfb
 800ec78:	0800ecfb 	.word	0x0800ecfb
 800ec7c:	0800ecfb 	.word	0x0800ecfb
 800ec80:	0800ecfb 	.word	0x0800ecfb
 800ec84:	0800ecfb 	.word	0x0800ecfb
 800ec88:	0800ecfb 	.word	0x0800ecfb
 800ec8c:	0800eced 	.word	0x0800eced
 800ec90:	2b40      	cmp	r3, #64	@ 0x40
 800ec92:	d02e      	beq.n	800ecf2 <UART_SetConfig+0x8aa>
 800ec94:	e031      	b.n	800ecfa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec96:	f7fb fa97 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800ec9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ec9c:	e033      	b.n	800ed06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec9e:	f7fb faa9 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 800eca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eca4:	e02f      	b.n	800ed06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fd fa58 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecb4:	e027      	b.n	800ed06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecb6:	f107 0318 	add.w	r3, r7, #24
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fd fba4 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecc4:	e01f      	b.n	800ed06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecc6:	4b2d      	ldr	r3, [pc, #180]	@ (800ed7c <UART_SetConfig+0x934>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f003 0320 	and.w	r3, r3, #32
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ecd2:	4b2a      	ldr	r3, [pc, #168]	@ (800ed7c <UART_SetConfig+0x934>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	08db      	lsrs	r3, r3, #3
 800ecd8:	f003 0303 	and.w	r3, r3, #3
 800ecdc:	4a24      	ldr	r2, [pc, #144]	@ (800ed70 <UART_SetConfig+0x928>)
 800ecde:	fa22 f303 	lsr.w	r3, r2, r3
 800ece2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ece4:	e00f      	b.n	800ed06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ece6:	4b22      	ldr	r3, [pc, #136]	@ (800ed70 <UART_SetConfig+0x928>)
 800ece8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecea:	e00c      	b.n	800ed06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ecec:	4b21      	ldr	r3, [pc, #132]	@ (800ed74 <UART_SetConfig+0x92c>)
 800ecee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecf0:	e009      	b.n	800ed06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ecf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecf8:	e005      	b.n	800ed06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ed04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ed06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 80e7 	beq.w	800eedc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed12:	4a19      	ldr	r2, [pc, #100]	@ (800ed78 <UART_SetConfig+0x930>)
 800ed14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed20:	005a      	lsls	r2, r3, #1
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	085b      	lsrs	r3, r3, #1
 800ed28:	441a      	add	r2, r3
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed36:	2b0f      	cmp	r3, #15
 800ed38:	d916      	bls.n	800ed68 <UART_SetConfig+0x920>
 800ed3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed40:	d212      	bcs.n	800ed68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ed42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	f023 030f 	bic.w	r3, r3, #15
 800ed4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4e:	085b      	lsrs	r3, r3, #1
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	f003 0307 	and.w	r3, r3, #7
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ed64:	60da      	str	r2, [r3, #12]
 800ed66:	e0b9      	b.n	800eedc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ed6e:	e0b5      	b.n	800eedc <UART_SetConfig+0xa94>
 800ed70:	03d09000 	.word	0x03d09000
 800ed74:	003d0900 	.word	0x003d0900
 800ed78:	08015620 	.word	0x08015620
 800ed7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed84:	2b20      	cmp	r3, #32
 800ed86:	dc49      	bgt.n	800ee1c <UART_SetConfig+0x9d4>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	db7c      	blt.n	800ee86 <UART_SetConfig+0xa3e>
 800ed8c:	2b20      	cmp	r3, #32
 800ed8e:	d87a      	bhi.n	800ee86 <UART_SetConfig+0xa3e>
 800ed90:	a201      	add	r2, pc, #4	@ (adr r2, 800ed98 <UART_SetConfig+0x950>)
 800ed92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed96:	bf00      	nop
 800ed98:	0800ee23 	.word	0x0800ee23
 800ed9c:	0800ee2b 	.word	0x0800ee2b
 800eda0:	0800ee87 	.word	0x0800ee87
 800eda4:	0800ee87 	.word	0x0800ee87
 800eda8:	0800ee33 	.word	0x0800ee33
 800edac:	0800ee87 	.word	0x0800ee87
 800edb0:	0800ee87 	.word	0x0800ee87
 800edb4:	0800ee87 	.word	0x0800ee87
 800edb8:	0800ee43 	.word	0x0800ee43
 800edbc:	0800ee87 	.word	0x0800ee87
 800edc0:	0800ee87 	.word	0x0800ee87
 800edc4:	0800ee87 	.word	0x0800ee87
 800edc8:	0800ee87 	.word	0x0800ee87
 800edcc:	0800ee87 	.word	0x0800ee87
 800edd0:	0800ee87 	.word	0x0800ee87
 800edd4:	0800ee87 	.word	0x0800ee87
 800edd8:	0800ee53 	.word	0x0800ee53
 800eddc:	0800ee87 	.word	0x0800ee87
 800ede0:	0800ee87 	.word	0x0800ee87
 800ede4:	0800ee87 	.word	0x0800ee87
 800ede8:	0800ee87 	.word	0x0800ee87
 800edec:	0800ee87 	.word	0x0800ee87
 800edf0:	0800ee87 	.word	0x0800ee87
 800edf4:	0800ee87 	.word	0x0800ee87
 800edf8:	0800ee87 	.word	0x0800ee87
 800edfc:	0800ee87 	.word	0x0800ee87
 800ee00:	0800ee87 	.word	0x0800ee87
 800ee04:	0800ee87 	.word	0x0800ee87
 800ee08:	0800ee87 	.word	0x0800ee87
 800ee0c:	0800ee87 	.word	0x0800ee87
 800ee10:	0800ee87 	.word	0x0800ee87
 800ee14:	0800ee87 	.word	0x0800ee87
 800ee18:	0800ee79 	.word	0x0800ee79
 800ee1c:	2b40      	cmp	r3, #64	@ 0x40
 800ee1e:	d02e      	beq.n	800ee7e <UART_SetConfig+0xa36>
 800ee20:	e031      	b.n	800ee86 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee22:	f7fb f9d1 	bl	800a1c8 <HAL_RCC_GetPCLK1Freq>
 800ee26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee28:	e033      	b.n	800ee92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee2a:	f7fb f9e3 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 800ee2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee30:	e02f      	b.n	800ee92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd f992 	bl	800c160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee40:	e027      	b.n	800ee92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee42:	f107 0318 	add.w	r3, r7, #24
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fd fade 	bl	800c408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee50:	e01f      	b.n	800ee92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee52:	4b2d      	ldr	r3, [pc, #180]	@ (800ef08 <UART_SetConfig+0xac0>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f003 0320 	and.w	r3, r3, #32
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d009      	beq.n	800ee72 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee5e:	4b2a      	ldr	r3, [pc, #168]	@ (800ef08 <UART_SetConfig+0xac0>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	08db      	lsrs	r3, r3, #3
 800ee64:	f003 0303 	and.w	r3, r3, #3
 800ee68:	4a28      	ldr	r2, [pc, #160]	@ (800ef0c <UART_SetConfig+0xac4>)
 800ee6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee70:	e00f      	b.n	800ee92 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ee72:	4b26      	ldr	r3, [pc, #152]	@ (800ef0c <UART_SetConfig+0xac4>)
 800ee74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee76:	e00c      	b.n	800ee92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee78:	4b25      	ldr	r3, [pc, #148]	@ (800ef10 <UART_SetConfig+0xac8>)
 800ee7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee7c:	e009      	b.n	800ee92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee84:	e005      	b.n	800ee92 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ee86:	2300      	movs	r3, #0
 800ee88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee90:	bf00      	nop
    }

    if (pclk != 0U)
 800ee92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d021      	beq.n	800eedc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9c:	4a1d      	ldr	r2, [pc, #116]	@ (800ef14 <UART_SetConfig+0xacc>)
 800ee9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eea2:	461a      	mov	r2, r3
 800eea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eea6:	fbb3 f2f2 	udiv	r2, r3, r2
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	085b      	lsrs	r3, r3, #1
 800eeb0:	441a      	add	r2, r3
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eebe:	2b0f      	cmp	r3, #15
 800eec0:	d909      	bls.n	800eed6 <UART_SetConfig+0xa8e>
 800eec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eec8:	d205      	bcs.n	800eed6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eecc:	b29a      	uxth	r2, r3
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	60da      	str	r2, [r3, #12]
 800eed4:	e002      	b.n	800eedc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	2201      	movs	r2, #1
 800eee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	2200      	movs	r2, #0
 800eef0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	2200      	movs	r2, #0
 800eef6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800eef8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3748      	adds	r7, #72	@ 0x48
 800ef00:	46bd      	mov	sp, r7
 800ef02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef06:	bf00      	nop
 800ef08:	58024400 	.word	0x58024400
 800ef0c:	03d09000 	.word	0x03d09000
 800ef10:	003d0900 	.word	0x003d0900
 800ef14:	08015620 	.word	0x08015620

0800ef18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef24:	f003 0301 	and.w	r3, r3, #1
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00a      	beq.n	800ef42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	430a      	orrs	r2, r1
 800ef40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef46:	f003 0302 	and.w	r3, r3, #2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d00a      	beq.n	800ef64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	430a      	orrs	r2, r1
 800ef62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef68:	f003 0304 	and.w	r3, r3, #4
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00a      	beq.n	800ef86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	430a      	orrs	r2, r1
 800ef84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef8a:	f003 0308 	and.w	r3, r3, #8
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00a      	beq.n	800efa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	430a      	orrs	r2, r1
 800efa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00a      	beq.n	800efca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	689b      	ldr	r3, [r3, #8]
 800efba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	430a      	orrs	r2, r1
 800efc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efce:	f003 0320 	and.w	r3, r3, #32
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00a      	beq.n	800efec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	430a      	orrs	r2, r1
 800efea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d01a      	beq.n	800f02e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	430a      	orrs	r2, r1
 800f00c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f016:	d10a      	bne.n	800f02e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	430a      	orrs	r2, r1
 800f02c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00a      	beq.n	800f050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	430a      	orrs	r2, r1
 800f04e:	605a      	str	r2, [r3, #4]
  }
}
 800f050:	bf00      	nop
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b098      	sub	sp, #96	@ 0x60
 800f060:	af02      	add	r7, sp, #8
 800f062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f06c:	f7f4 fc4e 	bl	800390c <HAL_GetTick>
 800f070:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f003 0308 	and.w	r3, r3, #8
 800f07c:	2b08      	cmp	r3, #8
 800f07e:	d12f      	bne.n	800f0e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f080:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f084:	9300      	str	r3, [sp, #0]
 800f086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f088:	2200      	movs	r2, #0
 800f08a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f88e 	bl	800f1b0 <UART_WaitOnFlagUntilTimeout>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d022      	beq.n	800f0e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a2:	e853 3f00 	ldrex	r3, [r3]
 800f0a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f0ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0c0:	e841 2300 	strex	r3, r2, [r1]
 800f0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1e6      	bne.n	800f09a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2220      	movs	r2, #32
 800f0d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0dc:	2303      	movs	r3, #3
 800f0de:	e063      	b.n	800f1a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f003 0304 	and.w	r3, r3, #4
 800f0ea:	2b04      	cmp	r3, #4
 800f0ec:	d149      	bne.n	800f182 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f0ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f857 	bl	800f1b0 <UART_WaitOnFlagUntilTimeout>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	d03c      	beq.n	800f182 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f110:	e853 3f00 	ldrex	r3, [r3]
 800f114:	623b      	str	r3, [r7, #32]
   return(result);
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f11c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f126:	633b      	str	r3, [r7, #48]	@ 0x30
 800f128:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f12e:	e841 2300 	strex	r3, r2, [r1]
 800f132:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1e6      	bne.n	800f108 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	3308      	adds	r3, #8
 800f140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	e853 3f00 	ldrex	r3, [r3]
 800f148:	60fb      	str	r3, [r7, #12]
   return(result);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f023 0301 	bic.w	r3, r3, #1
 800f150:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	3308      	adds	r3, #8
 800f158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f15a:	61fa      	str	r2, [r7, #28]
 800f15c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15e:	69b9      	ldr	r1, [r7, #24]
 800f160:	69fa      	ldr	r2, [r7, #28]
 800f162:	e841 2300 	strex	r3, r2, [r1]
 800f166:	617b      	str	r3, [r7, #20]
   return(result);
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1e5      	bne.n	800f13a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2220      	movs	r2, #32
 800f172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f17e:	2303      	movs	r3, #3
 800f180:	e012      	b.n	800f1a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2220      	movs	r2, #32
 800f186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2220      	movs	r2, #32
 800f18e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2200      	movs	r2, #0
 800f196:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3758      	adds	r7, #88	@ 0x58
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	603b      	str	r3, [r7, #0]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1c0:	e049      	b.n	800f256 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1c8:	d045      	beq.n	800f256 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1ca:	f7f4 fb9f 	bl	800390c <HAL_GetTick>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	1ad3      	subs	r3, r2, r3
 800f1d4:	69ba      	ldr	r2, [r7, #24]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d302      	bcc.n	800f1e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f1da:	69bb      	ldr	r3, [r7, #24]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d101      	bne.n	800f1e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	e048      	b.n	800f276 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f003 0304 	and.w	r3, r3, #4
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d031      	beq.n	800f256 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	69db      	ldr	r3, [r3, #28]
 800f1f8:	f003 0308 	and.w	r3, r3, #8
 800f1fc:	2b08      	cmp	r3, #8
 800f1fe:	d110      	bne.n	800f222 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2208      	movs	r2, #8
 800f206:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f000 f839 	bl	800f280 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2208      	movs	r2, #8
 800f212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	e029      	b.n	800f276 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	69db      	ldr	r3, [r3, #28]
 800f228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f22c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f230:	d111      	bne.n	800f256 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f23a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f000 f81f 	bl	800f280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2220      	movs	r2, #32
 800f246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f252:	2303      	movs	r3, #3
 800f254:	e00f      	b.n	800f276 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	69da      	ldr	r2, [r3, #28]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	4013      	ands	r3, r2
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	429a      	cmp	r2, r3
 800f264:	bf0c      	ite	eq
 800f266:	2301      	moveq	r3, #1
 800f268:	2300      	movne	r3, #0
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	461a      	mov	r2, r3
 800f26e:	79fb      	ldrb	r3, [r7, #7]
 800f270:	429a      	cmp	r2, r3
 800f272:	d0a6      	beq.n	800f1c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
	...

0800f280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f280:	b480      	push	{r7}
 800f282:	b095      	sub	sp, #84	@ 0x54
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f290:	e853 3f00 	ldrex	r3, [r3]
 800f294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f29c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f2ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e6      	bne.n	800f288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3308      	adds	r3, #8
 800f2c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	e853 3f00 	ldrex	r3, [r3]
 800f2c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2ca:	69fa      	ldr	r2, [r7, #28]
 800f2cc:	4b1e      	ldr	r3, [pc, #120]	@ (800f348 <UART_EndRxTransfer+0xc8>)
 800f2ce:	4013      	ands	r3, r2
 800f2d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3308      	adds	r3, #8
 800f2d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f2e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2e2:	e841 2300 	strex	r3, r2, [r1]
 800f2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e5      	bne.n	800f2ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d118      	bne.n	800f328 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	e853 3f00 	ldrex	r3, [r3]
 800f302:	60bb      	str	r3, [r7, #8]
   return(result);
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	f023 0310 	bic.w	r3, r3, #16
 800f30a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f314:	61bb      	str	r3, [r7, #24]
 800f316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f318:	6979      	ldr	r1, [r7, #20]
 800f31a:	69ba      	ldr	r2, [r7, #24]
 800f31c:	e841 2300 	strex	r3, r2, [r1]
 800f320:	613b      	str	r3, [r7, #16]
   return(result);
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d1e6      	bne.n	800f2f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2220      	movs	r2, #32
 800f32c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f33c:	bf00      	nop
 800f33e:	3754      	adds	r7, #84	@ 0x54
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr
 800f348:	effffffe 	.word	0xeffffffe

0800f34c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d101      	bne.n	800f362 <HAL_UARTEx_DisableFifoMode+0x16>
 800f35e:	2302      	movs	r3, #2
 800f360:	e027      	b.n	800f3b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2201      	movs	r2, #1
 800f366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2224      	movs	r2, #36	@ 0x24
 800f36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f022 0201 	bic.w	r2, r2, #1
 800f388:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f390:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2220      	movs	r2, #32
 800f3a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b084      	sub	sp, #16
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
 800f3c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d101      	bne.n	800f3d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f3d2:	2302      	movs	r3, #2
 800f3d4:	e02d      	b.n	800f432 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2201      	movs	r2, #1
 800f3da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2224      	movs	r2, #36	@ 0x24
 800f3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f022 0201 	bic.w	r2, r2, #1
 800f3fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	683a      	ldr	r2, [r7, #0]
 800f40e:	430a      	orrs	r2, r1
 800f410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f850 	bl	800f4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2220      	movs	r2, #32
 800f424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f430:	2300      	movs	r3, #0
}
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b084      	sub	sp, #16
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d101      	bne.n	800f452 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f44e:	2302      	movs	r3, #2
 800f450:	e02d      	b.n	800f4ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2224      	movs	r2, #36	@ 0x24
 800f45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f022 0201 	bic.w	r2, r2, #1
 800f478:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	430a      	orrs	r2, r1
 800f48c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f000 f812 	bl	800f4b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2220      	movs	r2, #32
 800f4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3710      	adds	r7, #16
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
	...

0800f4b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d108      	bne.n	800f4da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f4d8:	e031      	b.n	800f53e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f4da:	2310      	movs	r3, #16
 800f4dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f4de:	2310      	movs	r3, #16
 800f4e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	0e5b      	lsrs	r3, r3, #25
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	f003 0307 	and.w	r3, r3, #7
 800f4f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	0f5b      	lsrs	r3, r3, #29
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	f003 0307 	and.w	r3, r3, #7
 800f500:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f502:	7bbb      	ldrb	r3, [r7, #14]
 800f504:	7b3a      	ldrb	r2, [r7, #12]
 800f506:	4911      	ldr	r1, [pc, #68]	@ (800f54c <UARTEx_SetNbDataToProcess+0x94>)
 800f508:	5c8a      	ldrb	r2, [r1, r2]
 800f50a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f50e:	7b3a      	ldrb	r2, [r7, #12]
 800f510:	490f      	ldr	r1, [pc, #60]	@ (800f550 <UARTEx_SetNbDataToProcess+0x98>)
 800f512:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f514:	fb93 f3f2 	sdiv	r3, r3, r2
 800f518:	b29a      	uxth	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f520:	7bfb      	ldrb	r3, [r7, #15]
 800f522:	7b7a      	ldrb	r2, [r7, #13]
 800f524:	4909      	ldr	r1, [pc, #36]	@ (800f54c <UARTEx_SetNbDataToProcess+0x94>)
 800f526:	5c8a      	ldrb	r2, [r1, r2]
 800f528:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f52c:	7b7a      	ldrb	r2, [r7, #13]
 800f52e:	4908      	ldr	r1, [pc, #32]	@ (800f550 <UARTEx_SetNbDataToProcess+0x98>)
 800f530:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f532:	fb93 f3f2 	sdiv	r3, r3, r2
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f53e:	bf00      	nop
 800f540:	3714      	adds	r7, #20
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	08015638 	.word	0x08015638
 800f550:	08015640 	.word	0x08015640

0800f554 <std>:
 800f554:	2300      	movs	r3, #0
 800f556:	b510      	push	{r4, lr}
 800f558:	4604      	mov	r4, r0
 800f55a:	e9c0 3300 	strd	r3, r3, [r0]
 800f55e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f562:	6083      	str	r3, [r0, #8]
 800f564:	8181      	strh	r1, [r0, #12]
 800f566:	6643      	str	r3, [r0, #100]	@ 0x64
 800f568:	81c2      	strh	r2, [r0, #14]
 800f56a:	6183      	str	r3, [r0, #24]
 800f56c:	4619      	mov	r1, r3
 800f56e:	2208      	movs	r2, #8
 800f570:	305c      	adds	r0, #92	@ 0x5c
 800f572:	f000 f914 	bl	800f79e <memset>
 800f576:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ac <std+0x58>)
 800f578:	6223      	str	r3, [r4, #32]
 800f57a:	4b0d      	ldr	r3, [pc, #52]	@ (800f5b0 <std+0x5c>)
 800f57c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f57e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5b4 <std+0x60>)
 800f580:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f582:	4b0d      	ldr	r3, [pc, #52]	@ (800f5b8 <std+0x64>)
 800f584:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f586:	4b0d      	ldr	r3, [pc, #52]	@ (800f5bc <std+0x68>)
 800f588:	61e4      	str	r4, [r4, #28]
 800f58a:	429c      	cmp	r4, r3
 800f58c:	d006      	beq.n	800f59c <std+0x48>
 800f58e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f592:	4294      	cmp	r4, r2
 800f594:	d002      	beq.n	800f59c <std+0x48>
 800f596:	33d0      	adds	r3, #208	@ 0xd0
 800f598:	429c      	cmp	r4, r3
 800f59a:	d105      	bne.n	800f5a8 <std+0x54>
 800f59c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5a4:	f000 b974 	b.w	800f890 <__retarget_lock_init_recursive>
 800f5a8:	bd10      	pop	{r4, pc}
 800f5aa:	bf00      	nop
 800f5ac:	0800f719 	.word	0x0800f719
 800f5b0:	0800f73b 	.word	0x0800f73b
 800f5b4:	0800f773 	.word	0x0800f773
 800f5b8:	0800f797 	.word	0x0800f797
 800f5bc:	24015200 	.word	0x24015200

0800f5c0 <stdio_exit_handler>:
 800f5c0:	4a02      	ldr	r2, [pc, #8]	@ (800f5cc <stdio_exit_handler+0xc>)
 800f5c2:	4903      	ldr	r1, [pc, #12]	@ (800f5d0 <stdio_exit_handler+0x10>)
 800f5c4:	4803      	ldr	r0, [pc, #12]	@ (800f5d4 <stdio_exit_handler+0x14>)
 800f5c6:	f000 b869 	b.w	800f69c <_fwalk_sglue>
 800f5ca:	bf00      	nop
 800f5cc:	24000278 	.word	0x24000278
 800f5d0:	08011299 	.word	0x08011299
 800f5d4:	24000288 	.word	0x24000288

0800f5d8 <cleanup_stdio>:
 800f5d8:	6841      	ldr	r1, [r0, #4]
 800f5da:	4b0c      	ldr	r3, [pc, #48]	@ (800f60c <cleanup_stdio+0x34>)
 800f5dc:	4299      	cmp	r1, r3
 800f5de:	b510      	push	{r4, lr}
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	d001      	beq.n	800f5e8 <cleanup_stdio+0x10>
 800f5e4:	f001 fe58 	bl	8011298 <_fclose_r>
 800f5e8:	68a1      	ldr	r1, [r4, #8]
 800f5ea:	4b09      	ldr	r3, [pc, #36]	@ (800f610 <cleanup_stdio+0x38>)
 800f5ec:	4299      	cmp	r1, r3
 800f5ee:	d002      	beq.n	800f5f6 <cleanup_stdio+0x1e>
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f001 fe51 	bl	8011298 <_fclose_r>
 800f5f6:	68e1      	ldr	r1, [r4, #12]
 800f5f8:	4b06      	ldr	r3, [pc, #24]	@ (800f614 <cleanup_stdio+0x3c>)
 800f5fa:	4299      	cmp	r1, r3
 800f5fc:	d004      	beq.n	800f608 <cleanup_stdio+0x30>
 800f5fe:	4620      	mov	r0, r4
 800f600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f604:	f001 be48 	b.w	8011298 <_fclose_r>
 800f608:	bd10      	pop	{r4, pc}
 800f60a:	bf00      	nop
 800f60c:	24015200 	.word	0x24015200
 800f610:	24015268 	.word	0x24015268
 800f614:	240152d0 	.word	0x240152d0

0800f618 <global_stdio_init.part.0>:
 800f618:	b510      	push	{r4, lr}
 800f61a:	4b0b      	ldr	r3, [pc, #44]	@ (800f648 <global_stdio_init.part.0+0x30>)
 800f61c:	4c0b      	ldr	r4, [pc, #44]	@ (800f64c <global_stdio_init.part.0+0x34>)
 800f61e:	4a0c      	ldr	r2, [pc, #48]	@ (800f650 <global_stdio_init.part.0+0x38>)
 800f620:	601a      	str	r2, [r3, #0]
 800f622:	4620      	mov	r0, r4
 800f624:	2200      	movs	r2, #0
 800f626:	2104      	movs	r1, #4
 800f628:	f7ff ff94 	bl	800f554 <std>
 800f62c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f630:	2201      	movs	r2, #1
 800f632:	2109      	movs	r1, #9
 800f634:	f7ff ff8e 	bl	800f554 <std>
 800f638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f63c:	2202      	movs	r2, #2
 800f63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f642:	2112      	movs	r1, #18
 800f644:	f7ff bf86 	b.w	800f554 <std>
 800f648:	24015338 	.word	0x24015338
 800f64c:	24015200 	.word	0x24015200
 800f650:	0800f5c1 	.word	0x0800f5c1

0800f654 <__sfp_lock_acquire>:
 800f654:	4801      	ldr	r0, [pc, #4]	@ (800f65c <__sfp_lock_acquire+0x8>)
 800f656:	f000 b91d 	b.w	800f894 <__retarget_lock_acquire_recursive>
 800f65a:	bf00      	nop
 800f65c:	24015342 	.word	0x24015342

0800f660 <__sfp_lock_release>:
 800f660:	4801      	ldr	r0, [pc, #4]	@ (800f668 <__sfp_lock_release+0x8>)
 800f662:	f000 b918 	b.w	800f896 <__retarget_lock_release_recursive>
 800f666:	bf00      	nop
 800f668:	24015342 	.word	0x24015342

0800f66c <__sinit>:
 800f66c:	b510      	push	{r4, lr}
 800f66e:	4604      	mov	r4, r0
 800f670:	f7ff fff0 	bl	800f654 <__sfp_lock_acquire>
 800f674:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f676:	b11b      	cbz	r3, 800f680 <__sinit+0x14>
 800f678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f67c:	f7ff bff0 	b.w	800f660 <__sfp_lock_release>
 800f680:	4b04      	ldr	r3, [pc, #16]	@ (800f694 <__sinit+0x28>)
 800f682:	6363      	str	r3, [r4, #52]	@ 0x34
 800f684:	4b04      	ldr	r3, [pc, #16]	@ (800f698 <__sinit+0x2c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1f5      	bne.n	800f678 <__sinit+0xc>
 800f68c:	f7ff ffc4 	bl	800f618 <global_stdio_init.part.0>
 800f690:	e7f2      	b.n	800f678 <__sinit+0xc>
 800f692:	bf00      	nop
 800f694:	0800f5d9 	.word	0x0800f5d9
 800f698:	24015338 	.word	0x24015338

0800f69c <_fwalk_sglue>:
 800f69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a0:	4607      	mov	r7, r0
 800f6a2:	4688      	mov	r8, r1
 800f6a4:	4614      	mov	r4, r2
 800f6a6:	2600      	movs	r6, #0
 800f6a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6ac:	f1b9 0901 	subs.w	r9, r9, #1
 800f6b0:	d505      	bpl.n	800f6be <_fwalk_sglue+0x22>
 800f6b2:	6824      	ldr	r4, [r4, #0]
 800f6b4:	2c00      	cmp	r4, #0
 800f6b6:	d1f7      	bne.n	800f6a8 <_fwalk_sglue+0xc>
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6be:	89ab      	ldrh	r3, [r5, #12]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d907      	bls.n	800f6d4 <_fwalk_sglue+0x38>
 800f6c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	d003      	beq.n	800f6d4 <_fwalk_sglue+0x38>
 800f6cc:	4629      	mov	r1, r5
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	47c0      	blx	r8
 800f6d2:	4306      	orrs	r6, r0
 800f6d4:	3568      	adds	r5, #104	@ 0x68
 800f6d6:	e7e9      	b.n	800f6ac <_fwalk_sglue+0x10>

0800f6d8 <sprintf>:
 800f6d8:	b40e      	push	{r1, r2, r3}
 800f6da:	b500      	push	{lr}
 800f6dc:	b09c      	sub	sp, #112	@ 0x70
 800f6de:	ab1d      	add	r3, sp, #116	@ 0x74
 800f6e0:	9002      	str	r0, [sp, #8]
 800f6e2:	9006      	str	r0, [sp, #24]
 800f6e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f6e8:	4809      	ldr	r0, [pc, #36]	@ (800f710 <sprintf+0x38>)
 800f6ea:	9107      	str	r1, [sp, #28]
 800f6ec:	9104      	str	r1, [sp, #16]
 800f6ee:	4909      	ldr	r1, [pc, #36]	@ (800f714 <sprintf+0x3c>)
 800f6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6f4:	9105      	str	r1, [sp, #20]
 800f6f6:	6800      	ldr	r0, [r0, #0]
 800f6f8:	9301      	str	r3, [sp, #4]
 800f6fa:	a902      	add	r1, sp, #8
 800f6fc:	f000 fc48 	bl	800ff90 <_svfprintf_r>
 800f700:	9b02      	ldr	r3, [sp, #8]
 800f702:	2200      	movs	r2, #0
 800f704:	701a      	strb	r2, [r3, #0]
 800f706:	b01c      	add	sp, #112	@ 0x70
 800f708:	f85d eb04 	ldr.w	lr, [sp], #4
 800f70c:	b003      	add	sp, #12
 800f70e:	4770      	bx	lr
 800f710:	24000284 	.word	0x24000284
 800f714:	ffff0208 	.word	0xffff0208

0800f718 <__sread>:
 800f718:	b510      	push	{r4, lr}
 800f71a:	460c      	mov	r4, r1
 800f71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f720:	f000 f868 	bl	800f7f4 <_read_r>
 800f724:	2800      	cmp	r0, #0
 800f726:	bfab      	itete	ge
 800f728:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800f72a:	89a3      	ldrhlt	r3, [r4, #12]
 800f72c:	181b      	addge	r3, r3, r0
 800f72e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f732:	bfac      	ite	ge
 800f734:	6523      	strge	r3, [r4, #80]	@ 0x50
 800f736:	81a3      	strhlt	r3, [r4, #12]
 800f738:	bd10      	pop	{r4, pc}

0800f73a <__swrite>:
 800f73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f73e:	461f      	mov	r7, r3
 800f740:	898b      	ldrh	r3, [r1, #12]
 800f742:	05db      	lsls	r3, r3, #23
 800f744:	4605      	mov	r5, r0
 800f746:	460c      	mov	r4, r1
 800f748:	4616      	mov	r6, r2
 800f74a:	d505      	bpl.n	800f758 <__swrite+0x1e>
 800f74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f750:	2302      	movs	r3, #2
 800f752:	2200      	movs	r2, #0
 800f754:	f000 f83c 	bl	800f7d0 <_lseek_r>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f75e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f762:	81a3      	strh	r3, [r4, #12]
 800f764:	4632      	mov	r2, r6
 800f766:	463b      	mov	r3, r7
 800f768:	4628      	mov	r0, r5
 800f76a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f76e:	f000 b853 	b.w	800f818 <_write_r>

0800f772 <__sseek>:
 800f772:	b510      	push	{r4, lr}
 800f774:	460c      	mov	r4, r1
 800f776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f77a:	f000 f829 	bl	800f7d0 <_lseek_r>
 800f77e:	1c43      	adds	r3, r0, #1
 800f780:	89a3      	ldrh	r3, [r4, #12]
 800f782:	bf15      	itete	ne
 800f784:	6520      	strne	r0, [r4, #80]	@ 0x50
 800f786:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f78a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f78e:	81a3      	strheq	r3, [r4, #12]
 800f790:	bf18      	it	ne
 800f792:	81a3      	strhne	r3, [r4, #12]
 800f794:	bd10      	pop	{r4, pc}

0800f796 <__sclose>:
 800f796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f79a:	f000 b809 	b.w	800f7b0 <_close_r>

0800f79e <memset>:
 800f79e:	4402      	add	r2, r0
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d100      	bne.n	800f7a8 <memset+0xa>
 800f7a6:	4770      	bx	lr
 800f7a8:	f803 1b01 	strb.w	r1, [r3], #1
 800f7ac:	e7f9      	b.n	800f7a2 <memset+0x4>
	...

0800f7b0 <_close_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d06      	ldr	r5, [pc, #24]	@ (800f7cc <_close_r+0x1c>)
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	f7f3 fb16 	bl	8002dec <_close>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	d102      	bne.n	800f7ca <_close_r+0x1a>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	b103      	cbz	r3, 800f7ca <_close_r+0x1a>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	2401533c 	.word	0x2401533c

0800f7d0 <_lseek_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d07      	ldr	r5, [pc, #28]	@ (800f7f0 <_lseek_r+0x20>)
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	4608      	mov	r0, r1
 800f7d8:	4611      	mov	r1, r2
 800f7da:	2200      	movs	r2, #0
 800f7dc:	602a      	str	r2, [r5, #0]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	f7f3 fb2b 	bl	8002e3a <_lseek>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d102      	bne.n	800f7ee <_lseek_r+0x1e>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	b103      	cbz	r3, 800f7ee <_lseek_r+0x1e>
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	bd38      	pop	{r3, r4, r5, pc}
 800f7f0:	2401533c 	.word	0x2401533c

0800f7f4 <_read_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d07      	ldr	r5, [pc, #28]	@ (800f814 <_read_r+0x20>)
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	4608      	mov	r0, r1
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	2200      	movs	r2, #0
 800f800:	602a      	str	r2, [r5, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	f7f3 fab9 	bl	8002d7a <_read>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_read_r+0x1e>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_read_r+0x1e>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	2401533c 	.word	0x2401533c

0800f818 <_write_r>:
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	4d07      	ldr	r5, [pc, #28]	@ (800f838 <_write_r+0x20>)
 800f81c:	4604      	mov	r4, r0
 800f81e:	4608      	mov	r0, r1
 800f820:	4611      	mov	r1, r2
 800f822:	2200      	movs	r2, #0
 800f824:	602a      	str	r2, [r5, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	f7f3 fac4 	bl	8002db4 <_write>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d102      	bne.n	800f836 <_write_r+0x1e>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	b103      	cbz	r3, 800f836 <_write_r+0x1e>
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	2401533c 	.word	0x2401533c

0800f83c <__errno>:
 800f83c:	4b01      	ldr	r3, [pc, #4]	@ (800f844 <__errno+0x8>)
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	24000284 	.word	0x24000284

0800f848 <__libc_init_array>:
 800f848:	b570      	push	{r4, r5, r6, lr}
 800f84a:	4d0d      	ldr	r5, [pc, #52]	@ (800f880 <__libc_init_array+0x38>)
 800f84c:	4c0d      	ldr	r4, [pc, #52]	@ (800f884 <__libc_init_array+0x3c>)
 800f84e:	1b64      	subs	r4, r4, r5
 800f850:	10a4      	asrs	r4, r4, #2
 800f852:	2600      	movs	r6, #0
 800f854:	42a6      	cmp	r6, r4
 800f856:	d109      	bne.n	800f86c <__libc_init_array+0x24>
 800f858:	4d0b      	ldr	r5, [pc, #44]	@ (800f888 <__libc_init_array+0x40>)
 800f85a:	4c0c      	ldr	r4, [pc, #48]	@ (800f88c <__libc_init_array+0x44>)
 800f85c:	f005 fe0e 	bl	801547c <_init>
 800f860:	1b64      	subs	r4, r4, r5
 800f862:	10a4      	asrs	r4, r4, #2
 800f864:	2600      	movs	r6, #0
 800f866:	42a6      	cmp	r6, r4
 800f868:	d105      	bne.n	800f876 <__libc_init_array+0x2e>
 800f86a:	bd70      	pop	{r4, r5, r6, pc}
 800f86c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f870:	4798      	blx	r3
 800f872:	3601      	adds	r6, #1
 800f874:	e7ee      	b.n	800f854 <__libc_init_array+0xc>
 800f876:	f855 3b04 	ldr.w	r3, [r5], #4
 800f87a:	4798      	blx	r3
 800f87c:	3601      	adds	r6, #1
 800f87e:	e7f2      	b.n	800f866 <__libc_init_array+0x1e>
 800f880:	08017cf8 	.word	0x08017cf8
 800f884:	08017cf8 	.word	0x08017cf8
 800f888:	08017cf8 	.word	0x08017cf8
 800f88c:	08017d00 	.word	0x08017d00

0800f890 <__retarget_lock_init_recursive>:
 800f890:	4770      	bx	lr

0800f892 <__retarget_lock_close_recursive>:
 800f892:	4770      	bx	lr

0800f894 <__retarget_lock_acquire_recursive>:
 800f894:	4770      	bx	lr

0800f896 <__retarget_lock_release_recursive>:
 800f896:	4770      	bx	lr

0800f898 <memcpy>:
 800f898:	440a      	add	r2, r1
 800f89a:	4291      	cmp	r1, r2
 800f89c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f8a0:	d100      	bne.n	800f8a4 <memcpy+0xc>
 800f8a2:	4770      	bx	lr
 800f8a4:	b510      	push	{r4, lr}
 800f8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8ae:	4291      	cmp	r1, r2
 800f8b0:	d1f9      	bne.n	800f8a6 <memcpy+0xe>
 800f8b2:	bd10      	pop	{r4, pc}

0800f8b4 <register_fini>:
 800f8b4:	4b02      	ldr	r3, [pc, #8]	@ (800f8c0 <register_fini+0xc>)
 800f8b6:	b113      	cbz	r3, 800f8be <register_fini+0xa>
 800f8b8:	4802      	ldr	r0, [pc, #8]	@ (800f8c4 <register_fini+0x10>)
 800f8ba:	f000 b805 	b.w	800f8c8 <atexit>
 800f8be:	4770      	bx	lr
 800f8c0:	00000000 	.word	0x00000000
 800f8c4:	080114ed 	.word	0x080114ed

0800f8c8 <atexit>:
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	4601      	mov	r1, r0
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f001 be66 	b.w	80115a0 <__register_exitproc>

0800f8d4 <_malloc_trim_r>:
 800f8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8d8:	4606      	mov	r6, r0
 800f8da:	2008      	movs	r0, #8
 800f8dc:	4689      	mov	r9, r1
 800f8de:	f001 fe19 	bl	8011514 <sysconf>
 800f8e2:	4f24      	ldr	r7, [pc, #144]	@ (800f974 <_malloc_trim_r+0xa0>)
 800f8e4:	4680      	mov	r8, r0
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f000 fb44 	bl	800ff74 <__malloc_lock>
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	685d      	ldr	r5, [r3, #4]
 800f8f0:	f025 0503 	bic.w	r5, r5, #3
 800f8f4:	f1a5 0411 	sub.w	r4, r5, #17
 800f8f8:	eba4 0409 	sub.w	r4, r4, r9
 800f8fc:	4444      	add	r4, r8
 800f8fe:	fbb4 f4f8 	udiv	r4, r4, r8
 800f902:	3c01      	subs	r4, #1
 800f904:	fb08 f404 	mul.w	r4, r8, r4
 800f908:	45a0      	cmp	r8, r4
 800f90a:	dd05      	ble.n	800f918 <_malloc_trim_r+0x44>
 800f90c:	4630      	mov	r0, r6
 800f90e:	f000 fb37 	bl	800ff80 <__malloc_unlock>
 800f912:	2000      	movs	r0, #0
 800f914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f918:	2100      	movs	r1, #0
 800f91a:	4630      	mov	r0, r6
 800f91c:	f001 fdd6 	bl	80114cc <_sbrk_r>
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	442b      	add	r3, r5
 800f924:	4298      	cmp	r0, r3
 800f926:	d1f1      	bne.n	800f90c <_malloc_trim_r+0x38>
 800f928:	4261      	negs	r1, r4
 800f92a:	4630      	mov	r0, r6
 800f92c:	f001 fdce 	bl	80114cc <_sbrk_r>
 800f930:	3001      	adds	r0, #1
 800f932:	d110      	bne.n	800f956 <_malloc_trim_r+0x82>
 800f934:	2100      	movs	r1, #0
 800f936:	4630      	mov	r0, r6
 800f938:	f001 fdc8 	bl	80114cc <_sbrk_r>
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	1a83      	subs	r3, r0, r2
 800f940:	2b0f      	cmp	r3, #15
 800f942:	dde3      	ble.n	800f90c <_malloc_trim_r+0x38>
 800f944:	490c      	ldr	r1, [pc, #48]	@ (800f978 <_malloc_trim_r+0xa4>)
 800f946:	6809      	ldr	r1, [r1, #0]
 800f948:	1a40      	subs	r0, r0, r1
 800f94a:	490c      	ldr	r1, [pc, #48]	@ (800f97c <_malloc_trim_r+0xa8>)
 800f94c:	f043 0301 	orr.w	r3, r3, #1
 800f950:	6008      	str	r0, [r1, #0]
 800f952:	6053      	str	r3, [r2, #4]
 800f954:	e7da      	b.n	800f90c <_malloc_trim_r+0x38>
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	4a08      	ldr	r2, [pc, #32]	@ (800f97c <_malloc_trim_r+0xa8>)
 800f95a:	1b2d      	subs	r5, r5, r4
 800f95c:	f045 0501 	orr.w	r5, r5, #1
 800f960:	605d      	str	r5, [r3, #4]
 800f962:	6813      	ldr	r3, [r2, #0]
 800f964:	4630      	mov	r0, r6
 800f966:	1b1b      	subs	r3, r3, r4
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	f000 fb09 	bl	800ff80 <__malloc_unlock>
 800f96e:	2001      	movs	r0, #1
 800f970:	e7d0      	b.n	800f914 <_malloc_trim_r+0x40>
 800f972:	bf00      	nop
 800f974:	240003b4 	.word	0x240003b4
 800f978:	240003ac 	.word	0x240003ac
 800f97c:	24015348 	.word	0x24015348

0800f980 <_free_r>:
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	4604      	mov	r4, r0
 800f984:	460f      	mov	r7, r1
 800f986:	2900      	cmp	r1, #0
 800f988:	f000 80b1 	beq.w	800faee <_free_r+0x16e>
 800f98c:	f000 faf2 	bl	800ff74 <__malloc_lock>
 800f990:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f994:	4d56      	ldr	r5, [pc, #344]	@ (800faf0 <_free_r+0x170>)
 800f996:	f022 0001 	bic.w	r0, r2, #1
 800f99a:	f1a7 0308 	sub.w	r3, r7, #8
 800f99e:	eb03 0c00 	add.w	ip, r3, r0
 800f9a2:	68a9      	ldr	r1, [r5, #8]
 800f9a4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800f9a8:	4561      	cmp	r1, ip
 800f9aa:	f026 0603 	bic.w	r6, r6, #3
 800f9ae:	f002 0201 	and.w	r2, r2, #1
 800f9b2:	d11b      	bne.n	800f9ec <_free_r+0x6c>
 800f9b4:	4406      	add	r6, r0
 800f9b6:	b93a      	cbnz	r2, 800f9c8 <_free_r+0x48>
 800f9b8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800f9bc:	1a9b      	subs	r3, r3, r2
 800f9be:	4416      	add	r6, r2
 800f9c0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800f9c4:	60ca      	str	r2, [r1, #12]
 800f9c6:	6091      	str	r1, [r2, #8]
 800f9c8:	f046 0201 	orr.w	r2, r6, #1
 800f9cc:	605a      	str	r2, [r3, #4]
 800f9ce:	60ab      	str	r3, [r5, #8]
 800f9d0:	4b48      	ldr	r3, [pc, #288]	@ (800faf4 <_free_r+0x174>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	42b3      	cmp	r3, r6
 800f9d6:	d804      	bhi.n	800f9e2 <_free_r+0x62>
 800f9d8:	4b47      	ldr	r3, [pc, #284]	@ (800faf8 <_free_r+0x178>)
 800f9da:	4620      	mov	r0, r4
 800f9dc:	6819      	ldr	r1, [r3, #0]
 800f9de:	f7ff ff79 	bl	800f8d4 <_malloc_trim_r>
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9e8:	f000 baca 	b.w	800ff80 <__malloc_unlock>
 800f9ec:	f8cc 6004 	str.w	r6, [ip, #4]
 800f9f0:	2a00      	cmp	r2, #0
 800f9f2:	d138      	bne.n	800fa66 <_free_r+0xe6>
 800f9f4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800f9f8:	1a5b      	subs	r3, r3, r1
 800f9fa:	4408      	add	r0, r1
 800f9fc:	6899      	ldr	r1, [r3, #8]
 800f9fe:	f105 0708 	add.w	r7, r5, #8
 800fa02:	42b9      	cmp	r1, r7
 800fa04:	d031      	beq.n	800fa6a <_free_r+0xea>
 800fa06:	68df      	ldr	r7, [r3, #12]
 800fa08:	60cf      	str	r7, [r1, #12]
 800fa0a:	60b9      	str	r1, [r7, #8]
 800fa0c:	eb0c 0106 	add.w	r1, ip, r6
 800fa10:	6849      	ldr	r1, [r1, #4]
 800fa12:	07c9      	lsls	r1, r1, #31
 800fa14:	d40b      	bmi.n	800fa2e <_free_r+0xae>
 800fa16:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800fa1a:	4430      	add	r0, r6
 800fa1c:	bb3a      	cbnz	r2, 800fa6e <_free_r+0xee>
 800fa1e:	4e37      	ldr	r6, [pc, #220]	@ (800fafc <_free_r+0x17c>)
 800fa20:	42b1      	cmp	r1, r6
 800fa22:	d124      	bne.n	800fa6e <_free_r+0xee>
 800fa24:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800fa28:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f040 0101 	orr.w	r1, r0, #1
 800fa32:	6059      	str	r1, [r3, #4]
 800fa34:	5018      	str	r0, [r3, r0]
 800fa36:	2a00      	cmp	r2, #0
 800fa38:	d1d3      	bne.n	800f9e2 <_free_r+0x62>
 800fa3a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800fa3e:	d21b      	bcs.n	800fa78 <_free_r+0xf8>
 800fa40:	08c2      	lsrs	r2, r0, #3
 800fa42:	2101      	movs	r1, #1
 800fa44:	0940      	lsrs	r0, r0, #5
 800fa46:	4081      	lsls	r1, r0
 800fa48:	6868      	ldr	r0, [r5, #4]
 800fa4a:	3201      	adds	r2, #1
 800fa4c:	4301      	orrs	r1, r0
 800fa4e:	6069      	str	r1, [r5, #4]
 800fa50:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800fa54:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800fa58:	3908      	subs	r1, #8
 800fa5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fa5e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800fa62:	60c3      	str	r3, [r0, #12]
 800fa64:	e7bd      	b.n	800f9e2 <_free_r+0x62>
 800fa66:	2200      	movs	r2, #0
 800fa68:	e7d0      	b.n	800fa0c <_free_r+0x8c>
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	e7ce      	b.n	800fa0c <_free_r+0x8c>
 800fa6e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800fa72:	60ce      	str	r6, [r1, #12]
 800fa74:	60b1      	str	r1, [r6, #8]
 800fa76:	e7da      	b.n	800fa2e <_free_r+0xae>
 800fa78:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800fa7c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800fa80:	d214      	bcs.n	800faac <_free_r+0x12c>
 800fa82:	0982      	lsrs	r2, r0, #6
 800fa84:	3238      	adds	r2, #56	@ 0x38
 800fa86:	1c51      	adds	r1, r2, #1
 800fa88:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800fa8c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800fa90:	428e      	cmp	r6, r1
 800fa92:	d125      	bne.n	800fae0 <_free_r+0x160>
 800fa94:	2001      	movs	r0, #1
 800fa96:	1092      	asrs	r2, r2, #2
 800fa98:	fa00 f202 	lsl.w	r2, r0, r2
 800fa9c:	6868      	ldr	r0, [r5, #4]
 800fa9e:	4302      	orrs	r2, r0
 800faa0:	606a      	str	r2, [r5, #4]
 800faa2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800faa6:	60b3      	str	r3, [r6, #8]
 800faa8:	60cb      	str	r3, [r1, #12]
 800faaa:	e79a      	b.n	800f9e2 <_free_r+0x62>
 800faac:	2a14      	cmp	r2, #20
 800faae:	d801      	bhi.n	800fab4 <_free_r+0x134>
 800fab0:	325b      	adds	r2, #91	@ 0x5b
 800fab2:	e7e8      	b.n	800fa86 <_free_r+0x106>
 800fab4:	2a54      	cmp	r2, #84	@ 0x54
 800fab6:	d802      	bhi.n	800fabe <_free_r+0x13e>
 800fab8:	0b02      	lsrs	r2, r0, #12
 800faba:	326e      	adds	r2, #110	@ 0x6e
 800fabc:	e7e3      	b.n	800fa86 <_free_r+0x106>
 800fabe:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800fac2:	d802      	bhi.n	800faca <_free_r+0x14a>
 800fac4:	0bc2      	lsrs	r2, r0, #15
 800fac6:	3277      	adds	r2, #119	@ 0x77
 800fac8:	e7dd      	b.n	800fa86 <_free_r+0x106>
 800faca:	f240 5154 	movw	r1, #1364	@ 0x554
 800face:	428a      	cmp	r2, r1
 800fad0:	bf9a      	itte	ls
 800fad2:	0c82      	lsrls	r2, r0, #18
 800fad4:	327c      	addls	r2, #124	@ 0x7c
 800fad6:	227e      	movhi	r2, #126	@ 0x7e
 800fad8:	e7d5      	b.n	800fa86 <_free_r+0x106>
 800fada:	6889      	ldr	r1, [r1, #8]
 800fadc:	428e      	cmp	r6, r1
 800fade:	d004      	beq.n	800faea <_free_r+0x16a>
 800fae0:	684a      	ldr	r2, [r1, #4]
 800fae2:	f022 0203 	bic.w	r2, r2, #3
 800fae6:	4282      	cmp	r2, r0
 800fae8:	d8f7      	bhi.n	800fada <_free_r+0x15a>
 800faea:	68ce      	ldr	r6, [r1, #12]
 800faec:	e7d9      	b.n	800faa2 <_free_r+0x122>
 800faee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf0:	240003b4 	.word	0x240003b4
 800faf4:	240003b0 	.word	0x240003b0
 800faf8:	24015378 	.word	0x24015378
 800fafc:	240003bc 	.word	0x240003bc

0800fb00 <_malloc_r>:
 800fb00:	f101 030b 	add.w	r3, r1, #11
 800fb04:	2b16      	cmp	r3, #22
 800fb06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	d906      	bls.n	800fb1c <_malloc_r+0x1c>
 800fb0e:	f033 0707 	bics.w	r7, r3, #7
 800fb12:	d504      	bpl.n	800fb1e <_malloc_r+0x1e>
 800fb14:	230c      	movs	r3, #12
 800fb16:	602b      	str	r3, [r5, #0]
 800fb18:	2400      	movs	r4, #0
 800fb1a:	e1a3      	b.n	800fe64 <_malloc_r+0x364>
 800fb1c:	2710      	movs	r7, #16
 800fb1e:	42b9      	cmp	r1, r7
 800fb20:	d8f8      	bhi.n	800fb14 <_malloc_r+0x14>
 800fb22:	4628      	mov	r0, r5
 800fb24:	f000 fa26 	bl	800ff74 <__malloc_lock>
 800fb28:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800fb2c:	4eaf      	ldr	r6, [pc, #700]	@ (800fdec <_malloc_r+0x2ec>)
 800fb2e:	d237      	bcs.n	800fba0 <_malloc_r+0xa0>
 800fb30:	f107 0208 	add.w	r2, r7, #8
 800fb34:	4432      	add	r2, r6
 800fb36:	f1a2 0108 	sub.w	r1, r2, #8
 800fb3a:	6854      	ldr	r4, [r2, #4]
 800fb3c:	428c      	cmp	r4, r1
 800fb3e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800fb42:	d102      	bne.n	800fb4a <_malloc_r+0x4a>
 800fb44:	68d4      	ldr	r4, [r2, #12]
 800fb46:	42a2      	cmp	r2, r4
 800fb48:	d010      	beq.n	800fb6c <_malloc_r+0x6c>
 800fb4a:	6863      	ldr	r3, [r4, #4]
 800fb4c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800fb50:	f023 0303 	bic.w	r3, r3, #3
 800fb54:	60ca      	str	r2, [r1, #12]
 800fb56:	4423      	add	r3, r4
 800fb58:	6091      	str	r1, [r2, #8]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	f042 0201 	orr.w	r2, r2, #1
 800fb60:	605a      	str	r2, [r3, #4]
 800fb62:	4628      	mov	r0, r5
 800fb64:	f000 fa0c 	bl	800ff80 <__malloc_unlock>
 800fb68:	3408      	adds	r4, #8
 800fb6a:	e17b      	b.n	800fe64 <_malloc_r+0x364>
 800fb6c:	3302      	adds	r3, #2
 800fb6e:	6934      	ldr	r4, [r6, #16]
 800fb70:	499f      	ldr	r1, [pc, #636]	@ (800fdf0 <_malloc_r+0x2f0>)
 800fb72:	428c      	cmp	r4, r1
 800fb74:	d077      	beq.n	800fc66 <_malloc_r+0x166>
 800fb76:	6862      	ldr	r2, [r4, #4]
 800fb78:	f022 0c03 	bic.w	ip, r2, #3
 800fb7c:	ebac 0007 	sub.w	r0, ip, r7
 800fb80:	280f      	cmp	r0, #15
 800fb82:	dd48      	ble.n	800fc16 <_malloc_r+0x116>
 800fb84:	19e2      	adds	r2, r4, r7
 800fb86:	f040 0301 	orr.w	r3, r0, #1
 800fb8a:	f047 0701 	orr.w	r7, r7, #1
 800fb8e:	6067      	str	r7, [r4, #4]
 800fb90:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800fb94:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800fb98:	6053      	str	r3, [r2, #4]
 800fb9a:	f844 000c 	str.w	r0, [r4, ip]
 800fb9e:	e7e0      	b.n	800fb62 <_malloc_r+0x62>
 800fba0:	0a7b      	lsrs	r3, r7, #9
 800fba2:	d02a      	beq.n	800fbfa <_malloc_r+0xfa>
 800fba4:	2b04      	cmp	r3, #4
 800fba6:	d812      	bhi.n	800fbce <_malloc_r+0xce>
 800fba8:	09bb      	lsrs	r3, r7, #6
 800fbaa:	3338      	adds	r3, #56	@ 0x38
 800fbac:	1c5a      	adds	r2, r3, #1
 800fbae:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800fbb2:	f1a2 0c08 	sub.w	ip, r2, #8
 800fbb6:	6854      	ldr	r4, [r2, #4]
 800fbb8:	4564      	cmp	r4, ip
 800fbba:	d006      	beq.n	800fbca <_malloc_r+0xca>
 800fbbc:	6862      	ldr	r2, [r4, #4]
 800fbbe:	f022 0203 	bic.w	r2, r2, #3
 800fbc2:	1bd0      	subs	r0, r2, r7
 800fbc4:	280f      	cmp	r0, #15
 800fbc6:	dd1c      	ble.n	800fc02 <_malloc_r+0x102>
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	3301      	adds	r3, #1
 800fbcc:	e7cf      	b.n	800fb6e <_malloc_r+0x6e>
 800fbce:	2b14      	cmp	r3, #20
 800fbd0:	d801      	bhi.n	800fbd6 <_malloc_r+0xd6>
 800fbd2:	335b      	adds	r3, #91	@ 0x5b
 800fbd4:	e7ea      	b.n	800fbac <_malloc_r+0xac>
 800fbd6:	2b54      	cmp	r3, #84	@ 0x54
 800fbd8:	d802      	bhi.n	800fbe0 <_malloc_r+0xe0>
 800fbda:	0b3b      	lsrs	r3, r7, #12
 800fbdc:	336e      	adds	r3, #110	@ 0x6e
 800fbde:	e7e5      	b.n	800fbac <_malloc_r+0xac>
 800fbe0:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800fbe4:	d802      	bhi.n	800fbec <_malloc_r+0xec>
 800fbe6:	0bfb      	lsrs	r3, r7, #15
 800fbe8:	3377      	adds	r3, #119	@ 0x77
 800fbea:	e7df      	b.n	800fbac <_malloc_r+0xac>
 800fbec:	f240 5254 	movw	r2, #1364	@ 0x554
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d804      	bhi.n	800fbfe <_malloc_r+0xfe>
 800fbf4:	0cbb      	lsrs	r3, r7, #18
 800fbf6:	337c      	adds	r3, #124	@ 0x7c
 800fbf8:	e7d8      	b.n	800fbac <_malloc_r+0xac>
 800fbfa:	233f      	movs	r3, #63	@ 0x3f
 800fbfc:	e7d6      	b.n	800fbac <_malloc_r+0xac>
 800fbfe:	237e      	movs	r3, #126	@ 0x7e
 800fc00:	e7d4      	b.n	800fbac <_malloc_r+0xac>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	68e1      	ldr	r1, [r4, #12]
 800fc06:	db04      	blt.n	800fc12 <_malloc_r+0x112>
 800fc08:	68a3      	ldr	r3, [r4, #8]
 800fc0a:	60d9      	str	r1, [r3, #12]
 800fc0c:	608b      	str	r3, [r1, #8]
 800fc0e:	18a3      	adds	r3, r4, r2
 800fc10:	e7a3      	b.n	800fb5a <_malloc_r+0x5a>
 800fc12:	460c      	mov	r4, r1
 800fc14:	e7d0      	b.n	800fbb8 <_malloc_r+0xb8>
 800fc16:	2800      	cmp	r0, #0
 800fc18:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800fc1c:	db07      	blt.n	800fc2e <_malloc_r+0x12e>
 800fc1e:	44a4      	add	ip, r4
 800fc20:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800fc24:	f043 0301 	orr.w	r3, r3, #1
 800fc28:	f8cc 3004 	str.w	r3, [ip, #4]
 800fc2c:	e799      	b.n	800fb62 <_malloc_r+0x62>
 800fc2e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800fc32:	6870      	ldr	r0, [r6, #4]
 800fc34:	f080 8095 	bcs.w	800fd62 <_malloc_r+0x262>
 800fc38:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800fc3c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800fc40:	f04f 0c01 	mov.w	ip, #1
 800fc44:	3201      	adds	r2, #1
 800fc46:	fa0c fc0e 	lsl.w	ip, ip, lr
 800fc4a:	ea4c 0000 	orr.w	r0, ip, r0
 800fc4e:	6070      	str	r0, [r6, #4]
 800fc50:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800fc54:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800fc58:	3808      	subs	r0, #8
 800fc5a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800fc5e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800fc62:	f8cc 400c 	str.w	r4, [ip, #12]
 800fc66:	1098      	asrs	r0, r3, #2
 800fc68:	2201      	movs	r2, #1
 800fc6a:	4082      	lsls	r2, r0
 800fc6c:	6870      	ldr	r0, [r6, #4]
 800fc6e:	4290      	cmp	r0, r2
 800fc70:	d326      	bcc.n	800fcc0 <_malloc_r+0x1c0>
 800fc72:	4210      	tst	r0, r2
 800fc74:	d106      	bne.n	800fc84 <_malloc_r+0x184>
 800fc76:	f023 0303 	bic.w	r3, r3, #3
 800fc7a:	0052      	lsls	r2, r2, #1
 800fc7c:	4210      	tst	r0, r2
 800fc7e:	f103 0304 	add.w	r3, r3, #4
 800fc82:	d0fa      	beq.n	800fc7a <_malloc_r+0x17a>
 800fc84:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800fc88:	46c1      	mov	r9, r8
 800fc8a:	469e      	mov	lr, r3
 800fc8c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800fc90:	454c      	cmp	r4, r9
 800fc92:	f040 80b9 	bne.w	800fe08 <_malloc_r+0x308>
 800fc96:	f10e 0e01 	add.w	lr, lr, #1
 800fc9a:	f01e 0f03 	tst.w	lr, #3
 800fc9e:	f109 0908 	add.w	r9, r9, #8
 800fca2:	d1f3      	bne.n	800fc8c <_malloc_r+0x18c>
 800fca4:	0798      	lsls	r0, r3, #30
 800fca6:	f040 80e3 	bne.w	800fe70 <_malloc_r+0x370>
 800fcaa:	6873      	ldr	r3, [r6, #4]
 800fcac:	ea23 0302 	bic.w	r3, r3, r2
 800fcb0:	6073      	str	r3, [r6, #4]
 800fcb2:	6870      	ldr	r0, [r6, #4]
 800fcb4:	0052      	lsls	r2, r2, #1
 800fcb6:	4290      	cmp	r0, r2
 800fcb8:	d302      	bcc.n	800fcc0 <_malloc_r+0x1c0>
 800fcba:	2a00      	cmp	r2, #0
 800fcbc:	f040 80e5 	bne.w	800fe8a <_malloc_r+0x38a>
 800fcc0:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800fcc4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fcc8:	f023 0903 	bic.w	r9, r3, #3
 800fccc:	45b9      	cmp	r9, r7
 800fcce:	d304      	bcc.n	800fcda <_malloc_r+0x1da>
 800fcd0:	eba9 0207 	sub.w	r2, r9, r7
 800fcd4:	2a0f      	cmp	r2, #15
 800fcd6:	f300 8141 	bgt.w	800ff5c <_malloc_r+0x45c>
 800fcda:	4b46      	ldr	r3, [pc, #280]	@ (800fdf4 <_malloc_r+0x2f4>)
 800fcdc:	6819      	ldr	r1, [r3, #0]
 800fcde:	3110      	adds	r1, #16
 800fce0:	4439      	add	r1, r7
 800fce2:	2008      	movs	r0, #8
 800fce4:	9101      	str	r1, [sp, #4]
 800fce6:	f001 fc15 	bl	8011514 <sysconf>
 800fcea:	4a43      	ldr	r2, [pc, #268]	@ (800fdf8 <_malloc_r+0x2f8>)
 800fcec:	9901      	ldr	r1, [sp, #4]
 800fcee:	6813      	ldr	r3, [r2, #0]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	bf1f      	itttt	ne
 800fcf4:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800fcf8:	1809      	addne	r1, r1, r0
 800fcfa:	4243      	negne	r3, r0
 800fcfc:	4019      	andne	r1, r3
 800fcfe:	4680      	mov	r8, r0
 800fd00:	4628      	mov	r0, r5
 800fd02:	9101      	str	r1, [sp, #4]
 800fd04:	f001 fbe2 	bl	80114cc <_sbrk_r>
 800fd08:	1c42      	adds	r2, r0, #1
 800fd0a:	eb0a 0b09 	add.w	fp, sl, r9
 800fd0e:	4604      	mov	r4, r0
 800fd10:	f000 80f7 	beq.w	800ff02 <_malloc_r+0x402>
 800fd14:	4583      	cmp	fp, r0
 800fd16:	9901      	ldr	r1, [sp, #4]
 800fd18:	4a37      	ldr	r2, [pc, #220]	@ (800fdf8 <_malloc_r+0x2f8>)
 800fd1a:	d902      	bls.n	800fd22 <_malloc_r+0x222>
 800fd1c:	45b2      	cmp	sl, r6
 800fd1e:	f040 80f0 	bne.w	800ff02 <_malloc_r+0x402>
 800fd22:	4b36      	ldr	r3, [pc, #216]	@ (800fdfc <_malloc_r+0x2fc>)
 800fd24:	6818      	ldr	r0, [r3, #0]
 800fd26:	45a3      	cmp	fp, r4
 800fd28:	eb00 0e01 	add.w	lr, r0, r1
 800fd2c:	f8c3 e000 	str.w	lr, [r3]
 800fd30:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800fd34:	f040 80ab 	bne.w	800fe8e <_malloc_r+0x38e>
 800fd38:	ea1b 0f0c 	tst.w	fp, ip
 800fd3c:	f040 80a7 	bne.w	800fe8e <_malloc_r+0x38e>
 800fd40:	68b2      	ldr	r2, [r6, #8]
 800fd42:	4449      	add	r1, r9
 800fd44:	f041 0101 	orr.w	r1, r1, #1
 800fd48:	6051      	str	r1, [r2, #4]
 800fd4a:	4a2d      	ldr	r2, [pc, #180]	@ (800fe00 <_malloc_r+0x300>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6811      	ldr	r1, [r2, #0]
 800fd50:	428b      	cmp	r3, r1
 800fd52:	bf88      	it	hi
 800fd54:	6013      	strhi	r3, [r2, #0]
 800fd56:	4a2b      	ldr	r2, [pc, #172]	@ (800fe04 <_malloc_r+0x304>)
 800fd58:	6811      	ldr	r1, [r2, #0]
 800fd5a:	428b      	cmp	r3, r1
 800fd5c:	bf88      	it	hi
 800fd5e:	6013      	strhi	r3, [r2, #0]
 800fd60:	e0cf      	b.n	800ff02 <_malloc_r+0x402>
 800fd62:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800fd66:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800fd6a:	d218      	bcs.n	800fd9e <_malloc_r+0x29e>
 800fd6c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800fd70:	3238      	adds	r2, #56	@ 0x38
 800fd72:	f102 0e01 	add.w	lr, r2, #1
 800fd76:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800fd7a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800fd7e:	45f0      	cmp	r8, lr
 800fd80:	d12b      	bne.n	800fdda <_malloc_r+0x2da>
 800fd82:	1092      	asrs	r2, r2, #2
 800fd84:	f04f 0c01 	mov.w	ip, #1
 800fd88:	fa0c f202 	lsl.w	r2, ip, r2
 800fd8c:	4302      	orrs	r2, r0
 800fd8e:	6072      	str	r2, [r6, #4]
 800fd90:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800fd94:	f8c8 4008 	str.w	r4, [r8, #8]
 800fd98:	f8ce 400c 	str.w	r4, [lr, #12]
 800fd9c:	e763      	b.n	800fc66 <_malloc_r+0x166>
 800fd9e:	2a14      	cmp	r2, #20
 800fda0:	d801      	bhi.n	800fda6 <_malloc_r+0x2a6>
 800fda2:	325b      	adds	r2, #91	@ 0x5b
 800fda4:	e7e5      	b.n	800fd72 <_malloc_r+0x272>
 800fda6:	2a54      	cmp	r2, #84	@ 0x54
 800fda8:	d803      	bhi.n	800fdb2 <_malloc_r+0x2b2>
 800fdaa:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800fdae:	326e      	adds	r2, #110	@ 0x6e
 800fdb0:	e7df      	b.n	800fd72 <_malloc_r+0x272>
 800fdb2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800fdb6:	d803      	bhi.n	800fdc0 <_malloc_r+0x2c0>
 800fdb8:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800fdbc:	3277      	adds	r2, #119	@ 0x77
 800fdbe:	e7d8      	b.n	800fd72 <_malloc_r+0x272>
 800fdc0:	f240 5e54 	movw	lr, #1364	@ 0x554
 800fdc4:	4572      	cmp	r2, lr
 800fdc6:	bf9a      	itte	ls
 800fdc8:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800fdcc:	327c      	addls	r2, #124	@ 0x7c
 800fdce:	227e      	movhi	r2, #126	@ 0x7e
 800fdd0:	e7cf      	b.n	800fd72 <_malloc_r+0x272>
 800fdd2:	f8de e008 	ldr.w	lr, [lr, #8]
 800fdd6:	45f0      	cmp	r8, lr
 800fdd8:	d005      	beq.n	800fde6 <_malloc_r+0x2e6>
 800fdda:	f8de 2004 	ldr.w	r2, [lr, #4]
 800fdde:	f022 0203 	bic.w	r2, r2, #3
 800fde2:	4562      	cmp	r2, ip
 800fde4:	d8f5      	bhi.n	800fdd2 <_malloc_r+0x2d2>
 800fde6:	f8de 800c 	ldr.w	r8, [lr, #12]
 800fdea:	e7d1      	b.n	800fd90 <_malloc_r+0x290>
 800fdec:	240003b4 	.word	0x240003b4
 800fdf0:	240003bc 	.word	0x240003bc
 800fdf4:	24015378 	.word	0x24015378
 800fdf8:	240003ac 	.word	0x240003ac
 800fdfc:	24015348 	.word	0x24015348
 800fe00:	24015374 	.word	0x24015374
 800fe04:	24015370 	.word	0x24015370
 800fe08:	6860      	ldr	r0, [r4, #4]
 800fe0a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800fe0e:	f020 0003 	bic.w	r0, r0, #3
 800fe12:	eba0 0a07 	sub.w	sl, r0, r7
 800fe16:	f1ba 0f0f 	cmp.w	sl, #15
 800fe1a:	dd12      	ble.n	800fe42 <_malloc_r+0x342>
 800fe1c:	68a3      	ldr	r3, [r4, #8]
 800fe1e:	19e2      	adds	r2, r4, r7
 800fe20:	f047 0701 	orr.w	r7, r7, #1
 800fe24:	6067      	str	r7, [r4, #4]
 800fe26:	f8c3 c00c 	str.w	ip, [r3, #12]
 800fe2a:	f8cc 3008 	str.w	r3, [ip, #8]
 800fe2e:	f04a 0301 	orr.w	r3, sl, #1
 800fe32:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800fe36:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800fe3a:	6053      	str	r3, [r2, #4]
 800fe3c:	f844 a000 	str.w	sl, [r4, r0]
 800fe40:	e68f      	b.n	800fb62 <_malloc_r+0x62>
 800fe42:	f1ba 0f00 	cmp.w	sl, #0
 800fe46:	db11      	blt.n	800fe6c <_malloc_r+0x36c>
 800fe48:	4420      	add	r0, r4
 800fe4a:	6843      	ldr	r3, [r0, #4]
 800fe4c:	f043 0301 	orr.w	r3, r3, #1
 800fe50:	6043      	str	r3, [r0, #4]
 800fe52:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800fe56:	4628      	mov	r0, r5
 800fe58:	f8c3 c00c 	str.w	ip, [r3, #12]
 800fe5c:	f8cc 3008 	str.w	r3, [ip, #8]
 800fe60:	f000 f88e 	bl	800ff80 <__malloc_unlock>
 800fe64:	4620      	mov	r0, r4
 800fe66:	b003      	add	sp, #12
 800fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6c:	4664      	mov	r4, ip
 800fe6e:	e70f      	b.n	800fc90 <_malloc_r+0x190>
 800fe70:	f858 0908 	ldr.w	r0, [r8], #-8
 800fe74:	4540      	cmp	r0, r8
 800fe76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800fe7a:	f43f af13 	beq.w	800fca4 <_malloc_r+0x1a4>
 800fe7e:	e718      	b.n	800fcb2 <_malloc_r+0x1b2>
 800fe80:	3304      	adds	r3, #4
 800fe82:	0052      	lsls	r2, r2, #1
 800fe84:	4210      	tst	r0, r2
 800fe86:	d0fb      	beq.n	800fe80 <_malloc_r+0x380>
 800fe88:	e6fc      	b.n	800fc84 <_malloc_r+0x184>
 800fe8a:	4673      	mov	r3, lr
 800fe8c:	e7fa      	b.n	800fe84 <_malloc_r+0x384>
 800fe8e:	6810      	ldr	r0, [r2, #0]
 800fe90:	3001      	adds	r0, #1
 800fe92:	bf1b      	ittet	ne
 800fe94:	eba4 0b0b 	subne.w	fp, r4, fp
 800fe98:	eb0b 020e 	addne.w	r2, fp, lr
 800fe9c:	6014      	streq	r4, [r2, #0]
 800fe9e:	601a      	strne	r2, [r3, #0]
 800fea0:	f014 0b07 	ands.w	fp, r4, #7
 800fea4:	bf1a      	itte	ne
 800fea6:	f1cb 0008 	rsbne	r0, fp, #8
 800feaa:	1824      	addne	r4, r4, r0
 800feac:	4658      	moveq	r0, fp
 800feae:	1862      	adds	r2, r4, r1
 800feb0:	ea02 010c 	and.w	r1, r2, ip
 800feb4:	4480      	add	r8, r0
 800feb6:	eba8 0801 	sub.w	r8, r8, r1
 800feba:	ea08 080c 	and.w	r8, r8, ip
 800febe:	4641      	mov	r1, r8
 800fec0:	4628      	mov	r0, r5
 800fec2:	9201      	str	r2, [sp, #4]
 800fec4:	f001 fb02 	bl	80114cc <_sbrk_r>
 800fec8:	1c43      	adds	r3, r0, #1
 800feca:	9a01      	ldr	r2, [sp, #4]
 800fecc:	4b28      	ldr	r3, [pc, #160]	@ (800ff70 <_malloc_r+0x470>)
 800fece:	d107      	bne.n	800fee0 <_malloc_r+0x3e0>
 800fed0:	f1bb 0f00 	cmp.w	fp, #0
 800fed4:	d023      	beq.n	800ff1e <_malloc_r+0x41e>
 800fed6:	f1ab 0008 	sub.w	r0, fp, #8
 800feda:	4410      	add	r0, r2
 800fedc:	f04f 0800 	mov.w	r8, #0
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	60b4      	str	r4, [r6, #8]
 800fee4:	1b00      	subs	r0, r0, r4
 800fee6:	4440      	add	r0, r8
 800fee8:	4442      	add	r2, r8
 800feea:	f040 0001 	orr.w	r0, r0, #1
 800feee:	45b2      	cmp	sl, r6
 800fef0:	601a      	str	r2, [r3, #0]
 800fef2:	6060      	str	r0, [r4, #4]
 800fef4:	f43f af29 	beq.w	800fd4a <_malloc_r+0x24a>
 800fef8:	f1b9 0f0f 	cmp.w	r9, #15
 800fefc:	d812      	bhi.n	800ff24 <_malloc_r+0x424>
 800fefe:	2301      	movs	r3, #1
 800ff00:	6063      	str	r3, [r4, #4]
 800ff02:	68b3      	ldr	r3, [r6, #8]
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	f023 0303 	bic.w	r3, r3, #3
 800ff0a:	42bb      	cmp	r3, r7
 800ff0c:	eba3 0207 	sub.w	r2, r3, r7
 800ff10:	d301      	bcc.n	800ff16 <_malloc_r+0x416>
 800ff12:	2a0f      	cmp	r2, #15
 800ff14:	dc22      	bgt.n	800ff5c <_malloc_r+0x45c>
 800ff16:	4628      	mov	r0, r5
 800ff18:	f000 f832 	bl	800ff80 <__malloc_unlock>
 800ff1c:	e5fc      	b.n	800fb18 <_malloc_r+0x18>
 800ff1e:	4610      	mov	r0, r2
 800ff20:	46d8      	mov	r8, fp
 800ff22:	e7dd      	b.n	800fee0 <_malloc_r+0x3e0>
 800ff24:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ff28:	f1a9 090c 	sub.w	r9, r9, #12
 800ff2c:	f029 0907 	bic.w	r9, r9, #7
 800ff30:	f002 0201 	and.w	r2, r2, #1
 800ff34:	ea42 0209 	orr.w	r2, r2, r9
 800ff38:	f8ca 2004 	str.w	r2, [sl, #4]
 800ff3c:	2105      	movs	r1, #5
 800ff3e:	eb0a 0209 	add.w	r2, sl, r9
 800ff42:	f1b9 0f0f 	cmp.w	r9, #15
 800ff46:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800ff4a:	f67f aefe 	bls.w	800fd4a <_malloc_r+0x24a>
 800ff4e:	f10a 0108 	add.w	r1, sl, #8
 800ff52:	4628      	mov	r0, r5
 800ff54:	f7ff fd14 	bl	800f980 <_free_r>
 800ff58:	4b05      	ldr	r3, [pc, #20]	@ (800ff70 <_malloc_r+0x470>)
 800ff5a:	e6f6      	b.n	800fd4a <_malloc_r+0x24a>
 800ff5c:	68b4      	ldr	r4, [r6, #8]
 800ff5e:	f047 0301 	orr.w	r3, r7, #1
 800ff62:	4427      	add	r7, r4
 800ff64:	f042 0201 	orr.w	r2, r2, #1
 800ff68:	6063      	str	r3, [r4, #4]
 800ff6a:	60b7      	str	r7, [r6, #8]
 800ff6c:	607a      	str	r2, [r7, #4]
 800ff6e:	e5f8      	b.n	800fb62 <_malloc_r+0x62>
 800ff70:	24015348 	.word	0x24015348

0800ff74 <__malloc_lock>:
 800ff74:	4801      	ldr	r0, [pc, #4]	@ (800ff7c <__malloc_lock+0x8>)
 800ff76:	f7ff bc8d 	b.w	800f894 <__retarget_lock_acquire_recursive>
 800ff7a:	bf00      	nop
 800ff7c:	24015340 	.word	0x24015340

0800ff80 <__malloc_unlock>:
 800ff80:	4801      	ldr	r0, [pc, #4]	@ (800ff88 <__malloc_unlock+0x8>)
 800ff82:	f7ff bc88 	b.w	800f896 <__retarget_lock_release_recursive>
 800ff86:	bf00      	nop
 800ff88:	24015340 	.word	0x24015340
 800ff8c:	00000000 	.word	0x00000000

0800ff90 <_svfprintf_r>:
 800ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff94:	ed2d 8b04 	vpush	{d8-d9}
 800ff98:	b0cb      	sub	sp, #300	@ 0x12c
 800ff9a:	468a      	mov	sl, r1
 800ff9c:	4691      	mov	r9, r2
 800ff9e:	461e      	mov	r6, r3
 800ffa0:	9002      	str	r0, [sp, #8]
 800ffa2:	f001 fa8f 	bl	80114c4 <_localeconv_r>
 800ffa6:	6803      	ldr	r3, [r0, #0]
 800ffa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7f0 f9e8 	bl	8000380 <strlen>
 800ffb0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800ffb4:	9009      	str	r0, [sp, #36]	@ 0x24
 800ffb6:	061c      	lsls	r4, r3, #24
 800ffb8:	d515      	bpl.n	800ffe6 <_svfprintf_r+0x56>
 800ffba:	f8da 3010 	ldr.w	r3, [sl, #16]
 800ffbe:	b993      	cbnz	r3, 800ffe6 <_svfprintf_r+0x56>
 800ffc0:	9802      	ldr	r0, [sp, #8]
 800ffc2:	2140      	movs	r1, #64	@ 0x40
 800ffc4:	f7ff fd9c 	bl	800fb00 <_malloc_r>
 800ffc8:	f8ca 0000 	str.w	r0, [sl]
 800ffcc:	f8ca 0010 	str.w	r0, [sl, #16]
 800ffd0:	b930      	cbnz	r0, 800ffe0 <_svfprintf_r+0x50>
 800ffd2:	9a02      	ldr	r2, [sp, #8]
 800ffd4:	230c      	movs	r3, #12
 800ffd6:	6013      	str	r3, [r2, #0]
 800ffd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ffdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ffde:	e1e1      	b.n	80103a4 <_svfprintf_r+0x414>
 800ffe0:	2340      	movs	r3, #64	@ 0x40
 800ffe2:	f8ca 3014 	str.w	r3, [sl, #20]
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 800ffec:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 8010248 <_svfprintf_r+0x2b8>
 800fff0:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 800fff4:	ac21      	add	r4, sp, #132	@ 0x84
 800fff6:	941e      	str	r4, [sp, #120]	@ 0x78
 800fff8:	9303      	str	r3, [sp, #12]
 800fffa:	9307      	str	r3, [sp, #28]
 800fffc:	930e      	str	r3, [sp, #56]	@ 0x38
 800fffe:	9310      	str	r3, [sp, #64]	@ 0x40
 8010000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010002:	464b      	mov	r3, r9
 8010004:	461d      	mov	r5, r3
 8010006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801000a:	b10a      	cbz	r2, 8010010 <_svfprintf_r+0x80>
 801000c:	2a25      	cmp	r2, #37	@ 0x25
 801000e:	d1f9      	bne.n	8010004 <_svfprintf_r+0x74>
 8010010:	ebb5 0709 	subs.w	r7, r5, r9
 8010014:	d00d      	beq.n	8010032 <_svfprintf_r+0xa2>
 8010016:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010018:	443b      	add	r3, r7
 801001a:	9320      	str	r3, [sp, #128]	@ 0x80
 801001c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801001e:	3301      	adds	r3, #1
 8010020:	2b07      	cmp	r3, #7
 8010022:	e9c4 9700 	strd	r9, r7, [r4]
 8010026:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010028:	dc75      	bgt.n	8010116 <_svfprintf_r+0x186>
 801002a:	3408      	adds	r4, #8
 801002c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801002e:	443b      	add	r3, r7
 8010030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010032:	782b      	ldrb	r3, [r5, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	f001 80ee 	beq.w	8011216 <_svfprintf_r+0x1286>
 801003a:	2200      	movs	r2, #0
 801003c:	1c6b      	adds	r3, r5, #1
 801003e:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8010042:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010046:	920a      	str	r2, [sp, #40]	@ 0x28
 8010048:	4615      	mov	r5, r2
 801004a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801004e:	9204      	str	r2, [sp, #16]
 8010050:	9308      	str	r3, [sp, #32]
 8010052:	9b04      	ldr	r3, [sp, #16]
 8010054:	3b20      	subs	r3, #32
 8010056:	2b5a      	cmp	r3, #90	@ 0x5a
 8010058:	f200 8564 	bhi.w	8010b24 <_svfprintf_r+0xb94>
 801005c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010060:	0562009c 	.word	0x0562009c
 8010064:	00a40562 	.word	0x00a40562
 8010068:	05620562 	.word	0x05620562
 801006c:	00840562 	.word	0x00840562
 8010070:	05620562 	.word	0x05620562
 8010074:	00b100a7 	.word	0x00b100a7
 8010078:	00ae0562 	.word	0x00ae0562
 801007c:	056200b3 	.word	0x056200b3
 8010080:	00d000cd 	.word	0x00d000cd
 8010084:	00d000d0 	.word	0x00d000d0
 8010088:	00d000d0 	.word	0x00d000d0
 801008c:	00d000d0 	.word	0x00d000d0
 8010090:	00d000d0 	.word	0x00d000d0
 8010094:	05620562 	.word	0x05620562
 8010098:	05620562 	.word	0x05620562
 801009c:	05620562 	.word	0x05620562
 80100a0:	01460562 	.word	0x01460562
 80100a4:	01070562 	.word	0x01070562
 80100a8:	0146011a 	.word	0x0146011a
 80100ac:	01460146 	.word	0x01460146
 80100b0:	05620562 	.word	0x05620562
 80100b4:	05620562 	.word	0x05620562
 80100b8:	056200e1 	.word	0x056200e1
 80100bc:	045c0562 	.word	0x045c0562
 80100c0:	05620562 	.word	0x05620562
 80100c4:	04a60562 	.word	0x04a60562
 80100c8:	04c70562 	.word	0x04c70562
 80100cc:	05620562 	.word	0x05620562
 80100d0:	056204e9 	.word	0x056204e9
 80100d4:	05620562 	.word	0x05620562
 80100d8:	05620562 	.word	0x05620562
 80100dc:	05620562 	.word	0x05620562
 80100e0:	01460562 	.word	0x01460562
 80100e4:	01070562 	.word	0x01070562
 80100e8:	0146011c 	.word	0x0146011c
 80100ec:	01460146 	.word	0x01460146
 80100f0:	011c00e4 	.word	0x011c00e4
 80100f4:	05620101 	.word	0x05620101
 80100f8:	056200fa 	.word	0x056200fa
 80100fc:	045e043d 	.word	0x045e043d
 8010100:	01010495 	.word	0x01010495
 8010104:	04a60562 	.word	0x04a60562
 8010108:	04c9009a 	.word	0x04c9009a
 801010c:	05620562 	.word	0x05620562
 8010110:	05620065 	.word	0x05620065
 8010114:	009a      	.short	0x009a
 8010116:	9802      	ldr	r0, [sp, #8]
 8010118:	aa1e      	add	r2, sp, #120	@ 0x78
 801011a:	4651      	mov	r1, sl
 801011c:	f002 fb7a 	bl	8012814 <__ssprint_r>
 8010120:	2800      	cmp	r0, #0
 8010122:	f040 813a 	bne.w	801039a <_svfprintf_r+0x40a>
 8010126:	ac21      	add	r4, sp, #132	@ 0x84
 8010128:	e780      	b.n	801002c <_svfprintf_r+0x9c>
 801012a:	4b49      	ldr	r3, [pc, #292]	@ (8010250 <_svfprintf_r+0x2c0>)
 801012c:	9312      	str	r3, [sp, #72]	@ 0x48
 801012e:	f015 0320 	ands.w	r3, r5, #32
 8010132:	f000 8481 	beq.w	8010a38 <_svfprintf_r+0xaa8>
 8010136:	3607      	adds	r6, #7
 8010138:	f026 0307 	bic.w	r3, r6, #7
 801013c:	461a      	mov	r2, r3
 801013e:	685f      	ldr	r7, [r3, #4]
 8010140:	f852 6b08 	ldr.w	r6, [r2], #8
 8010144:	9205      	str	r2, [sp, #20]
 8010146:	07eb      	lsls	r3, r5, #31
 8010148:	d50a      	bpl.n	8010160 <_svfprintf_r+0x1d0>
 801014a:	ea56 0307 	orrs.w	r3, r6, r7
 801014e:	d007      	beq.n	8010160 <_svfprintf_r+0x1d0>
 8010150:	2330      	movs	r3, #48	@ 0x30
 8010152:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8010156:	9b04      	ldr	r3, [sp, #16]
 8010158:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 801015c:	f045 0502 	orr.w	r5, r5, #2
 8010160:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010164:	2302      	movs	r3, #2
 8010166:	e3e7      	b.n	8010938 <_svfprintf_r+0x9a8>
 8010168:	9802      	ldr	r0, [sp, #8]
 801016a:	f001 f9ab 	bl	80114c4 <_localeconv_r>
 801016e:	6843      	ldr	r3, [r0, #4]
 8010170:	9310      	str	r3, [sp, #64]	@ 0x40
 8010172:	4618      	mov	r0, r3
 8010174:	f7f0 f904 	bl	8000380 <strlen>
 8010178:	900e      	str	r0, [sp, #56]	@ 0x38
 801017a:	9802      	ldr	r0, [sp, #8]
 801017c:	f001 f9a2 	bl	80114c4 <_localeconv_r>
 8010180:	6883      	ldr	r3, [r0, #8]
 8010182:	9307      	str	r3, [sp, #28]
 8010184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010186:	b12b      	cbz	r3, 8010194 <_svfprintf_r+0x204>
 8010188:	9b07      	ldr	r3, [sp, #28]
 801018a:	b11b      	cbz	r3, 8010194 <_svfprintf_r+0x204>
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	b10b      	cbz	r3, 8010194 <_svfprintf_r+0x204>
 8010190:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8010194:	9b08      	ldr	r3, [sp, #32]
 8010196:	e758      	b.n	801004a <_svfprintf_r+0xba>
 8010198:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 801019c:	2b00      	cmp	r3, #0
 801019e:	d1f9      	bne.n	8010194 <_svfprintf_r+0x204>
 80101a0:	2320      	movs	r3, #32
 80101a2:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80101a6:	e7f5      	b.n	8010194 <_svfprintf_r+0x204>
 80101a8:	f045 0501 	orr.w	r5, r5, #1
 80101ac:	e7f2      	b.n	8010194 <_svfprintf_r+0x204>
 80101ae:	f856 3b04 	ldr.w	r3, [r6], #4
 80101b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	daed      	bge.n	8010194 <_svfprintf_r+0x204>
 80101b8:	425b      	negs	r3, r3
 80101ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80101bc:	f045 0504 	orr.w	r5, r5, #4
 80101c0:	e7e8      	b.n	8010194 <_svfprintf_r+0x204>
 80101c2:	232b      	movs	r3, #43	@ 0x2b
 80101c4:	e7ed      	b.n	80101a2 <_svfprintf_r+0x212>
 80101c6:	9b08      	ldr	r3, [sp, #32]
 80101c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101cc:	9204      	str	r2, [sp, #16]
 80101ce:	2a2a      	cmp	r2, #42	@ 0x2a
 80101d0:	d10f      	bne.n	80101f2 <_svfprintf_r+0x262>
 80101d2:	f856 2b04 	ldr.w	r2, [r6], #4
 80101d6:	9308      	str	r3, [sp, #32]
 80101d8:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80101dc:	e7da      	b.n	8010194 <_svfprintf_r+0x204>
 80101de:	fb01 2808 	mla	r8, r1, r8, r2
 80101e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101e6:	9204      	str	r2, [sp, #16]
 80101e8:	9a04      	ldr	r2, [sp, #16]
 80101ea:	3a30      	subs	r2, #48	@ 0x30
 80101ec:	2a09      	cmp	r2, #9
 80101ee:	d9f6      	bls.n	80101de <_svfprintf_r+0x24e>
 80101f0:	e72e      	b.n	8010050 <_svfprintf_r+0xc0>
 80101f2:	f04f 0800 	mov.w	r8, #0
 80101f6:	210a      	movs	r1, #10
 80101f8:	e7f6      	b.n	80101e8 <_svfprintf_r+0x258>
 80101fa:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80101fe:	e7c9      	b.n	8010194 <_svfprintf_r+0x204>
 8010200:	2200      	movs	r2, #0
 8010202:	9b08      	ldr	r3, [sp, #32]
 8010204:	920a      	str	r2, [sp, #40]	@ 0x28
 8010206:	210a      	movs	r1, #10
 8010208:	9a04      	ldr	r2, [sp, #16]
 801020a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801020c:	3a30      	subs	r2, #48	@ 0x30
 801020e:	fb01 2200 	mla	r2, r1, r0, r2
 8010212:	920a      	str	r2, [sp, #40]	@ 0x28
 8010214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010218:	9204      	str	r2, [sp, #16]
 801021a:	3a30      	subs	r2, #48	@ 0x30
 801021c:	2a09      	cmp	r2, #9
 801021e:	d9f3      	bls.n	8010208 <_svfprintf_r+0x278>
 8010220:	e716      	b.n	8010050 <_svfprintf_r+0xc0>
 8010222:	f045 0508 	orr.w	r5, r5, #8
 8010226:	e7b5      	b.n	8010194 <_svfprintf_r+0x204>
 8010228:	9b08      	ldr	r3, [sp, #32]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	2b68      	cmp	r3, #104	@ 0x68
 801022e:	bf01      	itttt	eq
 8010230:	9b08      	ldreq	r3, [sp, #32]
 8010232:	3301      	addeq	r3, #1
 8010234:	9308      	streq	r3, [sp, #32]
 8010236:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801023a:	bf18      	it	ne
 801023c:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8010240:	e7a8      	b.n	8010194 <_svfprintf_r+0x204>
 8010242:	bf00      	nop
 8010244:	f3af 8000 	nop.w
	...
 8010250:	08015658 	.word	0x08015658
 8010254:	9b08      	ldr	r3, [sp, #32]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	2b6c      	cmp	r3, #108	@ 0x6c
 801025a:	d105      	bne.n	8010268 <_svfprintf_r+0x2d8>
 801025c:	9b08      	ldr	r3, [sp, #32]
 801025e:	3301      	adds	r3, #1
 8010260:	9308      	str	r3, [sp, #32]
 8010262:	f045 0520 	orr.w	r5, r5, #32
 8010266:	e795      	b.n	8010194 <_svfprintf_r+0x204>
 8010268:	f045 0510 	orr.w	r5, r5, #16
 801026c:	e792      	b.n	8010194 <_svfprintf_r+0x204>
 801026e:	4632      	mov	r2, r6
 8010270:	f852 3b04 	ldr.w	r3, [r2], #4
 8010274:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8010278:	2300      	movs	r3, #0
 801027a:	9205      	str	r2, [sp, #20]
 801027c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8010280:	469b      	mov	fp, r3
 8010282:	f04f 0801 	mov.w	r8, #1
 8010286:	930c      	str	r3, [sp, #48]	@ 0x30
 8010288:	461f      	mov	r7, r3
 801028a:	9306      	str	r3, [sp, #24]
 801028c:	461e      	mov	r6, r3
 801028e:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 8010292:	e1a1      	b.n	80105d8 <_svfprintf_r+0x648>
 8010294:	f045 0510 	orr.w	r5, r5, #16
 8010298:	06a8      	lsls	r0, r5, #26
 801029a:	d512      	bpl.n	80102c2 <_svfprintf_r+0x332>
 801029c:	3607      	adds	r6, #7
 801029e:	f026 0307 	bic.w	r3, r6, #7
 80102a2:	461a      	mov	r2, r3
 80102a4:	685f      	ldr	r7, [r3, #4]
 80102a6:	f852 6b08 	ldr.w	r6, [r2], #8
 80102aa:	9205      	str	r2, [sp, #20]
 80102ac:	2f00      	cmp	r7, #0
 80102ae:	da06      	bge.n	80102be <_svfprintf_r+0x32e>
 80102b0:	4276      	negs	r6, r6
 80102b2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80102b6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80102ba:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80102be:	2301      	movs	r3, #1
 80102c0:	e33d      	b.n	801093e <_svfprintf_r+0x9ae>
 80102c2:	4633      	mov	r3, r6
 80102c4:	06e9      	lsls	r1, r5, #27
 80102c6:	f853 7b04 	ldr.w	r7, [r3], #4
 80102ca:	9305      	str	r3, [sp, #20]
 80102cc:	d502      	bpl.n	80102d4 <_svfprintf_r+0x344>
 80102ce:	463e      	mov	r6, r7
 80102d0:	17ff      	asrs	r7, r7, #31
 80102d2:	e7eb      	b.n	80102ac <_svfprintf_r+0x31c>
 80102d4:	066a      	lsls	r2, r5, #25
 80102d6:	d503      	bpl.n	80102e0 <_svfprintf_r+0x350>
 80102d8:	b23e      	sxth	r6, r7
 80102da:	f347 37c0 	sbfx	r7, r7, #15, #1
 80102de:	e7e5      	b.n	80102ac <_svfprintf_r+0x31c>
 80102e0:	05ab      	lsls	r3, r5, #22
 80102e2:	d5f4      	bpl.n	80102ce <_svfprintf_r+0x33e>
 80102e4:	b27e      	sxtb	r6, r7
 80102e6:	f347 17c0 	sbfx	r7, r7, #7, #1
 80102ea:	e7df      	b.n	80102ac <_svfprintf_r+0x31c>
 80102ec:	3607      	adds	r6, #7
 80102ee:	f026 0307 	bic.w	r3, r6, #7
 80102f2:	ecb3 8b02 	vldmia	r3!, {d8}
 80102f6:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 80104b8 <_svfprintf_r+0x528>
 80102fa:	eeb0 6bc8 	vabs.f64	d6, d8
 80102fe:	eeb4 6b47 	vcmp.f64	d6, d7
 8010302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010306:	9305      	str	r3, [sp, #20]
 8010308:	dd18      	ble.n	801033c <_svfprintf_r+0x3ac>
 801030a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010312:	d502      	bpl.n	801031a <_svfprintf_r+0x38a>
 8010314:	232d      	movs	r3, #45	@ 0x2d
 8010316:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 801031a:	4a69      	ldr	r2, [pc, #420]	@ (80104c0 <_svfprintf_r+0x530>)
 801031c:	4b69      	ldr	r3, [pc, #420]	@ (80104c4 <_svfprintf_r+0x534>)
 801031e:	9904      	ldr	r1, [sp, #16]
 8010320:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8010324:	2947      	cmp	r1, #71	@ 0x47
 8010326:	bfd4      	ite	le
 8010328:	4691      	movle	r9, r2
 801032a:	4699      	movgt	r9, r3
 801032c:	f04f 0b00 	mov.w	fp, #0
 8010330:	f04f 0803 	mov.w	r8, #3
 8010334:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010338:	f000 bfa4 	b.w	8011284 <_svfprintf_r+0x12f4>
 801033c:	eeb4 8b48 	vcmp.f64	d8, d8
 8010340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010344:	d709      	bvc.n	801035a <_svfprintf_r+0x3ca>
 8010346:	ee18 3a90 	vmov	r3, s17
 801034a:	2b00      	cmp	r3, #0
 801034c:	bfbc      	itt	lt
 801034e:	232d      	movlt	r3, #45	@ 0x2d
 8010350:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 8010354:	4a5c      	ldr	r2, [pc, #368]	@ (80104c8 <_svfprintf_r+0x538>)
 8010356:	4b5d      	ldr	r3, [pc, #372]	@ (80104cc <_svfprintf_r+0x53c>)
 8010358:	e7e1      	b.n	801031e <_svfprintf_r+0x38e>
 801035a:	9b04      	ldr	r3, [sp, #16]
 801035c:	2b61      	cmp	r3, #97	@ 0x61
 801035e:	d027      	beq.n	80103b0 <_svfprintf_r+0x420>
 8010360:	2b41      	cmp	r3, #65	@ 0x41
 8010362:	d127      	bne.n	80103b4 <_svfprintf_r+0x424>
 8010364:	2358      	movs	r3, #88	@ 0x58
 8010366:	2230      	movs	r2, #48	@ 0x30
 8010368:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801036c:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8010370:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8010374:	f045 0502 	orr.w	r5, r5, #2
 8010378:	f340 8089 	ble.w	801048e <_svfprintf_r+0x4fe>
 801037c:	9802      	ldr	r0, [sp, #8]
 801037e:	f108 0101 	add.w	r1, r8, #1
 8010382:	f7ff fbbd 	bl	800fb00 <_malloc_r>
 8010386:	4681      	mov	r9, r0
 8010388:	2800      	cmp	r0, #0
 801038a:	f040 8085 	bne.w	8010498 <_svfprintf_r+0x508>
 801038e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010396:	f8aa 300c 	strh.w	r3, [sl, #12]
 801039a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801039e:	065b      	lsls	r3, r3, #25
 80103a0:	f53f ae1a 	bmi.w	800ffd8 <_svfprintf_r+0x48>
 80103a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80103a6:	b04b      	add	sp, #300	@ 0x12c
 80103a8:	ecbd 8b04 	vpop	{d8-d9}
 80103ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b0:	2378      	movs	r3, #120	@ 0x78
 80103b2:	e7d8      	b.n	8010366 <_svfprintf_r+0x3d6>
 80103b4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80103b8:	d070      	beq.n	801049c <_svfprintf_r+0x50c>
 80103ba:	9b04      	ldr	r3, [sp, #16]
 80103bc:	f023 0320 	bic.w	r3, r3, #32
 80103c0:	2b47      	cmp	r3, #71	@ 0x47
 80103c2:	d170      	bne.n	80104a6 <_svfprintf_r+0x516>
 80103c4:	f1b8 0f00 	cmp.w	r8, #0
 80103c8:	d16d      	bne.n	80104a6 <_svfprintf_r+0x516>
 80103ca:	46c3      	mov	fp, r8
 80103cc:	f04f 0801 	mov.w	r8, #1
 80103d0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80103d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80103d6:	ee18 3a90 	vmov	r3, s17
 80103da:	2b00      	cmp	r3, #0
 80103dc:	da66      	bge.n	80104ac <_svfprintf_r+0x51c>
 80103de:	eeb1 9b48 	vneg.f64	d9, d8
 80103e2:	232d      	movs	r3, #45	@ 0x2d
 80103e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80103e6:	9b04      	ldr	r3, [sp, #16]
 80103e8:	f023 0720 	bic.w	r7, r3, #32
 80103ec:	2f41      	cmp	r7, #65	@ 0x41
 80103ee:	f040 81c6 	bne.w	801077e <_svfprintf_r+0x7ee>
 80103f2:	eeb0 0b49 	vmov.f64	d0, d9
 80103f6:	a818      	add	r0, sp, #96	@ 0x60
 80103f8:	f001 f89a 	bl	8011530 <frexp>
 80103fc:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 8010400:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010404:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040c:	bf08      	it	eq
 801040e:	2301      	moveq	r3, #1
 8010410:	9a04      	ldr	r2, [sp, #16]
 8010412:	bf08      	it	eq
 8010414:	9318      	streq	r3, [sp, #96]	@ 0x60
 8010416:	492e      	ldr	r1, [pc, #184]	@ (80104d0 <_svfprintf_r+0x540>)
 8010418:	4b2e      	ldr	r3, [pc, #184]	@ (80104d4 <_svfprintf_r+0x544>)
 801041a:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 801041e:	2a61      	cmp	r2, #97	@ 0x61
 8010420:	bf18      	it	ne
 8010422:	4619      	movne	r1, r3
 8010424:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8010428:	464b      	mov	r3, r9
 801042a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801042e:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8010432:	ee16 0a90 	vmov	r0, s13
 8010436:	5c0e      	ldrb	r6, [r1, r0]
 8010438:	f803 6b01 	strb.w	r6, [r3], #1
 801043c:	1c56      	adds	r6, r2, #1
 801043e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010442:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010446:	d006      	beq.n	8010456 <_svfprintf_r+0x4c6>
 8010448:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801044c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010450:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 8010454:	d12e      	bne.n	80104b4 <_svfprintf_r+0x524>
 8010456:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801045a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010462:	dc39      	bgt.n	80104d8 <_svfprintf_r+0x548>
 8010464:	eeb4 0b47 	vcmp.f64	d0, d7
 8010468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046c:	d101      	bne.n	8010472 <_svfprintf_r+0x4e2>
 801046e:	07c6      	lsls	r6, r0, #31
 8010470:	d432      	bmi.n	80104d8 <_svfprintf_r+0x548>
 8010472:	4619      	mov	r1, r3
 8010474:	189e      	adds	r6, r3, r2
 8010476:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801047a:	1a70      	subs	r0, r6, r1
 801047c:	2800      	cmp	r0, #0
 801047e:	f280 817b 	bge.w	8010778 <_svfprintf_r+0x7e8>
 8010482:	1c51      	adds	r1, r2, #1
 8010484:	3201      	adds	r2, #1
 8010486:	bfb8      	it	lt
 8010488:	2100      	movlt	r1, #0
 801048a:	440b      	add	r3, r1
 801048c:	e037      	b.n	80104fe <_svfprintf_r+0x56e>
 801048e:	f04f 0b00 	mov.w	fp, #0
 8010492:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 8010496:	e79b      	b.n	80103d0 <_svfprintf_r+0x440>
 8010498:	4683      	mov	fp, r0
 801049a:	e799      	b.n	80103d0 <_svfprintf_r+0x440>
 801049c:	f04f 0b00 	mov.w	fp, #0
 80104a0:	f04f 0806 	mov.w	r8, #6
 80104a4:	e794      	b.n	80103d0 <_svfprintf_r+0x440>
 80104a6:	f04f 0b00 	mov.w	fp, #0
 80104aa:	e791      	b.n	80103d0 <_svfprintf_r+0x440>
 80104ac:	2300      	movs	r3, #0
 80104ae:	eeb0 9b48 	vmov.f64	d9, d8
 80104b2:	e797      	b.n	80103e4 <_svfprintf_r+0x454>
 80104b4:	4632      	mov	r2, r6
 80104b6:	e7b8      	b.n	801042a <_svfprintf_r+0x49a>
 80104b8:	ffffffff 	.word	0xffffffff
 80104bc:	7fefffff 	.word	0x7fefffff
 80104c0:	08015648 	.word	0x08015648
 80104c4:	0801564c 	.word	0x0801564c
 80104c8:	08015650 	.word	0x08015650
 80104cc:	08015654 	.word	0x08015654
 80104d0:	08015658 	.word	0x08015658
 80104d4:	08015669 	.word	0x08015669
 80104d8:	7bce      	ldrb	r6, [r1, #15]
 80104da:	931c      	str	r3, [sp, #112]	@ 0x70
 80104dc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80104e0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80104e2:	1e42      	subs	r2, r0, #1
 80104e4:	921c      	str	r2, [sp, #112]	@ 0x70
 80104e6:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80104ea:	42b2      	cmp	r2, r6
 80104ec:	f000 8141 	beq.w	8010772 <_svfprintf_r+0x7e2>
 80104f0:	2a39      	cmp	r2, #57	@ 0x39
 80104f2:	bf16      	itet	ne
 80104f4:	3201      	addne	r2, #1
 80104f6:	7a8a      	ldrbeq	r2, [r1, #10]
 80104f8:	b2d2      	uxtbne	r2, r2
 80104fa:	f800 2c01 	strb.w	r2, [r0, #-1]
 80104fe:	eba3 0309 	sub.w	r3, r3, r9
 8010502:	2f47      	cmp	r7, #71	@ 0x47
 8010504:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8010506:	9303      	str	r3, [sp, #12]
 8010508:	f040 8179 	bne.w	80107fe <_svfprintf_r+0x86e>
 801050c:	1cf1      	adds	r1, r6, #3
 801050e:	db02      	blt.n	8010516 <_svfprintf_r+0x586>
 8010510:	4546      	cmp	r6, r8
 8010512:	f340 8196 	ble.w	8010842 <_svfprintf_r+0x8b2>
 8010516:	9b04      	ldr	r3, [sp, #16]
 8010518:	3b02      	subs	r3, #2
 801051a:	9304      	str	r3, [sp, #16]
 801051c:	9904      	ldr	r1, [sp, #16]
 801051e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8010522:	f021 0120 	bic.w	r1, r1, #32
 8010526:	2941      	cmp	r1, #65	@ 0x41
 8010528:	bf08      	it	eq
 801052a:	320f      	addeq	r2, #15
 801052c:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8010530:	bf06      	itte	eq
 8010532:	b2d2      	uxtbeq	r2, r2
 8010534:	2101      	moveq	r1, #1
 8010536:	2100      	movne	r1, #0
 8010538:	2b00      	cmp	r3, #0
 801053a:	9318      	str	r3, [sp, #96]	@ 0x60
 801053c:	bfb8      	it	lt
 801053e:	f1c6 0301 	rsblt	r3, r6, #1
 8010542:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 8010546:	bfb4      	ite	lt
 8010548:	222d      	movlt	r2, #45	@ 0x2d
 801054a:	222b      	movge	r2, #43	@ 0x2b
 801054c:	2b09      	cmp	r3, #9
 801054e:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 8010552:	f340 8169 	ble.w	8010828 <_svfprintf_r+0x898>
 8010556:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 801055a:	270a      	movs	r7, #10
 801055c:	4602      	mov	r2, r0
 801055e:	fbb3 f6f7 	udiv	r6, r3, r7
 8010562:	fb07 3116 	mls	r1, r7, r6, r3
 8010566:	3130      	adds	r1, #48	@ 0x30
 8010568:	f802 1c01 	strb.w	r1, [r2, #-1]
 801056c:	4619      	mov	r1, r3
 801056e:	2963      	cmp	r1, #99	@ 0x63
 8010570:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8010574:	4633      	mov	r3, r6
 8010576:	dcf1      	bgt.n	801055c <_svfprintf_r+0x5cc>
 8010578:	3330      	adds	r3, #48	@ 0x30
 801057a:	1e91      	subs	r1, r2, #2
 801057c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8010580:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 8010584:	460b      	mov	r3, r1
 8010586:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 801058a:	4283      	cmp	r3, r0
 801058c:	f0c0 8147 	bcc.w	801081e <_svfprintf_r+0x88e>
 8010590:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	4281      	cmp	r1, r0
 8010598:	bf88      	it	hi
 801059a:	2300      	movhi	r3, #0
 801059c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 80105a0:	441a      	add	r2, r3
 80105a2:	ab1a      	add	r3, sp, #104	@ 0x68
 80105a4:	1ad3      	subs	r3, r2, r3
 80105a6:	9a03      	ldr	r2, [sp, #12]
 80105a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80105aa:	2a01      	cmp	r2, #1
 80105ac:	eb03 0802 	add.w	r8, r3, r2
 80105b0:	dc01      	bgt.n	80105b6 <_svfprintf_r+0x626>
 80105b2:	07ea      	lsls	r2, r5, #31
 80105b4:	d501      	bpl.n	80105ba <_svfprintf_r+0x62a>
 80105b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b8:	4498      	add	r8, r3
 80105ba:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80105be:	2700      	movs	r7, #0
 80105c0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80105c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80105c6:	9706      	str	r7, [sp, #24]
 80105c8:	463e      	mov	r6, r7
 80105ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	f040 8180 	bne.w	80108d2 <_svfprintf_r+0x942>
 80105d2:	2300      	movs	r3, #0
 80105d4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80105d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80105d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80105da:	4543      	cmp	r3, r8
 80105dc:	bfb8      	it	lt
 80105de:	4643      	movlt	r3, r8
 80105e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80105e2:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 80105e6:	b113      	cbz	r3, 80105ee <_svfprintf_r+0x65e>
 80105e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105ea:	3301      	adds	r3, #1
 80105ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80105ee:	f015 0302 	ands.w	r3, r5, #2
 80105f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80105f4:	bf1e      	ittt	ne
 80105f6:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 80105f8:	3302      	addne	r3, #2
 80105fa:	930d      	strne	r3, [sp, #52]	@ 0x34
 80105fc:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8010600:	9314      	str	r3, [sp, #80]	@ 0x50
 8010602:	d120      	bne.n	8010646 <_svfprintf_r+0x6b6>
 8010604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010606:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010608:	1a9b      	subs	r3, r3, r2
 801060a:	2b00      	cmp	r3, #0
 801060c:	dd1b      	ble.n	8010646 <_svfprintf_r+0x6b6>
 801060e:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8010612:	49a5      	ldr	r1, [pc, #660]	@ (80108a8 <_svfprintf_r+0x918>)
 8010614:	6021      	str	r1, [r4, #0]
 8010616:	2b10      	cmp	r3, #16
 8010618:	f102 0201 	add.w	r2, r2, #1
 801061c:	f104 0008 	add.w	r0, r4, #8
 8010620:	f300 828c 	bgt.w	8010b3c <_svfprintf_r+0xbac>
 8010624:	eb0c 0103 	add.w	r1, ip, r3
 8010628:	2a07      	cmp	r2, #7
 801062a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 801062e:	6063      	str	r3, [r4, #4]
 8010630:	f340 8299 	ble.w	8010b66 <_svfprintf_r+0xbd6>
 8010634:	9802      	ldr	r0, [sp, #8]
 8010636:	aa1e      	add	r2, sp, #120	@ 0x78
 8010638:	4651      	mov	r1, sl
 801063a:	f002 f8eb 	bl	8012814 <__ssprint_r>
 801063e:	2800      	cmp	r0, #0
 8010640:	f040 85c7 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010644:	ac21      	add	r4, sp, #132	@ 0x84
 8010646:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 801064a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801064c:	b16a      	cbz	r2, 801066a <_svfprintf_r+0x6da>
 801064e:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 8010652:	6022      	str	r2, [r4, #0]
 8010654:	2201      	movs	r2, #1
 8010656:	4413      	add	r3, r2
 8010658:	9320      	str	r3, [sp, #128]	@ 0x80
 801065a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801065c:	6062      	str	r2, [r4, #4]
 801065e:	4413      	add	r3, r2
 8010660:	2b07      	cmp	r3, #7
 8010662:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010664:	f300 8281 	bgt.w	8010b6a <_svfprintf_r+0xbda>
 8010668:	3408      	adds	r4, #8
 801066a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801066c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801066e:	b162      	cbz	r2, 801068a <_svfprintf_r+0x6fa>
 8010670:	aa17      	add	r2, sp, #92	@ 0x5c
 8010672:	6022      	str	r2, [r4, #0]
 8010674:	2202      	movs	r2, #2
 8010676:	4413      	add	r3, r2
 8010678:	9320      	str	r3, [sp, #128]	@ 0x80
 801067a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801067c:	6062      	str	r2, [r4, #4]
 801067e:	3301      	adds	r3, #1
 8010680:	2b07      	cmp	r3, #7
 8010682:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010684:	f300 827b 	bgt.w	8010b7e <_svfprintf_r+0xbee>
 8010688:	3408      	adds	r4, #8
 801068a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801068c:	2b80      	cmp	r3, #128	@ 0x80
 801068e:	d120      	bne.n	80106d2 <_svfprintf_r+0x742>
 8010690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010692:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010694:	1a9b      	subs	r3, r3, r2
 8010696:	2b00      	cmp	r3, #0
 8010698:	dd1b      	ble.n	80106d2 <_svfprintf_r+0x742>
 801069a:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 801069e:	4983      	ldr	r1, [pc, #524]	@ (80108ac <_svfprintf_r+0x91c>)
 80106a0:	6021      	str	r1, [r4, #0]
 80106a2:	2b10      	cmp	r3, #16
 80106a4:	f102 0201 	add.w	r2, r2, #1
 80106a8:	f104 0008 	add.w	r0, r4, #8
 80106ac:	f300 8271 	bgt.w	8010b92 <_svfprintf_r+0xc02>
 80106b0:	eb0c 0103 	add.w	r1, ip, r3
 80106b4:	2a07      	cmp	r2, #7
 80106b6:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80106ba:	6063      	str	r3, [r4, #4]
 80106bc:	f340 827e 	ble.w	8010bbc <_svfprintf_r+0xc2c>
 80106c0:	9802      	ldr	r0, [sp, #8]
 80106c2:	aa1e      	add	r2, sp, #120	@ 0x78
 80106c4:	4651      	mov	r1, sl
 80106c6:	f002 f8a5 	bl	8012814 <__ssprint_r>
 80106ca:	2800      	cmp	r0, #0
 80106cc:	f040 8581 	bne.w	80111d2 <_svfprintf_r+0x1242>
 80106d0:	ac21      	add	r4, sp, #132	@ 0x84
 80106d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106d4:	eba3 0308 	sub.w	r3, r3, r8
 80106d8:	2b00      	cmp	r3, #0
 80106da:	930c      	str	r3, [sp, #48]	@ 0x30
 80106dc:	dd1c      	ble.n	8010718 <_svfprintf_r+0x788>
 80106de:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80106e0:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 80106e4:	2810      	cmp	r0, #16
 80106e6:	4871      	ldr	r0, [pc, #452]	@ (80108ac <_svfprintf_r+0x91c>)
 80106e8:	6020      	str	r0, [r4, #0]
 80106ea:	f102 0201 	add.w	r2, r2, #1
 80106ee:	f104 0108 	add.w	r1, r4, #8
 80106f2:	f300 8265 	bgt.w	8010bc0 <_svfprintf_r+0xc30>
 80106f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80106f8:	6060      	str	r0, [r4, #4]
 80106fa:	4403      	add	r3, r0
 80106fc:	2a07      	cmp	r2, #7
 80106fe:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8010702:	f340 8272 	ble.w	8010bea <_svfprintf_r+0xc5a>
 8010706:	9802      	ldr	r0, [sp, #8]
 8010708:	aa1e      	add	r2, sp, #120	@ 0x78
 801070a:	4651      	mov	r1, sl
 801070c:	f002 f882 	bl	8012814 <__ssprint_r>
 8010710:	2800      	cmp	r0, #0
 8010712:	f040 855e 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010716:	ac21      	add	r4, sp, #132	@ 0x84
 8010718:	05e9      	lsls	r1, r5, #23
 801071a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801071c:	f100 826c 	bmi.w	8010bf8 <_svfprintf_r+0xc68>
 8010720:	4443      	add	r3, r8
 8010722:	9320      	str	r3, [sp, #128]	@ 0x80
 8010724:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010726:	3301      	adds	r3, #1
 8010728:	2b07      	cmp	r3, #7
 801072a:	e9c4 9800 	strd	r9, r8, [r4]
 801072e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010730:	f300 82a4 	bgt.w	8010c7c <_svfprintf_r+0xcec>
 8010734:	3408      	adds	r4, #8
 8010736:	076a      	lsls	r2, r5, #29
 8010738:	f100 852d 	bmi.w	8011196 <_svfprintf_r+0x1206>
 801073c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8010740:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010742:	428a      	cmp	r2, r1
 8010744:	bfac      	ite	ge
 8010746:	189b      	addge	r3, r3, r2
 8010748:	185b      	addlt	r3, r3, r1
 801074a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801074c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801074e:	b13b      	cbz	r3, 8010760 <_svfprintf_r+0x7d0>
 8010750:	9802      	ldr	r0, [sp, #8]
 8010752:	aa1e      	add	r2, sp, #120	@ 0x78
 8010754:	4651      	mov	r1, sl
 8010756:	f002 f85d 	bl	8012814 <__ssprint_r>
 801075a:	2800      	cmp	r0, #0
 801075c:	f040 8539 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010760:	2300      	movs	r3, #0
 8010762:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010764:	f1bb 0f00 	cmp.w	fp, #0
 8010768:	f040 854f 	bne.w	801120a <_svfprintf_r+0x127a>
 801076c:	9e05      	ldr	r6, [sp, #20]
 801076e:	ac21      	add	r4, sp, #132	@ 0x84
 8010770:	e0bc      	b.n	80108ec <_svfprintf_r+0x95c>
 8010772:	f800 cc01 	strb.w	ip, [r0, #-1]
 8010776:	e6b3      	b.n	80104e0 <_svfprintf_r+0x550>
 8010778:	f801 cb01 	strb.w	ip, [r1], #1
 801077c:	e67d      	b.n	801047a <_svfprintf_r+0x4ea>
 801077e:	2f46      	cmp	r7, #70	@ 0x46
 8010780:	d005      	beq.n	801078e <_svfprintf_r+0x7fe>
 8010782:	2f45      	cmp	r7, #69	@ 0x45
 8010784:	d117      	bne.n	80107b6 <_svfprintf_r+0x826>
 8010786:	f108 0601 	add.w	r6, r8, #1
 801078a:	2102      	movs	r1, #2
 801078c:	e001      	b.n	8010792 <_svfprintf_r+0x802>
 801078e:	4646      	mov	r6, r8
 8010790:	2103      	movs	r1, #3
 8010792:	ab1c      	add	r3, sp, #112	@ 0x70
 8010794:	9301      	str	r3, [sp, #4]
 8010796:	ab19      	add	r3, sp, #100	@ 0x64
 8010798:	9300      	str	r3, [sp, #0]
 801079a:	9802      	ldr	r0, [sp, #8]
 801079c:	eeb0 0b49 	vmov.f64	d0, d9
 80107a0:	ab18      	add	r3, sp, #96	@ 0x60
 80107a2:	4632      	mov	r2, r6
 80107a4:	f000 ffc4 	bl	8011730 <_dtoa_r>
 80107a8:	2f47      	cmp	r7, #71	@ 0x47
 80107aa:	4681      	mov	r9, r0
 80107ac:	d115      	bne.n	80107da <_svfprintf_r+0x84a>
 80107ae:	07e8      	lsls	r0, r5, #31
 80107b0:	d403      	bmi.n	80107ba <_svfprintf_r+0x82a>
 80107b2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80107b4:	e6a3      	b.n	80104fe <_svfprintf_r+0x56e>
 80107b6:	4646      	mov	r6, r8
 80107b8:	e7e7      	b.n	801078a <_svfprintf_r+0x7fa>
 80107ba:	eb09 0306 	add.w	r3, r9, r6
 80107be:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80107c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c6:	bf08      	it	eq
 80107c8:	931c      	streq	r3, [sp, #112]	@ 0x70
 80107ca:	2130      	movs	r1, #48	@ 0x30
 80107cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80107ce:	4293      	cmp	r3, r2
 80107d0:	d9ef      	bls.n	80107b2 <_svfprintf_r+0x822>
 80107d2:	1c50      	adds	r0, r2, #1
 80107d4:	901c      	str	r0, [sp, #112]	@ 0x70
 80107d6:	7011      	strb	r1, [r2, #0]
 80107d8:	e7f8      	b.n	80107cc <_svfprintf_r+0x83c>
 80107da:	2f46      	cmp	r7, #70	@ 0x46
 80107dc:	eb00 0306 	add.w	r3, r0, r6
 80107e0:	d1ed      	bne.n	80107be <_svfprintf_r+0x82e>
 80107e2:	7802      	ldrb	r2, [r0, #0]
 80107e4:	2a30      	cmp	r2, #48	@ 0x30
 80107e6:	d107      	bne.n	80107f8 <_svfprintf_r+0x868>
 80107e8:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80107ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f0:	bf1c      	itt	ne
 80107f2:	f1c6 0601 	rsbne	r6, r6, #1
 80107f6:	9618      	strne	r6, [sp, #96]	@ 0x60
 80107f8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80107fa:	4413      	add	r3, r2
 80107fc:	e7df      	b.n	80107be <_svfprintf_r+0x82e>
 80107fe:	2f46      	cmp	r7, #70	@ 0x46
 8010800:	f47f ae8c 	bne.w	801051c <_svfprintf_r+0x58c>
 8010804:	f005 0301 	and.w	r3, r5, #1
 8010808:	2e00      	cmp	r6, #0
 801080a:	ea43 0308 	orr.w	r3, r3, r8
 801080e:	dd25      	ble.n	801085c <_svfprintf_r+0x8cc>
 8010810:	b37b      	cbz	r3, 8010872 <_svfprintf_r+0x8e2>
 8010812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010814:	18f3      	adds	r3, r6, r3
 8010816:	4498      	add	r8, r3
 8010818:	2366      	movs	r3, #102	@ 0x66
 801081a:	9304      	str	r3, [sp, #16]
 801081c:	e02f      	b.n	801087e <_svfprintf_r+0x8ee>
 801081e:	f813 7b01 	ldrb.w	r7, [r3], #1
 8010822:	f806 7f01 	strb.w	r7, [r6, #1]!
 8010826:	e6b0      	b.n	801058a <_svfprintf_r+0x5fa>
 8010828:	b941      	cbnz	r1, 801083c <_svfprintf_r+0x8ac>
 801082a:	2230      	movs	r2, #48	@ 0x30
 801082c:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 8010830:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 8010834:	3330      	adds	r3, #48	@ 0x30
 8010836:	f802 3b01 	strb.w	r3, [r2], #1
 801083a:	e6b2      	b.n	80105a2 <_svfprintf_r+0x612>
 801083c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8010840:	e7f8      	b.n	8010834 <_svfprintf_r+0x8a4>
 8010842:	9b03      	ldr	r3, [sp, #12]
 8010844:	429e      	cmp	r6, r3
 8010846:	da0d      	bge.n	8010864 <_svfprintf_r+0x8d4>
 8010848:	9b03      	ldr	r3, [sp, #12]
 801084a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801084c:	2e00      	cmp	r6, #0
 801084e:	eb03 0802 	add.w	r8, r3, r2
 8010852:	dc0c      	bgt.n	801086e <_svfprintf_r+0x8de>
 8010854:	f1c6 0301 	rsb	r3, r6, #1
 8010858:	4498      	add	r8, r3
 801085a:	e008      	b.n	801086e <_svfprintf_r+0x8de>
 801085c:	b15b      	cbz	r3, 8010876 <_svfprintf_r+0x8e6>
 801085e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010860:	3301      	adds	r3, #1
 8010862:	e7d8      	b.n	8010816 <_svfprintf_r+0x886>
 8010864:	07eb      	lsls	r3, r5, #31
 8010866:	d51d      	bpl.n	80108a4 <_svfprintf_r+0x914>
 8010868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801086a:	eb06 0803 	add.w	r8, r6, r3
 801086e:	2367      	movs	r3, #103	@ 0x67
 8010870:	e7d3      	b.n	801081a <_svfprintf_r+0x88a>
 8010872:	46b0      	mov	r8, r6
 8010874:	e7d0      	b.n	8010818 <_svfprintf_r+0x888>
 8010876:	2366      	movs	r3, #102	@ 0x66
 8010878:	9304      	str	r3, [sp, #16]
 801087a:	f04f 0801 	mov.w	r8, #1
 801087e:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8010882:	9306      	str	r3, [sp, #24]
 8010884:	d023      	beq.n	80108ce <_svfprintf_r+0x93e>
 8010886:	2700      	movs	r7, #0
 8010888:	2e00      	cmp	r6, #0
 801088a:	9706      	str	r7, [sp, #24]
 801088c:	f77f ae9d 	ble.w	80105ca <_svfprintf_r+0x63a>
 8010890:	9b07      	ldr	r3, [sp, #28]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	2bff      	cmp	r3, #255	@ 0xff
 8010896:	d10b      	bne.n	80108b0 <_svfprintf_r+0x920>
 8010898:	9b06      	ldr	r3, [sp, #24]
 801089a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801089c:	443b      	add	r3, r7
 801089e:	fb02 8803 	mla	r8, r2, r3, r8
 80108a2:	e692      	b.n	80105ca <_svfprintf_r+0x63a>
 80108a4:	46b0      	mov	r8, r6
 80108a6:	e7e2      	b.n	801086e <_svfprintf_r+0x8de>
 80108a8:	0801568c 	.word	0x0801568c
 80108ac:	0801567c 	.word	0x0801567c
 80108b0:	42b3      	cmp	r3, r6
 80108b2:	daf1      	bge.n	8010898 <_svfprintf_r+0x908>
 80108b4:	1af6      	subs	r6, r6, r3
 80108b6:	9b07      	ldr	r3, [sp, #28]
 80108b8:	785b      	ldrb	r3, [r3, #1]
 80108ba:	b133      	cbz	r3, 80108ca <_svfprintf_r+0x93a>
 80108bc:	9b06      	ldr	r3, [sp, #24]
 80108be:	3301      	adds	r3, #1
 80108c0:	9306      	str	r3, [sp, #24]
 80108c2:	9b07      	ldr	r3, [sp, #28]
 80108c4:	3301      	adds	r3, #1
 80108c6:	9307      	str	r3, [sp, #28]
 80108c8:	e7e2      	b.n	8010890 <_svfprintf_r+0x900>
 80108ca:	3701      	adds	r7, #1
 80108cc:	e7e0      	b.n	8010890 <_svfprintf_r+0x900>
 80108ce:	9f06      	ldr	r7, [sp, #24]
 80108d0:	e67b      	b.n	80105ca <_svfprintf_r+0x63a>
 80108d2:	232d      	movs	r3, #45	@ 0x2d
 80108d4:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80108d8:	e67b      	b.n	80105d2 <_svfprintf_r+0x642>
 80108da:	06af      	lsls	r7, r5, #26
 80108dc:	d50a      	bpl.n	80108f4 <_svfprintf_r+0x964>
 80108de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108e0:	6833      	ldr	r3, [r6, #0]
 80108e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80108e4:	17d2      	asrs	r2, r2, #31
 80108e6:	e9c3 1200 	strd	r1, r2, [r3]
 80108ea:	3604      	adds	r6, #4
 80108ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108f0:	f7ff bb87 	b.w	8010002 <_svfprintf_r+0x72>
 80108f4:	06e8      	lsls	r0, r5, #27
 80108f6:	d503      	bpl.n	8010900 <_svfprintf_r+0x970>
 80108f8:	6833      	ldr	r3, [r6, #0]
 80108fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108fc:	601a      	str	r2, [r3, #0]
 80108fe:	e7f4      	b.n	80108ea <_svfprintf_r+0x95a>
 8010900:	0669      	lsls	r1, r5, #25
 8010902:	d503      	bpl.n	801090c <_svfprintf_r+0x97c>
 8010904:	6833      	ldr	r3, [r6, #0]
 8010906:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010908:	801a      	strh	r2, [r3, #0]
 801090a:	e7ee      	b.n	80108ea <_svfprintf_r+0x95a>
 801090c:	05aa      	lsls	r2, r5, #22
 801090e:	d5f3      	bpl.n	80108f8 <_svfprintf_r+0x968>
 8010910:	6833      	ldr	r3, [r6, #0]
 8010912:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010914:	701a      	strb	r2, [r3, #0]
 8010916:	e7e8      	b.n	80108ea <_svfprintf_r+0x95a>
 8010918:	f045 0510 	orr.w	r5, r5, #16
 801091c:	f015 0320 	ands.w	r3, r5, #32
 8010920:	d020      	beq.n	8010964 <_svfprintf_r+0x9d4>
 8010922:	3607      	adds	r6, #7
 8010924:	f026 0307 	bic.w	r3, r6, #7
 8010928:	461a      	mov	r2, r3
 801092a:	685f      	ldr	r7, [r3, #4]
 801092c:	f852 6b08 	ldr.w	r6, [r2], #8
 8010930:	9205      	str	r2, [sp, #20]
 8010932:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010936:	2300      	movs	r3, #0
 8010938:	2200      	movs	r2, #0
 801093a:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 801093e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8010942:	f000 8473 	beq.w	801122c <_svfprintf_r+0x129c>
 8010946:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801094a:	9206      	str	r2, [sp, #24]
 801094c:	ea56 0207 	orrs.w	r2, r6, r7
 8010950:	f040 8471 	bne.w	8011236 <_svfprintf_r+0x12a6>
 8010954:	f1b8 0f00 	cmp.w	r8, #0
 8010958:	f000 80dc 	beq.w	8010b14 <_svfprintf_r+0xb84>
 801095c:	2b01      	cmp	r3, #1
 801095e:	f040 846d 	bne.w	801123c <_svfprintf_r+0x12ac>
 8010962:	e083      	b.n	8010a6c <_svfprintf_r+0xadc>
 8010964:	4632      	mov	r2, r6
 8010966:	f015 0710 	ands.w	r7, r5, #16
 801096a:	f852 6b04 	ldr.w	r6, [r2], #4
 801096e:	9205      	str	r2, [sp, #20]
 8010970:	d001      	beq.n	8010976 <_svfprintf_r+0x9e6>
 8010972:	461f      	mov	r7, r3
 8010974:	e7dd      	b.n	8010932 <_svfprintf_r+0x9a2>
 8010976:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801097a:	d001      	beq.n	8010980 <_svfprintf_r+0x9f0>
 801097c:	b2b6      	uxth	r6, r6
 801097e:	e7d8      	b.n	8010932 <_svfprintf_r+0x9a2>
 8010980:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010984:	d0d5      	beq.n	8010932 <_svfprintf_r+0x9a2>
 8010986:	b2f6      	uxtb	r6, r6
 8010988:	e7f3      	b.n	8010972 <_svfprintf_r+0x9e2>
 801098a:	4633      	mov	r3, r6
 801098c:	2278      	movs	r2, #120	@ 0x78
 801098e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010992:	9305      	str	r3, [sp, #20]
 8010994:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010998:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 801099c:	4b94      	ldr	r3, [pc, #592]	@ (8010bf0 <_svfprintf_r+0xc60>)
 801099e:	9312      	str	r3, [sp, #72]	@ 0x48
 80109a0:	2700      	movs	r7, #0
 80109a2:	f045 0502 	orr.w	r5, r5, #2
 80109a6:	2302      	movs	r3, #2
 80109a8:	9204      	str	r2, [sp, #16]
 80109aa:	e7c5      	b.n	8010938 <_svfprintf_r+0x9a8>
 80109ac:	4633      	mov	r3, r6
 80109ae:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80109b2:	f853 9b04 	ldr.w	r9, [r3], #4
 80109b6:	9305      	str	r3, [sp, #20]
 80109b8:	f04f 0600 	mov.w	r6, #0
 80109bc:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 80109c0:	d00f      	beq.n	80109e2 <_svfprintf_r+0xa52>
 80109c2:	4642      	mov	r2, r8
 80109c4:	4631      	mov	r1, r6
 80109c6:	4648      	mov	r0, r9
 80109c8:	f7ef fc8a 	bl	80002e0 <memchr>
 80109cc:	4683      	mov	fp, r0
 80109ce:	2800      	cmp	r0, #0
 80109d0:	f43f acb0 	beq.w	8010334 <_svfprintf_r+0x3a4>
 80109d4:	eba0 0809 	sub.w	r8, r0, r9
 80109d8:	46b3      	mov	fp, r6
 80109da:	960c      	str	r6, [sp, #48]	@ 0x30
 80109dc:	4637      	mov	r7, r6
 80109de:	9606      	str	r6, [sp, #24]
 80109e0:	e5fa      	b.n	80105d8 <_svfprintf_r+0x648>
 80109e2:	4648      	mov	r0, r9
 80109e4:	f7ef fccc 	bl	8000380 <strlen>
 80109e8:	46b3      	mov	fp, r6
 80109ea:	4680      	mov	r8, r0
 80109ec:	e4a2      	b.n	8010334 <_svfprintf_r+0x3a4>
 80109ee:	f045 0510 	orr.w	r5, r5, #16
 80109f2:	f015 0320 	ands.w	r3, r5, #32
 80109f6:	d009      	beq.n	8010a0c <_svfprintf_r+0xa7c>
 80109f8:	3607      	adds	r6, #7
 80109fa:	f026 0307 	bic.w	r3, r6, #7
 80109fe:	461a      	mov	r2, r3
 8010a00:	685f      	ldr	r7, [r3, #4]
 8010a02:	f852 6b08 	ldr.w	r6, [r2], #8
 8010a06:	9205      	str	r2, [sp, #20]
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e795      	b.n	8010938 <_svfprintf_r+0x9a8>
 8010a0c:	4632      	mov	r2, r6
 8010a0e:	f015 0710 	ands.w	r7, r5, #16
 8010a12:	f852 6b04 	ldr.w	r6, [r2], #4
 8010a16:	9205      	str	r2, [sp, #20]
 8010a18:	d001      	beq.n	8010a1e <_svfprintf_r+0xa8e>
 8010a1a:	461f      	mov	r7, r3
 8010a1c:	e7f4      	b.n	8010a08 <_svfprintf_r+0xa78>
 8010a1e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010a22:	d001      	beq.n	8010a28 <_svfprintf_r+0xa98>
 8010a24:	b2b6      	uxth	r6, r6
 8010a26:	e7ef      	b.n	8010a08 <_svfprintf_r+0xa78>
 8010a28:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010a2c:	d0ec      	beq.n	8010a08 <_svfprintf_r+0xa78>
 8010a2e:	b2f6      	uxtb	r6, r6
 8010a30:	e7f3      	b.n	8010a1a <_svfprintf_r+0xa8a>
 8010a32:	4b70      	ldr	r3, [pc, #448]	@ (8010bf4 <_svfprintf_r+0xc64>)
 8010a34:	f7ff bb7a 	b.w	801012c <_svfprintf_r+0x19c>
 8010a38:	4632      	mov	r2, r6
 8010a3a:	f015 0710 	ands.w	r7, r5, #16
 8010a3e:	f852 6b04 	ldr.w	r6, [r2], #4
 8010a42:	9205      	str	r2, [sp, #20]
 8010a44:	d002      	beq.n	8010a4c <_svfprintf_r+0xabc>
 8010a46:	461f      	mov	r7, r3
 8010a48:	f7ff bb7d 	b.w	8010146 <_svfprintf_r+0x1b6>
 8010a4c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8010a50:	d002      	beq.n	8010a58 <_svfprintf_r+0xac8>
 8010a52:	b2b6      	uxth	r6, r6
 8010a54:	f7ff bb77 	b.w	8010146 <_svfprintf_r+0x1b6>
 8010a58:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8010a5c:	f43f ab73 	beq.w	8010146 <_svfprintf_r+0x1b6>
 8010a60:	b2f6      	uxtb	r6, r6
 8010a62:	e7f0      	b.n	8010a46 <_svfprintf_r+0xab6>
 8010a64:	2e0a      	cmp	r6, #10
 8010a66:	f177 0300 	sbcs.w	r3, r7, #0
 8010a6a:	d206      	bcs.n	8010a7a <_svfprintf_r+0xaea>
 8010a6c:	3630      	adds	r6, #48	@ 0x30
 8010a6e:	b2f6      	uxtb	r6, r6
 8010a70:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 8010a74:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 8010a78:	e3fc      	b.n	8011274 <_svfprintf_r+0x12e4>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	9303      	str	r3, [sp, #12]
 8010a7e:	9b06      	ldr	r3, [sp, #24]
 8010a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010a84:	ad4a      	add	r5, sp, #296	@ 0x128
 8010a86:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a88:	220a      	movs	r2, #10
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	4639      	mov	r1, r7
 8010a90:	f7ef fc7e 	bl	8000390 <__aeabi_uldivmod>
 8010a94:	3230      	adds	r2, #48	@ 0x30
 8010a96:	f805 2c01 	strb.w	r2, [r5, #-1]
 8010a9a:	9a03      	ldr	r2, [sp, #12]
 8010a9c:	3201      	adds	r2, #1
 8010a9e:	9203      	str	r2, [sp, #12]
 8010aa0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	468b      	mov	fp, r1
 8010aa6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8010aaa:	b1e2      	cbz	r2, 8010ae6 <_svfprintf_r+0xb56>
 8010aac:	9a07      	ldr	r2, [sp, #28]
 8010aae:	9903      	ldr	r1, [sp, #12]
 8010ab0:	7812      	ldrb	r2, [r2, #0]
 8010ab2:	4291      	cmp	r1, r2
 8010ab4:	d117      	bne.n	8010ae6 <_svfprintf_r+0xb56>
 8010ab6:	29ff      	cmp	r1, #255	@ 0xff
 8010ab8:	d015      	beq.n	8010ae6 <_svfprintf_r+0xb56>
 8010aba:	2e0a      	cmp	r6, #10
 8010abc:	f177 0200 	sbcs.w	r2, r7, #0
 8010ac0:	d311      	bcc.n	8010ae6 <_svfprintf_r+0xb56>
 8010ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ac4:	9003      	str	r0, [sp, #12]
 8010ac6:	eba9 0903 	sub.w	r9, r9, r3
 8010aca:	461a      	mov	r2, r3
 8010acc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010ace:	4648      	mov	r0, r9
 8010ad0:	f000 fce5 	bl	801149e <strncpy>
 8010ad4:	9b07      	ldr	r3, [sp, #28]
 8010ad6:	785a      	ldrb	r2, [r3, #1]
 8010ad8:	9b03      	ldr	r3, [sp, #12]
 8010ada:	b11a      	cbz	r2, 8010ae4 <_svfprintf_r+0xb54>
 8010adc:	9a07      	ldr	r2, [sp, #28]
 8010ade:	3201      	adds	r2, #1
 8010ae0:	9207      	str	r2, [sp, #28]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	9203      	str	r2, [sp, #12]
 8010ae6:	2e0a      	cmp	r6, #10
 8010ae8:	f177 0700 	sbcs.w	r7, r7, #0
 8010aec:	f0c0 83c2 	bcc.w	8011274 <_svfprintf_r+0x12e4>
 8010af0:	461e      	mov	r6, r3
 8010af2:	465f      	mov	r7, fp
 8010af4:	464d      	mov	r5, r9
 8010af6:	e7c7      	b.n	8010a88 <_svfprintf_r+0xaf8>
 8010af8:	f006 030f 	and.w	r3, r6, #15
 8010afc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010afe:	0936      	lsrs	r6, r6, #4
 8010b00:	5cd3      	ldrb	r3, [r2, r3]
 8010b02:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8010b06:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8010b0a:	093f      	lsrs	r7, r7, #4
 8010b0c:	ea56 0307 	orrs.w	r3, r6, r7
 8010b10:	d1f2      	bne.n	8010af8 <_svfprintf_r+0xb68>
 8010b12:	e3af      	b.n	8011274 <_svfprintf_r+0x12e4>
 8010b14:	b91b      	cbnz	r3, 8010b1e <_svfprintf_r+0xb8e>
 8010b16:	07e8      	lsls	r0, r5, #31
 8010b18:	d501      	bpl.n	8010b1e <_svfprintf_r+0xb8e>
 8010b1a:	2630      	movs	r6, #48	@ 0x30
 8010b1c:	e7a8      	b.n	8010a70 <_svfprintf_r+0xae0>
 8010b1e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8010b22:	e3a7      	b.n	8011274 <_svfprintf_r+0x12e4>
 8010b24:	9b04      	ldr	r3, [sp, #16]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f000 8375 	beq.w	8011216 <_svfprintf_r+0x1286>
 8010b2c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8010b30:	2300      	movs	r3, #0
 8010b32:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8010b36:	9605      	str	r6, [sp, #20]
 8010b38:	f7ff bba2 	b.w	8010280 <_svfprintf_r+0x2f0>
 8010b3c:	2110      	movs	r1, #16
 8010b3e:	6061      	str	r1, [r4, #4]
 8010b40:	2a07      	cmp	r2, #7
 8010b42:	4461      	add	r1, ip
 8010b44:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8010b48:	dd0a      	ble.n	8010b60 <_svfprintf_r+0xbd0>
 8010b4a:	9802      	ldr	r0, [sp, #8]
 8010b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8010b4e:	aa1e      	add	r2, sp, #120	@ 0x78
 8010b50:	4651      	mov	r1, sl
 8010b52:	f001 fe5f 	bl	8012814 <__ssprint_r>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	f040 833b 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010b5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010b5e:	a821      	add	r0, sp, #132	@ 0x84
 8010b60:	3b10      	subs	r3, #16
 8010b62:	4604      	mov	r4, r0
 8010b64:	e553      	b.n	801060e <_svfprintf_r+0x67e>
 8010b66:	4604      	mov	r4, r0
 8010b68:	e56d      	b.n	8010646 <_svfprintf_r+0x6b6>
 8010b6a:	9802      	ldr	r0, [sp, #8]
 8010b6c:	aa1e      	add	r2, sp, #120	@ 0x78
 8010b6e:	4651      	mov	r1, sl
 8010b70:	f001 fe50 	bl	8012814 <__ssprint_r>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	f040 832c 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010b7a:	ac21      	add	r4, sp, #132	@ 0x84
 8010b7c:	e575      	b.n	801066a <_svfprintf_r+0x6da>
 8010b7e:	9802      	ldr	r0, [sp, #8]
 8010b80:	aa1e      	add	r2, sp, #120	@ 0x78
 8010b82:	4651      	mov	r1, sl
 8010b84:	f001 fe46 	bl	8012814 <__ssprint_r>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	f040 8322 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010b8e:	ac21      	add	r4, sp, #132	@ 0x84
 8010b90:	e57b      	b.n	801068a <_svfprintf_r+0x6fa>
 8010b92:	2110      	movs	r1, #16
 8010b94:	6061      	str	r1, [r4, #4]
 8010b96:	2a07      	cmp	r2, #7
 8010b98:	4461      	add	r1, ip
 8010b9a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8010b9e:	dd0a      	ble.n	8010bb6 <_svfprintf_r+0xc26>
 8010ba0:	9802      	ldr	r0, [sp, #8]
 8010ba2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010ba4:	aa1e      	add	r2, sp, #120	@ 0x78
 8010ba6:	4651      	mov	r1, sl
 8010ba8:	f001 fe34 	bl	8012814 <__ssprint_r>
 8010bac:	2800      	cmp	r0, #0
 8010bae:	f040 8310 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010bb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010bb4:	a821      	add	r0, sp, #132	@ 0x84
 8010bb6:	3b10      	subs	r3, #16
 8010bb8:	4604      	mov	r4, r0
 8010bba:	e56e      	b.n	801069a <_svfprintf_r+0x70a>
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	e588      	b.n	80106d2 <_svfprintf_r+0x742>
 8010bc0:	2010      	movs	r0, #16
 8010bc2:	4403      	add	r3, r0
 8010bc4:	2a07      	cmp	r2, #7
 8010bc6:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8010bca:	6060      	str	r0, [r4, #4]
 8010bcc:	dd08      	ble.n	8010be0 <_svfprintf_r+0xc50>
 8010bce:	9802      	ldr	r0, [sp, #8]
 8010bd0:	aa1e      	add	r2, sp, #120	@ 0x78
 8010bd2:	4651      	mov	r1, sl
 8010bd4:	f001 fe1e 	bl	8012814 <__ssprint_r>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	f040 82fa 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010bde:	a921      	add	r1, sp, #132	@ 0x84
 8010be0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010be2:	3b10      	subs	r3, #16
 8010be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8010be6:	460c      	mov	r4, r1
 8010be8:	e579      	b.n	80106de <_svfprintf_r+0x74e>
 8010bea:	460c      	mov	r4, r1
 8010bec:	e594      	b.n	8010718 <_svfprintf_r+0x788>
 8010bee:	bf00      	nop
 8010bf0:	08015658 	.word	0x08015658
 8010bf4:	08015669 	.word	0x08015669
 8010bf8:	9a04      	ldr	r2, [sp, #16]
 8010bfa:	2a65      	cmp	r2, #101	@ 0x65
 8010bfc:	f340 823e 	ble.w	801107c <_svfprintf_r+0x10ec>
 8010c00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c08:	d169      	bne.n	8010cde <_svfprintf_r+0xd4e>
 8010c0a:	4a72      	ldr	r2, [pc, #456]	@ (8010dd4 <_svfprintf_r+0xe44>)
 8010c0c:	6022      	str	r2, [r4, #0]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	4413      	add	r3, r2
 8010c12:	9320      	str	r3, [sp, #128]	@ 0x80
 8010c14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010c16:	6062      	str	r2, [r4, #4]
 8010c18:	4413      	add	r3, r2
 8010c1a:	2b07      	cmp	r3, #7
 8010c1c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010c1e:	dc37      	bgt.n	8010c90 <_svfprintf_r+0xd00>
 8010c20:	3408      	adds	r4, #8
 8010c22:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010c24:	9a03      	ldr	r2, [sp, #12]
 8010c26:	4293      	cmp	r3, r2
 8010c28:	db02      	blt.n	8010c30 <_svfprintf_r+0xca0>
 8010c2a:	07ea      	lsls	r2, r5, #31
 8010c2c:	f57f ad83 	bpl.w	8010736 <_svfprintf_r+0x7a6>
 8010c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c32:	6023      	str	r3, [r4, #0]
 8010c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c38:	6063      	str	r3, [r4, #4]
 8010c3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010c3c:	4413      	add	r3, r2
 8010c3e:	9320      	str	r3, [sp, #128]	@ 0x80
 8010c40:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010c42:	3301      	adds	r3, #1
 8010c44:	2b07      	cmp	r3, #7
 8010c46:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010c48:	dc2c      	bgt.n	8010ca4 <_svfprintf_r+0xd14>
 8010c4a:	3408      	adds	r4, #8
 8010c4c:	9b03      	ldr	r3, [sp, #12]
 8010c4e:	1e5e      	subs	r6, r3, #1
 8010c50:	2e00      	cmp	r6, #0
 8010c52:	f77f ad70 	ble.w	8010736 <_svfprintf_r+0x7a6>
 8010c56:	4f60      	ldr	r7, [pc, #384]	@ (8010dd8 <_svfprintf_r+0xe48>)
 8010c58:	f04f 0810 	mov.w	r8, #16
 8010c5c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8010c60:	2e10      	cmp	r6, #16
 8010c62:	f103 0301 	add.w	r3, r3, #1
 8010c66:	f104 0108 	add.w	r1, r4, #8
 8010c6a:	6027      	str	r7, [r4, #0]
 8010c6c:	dc24      	bgt.n	8010cb8 <_svfprintf_r+0xd28>
 8010c6e:	6066      	str	r6, [r4, #4]
 8010c70:	2b07      	cmp	r3, #7
 8010c72:	4416      	add	r6, r2
 8010c74:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8010c78:	f340 828a 	ble.w	8011190 <_svfprintf_r+0x1200>
 8010c7c:	9802      	ldr	r0, [sp, #8]
 8010c7e:	aa1e      	add	r2, sp, #120	@ 0x78
 8010c80:	4651      	mov	r1, sl
 8010c82:	f001 fdc7 	bl	8012814 <__ssprint_r>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	f040 82a3 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010c8c:	ac21      	add	r4, sp, #132	@ 0x84
 8010c8e:	e552      	b.n	8010736 <_svfprintf_r+0x7a6>
 8010c90:	9802      	ldr	r0, [sp, #8]
 8010c92:	aa1e      	add	r2, sp, #120	@ 0x78
 8010c94:	4651      	mov	r1, sl
 8010c96:	f001 fdbd 	bl	8012814 <__ssprint_r>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	f040 8299 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010ca0:	ac21      	add	r4, sp, #132	@ 0x84
 8010ca2:	e7be      	b.n	8010c22 <_svfprintf_r+0xc92>
 8010ca4:	9802      	ldr	r0, [sp, #8]
 8010ca6:	aa1e      	add	r2, sp, #120	@ 0x78
 8010ca8:	4651      	mov	r1, sl
 8010caa:	f001 fdb3 	bl	8012814 <__ssprint_r>
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	f040 828f 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010cb4:	ac21      	add	r4, sp, #132	@ 0x84
 8010cb6:	e7c9      	b.n	8010c4c <_svfprintf_r+0xcbc>
 8010cb8:	3210      	adds	r2, #16
 8010cba:	2b07      	cmp	r3, #7
 8010cbc:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8010cc0:	f8c4 8004 	str.w	r8, [r4, #4]
 8010cc4:	dd08      	ble.n	8010cd8 <_svfprintf_r+0xd48>
 8010cc6:	9802      	ldr	r0, [sp, #8]
 8010cc8:	aa1e      	add	r2, sp, #120	@ 0x78
 8010cca:	4651      	mov	r1, sl
 8010ccc:	f001 fda2 	bl	8012814 <__ssprint_r>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	f040 827e 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010cd6:	a921      	add	r1, sp, #132	@ 0x84
 8010cd8:	3e10      	subs	r6, #16
 8010cda:	460c      	mov	r4, r1
 8010cdc:	e7be      	b.n	8010c5c <_svfprintf_r+0xccc>
 8010cde:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010ce0:	2a00      	cmp	r2, #0
 8010ce2:	dc7b      	bgt.n	8010ddc <_svfprintf_r+0xe4c>
 8010ce4:	4a3b      	ldr	r2, [pc, #236]	@ (8010dd4 <_svfprintf_r+0xe44>)
 8010ce6:	6022      	str	r2, [r4, #0]
 8010ce8:	2201      	movs	r2, #1
 8010cea:	4413      	add	r3, r2
 8010cec:	9320      	str	r3, [sp, #128]	@ 0x80
 8010cee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010cf0:	6062      	str	r2, [r4, #4]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	2b07      	cmp	r3, #7
 8010cf6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010cf8:	dc46      	bgt.n	8010d88 <_svfprintf_r+0xdf8>
 8010cfa:	3408      	adds	r4, #8
 8010cfc:	9903      	ldr	r1, [sp, #12]
 8010cfe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010d00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010d02:	430b      	orrs	r3, r1
 8010d04:	f005 0101 	and.w	r1, r5, #1
 8010d08:	430b      	orrs	r3, r1
 8010d0a:	f43f ad14 	beq.w	8010736 <_svfprintf_r+0x7a6>
 8010d0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d10:	6023      	str	r3, [r4, #0]
 8010d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d14:	6063      	str	r3, [r4, #4]
 8010d16:	441a      	add	r2, r3
 8010d18:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010d1a:	9220      	str	r2, [sp, #128]	@ 0x80
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	2b07      	cmp	r3, #7
 8010d20:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010d22:	dc3b      	bgt.n	8010d9c <_svfprintf_r+0xe0c>
 8010d24:	f104 0308 	add.w	r3, r4, #8
 8010d28:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8010d2a:	2e00      	cmp	r6, #0
 8010d2c:	da1b      	bge.n	8010d66 <_svfprintf_r+0xdd6>
 8010d2e:	4f2a      	ldr	r7, [pc, #168]	@ (8010dd8 <_svfprintf_r+0xe48>)
 8010d30:	4276      	negs	r6, r6
 8010d32:	461a      	mov	r2, r3
 8010d34:	2410      	movs	r4, #16
 8010d36:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 8010d3a:	2e10      	cmp	r6, #16
 8010d3c:	f101 0101 	add.w	r1, r1, #1
 8010d40:	f103 0308 	add.w	r3, r3, #8
 8010d44:	6017      	str	r7, [r2, #0]
 8010d46:	dc33      	bgt.n	8010db0 <_svfprintf_r+0xe20>
 8010d48:	6056      	str	r6, [r2, #4]
 8010d4a:	2907      	cmp	r1, #7
 8010d4c:	4406      	add	r6, r0
 8010d4e:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 8010d52:	dd08      	ble.n	8010d66 <_svfprintf_r+0xdd6>
 8010d54:	9802      	ldr	r0, [sp, #8]
 8010d56:	aa1e      	add	r2, sp, #120	@ 0x78
 8010d58:	4651      	mov	r1, sl
 8010d5a:	f001 fd5b 	bl	8012814 <__ssprint_r>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	f040 8237 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010d64:	ab21      	add	r3, sp, #132	@ 0x84
 8010d66:	9a03      	ldr	r2, [sp, #12]
 8010d68:	605a      	str	r2, [r3, #4]
 8010d6a:	9903      	ldr	r1, [sp, #12]
 8010d6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010d6e:	f8c3 9000 	str.w	r9, [r3]
 8010d72:	440a      	add	r2, r1
 8010d74:	9220      	str	r2, [sp, #128]	@ 0x80
 8010d76:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8010d78:	3201      	adds	r2, #1
 8010d7a:	2a07      	cmp	r2, #7
 8010d7c:	921f      	str	r2, [sp, #124]	@ 0x7c
 8010d7e:	f73f af7d 	bgt.w	8010c7c <_svfprintf_r+0xcec>
 8010d82:	f103 0408 	add.w	r4, r3, #8
 8010d86:	e4d6      	b.n	8010736 <_svfprintf_r+0x7a6>
 8010d88:	9802      	ldr	r0, [sp, #8]
 8010d8a:	aa1e      	add	r2, sp, #120	@ 0x78
 8010d8c:	4651      	mov	r1, sl
 8010d8e:	f001 fd41 	bl	8012814 <__ssprint_r>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	f040 821d 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010d98:	ac21      	add	r4, sp, #132	@ 0x84
 8010d9a:	e7af      	b.n	8010cfc <_svfprintf_r+0xd6c>
 8010d9c:	9802      	ldr	r0, [sp, #8]
 8010d9e:	aa1e      	add	r2, sp, #120	@ 0x78
 8010da0:	4651      	mov	r1, sl
 8010da2:	f001 fd37 	bl	8012814 <__ssprint_r>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	f040 8213 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010dac:	ab21      	add	r3, sp, #132	@ 0x84
 8010dae:	e7bb      	b.n	8010d28 <_svfprintf_r+0xd98>
 8010db0:	3010      	adds	r0, #16
 8010db2:	2907      	cmp	r1, #7
 8010db4:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 8010db8:	6054      	str	r4, [r2, #4]
 8010dba:	dd08      	ble.n	8010dce <_svfprintf_r+0xe3e>
 8010dbc:	9802      	ldr	r0, [sp, #8]
 8010dbe:	aa1e      	add	r2, sp, #120	@ 0x78
 8010dc0:	4651      	mov	r1, sl
 8010dc2:	f001 fd27 	bl	8012814 <__ssprint_r>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f040 8203 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010dcc:	ab21      	add	r3, sp, #132	@ 0x84
 8010dce:	3e10      	subs	r6, #16
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	e7b0      	b.n	8010d36 <_svfprintf_r+0xda6>
 8010dd4:	0801567a 	.word	0x0801567a
 8010dd8:	0801567c 	.word	0x0801567c
 8010ddc:	9a03      	ldr	r2, [sp, #12]
 8010dde:	444a      	add	r2, r9
 8010de0:	9204      	str	r2, [sp, #16]
 8010de2:	9a03      	ldr	r2, [sp, #12]
 8010de4:	42b2      	cmp	r2, r6
 8010de6:	bfa8      	it	ge
 8010de8:	4632      	movge	r2, r6
 8010dea:	2a00      	cmp	r2, #0
 8010dec:	4690      	mov	r8, r2
 8010dee:	dd0a      	ble.n	8010e06 <_svfprintf_r+0xe76>
 8010df0:	4413      	add	r3, r2
 8010df2:	9320      	str	r3, [sp, #128]	@ 0x80
 8010df4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010df6:	3301      	adds	r3, #1
 8010df8:	2b07      	cmp	r3, #7
 8010dfa:	e9c4 9200 	strd	r9, r2, [r4]
 8010dfe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010e00:	f300 8089 	bgt.w	8010f16 <_svfprintf_r+0xf86>
 8010e04:	3408      	adds	r4, #8
 8010e06:	4643      	mov	r3, r8
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	bfac      	ite	ge
 8010e0c:	eba6 0808 	subge.w	r8, r6, r8
 8010e10:	46b0      	movlt	r8, r6
 8010e12:	f1b8 0f00 	cmp.w	r8, #0
 8010e16:	dd1b      	ble.n	8010e50 <_svfprintf_r+0xec0>
 8010e18:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8010e1c:	4896      	ldr	r0, [pc, #600]	@ (8011078 <_svfprintf_r+0x10e8>)
 8010e1e:	6020      	str	r0, [r4, #0]
 8010e20:	f1b8 0f10 	cmp.w	r8, #16
 8010e24:	f102 0201 	add.w	r2, r2, #1
 8010e28:	f104 0108 	add.w	r1, r4, #8
 8010e2c:	dc7d      	bgt.n	8010f2a <_svfprintf_r+0xf9a>
 8010e2e:	4443      	add	r3, r8
 8010e30:	2a07      	cmp	r2, #7
 8010e32:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8010e36:	f8c4 8004 	str.w	r8, [r4, #4]
 8010e3a:	f340 808a 	ble.w	8010f52 <_svfprintf_r+0xfc2>
 8010e3e:	9802      	ldr	r0, [sp, #8]
 8010e40:	aa1e      	add	r2, sp, #120	@ 0x78
 8010e42:	4651      	mov	r1, sl
 8010e44:	f001 fce6 	bl	8012814 <__ssprint_r>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	f040 81c2 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010e4e:	ac21      	add	r4, sp, #132	@ 0x84
 8010e50:	056b      	lsls	r3, r5, #21
 8010e52:	eb09 0806 	add.w	r8, r9, r6
 8010e56:	d508      	bpl.n	8010e6a <_svfprintf_r+0xeda>
 8010e58:	9b06      	ldr	r3, [sp, #24]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d17b      	bne.n	8010f56 <_svfprintf_r+0xfc6>
 8010e5e:	2f00      	cmp	r7, #0
 8010e60:	d17b      	bne.n	8010f5a <_svfprintf_r+0xfca>
 8010e62:	9b04      	ldr	r3, [sp, #16]
 8010e64:	4598      	cmp	r8, r3
 8010e66:	bf28      	it	cs
 8010e68:	4698      	movcs	r8, r3
 8010e6a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010e6c:	9a03      	ldr	r2, [sp, #12]
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	db01      	blt.n	8010e76 <_svfprintf_r+0xee6>
 8010e72:	07ee      	lsls	r6, r5, #31
 8010e74:	d50e      	bpl.n	8010e94 <_svfprintf_r+0xf04>
 8010e76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e7e:	6063      	str	r3, [r4, #4]
 8010e80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010e82:	4413      	add	r3, r2
 8010e84:	9320      	str	r3, [sp, #128]	@ 0x80
 8010e86:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010e88:	3301      	adds	r3, #1
 8010e8a:	2b07      	cmp	r3, #7
 8010e8c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010e8e:	f300 80df 	bgt.w	8011050 <_svfprintf_r+0x10c0>
 8010e92:	3408      	adds	r4, #8
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8010e98:	1bdf      	subs	r7, r3, r7
 8010e9a:	9b04      	ldr	r3, [sp, #16]
 8010e9c:	eba3 0308 	sub.w	r3, r3, r8
 8010ea0:	429f      	cmp	r7, r3
 8010ea2:	bfa8      	it	ge
 8010ea4:	461f      	movge	r7, r3
 8010ea6:	2f00      	cmp	r7, #0
 8010ea8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010eaa:	dd0a      	ble.n	8010ec2 <_svfprintf_r+0xf32>
 8010eac:	443b      	add	r3, r7
 8010eae:	9320      	str	r3, [sp, #128]	@ 0x80
 8010eb0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	2b07      	cmp	r3, #7
 8010eb6:	e9c4 8700 	strd	r8, r7, [r4]
 8010eba:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010ebc:	f300 80d2 	bgt.w	8011064 <_svfprintf_r+0x10d4>
 8010ec0:	3408      	adds	r4, #8
 8010ec2:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8010ec4:	9b03      	ldr	r3, [sp, #12]
 8010ec6:	2f00      	cmp	r7, #0
 8010ec8:	eba3 0606 	sub.w	r6, r3, r6
 8010ecc:	bfa8      	it	ge
 8010ece:	1bf6      	subge	r6, r6, r7
 8010ed0:	2e00      	cmp	r6, #0
 8010ed2:	f77f ac30 	ble.w	8010736 <_svfprintf_r+0x7a6>
 8010ed6:	4f68      	ldr	r7, [pc, #416]	@ (8011078 <_svfprintf_r+0x10e8>)
 8010ed8:	f04f 0810 	mov.w	r8, #16
 8010edc:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8010ee0:	2e10      	cmp	r6, #16
 8010ee2:	f103 0301 	add.w	r3, r3, #1
 8010ee6:	f104 0108 	add.w	r1, r4, #8
 8010eea:	6027      	str	r7, [r4, #0]
 8010eec:	f77f aebf 	ble.w	8010c6e <_svfprintf_r+0xcde>
 8010ef0:	3210      	adds	r2, #16
 8010ef2:	2b07      	cmp	r3, #7
 8010ef4:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8010ef8:	f8c4 8004 	str.w	r8, [r4, #4]
 8010efc:	dd08      	ble.n	8010f10 <_svfprintf_r+0xf80>
 8010efe:	9802      	ldr	r0, [sp, #8]
 8010f00:	aa1e      	add	r2, sp, #120	@ 0x78
 8010f02:	4651      	mov	r1, sl
 8010f04:	f001 fc86 	bl	8012814 <__ssprint_r>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	f040 8162 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010f0e:	a921      	add	r1, sp, #132	@ 0x84
 8010f10:	3e10      	subs	r6, #16
 8010f12:	460c      	mov	r4, r1
 8010f14:	e7e2      	b.n	8010edc <_svfprintf_r+0xf4c>
 8010f16:	9802      	ldr	r0, [sp, #8]
 8010f18:	aa1e      	add	r2, sp, #120	@ 0x78
 8010f1a:	4651      	mov	r1, sl
 8010f1c:	f001 fc7a 	bl	8012814 <__ssprint_r>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	f040 8156 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010f26:	ac21      	add	r4, sp, #132	@ 0x84
 8010f28:	e76d      	b.n	8010e06 <_svfprintf_r+0xe76>
 8010f2a:	2010      	movs	r0, #16
 8010f2c:	4403      	add	r3, r0
 8010f2e:	2a07      	cmp	r2, #7
 8010f30:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8010f34:	6060      	str	r0, [r4, #4]
 8010f36:	dd08      	ble.n	8010f4a <_svfprintf_r+0xfba>
 8010f38:	9802      	ldr	r0, [sp, #8]
 8010f3a:	aa1e      	add	r2, sp, #120	@ 0x78
 8010f3c:	4651      	mov	r1, sl
 8010f3e:	f001 fc69 	bl	8012814 <__ssprint_r>
 8010f42:	2800      	cmp	r0, #0
 8010f44:	f040 8145 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010f48:	a921      	add	r1, sp, #132	@ 0x84
 8010f4a:	f1a8 0810 	sub.w	r8, r8, #16
 8010f4e:	460c      	mov	r4, r1
 8010f50:	e762      	b.n	8010e18 <_svfprintf_r+0xe88>
 8010f52:	460c      	mov	r4, r1
 8010f54:	e77c      	b.n	8010e50 <_svfprintf_r+0xec0>
 8010f56:	2f00      	cmp	r7, #0
 8010f58:	d04a      	beq.n	8010ff0 <_svfprintf_r+0x1060>
 8010f5a:	3f01      	subs	r7, #1
 8010f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f5e:	6023      	str	r3, [r4, #0]
 8010f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f64:	6063      	str	r3, [r4, #4]
 8010f66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010f68:	4413      	add	r3, r2
 8010f6a:	9320      	str	r3, [sp, #128]	@ 0x80
 8010f6c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010f6e:	3301      	adds	r3, #1
 8010f70:	2b07      	cmp	r3, #7
 8010f72:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010f74:	dc43      	bgt.n	8010ffe <_svfprintf_r+0x106e>
 8010f76:	3408      	adds	r4, #8
 8010f78:	9b07      	ldr	r3, [sp, #28]
 8010f7a:	781a      	ldrb	r2, [r3, #0]
 8010f7c:	9b04      	ldr	r3, [sp, #16]
 8010f7e:	eba3 0308 	sub.w	r3, r3, r8
 8010f82:	429a      	cmp	r2, r3
 8010f84:	bfa8      	it	ge
 8010f86:	461a      	movge	r2, r3
 8010f88:	2a00      	cmp	r2, #0
 8010f8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010f8c:	4691      	mov	r9, r2
 8010f8e:	dd09      	ble.n	8010fa4 <_svfprintf_r+0x1014>
 8010f90:	4413      	add	r3, r2
 8010f92:	9320      	str	r3, [sp, #128]	@ 0x80
 8010f94:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010f96:	3301      	adds	r3, #1
 8010f98:	2b07      	cmp	r3, #7
 8010f9a:	e9c4 8200 	strd	r8, r2, [r4]
 8010f9e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010fa0:	dc37      	bgt.n	8011012 <_svfprintf_r+0x1082>
 8010fa2:	3408      	adds	r4, #8
 8010fa4:	9b07      	ldr	r3, [sp, #28]
 8010fa6:	781e      	ldrb	r6, [r3, #0]
 8010fa8:	f1b9 0f00 	cmp.w	r9, #0
 8010fac:	bfa8      	it	ge
 8010fae:	eba6 0609 	subge.w	r6, r6, r9
 8010fb2:	2e00      	cmp	r6, #0
 8010fb4:	dd18      	ble.n	8010fe8 <_svfprintf_r+0x1058>
 8010fb6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8010fba:	482f      	ldr	r0, [pc, #188]	@ (8011078 <_svfprintf_r+0x10e8>)
 8010fbc:	6020      	str	r0, [r4, #0]
 8010fbe:	2e10      	cmp	r6, #16
 8010fc0:	f103 0301 	add.w	r3, r3, #1
 8010fc4:	f104 0108 	add.w	r1, r4, #8
 8010fc8:	dc2d      	bgt.n	8011026 <_svfprintf_r+0x1096>
 8010fca:	6066      	str	r6, [r4, #4]
 8010fcc:	2b07      	cmp	r3, #7
 8010fce:	4416      	add	r6, r2
 8010fd0:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8010fd4:	dd3a      	ble.n	801104c <_svfprintf_r+0x10bc>
 8010fd6:	9802      	ldr	r0, [sp, #8]
 8010fd8:	aa1e      	add	r2, sp, #120	@ 0x78
 8010fda:	4651      	mov	r1, sl
 8010fdc:	f001 fc1a 	bl	8012814 <__ssprint_r>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	f040 80f6 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8010fe6:	ac21      	add	r4, sp, #132	@ 0x84
 8010fe8:	9b07      	ldr	r3, [sp, #28]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	4498      	add	r8, r3
 8010fee:	e733      	b.n	8010e58 <_svfprintf_r+0xec8>
 8010ff0:	9b07      	ldr	r3, [sp, #28]
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	9307      	str	r3, [sp, #28]
 8010ff6:	9b06      	ldr	r3, [sp, #24]
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	9306      	str	r3, [sp, #24]
 8010ffc:	e7ae      	b.n	8010f5c <_svfprintf_r+0xfcc>
 8010ffe:	9802      	ldr	r0, [sp, #8]
 8011000:	aa1e      	add	r2, sp, #120	@ 0x78
 8011002:	4651      	mov	r1, sl
 8011004:	f001 fc06 	bl	8012814 <__ssprint_r>
 8011008:	2800      	cmp	r0, #0
 801100a:	f040 80e2 	bne.w	80111d2 <_svfprintf_r+0x1242>
 801100e:	ac21      	add	r4, sp, #132	@ 0x84
 8011010:	e7b2      	b.n	8010f78 <_svfprintf_r+0xfe8>
 8011012:	9802      	ldr	r0, [sp, #8]
 8011014:	aa1e      	add	r2, sp, #120	@ 0x78
 8011016:	4651      	mov	r1, sl
 8011018:	f001 fbfc 	bl	8012814 <__ssprint_r>
 801101c:	2800      	cmp	r0, #0
 801101e:	f040 80d8 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8011022:	ac21      	add	r4, sp, #132	@ 0x84
 8011024:	e7be      	b.n	8010fa4 <_svfprintf_r+0x1014>
 8011026:	2010      	movs	r0, #16
 8011028:	4402      	add	r2, r0
 801102a:	2b07      	cmp	r3, #7
 801102c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011030:	6060      	str	r0, [r4, #4]
 8011032:	dd08      	ble.n	8011046 <_svfprintf_r+0x10b6>
 8011034:	9802      	ldr	r0, [sp, #8]
 8011036:	aa1e      	add	r2, sp, #120	@ 0x78
 8011038:	4651      	mov	r1, sl
 801103a:	f001 fbeb 	bl	8012814 <__ssprint_r>
 801103e:	2800      	cmp	r0, #0
 8011040:	f040 80c7 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8011044:	a921      	add	r1, sp, #132	@ 0x84
 8011046:	3e10      	subs	r6, #16
 8011048:	460c      	mov	r4, r1
 801104a:	e7b4      	b.n	8010fb6 <_svfprintf_r+0x1026>
 801104c:	460c      	mov	r4, r1
 801104e:	e7cb      	b.n	8010fe8 <_svfprintf_r+0x1058>
 8011050:	9802      	ldr	r0, [sp, #8]
 8011052:	aa1e      	add	r2, sp, #120	@ 0x78
 8011054:	4651      	mov	r1, sl
 8011056:	f001 fbdd 	bl	8012814 <__ssprint_r>
 801105a:	2800      	cmp	r0, #0
 801105c:	f040 80b9 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8011060:	ac21      	add	r4, sp, #132	@ 0x84
 8011062:	e717      	b.n	8010e94 <_svfprintf_r+0xf04>
 8011064:	9802      	ldr	r0, [sp, #8]
 8011066:	aa1e      	add	r2, sp, #120	@ 0x78
 8011068:	4651      	mov	r1, sl
 801106a:	f001 fbd3 	bl	8012814 <__ssprint_r>
 801106e:	2800      	cmp	r0, #0
 8011070:	f040 80af 	bne.w	80111d2 <_svfprintf_r+0x1242>
 8011074:	ac21      	add	r4, sp, #132	@ 0x84
 8011076:	e724      	b.n	8010ec2 <_svfprintf_r+0xf32>
 8011078:	0801567c 	.word	0x0801567c
 801107c:	9803      	ldr	r0, [sp, #12]
 801107e:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8011080:	2801      	cmp	r0, #1
 8011082:	f103 0201 	add.w	r2, r3, #1
 8011086:	f101 0101 	add.w	r1, r1, #1
 801108a:	f104 0308 	add.w	r3, r4, #8
 801108e:	dc01      	bgt.n	8011094 <_svfprintf_r+0x1104>
 8011090:	07e8      	lsls	r0, r5, #31
 8011092:	d572      	bpl.n	801117a <_svfprintf_r+0x11ea>
 8011094:	2001      	movs	r0, #1
 8011096:	2907      	cmp	r1, #7
 8011098:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 801109c:	f8c4 9000 	str.w	r9, [r4]
 80110a0:	6060      	str	r0, [r4, #4]
 80110a2:	dd08      	ble.n	80110b6 <_svfprintf_r+0x1126>
 80110a4:	9802      	ldr	r0, [sp, #8]
 80110a6:	aa1e      	add	r2, sp, #120	@ 0x78
 80110a8:	4651      	mov	r1, sl
 80110aa:	f001 fbb3 	bl	8012814 <__ssprint_r>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	f040 808f 	bne.w	80111d2 <_svfprintf_r+0x1242>
 80110b4:	ab21      	add	r3, sp, #132	@ 0x84
 80110b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80110be:	605a      	str	r2, [r3, #4]
 80110c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80110c2:	440a      	add	r2, r1
 80110c4:	9220      	str	r2, [sp, #128]	@ 0x80
 80110c6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80110c8:	3201      	adds	r2, #1
 80110ca:	2a07      	cmp	r2, #7
 80110cc:	921f      	str	r2, [sp, #124]	@ 0x7c
 80110ce:	dc25      	bgt.n	801111c <_svfprintf_r+0x118c>
 80110d0:	3308      	adds	r3, #8
 80110d2:	9803      	ldr	r0, [sp, #12]
 80110d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80110d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110dc:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 80110e0:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80110e4:	d023      	beq.n	801112e <_svfprintf_r+0x119e>
 80110e6:	f109 0001 	add.w	r0, r9, #1
 80110ea:	e9c3 0400 	strd	r0, r4, [r3]
 80110ee:	9803      	ldr	r0, [sp, #12]
 80110f0:	3101      	adds	r1, #1
 80110f2:	3a01      	subs	r2, #1
 80110f4:	4402      	add	r2, r0
 80110f6:	2907      	cmp	r1, #7
 80110f8:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 80110fc:	dd46      	ble.n	801118c <_svfprintf_r+0x11fc>
 80110fe:	9802      	ldr	r0, [sp, #8]
 8011100:	aa1e      	add	r2, sp, #120	@ 0x78
 8011102:	4651      	mov	r1, sl
 8011104:	f001 fb86 	bl	8012814 <__ssprint_r>
 8011108:	2800      	cmp	r0, #0
 801110a:	d162      	bne.n	80111d2 <_svfprintf_r+0x1242>
 801110c:	ab21      	add	r3, sp, #132	@ 0x84
 801110e:	aa1a      	add	r2, sp, #104	@ 0x68
 8011110:	601a      	str	r2, [r3, #0]
 8011112:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011114:	605a      	str	r2, [r3, #4]
 8011116:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011118:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801111a:	e62a      	b.n	8010d72 <_svfprintf_r+0xde2>
 801111c:	9802      	ldr	r0, [sp, #8]
 801111e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011120:	4651      	mov	r1, sl
 8011122:	f001 fb77 	bl	8012814 <__ssprint_r>
 8011126:	2800      	cmp	r0, #0
 8011128:	d153      	bne.n	80111d2 <_svfprintf_r+0x1242>
 801112a:	ab21      	add	r3, sp, #132	@ 0x84
 801112c:	e7d1      	b.n	80110d2 <_svfprintf_r+0x1142>
 801112e:	9a03      	ldr	r2, [sp, #12]
 8011130:	2a01      	cmp	r2, #1
 8011132:	ddec      	ble.n	801110e <_svfprintf_r+0x117e>
 8011134:	4e56      	ldr	r6, [pc, #344]	@ (8011290 <_svfprintf_r+0x1300>)
 8011136:	2710      	movs	r7, #16
 8011138:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 801113c:	2c10      	cmp	r4, #16
 801113e:	f102 0201 	add.w	r2, r2, #1
 8011142:	f103 0008 	add.w	r0, r3, #8
 8011146:	601e      	str	r6, [r3, #0]
 8011148:	dc07      	bgt.n	801115a <_svfprintf_r+0x11ca>
 801114a:	605c      	str	r4, [r3, #4]
 801114c:	2a07      	cmp	r2, #7
 801114e:	440c      	add	r4, r1
 8011150:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 8011154:	dcd3      	bgt.n	80110fe <_svfprintf_r+0x116e>
 8011156:	4603      	mov	r3, r0
 8011158:	e7d9      	b.n	801110e <_svfprintf_r+0x117e>
 801115a:	3110      	adds	r1, #16
 801115c:	2a07      	cmp	r2, #7
 801115e:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8011162:	605f      	str	r7, [r3, #4]
 8011164:	dd06      	ble.n	8011174 <_svfprintf_r+0x11e4>
 8011166:	9802      	ldr	r0, [sp, #8]
 8011168:	aa1e      	add	r2, sp, #120	@ 0x78
 801116a:	4651      	mov	r1, sl
 801116c:	f001 fb52 	bl	8012814 <__ssprint_r>
 8011170:	bb78      	cbnz	r0, 80111d2 <_svfprintf_r+0x1242>
 8011172:	a821      	add	r0, sp, #132	@ 0x84
 8011174:	3c10      	subs	r4, #16
 8011176:	4603      	mov	r3, r0
 8011178:	e7de      	b.n	8011138 <_svfprintf_r+0x11a8>
 801117a:	2001      	movs	r0, #1
 801117c:	2907      	cmp	r1, #7
 801117e:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8011182:	f8c4 9000 	str.w	r9, [r4]
 8011186:	6060      	str	r0, [r4, #4]
 8011188:	ddc1      	ble.n	801110e <_svfprintf_r+0x117e>
 801118a:	e7b8      	b.n	80110fe <_svfprintf_r+0x116e>
 801118c:	3308      	adds	r3, #8
 801118e:	e7be      	b.n	801110e <_svfprintf_r+0x117e>
 8011190:	460c      	mov	r4, r1
 8011192:	f7ff bad0 	b.w	8010736 <_svfprintf_r+0x7a6>
 8011196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801119a:	1a9d      	subs	r5, r3, r2
 801119c:	2d00      	cmp	r5, #0
 801119e:	f77f aacd 	ble.w	801073c <_svfprintf_r+0x7ac>
 80111a2:	4e3c      	ldr	r6, [pc, #240]	@ (8011294 <_svfprintf_r+0x1304>)
 80111a4:	2710      	movs	r7, #16
 80111a6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80111aa:	2d10      	cmp	r5, #16
 80111ac:	f103 0301 	add.w	r3, r3, #1
 80111b0:	6026      	str	r6, [r4, #0]
 80111b2:	dc18      	bgt.n	80111e6 <_svfprintf_r+0x1256>
 80111b4:	442a      	add	r2, r5
 80111b6:	2b07      	cmp	r3, #7
 80111b8:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80111bc:	6065      	str	r5, [r4, #4]
 80111be:	f77f aabd 	ble.w	801073c <_svfprintf_r+0x7ac>
 80111c2:	9802      	ldr	r0, [sp, #8]
 80111c4:	aa1e      	add	r2, sp, #120	@ 0x78
 80111c6:	4651      	mov	r1, sl
 80111c8:	f001 fb24 	bl	8012814 <__ssprint_r>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	f43f aab5 	beq.w	801073c <_svfprintf_r+0x7ac>
 80111d2:	f1bb 0f00 	cmp.w	fp, #0
 80111d6:	f43f a8e0 	beq.w	801039a <_svfprintf_r+0x40a>
 80111da:	9802      	ldr	r0, [sp, #8]
 80111dc:	4659      	mov	r1, fp
 80111de:	f7fe fbcf 	bl	800f980 <_free_r>
 80111e2:	f7ff b8da 	b.w	801039a <_svfprintf_r+0x40a>
 80111e6:	3210      	adds	r2, #16
 80111e8:	2b07      	cmp	r3, #7
 80111ea:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80111ee:	6067      	str	r7, [r4, #4]
 80111f0:	dc02      	bgt.n	80111f8 <_svfprintf_r+0x1268>
 80111f2:	3408      	adds	r4, #8
 80111f4:	3d10      	subs	r5, #16
 80111f6:	e7d6      	b.n	80111a6 <_svfprintf_r+0x1216>
 80111f8:	9802      	ldr	r0, [sp, #8]
 80111fa:	aa1e      	add	r2, sp, #120	@ 0x78
 80111fc:	4651      	mov	r1, sl
 80111fe:	f001 fb09 	bl	8012814 <__ssprint_r>
 8011202:	2800      	cmp	r0, #0
 8011204:	d1e5      	bne.n	80111d2 <_svfprintf_r+0x1242>
 8011206:	ac21      	add	r4, sp, #132	@ 0x84
 8011208:	e7f4      	b.n	80111f4 <_svfprintf_r+0x1264>
 801120a:	9802      	ldr	r0, [sp, #8]
 801120c:	4659      	mov	r1, fp
 801120e:	f7fe fbb7 	bl	800f980 <_free_r>
 8011212:	f7ff baab 	b.w	801076c <_svfprintf_r+0x7dc>
 8011216:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011218:	2b00      	cmp	r3, #0
 801121a:	f43f a8be 	beq.w	801039a <_svfprintf_r+0x40a>
 801121e:	9802      	ldr	r0, [sp, #8]
 8011220:	aa1e      	add	r2, sp, #120	@ 0x78
 8011222:	4651      	mov	r1, sl
 8011224:	f001 faf6 	bl	8012814 <__ssprint_r>
 8011228:	f7ff b8b7 	b.w	801039a <_svfprintf_r+0x40a>
 801122c:	ea56 0207 	orrs.w	r2, r6, r7
 8011230:	9506      	str	r5, [sp, #24]
 8011232:	f43f ab93 	beq.w	801095c <_svfprintf_r+0x9cc>
 8011236:	2b01      	cmp	r3, #1
 8011238:	f43f ac14 	beq.w	8010a64 <_svfprintf_r+0xad4>
 801123c:	2b02      	cmp	r3, #2
 801123e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8011242:	f43f ac59 	beq.w	8010af8 <_svfprintf_r+0xb68>
 8011246:	f006 0307 	and.w	r3, r6, #7
 801124a:	08f6      	lsrs	r6, r6, #3
 801124c:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8011250:	08ff      	lsrs	r7, r7, #3
 8011252:	3330      	adds	r3, #48	@ 0x30
 8011254:	ea56 0107 	orrs.w	r1, r6, r7
 8011258:	464a      	mov	r2, r9
 801125a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801125e:	d1f2      	bne.n	8011246 <_svfprintf_r+0x12b6>
 8011260:	9906      	ldr	r1, [sp, #24]
 8011262:	07cd      	lsls	r5, r1, #31
 8011264:	d506      	bpl.n	8011274 <_svfprintf_r+0x12e4>
 8011266:	2b30      	cmp	r3, #48	@ 0x30
 8011268:	d004      	beq.n	8011274 <_svfprintf_r+0x12e4>
 801126a:	2330      	movs	r3, #48	@ 0x30
 801126c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011270:	f1a2 0902 	sub.w	r9, r2, #2
 8011274:	ab4a      	add	r3, sp, #296	@ 0x128
 8011276:	9d06      	ldr	r5, [sp, #24]
 8011278:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 801127c:	f04f 0b00 	mov.w	fp, #0
 8011280:	eba3 0809 	sub.w	r8, r3, r9
 8011284:	465f      	mov	r7, fp
 8011286:	f8cd b018 	str.w	fp, [sp, #24]
 801128a:	465e      	mov	r6, fp
 801128c:	f7ff b9a4 	b.w	80105d8 <_svfprintf_r+0x648>
 8011290:	0801567c 	.word	0x0801567c
 8011294:	0801568c 	.word	0x0801568c

08011298 <_fclose_r>:
 8011298:	b570      	push	{r4, r5, r6, lr}
 801129a:	4605      	mov	r5, r0
 801129c:	460c      	mov	r4, r1
 801129e:	b1b1      	cbz	r1, 80112ce <_fclose_r+0x36>
 80112a0:	b118      	cbz	r0, 80112aa <_fclose_r+0x12>
 80112a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80112a4:	b90b      	cbnz	r3, 80112aa <_fclose_r+0x12>
 80112a6:	f7fe f9e1 	bl	800f66c <__sinit>
 80112aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112ac:	07de      	lsls	r6, r3, #31
 80112ae:	d405      	bmi.n	80112bc <_fclose_r+0x24>
 80112b0:	89a3      	ldrh	r3, [r4, #12]
 80112b2:	0598      	lsls	r0, r3, #22
 80112b4:	d402      	bmi.n	80112bc <_fclose_r+0x24>
 80112b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112b8:	f7fe faec 	bl	800f894 <__retarget_lock_acquire_recursive>
 80112bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112c0:	b943      	cbnz	r3, 80112d4 <_fclose_r+0x3c>
 80112c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112c4:	07d9      	lsls	r1, r3, #31
 80112c6:	d402      	bmi.n	80112ce <_fclose_r+0x36>
 80112c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112ca:	f7fe fae4 	bl	800f896 <__retarget_lock_release_recursive>
 80112ce:	2600      	movs	r6, #0
 80112d0:	4630      	mov	r0, r6
 80112d2:	bd70      	pop	{r4, r5, r6, pc}
 80112d4:	4621      	mov	r1, r4
 80112d6:	4628      	mov	r0, r5
 80112d8:	f000 f834 	bl	8011344 <__sflush_r>
 80112dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80112de:	4606      	mov	r6, r0
 80112e0:	b133      	cbz	r3, 80112f0 <_fclose_r+0x58>
 80112e2:	69e1      	ldr	r1, [r4, #28]
 80112e4:	4628      	mov	r0, r5
 80112e6:	4798      	blx	r3
 80112e8:	2800      	cmp	r0, #0
 80112ea:	bfb8      	it	lt
 80112ec:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	061a      	lsls	r2, r3, #24
 80112f4:	d503      	bpl.n	80112fe <_fclose_r+0x66>
 80112f6:	6921      	ldr	r1, [r4, #16]
 80112f8:	4628      	mov	r0, r5
 80112fa:	f7fe fb41 	bl	800f980 <_free_r>
 80112fe:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011300:	b141      	cbz	r1, 8011314 <_fclose_r+0x7c>
 8011302:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011306:	4299      	cmp	r1, r3
 8011308:	d002      	beq.n	8011310 <_fclose_r+0x78>
 801130a:	4628      	mov	r0, r5
 801130c:	f7fe fb38 	bl	800f980 <_free_r>
 8011310:	2300      	movs	r3, #0
 8011312:	6323      	str	r3, [r4, #48]	@ 0x30
 8011314:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011316:	b121      	cbz	r1, 8011322 <_fclose_r+0x8a>
 8011318:	4628      	mov	r0, r5
 801131a:	f7fe fb31 	bl	800f980 <_free_r>
 801131e:	2300      	movs	r3, #0
 8011320:	6463      	str	r3, [r4, #68]	@ 0x44
 8011322:	f7fe f997 	bl	800f654 <__sfp_lock_acquire>
 8011326:	2300      	movs	r3, #0
 8011328:	81a3      	strh	r3, [r4, #12]
 801132a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801132c:	07db      	lsls	r3, r3, #31
 801132e:	d402      	bmi.n	8011336 <_fclose_r+0x9e>
 8011330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011332:	f7fe fab0 	bl	800f896 <__retarget_lock_release_recursive>
 8011336:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011338:	f7fe faab 	bl	800f892 <__retarget_lock_close_recursive>
 801133c:	f7fe f990 	bl	800f660 <__sfp_lock_release>
 8011340:	e7c6      	b.n	80112d0 <_fclose_r+0x38>
	...

08011344 <__sflush_r>:
 8011344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011348:	4605      	mov	r5, r0
 801134a:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801134e:	0706      	lsls	r6, r0, #28
 8011350:	460c      	mov	r4, r1
 8011352:	d457      	bmi.n	8011404 <__sflush_r+0xc0>
 8011354:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8011358:	818b      	strh	r3, [r1, #12]
 801135a:	684b      	ldr	r3, [r1, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	dc02      	bgt.n	8011366 <__sflush_r+0x22>
 8011360:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8011362:	2b00      	cmp	r3, #0
 8011364:	dd4c      	ble.n	8011400 <__sflush_r+0xbc>
 8011366:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011368:	2e00      	cmp	r6, #0
 801136a:	d049      	beq.n	8011400 <__sflush_r+0xbc>
 801136c:	2300      	movs	r3, #0
 801136e:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8011372:	682f      	ldr	r7, [r5, #0]
 8011374:	69e1      	ldr	r1, [r4, #28]
 8011376:	602b      	str	r3, [r5, #0]
 8011378:	d034      	beq.n	80113e4 <__sflush_r+0xa0>
 801137a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801137c:	89a3      	ldrh	r3, [r4, #12]
 801137e:	0759      	lsls	r1, r3, #29
 8011380:	d505      	bpl.n	801138e <__sflush_r+0x4a>
 8011382:	6863      	ldr	r3, [r4, #4]
 8011384:	1ad2      	subs	r2, r2, r3
 8011386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011388:	b10b      	cbz	r3, 801138e <__sflush_r+0x4a>
 801138a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801138c:	1ad2      	subs	r2, r2, r3
 801138e:	2300      	movs	r3, #0
 8011390:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011392:	69e1      	ldr	r1, [r4, #28]
 8011394:	4628      	mov	r0, r5
 8011396:	47b0      	blx	r6
 8011398:	1c43      	adds	r3, r0, #1
 801139a:	d106      	bne.n	80113aa <__sflush_r+0x66>
 801139c:	682a      	ldr	r2, [r5, #0]
 801139e:	2a1d      	cmp	r2, #29
 80113a0:	d848      	bhi.n	8011434 <__sflush_r+0xf0>
 80113a2:	4b2b      	ldr	r3, [pc, #172]	@ (8011450 <__sflush_r+0x10c>)
 80113a4:	4113      	asrs	r3, r2
 80113a6:	07de      	lsls	r6, r3, #31
 80113a8:	d444      	bmi.n	8011434 <__sflush_r+0xf0>
 80113aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80113b2:	81a2      	strh	r2, [r4, #12]
 80113b4:	2200      	movs	r2, #0
 80113b6:	6062      	str	r2, [r4, #4]
 80113b8:	04d9      	lsls	r1, r3, #19
 80113ba:	6922      	ldr	r2, [r4, #16]
 80113bc:	6022      	str	r2, [r4, #0]
 80113be:	d504      	bpl.n	80113ca <__sflush_r+0x86>
 80113c0:	1c42      	adds	r2, r0, #1
 80113c2:	d101      	bne.n	80113c8 <__sflush_r+0x84>
 80113c4:	682b      	ldr	r3, [r5, #0]
 80113c6:	b903      	cbnz	r3, 80113ca <__sflush_r+0x86>
 80113c8:	6520      	str	r0, [r4, #80]	@ 0x50
 80113ca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80113cc:	602f      	str	r7, [r5, #0]
 80113ce:	b1b9      	cbz	r1, 8011400 <__sflush_r+0xbc>
 80113d0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80113d4:	4299      	cmp	r1, r3
 80113d6:	d002      	beq.n	80113de <__sflush_r+0x9a>
 80113d8:	4628      	mov	r0, r5
 80113da:	f7fe fad1 	bl	800f980 <_free_r>
 80113de:	2300      	movs	r3, #0
 80113e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80113e2:	e00d      	b.n	8011400 <__sflush_r+0xbc>
 80113e4:	2301      	movs	r3, #1
 80113e6:	4628      	mov	r0, r5
 80113e8:	47b0      	blx	r6
 80113ea:	4602      	mov	r2, r0
 80113ec:	1c50      	adds	r0, r2, #1
 80113ee:	d1c5      	bne.n	801137c <__sflush_r+0x38>
 80113f0:	682b      	ldr	r3, [r5, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d0c2      	beq.n	801137c <__sflush_r+0x38>
 80113f6:	2b1d      	cmp	r3, #29
 80113f8:	d001      	beq.n	80113fe <__sflush_r+0xba>
 80113fa:	2b16      	cmp	r3, #22
 80113fc:	d11a      	bne.n	8011434 <__sflush_r+0xf0>
 80113fe:	602f      	str	r7, [r5, #0]
 8011400:	2000      	movs	r0, #0
 8011402:	e01e      	b.n	8011442 <__sflush_r+0xfe>
 8011404:	690f      	ldr	r7, [r1, #16]
 8011406:	2f00      	cmp	r7, #0
 8011408:	d0fa      	beq.n	8011400 <__sflush_r+0xbc>
 801140a:	0783      	lsls	r3, r0, #30
 801140c:	680e      	ldr	r6, [r1, #0]
 801140e:	bf08      	it	eq
 8011410:	694b      	ldreq	r3, [r1, #20]
 8011412:	600f      	str	r7, [r1, #0]
 8011414:	bf18      	it	ne
 8011416:	2300      	movne	r3, #0
 8011418:	eba6 0807 	sub.w	r8, r6, r7
 801141c:	608b      	str	r3, [r1, #8]
 801141e:	f1b8 0f00 	cmp.w	r8, #0
 8011422:	dded      	ble.n	8011400 <__sflush_r+0xbc>
 8011424:	69e1      	ldr	r1, [r4, #28]
 8011426:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8011428:	4643      	mov	r3, r8
 801142a:	463a      	mov	r2, r7
 801142c:	4628      	mov	r0, r5
 801142e:	47b0      	blx	r6
 8011430:	2800      	cmp	r0, #0
 8011432:	dc08      	bgt.n	8011446 <__sflush_r+0x102>
 8011434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801143c:	81a3      	strh	r3, [r4, #12]
 801143e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011446:	4407      	add	r7, r0
 8011448:	eba8 0800 	sub.w	r8, r8, r0
 801144c:	e7e7      	b.n	801141e <__sflush_r+0xda>
 801144e:	bf00      	nop
 8011450:	dfbffffe 	.word	0xdfbffffe

08011454 <_fflush_r>:
 8011454:	b538      	push	{r3, r4, r5, lr}
 8011456:	460c      	mov	r4, r1
 8011458:	4605      	mov	r5, r0
 801145a:	b118      	cbz	r0, 8011464 <_fflush_r+0x10>
 801145c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801145e:	b90b      	cbnz	r3, 8011464 <_fflush_r+0x10>
 8011460:	f7fe f904 	bl	800f66c <__sinit>
 8011464:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8011468:	b1b8      	cbz	r0, 801149a <_fflush_r+0x46>
 801146a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801146c:	07db      	lsls	r3, r3, #31
 801146e:	d404      	bmi.n	801147a <_fflush_r+0x26>
 8011470:	0581      	lsls	r1, r0, #22
 8011472:	d402      	bmi.n	801147a <_fflush_r+0x26>
 8011474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011476:	f7fe fa0d 	bl	800f894 <__retarget_lock_acquire_recursive>
 801147a:	4628      	mov	r0, r5
 801147c:	4621      	mov	r1, r4
 801147e:	f7ff ff61 	bl	8011344 <__sflush_r>
 8011482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011484:	07da      	lsls	r2, r3, #31
 8011486:	4605      	mov	r5, r0
 8011488:	d405      	bmi.n	8011496 <_fflush_r+0x42>
 801148a:	89a3      	ldrh	r3, [r4, #12]
 801148c:	059b      	lsls	r3, r3, #22
 801148e:	d402      	bmi.n	8011496 <_fflush_r+0x42>
 8011490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011492:	f7fe fa00 	bl	800f896 <__retarget_lock_release_recursive>
 8011496:	4628      	mov	r0, r5
 8011498:	bd38      	pop	{r3, r4, r5, pc}
 801149a:	4605      	mov	r5, r0
 801149c:	e7fb      	b.n	8011496 <_fflush_r+0x42>

0801149e <strncpy>:
 801149e:	b510      	push	{r4, lr}
 80114a0:	3901      	subs	r1, #1
 80114a2:	4603      	mov	r3, r0
 80114a4:	b132      	cbz	r2, 80114b4 <strncpy+0x16>
 80114a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80114aa:	f803 4b01 	strb.w	r4, [r3], #1
 80114ae:	3a01      	subs	r2, #1
 80114b0:	2c00      	cmp	r4, #0
 80114b2:	d1f7      	bne.n	80114a4 <strncpy+0x6>
 80114b4:	441a      	add	r2, r3
 80114b6:	2100      	movs	r1, #0
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d100      	bne.n	80114be <strncpy+0x20>
 80114bc:	bd10      	pop	{r4, pc}
 80114be:	f803 1b01 	strb.w	r1, [r3], #1
 80114c2:	e7f9      	b.n	80114b8 <strncpy+0x1a>

080114c4 <_localeconv_r>:
 80114c4:	4800      	ldr	r0, [pc, #0]	@ (80114c8 <_localeconv_r+0x4>)
 80114c6:	4770      	bx	lr
 80114c8:	240008ac 	.word	0x240008ac

080114cc <_sbrk_r>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	4d06      	ldr	r5, [pc, #24]	@ (80114e8 <_sbrk_r+0x1c>)
 80114d0:	2300      	movs	r3, #0
 80114d2:	4604      	mov	r4, r0
 80114d4:	4608      	mov	r0, r1
 80114d6:	602b      	str	r3, [r5, #0]
 80114d8:	f7f1 fcbc 	bl	8002e54 <_sbrk>
 80114dc:	1c43      	adds	r3, r0, #1
 80114de:	d102      	bne.n	80114e6 <_sbrk_r+0x1a>
 80114e0:	682b      	ldr	r3, [r5, #0]
 80114e2:	b103      	cbz	r3, 80114e6 <_sbrk_r+0x1a>
 80114e4:	6023      	str	r3, [r4, #0]
 80114e6:	bd38      	pop	{r3, r4, r5, pc}
 80114e8:	2401533c 	.word	0x2401533c

080114ec <__libc_fini_array>:
 80114ec:	b538      	push	{r3, r4, r5, lr}
 80114ee:	4d07      	ldr	r5, [pc, #28]	@ (801150c <__libc_fini_array+0x20>)
 80114f0:	4c07      	ldr	r4, [pc, #28]	@ (8011510 <__libc_fini_array+0x24>)
 80114f2:	1b64      	subs	r4, r4, r5
 80114f4:	10a4      	asrs	r4, r4, #2
 80114f6:	b91c      	cbnz	r4, 8011500 <__libc_fini_array+0x14>
 80114f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114fc:	f003 bfc4 	b.w	8015488 <_fini>
 8011500:	3c01      	subs	r4, #1
 8011502:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011506:	4798      	blx	r3
 8011508:	e7f5      	b.n	80114f6 <__libc_fini_array+0xa>
 801150a:	bf00      	nop
 801150c:	08017d00 	.word	0x08017d00
 8011510:	08017d04 	.word	0x08017d04

08011514 <sysconf>:
 8011514:	2808      	cmp	r0, #8
 8011516:	b508      	push	{r3, lr}
 8011518:	d006      	beq.n	8011528 <sysconf+0x14>
 801151a:	f7fe f98f 	bl	800f83c <__errno>
 801151e:	2316      	movs	r3, #22
 8011520:	6003      	str	r3, [r0, #0]
 8011522:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011526:	bd08      	pop	{r3, pc}
 8011528:	2080      	movs	r0, #128	@ 0x80
 801152a:	e7fc      	b.n	8011526 <sysconf+0x12>
 801152c:	0000      	movs	r0, r0
	...

08011530 <frexp>:
 8011530:	2200      	movs	r2, #0
 8011532:	ee10 1a90 	vmov	r1, s1
 8011536:	6002      	str	r2, [r0, #0]
 8011538:	4a17      	ldr	r2, [pc, #92]	@ (8011598 <frexp+0x68>)
 801153a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801153e:	4293      	cmp	r3, r2
 8011540:	d823      	bhi.n	801158a <frexp+0x5a>
 8011542:	ee10 2a10 	vmov	r2, s0
 8011546:	431a      	orrs	r2, r3
 8011548:	d01f      	beq.n	801158a <frexp+0x5a>
 801154a:	4a14      	ldr	r2, [pc, #80]	@ (801159c <frexp+0x6c>)
 801154c:	400a      	ands	r2, r1
 801154e:	b952      	cbnz	r2, 8011566 <frexp+0x36>
 8011550:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8011590 <frexp+0x60>
 8011554:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011558:	ee10 1a90 	vmov	r1, s1
 801155c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8011560:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011564:	6002      	str	r2, [r0, #0]
 8011566:	6802      	ldr	r2, [r0, #0]
 8011568:	151b      	asrs	r3, r3, #20
 801156a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801156e:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8011572:	441a      	add	r2, r3
 8011574:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011578:	6002      	str	r2, [r0, #0]
 801157a:	ec53 2b10 	vmov	r2, r3, d0
 801157e:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 8011582:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011586:	ec43 2b10 	vmov	d0, r2, r3
 801158a:	4770      	bx	lr
 801158c:	f3af 8000 	nop.w
 8011590:	00000000 	.word	0x00000000
 8011594:	43500000 	.word	0x43500000
 8011598:	7fefffff 	.word	0x7fefffff
 801159c:	7ff00000 	.word	0x7ff00000

080115a0 <__register_exitproc>:
 80115a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115a4:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801161c <__register_exitproc+0x7c>
 80115a8:	4606      	mov	r6, r0
 80115aa:	f8da 0000 	ldr.w	r0, [sl]
 80115ae:	4698      	mov	r8, r3
 80115b0:	460f      	mov	r7, r1
 80115b2:	4691      	mov	r9, r2
 80115b4:	f7fe f96e 	bl	800f894 <__retarget_lock_acquire_recursive>
 80115b8:	4b16      	ldr	r3, [pc, #88]	@ (8011614 <__register_exitproc+0x74>)
 80115ba:	681c      	ldr	r4, [r3, #0]
 80115bc:	b90c      	cbnz	r4, 80115c2 <__register_exitproc+0x22>
 80115be:	4c16      	ldr	r4, [pc, #88]	@ (8011618 <__register_exitproc+0x78>)
 80115c0:	601c      	str	r4, [r3, #0]
 80115c2:	6865      	ldr	r5, [r4, #4]
 80115c4:	f8da 0000 	ldr.w	r0, [sl]
 80115c8:	2d1f      	cmp	r5, #31
 80115ca:	dd05      	ble.n	80115d8 <__register_exitproc+0x38>
 80115cc:	f7fe f963 	bl	800f896 <__retarget_lock_release_recursive>
 80115d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115d8:	b19e      	cbz	r6, 8011602 <__register_exitproc+0x62>
 80115da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80115de:	2201      	movs	r2, #1
 80115e0:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 80115e4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 80115e8:	40aa      	lsls	r2, r5
 80115ea:	4313      	orrs	r3, r2
 80115ec:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 80115f0:	2e02      	cmp	r6, #2
 80115f2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 80115f6:	bf02      	ittt	eq
 80115f8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80115fc:	4313      	orreq	r3, r2
 80115fe:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8011602:	1c6b      	adds	r3, r5, #1
 8011604:	3502      	adds	r5, #2
 8011606:	6063      	str	r3, [r4, #4]
 8011608:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801160c:	f7fe f943 	bl	800f896 <__retarget_lock_release_recursive>
 8011610:	2000      	movs	r0, #0
 8011612:	e7df      	b.n	80115d4 <__register_exitproc+0x34>
 8011614:	24015344 	.word	0x24015344
 8011618:	2401537c 	.word	0x2401537c
 801161c:	240003a8 	.word	0x240003a8

08011620 <quorem>:
 8011620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011624:	6903      	ldr	r3, [r0, #16]
 8011626:	690c      	ldr	r4, [r1, #16]
 8011628:	42a3      	cmp	r3, r4
 801162a:	4607      	mov	r7, r0
 801162c:	db7e      	blt.n	801172c <quorem+0x10c>
 801162e:	3c01      	subs	r4, #1
 8011630:	f101 0814 	add.w	r8, r1, #20
 8011634:	00a3      	lsls	r3, r4, #2
 8011636:	f100 0514 	add.w	r5, r0, #20
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011640:	9301      	str	r3, [sp, #4]
 8011642:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801164a:	3301      	adds	r3, #1
 801164c:	429a      	cmp	r2, r3
 801164e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011652:	fbb2 f6f3 	udiv	r6, r2, r3
 8011656:	d32e      	bcc.n	80116b6 <quorem+0x96>
 8011658:	f04f 0a00 	mov.w	sl, #0
 801165c:	46c4      	mov	ip, r8
 801165e:	46ae      	mov	lr, r5
 8011660:	46d3      	mov	fp, sl
 8011662:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011666:	b298      	uxth	r0, r3
 8011668:	fb06 a000 	mla	r0, r6, r0, sl
 801166c:	0c02      	lsrs	r2, r0, #16
 801166e:	0c1b      	lsrs	r3, r3, #16
 8011670:	fb06 2303 	mla	r3, r6, r3, r2
 8011674:	f8de 2000 	ldr.w	r2, [lr]
 8011678:	b280      	uxth	r0, r0
 801167a:	b292      	uxth	r2, r2
 801167c:	1a12      	subs	r2, r2, r0
 801167e:	445a      	add	r2, fp
 8011680:	f8de 0000 	ldr.w	r0, [lr]
 8011684:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011688:	b29b      	uxth	r3, r3
 801168a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801168e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011692:	b292      	uxth	r2, r2
 8011694:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011698:	45e1      	cmp	r9, ip
 801169a:	f84e 2b04 	str.w	r2, [lr], #4
 801169e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80116a2:	d2de      	bcs.n	8011662 <quorem+0x42>
 80116a4:	9b00      	ldr	r3, [sp, #0]
 80116a6:	58eb      	ldr	r3, [r5, r3]
 80116a8:	b92b      	cbnz	r3, 80116b6 <quorem+0x96>
 80116aa:	9b01      	ldr	r3, [sp, #4]
 80116ac:	3b04      	subs	r3, #4
 80116ae:	429d      	cmp	r5, r3
 80116b0:	461a      	mov	r2, r3
 80116b2:	d32f      	bcc.n	8011714 <quorem+0xf4>
 80116b4:	613c      	str	r4, [r7, #16]
 80116b6:	4638      	mov	r0, r7
 80116b8:	f000 ffa4 	bl	8012604 <__mcmp>
 80116bc:	2800      	cmp	r0, #0
 80116be:	db25      	blt.n	801170c <quorem+0xec>
 80116c0:	4629      	mov	r1, r5
 80116c2:	2000      	movs	r0, #0
 80116c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80116c8:	f8d1 c000 	ldr.w	ip, [r1]
 80116cc:	fa1f fe82 	uxth.w	lr, r2
 80116d0:	fa1f f38c 	uxth.w	r3, ip
 80116d4:	eba3 030e 	sub.w	r3, r3, lr
 80116d8:	4403      	add	r3, r0
 80116da:	0c12      	lsrs	r2, r2, #16
 80116dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80116e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116ea:	45c1      	cmp	r9, r8
 80116ec:	f841 3b04 	str.w	r3, [r1], #4
 80116f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80116f4:	d2e6      	bcs.n	80116c4 <quorem+0xa4>
 80116f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116fe:	b922      	cbnz	r2, 801170a <quorem+0xea>
 8011700:	3b04      	subs	r3, #4
 8011702:	429d      	cmp	r5, r3
 8011704:	461a      	mov	r2, r3
 8011706:	d30b      	bcc.n	8011720 <quorem+0x100>
 8011708:	613c      	str	r4, [r7, #16]
 801170a:	3601      	adds	r6, #1
 801170c:	4630      	mov	r0, r6
 801170e:	b003      	add	sp, #12
 8011710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011714:	6812      	ldr	r2, [r2, #0]
 8011716:	3b04      	subs	r3, #4
 8011718:	2a00      	cmp	r2, #0
 801171a:	d1cb      	bne.n	80116b4 <quorem+0x94>
 801171c:	3c01      	subs	r4, #1
 801171e:	e7c6      	b.n	80116ae <quorem+0x8e>
 8011720:	6812      	ldr	r2, [r2, #0]
 8011722:	3b04      	subs	r3, #4
 8011724:	2a00      	cmp	r2, #0
 8011726:	d1ef      	bne.n	8011708 <quorem+0xe8>
 8011728:	3c01      	subs	r4, #1
 801172a:	e7ea      	b.n	8011702 <quorem+0xe2>
 801172c:	2000      	movs	r0, #0
 801172e:	e7ee      	b.n	801170e <quorem+0xee>

08011730 <_dtoa_r>:
 8011730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011734:	ed2d 8b02 	vpush	{d8}
 8011738:	b091      	sub	sp, #68	@ 0x44
 801173a:	ed8d 0b02 	vstr	d0, [sp, #8]
 801173e:	9107      	str	r1, [sp, #28]
 8011740:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8011742:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011744:	9209      	str	r2, [sp, #36]	@ 0x24
 8011746:	ec55 4b10 	vmov	r4, r5, d0
 801174a:	4681      	mov	r9, r0
 801174c:	930d      	str	r3, [sp, #52]	@ 0x34
 801174e:	b149      	cbz	r1, 8011764 <_dtoa_r+0x34>
 8011750:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011752:	604a      	str	r2, [r1, #4]
 8011754:	2301      	movs	r3, #1
 8011756:	4093      	lsls	r3, r2
 8011758:	608b      	str	r3, [r1, #8]
 801175a:	f000 fd4c 	bl	80121f6 <_Bfree>
 801175e:	2300      	movs	r3, #0
 8011760:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 8011764:	1e2b      	subs	r3, r5, #0
 8011766:	bfbb      	ittet	lt
 8011768:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801176c:	9303      	strlt	r3, [sp, #12]
 801176e:	2300      	movge	r3, #0
 8011770:	2201      	movlt	r2, #1
 8011772:	bfac      	ite	ge
 8011774:	6033      	strge	r3, [r6, #0]
 8011776:	6032      	strlt	r2, [r6, #0]
 8011778:	4b91      	ldr	r3, [pc, #580]	@ (80119c0 <_dtoa_r+0x290>)
 801177a:	9e03      	ldr	r6, [sp, #12]
 801177c:	43b3      	bics	r3, r6
 801177e:	d114      	bne.n	80117aa <_dtoa_r+0x7a>
 8011780:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011782:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011786:	6013      	str	r3, [r2, #0]
 8011788:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801178c:	4323      	orrs	r3, r4
 801178e:	f000 84df 	beq.w	8012150 <_dtoa_r+0xa20>
 8011792:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011794:	4f8b      	ldr	r7, [pc, #556]	@ (80119c4 <_dtoa_r+0x294>)
 8011796:	b113      	cbz	r3, 801179e <_dtoa_r+0x6e>
 8011798:	1cfb      	adds	r3, r7, #3
 801179a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801179c:	6013      	str	r3, [r2, #0]
 801179e:	4638      	mov	r0, r7
 80117a0:	b011      	add	sp, #68	@ 0x44
 80117a2:	ecbd 8b02 	vpop	{d8}
 80117a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117aa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80117ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80117b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117b6:	d109      	bne.n	80117cc <_dtoa_r+0x9c>
 80117b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80117ba:	2301      	movs	r3, #1
 80117bc:	6013      	str	r3, [r2, #0]
 80117be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80117c0:	b113      	cbz	r3, 80117c8 <_dtoa_r+0x98>
 80117c2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80117c4:	4b80      	ldr	r3, [pc, #512]	@ (80119c8 <_dtoa_r+0x298>)
 80117c6:	6013      	str	r3, [r2, #0]
 80117c8:	4f80      	ldr	r7, [pc, #512]	@ (80119cc <_dtoa_r+0x29c>)
 80117ca:	e7e8      	b.n	801179e <_dtoa_r+0x6e>
 80117cc:	aa0e      	add	r2, sp, #56	@ 0x38
 80117ce:	a90f      	add	r1, sp, #60	@ 0x3c
 80117d0:	4648      	mov	r0, r9
 80117d2:	eeb0 0b48 	vmov.f64	d0, d8
 80117d6:	f000 ffc5 	bl	8012764 <__d2b>
 80117da:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80117de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117e0:	9001      	str	r0, [sp, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d045      	beq.n	8011872 <_dtoa_r+0x142>
 80117e6:	eeb0 7b48 	vmov.f64	d7, d8
 80117ea:	ee18 1a90 	vmov	r1, s17
 80117ee:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80117f2:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80117f6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80117fa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80117fe:	2500      	movs	r5, #0
 8011800:	ee07 1a90 	vmov	s15, r1
 8011804:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011808:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 80119a8 <_dtoa_r+0x278>
 801180c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011810:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 80119b0 <_dtoa_r+0x280>
 8011814:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011818:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 80119b8 <_dtoa_r+0x288>
 801181c:	ee07 3a90 	vmov	s15, r3
 8011820:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011824:	eeb0 7b46 	vmov.f64	d7, d6
 8011828:	eea4 7b05 	vfma.f64	d7, d4, d5
 801182c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011830:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011838:	ee16 8a90 	vmov	r8, s13
 801183c:	d508      	bpl.n	8011850 <_dtoa_r+0x120>
 801183e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011842:	eeb4 6b47 	vcmp.f64	d6, d7
 8011846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184a:	bf18      	it	ne
 801184c:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8011850:	f1b8 0f16 	cmp.w	r8, #22
 8011854:	d82b      	bhi.n	80118ae <_dtoa_r+0x17e>
 8011856:	495e      	ldr	r1, [pc, #376]	@ (80119d0 <_dtoa_r+0x2a0>)
 8011858:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801185c:	ed91 7b00 	vldr	d7, [r1]
 8011860:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011868:	d501      	bpl.n	801186e <_dtoa_r+0x13e>
 801186a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801186e:	2100      	movs	r1, #0
 8011870:	e01e      	b.n	80118b0 <_dtoa_r+0x180>
 8011872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011874:	4413      	add	r3, r2
 8011876:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801187a:	2920      	cmp	r1, #32
 801187c:	bfc1      	itttt	gt
 801187e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011882:	408e      	lslgt	r6, r1
 8011884:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011888:	fa24 f101 	lsrgt.w	r1, r4, r1
 801188c:	bfd6      	itet	le
 801188e:	f1c1 0120 	rsble	r1, r1, #32
 8011892:	4331      	orrgt	r1, r6
 8011894:	fa04 f101 	lslle.w	r1, r4, r1
 8011898:	ee07 1a90 	vmov	s15, r1
 801189c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80118a0:	3b01      	subs	r3, #1
 80118a2:	ee17 1a90 	vmov	r1, s15
 80118a6:	2501      	movs	r5, #1
 80118a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80118ac:	e7a8      	b.n	8011800 <_dtoa_r+0xd0>
 80118ae:	2101      	movs	r1, #1
 80118b0:	1ad2      	subs	r2, r2, r3
 80118b2:	1e53      	subs	r3, r2, #1
 80118b4:	9306      	str	r3, [sp, #24]
 80118b6:	bf45      	ittet	mi
 80118b8:	f1c2 0301 	rsbmi	r3, r2, #1
 80118bc:	9305      	strmi	r3, [sp, #20]
 80118be:	2300      	movpl	r3, #0
 80118c0:	2300      	movmi	r3, #0
 80118c2:	bf4c      	ite	mi
 80118c4:	9306      	strmi	r3, [sp, #24]
 80118c6:	9305      	strpl	r3, [sp, #20]
 80118c8:	f1b8 0f00 	cmp.w	r8, #0
 80118cc:	910c      	str	r1, [sp, #48]	@ 0x30
 80118ce:	db18      	blt.n	8011902 <_dtoa_r+0x1d2>
 80118d0:	9b06      	ldr	r3, [sp, #24]
 80118d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80118d6:	4443      	add	r3, r8
 80118d8:	9306      	str	r3, [sp, #24]
 80118da:	2300      	movs	r3, #0
 80118dc:	9a07      	ldr	r2, [sp, #28]
 80118de:	2a09      	cmp	r2, #9
 80118e0:	d84a      	bhi.n	8011978 <_dtoa_r+0x248>
 80118e2:	2a05      	cmp	r2, #5
 80118e4:	bfc4      	itt	gt
 80118e6:	3a04      	subgt	r2, #4
 80118e8:	9207      	strgt	r2, [sp, #28]
 80118ea:	9a07      	ldr	r2, [sp, #28]
 80118ec:	f1a2 0202 	sub.w	r2, r2, #2
 80118f0:	bfcc      	ite	gt
 80118f2:	2400      	movgt	r4, #0
 80118f4:	2401      	movle	r4, #1
 80118f6:	2a03      	cmp	r2, #3
 80118f8:	d849      	bhi.n	801198e <_dtoa_r+0x25e>
 80118fa:	e8df f002 	tbb	[pc, r2]
 80118fe:	2f0b      	.short	0x2f0b
 8011900:	3b2d      	.short	0x3b2d
 8011902:	9b05      	ldr	r3, [sp, #20]
 8011904:	2200      	movs	r2, #0
 8011906:	eba3 0308 	sub.w	r3, r3, r8
 801190a:	9305      	str	r3, [sp, #20]
 801190c:	920a      	str	r2, [sp, #40]	@ 0x28
 801190e:	f1c8 0300 	rsb	r3, r8, #0
 8011912:	e7e3      	b.n	80118dc <_dtoa_r+0x1ac>
 8011914:	2200      	movs	r2, #0
 8011916:	9208      	str	r2, [sp, #32]
 8011918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801191a:	2a00      	cmp	r2, #0
 801191c:	dc3a      	bgt.n	8011994 <_dtoa_r+0x264>
 801191e:	f04f 0b01 	mov.w	fp, #1
 8011922:	46da      	mov	sl, fp
 8011924:	465a      	mov	r2, fp
 8011926:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801192a:	2100      	movs	r1, #0
 801192c:	2004      	movs	r0, #4
 801192e:	f100 0614 	add.w	r6, r0, #20
 8011932:	4296      	cmp	r6, r2
 8011934:	d933      	bls.n	801199e <_dtoa_r+0x26e>
 8011936:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 801193a:	4648      	mov	r0, r9
 801193c:	9304      	str	r3, [sp, #16]
 801193e:	f000 fc35 	bl	80121ac <_Balloc>
 8011942:	9b04      	ldr	r3, [sp, #16]
 8011944:	4607      	mov	r7, r0
 8011946:	2800      	cmp	r0, #0
 8011948:	d148      	bne.n	80119dc <_dtoa_r+0x2ac>
 801194a:	4b22      	ldr	r3, [pc, #136]	@ (80119d4 <_dtoa_r+0x2a4>)
 801194c:	4602      	mov	r2, r0
 801194e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011952:	4821      	ldr	r0, [pc, #132]	@ (80119d8 <_dtoa_r+0x2a8>)
 8011954:	f000 fffc 	bl	8012950 <__assert_func>
 8011958:	2201      	movs	r2, #1
 801195a:	e7dc      	b.n	8011916 <_dtoa_r+0x1e6>
 801195c:	2200      	movs	r2, #0
 801195e:	9208      	str	r2, [sp, #32]
 8011960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011962:	eb08 0b02 	add.w	fp, r8, r2
 8011966:	f10b 0a01 	add.w	sl, fp, #1
 801196a:	4652      	mov	r2, sl
 801196c:	2a01      	cmp	r2, #1
 801196e:	bfb8      	it	lt
 8011970:	2201      	movlt	r2, #1
 8011972:	e7da      	b.n	801192a <_dtoa_r+0x1fa>
 8011974:	2201      	movs	r2, #1
 8011976:	e7f2      	b.n	801195e <_dtoa_r+0x22e>
 8011978:	2401      	movs	r4, #1
 801197a:	2200      	movs	r2, #0
 801197c:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011980:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011984:	2100      	movs	r1, #0
 8011986:	46da      	mov	sl, fp
 8011988:	2212      	movs	r2, #18
 801198a:	9109      	str	r1, [sp, #36]	@ 0x24
 801198c:	e7cd      	b.n	801192a <_dtoa_r+0x1fa>
 801198e:	2201      	movs	r2, #1
 8011990:	9208      	str	r2, [sp, #32]
 8011992:	e7f5      	b.n	8011980 <_dtoa_r+0x250>
 8011994:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011998:	46da      	mov	sl, fp
 801199a:	465a      	mov	r2, fp
 801199c:	e7c5      	b.n	801192a <_dtoa_r+0x1fa>
 801199e:	3101      	adds	r1, #1
 80119a0:	0040      	lsls	r0, r0, #1
 80119a2:	e7c4      	b.n	801192e <_dtoa_r+0x1fe>
 80119a4:	f3af 8000 	nop.w
 80119a8:	636f4361 	.word	0x636f4361
 80119ac:	3fd287a7 	.word	0x3fd287a7
 80119b0:	8b60c8b3 	.word	0x8b60c8b3
 80119b4:	3fc68a28 	.word	0x3fc68a28
 80119b8:	509f79fb 	.word	0x509f79fb
 80119bc:	3fd34413 	.word	0x3fd34413
 80119c0:	7ff00000 	.word	0x7ff00000
 80119c4:	080156a5 	.word	0x080156a5
 80119c8:	0801567b 	.word	0x0801567b
 80119cc:	0801567a 	.word	0x0801567a
 80119d0:	080157a0 	.word	0x080157a0
 80119d4:	080156a9 	.word	0x080156a9
 80119d8:	080156ba 	.word	0x080156ba
 80119dc:	f1ba 0f0e 	cmp.w	sl, #14
 80119e0:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 80119e4:	d86f      	bhi.n	8011ac6 <_dtoa_r+0x396>
 80119e6:	2c00      	cmp	r4, #0
 80119e8:	d06d      	beq.n	8011ac6 <_dtoa_r+0x396>
 80119ea:	f1b8 0f00 	cmp.w	r8, #0
 80119ee:	f340 80c2 	ble.w	8011b76 <_dtoa_r+0x446>
 80119f2:	4aca      	ldr	r2, [pc, #808]	@ (8011d1c <_dtoa_r+0x5ec>)
 80119f4:	f008 010f 	and.w	r1, r8, #15
 80119f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80119fc:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011a00:	ed92 7b00 	vldr	d7, [r2]
 8011a04:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011a08:	f000 80a9 	beq.w	8011b5e <_dtoa_r+0x42e>
 8011a0c:	4ac4      	ldr	r2, [pc, #784]	@ (8011d20 <_dtoa_r+0x5f0>)
 8011a0e:	ed92 6b08 	vldr	d6, [r2, #32]
 8011a12:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011a16:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011a1a:	f001 010f 	and.w	r1, r1, #15
 8011a1e:	2203      	movs	r2, #3
 8011a20:	48bf      	ldr	r0, [pc, #764]	@ (8011d20 <_dtoa_r+0x5f0>)
 8011a22:	2900      	cmp	r1, #0
 8011a24:	f040 809d 	bne.w	8011b62 <_dtoa_r+0x432>
 8011a28:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011a2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011a34:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011a36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a3a:	2900      	cmp	r1, #0
 8011a3c:	f000 80c1 	beq.w	8011bc2 <_dtoa_r+0x492>
 8011a40:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011a44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4c:	f140 80b9 	bpl.w	8011bc2 <_dtoa_r+0x492>
 8011a50:	f1ba 0f00 	cmp.w	sl, #0
 8011a54:	f000 80b5 	beq.w	8011bc2 <_dtoa_r+0x492>
 8011a58:	f1bb 0f00 	cmp.w	fp, #0
 8011a5c:	dd31      	ble.n	8011ac2 <_dtoa_r+0x392>
 8011a5e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011a62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011a6a:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011a6e:	9104      	str	r1, [sp, #16]
 8011a70:	3201      	adds	r2, #1
 8011a72:	465c      	mov	r4, fp
 8011a74:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011a78:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011a7c:	ee07 2a90 	vmov	s15, r2
 8011a80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011a84:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011a88:	ee15 2a90 	vmov	r2, s11
 8011a8c:	ec51 0b15 	vmov	r0, r1, d5
 8011a90:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011a94:	2c00      	cmp	r4, #0
 8011a96:	f040 8098 	bne.w	8011bca <_dtoa_r+0x49a>
 8011a9a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011a9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011aa2:	ec41 0b17 	vmov	d7, r0, r1
 8011aa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aae:	f300 8260 	bgt.w	8011f72 <_dtoa_r+0x842>
 8011ab2:	eeb1 7b47 	vneg.f64	d7, d7
 8011ab6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abe:	f100 80f5 	bmi.w	8011cac <_dtoa_r+0x57c>
 8011ac2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011ac6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011ac8:	2a00      	cmp	r2, #0
 8011aca:	f2c0 812b 	blt.w	8011d24 <_dtoa_r+0x5f4>
 8011ace:	f1b8 0f0e 	cmp.w	r8, #14
 8011ad2:	f300 8127 	bgt.w	8011d24 <_dtoa_r+0x5f4>
 8011ad6:	4b91      	ldr	r3, [pc, #580]	@ (8011d1c <_dtoa_r+0x5ec>)
 8011ad8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011adc:	ed93 6b00 	vldr	d6, [r3]
 8011ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	da03      	bge.n	8011aee <_dtoa_r+0x3be>
 8011ae6:	f1ba 0f00 	cmp.w	sl, #0
 8011aea:	f340 80d2 	ble.w	8011c92 <_dtoa_r+0x562>
 8011aee:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011af2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011af6:	463e      	mov	r6, r7
 8011af8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011afc:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011b00:	ee15 3a10 	vmov	r3, s10
 8011b04:	3330      	adds	r3, #48	@ 0x30
 8011b06:	f806 3b01 	strb.w	r3, [r6], #1
 8011b0a:	1bf3      	subs	r3, r6, r7
 8011b0c:	459a      	cmp	sl, r3
 8011b0e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011b12:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011b16:	f040 80f8 	bne.w	8011d0a <_dtoa_r+0x5da>
 8011b1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011b1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b26:	f300 80dd 	bgt.w	8011ce4 <_dtoa_r+0x5b4>
 8011b2a:	eeb4 7b46 	vcmp.f64	d7, d6
 8011b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b32:	d104      	bne.n	8011b3e <_dtoa_r+0x40e>
 8011b34:	ee15 3a10 	vmov	r3, s10
 8011b38:	07db      	lsls	r3, r3, #31
 8011b3a:	f100 80d3 	bmi.w	8011ce4 <_dtoa_r+0x5b4>
 8011b3e:	9901      	ldr	r1, [sp, #4]
 8011b40:	4648      	mov	r0, r9
 8011b42:	f000 fb58 	bl	80121f6 <_Bfree>
 8011b46:	2300      	movs	r3, #0
 8011b48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011b4a:	7033      	strb	r3, [r6, #0]
 8011b4c:	f108 0301 	add.w	r3, r8, #1
 8011b50:	6013      	str	r3, [r2, #0]
 8011b52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f43f ae22 	beq.w	801179e <_dtoa_r+0x6e>
 8011b5a:	601e      	str	r6, [r3, #0]
 8011b5c:	e61f      	b.n	801179e <_dtoa_r+0x6e>
 8011b5e:	2202      	movs	r2, #2
 8011b60:	e75e      	b.n	8011a20 <_dtoa_r+0x2f0>
 8011b62:	07cc      	lsls	r4, r1, #31
 8011b64:	d504      	bpl.n	8011b70 <_dtoa_r+0x440>
 8011b66:	ed90 6b00 	vldr	d6, [r0]
 8011b6a:	3201      	adds	r2, #1
 8011b6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b70:	1049      	asrs	r1, r1, #1
 8011b72:	3008      	adds	r0, #8
 8011b74:	e755      	b.n	8011a22 <_dtoa_r+0x2f2>
 8011b76:	d022      	beq.n	8011bbe <_dtoa_r+0x48e>
 8011b78:	f1c8 0100 	rsb	r1, r8, #0
 8011b7c:	4a67      	ldr	r2, [pc, #412]	@ (8011d1c <_dtoa_r+0x5ec>)
 8011b7e:	f001 000f 	and.w	r0, r1, #15
 8011b82:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011b86:	ed92 7b00 	vldr	d7, [r2]
 8011b8a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011b8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b92:	4863      	ldr	r0, [pc, #396]	@ (8011d20 <_dtoa_r+0x5f0>)
 8011b94:	1109      	asrs	r1, r1, #4
 8011b96:	2400      	movs	r4, #0
 8011b98:	2202      	movs	r2, #2
 8011b9a:	b929      	cbnz	r1, 8011ba8 <_dtoa_r+0x478>
 8011b9c:	2c00      	cmp	r4, #0
 8011b9e:	f43f af49 	beq.w	8011a34 <_dtoa_r+0x304>
 8011ba2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ba6:	e745      	b.n	8011a34 <_dtoa_r+0x304>
 8011ba8:	07ce      	lsls	r6, r1, #31
 8011baa:	d505      	bpl.n	8011bb8 <_dtoa_r+0x488>
 8011bac:	ed90 6b00 	vldr	d6, [r0]
 8011bb0:	3201      	adds	r2, #1
 8011bb2:	2401      	movs	r4, #1
 8011bb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bb8:	1049      	asrs	r1, r1, #1
 8011bba:	3008      	adds	r0, #8
 8011bbc:	e7ed      	b.n	8011b9a <_dtoa_r+0x46a>
 8011bbe:	2202      	movs	r2, #2
 8011bc0:	e738      	b.n	8011a34 <_dtoa_r+0x304>
 8011bc2:	f8cd 8010 	str.w	r8, [sp, #16]
 8011bc6:	4654      	mov	r4, sl
 8011bc8:	e754      	b.n	8011a74 <_dtoa_r+0x344>
 8011bca:	4a54      	ldr	r2, [pc, #336]	@ (8011d1c <_dtoa_r+0x5ec>)
 8011bcc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011bd0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011bd4:	9a08      	ldr	r2, [sp, #32]
 8011bd6:	ec41 0b17 	vmov	d7, r0, r1
 8011bda:	443c      	add	r4, r7
 8011bdc:	b34a      	cbz	r2, 8011c32 <_dtoa_r+0x502>
 8011bde:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011be2:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011be6:	463e      	mov	r6, r7
 8011be8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011bec:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011bf0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011bf4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011bf8:	ee14 2a90 	vmov	r2, s9
 8011bfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011c00:	3230      	adds	r2, #48	@ 0x30
 8011c02:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011c06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0e:	f806 2b01 	strb.w	r2, [r6], #1
 8011c12:	d438      	bmi.n	8011c86 <_dtoa_r+0x556>
 8011c14:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011c18:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c20:	d462      	bmi.n	8011ce8 <_dtoa_r+0x5b8>
 8011c22:	42a6      	cmp	r6, r4
 8011c24:	f43f af4d 	beq.w	8011ac2 <_dtoa_r+0x392>
 8011c28:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011c2c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011c30:	e7e0      	b.n	8011bf4 <_dtoa_r+0x4c4>
 8011c32:	4621      	mov	r1, r4
 8011c34:	463e      	mov	r6, r7
 8011c36:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011c3a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011c3e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011c42:	ee14 2a90 	vmov	r2, s9
 8011c46:	3230      	adds	r2, #48	@ 0x30
 8011c48:	f806 2b01 	strb.w	r2, [r6], #1
 8011c4c:	42a6      	cmp	r6, r4
 8011c4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011c52:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011c56:	d119      	bne.n	8011c8c <_dtoa_r+0x55c>
 8011c58:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8011c5c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011c60:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c68:	dc3e      	bgt.n	8011ce8 <_dtoa_r+0x5b8>
 8011c6a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011c6e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8011c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c76:	f57f af24 	bpl.w	8011ac2 <_dtoa_r+0x392>
 8011c7a:	460e      	mov	r6, r1
 8011c7c:	3901      	subs	r1, #1
 8011c7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c82:	2b30      	cmp	r3, #48	@ 0x30
 8011c84:	d0f9      	beq.n	8011c7a <_dtoa_r+0x54a>
 8011c86:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011c8a:	e758      	b.n	8011b3e <_dtoa_r+0x40e>
 8011c8c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011c90:	e7d5      	b.n	8011c3e <_dtoa_r+0x50e>
 8011c92:	d10b      	bne.n	8011cac <_dtoa_r+0x57c>
 8011c94:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011c98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ca0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca8:	f2c0 8160 	blt.w	8011f6c <_dtoa_r+0x83c>
 8011cac:	2400      	movs	r4, #0
 8011cae:	4625      	mov	r5, r4
 8011cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cb2:	43db      	mvns	r3, r3
 8011cb4:	9304      	str	r3, [sp, #16]
 8011cb6:	463e      	mov	r6, r7
 8011cb8:	f04f 0800 	mov.w	r8, #0
 8011cbc:	4621      	mov	r1, r4
 8011cbe:	4648      	mov	r0, r9
 8011cc0:	f000 fa99 	bl	80121f6 <_Bfree>
 8011cc4:	2d00      	cmp	r5, #0
 8011cc6:	d0de      	beq.n	8011c86 <_dtoa_r+0x556>
 8011cc8:	f1b8 0f00 	cmp.w	r8, #0
 8011ccc:	d005      	beq.n	8011cda <_dtoa_r+0x5aa>
 8011cce:	45a8      	cmp	r8, r5
 8011cd0:	d003      	beq.n	8011cda <_dtoa_r+0x5aa>
 8011cd2:	4641      	mov	r1, r8
 8011cd4:	4648      	mov	r0, r9
 8011cd6:	f000 fa8e 	bl	80121f6 <_Bfree>
 8011cda:	4629      	mov	r1, r5
 8011cdc:	4648      	mov	r0, r9
 8011cde:	f000 fa8a 	bl	80121f6 <_Bfree>
 8011ce2:	e7d0      	b.n	8011c86 <_dtoa_r+0x556>
 8011ce4:	f8cd 8010 	str.w	r8, [sp, #16]
 8011ce8:	4633      	mov	r3, r6
 8011cea:	461e      	mov	r6, r3
 8011cec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cf0:	2a39      	cmp	r2, #57	@ 0x39
 8011cf2:	d106      	bne.n	8011d02 <_dtoa_r+0x5d2>
 8011cf4:	429f      	cmp	r7, r3
 8011cf6:	d1f8      	bne.n	8011cea <_dtoa_r+0x5ba>
 8011cf8:	9a04      	ldr	r2, [sp, #16]
 8011cfa:	3201      	adds	r2, #1
 8011cfc:	9204      	str	r2, [sp, #16]
 8011cfe:	2230      	movs	r2, #48	@ 0x30
 8011d00:	703a      	strb	r2, [r7, #0]
 8011d02:	781a      	ldrb	r2, [r3, #0]
 8011d04:	3201      	adds	r2, #1
 8011d06:	701a      	strb	r2, [r3, #0]
 8011d08:	e7bd      	b.n	8011c86 <_dtoa_r+0x556>
 8011d0a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d16:	f47f aeef 	bne.w	8011af8 <_dtoa_r+0x3c8>
 8011d1a:	e710      	b.n	8011b3e <_dtoa_r+0x40e>
 8011d1c:	080157a0 	.word	0x080157a0
 8011d20:	08015778 	.word	0x08015778
 8011d24:	9908      	ldr	r1, [sp, #32]
 8011d26:	2900      	cmp	r1, #0
 8011d28:	f000 80e3 	beq.w	8011ef2 <_dtoa_r+0x7c2>
 8011d2c:	9907      	ldr	r1, [sp, #28]
 8011d2e:	2901      	cmp	r1, #1
 8011d30:	f300 80c8 	bgt.w	8011ec4 <_dtoa_r+0x794>
 8011d34:	2d00      	cmp	r5, #0
 8011d36:	f000 80c1 	beq.w	8011ebc <_dtoa_r+0x78c>
 8011d3a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011d3e:	9e05      	ldr	r6, [sp, #20]
 8011d40:	461c      	mov	r4, r3
 8011d42:	9304      	str	r3, [sp, #16]
 8011d44:	9b05      	ldr	r3, [sp, #20]
 8011d46:	4413      	add	r3, r2
 8011d48:	9305      	str	r3, [sp, #20]
 8011d4a:	9b06      	ldr	r3, [sp, #24]
 8011d4c:	2101      	movs	r1, #1
 8011d4e:	4413      	add	r3, r2
 8011d50:	4648      	mov	r0, r9
 8011d52:	9306      	str	r3, [sp, #24]
 8011d54:	f000 faea 	bl	801232c <__i2b>
 8011d58:	9b04      	ldr	r3, [sp, #16]
 8011d5a:	4605      	mov	r5, r0
 8011d5c:	b166      	cbz	r6, 8011d78 <_dtoa_r+0x648>
 8011d5e:	9a06      	ldr	r2, [sp, #24]
 8011d60:	2a00      	cmp	r2, #0
 8011d62:	dd09      	ble.n	8011d78 <_dtoa_r+0x648>
 8011d64:	42b2      	cmp	r2, r6
 8011d66:	9905      	ldr	r1, [sp, #20]
 8011d68:	bfa8      	it	ge
 8011d6a:	4632      	movge	r2, r6
 8011d6c:	1a89      	subs	r1, r1, r2
 8011d6e:	9105      	str	r1, [sp, #20]
 8011d70:	9906      	ldr	r1, [sp, #24]
 8011d72:	1ab6      	subs	r6, r6, r2
 8011d74:	1a8a      	subs	r2, r1, r2
 8011d76:	9206      	str	r2, [sp, #24]
 8011d78:	b1fb      	cbz	r3, 8011dba <_dtoa_r+0x68a>
 8011d7a:	9a08      	ldr	r2, [sp, #32]
 8011d7c:	2a00      	cmp	r2, #0
 8011d7e:	f000 80bc 	beq.w	8011efa <_dtoa_r+0x7ca>
 8011d82:	b19c      	cbz	r4, 8011dac <_dtoa_r+0x67c>
 8011d84:	4629      	mov	r1, r5
 8011d86:	4622      	mov	r2, r4
 8011d88:	4648      	mov	r0, r9
 8011d8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d8c:	f000 fb8e 	bl	80124ac <__pow5mult>
 8011d90:	9a01      	ldr	r2, [sp, #4]
 8011d92:	4601      	mov	r1, r0
 8011d94:	4605      	mov	r5, r0
 8011d96:	4648      	mov	r0, r9
 8011d98:	f000 fade 	bl	8012358 <__multiply>
 8011d9c:	9901      	ldr	r1, [sp, #4]
 8011d9e:	9004      	str	r0, [sp, #16]
 8011da0:	4648      	mov	r0, r9
 8011da2:	f000 fa28 	bl	80121f6 <_Bfree>
 8011da6:	9a04      	ldr	r2, [sp, #16]
 8011da8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011daa:	9201      	str	r2, [sp, #4]
 8011dac:	1b1a      	subs	r2, r3, r4
 8011dae:	d004      	beq.n	8011dba <_dtoa_r+0x68a>
 8011db0:	9901      	ldr	r1, [sp, #4]
 8011db2:	4648      	mov	r0, r9
 8011db4:	f000 fb7a 	bl	80124ac <__pow5mult>
 8011db8:	9001      	str	r0, [sp, #4]
 8011dba:	2101      	movs	r1, #1
 8011dbc:	4648      	mov	r0, r9
 8011dbe:	f000 fab5 	bl	801232c <__i2b>
 8011dc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f000 81cb 	beq.w	8012162 <_dtoa_r+0xa32>
 8011dcc:	461a      	mov	r2, r3
 8011dce:	4601      	mov	r1, r0
 8011dd0:	4648      	mov	r0, r9
 8011dd2:	f000 fb6b 	bl	80124ac <__pow5mult>
 8011dd6:	9b07      	ldr	r3, [sp, #28]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	4604      	mov	r4, r0
 8011ddc:	f300 8095 	bgt.w	8011f0a <_dtoa_r+0x7da>
 8011de0:	9b02      	ldr	r3, [sp, #8]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	f040 808b 	bne.w	8011efe <_dtoa_r+0x7ce>
 8011de8:	9b03      	ldr	r3, [sp, #12]
 8011dea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011dee:	2a00      	cmp	r2, #0
 8011df0:	f040 8087 	bne.w	8011f02 <_dtoa_r+0x7d2>
 8011df4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011df8:	0d12      	lsrs	r2, r2, #20
 8011dfa:	0512      	lsls	r2, r2, #20
 8011dfc:	2a00      	cmp	r2, #0
 8011dfe:	f000 8082 	beq.w	8011f06 <_dtoa_r+0x7d6>
 8011e02:	9b05      	ldr	r3, [sp, #20]
 8011e04:	3301      	adds	r3, #1
 8011e06:	9305      	str	r3, [sp, #20]
 8011e08:	9b06      	ldr	r3, [sp, #24]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	9306      	str	r3, [sp, #24]
 8011e0e:	2301      	movs	r3, #1
 8011e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f000 81aa 	beq.w	801216e <_dtoa_r+0xa3e>
 8011e1a:	6922      	ldr	r2, [r4, #16]
 8011e1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011e20:	6910      	ldr	r0, [r2, #16]
 8011e22:	f000 fa37 	bl	8012294 <__hi0bits>
 8011e26:	f1c0 0020 	rsb	r0, r0, #32
 8011e2a:	9b06      	ldr	r3, [sp, #24]
 8011e2c:	4418      	add	r0, r3
 8011e2e:	f010 001f 	ands.w	r0, r0, #31
 8011e32:	d076      	beq.n	8011f22 <_dtoa_r+0x7f2>
 8011e34:	f1c0 0220 	rsb	r2, r0, #32
 8011e38:	2a04      	cmp	r2, #4
 8011e3a:	dd69      	ble.n	8011f10 <_dtoa_r+0x7e0>
 8011e3c:	9b05      	ldr	r3, [sp, #20]
 8011e3e:	f1c0 001c 	rsb	r0, r0, #28
 8011e42:	4403      	add	r3, r0
 8011e44:	9305      	str	r3, [sp, #20]
 8011e46:	9b06      	ldr	r3, [sp, #24]
 8011e48:	4406      	add	r6, r0
 8011e4a:	4403      	add	r3, r0
 8011e4c:	9306      	str	r3, [sp, #24]
 8011e4e:	9b05      	ldr	r3, [sp, #20]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	dd05      	ble.n	8011e60 <_dtoa_r+0x730>
 8011e54:	9901      	ldr	r1, [sp, #4]
 8011e56:	461a      	mov	r2, r3
 8011e58:	4648      	mov	r0, r9
 8011e5a:	f000 fb67 	bl	801252c <__lshift>
 8011e5e:	9001      	str	r0, [sp, #4]
 8011e60:	9b06      	ldr	r3, [sp, #24]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dd05      	ble.n	8011e72 <_dtoa_r+0x742>
 8011e66:	4621      	mov	r1, r4
 8011e68:	461a      	mov	r2, r3
 8011e6a:	4648      	mov	r0, r9
 8011e6c:	f000 fb5e 	bl	801252c <__lshift>
 8011e70:	4604      	mov	r4, r0
 8011e72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d056      	beq.n	8011f26 <_dtoa_r+0x7f6>
 8011e78:	9801      	ldr	r0, [sp, #4]
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	f000 fbc2 	bl	8012604 <__mcmp>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	da50      	bge.n	8011f26 <_dtoa_r+0x7f6>
 8011e84:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011e88:	9304      	str	r3, [sp, #16]
 8011e8a:	9901      	ldr	r1, [sp, #4]
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	220a      	movs	r2, #10
 8011e90:	4648      	mov	r0, r9
 8011e92:	f000 f9b9 	bl	8012208 <__multadd>
 8011e96:	9b08      	ldr	r3, [sp, #32]
 8011e98:	9001      	str	r0, [sp, #4]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f000 8169 	beq.w	8012172 <_dtoa_r+0xa42>
 8011ea0:	4629      	mov	r1, r5
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	220a      	movs	r2, #10
 8011ea6:	4648      	mov	r0, r9
 8011ea8:	f000 f9ae 	bl	8012208 <__multadd>
 8011eac:	f1bb 0f00 	cmp.w	fp, #0
 8011eb0:	4605      	mov	r5, r0
 8011eb2:	dc64      	bgt.n	8011f7e <_dtoa_r+0x84e>
 8011eb4:	9b07      	ldr	r3, [sp, #28]
 8011eb6:	2b02      	cmp	r3, #2
 8011eb8:	dc3e      	bgt.n	8011f38 <_dtoa_r+0x808>
 8011eba:	e060      	b.n	8011f7e <_dtoa_r+0x84e>
 8011ebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ebe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011ec2:	e73c      	b.n	8011d3e <_dtoa_r+0x60e>
 8011ec4:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8011ec8:	42a3      	cmp	r3, r4
 8011eca:	bfbf      	itttt	lt
 8011ecc:	1ae2      	sublt	r2, r4, r3
 8011ece:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011ed0:	189b      	addlt	r3, r3, r2
 8011ed2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011ed4:	bfae      	itee	ge
 8011ed6:	1b1c      	subge	r4, r3, r4
 8011ed8:	4623      	movlt	r3, r4
 8011eda:	2400      	movlt	r4, #0
 8011edc:	f1ba 0f00 	cmp.w	sl, #0
 8011ee0:	bfb5      	itete	lt
 8011ee2:	9a05      	ldrlt	r2, [sp, #20]
 8011ee4:	9e05      	ldrge	r6, [sp, #20]
 8011ee6:	eba2 060a 	sublt.w	r6, r2, sl
 8011eea:	4652      	movge	r2, sl
 8011eec:	bfb8      	it	lt
 8011eee:	2200      	movlt	r2, #0
 8011ef0:	e727      	b.n	8011d42 <_dtoa_r+0x612>
 8011ef2:	9e05      	ldr	r6, [sp, #20]
 8011ef4:	9d08      	ldr	r5, [sp, #32]
 8011ef6:	461c      	mov	r4, r3
 8011ef8:	e730      	b.n	8011d5c <_dtoa_r+0x62c>
 8011efa:	461a      	mov	r2, r3
 8011efc:	e758      	b.n	8011db0 <_dtoa_r+0x680>
 8011efe:	2300      	movs	r3, #0
 8011f00:	e786      	b.n	8011e10 <_dtoa_r+0x6e0>
 8011f02:	9b02      	ldr	r3, [sp, #8]
 8011f04:	e784      	b.n	8011e10 <_dtoa_r+0x6e0>
 8011f06:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011f08:	e783      	b.n	8011e12 <_dtoa_r+0x6e2>
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f0e:	e784      	b.n	8011e1a <_dtoa_r+0x6ea>
 8011f10:	d09d      	beq.n	8011e4e <_dtoa_r+0x71e>
 8011f12:	9b05      	ldr	r3, [sp, #20]
 8011f14:	321c      	adds	r2, #28
 8011f16:	4413      	add	r3, r2
 8011f18:	9305      	str	r3, [sp, #20]
 8011f1a:	9b06      	ldr	r3, [sp, #24]
 8011f1c:	4416      	add	r6, r2
 8011f1e:	4413      	add	r3, r2
 8011f20:	e794      	b.n	8011e4c <_dtoa_r+0x71c>
 8011f22:	4602      	mov	r2, r0
 8011f24:	e7f5      	b.n	8011f12 <_dtoa_r+0x7e2>
 8011f26:	f1ba 0f00 	cmp.w	sl, #0
 8011f2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8011f2e:	46d3      	mov	fp, sl
 8011f30:	dc21      	bgt.n	8011f76 <_dtoa_r+0x846>
 8011f32:	9b07      	ldr	r3, [sp, #28]
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	dd1e      	ble.n	8011f76 <_dtoa_r+0x846>
 8011f38:	f1bb 0f00 	cmp.w	fp, #0
 8011f3c:	f47f aeb8 	bne.w	8011cb0 <_dtoa_r+0x580>
 8011f40:	4621      	mov	r1, r4
 8011f42:	465b      	mov	r3, fp
 8011f44:	2205      	movs	r2, #5
 8011f46:	4648      	mov	r0, r9
 8011f48:	f000 f95e 	bl	8012208 <__multadd>
 8011f4c:	4601      	mov	r1, r0
 8011f4e:	4604      	mov	r4, r0
 8011f50:	9801      	ldr	r0, [sp, #4]
 8011f52:	f000 fb57 	bl	8012604 <__mcmp>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	f77f aeaa 	ble.w	8011cb0 <_dtoa_r+0x580>
 8011f5c:	463e      	mov	r6, r7
 8011f5e:	2331      	movs	r3, #49	@ 0x31
 8011f60:	f806 3b01 	strb.w	r3, [r6], #1
 8011f64:	9b04      	ldr	r3, [sp, #16]
 8011f66:	3301      	adds	r3, #1
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	e6a5      	b.n	8011cb8 <_dtoa_r+0x588>
 8011f6c:	f8cd 8010 	str.w	r8, [sp, #16]
 8011f70:	4654      	mov	r4, sl
 8011f72:	4625      	mov	r5, r4
 8011f74:	e7f2      	b.n	8011f5c <_dtoa_r+0x82c>
 8011f76:	9b08      	ldr	r3, [sp, #32]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	f000 80fe 	beq.w	801217a <_dtoa_r+0xa4a>
 8011f7e:	2e00      	cmp	r6, #0
 8011f80:	dd05      	ble.n	8011f8e <_dtoa_r+0x85e>
 8011f82:	4629      	mov	r1, r5
 8011f84:	4632      	mov	r2, r6
 8011f86:	4648      	mov	r0, r9
 8011f88:	f000 fad0 	bl	801252c <__lshift>
 8011f8c:	4605      	mov	r5, r0
 8011f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d057      	beq.n	8012044 <_dtoa_r+0x914>
 8011f94:	6869      	ldr	r1, [r5, #4]
 8011f96:	4648      	mov	r0, r9
 8011f98:	f000 f908 	bl	80121ac <_Balloc>
 8011f9c:	4606      	mov	r6, r0
 8011f9e:	b920      	cbnz	r0, 8011faa <_dtoa_r+0x87a>
 8011fa0:	4b80      	ldr	r3, [pc, #512]	@ (80121a4 <_dtoa_r+0xa74>)
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011fa8:	e4d3      	b.n	8011952 <_dtoa_r+0x222>
 8011faa:	692a      	ldr	r2, [r5, #16]
 8011fac:	3202      	adds	r2, #2
 8011fae:	0092      	lsls	r2, r2, #2
 8011fb0:	f105 010c 	add.w	r1, r5, #12
 8011fb4:	300c      	adds	r0, #12
 8011fb6:	f7fd fc6f 	bl	800f898 <memcpy>
 8011fba:	2201      	movs	r2, #1
 8011fbc:	4631      	mov	r1, r6
 8011fbe:	4648      	mov	r0, r9
 8011fc0:	f000 fab4 	bl	801252c <__lshift>
 8011fc4:	1c7b      	adds	r3, r7, #1
 8011fc6:	9305      	str	r3, [sp, #20]
 8011fc8:	eb07 030b 	add.w	r3, r7, fp
 8011fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fce:	9b02      	ldr	r3, [sp, #8]
 8011fd0:	f003 0301 	and.w	r3, r3, #1
 8011fd4:	46a8      	mov	r8, r5
 8011fd6:	9308      	str	r3, [sp, #32]
 8011fd8:	4605      	mov	r5, r0
 8011fda:	9b05      	ldr	r3, [sp, #20]
 8011fdc:	9801      	ldr	r0, [sp, #4]
 8011fde:	4621      	mov	r1, r4
 8011fe0:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8011fe4:	f7ff fb1c 	bl	8011620 <quorem>
 8011fe8:	4641      	mov	r1, r8
 8011fea:	9002      	str	r0, [sp, #8]
 8011fec:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011ff0:	9801      	ldr	r0, [sp, #4]
 8011ff2:	f000 fb07 	bl	8012604 <__mcmp>
 8011ff6:	462a      	mov	r2, r5
 8011ff8:	9006      	str	r0, [sp, #24]
 8011ffa:	4621      	mov	r1, r4
 8011ffc:	4648      	mov	r0, r9
 8011ffe:	f000 fb1d 	bl	801263c <__mdiff>
 8012002:	68c2      	ldr	r2, [r0, #12]
 8012004:	4606      	mov	r6, r0
 8012006:	b9fa      	cbnz	r2, 8012048 <_dtoa_r+0x918>
 8012008:	4601      	mov	r1, r0
 801200a:	9801      	ldr	r0, [sp, #4]
 801200c:	f000 fafa 	bl	8012604 <__mcmp>
 8012010:	4602      	mov	r2, r0
 8012012:	4631      	mov	r1, r6
 8012014:	4648      	mov	r0, r9
 8012016:	920a      	str	r2, [sp, #40]	@ 0x28
 8012018:	f000 f8ed 	bl	80121f6 <_Bfree>
 801201c:	9b07      	ldr	r3, [sp, #28]
 801201e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012020:	9e05      	ldr	r6, [sp, #20]
 8012022:	ea43 0102 	orr.w	r1, r3, r2
 8012026:	9b08      	ldr	r3, [sp, #32]
 8012028:	4319      	orrs	r1, r3
 801202a:	d10f      	bne.n	801204c <_dtoa_r+0x91c>
 801202c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012030:	d028      	beq.n	8012084 <_dtoa_r+0x954>
 8012032:	9b06      	ldr	r3, [sp, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	dd02      	ble.n	801203e <_dtoa_r+0x90e>
 8012038:	9b02      	ldr	r3, [sp, #8]
 801203a:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801203e:	f88b a000 	strb.w	sl, [fp]
 8012042:	e63b      	b.n	8011cbc <_dtoa_r+0x58c>
 8012044:	4628      	mov	r0, r5
 8012046:	e7bd      	b.n	8011fc4 <_dtoa_r+0x894>
 8012048:	2201      	movs	r2, #1
 801204a:	e7e2      	b.n	8012012 <_dtoa_r+0x8e2>
 801204c:	9b06      	ldr	r3, [sp, #24]
 801204e:	2b00      	cmp	r3, #0
 8012050:	db04      	blt.n	801205c <_dtoa_r+0x92c>
 8012052:	9907      	ldr	r1, [sp, #28]
 8012054:	430b      	orrs	r3, r1
 8012056:	9908      	ldr	r1, [sp, #32]
 8012058:	430b      	orrs	r3, r1
 801205a:	d120      	bne.n	801209e <_dtoa_r+0x96e>
 801205c:	2a00      	cmp	r2, #0
 801205e:	ddee      	ble.n	801203e <_dtoa_r+0x90e>
 8012060:	9901      	ldr	r1, [sp, #4]
 8012062:	2201      	movs	r2, #1
 8012064:	4648      	mov	r0, r9
 8012066:	f000 fa61 	bl	801252c <__lshift>
 801206a:	4621      	mov	r1, r4
 801206c:	9001      	str	r0, [sp, #4]
 801206e:	f000 fac9 	bl	8012604 <__mcmp>
 8012072:	2800      	cmp	r0, #0
 8012074:	dc03      	bgt.n	801207e <_dtoa_r+0x94e>
 8012076:	d1e2      	bne.n	801203e <_dtoa_r+0x90e>
 8012078:	f01a 0f01 	tst.w	sl, #1
 801207c:	d0df      	beq.n	801203e <_dtoa_r+0x90e>
 801207e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012082:	d1d9      	bne.n	8012038 <_dtoa_r+0x908>
 8012084:	2339      	movs	r3, #57	@ 0x39
 8012086:	f88b 3000 	strb.w	r3, [fp]
 801208a:	4633      	mov	r3, r6
 801208c:	461e      	mov	r6, r3
 801208e:	3b01      	subs	r3, #1
 8012090:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012094:	2a39      	cmp	r2, #57	@ 0x39
 8012096:	d053      	beq.n	8012140 <_dtoa_r+0xa10>
 8012098:	3201      	adds	r2, #1
 801209a:	701a      	strb	r2, [r3, #0]
 801209c:	e60e      	b.n	8011cbc <_dtoa_r+0x58c>
 801209e:	2a00      	cmp	r2, #0
 80120a0:	dd07      	ble.n	80120b2 <_dtoa_r+0x982>
 80120a2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80120a6:	d0ed      	beq.n	8012084 <_dtoa_r+0x954>
 80120a8:	f10a 0301 	add.w	r3, sl, #1
 80120ac:	f88b 3000 	strb.w	r3, [fp]
 80120b0:	e604      	b.n	8011cbc <_dtoa_r+0x58c>
 80120b2:	9b05      	ldr	r3, [sp, #20]
 80120b4:	9a05      	ldr	r2, [sp, #20]
 80120b6:	f803 ac01 	strb.w	sl, [r3, #-1]
 80120ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120bc:	4293      	cmp	r3, r2
 80120be:	d029      	beq.n	8012114 <_dtoa_r+0x9e4>
 80120c0:	9901      	ldr	r1, [sp, #4]
 80120c2:	2300      	movs	r3, #0
 80120c4:	220a      	movs	r2, #10
 80120c6:	4648      	mov	r0, r9
 80120c8:	f000 f89e 	bl	8012208 <__multadd>
 80120cc:	45a8      	cmp	r8, r5
 80120ce:	9001      	str	r0, [sp, #4]
 80120d0:	f04f 0300 	mov.w	r3, #0
 80120d4:	f04f 020a 	mov.w	r2, #10
 80120d8:	4641      	mov	r1, r8
 80120da:	4648      	mov	r0, r9
 80120dc:	d107      	bne.n	80120ee <_dtoa_r+0x9be>
 80120de:	f000 f893 	bl	8012208 <__multadd>
 80120e2:	4680      	mov	r8, r0
 80120e4:	4605      	mov	r5, r0
 80120e6:	9b05      	ldr	r3, [sp, #20]
 80120e8:	3301      	adds	r3, #1
 80120ea:	9305      	str	r3, [sp, #20]
 80120ec:	e775      	b.n	8011fda <_dtoa_r+0x8aa>
 80120ee:	f000 f88b 	bl	8012208 <__multadd>
 80120f2:	4629      	mov	r1, r5
 80120f4:	4680      	mov	r8, r0
 80120f6:	2300      	movs	r3, #0
 80120f8:	220a      	movs	r2, #10
 80120fa:	4648      	mov	r0, r9
 80120fc:	f000 f884 	bl	8012208 <__multadd>
 8012100:	4605      	mov	r5, r0
 8012102:	e7f0      	b.n	80120e6 <_dtoa_r+0x9b6>
 8012104:	f1bb 0f00 	cmp.w	fp, #0
 8012108:	bfcc      	ite	gt
 801210a:	465e      	movgt	r6, fp
 801210c:	2601      	movle	r6, #1
 801210e:	443e      	add	r6, r7
 8012110:	f04f 0800 	mov.w	r8, #0
 8012114:	9901      	ldr	r1, [sp, #4]
 8012116:	2201      	movs	r2, #1
 8012118:	4648      	mov	r0, r9
 801211a:	f000 fa07 	bl	801252c <__lshift>
 801211e:	4621      	mov	r1, r4
 8012120:	9001      	str	r0, [sp, #4]
 8012122:	f000 fa6f 	bl	8012604 <__mcmp>
 8012126:	2800      	cmp	r0, #0
 8012128:	dcaf      	bgt.n	801208a <_dtoa_r+0x95a>
 801212a:	d102      	bne.n	8012132 <_dtoa_r+0xa02>
 801212c:	f01a 0f01 	tst.w	sl, #1
 8012130:	d1ab      	bne.n	801208a <_dtoa_r+0x95a>
 8012132:	4633      	mov	r3, r6
 8012134:	461e      	mov	r6, r3
 8012136:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801213a:	2a30      	cmp	r2, #48	@ 0x30
 801213c:	d0fa      	beq.n	8012134 <_dtoa_r+0xa04>
 801213e:	e5bd      	b.n	8011cbc <_dtoa_r+0x58c>
 8012140:	429f      	cmp	r7, r3
 8012142:	d1a3      	bne.n	801208c <_dtoa_r+0x95c>
 8012144:	9b04      	ldr	r3, [sp, #16]
 8012146:	3301      	adds	r3, #1
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	2331      	movs	r3, #49	@ 0x31
 801214c:	703b      	strb	r3, [r7, #0]
 801214e:	e5b5      	b.n	8011cbc <_dtoa_r+0x58c>
 8012150:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012152:	4f15      	ldr	r7, [pc, #84]	@ (80121a8 <_dtoa_r+0xa78>)
 8012154:	2b00      	cmp	r3, #0
 8012156:	f43f ab22 	beq.w	801179e <_dtoa_r+0x6e>
 801215a:	f107 0308 	add.w	r3, r7, #8
 801215e:	f7ff bb1c 	b.w	801179a <_dtoa_r+0x6a>
 8012162:	9b07      	ldr	r3, [sp, #28]
 8012164:	2b01      	cmp	r3, #1
 8012166:	f77f ae3b 	ble.w	8011de0 <_dtoa_r+0x6b0>
 801216a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801216c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801216e:	2001      	movs	r0, #1
 8012170:	e65b      	b.n	8011e2a <_dtoa_r+0x6fa>
 8012172:	f1bb 0f00 	cmp.w	fp, #0
 8012176:	f77f aedc 	ble.w	8011f32 <_dtoa_r+0x802>
 801217a:	463e      	mov	r6, r7
 801217c:	9801      	ldr	r0, [sp, #4]
 801217e:	4621      	mov	r1, r4
 8012180:	f7ff fa4e 	bl	8011620 <quorem>
 8012184:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012188:	f806 ab01 	strb.w	sl, [r6], #1
 801218c:	1bf2      	subs	r2, r6, r7
 801218e:	4593      	cmp	fp, r2
 8012190:	ddb8      	ble.n	8012104 <_dtoa_r+0x9d4>
 8012192:	9901      	ldr	r1, [sp, #4]
 8012194:	2300      	movs	r3, #0
 8012196:	220a      	movs	r2, #10
 8012198:	4648      	mov	r0, r9
 801219a:	f000 f835 	bl	8012208 <__multadd>
 801219e:	9001      	str	r0, [sp, #4]
 80121a0:	e7ec      	b.n	801217c <_dtoa_r+0xa4c>
 80121a2:	bf00      	nop
 80121a4:	080156a9 	.word	0x080156a9
 80121a8:	0801569c 	.word	0x0801569c

080121ac <_Balloc>:
 80121ac:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80121ae:	b570      	push	{r4, r5, r6, lr}
 80121b0:	4605      	mov	r5, r0
 80121b2:	460c      	mov	r4, r1
 80121b4:	b17b      	cbz	r3, 80121d6 <_Balloc+0x2a>
 80121b6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80121b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80121bc:	b9a0      	cbnz	r0, 80121e8 <_Balloc+0x3c>
 80121be:	2101      	movs	r1, #1
 80121c0:	fa01 f604 	lsl.w	r6, r1, r4
 80121c4:	1d72      	adds	r2, r6, #5
 80121c6:	0092      	lsls	r2, r2, #2
 80121c8:	4628      	mov	r0, r5
 80121ca:	f000 fbdf 	bl	801298c <_calloc_r>
 80121ce:	b148      	cbz	r0, 80121e4 <_Balloc+0x38>
 80121d0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80121d4:	e00b      	b.n	80121ee <_Balloc+0x42>
 80121d6:	2221      	movs	r2, #33	@ 0x21
 80121d8:	2104      	movs	r1, #4
 80121da:	f000 fbd7 	bl	801298c <_calloc_r>
 80121de:	6468      	str	r0, [r5, #68]	@ 0x44
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d1e8      	bne.n	80121b6 <_Balloc+0xa>
 80121e4:	2000      	movs	r0, #0
 80121e6:	bd70      	pop	{r4, r5, r6, pc}
 80121e8:	6802      	ldr	r2, [r0, #0]
 80121ea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80121ee:	2300      	movs	r3, #0
 80121f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121f4:	e7f7      	b.n	80121e6 <_Balloc+0x3a>

080121f6 <_Bfree>:
 80121f6:	b131      	cbz	r1, 8012206 <_Bfree+0x10>
 80121f8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80121fa:	684a      	ldr	r2, [r1, #4]
 80121fc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012200:	6008      	str	r0, [r1, #0]
 8012202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012206:	4770      	bx	lr

08012208 <__multadd>:
 8012208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801220c:	690d      	ldr	r5, [r1, #16]
 801220e:	4607      	mov	r7, r0
 8012210:	460c      	mov	r4, r1
 8012212:	461e      	mov	r6, r3
 8012214:	f101 0c14 	add.w	ip, r1, #20
 8012218:	2000      	movs	r0, #0
 801221a:	f8dc 3000 	ldr.w	r3, [ip]
 801221e:	b299      	uxth	r1, r3
 8012220:	fb02 6101 	mla	r1, r2, r1, r6
 8012224:	0c1e      	lsrs	r6, r3, #16
 8012226:	0c0b      	lsrs	r3, r1, #16
 8012228:	fb02 3306 	mla	r3, r2, r6, r3
 801222c:	b289      	uxth	r1, r1
 801222e:	3001      	adds	r0, #1
 8012230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012234:	4285      	cmp	r5, r0
 8012236:	f84c 1b04 	str.w	r1, [ip], #4
 801223a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801223e:	dcec      	bgt.n	801221a <__multadd+0x12>
 8012240:	b30e      	cbz	r6, 8012286 <__multadd+0x7e>
 8012242:	68a3      	ldr	r3, [r4, #8]
 8012244:	42ab      	cmp	r3, r5
 8012246:	dc19      	bgt.n	801227c <__multadd+0x74>
 8012248:	6861      	ldr	r1, [r4, #4]
 801224a:	4638      	mov	r0, r7
 801224c:	3101      	adds	r1, #1
 801224e:	f7ff ffad 	bl	80121ac <_Balloc>
 8012252:	4680      	mov	r8, r0
 8012254:	b928      	cbnz	r0, 8012262 <__multadd+0x5a>
 8012256:	4602      	mov	r2, r0
 8012258:	4b0c      	ldr	r3, [pc, #48]	@ (801228c <__multadd+0x84>)
 801225a:	480d      	ldr	r0, [pc, #52]	@ (8012290 <__multadd+0x88>)
 801225c:	21ba      	movs	r1, #186	@ 0xba
 801225e:	f000 fb77 	bl	8012950 <__assert_func>
 8012262:	6922      	ldr	r2, [r4, #16]
 8012264:	3202      	adds	r2, #2
 8012266:	f104 010c 	add.w	r1, r4, #12
 801226a:	0092      	lsls	r2, r2, #2
 801226c:	300c      	adds	r0, #12
 801226e:	f7fd fb13 	bl	800f898 <memcpy>
 8012272:	4621      	mov	r1, r4
 8012274:	4638      	mov	r0, r7
 8012276:	f7ff ffbe 	bl	80121f6 <_Bfree>
 801227a:	4644      	mov	r4, r8
 801227c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012280:	3501      	adds	r5, #1
 8012282:	615e      	str	r6, [r3, #20]
 8012284:	6125      	str	r5, [r4, #16]
 8012286:	4620      	mov	r0, r4
 8012288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801228c:	080156a9 	.word	0x080156a9
 8012290:	08015712 	.word	0x08015712

08012294 <__hi0bits>:
 8012294:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012298:	4603      	mov	r3, r0
 801229a:	bf36      	itet	cc
 801229c:	0403      	lslcc	r3, r0, #16
 801229e:	2000      	movcs	r0, #0
 80122a0:	2010      	movcc	r0, #16
 80122a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122a6:	bf3c      	itt	cc
 80122a8:	021b      	lslcc	r3, r3, #8
 80122aa:	3008      	addcc	r0, #8
 80122ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122b0:	bf3c      	itt	cc
 80122b2:	011b      	lslcc	r3, r3, #4
 80122b4:	3004      	addcc	r0, #4
 80122b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122ba:	bf3c      	itt	cc
 80122bc:	009b      	lslcc	r3, r3, #2
 80122be:	3002      	addcc	r0, #2
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	db05      	blt.n	80122d0 <__hi0bits+0x3c>
 80122c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80122c8:	f100 0001 	add.w	r0, r0, #1
 80122cc:	bf08      	it	eq
 80122ce:	2020      	moveq	r0, #32
 80122d0:	4770      	bx	lr

080122d2 <__lo0bits>:
 80122d2:	6803      	ldr	r3, [r0, #0]
 80122d4:	4602      	mov	r2, r0
 80122d6:	f013 0007 	ands.w	r0, r3, #7
 80122da:	d00b      	beq.n	80122f4 <__lo0bits+0x22>
 80122dc:	07d9      	lsls	r1, r3, #31
 80122de:	d421      	bmi.n	8012324 <__lo0bits+0x52>
 80122e0:	0798      	lsls	r0, r3, #30
 80122e2:	bf49      	itett	mi
 80122e4:	085b      	lsrmi	r3, r3, #1
 80122e6:	089b      	lsrpl	r3, r3, #2
 80122e8:	2001      	movmi	r0, #1
 80122ea:	6013      	strmi	r3, [r2, #0]
 80122ec:	bf5c      	itt	pl
 80122ee:	6013      	strpl	r3, [r2, #0]
 80122f0:	2002      	movpl	r0, #2
 80122f2:	4770      	bx	lr
 80122f4:	b299      	uxth	r1, r3
 80122f6:	b909      	cbnz	r1, 80122fc <__lo0bits+0x2a>
 80122f8:	0c1b      	lsrs	r3, r3, #16
 80122fa:	2010      	movs	r0, #16
 80122fc:	b2d9      	uxtb	r1, r3
 80122fe:	b909      	cbnz	r1, 8012304 <__lo0bits+0x32>
 8012300:	3008      	adds	r0, #8
 8012302:	0a1b      	lsrs	r3, r3, #8
 8012304:	0719      	lsls	r1, r3, #28
 8012306:	bf04      	itt	eq
 8012308:	091b      	lsreq	r3, r3, #4
 801230a:	3004      	addeq	r0, #4
 801230c:	0799      	lsls	r1, r3, #30
 801230e:	bf04      	itt	eq
 8012310:	089b      	lsreq	r3, r3, #2
 8012312:	3002      	addeq	r0, #2
 8012314:	07d9      	lsls	r1, r3, #31
 8012316:	d403      	bmi.n	8012320 <__lo0bits+0x4e>
 8012318:	085b      	lsrs	r3, r3, #1
 801231a:	f100 0001 	add.w	r0, r0, #1
 801231e:	d003      	beq.n	8012328 <__lo0bits+0x56>
 8012320:	6013      	str	r3, [r2, #0]
 8012322:	4770      	bx	lr
 8012324:	2000      	movs	r0, #0
 8012326:	4770      	bx	lr
 8012328:	2020      	movs	r0, #32
 801232a:	4770      	bx	lr

0801232c <__i2b>:
 801232c:	b510      	push	{r4, lr}
 801232e:	460c      	mov	r4, r1
 8012330:	2101      	movs	r1, #1
 8012332:	f7ff ff3b 	bl	80121ac <_Balloc>
 8012336:	4602      	mov	r2, r0
 8012338:	b928      	cbnz	r0, 8012346 <__i2b+0x1a>
 801233a:	4b05      	ldr	r3, [pc, #20]	@ (8012350 <__i2b+0x24>)
 801233c:	4805      	ldr	r0, [pc, #20]	@ (8012354 <__i2b+0x28>)
 801233e:	f240 1145 	movw	r1, #325	@ 0x145
 8012342:	f000 fb05 	bl	8012950 <__assert_func>
 8012346:	2301      	movs	r3, #1
 8012348:	6144      	str	r4, [r0, #20]
 801234a:	6103      	str	r3, [r0, #16]
 801234c:	bd10      	pop	{r4, pc}
 801234e:	bf00      	nop
 8012350:	080156a9 	.word	0x080156a9
 8012354:	08015712 	.word	0x08015712

08012358 <__multiply>:
 8012358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801235c:	4614      	mov	r4, r2
 801235e:	690a      	ldr	r2, [r1, #16]
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	429a      	cmp	r2, r3
 8012364:	bfa8      	it	ge
 8012366:	4623      	movge	r3, r4
 8012368:	460f      	mov	r7, r1
 801236a:	bfa4      	itt	ge
 801236c:	460c      	movge	r4, r1
 801236e:	461f      	movge	r7, r3
 8012370:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012374:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012378:	68a3      	ldr	r3, [r4, #8]
 801237a:	6861      	ldr	r1, [r4, #4]
 801237c:	eb0a 0609 	add.w	r6, sl, r9
 8012380:	42b3      	cmp	r3, r6
 8012382:	b085      	sub	sp, #20
 8012384:	bfb8      	it	lt
 8012386:	3101      	addlt	r1, #1
 8012388:	f7ff ff10 	bl	80121ac <_Balloc>
 801238c:	b930      	cbnz	r0, 801239c <__multiply+0x44>
 801238e:	4602      	mov	r2, r0
 8012390:	4b44      	ldr	r3, [pc, #272]	@ (80124a4 <__multiply+0x14c>)
 8012392:	4845      	ldr	r0, [pc, #276]	@ (80124a8 <__multiply+0x150>)
 8012394:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012398:	f000 fada 	bl	8012950 <__assert_func>
 801239c:	f100 0514 	add.w	r5, r0, #20
 80123a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123a4:	462b      	mov	r3, r5
 80123a6:	2200      	movs	r2, #0
 80123a8:	4543      	cmp	r3, r8
 80123aa:	d321      	bcc.n	80123f0 <__multiply+0x98>
 80123ac:	f107 0114 	add.w	r1, r7, #20
 80123b0:	f104 0214 	add.w	r2, r4, #20
 80123b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80123b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80123bc:	9302      	str	r3, [sp, #8]
 80123be:	1b13      	subs	r3, r2, r4
 80123c0:	3b15      	subs	r3, #21
 80123c2:	f023 0303 	bic.w	r3, r3, #3
 80123c6:	3304      	adds	r3, #4
 80123c8:	f104 0715 	add.w	r7, r4, #21
 80123cc:	42ba      	cmp	r2, r7
 80123ce:	bf38      	it	cc
 80123d0:	2304      	movcc	r3, #4
 80123d2:	9301      	str	r3, [sp, #4]
 80123d4:	9b02      	ldr	r3, [sp, #8]
 80123d6:	9103      	str	r1, [sp, #12]
 80123d8:	428b      	cmp	r3, r1
 80123da:	d80c      	bhi.n	80123f6 <__multiply+0x9e>
 80123dc:	2e00      	cmp	r6, #0
 80123de:	dd03      	ble.n	80123e8 <__multiply+0x90>
 80123e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d05b      	beq.n	80124a0 <__multiply+0x148>
 80123e8:	6106      	str	r6, [r0, #16]
 80123ea:	b005      	add	sp, #20
 80123ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f0:	f843 2b04 	str.w	r2, [r3], #4
 80123f4:	e7d8      	b.n	80123a8 <__multiply+0x50>
 80123f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80123fa:	f1ba 0f00 	cmp.w	sl, #0
 80123fe:	d024      	beq.n	801244a <__multiply+0xf2>
 8012400:	f104 0e14 	add.w	lr, r4, #20
 8012404:	46a9      	mov	r9, r5
 8012406:	f04f 0c00 	mov.w	ip, #0
 801240a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801240e:	f8d9 3000 	ldr.w	r3, [r9]
 8012412:	fa1f fb87 	uxth.w	fp, r7
 8012416:	b29b      	uxth	r3, r3
 8012418:	fb0a 330b 	mla	r3, sl, fp, r3
 801241c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012420:	f8d9 7000 	ldr.w	r7, [r9]
 8012424:	4463      	add	r3, ip
 8012426:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801242a:	fb0a c70b 	mla	r7, sl, fp, ip
 801242e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012432:	b29b      	uxth	r3, r3
 8012434:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012438:	4572      	cmp	r2, lr
 801243a:	f849 3b04 	str.w	r3, [r9], #4
 801243e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012442:	d8e2      	bhi.n	801240a <__multiply+0xb2>
 8012444:	9b01      	ldr	r3, [sp, #4]
 8012446:	f845 c003 	str.w	ip, [r5, r3]
 801244a:	9b03      	ldr	r3, [sp, #12]
 801244c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012450:	3104      	adds	r1, #4
 8012452:	f1b9 0f00 	cmp.w	r9, #0
 8012456:	d021      	beq.n	801249c <__multiply+0x144>
 8012458:	682b      	ldr	r3, [r5, #0]
 801245a:	f104 0c14 	add.w	ip, r4, #20
 801245e:	46ae      	mov	lr, r5
 8012460:	f04f 0a00 	mov.w	sl, #0
 8012464:	f8bc b000 	ldrh.w	fp, [ip]
 8012468:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801246c:	fb09 770b 	mla	r7, r9, fp, r7
 8012470:	4457      	add	r7, sl
 8012472:	b29b      	uxth	r3, r3
 8012474:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012478:	f84e 3b04 	str.w	r3, [lr], #4
 801247c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012484:	f8be 3000 	ldrh.w	r3, [lr]
 8012488:	fb09 330a 	mla	r3, r9, sl, r3
 801248c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012490:	4562      	cmp	r2, ip
 8012492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012496:	d8e5      	bhi.n	8012464 <__multiply+0x10c>
 8012498:	9f01      	ldr	r7, [sp, #4]
 801249a:	51eb      	str	r3, [r5, r7]
 801249c:	3504      	adds	r5, #4
 801249e:	e799      	b.n	80123d4 <__multiply+0x7c>
 80124a0:	3e01      	subs	r6, #1
 80124a2:	e79b      	b.n	80123dc <__multiply+0x84>
 80124a4:	080156a9 	.word	0x080156a9
 80124a8:	08015712 	.word	0x08015712

080124ac <__pow5mult>:
 80124ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b0:	4615      	mov	r5, r2
 80124b2:	f012 0203 	ands.w	r2, r2, #3
 80124b6:	4607      	mov	r7, r0
 80124b8:	460e      	mov	r6, r1
 80124ba:	d007      	beq.n	80124cc <__pow5mult+0x20>
 80124bc:	4c1a      	ldr	r4, [pc, #104]	@ (8012528 <__pow5mult+0x7c>)
 80124be:	3a01      	subs	r2, #1
 80124c0:	2300      	movs	r3, #0
 80124c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124c6:	f7ff fe9f 	bl	8012208 <__multadd>
 80124ca:	4606      	mov	r6, r0
 80124cc:	10ad      	asrs	r5, r5, #2
 80124ce:	d027      	beq.n	8012520 <__pow5mult+0x74>
 80124d0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80124d2:	b944      	cbnz	r4, 80124e6 <__pow5mult+0x3a>
 80124d4:	f240 2171 	movw	r1, #625	@ 0x271
 80124d8:	4638      	mov	r0, r7
 80124da:	f7ff ff27 	bl	801232c <__i2b>
 80124de:	2300      	movs	r3, #0
 80124e0:	6438      	str	r0, [r7, #64]	@ 0x40
 80124e2:	4604      	mov	r4, r0
 80124e4:	6003      	str	r3, [r0, #0]
 80124e6:	f04f 0900 	mov.w	r9, #0
 80124ea:	07eb      	lsls	r3, r5, #31
 80124ec:	d50a      	bpl.n	8012504 <__pow5mult+0x58>
 80124ee:	4631      	mov	r1, r6
 80124f0:	4622      	mov	r2, r4
 80124f2:	4638      	mov	r0, r7
 80124f4:	f7ff ff30 	bl	8012358 <__multiply>
 80124f8:	4631      	mov	r1, r6
 80124fa:	4680      	mov	r8, r0
 80124fc:	4638      	mov	r0, r7
 80124fe:	f7ff fe7a 	bl	80121f6 <_Bfree>
 8012502:	4646      	mov	r6, r8
 8012504:	106d      	asrs	r5, r5, #1
 8012506:	d00b      	beq.n	8012520 <__pow5mult+0x74>
 8012508:	6820      	ldr	r0, [r4, #0]
 801250a:	b938      	cbnz	r0, 801251c <__pow5mult+0x70>
 801250c:	4622      	mov	r2, r4
 801250e:	4621      	mov	r1, r4
 8012510:	4638      	mov	r0, r7
 8012512:	f7ff ff21 	bl	8012358 <__multiply>
 8012516:	6020      	str	r0, [r4, #0]
 8012518:	f8c0 9000 	str.w	r9, [r0]
 801251c:	4604      	mov	r4, r0
 801251e:	e7e4      	b.n	80124ea <__pow5mult+0x3e>
 8012520:	4630      	mov	r0, r6
 8012522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012526:	bf00      	nop
 8012528:	0801576c 	.word	0x0801576c

0801252c <__lshift>:
 801252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012530:	460c      	mov	r4, r1
 8012532:	6849      	ldr	r1, [r1, #4]
 8012534:	6923      	ldr	r3, [r4, #16]
 8012536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801253a:	68a3      	ldr	r3, [r4, #8]
 801253c:	4607      	mov	r7, r0
 801253e:	4691      	mov	r9, r2
 8012540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012544:	f108 0601 	add.w	r6, r8, #1
 8012548:	42b3      	cmp	r3, r6
 801254a:	db0b      	blt.n	8012564 <__lshift+0x38>
 801254c:	4638      	mov	r0, r7
 801254e:	f7ff fe2d 	bl	80121ac <_Balloc>
 8012552:	4605      	mov	r5, r0
 8012554:	b948      	cbnz	r0, 801256a <__lshift+0x3e>
 8012556:	4602      	mov	r2, r0
 8012558:	4b28      	ldr	r3, [pc, #160]	@ (80125fc <__lshift+0xd0>)
 801255a:	4829      	ldr	r0, [pc, #164]	@ (8012600 <__lshift+0xd4>)
 801255c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012560:	f000 f9f6 	bl	8012950 <__assert_func>
 8012564:	3101      	adds	r1, #1
 8012566:	005b      	lsls	r3, r3, #1
 8012568:	e7ee      	b.n	8012548 <__lshift+0x1c>
 801256a:	2300      	movs	r3, #0
 801256c:	f100 0114 	add.w	r1, r0, #20
 8012570:	f100 0210 	add.w	r2, r0, #16
 8012574:	4618      	mov	r0, r3
 8012576:	4553      	cmp	r3, sl
 8012578:	db33      	blt.n	80125e2 <__lshift+0xb6>
 801257a:	6920      	ldr	r0, [r4, #16]
 801257c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012580:	f104 0314 	add.w	r3, r4, #20
 8012584:	f019 091f 	ands.w	r9, r9, #31
 8012588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801258c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012590:	d02b      	beq.n	80125ea <__lshift+0xbe>
 8012592:	f1c9 0e20 	rsb	lr, r9, #32
 8012596:	468a      	mov	sl, r1
 8012598:	2200      	movs	r2, #0
 801259a:	6818      	ldr	r0, [r3, #0]
 801259c:	fa00 f009 	lsl.w	r0, r0, r9
 80125a0:	4310      	orrs	r0, r2
 80125a2:	f84a 0b04 	str.w	r0, [sl], #4
 80125a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80125aa:	459c      	cmp	ip, r3
 80125ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80125b0:	d8f3      	bhi.n	801259a <__lshift+0x6e>
 80125b2:	ebac 0304 	sub.w	r3, ip, r4
 80125b6:	3b15      	subs	r3, #21
 80125b8:	f023 0303 	bic.w	r3, r3, #3
 80125bc:	3304      	adds	r3, #4
 80125be:	f104 0015 	add.w	r0, r4, #21
 80125c2:	4584      	cmp	ip, r0
 80125c4:	bf38      	it	cc
 80125c6:	2304      	movcc	r3, #4
 80125c8:	50ca      	str	r2, [r1, r3]
 80125ca:	b10a      	cbz	r2, 80125d0 <__lshift+0xa4>
 80125cc:	f108 0602 	add.w	r6, r8, #2
 80125d0:	3e01      	subs	r6, #1
 80125d2:	4638      	mov	r0, r7
 80125d4:	612e      	str	r6, [r5, #16]
 80125d6:	4621      	mov	r1, r4
 80125d8:	f7ff fe0d 	bl	80121f6 <_Bfree>
 80125dc:	4628      	mov	r0, r5
 80125de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125e6:	3301      	adds	r3, #1
 80125e8:	e7c5      	b.n	8012576 <__lshift+0x4a>
 80125ea:	3904      	subs	r1, #4
 80125ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80125f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125f4:	459c      	cmp	ip, r3
 80125f6:	d8f9      	bhi.n	80125ec <__lshift+0xc0>
 80125f8:	e7ea      	b.n	80125d0 <__lshift+0xa4>
 80125fa:	bf00      	nop
 80125fc:	080156a9 	.word	0x080156a9
 8012600:	08015712 	.word	0x08015712

08012604 <__mcmp>:
 8012604:	690a      	ldr	r2, [r1, #16]
 8012606:	4603      	mov	r3, r0
 8012608:	6900      	ldr	r0, [r0, #16]
 801260a:	1a80      	subs	r0, r0, r2
 801260c:	b530      	push	{r4, r5, lr}
 801260e:	d10e      	bne.n	801262e <__mcmp+0x2a>
 8012610:	3314      	adds	r3, #20
 8012612:	3114      	adds	r1, #20
 8012614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801261c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012624:	4295      	cmp	r5, r2
 8012626:	d003      	beq.n	8012630 <__mcmp+0x2c>
 8012628:	d205      	bcs.n	8012636 <__mcmp+0x32>
 801262a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801262e:	bd30      	pop	{r4, r5, pc}
 8012630:	42a3      	cmp	r3, r4
 8012632:	d3f3      	bcc.n	801261c <__mcmp+0x18>
 8012634:	e7fb      	b.n	801262e <__mcmp+0x2a>
 8012636:	2001      	movs	r0, #1
 8012638:	e7f9      	b.n	801262e <__mcmp+0x2a>
	...

0801263c <__mdiff>:
 801263c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012640:	4689      	mov	r9, r1
 8012642:	4606      	mov	r6, r0
 8012644:	4611      	mov	r1, r2
 8012646:	4648      	mov	r0, r9
 8012648:	4614      	mov	r4, r2
 801264a:	f7ff ffdb 	bl	8012604 <__mcmp>
 801264e:	1e05      	subs	r5, r0, #0
 8012650:	d112      	bne.n	8012678 <__mdiff+0x3c>
 8012652:	4629      	mov	r1, r5
 8012654:	4630      	mov	r0, r6
 8012656:	f7ff fda9 	bl	80121ac <_Balloc>
 801265a:	4602      	mov	r2, r0
 801265c:	b928      	cbnz	r0, 801266a <__mdiff+0x2e>
 801265e:	4b3f      	ldr	r3, [pc, #252]	@ (801275c <__mdiff+0x120>)
 8012660:	f240 2137 	movw	r1, #567	@ 0x237
 8012664:	483e      	ldr	r0, [pc, #248]	@ (8012760 <__mdiff+0x124>)
 8012666:	f000 f973 	bl	8012950 <__assert_func>
 801266a:	2301      	movs	r3, #1
 801266c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012670:	4610      	mov	r0, r2
 8012672:	b003      	add	sp, #12
 8012674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012678:	bfbc      	itt	lt
 801267a:	464b      	movlt	r3, r9
 801267c:	46a1      	movlt	r9, r4
 801267e:	4630      	mov	r0, r6
 8012680:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012684:	bfba      	itte	lt
 8012686:	461c      	movlt	r4, r3
 8012688:	2501      	movlt	r5, #1
 801268a:	2500      	movge	r5, #0
 801268c:	f7ff fd8e 	bl	80121ac <_Balloc>
 8012690:	4602      	mov	r2, r0
 8012692:	b918      	cbnz	r0, 801269c <__mdiff+0x60>
 8012694:	4b31      	ldr	r3, [pc, #196]	@ (801275c <__mdiff+0x120>)
 8012696:	f240 2145 	movw	r1, #581	@ 0x245
 801269a:	e7e3      	b.n	8012664 <__mdiff+0x28>
 801269c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80126a0:	6926      	ldr	r6, [r4, #16]
 80126a2:	60c5      	str	r5, [r0, #12]
 80126a4:	f109 0310 	add.w	r3, r9, #16
 80126a8:	f109 0514 	add.w	r5, r9, #20
 80126ac:	f104 0e14 	add.w	lr, r4, #20
 80126b0:	f100 0b14 	add.w	fp, r0, #20
 80126b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80126b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80126bc:	9301      	str	r3, [sp, #4]
 80126be:	46d9      	mov	r9, fp
 80126c0:	f04f 0c00 	mov.w	ip, #0
 80126c4:	9b01      	ldr	r3, [sp, #4]
 80126c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80126ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80126ce:	9301      	str	r3, [sp, #4]
 80126d0:	fa1f f38a 	uxth.w	r3, sl
 80126d4:	4619      	mov	r1, r3
 80126d6:	b283      	uxth	r3, r0
 80126d8:	1acb      	subs	r3, r1, r3
 80126da:	0c00      	lsrs	r0, r0, #16
 80126dc:	4463      	add	r3, ip
 80126de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80126e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80126ec:	4576      	cmp	r6, lr
 80126ee:	f849 3b04 	str.w	r3, [r9], #4
 80126f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80126f6:	d8e5      	bhi.n	80126c4 <__mdiff+0x88>
 80126f8:	1b33      	subs	r3, r6, r4
 80126fa:	3b15      	subs	r3, #21
 80126fc:	f023 0303 	bic.w	r3, r3, #3
 8012700:	3415      	adds	r4, #21
 8012702:	3304      	adds	r3, #4
 8012704:	42a6      	cmp	r6, r4
 8012706:	bf38      	it	cc
 8012708:	2304      	movcc	r3, #4
 801270a:	441d      	add	r5, r3
 801270c:	445b      	add	r3, fp
 801270e:	461e      	mov	r6, r3
 8012710:	462c      	mov	r4, r5
 8012712:	4544      	cmp	r4, r8
 8012714:	d30e      	bcc.n	8012734 <__mdiff+0xf8>
 8012716:	f108 0103 	add.w	r1, r8, #3
 801271a:	1b49      	subs	r1, r1, r5
 801271c:	f021 0103 	bic.w	r1, r1, #3
 8012720:	3d03      	subs	r5, #3
 8012722:	45a8      	cmp	r8, r5
 8012724:	bf38      	it	cc
 8012726:	2100      	movcc	r1, #0
 8012728:	440b      	add	r3, r1
 801272a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801272e:	b191      	cbz	r1, 8012756 <__mdiff+0x11a>
 8012730:	6117      	str	r7, [r2, #16]
 8012732:	e79d      	b.n	8012670 <__mdiff+0x34>
 8012734:	f854 1b04 	ldr.w	r1, [r4], #4
 8012738:	46e6      	mov	lr, ip
 801273a:	0c08      	lsrs	r0, r1, #16
 801273c:	fa1c fc81 	uxtah	ip, ip, r1
 8012740:	4471      	add	r1, lr
 8012742:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012746:	b289      	uxth	r1, r1
 8012748:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801274c:	f846 1b04 	str.w	r1, [r6], #4
 8012750:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012754:	e7dd      	b.n	8012712 <__mdiff+0xd6>
 8012756:	3f01      	subs	r7, #1
 8012758:	e7e7      	b.n	801272a <__mdiff+0xee>
 801275a:	bf00      	nop
 801275c:	080156a9 	.word	0x080156a9
 8012760:	08015712 	.word	0x08015712

08012764 <__d2b>:
 8012764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012768:	460f      	mov	r7, r1
 801276a:	2101      	movs	r1, #1
 801276c:	ec59 8b10 	vmov	r8, r9, d0
 8012770:	4616      	mov	r6, r2
 8012772:	f7ff fd1b 	bl	80121ac <_Balloc>
 8012776:	4604      	mov	r4, r0
 8012778:	b930      	cbnz	r0, 8012788 <__d2b+0x24>
 801277a:	4602      	mov	r2, r0
 801277c:	4b23      	ldr	r3, [pc, #140]	@ (801280c <__d2b+0xa8>)
 801277e:	4824      	ldr	r0, [pc, #144]	@ (8012810 <__d2b+0xac>)
 8012780:	f240 310f 	movw	r1, #783	@ 0x30f
 8012784:	f000 f8e4 	bl	8012950 <__assert_func>
 8012788:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801278c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012790:	b10d      	cbz	r5, 8012796 <__d2b+0x32>
 8012792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012796:	9301      	str	r3, [sp, #4]
 8012798:	f1b8 0300 	subs.w	r3, r8, #0
 801279c:	d023      	beq.n	80127e6 <__d2b+0x82>
 801279e:	4668      	mov	r0, sp
 80127a0:	9300      	str	r3, [sp, #0]
 80127a2:	f7ff fd96 	bl	80122d2 <__lo0bits>
 80127a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80127aa:	b1d0      	cbz	r0, 80127e2 <__d2b+0x7e>
 80127ac:	f1c0 0320 	rsb	r3, r0, #32
 80127b0:	fa02 f303 	lsl.w	r3, r2, r3
 80127b4:	430b      	orrs	r3, r1
 80127b6:	40c2      	lsrs	r2, r0
 80127b8:	6163      	str	r3, [r4, #20]
 80127ba:	9201      	str	r2, [sp, #4]
 80127bc:	9b01      	ldr	r3, [sp, #4]
 80127be:	61a3      	str	r3, [r4, #24]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	bf0c      	ite	eq
 80127c4:	2201      	moveq	r2, #1
 80127c6:	2202      	movne	r2, #2
 80127c8:	6122      	str	r2, [r4, #16]
 80127ca:	b1a5      	cbz	r5, 80127f6 <__d2b+0x92>
 80127cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80127d0:	4405      	add	r5, r0
 80127d2:	603d      	str	r5, [r7, #0]
 80127d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80127d8:	6030      	str	r0, [r6, #0]
 80127da:	4620      	mov	r0, r4
 80127dc:	b003      	add	sp, #12
 80127de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127e2:	6161      	str	r1, [r4, #20]
 80127e4:	e7ea      	b.n	80127bc <__d2b+0x58>
 80127e6:	a801      	add	r0, sp, #4
 80127e8:	f7ff fd73 	bl	80122d2 <__lo0bits>
 80127ec:	9b01      	ldr	r3, [sp, #4]
 80127ee:	6163      	str	r3, [r4, #20]
 80127f0:	3020      	adds	r0, #32
 80127f2:	2201      	movs	r2, #1
 80127f4:	e7e8      	b.n	80127c8 <__d2b+0x64>
 80127f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80127fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80127fe:	6038      	str	r0, [r7, #0]
 8012800:	6918      	ldr	r0, [r3, #16]
 8012802:	f7ff fd47 	bl	8012294 <__hi0bits>
 8012806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801280a:	e7e5      	b.n	80127d8 <__d2b+0x74>
 801280c:	080156a9 	.word	0x080156a9
 8012810:	08015712 	.word	0x08015712

08012814 <__ssprint_r>:
 8012814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012818:	6893      	ldr	r3, [r2, #8]
 801281a:	f8d2 b000 	ldr.w	fp, [r2]
 801281e:	9001      	str	r0, [sp, #4]
 8012820:	460c      	mov	r4, r1
 8012822:	4617      	mov	r7, r2
 8012824:	2b00      	cmp	r3, #0
 8012826:	d157      	bne.n	80128d8 <__ssprint_r+0xc4>
 8012828:	2000      	movs	r0, #0
 801282a:	2300      	movs	r3, #0
 801282c:	607b      	str	r3, [r7, #4]
 801282e:	b003      	add	sp, #12
 8012830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012834:	e9db a800 	ldrd	sl, r8, [fp]
 8012838:	f10b 0b08 	add.w	fp, fp, #8
 801283c:	68a6      	ldr	r6, [r4, #8]
 801283e:	6820      	ldr	r0, [r4, #0]
 8012840:	f1b8 0f00 	cmp.w	r8, #0
 8012844:	d0f6      	beq.n	8012834 <__ssprint_r+0x20>
 8012846:	45b0      	cmp	r8, r6
 8012848:	d32e      	bcc.n	80128a8 <__ssprint_r+0x94>
 801284a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801284e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012852:	d029      	beq.n	80128a8 <__ssprint_r+0x94>
 8012854:	6921      	ldr	r1, [r4, #16]
 8012856:	6965      	ldr	r5, [r4, #20]
 8012858:	eba0 0901 	sub.w	r9, r0, r1
 801285c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012864:	f109 0001 	add.w	r0, r9, #1
 8012868:	106d      	asrs	r5, r5, #1
 801286a:	4440      	add	r0, r8
 801286c:	4285      	cmp	r5, r0
 801286e:	bf38      	it	cc
 8012870:	4605      	movcc	r5, r0
 8012872:	0553      	lsls	r3, r2, #21
 8012874:	d534      	bpl.n	80128e0 <__ssprint_r+0xcc>
 8012876:	9801      	ldr	r0, [sp, #4]
 8012878:	4629      	mov	r1, r5
 801287a:	f7fd f941 	bl	800fb00 <_malloc_r>
 801287e:	4606      	mov	r6, r0
 8012880:	2800      	cmp	r0, #0
 8012882:	d038      	beq.n	80128f6 <__ssprint_r+0xe2>
 8012884:	464a      	mov	r2, r9
 8012886:	6921      	ldr	r1, [r4, #16]
 8012888:	f7fd f806 	bl	800f898 <memcpy>
 801288c:	89a2      	ldrh	r2, [r4, #12]
 801288e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8012892:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8012896:	81a2      	strh	r2, [r4, #12]
 8012898:	6126      	str	r6, [r4, #16]
 801289a:	6165      	str	r5, [r4, #20]
 801289c:	444e      	add	r6, r9
 801289e:	eba5 0509 	sub.w	r5, r5, r9
 80128a2:	6026      	str	r6, [r4, #0]
 80128a4:	60a5      	str	r5, [r4, #8]
 80128a6:	4646      	mov	r6, r8
 80128a8:	4546      	cmp	r6, r8
 80128aa:	bf28      	it	cs
 80128ac:	4646      	movcs	r6, r8
 80128ae:	4632      	mov	r2, r6
 80128b0:	4651      	mov	r1, sl
 80128b2:	6820      	ldr	r0, [r4, #0]
 80128b4:	f000 f82b 	bl	801290e <memmove>
 80128b8:	68a2      	ldr	r2, [r4, #8]
 80128ba:	1b92      	subs	r2, r2, r6
 80128bc:	60a2      	str	r2, [r4, #8]
 80128be:	6822      	ldr	r2, [r4, #0]
 80128c0:	4432      	add	r2, r6
 80128c2:	6022      	str	r2, [r4, #0]
 80128c4:	68ba      	ldr	r2, [r7, #8]
 80128c6:	eba2 0308 	sub.w	r3, r2, r8
 80128ca:	44c2      	add	sl, r8
 80128cc:	60bb      	str	r3, [r7, #8]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d0aa      	beq.n	8012828 <__ssprint_r+0x14>
 80128d2:	f04f 0800 	mov.w	r8, #0
 80128d6:	e7b1      	b.n	801283c <__ssprint_r+0x28>
 80128d8:	f04f 0a00 	mov.w	sl, #0
 80128dc:	46d0      	mov	r8, sl
 80128de:	e7ad      	b.n	801283c <__ssprint_r+0x28>
 80128e0:	9801      	ldr	r0, [sp, #4]
 80128e2:	462a      	mov	r2, r5
 80128e4:	f000 f89a 	bl	8012a1c <_realloc_r>
 80128e8:	4606      	mov	r6, r0
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d1d4      	bne.n	8012898 <__ssprint_r+0x84>
 80128ee:	6921      	ldr	r1, [r4, #16]
 80128f0:	9801      	ldr	r0, [sp, #4]
 80128f2:	f7fd f845 	bl	800f980 <_free_r>
 80128f6:	9a01      	ldr	r2, [sp, #4]
 80128f8:	230c      	movs	r3, #12
 80128fa:	6013      	str	r3, [r2, #0]
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012902:	81a3      	strh	r3, [r4, #12]
 8012904:	2300      	movs	r3, #0
 8012906:	60bb      	str	r3, [r7, #8]
 8012908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801290c:	e78d      	b.n	801282a <__ssprint_r+0x16>

0801290e <memmove>:
 801290e:	4288      	cmp	r0, r1
 8012910:	b510      	push	{r4, lr}
 8012912:	eb01 0402 	add.w	r4, r1, r2
 8012916:	d902      	bls.n	801291e <memmove+0x10>
 8012918:	4284      	cmp	r4, r0
 801291a:	4623      	mov	r3, r4
 801291c:	d807      	bhi.n	801292e <memmove+0x20>
 801291e:	1e43      	subs	r3, r0, #1
 8012920:	42a1      	cmp	r1, r4
 8012922:	d008      	beq.n	8012936 <memmove+0x28>
 8012924:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012928:	f803 2f01 	strb.w	r2, [r3, #1]!
 801292c:	e7f8      	b.n	8012920 <memmove+0x12>
 801292e:	4402      	add	r2, r0
 8012930:	4601      	mov	r1, r0
 8012932:	428a      	cmp	r2, r1
 8012934:	d100      	bne.n	8012938 <memmove+0x2a>
 8012936:	bd10      	pop	{r4, pc}
 8012938:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801293c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012940:	e7f7      	b.n	8012932 <memmove+0x24>
	...

08012944 <__locale_mb_cur_max>:
 8012944:	4b01      	ldr	r3, [pc, #4]	@ (801294c <__locale_mb_cur_max+0x8>)
 8012946:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801294a:	4770      	bx	lr
 801294c:	240007bc 	.word	0x240007bc

08012950 <__assert_func>:
 8012950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012952:	4614      	mov	r4, r2
 8012954:	461a      	mov	r2, r3
 8012956:	4b09      	ldr	r3, [pc, #36]	@ (801297c <__assert_func+0x2c>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4605      	mov	r5, r0
 801295c:	68d8      	ldr	r0, [r3, #12]
 801295e:	b954      	cbnz	r4, 8012976 <__assert_func+0x26>
 8012960:	4b07      	ldr	r3, [pc, #28]	@ (8012980 <__assert_func+0x30>)
 8012962:	461c      	mov	r4, r3
 8012964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012968:	9100      	str	r1, [sp, #0]
 801296a:	462b      	mov	r3, r5
 801296c:	4905      	ldr	r1, [pc, #20]	@ (8012984 <__assert_func+0x34>)
 801296e:	f000 fa0b 	bl	8012d88 <fiprintf>
 8012972:	f001 f921 	bl	8013bb8 <abort>
 8012976:	4b04      	ldr	r3, [pc, #16]	@ (8012988 <__assert_func+0x38>)
 8012978:	e7f4      	b.n	8012964 <__assert_func+0x14>
 801297a:	bf00      	nop
 801297c:	24000284 	.word	0x24000284
 8012980:	080158ad 	.word	0x080158ad
 8012984:	0801587f 	.word	0x0801587f
 8012988:	08015872 	.word	0x08015872

0801298c <_calloc_r>:
 801298c:	b538      	push	{r3, r4, r5, lr}
 801298e:	fba1 1502 	umull	r1, r5, r1, r2
 8012992:	b935      	cbnz	r5, 80129a2 <_calloc_r+0x16>
 8012994:	f7fd f8b4 	bl	800fb00 <_malloc_r>
 8012998:	4604      	mov	r4, r0
 801299a:	b938      	cbnz	r0, 80129ac <_calloc_r+0x20>
 801299c:	2400      	movs	r4, #0
 801299e:	4620      	mov	r0, r4
 80129a0:	bd38      	pop	{r3, r4, r5, pc}
 80129a2:	f7fc ff4b 	bl	800f83c <__errno>
 80129a6:	230c      	movs	r3, #12
 80129a8:	6003      	str	r3, [r0, #0]
 80129aa:	e7f7      	b.n	801299c <_calloc_r+0x10>
 80129ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80129b0:	f022 0203 	bic.w	r2, r2, #3
 80129b4:	3a04      	subs	r2, #4
 80129b6:	2a24      	cmp	r2, #36	@ 0x24
 80129b8:	d819      	bhi.n	80129ee <_calloc_r+0x62>
 80129ba:	2a13      	cmp	r2, #19
 80129bc:	d915      	bls.n	80129ea <_calloc_r+0x5e>
 80129be:	2a1b      	cmp	r2, #27
 80129c0:	e9c0 5500 	strd	r5, r5, [r0]
 80129c4:	d806      	bhi.n	80129d4 <_calloc_r+0x48>
 80129c6:	f100 0308 	add.w	r3, r0, #8
 80129ca:	2200      	movs	r2, #0
 80129cc:	e9c3 2200 	strd	r2, r2, [r3]
 80129d0:	609a      	str	r2, [r3, #8]
 80129d2:	e7e4      	b.n	801299e <_calloc_r+0x12>
 80129d4:	2a24      	cmp	r2, #36	@ 0x24
 80129d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80129da:	bf11      	iteee	ne
 80129dc:	f100 0310 	addne.w	r3, r0, #16
 80129e0:	6105      	streq	r5, [r0, #16]
 80129e2:	f100 0318 	addeq.w	r3, r0, #24
 80129e6:	6145      	streq	r5, [r0, #20]
 80129e8:	e7ef      	b.n	80129ca <_calloc_r+0x3e>
 80129ea:	4603      	mov	r3, r0
 80129ec:	e7ed      	b.n	80129ca <_calloc_r+0x3e>
 80129ee:	4629      	mov	r1, r5
 80129f0:	f7fc fed5 	bl	800f79e <memset>
 80129f4:	e7d3      	b.n	801299e <_calloc_r+0x12>

080129f6 <__ascii_mbtowc>:
 80129f6:	b082      	sub	sp, #8
 80129f8:	b901      	cbnz	r1, 80129fc <__ascii_mbtowc+0x6>
 80129fa:	a901      	add	r1, sp, #4
 80129fc:	b142      	cbz	r2, 8012a10 <__ascii_mbtowc+0x1a>
 80129fe:	b14b      	cbz	r3, 8012a14 <__ascii_mbtowc+0x1e>
 8012a00:	7813      	ldrb	r3, [r2, #0]
 8012a02:	600b      	str	r3, [r1, #0]
 8012a04:	7812      	ldrb	r2, [r2, #0]
 8012a06:	1e10      	subs	r0, r2, #0
 8012a08:	bf18      	it	ne
 8012a0a:	2001      	movne	r0, #1
 8012a0c:	b002      	add	sp, #8
 8012a0e:	4770      	bx	lr
 8012a10:	4610      	mov	r0, r2
 8012a12:	e7fb      	b.n	8012a0c <__ascii_mbtowc+0x16>
 8012a14:	f06f 0001 	mvn.w	r0, #1
 8012a18:	e7f8      	b.n	8012a0c <__ascii_mbtowc+0x16>
	...

08012a1c <_realloc_r>:
 8012a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a20:	4682      	mov	sl, r0
 8012a22:	4693      	mov	fp, r2
 8012a24:	460c      	mov	r4, r1
 8012a26:	b929      	cbnz	r1, 8012a34 <_realloc_r+0x18>
 8012a28:	4611      	mov	r1, r2
 8012a2a:	b003      	add	sp, #12
 8012a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a30:	f7fd b866 	b.w	800fb00 <_malloc_r>
 8012a34:	f7fd fa9e 	bl	800ff74 <__malloc_lock>
 8012a38:	f10b 080b 	add.w	r8, fp, #11
 8012a3c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012a40:	f1b8 0f16 	cmp.w	r8, #22
 8012a44:	f1a4 0908 	sub.w	r9, r4, #8
 8012a48:	f025 0603 	bic.w	r6, r5, #3
 8012a4c:	d908      	bls.n	8012a60 <_realloc_r+0x44>
 8012a4e:	f038 0807 	bics.w	r8, r8, #7
 8012a52:	d507      	bpl.n	8012a64 <_realloc_r+0x48>
 8012a54:	230c      	movs	r3, #12
 8012a56:	f8ca 3000 	str.w	r3, [sl]
 8012a5a:	f04f 0b00 	mov.w	fp, #0
 8012a5e:	e032      	b.n	8012ac6 <_realloc_r+0xaa>
 8012a60:	f04f 0810 	mov.w	r8, #16
 8012a64:	45c3      	cmp	fp, r8
 8012a66:	d8f5      	bhi.n	8012a54 <_realloc_r+0x38>
 8012a68:	4546      	cmp	r6, r8
 8012a6a:	f280 8174 	bge.w	8012d56 <_realloc_r+0x33a>
 8012a6e:	4b9e      	ldr	r3, [pc, #632]	@ (8012ce8 <_realloc_r+0x2cc>)
 8012a70:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8012a74:	eb09 0106 	add.w	r1, r9, r6
 8012a78:	458c      	cmp	ip, r1
 8012a7a:	6848      	ldr	r0, [r1, #4]
 8012a7c:	d005      	beq.n	8012a8a <_realloc_r+0x6e>
 8012a7e:	f020 0201 	bic.w	r2, r0, #1
 8012a82:	440a      	add	r2, r1
 8012a84:	6852      	ldr	r2, [r2, #4]
 8012a86:	07d7      	lsls	r7, r2, #31
 8012a88:	d449      	bmi.n	8012b1e <_realloc_r+0x102>
 8012a8a:	f020 0003 	bic.w	r0, r0, #3
 8012a8e:	458c      	cmp	ip, r1
 8012a90:	eb06 0700 	add.w	r7, r6, r0
 8012a94:	d11b      	bne.n	8012ace <_realloc_r+0xb2>
 8012a96:	f108 0210 	add.w	r2, r8, #16
 8012a9a:	42ba      	cmp	r2, r7
 8012a9c:	dc41      	bgt.n	8012b22 <_realloc_r+0x106>
 8012a9e:	eb09 0208 	add.w	r2, r9, r8
 8012aa2:	eba7 0708 	sub.w	r7, r7, r8
 8012aa6:	f047 0701 	orr.w	r7, r7, #1
 8012aaa:	609a      	str	r2, [r3, #8]
 8012aac:	6057      	str	r7, [r2, #4]
 8012aae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012ab2:	f003 0301 	and.w	r3, r3, #1
 8012ab6:	ea43 0308 	orr.w	r3, r3, r8
 8012aba:	f844 3c04 	str.w	r3, [r4, #-4]
 8012abe:	4650      	mov	r0, sl
 8012ac0:	f7fd fa5e 	bl	800ff80 <__malloc_unlock>
 8012ac4:	46a3      	mov	fp, r4
 8012ac6:	4658      	mov	r0, fp
 8012ac8:	b003      	add	sp, #12
 8012aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ace:	45b8      	cmp	r8, r7
 8012ad0:	dc27      	bgt.n	8012b22 <_realloc_r+0x106>
 8012ad2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012ad6:	60d3      	str	r3, [r2, #12]
 8012ad8:	609a      	str	r2, [r3, #8]
 8012ada:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012ade:	eba7 0008 	sub.w	r0, r7, r8
 8012ae2:	280f      	cmp	r0, #15
 8012ae4:	f003 0301 	and.w	r3, r3, #1
 8012ae8:	eb09 0207 	add.w	r2, r9, r7
 8012aec:	f240 8135 	bls.w	8012d5a <_realloc_r+0x33e>
 8012af0:	eb09 0108 	add.w	r1, r9, r8
 8012af4:	ea48 0303 	orr.w	r3, r8, r3
 8012af8:	f040 0001 	orr.w	r0, r0, #1
 8012afc:	f8c9 3004 	str.w	r3, [r9, #4]
 8012b00:	6048      	str	r0, [r1, #4]
 8012b02:	6853      	ldr	r3, [r2, #4]
 8012b04:	f043 0301 	orr.w	r3, r3, #1
 8012b08:	6053      	str	r3, [r2, #4]
 8012b0a:	3108      	adds	r1, #8
 8012b0c:	4650      	mov	r0, sl
 8012b0e:	f7fc ff37 	bl	800f980 <_free_r>
 8012b12:	4650      	mov	r0, sl
 8012b14:	f7fd fa34 	bl	800ff80 <__malloc_unlock>
 8012b18:	f109 0b08 	add.w	fp, r9, #8
 8012b1c:	e7d3      	b.n	8012ac6 <_realloc_r+0xaa>
 8012b1e:	2000      	movs	r0, #0
 8012b20:	4601      	mov	r1, r0
 8012b22:	07ea      	lsls	r2, r5, #31
 8012b24:	f100 80c7 	bmi.w	8012cb6 <_realloc_r+0x29a>
 8012b28:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8012b2c:	eba9 0505 	sub.w	r5, r9, r5
 8012b30:	686a      	ldr	r2, [r5, #4]
 8012b32:	f022 0203 	bic.w	r2, r2, #3
 8012b36:	4432      	add	r2, r6
 8012b38:	9201      	str	r2, [sp, #4]
 8012b3a:	2900      	cmp	r1, #0
 8012b3c:	f000 8086 	beq.w	8012c4c <_realloc_r+0x230>
 8012b40:	458c      	cmp	ip, r1
 8012b42:	eb00 0702 	add.w	r7, r0, r2
 8012b46:	d149      	bne.n	8012bdc <_realloc_r+0x1c0>
 8012b48:	f108 0210 	add.w	r2, r8, #16
 8012b4c:	42ba      	cmp	r2, r7
 8012b4e:	dc7d      	bgt.n	8012c4c <_realloc_r+0x230>
 8012b50:	46ab      	mov	fp, r5
 8012b52:	68ea      	ldr	r2, [r5, #12]
 8012b54:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8012b58:	60ca      	str	r2, [r1, #12]
 8012b5a:	6091      	str	r1, [r2, #8]
 8012b5c:	1f32      	subs	r2, r6, #4
 8012b5e:	2a24      	cmp	r2, #36	@ 0x24
 8012b60:	d836      	bhi.n	8012bd0 <_realloc_r+0x1b4>
 8012b62:	2a13      	cmp	r2, #19
 8012b64:	d932      	bls.n	8012bcc <_realloc_r+0x1b0>
 8012b66:	6821      	ldr	r1, [r4, #0]
 8012b68:	60a9      	str	r1, [r5, #8]
 8012b6a:	6861      	ldr	r1, [r4, #4]
 8012b6c:	60e9      	str	r1, [r5, #12]
 8012b6e:	2a1b      	cmp	r2, #27
 8012b70:	d81a      	bhi.n	8012ba8 <_realloc_r+0x18c>
 8012b72:	3408      	adds	r4, #8
 8012b74:	f105 0210 	add.w	r2, r5, #16
 8012b78:	6821      	ldr	r1, [r4, #0]
 8012b7a:	6011      	str	r1, [r2, #0]
 8012b7c:	6861      	ldr	r1, [r4, #4]
 8012b7e:	6051      	str	r1, [r2, #4]
 8012b80:	68a1      	ldr	r1, [r4, #8]
 8012b82:	6091      	str	r1, [r2, #8]
 8012b84:	eb05 0208 	add.w	r2, r5, r8
 8012b88:	eba7 0708 	sub.w	r7, r7, r8
 8012b8c:	f047 0701 	orr.w	r7, r7, #1
 8012b90:	609a      	str	r2, [r3, #8]
 8012b92:	6057      	str	r7, [r2, #4]
 8012b94:	686b      	ldr	r3, [r5, #4]
 8012b96:	f003 0301 	and.w	r3, r3, #1
 8012b9a:	ea43 0308 	orr.w	r3, r3, r8
 8012b9e:	606b      	str	r3, [r5, #4]
 8012ba0:	4650      	mov	r0, sl
 8012ba2:	f7fd f9ed 	bl	800ff80 <__malloc_unlock>
 8012ba6:	e78e      	b.n	8012ac6 <_realloc_r+0xaa>
 8012ba8:	68a1      	ldr	r1, [r4, #8]
 8012baa:	6129      	str	r1, [r5, #16]
 8012bac:	68e1      	ldr	r1, [r4, #12]
 8012bae:	6169      	str	r1, [r5, #20]
 8012bb0:	2a24      	cmp	r2, #36	@ 0x24
 8012bb2:	bf01      	itttt	eq
 8012bb4:	6922      	ldreq	r2, [r4, #16]
 8012bb6:	61aa      	streq	r2, [r5, #24]
 8012bb8:	6961      	ldreq	r1, [r4, #20]
 8012bba:	61e9      	streq	r1, [r5, #28]
 8012bbc:	bf19      	ittee	ne
 8012bbe:	3410      	addne	r4, #16
 8012bc0:	f105 0218 	addne.w	r2, r5, #24
 8012bc4:	f105 0220 	addeq.w	r2, r5, #32
 8012bc8:	3418      	addeq	r4, #24
 8012bca:	e7d5      	b.n	8012b78 <_realloc_r+0x15c>
 8012bcc:	465a      	mov	r2, fp
 8012bce:	e7d3      	b.n	8012b78 <_realloc_r+0x15c>
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	4658      	mov	r0, fp
 8012bd4:	f7ff fe9b 	bl	801290e <memmove>
 8012bd8:	4b43      	ldr	r3, [pc, #268]	@ (8012ce8 <_realloc_r+0x2cc>)
 8012bda:	e7d3      	b.n	8012b84 <_realloc_r+0x168>
 8012bdc:	45b8      	cmp	r8, r7
 8012bde:	dc35      	bgt.n	8012c4c <_realloc_r+0x230>
 8012be0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012be4:	4628      	mov	r0, r5
 8012be6:	60d3      	str	r3, [r2, #12]
 8012be8:	609a      	str	r2, [r3, #8]
 8012bea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8012bee:	68eb      	ldr	r3, [r5, #12]
 8012bf0:	60d3      	str	r3, [r2, #12]
 8012bf2:	609a      	str	r2, [r3, #8]
 8012bf4:	1f32      	subs	r2, r6, #4
 8012bf6:	2a24      	cmp	r2, #36	@ 0x24
 8012bf8:	d824      	bhi.n	8012c44 <_realloc_r+0x228>
 8012bfa:	2a13      	cmp	r2, #19
 8012bfc:	d908      	bls.n	8012c10 <_realloc_r+0x1f4>
 8012bfe:	6823      	ldr	r3, [r4, #0]
 8012c00:	60ab      	str	r3, [r5, #8]
 8012c02:	6863      	ldr	r3, [r4, #4]
 8012c04:	60eb      	str	r3, [r5, #12]
 8012c06:	2a1b      	cmp	r2, #27
 8012c08:	d80a      	bhi.n	8012c20 <_realloc_r+0x204>
 8012c0a:	3408      	adds	r4, #8
 8012c0c:	f105 0010 	add.w	r0, r5, #16
 8012c10:	6823      	ldr	r3, [r4, #0]
 8012c12:	6003      	str	r3, [r0, #0]
 8012c14:	6863      	ldr	r3, [r4, #4]
 8012c16:	6043      	str	r3, [r0, #4]
 8012c18:	68a3      	ldr	r3, [r4, #8]
 8012c1a:	6083      	str	r3, [r0, #8]
 8012c1c:	46a9      	mov	r9, r5
 8012c1e:	e75c      	b.n	8012ada <_realloc_r+0xbe>
 8012c20:	68a3      	ldr	r3, [r4, #8]
 8012c22:	612b      	str	r3, [r5, #16]
 8012c24:	68e3      	ldr	r3, [r4, #12]
 8012c26:	616b      	str	r3, [r5, #20]
 8012c28:	2a24      	cmp	r2, #36	@ 0x24
 8012c2a:	bf01      	itttt	eq
 8012c2c:	6923      	ldreq	r3, [r4, #16]
 8012c2e:	61ab      	streq	r3, [r5, #24]
 8012c30:	6963      	ldreq	r3, [r4, #20]
 8012c32:	61eb      	streq	r3, [r5, #28]
 8012c34:	bf19      	ittee	ne
 8012c36:	3410      	addne	r4, #16
 8012c38:	f105 0018 	addne.w	r0, r5, #24
 8012c3c:	f105 0020 	addeq.w	r0, r5, #32
 8012c40:	3418      	addeq	r4, #24
 8012c42:	e7e5      	b.n	8012c10 <_realloc_r+0x1f4>
 8012c44:	4621      	mov	r1, r4
 8012c46:	f7ff fe62 	bl	801290e <memmove>
 8012c4a:	e7e7      	b.n	8012c1c <_realloc_r+0x200>
 8012c4c:	9b01      	ldr	r3, [sp, #4]
 8012c4e:	4598      	cmp	r8, r3
 8012c50:	dc31      	bgt.n	8012cb6 <_realloc_r+0x29a>
 8012c52:	4628      	mov	r0, r5
 8012c54:	68eb      	ldr	r3, [r5, #12]
 8012c56:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8012c5a:	60d3      	str	r3, [r2, #12]
 8012c5c:	609a      	str	r2, [r3, #8]
 8012c5e:	1f32      	subs	r2, r6, #4
 8012c60:	2a24      	cmp	r2, #36	@ 0x24
 8012c62:	d824      	bhi.n	8012cae <_realloc_r+0x292>
 8012c64:	2a13      	cmp	r2, #19
 8012c66:	d908      	bls.n	8012c7a <_realloc_r+0x25e>
 8012c68:	6823      	ldr	r3, [r4, #0]
 8012c6a:	60ab      	str	r3, [r5, #8]
 8012c6c:	6863      	ldr	r3, [r4, #4]
 8012c6e:	60eb      	str	r3, [r5, #12]
 8012c70:	2a1b      	cmp	r2, #27
 8012c72:	d80a      	bhi.n	8012c8a <_realloc_r+0x26e>
 8012c74:	3408      	adds	r4, #8
 8012c76:	f105 0010 	add.w	r0, r5, #16
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	6003      	str	r3, [r0, #0]
 8012c7e:	6863      	ldr	r3, [r4, #4]
 8012c80:	6043      	str	r3, [r0, #4]
 8012c82:	68a3      	ldr	r3, [r4, #8]
 8012c84:	6083      	str	r3, [r0, #8]
 8012c86:	9f01      	ldr	r7, [sp, #4]
 8012c88:	e7c8      	b.n	8012c1c <_realloc_r+0x200>
 8012c8a:	68a3      	ldr	r3, [r4, #8]
 8012c8c:	612b      	str	r3, [r5, #16]
 8012c8e:	68e3      	ldr	r3, [r4, #12]
 8012c90:	616b      	str	r3, [r5, #20]
 8012c92:	2a24      	cmp	r2, #36	@ 0x24
 8012c94:	bf01      	itttt	eq
 8012c96:	6923      	ldreq	r3, [r4, #16]
 8012c98:	61ab      	streq	r3, [r5, #24]
 8012c9a:	6963      	ldreq	r3, [r4, #20]
 8012c9c:	61eb      	streq	r3, [r5, #28]
 8012c9e:	bf19      	ittee	ne
 8012ca0:	3410      	addne	r4, #16
 8012ca2:	f105 0018 	addne.w	r0, r5, #24
 8012ca6:	f105 0020 	addeq.w	r0, r5, #32
 8012caa:	3418      	addeq	r4, #24
 8012cac:	e7e5      	b.n	8012c7a <_realloc_r+0x25e>
 8012cae:	4621      	mov	r1, r4
 8012cb0:	f7ff fe2d 	bl	801290e <memmove>
 8012cb4:	e7e7      	b.n	8012c86 <_realloc_r+0x26a>
 8012cb6:	4659      	mov	r1, fp
 8012cb8:	4650      	mov	r0, sl
 8012cba:	f7fc ff21 	bl	800fb00 <_malloc_r>
 8012cbe:	4683      	mov	fp, r0
 8012cc0:	b918      	cbnz	r0, 8012cca <_realloc_r+0x2ae>
 8012cc2:	4650      	mov	r0, sl
 8012cc4:	f7fd f95c 	bl	800ff80 <__malloc_unlock>
 8012cc8:	e6c7      	b.n	8012a5a <_realloc_r+0x3e>
 8012cca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012cce:	f023 0301 	bic.w	r3, r3, #1
 8012cd2:	444b      	add	r3, r9
 8012cd4:	f1a0 0208 	sub.w	r2, r0, #8
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d107      	bne.n	8012cec <_realloc_r+0x2d0>
 8012cdc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8012ce0:	f027 0703 	bic.w	r7, r7, #3
 8012ce4:	4437      	add	r7, r6
 8012ce6:	e6f8      	b.n	8012ada <_realloc_r+0xbe>
 8012ce8:	240003b4 	.word	0x240003b4
 8012cec:	1f32      	subs	r2, r6, #4
 8012cee:	2a24      	cmp	r2, #36	@ 0x24
 8012cf0:	d82d      	bhi.n	8012d4e <_realloc_r+0x332>
 8012cf2:	2a13      	cmp	r2, #19
 8012cf4:	d928      	bls.n	8012d48 <_realloc_r+0x32c>
 8012cf6:	6823      	ldr	r3, [r4, #0]
 8012cf8:	6003      	str	r3, [r0, #0]
 8012cfa:	6863      	ldr	r3, [r4, #4]
 8012cfc:	6043      	str	r3, [r0, #4]
 8012cfe:	2a1b      	cmp	r2, #27
 8012d00:	d80e      	bhi.n	8012d20 <_realloc_r+0x304>
 8012d02:	f104 0208 	add.w	r2, r4, #8
 8012d06:	f100 0308 	add.w	r3, r0, #8
 8012d0a:	6811      	ldr	r1, [r2, #0]
 8012d0c:	6019      	str	r1, [r3, #0]
 8012d0e:	6851      	ldr	r1, [r2, #4]
 8012d10:	6059      	str	r1, [r3, #4]
 8012d12:	6892      	ldr	r2, [r2, #8]
 8012d14:	609a      	str	r2, [r3, #8]
 8012d16:	4621      	mov	r1, r4
 8012d18:	4650      	mov	r0, sl
 8012d1a:	f7fc fe31 	bl	800f980 <_free_r>
 8012d1e:	e73f      	b.n	8012ba0 <_realloc_r+0x184>
 8012d20:	68a3      	ldr	r3, [r4, #8]
 8012d22:	6083      	str	r3, [r0, #8]
 8012d24:	68e3      	ldr	r3, [r4, #12]
 8012d26:	60c3      	str	r3, [r0, #12]
 8012d28:	2a24      	cmp	r2, #36	@ 0x24
 8012d2a:	bf01      	itttt	eq
 8012d2c:	6923      	ldreq	r3, [r4, #16]
 8012d2e:	6103      	streq	r3, [r0, #16]
 8012d30:	6961      	ldreq	r1, [r4, #20]
 8012d32:	6141      	streq	r1, [r0, #20]
 8012d34:	bf19      	ittee	ne
 8012d36:	f104 0210 	addne.w	r2, r4, #16
 8012d3a:	f100 0310 	addne.w	r3, r0, #16
 8012d3e:	f104 0218 	addeq.w	r2, r4, #24
 8012d42:	f100 0318 	addeq.w	r3, r0, #24
 8012d46:	e7e0      	b.n	8012d0a <_realloc_r+0x2ee>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	4622      	mov	r2, r4
 8012d4c:	e7dd      	b.n	8012d0a <_realloc_r+0x2ee>
 8012d4e:	4621      	mov	r1, r4
 8012d50:	f7ff fddd 	bl	801290e <memmove>
 8012d54:	e7df      	b.n	8012d16 <_realloc_r+0x2fa>
 8012d56:	4637      	mov	r7, r6
 8012d58:	e6bf      	b.n	8012ada <_realloc_r+0xbe>
 8012d5a:	431f      	orrs	r7, r3
 8012d5c:	f8c9 7004 	str.w	r7, [r9, #4]
 8012d60:	6853      	ldr	r3, [r2, #4]
 8012d62:	f043 0301 	orr.w	r3, r3, #1
 8012d66:	6053      	str	r3, [r2, #4]
 8012d68:	e6d3      	b.n	8012b12 <_realloc_r+0xf6>
 8012d6a:	bf00      	nop

08012d6c <__ascii_wctomb>:
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	4608      	mov	r0, r1
 8012d70:	b141      	cbz	r1, 8012d84 <__ascii_wctomb+0x18>
 8012d72:	2aff      	cmp	r2, #255	@ 0xff
 8012d74:	d904      	bls.n	8012d80 <__ascii_wctomb+0x14>
 8012d76:	228a      	movs	r2, #138	@ 0x8a
 8012d78:	601a      	str	r2, [r3, #0]
 8012d7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d7e:	4770      	bx	lr
 8012d80:	700a      	strb	r2, [r1, #0]
 8012d82:	2001      	movs	r0, #1
 8012d84:	4770      	bx	lr
	...

08012d88 <fiprintf>:
 8012d88:	b40e      	push	{r1, r2, r3}
 8012d8a:	b503      	push	{r0, r1, lr}
 8012d8c:	4601      	mov	r1, r0
 8012d8e:	ab03      	add	r3, sp, #12
 8012d90:	4805      	ldr	r0, [pc, #20]	@ (8012da8 <fiprintf+0x20>)
 8012d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d96:	6800      	ldr	r0, [r0, #0]
 8012d98:	9301      	str	r3, [sp, #4]
 8012d9a:	f000 f839 	bl	8012e10 <_vfiprintf_r>
 8012d9e:	b002      	add	sp, #8
 8012da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012da4:	b003      	add	sp, #12
 8012da6:	4770      	bx	lr
 8012da8:	24000284 	.word	0x24000284

08012dac <__sprint_r>:
 8012dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db0:	6893      	ldr	r3, [r2, #8]
 8012db2:	4680      	mov	r8, r0
 8012db4:	460e      	mov	r6, r1
 8012db6:	4614      	mov	r4, r2
 8012db8:	b343      	cbz	r3, 8012e0c <__sprint_r+0x60>
 8012dba:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8012dbc:	049d      	lsls	r5, r3, #18
 8012dbe:	d522      	bpl.n	8012e06 <__sprint_r+0x5a>
 8012dc0:	6815      	ldr	r5, [r2, #0]
 8012dc2:	68a0      	ldr	r0, [r4, #8]
 8012dc4:	3508      	adds	r5, #8
 8012dc6:	b928      	cbnz	r0, 8012dd4 <__sprint_r+0x28>
 8012dc8:	2300      	movs	r3, #0
 8012dca:	60a3      	str	r3, [r4, #8]
 8012dcc:	2300      	movs	r3, #0
 8012dce:	6063      	str	r3, [r4, #4]
 8012dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dd4:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8012dd8:	f04f 0900 	mov.w	r9, #0
 8012ddc:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8012de0:	45ca      	cmp	sl, r9
 8012de2:	dc05      	bgt.n	8012df0 <__sprint_r+0x44>
 8012de4:	68a3      	ldr	r3, [r4, #8]
 8012de6:	f027 0703 	bic.w	r7, r7, #3
 8012dea:	1bdb      	subs	r3, r3, r7
 8012dec:	60a3      	str	r3, [r4, #8]
 8012dee:	e7e8      	b.n	8012dc2 <__sprint_r+0x16>
 8012df0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8012df4:	4632      	mov	r2, r6
 8012df6:	4640      	mov	r0, r8
 8012df8:	f000 feb5 	bl	8013b66 <_fputwc_r>
 8012dfc:	1c43      	adds	r3, r0, #1
 8012dfe:	d0e3      	beq.n	8012dc8 <__sprint_r+0x1c>
 8012e00:	f109 0901 	add.w	r9, r9, #1
 8012e04:	e7ec      	b.n	8012de0 <__sprint_r+0x34>
 8012e06:	f000 fccb 	bl	80137a0 <__sfvwrite_r>
 8012e0a:	e7dd      	b.n	8012dc8 <__sprint_r+0x1c>
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	e7dd      	b.n	8012dcc <__sprint_r+0x20>

08012e10 <_vfiprintf_r>:
 8012e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e14:	b0bb      	sub	sp, #236	@ 0xec
 8012e16:	460f      	mov	r7, r1
 8012e18:	4693      	mov	fp, r2
 8012e1a:	461c      	mov	r4, r3
 8012e1c:	461d      	mov	r5, r3
 8012e1e:	9000      	str	r0, [sp, #0]
 8012e20:	b118      	cbz	r0, 8012e2a <_vfiprintf_r+0x1a>
 8012e22:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012e24:	b90b      	cbnz	r3, 8012e2a <_vfiprintf_r+0x1a>
 8012e26:	f7fc fc21 	bl	800f66c <__sinit>
 8012e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012e2c:	07db      	lsls	r3, r3, #31
 8012e2e:	d405      	bmi.n	8012e3c <_vfiprintf_r+0x2c>
 8012e30:	89bb      	ldrh	r3, [r7, #12]
 8012e32:	059e      	lsls	r6, r3, #22
 8012e34:	d402      	bmi.n	8012e3c <_vfiprintf_r+0x2c>
 8012e36:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012e38:	f7fc fd2c 	bl	800f894 <__retarget_lock_acquire_recursive>
 8012e3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012e40:	0498      	lsls	r0, r3, #18
 8012e42:	d406      	bmi.n	8012e52 <_vfiprintf_r+0x42>
 8012e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012e48:	81bb      	strh	r3, [r7, #12]
 8012e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012e50:	667b      	str	r3, [r7, #100]	@ 0x64
 8012e52:	89bb      	ldrh	r3, [r7, #12]
 8012e54:	0719      	lsls	r1, r3, #28
 8012e56:	d501      	bpl.n	8012e5c <_vfiprintf_r+0x4c>
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	b9ab      	cbnz	r3, 8012e88 <_vfiprintf_r+0x78>
 8012e5c:	9800      	ldr	r0, [sp, #0]
 8012e5e:	4639      	mov	r1, r7
 8012e60:	f000 fdea 	bl	8013a38 <__swsetup_r>
 8012e64:	b180      	cbz	r0, 8012e88 <_vfiprintf_r+0x78>
 8012e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012e68:	07da      	lsls	r2, r3, #31
 8012e6a:	d506      	bpl.n	8012e7a <_vfiprintf_r+0x6a>
 8012e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012e70:	9303      	str	r3, [sp, #12]
 8012e72:	9803      	ldr	r0, [sp, #12]
 8012e74:	b03b      	add	sp, #236	@ 0xec
 8012e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e7a:	89bb      	ldrh	r3, [r7, #12]
 8012e7c:	059b      	lsls	r3, r3, #22
 8012e7e:	d4f5      	bmi.n	8012e6c <_vfiprintf_r+0x5c>
 8012e80:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012e82:	f7fc fd08 	bl	800f896 <__retarget_lock_release_recursive>
 8012e86:	e7f1      	b.n	8012e6c <_vfiprintf_r+0x5c>
 8012e88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012e8c:	f003 021a 	and.w	r2, r3, #26
 8012e90:	2a0a      	cmp	r2, #10
 8012e92:	d114      	bne.n	8012ebe <_vfiprintf_r+0xae>
 8012e94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012e98:	2a00      	cmp	r2, #0
 8012e9a:	db10      	blt.n	8012ebe <_vfiprintf_r+0xae>
 8012e9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012e9e:	07d6      	lsls	r6, r2, #31
 8012ea0:	d404      	bmi.n	8012eac <_vfiprintf_r+0x9c>
 8012ea2:	059d      	lsls	r5, r3, #22
 8012ea4:	d402      	bmi.n	8012eac <_vfiprintf_r+0x9c>
 8012ea6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012ea8:	f7fc fcf5 	bl	800f896 <__retarget_lock_release_recursive>
 8012eac:	9800      	ldr	r0, [sp, #0]
 8012eae:	4623      	mov	r3, r4
 8012eb0:	465a      	mov	r2, fp
 8012eb2:	4639      	mov	r1, r7
 8012eb4:	b03b      	add	sp, #236	@ 0xec
 8012eb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eba:	f000 bc31 	b.w	8013720 <__sbprintf>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8012ec4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012ec8:	ae11      	add	r6, sp, #68	@ 0x44
 8012eca:	960e      	str	r6, [sp, #56]	@ 0x38
 8012ecc:	9307      	str	r3, [sp, #28]
 8012ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ed0:	9303      	str	r3, [sp, #12]
 8012ed2:	465b      	mov	r3, fp
 8012ed4:	461c      	mov	r4, r3
 8012ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eda:	b10a      	cbz	r2, 8012ee0 <_vfiprintf_r+0xd0>
 8012edc:	2a25      	cmp	r2, #37	@ 0x25
 8012ede:	d1f9      	bne.n	8012ed4 <_vfiprintf_r+0xc4>
 8012ee0:	ebb4 080b 	subs.w	r8, r4, fp
 8012ee4:	d00d      	beq.n	8012f02 <_vfiprintf_r+0xf2>
 8012ee6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ee8:	4443      	add	r3, r8
 8012eea:	9310      	str	r3, [sp, #64]	@ 0x40
 8012eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012eee:	3301      	adds	r3, #1
 8012ef0:	2b07      	cmp	r3, #7
 8012ef2:	e9c6 b800 	strd	fp, r8, [r6]
 8012ef6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012ef8:	dc75      	bgt.n	8012fe6 <_vfiprintf_r+0x1d6>
 8012efa:	3608      	adds	r6, #8
 8012efc:	9b03      	ldr	r3, [sp, #12]
 8012efe:	4443      	add	r3, r8
 8012f00:	9303      	str	r3, [sp, #12]
 8012f02:	7823      	ldrb	r3, [r4, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 83cd 	beq.w	80136a4 <_vfiprintf_r+0x894>
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012f10:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8012f14:	3401      	adds	r4, #1
 8012f16:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8012f1a:	469a      	mov	sl, r3
 8012f1c:	46a3      	mov	fp, r4
 8012f1e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8012f22:	f1a3 0220 	sub.w	r2, r3, #32
 8012f26:	2a5a      	cmp	r2, #90	@ 0x5a
 8012f28:	f200 8316 	bhi.w	8013558 <_vfiprintf_r+0x748>
 8012f2c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012f30:	0314009a 	.word	0x0314009a
 8012f34:	00a20314 	.word	0x00a20314
 8012f38:	03140314 	.word	0x03140314
 8012f3c:	00820314 	.word	0x00820314
 8012f40:	03140314 	.word	0x03140314
 8012f44:	00af00a5 	.word	0x00af00a5
 8012f48:	00ac0314 	.word	0x00ac0314
 8012f4c:	031400b1 	.word	0x031400b1
 8012f50:	00d000cd 	.word	0x00d000cd
 8012f54:	00d000d0 	.word	0x00d000d0
 8012f58:	00d000d0 	.word	0x00d000d0
 8012f5c:	00d000d0 	.word	0x00d000d0
 8012f60:	00d000d0 	.word	0x00d000d0
 8012f64:	03140314 	.word	0x03140314
 8012f68:	03140314 	.word	0x03140314
 8012f6c:	03140314 	.word	0x03140314
 8012f70:	03140314 	.word	0x03140314
 8012f74:	00f70314 	.word	0x00f70314
 8012f78:	03140104 	.word	0x03140104
 8012f7c:	03140314 	.word	0x03140314
 8012f80:	03140314 	.word	0x03140314
 8012f84:	03140314 	.word	0x03140314
 8012f88:	03140314 	.word	0x03140314
 8012f8c:	01520314 	.word	0x01520314
 8012f90:	03140314 	.word	0x03140314
 8012f94:	019a0314 	.word	0x019a0314
 8012f98:	027a0314 	.word	0x027a0314
 8012f9c:	03140314 	.word	0x03140314
 8012fa0:	0314029a 	.word	0x0314029a
 8012fa4:	03140314 	.word	0x03140314
 8012fa8:	03140314 	.word	0x03140314
 8012fac:	03140314 	.word	0x03140314
 8012fb0:	03140314 	.word	0x03140314
 8012fb4:	00f70314 	.word	0x00f70314
 8012fb8:	03140106 	.word	0x03140106
 8012fbc:	03140314 	.word	0x03140314
 8012fc0:	010600e0 	.word	0x010600e0
 8012fc4:	031400f1 	.word	0x031400f1
 8012fc8:	031400eb 	.word	0x031400eb
 8012fcc:	01540132 	.word	0x01540132
 8012fd0:	00f10189 	.word	0x00f10189
 8012fd4:	019a0314 	.word	0x019a0314
 8012fd8:	027c0098 	.word	0x027c0098
 8012fdc:	03140314 	.word	0x03140314
 8012fe0:	03140065 	.word	0x03140065
 8012fe4:	0098      	.short	0x0098
 8012fe6:	9800      	ldr	r0, [sp, #0]
 8012fe8:	aa0e      	add	r2, sp, #56	@ 0x38
 8012fea:	4639      	mov	r1, r7
 8012fec:	f7ff fede 	bl	8012dac <__sprint_r>
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	f040 8336 	bne.w	8013662 <_vfiprintf_r+0x852>
 8012ff6:	ae11      	add	r6, sp, #68	@ 0x44
 8012ff8:	e780      	b.n	8012efc <_vfiprintf_r+0xec>
 8012ffa:	4a99      	ldr	r2, [pc, #612]	@ (8013260 <_vfiprintf_r+0x450>)
 8012ffc:	9205      	str	r2, [sp, #20]
 8012ffe:	f01a 0220 	ands.w	r2, sl, #32
 8013002:	f000 8231 	beq.w	8013468 <_vfiprintf_r+0x658>
 8013006:	3507      	adds	r5, #7
 8013008:	f025 0507 	bic.w	r5, r5, #7
 801300c:	46a8      	mov	r8, r5
 801300e:	686d      	ldr	r5, [r5, #4]
 8013010:	f858 4b08 	ldr.w	r4, [r8], #8
 8013014:	f01a 0f01 	tst.w	sl, #1
 8013018:	d009      	beq.n	801302e <_vfiprintf_r+0x21e>
 801301a:	ea54 0205 	orrs.w	r2, r4, r5
 801301e:	bf1f      	itttt	ne
 8013020:	2230      	movne	r2, #48	@ 0x30
 8013022:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8013026:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801302a:	f04a 0a02 	orrne.w	sl, sl, #2
 801302e:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8013032:	e112      	b.n	801325a <_vfiprintf_r+0x44a>
 8013034:	9800      	ldr	r0, [sp, #0]
 8013036:	f7fe fa45 	bl	80114c4 <_localeconv_r>
 801303a:	6843      	ldr	r3, [r0, #4]
 801303c:	9309      	str	r3, [sp, #36]	@ 0x24
 801303e:	4618      	mov	r0, r3
 8013040:	f7ed f99e 	bl	8000380 <strlen>
 8013044:	9007      	str	r0, [sp, #28]
 8013046:	9800      	ldr	r0, [sp, #0]
 8013048:	f7fe fa3c 	bl	80114c4 <_localeconv_r>
 801304c:	6883      	ldr	r3, [r0, #8]
 801304e:	9306      	str	r3, [sp, #24]
 8013050:	9b07      	ldr	r3, [sp, #28]
 8013052:	b12b      	cbz	r3, 8013060 <_vfiprintf_r+0x250>
 8013054:	9b06      	ldr	r3, [sp, #24]
 8013056:	b11b      	cbz	r3, 8013060 <_vfiprintf_r+0x250>
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	b10b      	cbz	r3, 8013060 <_vfiprintf_r+0x250>
 801305c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8013060:	465c      	mov	r4, fp
 8013062:	e75b      	b.n	8012f1c <_vfiprintf_r+0x10c>
 8013064:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8013068:	2b00      	cmp	r3, #0
 801306a:	d1f9      	bne.n	8013060 <_vfiprintf_r+0x250>
 801306c:	2320      	movs	r3, #32
 801306e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013072:	e7f5      	b.n	8013060 <_vfiprintf_r+0x250>
 8013074:	f04a 0a01 	orr.w	sl, sl, #1
 8013078:	e7f2      	b.n	8013060 <_vfiprintf_r+0x250>
 801307a:	f855 3b04 	ldr.w	r3, [r5], #4
 801307e:	9302      	str	r3, [sp, #8]
 8013080:	2b00      	cmp	r3, #0
 8013082:	daed      	bge.n	8013060 <_vfiprintf_r+0x250>
 8013084:	425b      	negs	r3, r3
 8013086:	9302      	str	r3, [sp, #8]
 8013088:	f04a 0a04 	orr.w	sl, sl, #4
 801308c:	e7e8      	b.n	8013060 <_vfiprintf_r+0x250>
 801308e:	232b      	movs	r3, #43	@ 0x2b
 8013090:	e7ed      	b.n	801306e <_vfiprintf_r+0x25e>
 8013092:	465a      	mov	r2, fp
 8013094:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013098:	2b2a      	cmp	r3, #42	@ 0x2a
 801309a:	d112      	bne.n	80130c2 <_vfiprintf_r+0x2b2>
 801309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80130a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80130a4:	9301      	str	r3, [sp, #4]
 80130a6:	4693      	mov	fp, r2
 80130a8:	e7da      	b.n	8013060 <_vfiprintf_r+0x250>
 80130aa:	9b01      	ldr	r3, [sp, #4]
 80130ac:	fb00 1303 	mla	r3, r0, r3, r1
 80130b0:	9301      	str	r3, [sp, #4]
 80130b2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80130b6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80130ba:	2909      	cmp	r1, #9
 80130bc:	d9f5      	bls.n	80130aa <_vfiprintf_r+0x29a>
 80130be:	4693      	mov	fp, r2
 80130c0:	e72f      	b.n	8012f22 <_vfiprintf_r+0x112>
 80130c2:	2100      	movs	r1, #0
 80130c4:	9101      	str	r1, [sp, #4]
 80130c6:	200a      	movs	r0, #10
 80130c8:	e7f5      	b.n	80130b6 <_vfiprintf_r+0x2a6>
 80130ca:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80130ce:	e7c7      	b.n	8013060 <_vfiprintf_r+0x250>
 80130d0:	2100      	movs	r1, #0
 80130d2:	465a      	mov	r2, fp
 80130d4:	9102      	str	r1, [sp, #8]
 80130d6:	200a      	movs	r0, #10
 80130d8:	9902      	ldr	r1, [sp, #8]
 80130da:	3b30      	subs	r3, #48	@ 0x30
 80130dc:	fb00 3301 	mla	r3, r0, r1, r3
 80130e0:	9302      	str	r3, [sp, #8]
 80130e2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80130e6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80130ea:	2909      	cmp	r1, #9
 80130ec:	d9f4      	bls.n	80130d8 <_vfiprintf_r+0x2c8>
 80130ee:	e7e6      	b.n	80130be <_vfiprintf_r+0x2ae>
 80130f0:	f89b 3000 	ldrb.w	r3, [fp]
 80130f4:	2b68      	cmp	r3, #104	@ 0x68
 80130f6:	bf06      	itte	eq
 80130f8:	f10b 0b01 	addeq.w	fp, fp, #1
 80130fc:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8013100:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8013104:	e7ac      	b.n	8013060 <_vfiprintf_r+0x250>
 8013106:	f89b 3000 	ldrb.w	r3, [fp]
 801310a:	2b6c      	cmp	r3, #108	@ 0x6c
 801310c:	d104      	bne.n	8013118 <_vfiprintf_r+0x308>
 801310e:	f10b 0b01 	add.w	fp, fp, #1
 8013112:	f04a 0a20 	orr.w	sl, sl, #32
 8013116:	e7a3      	b.n	8013060 <_vfiprintf_r+0x250>
 8013118:	f04a 0a10 	orr.w	sl, sl, #16
 801311c:	e7a0      	b.n	8013060 <_vfiprintf_r+0x250>
 801311e:	46a8      	mov	r8, r5
 8013120:	2400      	movs	r4, #0
 8013122:	f858 3b04 	ldr.w	r3, [r8], #4
 8013126:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801312a:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801312e:	2301      	movs	r3, #1
 8013130:	9301      	str	r3, [sp, #4]
 8013132:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8013136:	e0ab      	b.n	8013290 <_vfiprintf_r+0x480>
 8013138:	f04a 0a10 	orr.w	sl, sl, #16
 801313c:	f01a 0f20 	tst.w	sl, #32
 8013140:	d011      	beq.n	8013166 <_vfiprintf_r+0x356>
 8013142:	3507      	adds	r5, #7
 8013144:	f025 0507 	bic.w	r5, r5, #7
 8013148:	46a8      	mov	r8, r5
 801314a:	686d      	ldr	r5, [r5, #4]
 801314c:	f858 4b08 	ldr.w	r4, [r8], #8
 8013150:	2d00      	cmp	r5, #0
 8013152:	da06      	bge.n	8013162 <_vfiprintf_r+0x352>
 8013154:	4264      	negs	r4, r4
 8013156:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801315a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801315e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8013162:	2301      	movs	r3, #1
 8013164:	e048      	b.n	80131f8 <_vfiprintf_r+0x3e8>
 8013166:	46a8      	mov	r8, r5
 8013168:	f01a 0f10 	tst.w	sl, #16
 801316c:	f858 5b04 	ldr.w	r5, [r8], #4
 8013170:	d002      	beq.n	8013178 <_vfiprintf_r+0x368>
 8013172:	462c      	mov	r4, r5
 8013174:	17ed      	asrs	r5, r5, #31
 8013176:	e7eb      	b.n	8013150 <_vfiprintf_r+0x340>
 8013178:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801317c:	d003      	beq.n	8013186 <_vfiprintf_r+0x376>
 801317e:	b22c      	sxth	r4, r5
 8013180:	f345 35c0 	sbfx	r5, r5, #15, #1
 8013184:	e7e4      	b.n	8013150 <_vfiprintf_r+0x340>
 8013186:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801318a:	d0f2      	beq.n	8013172 <_vfiprintf_r+0x362>
 801318c:	b26c      	sxtb	r4, r5
 801318e:	f345 15c0 	sbfx	r5, r5, #7, #1
 8013192:	e7dd      	b.n	8013150 <_vfiprintf_r+0x340>
 8013194:	f01a 0f20 	tst.w	sl, #32
 8013198:	d007      	beq.n	80131aa <_vfiprintf_r+0x39a>
 801319a:	9a03      	ldr	r2, [sp, #12]
 801319c:	682b      	ldr	r3, [r5, #0]
 801319e:	9903      	ldr	r1, [sp, #12]
 80131a0:	17d2      	asrs	r2, r2, #31
 80131a2:	e9c3 1200 	strd	r1, r2, [r3]
 80131a6:	3504      	adds	r5, #4
 80131a8:	e693      	b.n	8012ed2 <_vfiprintf_r+0xc2>
 80131aa:	f01a 0f10 	tst.w	sl, #16
 80131ae:	d003      	beq.n	80131b8 <_vfiprintf_r+0x3a8>
 80131b0:	682b      	ldr	r3, [r5, #0]
 80131b2:	9a03      	ldr	r2, [sp, #12]
 80131b4:	601a      	str	r2, [r3, #0]
 80131b6:	e7f6      	b.n	80131a6 <_vfiprintf_r+0x396>
 80131b8:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80131bc:	d003      	beq.n	80131c6 <_vfiprintf_r+0x3b6>
 80131be:	682b      	ldr	r3, [r5, #0]
 80131c0:	9a03      	ldr	r2, [sp, #12]
 80131c2:	801a      	strh	r2, [r3, #0]
 80131c4:	e7ef      	b.n	80131a6 <_vfiprintf_r+0x396>
 80131c6:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80131ca:	d0f1      	beq.n	80131b0 <_vfiprintf_r+0x3a0>
 80131cc:	682b      	ldr	r3, [r5, #0]
 80131ce:	9a03      	ldr	r2, [sp, #12]
 80131d0:	701a      	strb	r2, [r3, #0]
 80131d2:	e7e8      	b.n	80131a6 <_vfiprintf_r+0x396>
 80131d4:	f04a 0a10 	orr.w	sl, sl, #16
 80131d8:	f01a 0320 	ands.w	r3, sl, #32
 80131dc:	d01f      	beq.n	801321e <_vfiprintf_r+0x40e>
 80131de:	3507      	adds	r5, #7
 80131e0:	f025 0507 	bic.w	r5, r5, #7
 80131e4:	46a8      	mov	r8, r5
 80131e6:	686d      	ldr	r5, [r5, #4]
 80131e8:	f858 4b08 	ldr.w	r4, [r8], #8
 80131ec:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80131f0:	2300      	movs	r3, #0
 80131f2:	2200      	movs	r2, #0
 80131f4:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80131f8:	9a01      	ldr	r2, [sp, #4]
 80131fa:	3201      	adds	r2, #1
 80131fc:	f000 825f 	beq.w	80136be <_vfiprintf_r+0x8ae>
 8013200:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8013204:	9204      	str	r2, [sp, #16]
 8013206:	ea54 0205 	orrs.w	r2, r4, r5
 801320a:	f040 825e 	bne.w	80136ca <_vfiprintf_r+0x8ba>
 801320e:	9a01      	ldr	r2, [sp, #4]
 8013210:	2a00      	cmp	r2, #0
 8013212:	f000 8198 	beq.w	8013546 <_vfiprintf_r+0x736>
 8013216:	2b01      	cmp	r3, #1
 8013218:	f040 825a 	bne.w	80136d0 <_vfiprintf_r+0x8c0>
 801321c:	e13b      	b.n	8013496 <_vfiprintf_r+0x686>
 801321e:	46a8      	mov	r8, r5
 8013220:	f01a 0510 	ands.w	r5, sl, #16
 8013224:	f858 4b04 	ldr.w	r4, [r8], #4
 8013228:	d001      	beq.n	801322e <_vfiprintf_r+0x41e>
 801322a:	461d      	mov	r5, r3
 801322c:	e7de      	b.n	80131ec <_vfiprintf_r+0x3dc>
 801322e:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8013232:	d001      	beq.n	8013238 <_vfiprintf_r+0x428>
 8013234:	b2a4      	uxth	r4, r4
 8013236:	e7d9      	b.n	80131ec <_vfiprintf_r+0x3dc>
 8013238:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801323c:	d0d6      	beq.n	80131ec <_vfiprintf_r+0x3dc>
 801323e:	b2e4      	uxtb	r4, r4
 8013240:	e7f3      	b.n	801322a <_vfiprintf_r+0x41a>
 8013242:	46a8      	mov	r8, r5
 8013244:	f647 0330 	movw	r3, #30768	@ 0x7830
 8013248:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801324c:	f858 4b04 	ldr.w	r4, [r8], #4
 8013250:	4b03      	ldr	r3, [pc, #12]	@ (8013260 <_vfiprintf_r+0x450>)
 8013252:	9305      	str	r3, [sp, #20]
 8013254:	2500      	movs	r5, #0
 8013256:	f04a 0a02 	orr.w	sl, sl, #2
 801325a:	2302      	movs	r3, #2
 801325c:	e7c9      	b.n	80131f2 <_vfiprintf_r+0x3e2>
 801325e:	bf00      	nop
 8013260:	08015658 	.word	0x08015658
 8013264:	9b01      	ldr	r3, [sp, #4]
 8013266:	46a8      	mov	r8, r5
 8013268:	1c5c      	adds	r4, r3, #1
 801326a:	f04f 0500 	mov.w	r5, #0
 801326e:	f858 9b04 	ldr.w	r9, [r8], #4
 8013272:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8013276:	f000 80d0 	beq.w	801341a <_vfiprintf_r+0x60a>
 801327a:	461a      	mov	r2, r3
 801327c:	4629      	mov	r1, r5
 801327e:	4648      	mov	r0, r9
 8013280:	f7ed f82e 	bl	80002e0 <memchr>
 8013284:	4604      	mov	r4, r0
 8013286:	b118      	cbz	r0, 8013290 <_vfiprintf_r+0x480>
 8013288:	eba0 0309 	sub.w	r3, r0, r9
 801328c:	9301      	str	r3, [sp, #4]
 801328e:	462c      	mov	r4, r5
 8013290:	9b01      	ldr	r3, [sp, #4]
 8013292:	42a3      	cmp	r3, r4
 8013294:	bfb8      	it	lt
 8013296:	4623      	movlt	r3, r4
 8013298:	9304      	str	r3, [sp, #16]
 801329a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801329e:	b113      	cbz	r3, 80132a6 <_vfiprintf_r+0x496>
 80132a0:	9b04      	ldr	r3, [sp, #16]
 80132a2:	3301      	adds	r3, #1
 80132a4:	9304      	str	r3, [sp, #16]
 80132a6:	f01a 0302 	ands.w	r3, sl, #2
 80132aa:	9308      	str	r3, [sp, #32]
 80132ac:	bf1e      	ittt	ne
 80132ae:	9b04      	ldrne	r3, [sp, #16]
 80132b0:	3302      	addne	r3, #2
 80132b2:	9304      	strne	r3, [sp, #16]
 80132b4:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80132b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80132ba:	d11f      	bne.n	80132fc <_vfiprintf_r+0x4ec>
 80132bc:	9b02      	ldr	r3, [sp, #8]
 80132be:	9a04      	ldr	r2, [sp, #16]
 80132c0:	1a9d      	subs	r5, r3, r2
 80132c2:	2d00      	cmp	r5, #0
 80132c4:	dd1a      	ble.n	80132fc <_vfiprintf_r+0x4ec>
 80132c6:	4ba9      	ldr	r3, [pc, #676]	@ (801356c <_vfiprintf_r+0x75c>)
 80132c8:	6033      	str	r3, [r6, #0]
 80132ca:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80132ce:	2d10      	cmp	r5, #16
 80132d0:	f102 0201 	add.w	r2, r2, #1
 80132d4:	f106 0008 	add.w	r0, r6, #8
 80132d8:	f300 814e 	bgt.w	8013578 <_vfiprintf_r+0x768>
 80132dc:	6075      	str	r5, [r6, #4]
 80132de:	2a07      	cmp	r2, #7
 80132e0:	4465      	add	r5, ip
 80132e2:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80132e6:	f340 815a 	ble.w	801359e <_vfiprintf_r+0x78e>
 80132ea:	9800      	ldr	r0, [sp, #0]
 80132ec:	aa0e      	add	r2, sp, #56	@ 0x38
 80132ee:	4639      	mov	r1, r7
 80132f0:	f7ff fd5c 	bl	8012dac <__sprint_r>
 80132f4:	2800      	cmp	r0, #0
 80132f6:	f040 81b4 	bne.w	8013662 <_vfiprintf_r+0x852>
 80132fa:	ae11      	add	r6, sp, #68	@ 0x44
 80132fc:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8013300:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013304:	b161      	cbz	r1, 8013320 <_vfiprintf_r+0x510>
 8013306:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801330a:	3301      	adds	r3, #1
 801330c:	6031      	str	r1, [r6, #0]
 801330e:	2101      	movs	r1, #1
 8013310:	440a      	add	r2, r1
 8013312:	2b07      	cmp	r3, #7
 8013314:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013318:	6071      	str	r1, [r6, #4]
 801331a:	f300 8142 	bgt.w	80135a2 <_vfiprintf_r+0x792>
 801331e:	3608      	adds	r6, #8
 8013320:	9908      	ldr	r1, [sp, #32]
 8013322:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013326:	b159      	cbz	r1, 8013340 <_vfiprintf_r+0x530>
 8013328:	a90d      	add	r1, sp, #52	@ 0x34
 801332a:	3301      	adds	r3, #1
 801332c:	6031      	str	r1, [r6, #0]
 801332e:	2102      	movs	r1, #2
 8013330:	440a      	add	r2, r1
 8013332:	2b07      	cmp	r3, #7
 8013334:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8013338:	6071      	str	r1, [r6, #4]
 801333a:	f300 813b 	bgt.w	80135b4 <_vfiprintf_r+0x7a4>
 801333e:	3608      	adds	r6, #8
 8013340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013342:	2b80      	cmp	r3, #128	@ 0x80
 8013344:	d11f      	bne.n	8013386 <_vfiprintf_r+0x576>
 8013346:	9b02      	ldr	r3, [sp, #8]
 8013348:	9a04      	ldr	r2, [sp, #16]
 801334a:	1a9d      	subs	r5, r3, r2
 801334c:	2d00      	cmp	r5, #0
 801334e:	dd1a      	ble.n	8013386 <_vfiprintf_r+0x576>
 8013350:	4b87      	ldr	r3, [pc, #540]	@ (8013570 <_vfiprintf_r+0x760>)
 8013352:	6033      	str	r3, [r6, #0]
 8013354:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8013358:	2d10      	cmp	r5, #16
 801335a:	f102 0201 	add.w	r2, r2, #1
 801335e:	f106 0008 	add.w	r0, r6, #8
 8013362:	f300 8130 	bgt.w	80135c6 <_vfiprintf_r+0x7b6>
 8013366:	6075      	str	r5, [r6, #4]
 8013368:	2a07      	cmp	r2, #7
 801336a:	4465      	add	r5, ip
 801336c:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8013370:	f340 813c 	ble.w	80135ec <_vfiprintf_r+0x7dc>
 8013374:	9800      	ldr	r0, [sp, #0]
 8013376:	aa0e      	add	r2, sp, #56	@ 0x38
 8013378:	4639      	mov	r1, r7
 801337a:	f7ff fd17 	bl	8012dac <__sprint_r>
 801337e:	2800      	cmp	r0, #0
 8013380:	f040 816f 	bne.w	8013662 <_vfiprintf_r+0x852>
 8013384:	ae11      	add	r6, sp, #68	@ 0x44
 8013386:	9b01      	ldr	r3, [sp, #4]
 8013388:	1ae4      	subs	r4, r4, r3
 801338a:	2c00      	cmp	r4, #0
 801338c:	dd1a      	ble.n	80133c4 <_vfiprintf_r+0x5b4>
 801338e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8013392:	4877      	ldr	r0, [pc, #476]	@ (8013570 <_vfiprintf_r+0x760>)
 8013394:	6030      	str	r0, [r6, #0]
 8013396:	2c10      	cmp	r4, #16
 8013398:	f103 0301 	add.w	r3, r3, #1
 801339c:	f106 0108 	add.w	r1, r6, #8
 80133a0:	f300 8126 	bgt.w	80135f0 <_vfiprintf_r+0x7e0>
 80133a4:	6074      	str	r4, [r6, #4]
 80133a6:	2b07      	cmp	r3, #7
 80133a8:	4414      	add	r4, r2
 80133aa:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80133ae:	f340 8130 	ble.w	8013612 <_vfiprintf_r+0x802>
 80133b2:	9800      	ldr	r0, [sp, #0]
 80133b4:	aa0e      	add	r2, sp, #56	@ 0x38
 80133b6:	4639      	mov	r1, r7
 80133b8:	f7ff fcf8 	bl	8012dac <__sprint_r>
 80133bc:	2800      	cmp	r0, #0
 80133be:	f040 8150 	bne.w	8013662 <_vfiprintf_r+0x852>
 80133c2:	ae11      	add	r6, sp, #68	@ 0x44
 80133c4:	9b01      	ldr	r3, [sp, #4]
 80133c6:	9a01      	ldr	r2, [sp, #4]
 80133c8:	6073      	str	r3, [r6, #4]
 80133ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80133cc:	f8c6 9000 	str.w	r9, [r6]
 80133d0:	4413      	add	r3, r2
 80133d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80133d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133d6:	3301      	adds	r3, #1
 80133d8:	2b07      	cmp	r3, #7
 80133da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80133dc:	f300 811b 	bgt.w	8013616 <_vfiprintf_r+0x806>
 80133e0:	f106 0308 	add.w	r3, r6, #8
 80133e4:	f01a 0f04 	tst.w	sl, #4
 80133e8:	f040 811d 	bne.w	8013626 <_vfiprintf_r+0x816>
 80133ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133f0:	9904      	ldr	r1, [sp, #16]
 80133f2:	428a      	cmp	r2, r1
 80133f4:	bfac      	ite	ge
 80133f6:	189b      	addge	r3, r3, r2
 80133f8:	185b      	addlt	r3, r3, r1
 80133fa:	9303      	str	r3, [sp, #12]
 80133fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80133fe:	b13b      	cbz	r3, 8013410 <_vfiprintf_r+0x600>
 8013400:	9800      	ldr	r0, [sp, #0]
 8013402:	aa0e      	add	r2, sp, #56	@ 0x38
 8013404:	4639      	mov	r1, r7
 8013406:	f7ff fcd1 	bl	8012dac <__sprint_r>
 801340a:	2800      	cmp	r0, #0
 801340c:	f040 8129 	bne.w	8013662 <_vfiprintf_r+0x852>
 8013410:	2300      	movs	r3, #0
 8013412:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013414:	4645      	mov	r5, r8
 8013416:	ae11      	add	r6, sp, #68	@ 0x44
 8013418:	e55b      	b.n	8012ed2 <_vfiprintf_r+0xc2>
 801341a:	4648      	mov	r0, r9
 801341c:	f7ec ffb0 	bl	8000380 <strlen>
 8013420:	9001      	str	r0, [sp, #4]
 8013422:	e734      	b.n	801328e <_vfiprintf_r+0x47e>
 8013424:	f04a 0a10 	orr.w	sl, sl, #16
 8013428:	f01a 0320 	ands.w	r3, sl, #32
 801342c:	d008      	beq.n	8013440 <_vfiprintf_r+0x630>
 801342e:	3507      	adds	r5, #7
 8013430:	f025 0507 	bic.w	r5, r5, #7
 8013434:	46a8      	mov	r8, r5
 8013436:	686d      	ldr	r5, [r5, #4]
 8013438:	f858 4b08 	ldr.w	r4, [r8], #8
 801343c:	2301      	movs	r3, #1
 801343e:	e6d8      	b.n	80131f2 <_vfiprintf_r+0x3e2>
 8013440:	46a8      	mov	r8, r5
 8013442:	f01a 0510 	ands.w	r5, sl, #16
 8013446:	f858 4b04 	ldr.w	r4, [r8], #4
 801344a:	d001      	beq.n	8013450 <_vfiprintf_r+0x640>
 801344c:	461d      	mov	r5, r3
 801344e:	e7f5      	b.n	801343c <_vfiprintf_r+0x62c>
 8013450:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8013454:	d001      	beq.n	801345a <_vfiprintf_r+0x64a>
 8013456:	b2a4      	uxth	r4, r4
 8013458:	e7f0      	b.n	801343c <_vfiprintf_r+0x62c>
 801345a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801345e:	d0ed      	beq.n	801343c <_vfiprintf_r+0x62c>
 8013460:	b2e4      	uxtb	r4, r4
 8013462:	e7f3      	b.n	801344c <_vfiprintf_r+0x63c>
 8013464:	4a43      	ldr	r2, [pc, #268]	@ (8013574 <_vfiprintf_r+0x764>)
 8013466:	e5c9      	b.n	8012ffc <_vfiprintf_r+0x1ec>
 8013468:	46a8      	mov	r8, r5
 801346a:	f01a 0510 	ands.w	r5, sl, #16
 801346e:	f858 4b04 	ldr.w	r4, [r8], #4
 8013472:	d001      	beq.n	8013478 <_vfiprintf_r+0x668>
 8013474:	4615      	mov	r5, r2
 8013476:	e5cd      	b.n	8013014 <_vfiprintf_r+0x204>
 8013478:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 801347c:	d001      	beq.n	8013482 <_vfiprintf_r+0x672>
 801347e:	b2a4      	uxth	r4, r4
 8013480:	e5c8      	b.n	8013014 <_vfiprintf_r+0x204>
 8013482:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8013486:	f43f adc5 	beq.w	8013014 <_vfiprintf_r+0x204>
 801348a:	b2e4      	uxtb	r4, r4
 801348c:	e7f2      	b.n	8013474 <_vfiprintf_r+0x664>
 801348e:	2c0a      	cmp	r4, #10
 8013490:	f175 0300 	sbcs.w	r3, r5, #0
 8013494:	d206      	bcs.n	80134a4 <_vfiprintf_r+0x694>
 8013496:	3430      	adds	r4, #48	@ 0x30
 8013498:	b2e4      	uxtb	r4, r4
 801349a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 801349e:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80134a2:	e131      	b.n	8013708 <_vfiprintf_r+0x8f8>
 80134a4:	ab3a      	add	r3, sp, #232	@ 0xe8
 80134a6:	9308      	str	r3, [sp, #32]
 80134a8:	9b04      	ldr	r3, [sp, #16]
 80134aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80134ae:	f04f 0a00 	mov.w	sl, #0
 80134b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80134b4:	220a      	movs	r2, #10
 80134b6:	2300      	movs	r3, #0
 80134b8:	4620      	mov	r0, r4
 80134ba:	4629      	mov	r1, r5
 80134bc:	f7ec ff68 	bl	8000390 <__aeabi_uldivmod>
 80134c0:	460b      	mov	r3, r1
 80134c2:	9908      	ldr	r1, [sp, #32]
 80134c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80134c6:	3230      	adds	r2, #48	@ 0x30
 80134c8:	f801 2c01 	strb.w	r2, [r1, #-1]
 80134cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80134ce:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 80134d2:	f10a 0a01 	add.w	sl, sl, #1
 80134d6:	b1e2      	cbz	r2, 8013512 <_vfiprintf_r+0x702>
 80134d8:	9a06      	ldr	r2, [sp, #24]
 80134da:	7812      	ldrb	r2, [r2, #0]
 80134dc:	4552      	cmp	r2, sl
 80134de:	d118      	bne.n	8013512 <_vfiprintf_r+0x702>
 80134e0:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80134e4:	d015      	beq.n	8013512 <_vfiprintf_r+0x702>
 80134e6:	2c0a      	cmp	r4, #10
 80134e8:	f175 0200 	sbcs.w	r2, r5, #0
 80134ec:	d311      	bcc.n	8013512 <_vfiprintf_r+0x702>
 80134ee:	9308      	str	r3, [sp, #32]
 80134f0:	9b07      	ldr	r3, [sp, #28]
 80134f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80134f4:	eba9 0903 	sub.w	r9, r9, r3
 80134f8:	461a      	mov	r2, r3
 80134fa:	4648      	mov	r0, r9
 80134fc:	f7fd ffcf 	bl	801149e <strncpy>
 8013500:	9b06      	ldr	r3, [sp, #24]
 8013502:	785a      	ldrb	r2, [r3, #1]
 8013504:	9b08      	ldr	r3, [sp, #32]
 8013506:	b172      	cbz	r2, 8013526 <_vfiprintf_r+0x716>
 8013508:	9a06      	ldr	r2, [sp, #24]
 801350a:	3201      	adds	r2, #1
 801350c:	9206      	str	r2, [sp, #24]
 801350e:	f04f 0a00 	mov.w	sl, #0
 8013512:	2c0a      	cmp	r4, #10
 8013514:	f175 0500 	sbcs.w	r5, r5, #0
 8013518:	f0c0 80f6 	bcc.w	8013708 <_vfiprintf_r+0x8f8>
 801351c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801351e:	f8cd 9020 	str.w	r9, [sp, #32]
 8013522:	461d      	mov	r5, r3
 8013524:	e7c6      	b.n	80134b4 <_vfiprintf_r+0x6a4>
 8013526:	4692      	mov	sl, r2
 8013528:	e7f3      	b.n	8013512 <_vfiprintf_r+0x702>
 801352a:	f004 030f 	and.w	r3, r4, #15
 801352e:	9a05      	ldr	r2, [sp, #20]
 8013530:	0924      	lsrs	r4, r4, #4
 8013532:	5cd3      	ldrb	r3, [r2, r3]
 8013534:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013538:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801353c:	092d      	lsrs	r5, r5, #4
 801353e:	ea54 0305 	orrs.w	r3, r4, r5
 8013542:	d1f2      	bne.n	801352a <_vfiprintf_r+0x71a>
 8013544:	e0e0      	b.n	8013708 <_vfiprintf_r+0x8f8>
 8013546:	b923      	cbnz	r3, 8013552 <_vfiprintf_r+0x742>
 8013548:	f01a 0f01 	tst.w	sl, #1
 801354c:	d001      	beq.n	8013552 <_vfiprintf_r+0x742>
 801354e:	2430      	movs	r4, #48	@ 0x30
 8013550:	e7a3      	b.n	801349a <_vfiprintf_r+0x68a>
 8013552:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8013556:	e0d7      	b.n	8013708 <_vfiprintf_r+0x8f8>
 8013558:	2b00      	cmp	r3, #0
 801355a:	f000 80a3 	beq.w	80136a4 <_vfiprintf_r+0x894>
 801355e:	2400      	movs	r4, #0
 8013560:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8013564:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8013568:	46a8      	mov	r8, r5
 801356a:	e5e0      	b.n	801312e <_vfiprintf_r+0x31e>
 801356c:	080159bf 	.word	0x080159bf
 8013570:	080159af 	.word	0x080159af
 8013574:	08015669 	.word	0x08015669
 8013578:	2110      	movs	r1, #16
 801357a:	6071      	str	r1, [r6, #4]
 801357c:	2a07      	cmp	r2, #7
 801357e:	4461      	add	r1, ip
 8013580:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013584:	dd08      	ble.n	8013598 <_vfiprintf_r+0x788>
 8013586:	9800      	ldr	r0, [sp, #0]
 8013588:	aa0e      	add	r2, sp, #56	@ 0x38
 801358a:	4639      	mov	r1, r7
 801358c:	f7ff fc0e 	bl	8012dac <__sprint_r>
 8013590:	2800      	cmp	r0, #0
 8013592:	d166      	bne.n	8013662 <_vfiprintf_r+0x852>
 8013594:	4b60      	ldr	r3, [pc, #384]	@ (8013718 <_vfiprintf_r+0x908>)
 8013596:	a811      	add	r0, sp, #68	@ 0x44
 8013598:	3d10      	subs	r5, #16
 801359a:	4606      	mov	r6, r0
 801359c:	e694      	b.n	80132c8 <_vfiprintf_r+0x4b8>
 801359e:	4606      	mov	r6, r0
 80135a0:	e6ac      	b.n	80132fc <_vfiprintf_r+0x4ec>
 80135a2:	9800      	ldr	r0, [sp, #0]
 80135a4:	aa0e      	add	r2, sp, #56	@ 0x38
 80135a6:	4639      	mov	r1, r7
 80135a8:	f7ff fc00 	bl	8012dac <__sprint_r>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	d158      	bne.n	8013662 <_vfiprintf_r+0x852>
 80135b0:	ae11      	add	r6, sp, #68	@ 0x44
 80135b2:	e6b5      	b.n	8013320 <_vfiprintf_r+0x510>
 80135b4:	9800      	ldr	r0, [sp, #0]
 80135b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80135b8:	4639      	mov	r1, r7
 80135ba:	f7ff fbf7 	bl	8012dac <__sprint_r>
 80135be:	2800      	cmp	r0, #0
 80135c0:	d14f      	bne.n	8013662 <_vfiprintf_r+0x852>
 80135c2:	ae11      	add	r6, sp, #68	@ 0x44
 80135c4:	e6bc      	b.n	8013340 <_vfiprintf_r+0x530>
 80135c6:	2110      	movs	r1, #16
 80135c8:	6071      	str	r1, [r6, #4]
 80135ca:	2a07      	cmp	r2, #7
 80135cc:	4461      	add	r1, ip
 80135ce:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80135d2:	dd08      	ble.n	80135e6 <_vfiprintf_r+0x7d6>
 80135d4:	9800      	ldr	r0, [sp, #0]
 80135d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80135d8:	4639      	mov	r1, r7
 80135da:	f7ff fbe7 	bl	8012dac <__sprint_r>
 80135de:	2800      	cmp	r0, #0
 80135e0:	d13f      	bne.n	8013662 <_vfiprintf_r+0x852>
 80135e2:	4b4e      	ldr	r3, [pc, #312]	@ (801371c <_vfiprintf_r+0x90c>)
 80135e4:	a811      	add	r0, sp, #68	@ 0x44
 80135e6:	3d10      	subs	r5, #16
 80135e8:	4606      	mov	r6, r0
 80135ea:	e6b2      	b.n	8013352 <_vfiprintf_r+0x542>
 80135ec:	4606      	mov	r6, r0
 80135ee:	e6ca      	b.n	8013386 <_vfiprintf_r+0x576>
 80135f0:	2010      	movs	r0, #16
 80135f2:	4402      	add	r2, r0
 80135f4:	2b07      	cmp	r3, #7
 80135f6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80135fa:	6070      	str	r0, [r6, #4]
 80135fc:	dd06      	ble.n	801360c <_vfiprintf_r+0x7fc>
 80135fe:	9800      	ldr	r0, [sp, #0]
 8013600:	aa0e      	add	r2, sp, #56	@ 0x38
 8013602:	4639      	mov	r1, r7
 8013604:	f7ff fbd2 	bl	8012dac <__sprint_r>
 8013608:	bb58      	cbnz	r0, 8013662 <_vfiprintf_r+0x852>
 801360a:	a911      	add	r1, sp, #68	@ 0x44
 801360c:	3c10      	subs	r4, #16
 801360e:	460e      	mov	r6, r1
 8013610:	e6bd      	b.n	801338e <_vfiprintf_r+0x57e>
 8013612:	460e      	mov	r6, r1
 8013614:	e6d6      	b.n	80133c4 <_vfiprintf_r+0x5b4>
 8013616:	9800      	ldr	r0, [sp, #0]
 8013618:	aa0e      	add	r2, sp, #56	@ 0x38
 801361a:	4639      	mov	r1, r7
 801361c:	f7ff fbc6 	bl	8012dac <__sprint_r>
 8013620:	b9f8      	cbnz	r0, 8013662 <_vfiprintf_r+0x852>
 8013622:	ab11      	add	r3, sp, #68	@ 0x44
 8013624:	e6de      	b.n	80133e4 <_vfiprintf_r+0x5d4>
 8013626:	9a02      	ldr	r2, [sp, #8]
 8013628:	9904      	ldr	r1, [sp, #16]
 801362a:	1a54      	subs	r4, r2, r1
 801362c:	2c00      	cmp	r4, #0
 801362e:	f77f aedd 	ble.w	80133ec <_vfiprintf_r+0x5dc>
 8013632:	4d39      	ldr	r5, [pc, #228]	@ (8013718 <_vfiprintf_r+0x908>)
 8013634:	2610      	movs	r6, #16
 8013636:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 801363a:	2c10      	cmp	r4, #16
 801363c:	f102 0201 	add.w	r2, r2, #1
 8013640:	601d      	str	r5, [r3, #0]
 8013642:	dc1d      	bgt.n	8013680 <_vfiprintf_r+0x870>
 8013644:	605c      	str	r4, [r3, #4]
 8013646:	2a07      	cmp	r2, #7
 8013648:	440c      	add	r4, r1
 801364a:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 801364e:	f77f aecd 	ble.w	80133ec <_vfiprintf_r+0x5dc>
 8013652:	9800      	ldr	r0, [sp, #0]
 8013654:	aa0e      	add	r2, sp, #56	@ 0x38
 8013656:	4639      	mov	r1, r7
 8013658:	f7ff fba8 	bl	8012dac <__sprint_r>
 801365c:	2800      	cmp	r0, #0
 801365e:	f43f aec5 	beq.w	80133ec <_vfiprintf_r+0x5dc>
 8013662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013664:	07d9      	lsls	r1, r3, #31
 8013666:	d405      	bmi.n	8013674 <_vfiprintf_r+0x864>
 8013668:	89bb      	ldrh	r3, [r7, #12]
 801366a:	059a      	lsls	r2, r3, #22
 801366c:	d402      	bmi.n	8013674 <_vfiprintf_r+0x864>
 801366e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013670:	f7fc f911 	bl	800f896 <__retarget_lock_release_recursive>
 8013674:	89bb      	ldrh	r3, [r7, #12]
 8013676:	065b      	lsls	r3, r3, #25
 8013678:	f57f abfb 	bpl.w	8012e72 <_vfiprintf_r+0x62>
 801367c:	f7ff bbf6 	b.w	8012e6c <_vfiprintf_r+0x5c>
 8013680:	3110      	adds	r1, #16
 8013682:	2a07      	cmp	r2, #7
 8013684:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8013688:	605e      	str	r6, [r3, #4]
 801368a:	dc02      	bgt.n	8013692 <_vfiprintf_r+0x882>
 801368c:	3308      	adds	r3, #8
 801368e:	3c10      	subs	r4, #16
 8013690:	e7d1      	b.n	8013636 <_vfiprintf_r+0x826>
 8013692:	9800      	ldr	r0, [sp, #0]
 8013694:	aa0e      	add	r2, sp, #56	@ 0x38
 8013696:	4639      	mov	r1, r7
 8013698:	f7ff fb88 	bl	8012dac <__sprint_r>
 801369c:	2800      	cmp	r0, #0
 801369e:	d1e0      	bne.n	8013662 <_vfiprintf_r+0x852>
 80136a0:	ab11      	add	r3, sp, #68	@ 0x44
 80136a2:	e7f4      	b.n	801368e <_vfiprintf_r+0x87e>
 80136a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80136a6:	b913      	cbnz	r3, 80136ae <_vfiprintf_r+0x89e>
 80136a8:	2300      	movs	r3, #0
 80136aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80136ac:	e7d9      	b.n	8013662 <_vfiprintf_r+0x852>
 80136ae:	9800      	ldr	r0, [sp, #0]
 80136b0:	aa0e      	add	r2, sp, #56	@ 0x38
 80136b2:	4639      	mov	r1, r7
 80136b4:	f7ff fb7a 	bl	8012dac <__sprint_r>
 80136b8:	2800      	cmp	r0, #0
 80136ba:	d0f5      	beq.n	80136a8 <_vfiprintf_r+0x898>
 80136bc:	e7d1      	b.n	8013662 <_vfiprintf_r+0x852>
 80136be:	ea54 0205 	orrs.w	r2, r4, r5
 80136c2:	f8cd a010 	str.w	sl, [sp, #16]
 80136c6:	f43f ada6 	beq.w	8013216 <_vfiprintf_r+0x406>
 80136ca:	2b01      	cmp	r3, #1
 80136cc:	f43f aedf 	beq.w	801348e <_vfiprintf_r+0x67e>
 80136d0:	2b02      	cmp	r3, #2
 80136d2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80136d6:	f43f af28 	beq.w	801352a <_vfiprintf_r+0x71a>
 80136da:	f004 0307 	and.w	r3, r4, #7
 80136de:	08e4      	lsrs	r4, r4, #3
 80136e0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80136e4:	08ed      	lsrs	r5, r5, #3
 80136e6:	3330      	adds	r3, #48	@ 0x30
 80136e8:	ea54 0105 	orrs.w	r1, r4, r5
 80136ec:	464a      	mov	r2, r9
 80136ee:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80136f2:	d1f2      	bne.n	80136da <_vfiprintf_r+0x8ca>
 80136f4:	9904      	ldr	r1, [sp, #16]
 80136f6:	07c8      	lsls	r0, r1, #31
 80136f8:	d506      	bpl.n	8013708 <_vfiprintf_r+0x8f8>
 80136fa:	2b30      	cmp	r3, #48	@ 0x30
 80136fc:	d004      	beq.n	8013708 <_vfiprintf_r+0x8f8>
 80136fe:	2330      	movs	r3, #48	@ 0x30
 8013700:	f809 3c01 	strb.w	r3, [r9, #-1]
 8013704:	f1a2 0902 	sub.w	r9, r2, #2
 8013708:	ab3a      	add	r3, sp, #232	@ 0xe8
 801370a:	eba3 0309 	sub.w	r3, r3, r9
 801370e:	9c01      	ldr	r4, [sp, #4]
 8013710:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013714:	9301      	str	r3, [sp, #4]
 8013716:	e5bb      	b.n	8013290 <_vfiprintf_r+0x480>
 8013718:	080159bf 	.word	0x080159bf
 801371c:	080159af 	.word	0x080159af

08013720 <__sbprintf>:
 8013720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013722:	461f      	mov	r7, r3
 8013724:	898b      	ldrh	r3, [r1, #12]
 8013726:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801372a:	f023 0302 	bic.w	r3, r3, #2
 801372e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013732:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8013734:	9319      	str	r3, [sp, #100]	@ 0x64
 8013736:	89cb      	ldrh	r3, [r1, #14]
 8013738:	f8ad 300e 	strh.w	r3, [sp, #14]
 801373c:	69cb      	ldr	r3, [r1, #28]
 801373e:	9307      	str	r3, [sp, #28]
 8013740:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8013742:	9309      	str	r3, [sp, #36]	@ 0x24
 8013744:	ab1a      	add	r3, sp, #104	@ 0x68
 8013746:	9300      	str	r3, [sp, #0]
 8013748:	9304      	str	r3, [sp, #16]
 801374a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801374e:	4615      	mov	r5, r2
 8013750:	4606      	mov	r6, r0
 8013752:	9302      	str	r3, [sp, #8]
 8013754:	9305      	str	r3, [sp, #20]
 8013756:	a816      	add	r0, sp, #88	@ 0x58
 8013758:	2300      	movs	r3, #0
 801375a:	460c      	mov	r4, r1
 801375c:	9306      	str	r3, [sp, #24]
 801375e:	f7fc f897 	bl	800f890 <__retarget_lock_init_recursive>
 8013762:	462a      	mov	r2, r5
 8013764:	463b      	mov	r3, r7
 8013766:	4669      	mov	r1, sp
 8013768:	4630      	mov	r0, r6
 801376a:	f7ff fb51 	bl	8012e10 <_vfiprintf_r>
 801376e:	1e05      	subs	r5, r0, #0
 8013770:	db07      	blt.n	8013782 <__sbprintf+0x62>
 8013772:	4669      	mov	r1, sp
 8013774:	4630      	mov	r0, r6
 8013776:	f7fd fe6d 	bl	8011454 <_fflush_r>
 801377a:	2800      	cmp	r0, #0
 801377c:	bf18      	it	ne
 801377e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8013782:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013786:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8013788:	065b      	lsls	r3, r3, #25
 801378a:	bf42      	ittt	mi
 801378c:	89a3      	ldrhmi	r3, [r4, #12]
 801378e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8013792:	81a3      	strhmi	r3, [r4, #12]
 8013794:	f7fc f87d 	bl	800f892 <__retarget_lock_close_recursive>
 8013798:	4628      	mov	r0, r5
 801379a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801379e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080137a0 <__sfvwrite_r>:
 80137a0:	6893      	ldr	r3, [r2, #8]
 80137a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a6:	4606      	mov	r6, r0
 80137a8:	460c      	mov	r4, r1
 80137aa:	4691      	mov	r9, r2
 80137ac:	b91b      	cbnz	r3, 80137b6 <__sfvwrite_r+0x16>
 80137ae:	2000      	movs	r0, #0
 80137b0:	b003      	add	sp, #12
 80137b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b6:	898b      	ldrh	r3, [r1, #12]
 80137b8:	0718      	lsls	r0, r3, #28
 80137ba:	d550      	bpl.n	801385e <__sfvwrite_r+0xbe>
 80137bc:	690b      	ldr	r3, [r1, #16]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d04d      	beq.n	801385e <__sfvwrite_r+0xbe>
 80137c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137c6:	f8d9 8000 	ldr.w	r8, [r9]
 80137ca:	f013 0702 	ands.w	r7, r3, #2
 80137ce:	d16b      	bne.n	80138a8 <__sfvwrite_r+0x108>
 80137d0:	f013 0301 	ands.w	r3, r3, #1
 80137d4:	f000 809c 	beq.w	8013910 <__sfvwrite_r+0x170>
 80137d8:	4638      	mov	r0, r7
 80137da:	46ba      	mov	sl, r7
 80137dc:	46bb      	mov	fp, r7
 80137de:	f1bb 0f00 	cmp.w	fp, #0
 80137e2:	f000 8103 	beq.w	80139ec <__sfvwrite_r+0x24c>
 80137e6:	b950      	cbnz	r0, 80137fe <__sfvwrite_r+0x5e>
 80137e8:	465a      	mov	r2, fp
 80137ea:	210a      	movs	r1, #10
 80137ec:	4650      	mov	r0, sl
 80137ee:	f7ec fd77 	bl	80002e0 <memchr>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	f000 8100 	beq.w	80139f8 <__sfvwrite_r+0x258>
 80137f8:	3001      	adds	r0, #1
 80137fa:	eba0 070a 	sub.w	r7, r0, sl
 80137fe:	6820      	ldr	r0, [r4, #0]
 8013800:	6921      	ldr	r1, [r4, #16]
 8013802:	68a5      	ldr	r5, [r4, #8]
 8013804:	6963      	ldr	r3, [r4, #20]
 8013806:	455f      	cmp	r7, fp
 8013808:	463a      	mov	r2, r7
 801380a:	bf28      	it	cs
 801380c:	465a      	movcs	r2, fp
 801380e:	4288      	cmp	r0, r1
 8013810:	f240 80f5 	bls.w	80139fe <__sfvwrite_r+0x25e>
 8013814:	441d      	add	r5, r3
 8013816:	42aa      	cmp	r2, r5
 8013818:	f340 80f1 	ble.w	80139fe <__sfvwrite_r+0x25e>
 801381c:	4651      	mov	r1, sl
 801381e:	462a      	mov	r2, r5
 8013820:	f7ff f875 	bl	801290e <memmove>
 8013824:	6823      	ldr	r3, [r4, #0]
 8013826:	442b      	add	r3, r5
 8013828:	6023      	str	r3, [r4, #0]
 801382a:	4621      	mov	r1, r4
 801382c:	4630      	mov	r0, r6
 801382e:	f7fd fe11 	bl	8011454 <_fflush_r>
 8013832:	2800      	cmp	r0, #0
 8013834:	d167      	bne.n	8013906 <__sfvwrite_r+0x166>
 8013836:	1b7f      	subs	r7, r7, r5
 8013838:	f040 80f9 	bne.w	8013a2e <__sfvwrite_r+0x28e>
 801383c:	4621      	mov	r1, r4
 801383e:	4630      	mov	r0, r6
 8013840:	f7fd fe08 	bl	8011454 <_fflush_r>
 8013844:	2800      	cmp	r0, #0
 8013846:	d15e      	bne.n	8013906 <__sfvwrite_r+0x166>
 8013848:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801384c:	1b5b      	subs	r3, r3, r5
 801384e:	44aa      	add	sl, r5
 8013850:	ebab 0b05 	sub.w	fp, fp, r5
 8013854:	f8c9 3008 	str.w	r3, [r9, #8]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d1c0      	bne.n	80137de <__sfvwrite_r+0x3e>
 801385c:	e7a7      	b.n	80137ae <__sfvwrite_r+0xe>
 801385e:	4621      	mov	r1, r4
 8013860:	4630      	mov	r0, r6
 8013862:	f000 f8e9 	bl	8013a38 <__swsetup_r>
 8013866:	2800      	cmp	r0, #0
 8013868:	d0ab      	beq.n	80137c2 <__sfvwrite_r+0x22>
 801386a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801386e:	e79f      	b.n	80137b0 <__sfvwrite_r+0x10>
 8013870:	e9d8 a500 	ldrd	sl, r5, [r8]
 8013874:	f108 0808 	add.w	r8, r8, #8
 8013878:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801387c:	69e1      	ldr	r1, [r4, #28]
 801387e:	2d00      	cmp	r5, #0
 8013880:	d0f6      	beq.n	8013870 <__sfvwrite_r+0xd0>
 8013882:	42bd      	cmp	r5, r7
 8013884:	462b      	mov	r3, r5
 8013886:	4652      	mov	r2, sl
 8013888:	bf28      	it	cs
 801388a:	463b      	movcs	r3, r7
 801388c:	4630      	mov	r0, r6
 801388e:	47d8      	blx	fp
 8013890:	2800      	cmp	r0, #0
 8013892:	dd38      	ble.n	8013906 <__sfvwrite_r+0x166>
 8013894:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013898:	1a1b      	subs	r3, r3, r0
 801389a:	4482      	add	sl, r0
 801389c:	1a2d      	subs	r5, r5, r0
 801389e:	f8c9 3008 	str.w	r3, [r9, #8]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d1e8      	bne.n	8013878 <__sfvwrite_r+0xd8>
 80138a6:	e782      	b.n	80137ae <__sfvwrite_r+0xe>
 80138a8:	f04f 0a00 	mov.w	sl, #0
 80138ac:	4f61      	ldr	r7, [pc, #388]	@ (8013a34 <__sfvwrite_r+0x294>)
 80138ae:	4655      	mov	r5, sl
 80138b0:	e7e2      	b.n	8013878 <__sfvwrite_r+0xd8>
 80138b2:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80138b6:	f108 0808 	add.w	r8, r8, #8
 80138ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138be:	6820      	ldr	r0, [r4, #0]
 80138c0:	68a2      	ldr	r2, [r4, #8]
 80138c2:	f1ba 0f00 	cmp.w	sl, #0
 80138c6:	d0f4      	beq.n	80138b2 <__sfvwrite_r+0x112>
 80138c8:	0599      	lsls	r1, r3, #22
 80138ca:	d563      	bpl.n	8013994 <__sfvwrite_r+0x1f4>
 80138cc:	4552      	cmp	r2, sl
 80138ce:	d836      	bhi.n	801393e <__sfvwrite_r+0x19e>
 80138d0:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80138d4:	d033      	beq.n	801393e <__sfvwrite_r+0x19e>
 80138d6:	6921      	ldr	r1, [r4, #16]
 80138d8:	6965      	ldr	r5, [r4, #20]
 80138da:	eba0 0b01 	sub.w	fp, r0, r1
 80138de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80138e6:	f10b 0201 	add.w	r2, fp, #1
 80138ea:	106d      	asrs	r5, r5, #1
 80138ec:	4452      	add	r2, sl
 80138ee:	4295      	cmp	r5, r2
 80138f0:	bf38      	it	cc
 80138f2:	4615      	movcc	r5, r2
 80138f4:	055b      	lsls	r3, r3, #21
 80138f6:	d53d      	bpl.n	8013974 <__sfvwrite_r+0x1d4>
 80138f8:	4629      	mov	r1, r5
 80138fa:	4630      	mov	r0, r6
 80138fc:	f7fc f900 	bl	800fb00 <_malloc_r>
 8013900:	b948      	cbnz	r0, 8013916 <__sfvwrite_r+0x176>
 8013902:	230c      	movs	r3, #12
 8013904:	6033      	str	r3, [r6, #0]
 8013906:	89a3      	ldrh	r3, [r4, #12]
 8013908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801390c:	81a3      	strh	r3, [r4, #12]
 801390e:	e7ac      	b.n	801386a <__sfvwrite_r+0xca>
 8013910:	461f      	mov	r7, r3
 8013912:	469a      	mov	sl, r3
 8013914:	e7d1      	b.n	80138ba <__sfvwrite_r+0x11a>
 8013916:	465a      	mov	r2, fp
 8013918:	6921      	ldr	r1, [r4, #16]
 801391a:	9001      	str	r0, [sp, #4]
 801391c:	f7fb ffbc 	bl	800f898 <memcpy>
 8013920:	89a2      	ldrh	r2, [r4, #12]
 8013922:	9b01      	ldr	r3, [sp, #4]
 8013924:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8013928:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801392c:	81a2      	strh	r2, [r4, #12]
 801392e:	6123      	str	r3, [r4, #16]
 8013930:	6165      	str	r5, [r4, #20]
 8013932:	445b      	add	r3, fp
 8013934:	eba5 050b 	sub.w	r5, r5, fp
 8013938:	6023      	str	r3, [r4, #0]
 801393a:	4652      	mov	r2, sl
 801393c:	60a5      	str	r5, [r4, #8]
 801393e:	4552      	cmp	r2, sl
 8013940:	bf28      	it	cs
 8013942:	4652      	movcs	r2, sl
 8013944:	6820      	ldr	r0, [r4, #0]
 8013946:	9201      	str	r2, [sp, #4]
 8013948:	4639      	mov	r1, r7
 801394a:	f7fe ffe0 	bl	801290e <memmove>
 801394e:	68a3      	ldr	r3, [r4, #8]
 8013950:	9a01      	ldr	r2, [sp, #4]
 8013952:	1a9b      	subs	r3, r3, r2
 8013954:	60a3      	str	r3, [r4, #8]
 8013956:	6823      	ldr	r3, [r4, #0]
 8013958:	4413      	add	r3, r2
 801395a:	4655      	mov	r5, sl
 801395c:	6023      	str	r3, [r4, #0]
 801395e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013962:	1b5b      	subs	r3, r3, r5
 8013964:	442f      	add	r7, r5
 8013966:	ebaa 0a05 	sub.w	sl, sl, r5
 801396a:	f8c9 3008 	str.w	r3, [r9, #8]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d1a3      	bne.n	80138ba <__sfvwrite_r+0x11a>
 8013972:	e71c      	b.n	80137ae <__sfvwrite_r+0xe>
 8013974:	462a      	mov	r2, r5
 8013976:	4630      	mov	r0, r6
 8013978:	f7ff f850 	bl	8012a1c <_realloc_r>
 801397c:	4603      	mov	r3, r0
 801397e:	2800      	cmp	r0, #0
 8013980:	d1d5      	bne.n	801392e <__sfvwrite_r+0x18e>
 8013982:	6921      	ldr	r1, [r4, #16]
 8013984:	4630      	mov	r0, r6
 8013986:	f7fb fffb 	bl	800f980 <_free_r>
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013990:	81a3      	strh	r3, [r4, #12]
 8013992:	e7b6      	b.n	8013902 <__sfvwrite_r+0x162>
 8013994:	6923      	ldr	r3, [r4, #16]
 8013996:	4283      	cmp	r3, r0
 8013998:	d302      	bcc.n	80139a0 <__sfvwrite_r+0x200>
 801399a:	6961      	ldr	r1, [r4, #20]
 801399c:	4551      	cmp	r1, sl
 801399e:	d915      	bls.n	80139cc <__sfvwrite_r+0x22c>
 80139a0:	4552      	cmp	r2, sl
 80139a2:	bf28      	it	cs
 80139a4:	4652      	movcs	r2, sl
 80139a6:	4639      	mov	r1, r7
 80139a8:	4615      	mov	r5, r2
 80139aa:	f7fe ffb0 	bl	801290e <memmove>
 80139ae:	68a3      	ldr	r3, [r4, #8]
 80139b0:	6822      	ldr	r2, [r4, #0]
 80139b2:	1b5b      	subs	r3, r3, r5
 80139b4:	442a      	add	r2, r5
 80139b6:	60a3      	str	r3, [r4, #8]
 80139b8:	6022      	str	r2, [r4, #0]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1cf      	bne.n	801395e <__sfvwrite_r+0x1be>
 80139be:	4621      	mov	r1, r4
 80139c0:	4630      	mov	r0, r6
 80139c2:	f7fd fd47 	bl	8011454 <_fflush_r>
 80139c6:	2800      	cmp	r0, #0
 80139c8:	d0c9      	beq.n	801395e <__sfvwrite_r+0x1be>
 80139ca:	e79c      	b.n	8013906 <__sfvwrite_r+0x166>
 80139cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80139d0:	4553      	cmp	r3, sl
 80139d2:	bf28      	it	cs
 80139d4:	4653      	movcs	r3, sl
 80139d6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80139d8:	fb93 f3f1 	sdiv	r3, r3, r1
 80139dc:	463a      	mov	r2, r7
 80139de:	434b      	muls	r3, r1
 80139e0:	4630      	mov	r0, r6
 80139e2:	69e1      	ldr	r1, [r4, #28]
 80139e4:	47a8      	blx	r5
 80139e6:	1e05      	subs	r5, r0, #0
 80139e8:	dcb9      	bgt.n	801395e <__sfvwrite_r+0x1be>
 80139ea:	e78c      	b.n	8013906 <__sfvwrite_r+0x166>
 80139ec:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80139f0:	2000      	movs	r0, #0
 80139f2:	f108 0808 	add.w	r8, r8, #8
 80139f6:	e6f2      	b.n	80137de <__sfvwrite_r+0x3e>
 80139f8:	f10b 0701 	add.w	r7, fp, #1
 80139fc:	e6ff      	b.n	80137fe <__sfvwrite_r+0x5e>
 80139fe:	4293      	cmp	r3, r2
 8013a00:	dc08      	bgt.n	8013a14 <__sfvwrite_r+0x274>
 8013a02:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8013a04:	69e1      	ldr	r1, [r4, #28]
 8013a06:	4652      	mov	r2, sl
 8013a08:	4630      	mov	r0, r6
 8013a0a:	47a8      	blx	r5
 8013a0c:	1e05      	subs	r5, r0, #0
 8013a0e:	f73f af12 	bgt.w	8013836 <__sfvwrite_r+0x96>
 8013a12:	e778      	b.n	8013906 <__sfvwrite_r+0x166>
 8013a14:	4651      	mov	r1, sl
 8013a16:	9201      	str	r2, [sp, #4]
 8013a18:	f7fe ff79 	bl	801290e <memmove>
 8013a1c:	9a01      	ldr	r2, [sp, #4]
 8013a1e:	68a3      	ldr	r3, [r4, #8]
 8013a20:	1a9b      	subs	r3, r3, r2
 8013a22:	60a3      	str	r3, [r4, #8]
 8013a24:	6823      	ldr	r3, [r4, #0]
 8013a26:	4413      	add	r3, r2
 8013a28:	6023      	str	r3, [r4, #0]
 8013a2a:	4615      	mov	r5, r2
 8013a2c:	e703      	b.n	8013836 <__sfvwrite_r+0x96>
 8013a2e:	2001      	movs	r0, #1
 8013a30:	e70a      	b.n	8013848 <__sfvwrite_r+0xa8>
 8013a32:	bf00      	nop
 8013a34:	7ffffc00 	.word	0x7ffffc00

08013a38 <__swsetup_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	4b29      	ldr	r3, [pc, #164]	@ (8013ae0 <__swsetup_r+0xa8>)
 8013a3c:	4605      	mov	r5, r0
 8013a3e:	6818      	ldr	r0, [r3, #0]
 8013a40:	460c      	mov	r4, r1
 8013a42:	b118      	cbz	r0, 8013a4c <__swsetup_r+0x14>
 8013a44:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013a46:	b90b      	cbnz	r3, 8013a4c <__swsetup_r+0x14>
 8013a48:	f7fb fe10 	bl	800f66c <__sinit>
 8013a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a50:	0719      	lsls	r1, r3, #28
 8013a52:	d422      	bmi.n	8013a9a <__swsetup_r+0x62>
 8013a54:	06da      	lsls	r2, r3, #27
 8013a56:	d407      	bmi.n	8013a68 <__swsetup_r+0x30>
 8013a58:	2209      	movs	r2, #9
 8013a5a:	602a      	str	r2, [r5, #0]
 8013a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a60:	81a3      	strh	r3, [r4, #12]
 8013a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a66:	e033      	b.n	8013ad0 <__swsetup_r+0x98>
 8013a68:	0758      	lsls	r0, r3, #29
 8013a6a:	d512      	bpl.n	8013a92 <__swsetup_r+0x5a>
 8013a6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013a6e:	b141      	cbz	r1, 8013a82 <__swsetup_r+0x4a>
 8013a70:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8013a74:	4299      	cmp	r1, r3
 8013a76:	d002      	beq.n	8013a7e <__swsetup_r+0x46>
 8013a78:	4628      	mov	r0, r5
 8013a7a:	f7fb ff81 	bl	800f980 <_free_r>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8013a82:	89a3      	ldrh	r3, [r4, #12]
 8013a84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013a88:	81a3      	strh	r3, [r4, #12]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	6063      	str	r3, [r4, #4]
 8013a8e:	6923      	ldr	r3, [r4, #16]
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	89a3      	ldrh	r3, [r4, #12]
 8013a94:	f043 0308 	orr.w	r3, r3, #8
 8013a98:	81a3      	strh	r3, [r4, #12]
 8013a9a:	6923      	ldr	r3, [r4, #16]
 8013a9c:	b94b      	cbnz	r3, 8013ab2 <__swsetup_r+0x7a>
 8013a9e:	89a3      	ldrh	r3, [r4, #12]
 8013aa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013aa8:	d003      	beq.n	8013ab2 <__swsetup_r+0x7a>
 8013aaa:	4621      	mov	r1, r4
 8013aac:	4628      	mov	r0, r5
 8013aae:	f000 f8c9 	bl	8013c44 <__smakebuf_r>
 8013ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ab6:	f013 0201 	ands.w	r2, r3, #1
 8013aba:	d00a      	beq.n	8013ad2 <__swsetup_r+0x9a>
 8013abc:	2200      	movs	r2, #0
 8013abe:	60a2      	str	r2, [r4, #8]
 8013ac0:	6962      	ldr	r2, [r4, #20]
 8013ac2:	4252      	negs	r2, r2
 8013ac4:	61a2      	str	r2, [r4, #24]
 8013ac6:	6922      	ldr	r2, [r4, #16]
 8013ac8:	b942      	cbnz	r2, 8013adc <__swsetup_r+0xa4>
 8013aca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013ace:	d1c5      	bne.n	8013a5c <__swsetup_r+0x24>
 8013ad0:	bd38      	pop	{r3, r4, r5, pc}
 8013ad2:	0799      	lsls	r1, r3, #30
 8013ad4:	bf58      	it	pl
 8013ad6:	6962      	ldrpl	r2, [r4, #20]
 8013ad8:	60a2      	str	r2, [r4, #8]
 8013ada:	e7f4      	b.n	8013ac6 <__swsetup_r+0x8e>
 8013adc:	2000      	movs	r0, #0
 8013ade:	e7f7      	b.n	8013ad0 <__swsetup_r+0x98>
 8013ae0:	24000284 	.word	0x24000284

08013ae4 <__fputwc>:
 8013ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ae8:	4680      	mov	r8, r0
 8013aea:	460f      	mov	r7, r1
 8013aec:	4614      	mov	r4, r2
 8013aee:	f7fe ff29 	bl	8012944 <__locale_mb_cur_max>
 8013af2:	2801      	cmp	r0, #1
 8013af4:	4605      	mov	r5, r0
 8013af6:	d11b      	bne.n	8013b30 <__fputwc+0x4c>
 8013af8:	1e7b      	subs	r3, r7, #1
 8013afa:	2bfe      	cmp	r3, #254	@ 0xfe
 8013afc:	d818      	bhi.n	8013b30 <__fputwc+0x4c>
 8013afe:	f88d 7004 	strb.w	r7, [sp, #4]
 8013b02:	2600      	movs	r6, #0
 8013b04:	f10d 0904 	add.w	r9, sp, #4
 8013b08:	42ae      	cmp	r6, r5
 8013b0a:	d021      	beq.n	8013b50 <__fputwc+0x6c>
 8013b0c:	68a3      	ldr	r3, [r4, #8]
 8013b0e:	f816 1009 	ldrb.w	r1, [r6, r9]
 8013b12:	3b01      	subs	r3, #1
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	60a3      	str	r3, [r4, #8]
 8013b18:	da04      	bge.n	8013b24 <__fputwc+0x40>
 8013b1a:	69a2      	ldr	r2, [r4, #24]
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	db1b      	blt.n	8013b58 <__fputwc+0x74>
 8013b20:	290a      	cmp	r1, #10
 8013b22:	d019      	beq.n	8013b58 <__fputwc+0x74>
 8013b24:	6823      	ldr	r3, [r4, #0]
 8013b26:	1c5a      	adds	r2, r3, #1
 8013b28:	6022      	str	r2, [r4, #0]
 8013b2a:	7019      	strb	r1, [r3, #0]
 8013b2c:	3601      	adds	r6, #1
 8013b2e:	e7eb      	b.n	8013b08 <__fputwc+0x24>
 8013b30:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8013b34:	463a      	mov	r2, r7
 8013b36:	a901      	add	r1, sp, #4
 8013b38:	4640      	mov	r0, r8
 8013b3a:	f000 f845 	bl	8013bc8 <_wcrtomb_r>
 8013b3e:	1c43      	adds	r3, r0, #1
 8013b40:	4605      	mov	r5, r0
 8013b42:	d1de      	bne.n	8013b02 <__fputwc+0x1e>
 8013b44:	89a3      	ldrh	r3, [r4, #12]
 8013b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b4a:	81a3      	strh	r3, [r4, #12]
 8013b4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013b50:	4638      	mov	r0, r7
 8013b52:	b003      	add	sp, #12
 8013b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b58:	4622      	mov	r2, r4
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	f000 f8ae 	bl	8013cbc <__swbuf_r>
 8013b60:	3001      	adds	r0, #1
 8013b62:	d1e3      	bne.n	8013b2c <__fputwc+0x48>
 8013b64:	e7f2      	b.n	8013b4c <__fputwc+0x68>

08013b66 <_fputwc_r>:
 8013b66:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8013b68:	07db      	lsls	r3, r3, #31
 8013b6a:	b570      	push	{r4, r5, r6, lr}
 8013b6c:	4605      	mov	r5, r0
 8013b6e:	460e      	mov	r6, r1
 8013b70:	4614      	mov	r4, r2
 8013b72:	d405      	bmi.n	8013b80 <_fputwc_r+0x1a>
 8013b74:	8993      	ldrh	r3, [r2, #12]
 8013b76:	0598      	lsls	r0, r3, #22
 8013b78:	d402      	bmi.n	8013b80 <_fputwc_r+0x1a>
 8013b7a:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8013b7c:	f7fb fe8a 	bl	800f894 <__retarget_lock_acquire_recursive>
 8013b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b84:	0499      	lsls	r1, r3, #18
 8013b86:	d406      	bmi.n	8013b96 <_fputwc_r+0x30>
 8013b88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013b8c:	81a3      	strh	r3, [r4, #12]
 8013b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013b90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013b94:	6663      	str	r3, [r4, #100]	@ 0x64
 8013b96:	4622      	mov	r2, r4
 8013b98:	4628      	mov	r0, r5
 8013b9a:	4631      	mov	r1, r6
 8013b9c:	f7ff ffa2 	bl	8013ae4 <__fputwc>
 8013ba0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013ba2:	07da      	lsls	r2, r3, #31
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	d405      	bmi.n	8013bb4 <_fputwc_r+0x4e>
 8013ba8:	89a3      	ldrh	r3, [r4, #12]
 8013baa:	059b      	lsls	r3, r3, #22
 8013bac:	d402      	bmi.n	8013bb4 <_fputwc_r+0x4e>
 8013bae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bb0:	f7fb fe71 	bl	800f896 <__retarget_lock_release_recursive>
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	bd70      	pop	{r4, r5, r6, pc}

08013bb8 <abort>:
 8013bb8:	b508      	push	{r3, lr}
 8013bba:	2006      	movs	r0, #6
 8013bbc:	f000 f8f0 	bl	8013da0 <raise>
 8013bc0:	2001      	movs	r0, #1
 8013bc2:	f7ef f8cf 	bl	8002d64 <_exit>
	...

08013bc8 <_wcrtomb_r>:
 8013bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bca:	4c09      	ldr	r4, [pc, #36]	@ (8013bf0 <_wcrtomb_r+0x28>)
 8013bcc:	b085      	sub	sp, #20
 8013bce:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8013bd2:	4605      	mov	r5, r0
 8013bd4:	461e      	mov	r6, r3
 8013bd6:	b909      	cbnz	r1, 8013bdc <_wcrtomb_r+0x14>
 8013bd8:	460a      	mov	r2, r1
 8013bda:	a901      	add	r1, sp, #4
 8013bdc:	47b8      	blx	r7
 8013bde:	1c43      	adds	r3, r0, #1
 8013be0:	bf01      	itttt	eq
 8013be2:	2300      	moveq	r3, #0
 8013be4:	6033      	streq	r3, [r6, #0]
 8013be6:	238a      	moveq	r3, #138	@ 0x8a
 8013be8:	602b      	streq	r3, [r5, #0]
 8013bea:	b005      	add	sp, #20
 8013bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	240007bc 	.word	0x240007bc

08013bf4 <__swhatbuf_r>:
 8013bf4:	b570      	push	{r4, r5, r6, lr}
 8013bf6:	460c      	mov	r4, r1
 8013bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bfc:	2900      	cmp	r1, #0
 8013bfe:	b096      	sub	sp, #88	@ 0x58
 8013c00:	4615      	mov	r5, r2
 8013c02:	461e      	mov	r6, r3
 8013c04:	da07      	bge.n	8013c16 <__swhatbuf_r+0x22>
 8013c06:	89a1      	ldrh	r1, [r4, #12]
 8013c08:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8013c0c:	d117      	bne.n	8013c3e <__swhatbuf_r+0x4a>
 8013c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c12:	4608      	mov	r0, r1
 8013c14:	e00f      	b.n	8013c36 <__swhatbuf_r+0x42>
 8013c16:	466a      	mov	r2, sp
 8013c18:	f000 f8ca 	bl	8013db0 <_fstat_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	dbf2      	blt.n	8013c06 <__swhatbuf_r+0x12>
 8013c20:	9901      	ldr	r1, [sp, #4]
 8013c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013c2a:	4259      	negs	r1, r3
 8013c2c:	4159      	adcs	r1, r3
 8013c2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8013c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c36:	6031      	str	r1, [r6, #0]
 8013c38:	602b      	str	r3, [r5, #0]
 8013c3a:	b016      	add	sp, #88	@ 0x58
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	2100      	movs	r1, #0
 8013c40:	2340      	movs	r3, #64	@ 0x40
 8013c42:	e7e6      	b.n	8013c12 <__swhatbuf_r+0x1e>

08013c44 <__smakebuf_r>:
 8013c44:	898b      	ldrh	r3, [r1, #12]
 8013c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c48:	079d      	lsls	r5, r3, #30
 8013c4a:	4606      	mov	r6, r0
 8013c4c:	460c      	mov	r4, r1
 8013c4e:	d507      	bpl.n	8013c60 <__smakebuf_r+0x1c>
 8013c50:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8013c54:	6023      	str	r3, [r4, #0]
 8013c56:	6123      	str	r3, [r4, #16]
 8013c58:	2301      	movs	r3, #1
 8013c5a:	6163      	str	r3, [r4, #20]
 8013c5c:	b003      	add	sp, #12
 8013c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c60:	ab01      	add	r3, sp, #4
 8013c62:	466a      	mov	r2, sp
 8013c64:	f7ff ffc6 	bl	8013bf4 <__swhatbuf_r>
 8013c68:	9f00      	ldr	r7, [sp, #0]
 8013c6a:	4605      	mov	r5, r0
 8013c6c:	4639      	mov	r1, r7
 8013c6e:	4630      	mov	r0, r6
 8013c70:	f7fb ff46 	bl	800fb00 <_malloc_r>
 8013c74:	b948      	cbnz	r0, 8013c8a <__smakebuf_r+0x46>
 8013c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c7a:	059a      	lsls	r2, r3, #22
 8013c7c:	d4ee      	bmi.n	8013c5c <__smakebuf_r+0x18>
 8013c7e:	f023 0303 	bic.w	r3, r3, #3
 8013c82:	f043 0302 	orr.w	r3, r3, #2
 8013c86:	81a3      	strh	r3, [r4, #12]
 8013c88:	e7e2      	b.n	8013c50 <__smakebuf_r+0xc>
 8013c8a:	89a3      	ldrh	r3, [r4, #12]
 8013c8c:	6020      	str	r0, [r4, #0]
 8013c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c92:	81a3      	strh	r3, [r4, #12]
 8013c94:	9b01      	ldr	r3, [sp, #4]
 8013c96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c9a:	b15b      	cbz	r3, 8013cb4 <__smakebuf_r+0x70>
 8013c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f000 f897 	bl	8013dd4 <_isatty_r>
 8013ca6:	b128      	cbz	r0, 8013cb4 <__smakebuf_r+0x70>
 8013ca8:	89a3      	ldrh	r3, [r4, #12]
 8013caa:	f023 0303 	bic.w	r3, r3, #3
 8013cae:	f043 0301 	orr.w	r3, r3, #1
 8013cb2:	81a3      	strh	r3, [r4, #12]
 8013cb4:	89a3      	ldrh	r3, [r4, #12]
 8013cb6:	431d      	orrs	r5, r3
 8013cb8:	81a5      	strh	r5, [r4, #12]
 8013cba:	e7cf      	b.n	8013c5c <__smakebuf_r+0x18>

08013cbc <__swbuf_r>:
 8013cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbe:	460e      	mov	r6, r1
 8013cc0:	4614      	mov	r4, r2
 8013cc2:	4605      	mov	r5, r0
 8013cc4:	b118      	cbz	r0, 8013cce <__swbuf_r+0x12>
 8013cc6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013cc8:	b90b      	cbnz	r3, 8013cce <__swbuf_r+0x12>
 8013cca:	f7fb fccf 	bl	800f66c <__sinit>
 8013cce:	69a3      	ldr	r3, [r4, #24]
 8013cd0:	60a3      	str	r3, [r4, #8]
 8013cd2:	89a3      	ldrh	r3, [r4, #12]
 8013cd4:	0719      	lsls	r1, r3, #28
 8013cd6:	d501      	bpl.n	8013cdc <__swbuf_r+0x20>
 8013cd8:	6923      	ldr	r3, [r4, #16]
 8013cda:	b943      	cbnz	r3, 8013cee <__swbuf_r+0x32>
 8013cdc:	4621      	mov	r1, r4
 8013cde:	4628      	mov	r0, r5
 8013ce0:	f7ff feaa 	bl	8013a38 <__swsetup_r>
 8013ce4:	b118      	cbz	r0, 8013cee <__swbuf_r+0x32>
 8013ce6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013cea:	4638      	mov	r0, r7
 8013cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cf2:	b2f6      	uxtb	r6, r6
 8013cf4:	049a      	lsls	r2, r3, #18
 8013cf6:	4637      	mov	r7, r6
 8013cf8:	d406      	bmi.n	8013d08 <__swbuf_r+0x4c>
 8013cfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013cfe:	81a3      	strh	r3, [r4, #12]
 8013d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013d06:	6663      	str	r3, [r4, #100]	@ 0x64
 8013d08:	6823      	ldr	r3, [r4, #0]
 8013d0a:	6922      	ldr	r2, [r4, #16]
 8013d0c:	1a98      	subs	r0, r3, r2
 8013d0e:	6963      	ldr	r3, [r4, #20]
 8013d10:	4283      	cmp	r3, r0
 8013d12:	dc05      	bgt.n	8013d20 <__swbuf_r+0x64>
 8013d14:	4621      	mov	r1, r4
 8013d16:	4628      	mov	r0, r5
 8013d18:	f7fd fb9c 	bl	8011454 <_fflush_r>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	d1e2      	bne.n	8013ce6 <__swbuf_r+0x2a>
 8013d20:	68a3      	ldr	r3, [r4, #8]
 8013d22:	3b01      	subs	r3, #1
 8013d24:	60a3      	str	r3, [r4, #8]
 8013d26:	6823      	ldr	r3, [r4, #0]
 8013d28:	1c5a      	adds	r2, r3, #1
 8013d2a:	6022      	str	r2, [r4, #0]
 8013d2c:	701e      	strb	r6, [r3, #0]
 8013d2e:	6962      	ldr	r2, [r4, #20]
 8013d30:	1c43      	adds	r3, r0, #1
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d004      	beq.n	8013d40 <__swbuf_r+0x84>
 8013d36:	89a3      	ldrh	r3, [r4, #12]
 8013d38:	07db      	lsls	r3, r3, #31
 8013d3a:	d5d6      	bpl.n	8013cea <__swbuf_r+0x2e>
 8013d3c:	2e0a      	cmp	r6, #10
 8013d3e:	d1d4      	bne.n	8013cea <__swbuf_r+0x2e>
 8013d40:	4621      	mov	r1, r4
 8013d42:	4628      	mov	r0, r5
 8013d44:	f7fd fb86 	bl	8011454 <_fflush_r>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d0ce      	beq.n	8013cea <__swbuf_r+0x2e>
 8013d4c:	e7cb      	b.n	8013ce6 <__swbuf_r+0x2a>

08013d4e <_raise_r>:
 8013d4e:	291f      	cmp	r1, #31
 8013d50:	b538      	push	{r3, r4, r5, lr}
 8013d52:	4605      	mov	r5, r0
 8013d54:	460c      	mov	r4, r1
 8013d56:	d904      	bls.n	8013d62 <_raise_r+0x14>
 8013d58:	2316      	movs	r3, #22
 8013d5a:	6003      	str	r3, [r0, #0]
 8013d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d60:	bd38      	pop	{r3, r4, r5, pc}
 8013d62:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8013d66:	b112      	cbz	r2, 8013d6e <_raise_r+0x20>
 8013d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d6c:	b94b      	cbnz	r3, 8013d82 <_raise_r+0x34>
 8013d6e:	4628      	mov	r0, r5
 8013d70:	f000 f852 	bl	8013e18 <_getpid_r>
 8013d74:	4622      	mov	r2, r4
 8013d76:	4601      	mov	r1, r0
 8013d78:	4628      	mov	r0, r5
 8013d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d7e:	f000 b839 	b.w	8013df4 <_kill_r>
 8013d82:	2b01      	cmp	r3, #1
 8013d84:	d00a      	beq.n	8013d9c <_raise_r+0x4e>
 8013d86:	1c59      	adds	r1, r3, #1
 8013d88:	d103      	bne.n	8013d92 <_raise_r+0x44>
 8013d8a:	2316      	movs	r3, #22
 8013d8c:	6003      	str	r3, [r0, #0]
 8013d8e:	2001      	movs	r0, #1
 8013d90:	e7e6      	b.n	8013d60 <_raise_r+0x12>
 8013d92:	2100      	movs	r1, #0
 8013d94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013d98:	4620      	mov	r0, r4
 8013d9a:	4798      	blx	r3
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	e7df      	b.n	8013d60 <_raise_r+0x12>

08013da0 <raise>:
 8013da0:	4b02      	ldr	r3, [pc, #8]	@ (8013dac <raise+0xc>)
 8013da2:	4601      	mov	r1, r0
 8013da4:	6818      	ldr	r0, [r3, #0]
 8013da6:	f7ff bfd2 	b.w	8013d4e <_raise_r>
 8013daa:	bf00      	nop
 8013dac:	24000284 	.word	0x24000284

08013db0 <_fstat_r>:
 8013db0:	b538      	push	{r3, r4, r5, lr}
 8013db2:	4d07      	ldr	r5, [pc, #28]	@ (8013dd0 <_fstat_r+0x20>)
 8013db4:	2300      	movs	r3, #0
 8013db6:	4604      	mov	r4, r0
 8013db8:	4608      	mov	r0, r1
 8013dba:	4611      	mov	r1, r2
 8013dbc:	602b      	str	r3, [r5, #0]
 8013dbe:	f7ef f821 	bl	8002e04 <_fstat>
 8013dc2:	1c43      	adds	r3, r0, #1
 8013dc4:	d102      	bne.n	8013dcc <_fstat_r+0x1c>
 8013dc6:	682b      	ldr	r3, [r5, #0]
 8013dc8:	b103      	cbz	r3, 8013dcc <_fstat_r+0x1c>
 8013dca:	6023      	str	r3, [r4, #0]
 8013dcc:	bd38      	pop	{r3, r4, r5, pc}
 8013dce:	bf00      	nop
 8013dd0:	2401533c 	.word	0x2401533c

08013dd4 <_isatty_r>:
 8013dd4:	b538      	push	{r3, r4, r5, lr}
 8013dd6:	4d06      	ldr	r5, [pc, #24]	@ (8013df0 <_isatty_r+0x1c>)
 8013dd8:	2300      	movs	r3, #0
 8013dda:	4604      	mov	r4, r0
 8013ddc:	4608      	mov	r0, r1
 8013dde:	602b      	str	r3, [r5, #0]
 8013de0:	f7ef f820 	bl	8002e24 <_isatty>
 8013de4:	1c43      	adds	r3, r0, #1
 8013de6:	d102      	bne.n	8013dee <_isatty_r+0x1a>
 8013de8:	682b      	ldr	r3, [r5, #0]
 8013dea:	b103      	cbz	r3, 8013dee <_isatty_r+0x1a>
 8013dec:	6023      	str	r3, [r4, #0]
 8013dee:	bd38      	pop	{r3, r4, r5, pc}
 8013df0:	2401533c 	.word	0x2401533c

08013df4 <_kill_r>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	4d07      	ldr	r5, [pc, #28]	@ (8013e14 <_kill_r+0x20>)
 8013df8:	2300      	movs	r3, #0
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	4608      	mov	r0, r1
 8013dfe:	4611      	mov	r1, r2
 8013e00:	602b      	str	r3, [r5, #0]
 8013e02:	f7ee ff9f 	bl	8002d44 <_kill>
 8013e06:	1c43      	adds	r3, r0, #1
 8013e08:	d102      	bne.n	8013e10 <_kill_r+0x1c>
 8013e0a:	682b      	ldr	r3, [r5, #0]
 8013e0c:	b103      	cbz	r3, 8013e10 <_kill_r+0x1c>
 8013e0e:	6023      	str	r3, [r4, #0]
 8013e10:	bd38      	pop	{r3, r4, r5, pc}
 8013e12:	bf00      	nop
 8013e14:	2401533c 	.word	0x2401533c

08013e18 <_getpid_r>:
 8013e18:	f7ee bf8c 	b.w	8002d34 <_getpid>
 8013e1c:	0000      	movs	r0, r0
	...

08013e20 <sqrt>:
 8013e20:	b508      	push	{r3, lr}
 8013e22:	ed2d 8b04 	vpush	{d8-d9}
 8013e26:	eeb0 8b40 	vmov.f64	d8, d0
 8013e2a:	f000 fc48 	bl	80146be <__ieee754_sqrt>
 8013e2e:	eeb4 8b48 	vcmp.f64	d8, d8
 8013e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e36:	d60c      	bvs.n	8013e52 <sqrt+0x32>
 8013e38:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8013e58 <sqrt+0x38>
 8013e3c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e44:	d505      	bpl.n	8013e52 <sqrt+0x32>
 8013e46:	f7fb fcf9 	bl	800f83c <__errno>
 8013e4a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8013e4e:	2321      	movs	r3, #33	@ 0x21
 8013e50:	6003      	str	r3, [r0, #0]
 8013e52:	ecbd 8b04 	vpop	{d8-d9}
 8013e56:	bd08      	pop	{r3, pc}
	...

08013e60 <cos>:
 8013e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e62:	eeb0 7b40 	vmov.f64	d7, d0
 8013e66:	ee17 3a90 	vmov	r3, s15
 8013e6a:	4a21      	ldr	r2, [pc, #132]	@ (8013ef0 <cos+0x90>)
 8013e6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d806      	bhi.n	8013e82 <cos+0x22>
 8013e74:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8013ee8 <cos+0x88>
 8013e78:	b005      	add	sp, #20
 8013e7a:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e7e:	f000 bc9b 	b.w	80147b8 <__kernel_cos>
 8013e82:	4a1c      	ldr	r2, [pc, #112]	@ (8013ef4 <cos+0x94>)
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d904      	bls.n	8013e92 <cos+0x32>
 8013e88:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013e8c:	b005      	add	sp, #20
 8013e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e92:	4668      	mov	r0, sp
 8013e94:	f000 fd50 	bl	8014938 <__ieee754_rem_pio2>
 8013e98:	f000 0003 	and.w	r0, r0, #3
 8013e9c:	2801      	cmp	r0, #1
 8013e9e:	d009      	beq.n	8013eb4 <cos+0x54>
 8013ea0:	2802      	cmp	r0, #2
 8013ea2:	d010      	beq.n	8013ec6 <cos+0x66>
 8013ea4:	b9b0      	cbnz	r0, 8013ed4 <cos+0x74>
 8013ea6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013eaa:	ed9d 0b00 	vldr	d0, [sp]
 8013eae:	f000 fc83 	bl	80147b8 <__kernel_cos>
 8013eb2:	e7eb      	b.n	8013e8c <cos+0x2c>
 8013eb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013eb8:	ed9d 0b00 	vldr	d0, [sp]
 8013ebc:	f000 fce4 	bl	8014888 <__kernel_sin>
 8013ec0:	eeb1 0b40 	vneg.f64	d0, d0
 8013ec4:	e7e2      	b.n	8013e8c <cos+0x2c>
 8013ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013eca:	ed9d 0b00 	vldr	d0, [sp]
 8013ece:	f000 fc73 	bl	80147b8 <__kernel_cos>
 8013ed2:	e7f5      	b.n	8013ec0 <cos+0x60>
 8013ed4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013ed8:	ed9d 0b00 	vldr	d0, [sp]
 8013edc:	2001      	movs	r0, #1
 8013ede:	f000 fcd3 	bl	8014888 <__kernel_sin>
 8013ee2:	e7d3      	b.n	8013e8c <cos+0x2c>
 8013ee4:	f3af 8000 	nop.w
	...
 8013ef0:	3fe921fb 	.word	0x3fe921fb
 8013ef4:	7fefffff 	.word	0x7fefffff

08013ef8 <sin>:
 8013ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013efa:	eeb0 7b40 	vmov.f64	d7, d0
 8013efe:	ee17 3a90 	vmov	r3, s15
 8013f02:	4a21      	ldr	r2, [pc, #132]	@ (8013f88 <sin+0x90>)
 8013f04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	d807      	bhi.n	8013f1c <sin+0x24>
 8013f0c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8013f80 <sin+0x88>
 8013f10:	2000      	movs	r0, #0
 8013f12:	b005      	add	sp, #20
 8013f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f18:	f000 bcb6 	b.w	8014888 <__kernel_sin>
 8013f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8013f8c <sin+0x94>)
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	d904      	bls.n	8013f2c <sin+0x34>
 8013f22:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013f26:	b005      	add	sp, #20
 8013f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f2c:	4668      	mov	r0, sp
 8013f2e:	f000 fd03 	bl	8014938 <__ieee754_rem_pio2>
 8013f32:	f000 0003 	and.w	r0, r0, #3
 8013f36:	2801      	cmp	r0, #1
 8013f38:	d00a      	beq.n	8013f50 <sin+0x58>
 8013f3a:	2802      	cmp	r0, #2
 8013f3c:	d00f      	beq.n	8013f5e <sin+0x66>
 8013f3e:	b9c0      	cbnz	r0, 8013f72 <sin+0x7a>
 8013f40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f44:	ed9d 0b00 	vldr	d0, [sp]
 8013f48:	2001      	movs	r0, #1
 8013f4a:	f000 fc9d 	bl	8014888 <__kernel_sin>
 8013f4e:	e7ea      	b.n	8013f26 <sin+0x2e>
 8013f50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f54:	ed9d 0b00 	vldr	d0, [sp]
 8013f58:	f000 fc2e 	bl	80147b8 <__kernel_cos>
 8013f5c:	e7e3      	b.n	8013f26 <sin+0x2e>
 8013f5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f62:	ed9d 0b00 	vldr	d0, [sp]
 8013f66:	2001      	movs	r0, #1
 8013f68:	f000 fc8e 	bl	8014888 <__kernel_sin>
 8013f6c:	eeb1 0b40 	vneg.f64	d0, d0
 8013f70:	e7d9      	b.n	8013f26 <sin+0x2e>
 8013f72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f76:	ed9d 0b00 	vldr	d0, [sp]
 8013f7a:	f000 fc1d 	bl	80147b8 <__kernel_cos>
 8013f7e:	e7f5      	b.n	8013f6c <sin+0x74>
	...
 8013f88:	3fe921fb 	.word	0x3fe921fb
 8013f8c:	7fefffff 	.word	0x7fefffff

08013f90 <log>:
 8013f90:	b4f0      	push	{r4, r5, r6, r7}
 8013f92:	ee10 0a90 	vmov	r0, s1
 8013f96:	ee10 3a10 	vmov	r3, s0
 8013f9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013f9e:	429c      	cmp	r4, r3
 8013fa0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8013fa4:	4c70      	ldr	r4, [pc, #448]	@ (8014168 <log+0x1d8>)
 8013fa6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8013faa:	418c      	sbcs	r4, r1
 8013fac:	ed2d 8b02 	vpush	{d8}
 8013fb0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8013fb4:	d35a      	bcc.n	801406c <log+0xdc>
 8013fb6:	4a6d      	ldr	r2, [pc, #436]	@ (801416c <log+0x1dc>)
 8013fb8:	4290      	cmp	r0, r2
 8013fba:	bf08      	it	eq
 8013fbc:	2b00      	cmpeq	r3, #0
 8013fbe:	f000 80c4 	beq.w	801414a <log+0x1ba>
 8013fc2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8013fc6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013fca:	4b69      	ldr	r3, [pc, #420]	@ (8014170 <log+0x1e0>)
 8013fcc:	ee20 2b00 	vmul.f64	d2, d0, d0
 8013fd0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8013fd4:	ee20 4b02 	vmul.f64	d4, d0, d2
 8013fd8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8013fdc:	eea6 7b00 	vfma.f64	d7, d6, d0
 8013fe0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8013fe4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8013fe8:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013fec:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8013ff0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8013ff4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8013ff8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8013ffc:	eea5 6b02 	vfma.f64	d6, d5, d2
 8014000:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8014004:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014008:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801400c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8014010:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8014014:	eea3 5b04 	vfma.f64	d5, d3, d4
 8014018:	eea5 6b04 	vfma.f64	d6, d5, d4
 801401c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014020:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014024:	eeb0 2b47 	vmov.f64	d2, d7
 8014028:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8014150 <log+0x1c0>
 801402c:	eeb0 6b40 	vmov.f64	d6, d0
 8014030:	eeb0 3b40 	vmov.f64	d3, d0
 8014034:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014038:	eea0 6b47 	vfms.f64	d6, d0, d7
 801403c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8014040:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014044:	eea1 3b05 	vfma.f64	d3, d1, d5
 8014048:	ee30 7b43 	vsub.f64	d7, d0, d3
 801404c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8014050:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014054:	ee25 5b08 	vmul.f64	d5, d5, d8
 8014058:	eea5 7b00 	vfma.f64	d7, d5, d0
 801405c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8014060:	ee33 0b07 	vadd.f64	d0, d3, d7
 8014064:	ecbd 8b02 	vpop	{d8}
 8014068:	bcf0      	pop	{r4, r5, r6, r7}
 801406a:	4770      	bx	lr
 801406c:	f1a2 0410 	sub.w	r4, r2, #16
 8014070:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8014074:	428c      	cmp	r4, r1
 8014076:	d923      	bls.n	80140c0 <log+0x130>
 8014078:	18d9      	adds	r1, r3, r3
 801407a:	eb40 0400 	adc.w	r4, r0, r0
 801407e:	4321      	orrs	r1, r4
 8014080:	d105      	bne.n	801408e <log+0xfe>
 8014082:	ecbd 8b02 	vpop	{d8}
 8014086:	2001      	movs	r0, #1
 8014088:	bcf0      	pop	{r4, r5, r6, r7}
 801408a:	f000 be05 	b.w	8014c98 <__math_divzero>
 801408e:	4939      	ldr	r1, [pc, #228]	@ (8014174 <log+0x1e4>)
 8014090:	4288      	cmp	r0, r1
 8014092:	bf08      	it	eq
 8014094:	2b00      	cmpeq	r3, #0
 8014096:	d0e5      	beq.n	8014064 <log+0xd4>
 8014098:	0413      	lsls	r3, r2, #16
 801409a:	d403      	bmi.n	80140a4 <log+0x114>
 801409c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80140a0:	4393      	bics	r3, r2
 80140a2:	d104      	bne.n	80140ae <log+0x11e>
 80140a4:	ecbd 8b02 	vpop	{d8}
 80140a8:	bcf0      	pop	{r4, r5, r6, r7}
 80140aa:	f000 be0d 	b.w	8014cc8 <__math_invalid>
 80140ae:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014158 <log+0x1c8>
 80140b2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80140b6:	ec53 2b17 	vmov	r2, r3, d7
 80140ba:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80140be:	4613      	mov	r3, r2
 80140c0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80140c4:	492a      	ldr	r1, [pc, #168]	@ (8014170 <log+0x1e0>)
 80140c6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80140ca:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80140ce:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80140d2:	0d15      	lsrs	r5, r2, #20
 80140d4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80140d8:	052d      	lsls	r5, r5, #20
 80140da:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80140de:	1e1e      	subs	r6, r3, #0
 80140e0:	1b47      	subs	r7, r0, r5
 80140e2:	ec47 6b16 	vmov	d6, r6, r7
 80140e6:	1512      	asrs	r2, r2, #20
 80140e8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80140ec:	ee07 2a90 	vmov	s15, r2
 80140f0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80140f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80140f8:	ed91 4b00 	vldr	d4, [r1]
 80140fc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8014100:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8014104:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014108:	ee35 4b07 	vadd.f64	d4, d5, d7
 801410c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8014110:	ed91 7b02 	vldr	d7, [r1, #8]
 8014114:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014118:	eea7 0b06 	vfma.f64	d0, d7, d6
 801411c:	ed91 7b04 	vldr	d7, [r1, #16]
 8014120:	ed91 6b08 	vldr	d6, [r1, #32]
 8014124:	eea7 0b02 	vfma.f64	d0, d7, d2
 8014128:	ed91 7b06 	vldr	d7, [r1, #24]
 801412c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8014130:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014134:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8014138:	eea3 6b05 	vfma.f64	d6, d3, d5
 801413c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014140:	eea1 0b07 	vfma.f64	d0, d1, d7
 8014144:	ee30 0b04 	vadd.f64	d0, d0, d4
 8014148:	e78c      	b.n	8014064 <log+0xd4>
 801414a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8014160 <log+0x1d0>
 801414e:	e789      	b.n	8014064 <log+0xd4>
 8014150:	00000000 	.word	0x00000000
 8014154:	41a00000 	.word	0x41a00000
 8014158:	00000000 	.word	0x00000000
 801415c:	43300000 	.word	0x43300000
	...
 8014168:	000308ff 	.word	0x000308ff
 801416c:	3ff00000 	.word	0x3ff00000
 8014170:	080159d0 	.word	0x080159d0
 8014174:	7ff00000 	.word	0x7ff00000

08014178 <checkint>:
 8014178:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801417c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8014180:	429a      	cmp	r2, r3
 8014182:	b570      	push	{r4, r5, r6, lr}
 8014184:	dd2a      	ble.n	80141dc <checkint+0x64>
 8014186:	f240 4333 	movw	r3, #1075	@ 0x433
 801418a:	429a      	cmp	r2, r3
 801418c:	dc24      	bgt.n	80141d8 <checkint+0x60>
 801418e:	1a9b      	subs	r3, r3, r2
 8014190:	f1a3 0620 	sub.w	r6, r3, #32
 8014194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014198:	fa02 f403 	lsl.w	r4, r2, r3
 801419c:	fa02 f606 	lsl.w	r6, r2, r6
 80141a0:	f1c3 0520 	rsb	r5, r3, #32
 80141a4:	fa22 f505 	lsr.w	r5, r2, r5
 80141a8:	4334      	orrs	r4, r6
 80141aa:	432c      	orrs	r4, r5
 80141ac:	409a      	lsls	r2, r3
 80141ae:	ea20 0202 	bic.w	r2, r0, r2
 80141b2:	ea21 0404 	bic.w	r4, r1, r4
 80141b6:	4322      	orrs	r2, r4
 80141b8:	f1a3 0420 	sub.w	r4, r3, #32
 80141bc:	f1c3 0220 	rsb	r2, r3, #32
 80141c0:	d10c      	bne.n	80141dc <checkint+0x64>
 80141c2:	40d8      	lsrs	r0, r3
 80141c4:	fa01 f302 	lsl.w	r3, r1, r2
 80141c8:	4318      	orrs	r0, r3
 80141ca:	40e1      	lsrs	r1, r4
 80141cc:	4308      	orrs	r0, r1
 80141ce:	f000 0001 	and.w	r0, r0, #1
 80141d2:	f1d0 0002 	rsbs	r0, r0, #2
 80141d6:	bd70      	pop	{r4, r5, r6, pc}
 80141d8:	2002      	movs	r0, #2
 80141da:	e7fc      	b.n	80141d6 <checkint+0x5e>
 80141dc:	2000      	movs	r0, #0
 80141de:	e7fa      	b.n	80141d6 <checkint+0x5e>

080141e0 <pow>:
 80141e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e4:	ee10 4a90 	vmov	r4, s1
 80141e8:	ed2d 8b0a 	vpush	{d8-d12}
 80141ec:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80141f0:	ee11 aa90 	vmov	sl, s3
 80141f4:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80141f8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80141fc:	429a      	cmp	r2, r3
 80141fe:	ee10 5a10 	vmov	r5, s0
 8014202:	ee11 0a10 	vmov	r0, s2
 8014206:	b087      	sub	sp, #28
 8014208:	46c4      	mov	ip, r8
 801420a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801420e:	d806      	bhi.n	801421e <pow+0x3e>
 8014210:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8014214:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8014218:	2b7f      	cmp	r3, #127	@ 0x7f
 801421a:	f240 8157 	bls.w	80144cc <pow+0x2ec>
 801421e:	1802      	adds	r2, r0, r0
 8014220:	eb4a 010a 	adc.w	r1, sl, sl
 8014224:	f06f 0b01 	mvn.w	fp, #1
 8014228:	1e57      	subs	r7, r2, #1
 801422a:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 801422e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8014232:	45bb      	cmp	fp, r7
 8014234:	eb7e 0303 	sbcs.w	r3, lr, r3
 8014238:	d242      	bcs.n	80142c0 <pow+0xe0>
 801423a:	ea52 0301 	orrs.w	r3, r2, r1
 801423e:	f04f 0300 	mov.w	r3, #0
 8014242:	d10c      	bne.n	801425e <pow+0x7e>
 8014244:	196d      	adds	r5, r5, r5
 8014246:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801424a:	4164      	adcs	r4, r4
 801424c:	42ab      	cmp	r3, r5
 801424e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014252:	41a3      	sbcs	r3, r4
 8014254:	f0c0 808f 	bcc.w	8014376 <pow+0x196>
 8014258:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801425c:	e02b      	b.n	80142b6 <pow+0xd6>
 801425e:	4ed4      	ldr	r6, [pc, #848]	@ (80145b0 <pow+0x3d0>)
 8014260:	42b4      	cmp	r4, r6
 8014262:	bf08      	it	eq
 8014264:	429d      	cmpeq	r5, r3
 8014266:	d109      	bne.n	801427c <pow+0x9c>
 8014268:	1800      	adds	r0, r0, r0
 801426a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801426e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8014272:	4283      	cmp	r3, r0
 8014274:	4bcf      	ldr	r3, [pc, #828]	@ (80145b4 <pow+0x3d4>)
 8014276:	eb73 030a 	sbcs.w	r3, r3, sl
 801427a:	e7eb      	b.n	8014254 <pow+0x74>
 801427c:	196d      	adds	r5, r5, r5
 801427e:	48ce      	ldr	r0, [pc, #824]	@ (80145b8 <pow+0x3d8>)
 8014280:	4164      	adcs	r4, r4
 8014282:	42ab      	cmp	r3, r5
 8014284:	eb70 0604 	sbcs.w	r6, r0, r4
 8014288:	d375      	bcc.n	8014376 <pow+0x196>
 801428a:	4281      	cmp	r1, r0
 801428c:	bf08      	it	eq
 801428e:	429a      	cmpeq	r2, r3
 8014290:	d171      	bne.n	8014376 <pow+0x196>
 8014292:	4aca      	ldr	r2, [pc, #808]	@ (80145bc <pow+0x3dc>)
 8014294:	4294      	cmp	r4, r2
 8014296:	bf08      	it	eq
 8014298:	429d      	cmpeq	r5, r3
 801429a:	d0dd      	beq.n	8014258 <pow+0x78>
 801429c:	4294      	cmp	r4, r2
 801429e:	ea6f 0a0a 	mvn.w	sl, sl
 80142a2:	bf34      	ite	cc
 80142a4:	2400      	movcc	r4, #0
 80142a6:	2401      	movcs	r4, #1
 80142a8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80142ac:	4554      	cmp	r4, sl
 80142ae:	f040 81dc 	bne.w	801466a <pow+0x48a>
 80142b2:	ee21 0b01 	vmul.f64	d0, d1, d1
 80142b6:	b007      	add	sp, #28
 80142b8:	ecbd 8b0a 	vpop	{d8-d12}
 80142bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142c0:	196f      	adds	r7, r5, r5
 80142c2:	eb44 0904 	adc.w	r9, r4, r4
 80142c6:	1e7a      	subs	r2, r7, #1
 80142c8:	f169 0300 	sbc.w	r3, r9, #0
 80142cc:	4593      	cmp	fp, r2
 80142ce:	eb7e 0303 	sbcs.w	r3, lr, r3
 80142d2:	d225      	bcs.n	8014320 <pow+0x140>
 80142d4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80142d8:	2c00      	cmp	r4, #0
 80142da:	da13      	bge.n	8014304 <pow+0x124>
 80142dc:	4651      	mov	r1, sl
 80142de:	f7ff ff4b 	bl	8014178 <checkint>
 80142e2:	2801      	cmp	r0, #1
 80142e4:	d10e      	bne.n	8014304 <pow+0x124>
 80142e6:	eeb1 0b40 	vneg.f64	d0, d0
 80142ea:	ea57 0909 	orrs.w	r9, r7, r9
 80142ee:	d10b      	bne.n	8014308 <pow+0x128>
 80142f0:	f1ba 0f00 	cmp.w	sl, #0
 80142f4:	dadf      	bge.n	80142b6 <pow+0xd6>
 80142f6:	b007      	add	sp, #28
 80142f8:	ecbd 8b0a 	vpop	{d8-d12}
 80142fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014300:	f000 bcca 	b.w	8014c98 <__math_divzero>
 8014304:	2000      	movs	r0, #0
 8014306:	e7f0      	b.n	80142ea <pow+0x10a>
 8014308:	f1ba 0f00 	cmp.w	sl, #0
 801430c:	dad3      	bge.n	80142b6 <pow+0xd6>
 801430e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014312:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014316:	ed8d 7b00 	vstr	d7, [sp]
 801431a:	ed9d 0b00 	vldr	d0, [sp]
 801431e:	e7ca      	b.n	80142b6 <pow+0xd6>
 8014320:	2c00      	cmp	r4, #0
 8014322:	da2b      	bge.n	801437c <pow+0x19c>
 8014324:	4651      	mov	r1, sl
 8014326:	f7ff ff27 	bl	8014178 <checkint>
 801432a:	b930      	cbnz	r0, 801433a <pow+0x15a>
 801432c:	b007      	add	sp, #28
 801432e:	ecbd 8b0a 	vpop	{d8-d12}
 8014332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014336:	f000 bcc7 	b.w	8014cc8 <__math_invalid>
 801433a:	1e41      	subs	r1, r0, #1
 801433c:	4248      	negs	r0, r1
 801433e:	4148      	adcs	r0, r1
 8014340:	0480      	lsls	r0, r0, #18
 8014342:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014346:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801434a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801434e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8014352:	2b7f      	cmp	r3, #127	@ 0x7f
 8014354:	d92d      	bls.n	80143b2 <pow+0x1d2>
 8014356:	4b96      	ldr	r3, [pc, #600]	@ (80145b0 <pow+0x3d0>)
 8014358:	2000      	movs	r0, #0
 801435a:	429c      	cmp	r4, r3
 801435c:	bf08      	it	eq
 801435e:	4285      	cmpeq	r5, r0
 8014360:	f43f af7a 	beq.w	8014258 <pow+0x78>
 8014364:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8014368:	428a      	cmp	r2, r1
 801436a:	d80c      	bhi.n	8014386 <pow+0x1a6>
 801436c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014370:	42a8      	cmp	r0, r5
 8014372:	41a3      	sbcs	r3, r4
 8014374:	d204      	bcs.n	8014380 <pow+0x1a0>
 8014376:	ee31 0b00 	vadd.f64	d0, d1, d0
 801437a:	e79c      	b.n	80142b6 <pow+0xd6>
 801437c:	2000      	movs	r0, #0
 801437e:	e7e4      	b.n	801434a <pow+0x16a>
 8014380:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014384:	e797      	b.n	80142b6 <pow+0xd6>
 8014386:	2d01      	cmp	r5, #1
 8014388:	eb74 0303 	sbcs.w	r3, r4, r3
 801438c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014390:	bf34      	ite	cc
 8014392:	2301      	movcc	r3, #1
 8014394:	2300      	movcs	r3, #0
 8014396:	4296      	cmp	r6, r2
 8014398:	bf8c      	ite	hi
 801439a:	2600      	movhi	r6, #0
 801439c:	2601      	movls	r6, #1
 801439e:	42b3      	cmp	r3, r6
 80143a0:	f000 809c 	beq.w	80144dc <pow+0x2fc>
 80143a4:	b007      	add	sp, #28
 80143a6:	ecbd 8b0a 	vpop	{d8-d12}
 80143aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ae:	f000 bc6b 	b.w	8014c88 <__math_oflow>
 80143b2:	f1bc 0f00 	cmp.w	ip, #0
 80143b6:	d10a      	bne.n	80143ce <pow+0x1ee>
 80143b8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 80145a0 <pow+0x3c0>
 80143bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80143c0:	ec53 2b17 	vmov	r2, r3, d7
 80143c4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80143c8:	4615      	mov	r5, r2
 80143ca:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 80143ce:	4a7c      	ldr	r2, [pc, #496]	@ (80145c0 <pow+0x3e0>)
 80143d0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80143d4:	4422      	add	r2, r4
 80143d6:	1513      	asrs	r3, r2, #20
 80143d8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80143dc:	ee03 3a10 	vmov	s6, r3
 80143e0:	0d12      	lsrs	r2, r2, #20
 80143e2:	4b78      	ldr	r3, [pc, #480]	@ (80145c4 <pow+0x3e4>)
 80143e4:	0512      	lsls	r2, r2, #20
 80143e6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80143ea:	1aa7      	subs	r7, r4, r2
 80143ec:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80143f0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 80143f4:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 80143f8:	1e2e      	subs	r6, r5, #0
 80143fa:	ec47 6b14 	vmov	d4, r6, r7
 80143fe:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8014402:	eea4 6b05 	vfma.f64	d6, d4, d5
 8014406:	ed93 5b00 	vldr	d5, [r3]
 801440a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801440e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8014412:	ed93 5b02 	vldr	d5, [r3, #8]
 8014416:	ee36 4b02 	vadd.f64	d4, d6, d2
 801441a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801441e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8014422:	ed93 5b04 	vldr	d5, [r3, #16]
 8014426:	ee32 2b06 	vadd.f64	d2, d2, d6
 801442a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801442e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8014432:	ee26 0b05 	vmul.f64	d0, d6, d5
 8014436:	ee34 8b00 	vadd.f64	d8, d4, d0
 801443a:	eeb0 9b40 	vmov.f64	d9, d0
 801443e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8014442:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8014446:	ee34 ab00 	vadd.f64	d10, d4, d0
 801444a:	ed93 5b06 	vldr	d5, [r3, #24]
 801444e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8014452:	ee37 7b09 	vadd.f64	d7, d7, d9
 8014456:	ed93 4b08 	vldr	d4, [r3, #32]
 801445a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801445e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8014462:	eea6 5b04 	vfma.f64	d5, d6, d4
 8014466:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801446a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801446e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8014472:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8014476:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801447a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801447e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8014482:	eeab 7b05 	vfma.f64	d7, d11, d5
 8014486:	ee38 4b07 	vadd.f64	d4, d8, d7
 801448a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801448e:	ee16 3a90 	vmov	r3, s13
 8014492:	eeb0 5b46 	vmov.f64	d5, d6
 8014496:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801449a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801449e:	18b2      	adds	r2, r6, r2
 80144a0:	2a3e      	cmp	r2, #62	@ 0x3e
 80144a2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80144a6:	ee38 8b44 	vsub.f64	d8, d8, d4
 80144aa:	ee38 8b07 	vadd.f64	d8, d8, d7
 80144ae:	eea1 5b08 	vfma.f64	d5, d1, d8
 80144b2:	d91b      	bls.n	80144ec <pow+0x30c>
 80144b4:	2a00      	cmp	r2, #0
 80144b6:	da0b      	bge.n	80144d0 <pow+0x2f0>
 80144b8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80144bc:	ee36 0b00 	vadd.f64	d0, d6, d0
 80144c0:	2800      	cmp	r0, #0
 80144c2:	f43f aef8 	beq.w	80142b6 <pow+0xd6>
 80144c6:	eeb1 0b40 	vneg.f64	d0, d0
 80144ca:	e6f4      	b.n	80142b6 <pow+0xd6>
 80144cc:	2000      	movs	r0, #0
 80144ce:	e77e      	b.n	80143ce <pow+0x1ee>
 80144d0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80144d4:	d909      	bls.n	80144ea <pow+0x30a>
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f6bf af64 	bge.w	80143a4 <pow+0x1c4>
 80144dc:	b007      	add	sp, #28
 80144de:	ecbd 8b0a 	vpop	{d8-d12}
 80144e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e6:	f000 bbc7 	b.w	8014c78 <__math_uflow>
 80144ea:	2600      	movs	r6, #0
 80144ec:	4936      	ldr	r1, [pc, #216]	@ (80145c8 <pow+0x3e8>)
 80144ee:	ed91 4b02 	vldr	d4, [r1, #8]
 80144f2:	ed91 3b00 	vldr	d3, [r1]
 80144f6:	eeb0 7b44 	vmov.f64	d7, d4
 80144fa:	eea6 7b03 	vfma.f64	d7, d6, d3
 80144fe:	ee17 5a10 	vmov	r5, s14
 8014502:	ee37 7b44 	vsub.f64	d7, d7, d4
 8014506:	ed91 4b04 	vldr	d4, [r1, #16]
 801450a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801450e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014512:	ed91 4b06 	vldr	d4, [r1, #24]
 8014516:	18dc      	adds	r4, r3, r3
 8014518:	f104 030f 	add.w	r3, r4, #15
 801451c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8014520:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014524:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8014528:	ee35 5b06 	vadd.f64	d5, d5, d6
 801452c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8014530:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8014534:	ed91 4b08 	vldr	d4, [r1, #32]
 8014538:	ee35 7b07 	vadd.f64	d7, d5, d7
 801453c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8014540:	eea5 4b03 	vfma.f64	d4, d5, d3
 8014544:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8014548:	eea6 7b04 	vfma.f64	d7, d6, d4
 801454c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8014550:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8014554:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8014558:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801455c:	eea5 4b03 	vfma.f64	d4, d5, d3
 8014560:	1940      	adds	r0, r0, r5
 8014562:	2700      	movs	r7, #0
 8014564:	eb17 020c 	adds.w	r2, r7, ip
 8014568:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801456c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014570:	2e00      	cmp	r6, #0
 8014572:	d175      	bne.n	8014660 <pow+0x480>
 8014574:	42bd      	cmp	r5, r7
 8014576:	db29      	blt.n	80145cc <pow+0x3ec>
 8014578:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801457c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8014580:	4610      	mov	r0, r2
 8014582:	ec41 0b10 	vmov	d0, r0, r1
 8014586:	eea7 0b00 	vfma.f64	d0, d7, d0
 801458a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80145a8 <pow+0x3c8>
 801458e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014592:	b007      	add	sp, #28
 8014594:	ecbd 8b0a 	vpop	{d8-d12}
 8014598:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801459c:	f000 bbac 	b.w	8014cf8 <__math_check_oflow>
 80145a0:	00000000 	.word	0x00000000
 80145a4:	43300000 	.word	0x43300000
 80145a8:	00000000 	.word	0x00000000
 80145ac:	7f000000 	.word	0x7f000000
 80145b0:	3ff00000 	.word	0x3ff00000
 80145b4:	fff00000 	.word	0xfff00000
 80145b8:	ffe00000 	.word	0xffe00000
 80145bc:	7fe00000 	.word	0x7fe00000
 80145c0:	c0196aab 	.word	0xc0196aab
 80145c4:	08016260 	.word	0x08016260
 80145c8:	08017430 	.word	0x08017430
 80145cc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80145d0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80145d4:	4610      	mov	r0, r2
 80145d6:	ec41 0b15 	vmov	d5, r0, r1
 80145da:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80145de:	ee27 6b05 	vmul.f64	d6, d7, d5
 80145e2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80145e6:	eeb0 4bc7 	vabs.f64	d4, d7
 80145ea:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80145ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8014670 <pow+0x490>
 80145f6:	d52a      	bpl.n	801464e <pow+0x46e>
 80145f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80145fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014604:	ee35 5b06 	vadd.f64	d5, d5, d6
 8014608:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801460c:	bf58      	it	pl
 801460e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8014612:	ee37 3b04 	vadd.f64	d3, d7, d4
 8014616:	ee34 6b43 	vsub.f64	d6, d4, d3
 801461a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801461e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8014622:	ee36 6b03 	vadd.f64	d6, d6, d3
 8014626:	ee36 7b44 	vsub.f64	d7, d6, d4
 801462a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014632:	d104      	bne.n	801463e <pow+0x45e>
 8014634:	4632      	mov	r2, r6
 8014636:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801463a:	ec43 2b17 	vmov	d7, r2, r3
 801463e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014642:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014646:	ee26 6b00 	vmul.f64	d6, d6, d0
 801464a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801464e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014652:	b007      	add	sp, #28
 8014654:	ecbd 8b0a 	vpop	{d8-d12}
 8014658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801465c:	f000 bb43 	b.w	8014ce6 <__math_check_uflow>
 8014660:	ec43 2b10 	vmov	d0, r2, r3
 8014664:	eea7 0b00 	vfma.f64	d0, d7, d0
 8014668:	e625      	b.n	80142b6 <pow+0xd6>
 801466a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8014678 <pow+0x498>
 801466e:	e622      	b.n	80142b6 <pow+0xd6>
 8014670:	00000000 	.word	0x00000000
 8014674:	00100000 	.word	0x00100000
	...

08014680 <cabs>:
 8014680:	b508      	push	{r3, lr}
 8014682:	ed2d 8b06 	vpush	{d8-d10}
 8014686:	eeb0 ab40 	vmov.f64	d10, d0
 801468a:	eeb0 9b41 	vmov.f64	d9, d1
 801468e:	f000 f815 	bl	80146bc <creal>
 8014692:	eeb0 1b49 	vmov.f64	d1, d9
 8014696:	eeb0 8b40 	vmov.f64	d8, d0
 801469a:	eeb0 0b4a 	vmov.f64	d0, d10
 801469e:	f000 f80a 	bl	80146b6 <cimag>
 80146a2:	eeb0 1b40 	vmov.f64	d1, d0
 80146a6:	eeb0 0b48 	vmov.f64	d0, d8
 80146aa:	ecbd 8b06 	vpop	{d8-d10}
 80146ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80146b2:	f000 ba85 	b.w	8014bc0 <hypot>

080146b6 <cimag>:
 80146b6:	eeb0 0b41 	vmov.f64	d0, d1
 80146ba:	4770      	bx	lr

080146bc <creal>:
 80146bc:	4770      	bx	lr

080146be <__ieee754_sqrt>:
 80146be:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80146c2:	4770      	bx	lr
 80146c4:	0000      	movs	r0, r0
	...

080146c8 <floor>:
 80146c8:	ee10 3a90 	vmov	r3, s1
 80146cc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80146d0:	ee10 2a10 	vmov	r2, s0
 80146d4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80146d8:	2913      	cmp	r1, #19
 80146da:	b530      	push	{r4, r5, lr}
 80146dc:	4615      	mov	r5, r2
 80146de:	dc33      	bgt.n	8014748 <floor+0x80>
 80146e0:	2900      	cmp	r1, #0
 80146e2:	da18      	bge.n	8014716 <floor+0x4e>
 80146e4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80147a8 <floor+0xe0>
 80146e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80146ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80146f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f4:	dd0a      	ble.n	801470c <floor+0x44>
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	da50      	bge.n	801479c <floor+0xd4>
 80146fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80146fe:	4313      	orrs	r3, r2
 8014700:	2200      	movs	r2, #0
 8014702:	4293      	cmp	r3, r2
 8014704:	4b2a      	ldr	r3, [pc, #168]	@ (80147b0 <floor+0xe8>)
 8014706:	bf08      	it	eq
 8014708:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801470c:	4619      	mov	r1, r3
 801470e:	4610      	mov	r0, r2
 8014710:	ec41 0b10 	vmov	d0, r0, r1
 8014714:	e01f      	b.n	8014756 <floor+0x8e>
 8014716:	4827      	ldr	r0, [pc, #156]	@ (80147b4 <floor+0xec>)
 8014718:	4108      	asrs	r0, r1
 801471a:	ea03 0400 	and.w	r4, r3, r0
 801471e:	4314      	orrs	r4, r2
 8014720:	d019      	beq.n	8014756 <floor+0x8e>
 8014722:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80147a8 <floor+0xe0>
 8014726:	ee30 0b07 	vadd.f64	d0, d0, d7
 801472a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014732:	ddeb      	ble.n	801470c <floor+0x44>
 8014734:	2b00      	cmp	r3, #0
 8014736:	bfbe      	ittt	lt
 8014738:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801473c:	410a      	asrlt	r2, r1
 801473e:	189b      	addlt	r3, r3, r2
 8014740:	ea23 0300 	bic.w	r3, r3, r0
 8014744:	2200      	movs	r2, #0
 8014746:	e7e1      	b.n	801470c <floor+0x44>
 8014748:	2933      	cmp	r1, #51	@ 0x33
 801474a:	dd05      	ble.n	8014758 <floor+0x90>
 801474c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014750:	d101      	bne.n	8014756 <floor+0x8e>
 8014752:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014756:	bd30      	pop	{r4, r5, pc}
 8014758:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801475c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014760:	40e0      	lsrs	r0, r4
 8014762:	4210      	tst	r0, r2
 8014764:	d0f7      	beq.n	8014756 <floor+0x8e>
 8014766:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80147a8 <floor+0xe0>
 801476a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801476e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014776:	ddc9      	ble.n	801470c <floor+0x44>
 8014778:	2b00      	cmp	r3, #0
 801477a:	da02      	bge.n	8014782 <floor+0xba>
 801477c:	2914      	cmp	r1, #20
 801477e:	d103      	bne.n	8014788 <floor+0xc0>
 8014780:	3301      	adds	r3, #1
 8014782:	ea22 0200 	bic.w	r2, r2, r0
 8014786:	e7c1      	b.n	801470c <floor+0x44>
 8014788:	2401      	movs	r4, #1
 801478a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801478e:	fa04 f101 	lsl.w	r1, r4, r1
 8014792:	440a      	add	r2, r1
 8014794:	42aa      	cmp	r2, r5
 8014796:	bf38      	it	cc
 8014798:	191b      	addcc	r3, r3, r4
 801479a:	e7f2      	b.n	8014782 <floor+0xba>
 801479c:	2200      	movs	r2, #0
 801479e:	4613      	mov	r3, r2
 80147a0:	e7b4      	b.n	801470c <floor+0x44>
 80147a2:	bf00      	nop
 80147a4:	f3af 8000 	nop.w
 80147a8:	8800759c 	.word	0x8800759c
 80147ac:	7e37e43c 	.word	0x7e37e43c
 80147b0:	bff00000 	.word	0xbff00000
 80147b4:	000fffff 	.word	0x000fffff

080147b8 <__kernel_cos>:
 80147b8:	eeb0 5b40 	vmov.f64	d5, d0
 80147bc:	ee15 1a90 	vmov	r1, s11
 80147c0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80147c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80147c8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80147cc:	d204      	bcs.n	80147d8 <__kernel_cos+0x20>
 80147ce:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80147d2:	ee17 3a90 	vmov	r3, s15
 80147d6:	b343      	cbz	r3, 801482a <__kernel_cos+0x72>
 80147d8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80147dc:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80147e0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8014850 <__kernel_cos+0x98>
 80147e4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8014858 <__kernel_cos+0xa0>
 80147e8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80147ec:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8014860 <__kernel_cos+0xa8>
 80147f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80147f4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8014868 <__kernel_cos+0xb0>
 80147f8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80147fc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8014870 <__kernel_cos+0xb8>
 8014800:	4b1f      	ldr	r3, [pc, #124]	@ (8014880 <__kernel_cos+0xc8>)
 8014802:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014806:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8014878 <__kernel_cos+0xc0>
 801480a:	4299      	cmp	r1, r3
 801480c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014810:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8014814:	ee24 4b06 	vmul.f64	d4, d4, d6
 8014818:	ee26 7b07 	vmul.f64	d7, d6, d7
 801481c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8014820:	d804      	bhi.n	801482c <__kernel_cos+0x74>
 8014822:	ee37 7b41 	vsub.f64	d7, d7, d1
 8014826:	ee30 0b47 	vsub.f64	d0, d0, d7
 801482a:	4770      	bx	lr
 801482c:	4b15      	ldr	r3, [pc, #84]	@ (8014884 <__kernel_cos+0xcc>)
 801482e:	4299      	cmp	r1, r3
 8014830:	d809      	bhi.n	8014846 <__kernel_cos+0x8e>
 8014832:	2200      	movs	r2, #0
 8014834:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8014838:	ec43 2b16 	vmov	d6, r2, r3
 801483c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014840:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014844:	e7ed      	b.n	8014822 <__kernel_cos+0x6a>
 8014846:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801484a:	e7f7      	b.n	801483c <__kernel_cos+0x84>
 801484c:	f3af 8000 	nop.w
 8014850:	be8838d4 	.word	0xbe8838d4
 8014854:	bda8fae9 	.word	0xbda8fae9
 8014858:	bdb4b1c4 	.word	0xbdb4b1c4
 801485c:	3e21ee9e 	.word	0x3e21ee9e
 8014860:	809c52ad 	.word	0x809c52ad
 8014864:	be927e4f 	.word	0xbe927e4f
 8014868:	19cb1590 	.word	0x19cb1590
 801486c:	3efa01a0 	.word	0x3efa01a0
 8014870:	16c15177 	.word	0x16c15177
 8014874:	bf56c16c 	.word	0xbf56c16c
 8014878:	5555554c 	.word	0x5555554c
 801487c:	3fa55555 	.word	0x3fa55555
 8014880:	3fd33332 	.word	0x3fd33332
 8014884:	3fe90000 	.word	0x3fe90000

08014888 <__kernel_sin>:
 8014888:	ee10 3a90 	vmov	r3, s1
 801488c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014890:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8014894:	d204      	bcs.n	80148a0 <__kernel_sin+0x18>
 8014896:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801489a:	ee17 3a90 	vmov	r3, s15
 801489e:	b35b      	cbz	r3, 80148f8 <__kernel_sin+0x70>
 80148a0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80148a4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80148a8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8014900 <__kernel_sin+0x78>
 80148ac:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8014908 <__kernel_sin+0x80>
 80148b0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80148b4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8014910 <__kernel_sin+0x88>
 80148b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80148bc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8014918 <__kernel_sin+0x90>
 80148c0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80148c4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8014920 <__kernel_sin+0x98>
 80148c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80148cc:	b930      	cbnz	r0, 80148dc <__kernel_sin+0x54>
 80148ce:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8014928 <__kernel_sin+0xa0>
 80148d2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80148d6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80148da:	4770      	bx	lr
 80148dc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80148e0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80148e4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80148e8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80148ec:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014930 <__kernel_sin+0xa8>
 80148f0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80148f4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	f3af 8000 	nop.w
 8014900:	5acfd57c 	.word	0x5acfd57c
 8014904:	3de5d93a 	.word	0x3de5d93a
 8014908:	8a2b9ceb 	.word	0x8a2b9ceb
 801490c:	be5ae5e6 	.word	0xbe5ae5e6
 8014910:	57b1fe7d 	.word	0x57b1fe7d
 8014914:	3ec71de3 	.word	0x3ec71de3
 8014918:	19c161d5 	.word	0x19c161d5
 801491c:	bf2a01a0 	.word	0xbf2a01a0
 8014920:	1110f8a6 	.word	0x1110f8a6
 8014924:	3f811111 	.word	0x3f811111
 8014928:	55555549 	.word	0x55555549
 801492c:	bfc55555 	.word	0xbfc55555
 8014930:	55555549 	.word	0x55555549
 8014934:	3fc55555 	.word	0x3fc55555

08014938 <__ieee754_rem_pio2>:
 8014938:	b570      	push	{r4, r5, r6, lr}
 801493a:	eeb0 7b40 	vmov.f64	d7, d0
 801493e:	ee17 5a90 	vmov	r5, s15
 8014942:	4b99      	ldr	r3, [pc, #612]	@ (8014ba8 <__ieee754_rem_pio2+0x270>)
 8014944:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014948:	429e      	cmp	r6, r3
 801494a:	b088      	sub	sp, #32
 801494c:	4604      	mov	r4, r0
 801494e:	d807      	bhi.n	8014960 <__ieee754_rem_pio2+0x28>
 8014950:	2200      	movs	r2, #0
 8014952:	2300      	movs	r3, #0
 8014954:	ed84 0b00 	vstr	d0, [r4]
 8014958:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801495c:	2000      	movs	r0, #0
 801495e:	e01b      	b.n	8014998 <__ieee754_rem_pio2+0x60>
 8014960:	4b92      	ldr	r3, [pc, #584]	@ (8014bac <__ieee754_rem_pio2+0x274>)
 8014962:	429e      	cmp	r6, r3
 8014964:	d83b      	bhi.n	80149de <__ieee754_rem_pio2+0xa6>
 8014966:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801496a:	2d00      	cmp	r5, #0
 801496c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8014b68 <__ieee754_rem_pio2+0x230>
 8014970:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8014974:	dd19      	ble.n	80149aa <__ieee754_rem_pio2+0x72>
 8014976:	ee30 7b46 	vsub.f64	d7, d0, d6
 801497a:	429e      	cmp	r6, r3
 801497c:	d00e      	beq.n	801499c <__ieee754_rem_pio2+0x64>
 801497e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8014b70 <__ieee754_rem_pio2+0x238>
 8014982:	ee37 6b45 	vsub.f64	d6, d7, d5
 8014986:	ee37 7b46 	vsub.f64	d7, d7, d6
 801498a:	ed84 6b00 	vstr	d6, [r4]
 801498e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014992:	ed84 7b02 	vstr	d7, [r4, #8]
 8014996:	2001      	movs	r0, #1
 8014998:	b008      	add	sp, #32
 801499a:	bd70      	pop	{r4, r5, r6, pc}
 801499c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8014b78 <__ieee754_rem_pio2+0x240>
 80149a0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8014b80 <__ieee754_rem_pio2+0x248>
 80149a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80149a8:	e7eb      	b.n	8014982 <__ieee754_rem_pio2+0x4a>
 80149aa:	429e      	cmp	r6, r3
 80149ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 80149b0:	d00e      	beq.n	80149d0 <__ieee754_rem_pio2+0x98>
 80149b2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8014b70 <__ieee754_rem_pio2+0x238>
 80149b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80149ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80149be:	ed84 6b00 	vstr	d6, [r4]
 80149c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80149c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80149ce:	e7e3      	b.n	8014998 <__ieee754_rem_pio2+0x60>
 80149d0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8014b78 <__ieee754_rem_pio2+0x240>
 80149d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8014b80 <__ieee754_rem_pio2+0x248>
 80149d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80149dc:	e7eb      	b.n	80149b6 <__ieee754_rem_pio2+0x7e>
 80149de:	4b74      	ldr	r3, [pc, #464]	@ (8014bb0 <__ieee754_rem_pio2+0x278>)
 80149e0:	429e      	cmp	r6, r3
 80149e2:	d870      	bhi.n	8014ac6 <__ieee754_rem_pio2+0x18e>
 80149e4:	f000 f914 	bl	8014c10 <fabs>
 80149e8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80149ec:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8014b88 <__ieee754_rem_pio2+0x250>
 80149f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80149f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80149f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80149fc:	ee17 0a90 	vmov	r0, s15
 8014a00:	eeb1 4b45 	vneg.f64	d4, d5
 8014a04:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8014b68 <__ieee754_rem_pio2+0x230>
 8014a08:	eea5 0b47 	vfms.f64	d0, d5, d7
 8014a0c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8014b70 <__ieee754_rem_pio2+0x238>
 8014a10:	281f      	cmp	r0, #31
 8014a12:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014a16:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014a1a:	dc05      	bgt.n	8014a28 <__ieee754_rem_pio2+0xf0>
 8014a1c:	4b65      	ldr	r3, [pc, #404]	@ (8014bb4 <__ieee754_rem_pio2+0x27c>)
 8014a1e:	1e42      	subs	r2, r0, #1
 8014a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a24:	42b3      	cmp	r3, r6
 8014a26:	d109      	bne.n	8014a3c <__ieee754_rem_pio2+0x104>
 8014a28:	ee16 3a90 	vmov	r3, s13
 8014a2c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014a30:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8014a34:	2b10      	cmp	r3, #16
 8014a36:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014a3a:	dc02      	bgt.n	8014a42 <__ieee754_rem_pio2+0x10a>
 8014a3c:	ed84 6b00 	vstr	d6, [r4]
 8014a40:	e01a      	b.n	8014a78 <__ieee754_rem_pio2+0x140>
 8014a42:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8014b78 <__ieee754_rem_pio2+0x240>
 8014a46:	eeb0 6b40 	vmov.f64	d6, d0
 8014a4a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8014a4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8014a52:	eea4 7b03 	vfma.f64	d7, d4, d3
 8014a56:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8014b80 <__ieee754_rem_pio2+0x248>
 8014a5a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014a5e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8014a62:	ee13 3a90 	vmov	r3, s7
 8014a66:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014a6a:	1ad3      	subs	r3, r2, r3
 8014a6c:	2b31      	cmp	r3, #49	@ 0x31
 8014a6e:	dc17      	bgt.n	8014aa0 <__ieee754_rem_pio2+0x168>
 8014a70:	eeb0 0b46 	vmov.f64	d0, d6
 8014a74:	ed84 3b00 	vstr	d3, [r4]
 8014a78:	ed94 6b00 	vldr	d6, [r4]
 8014a7c:	2d00      	cmp	r5, #0
 8014a7e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014a82:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014a86:	ed84 0b02 	vstr	d0, [r4, #8]
 8014a8a:	da85      	bge.n	8014998 <__ieee754_rem_pio2+0x60>
 8014a8c:	eeb1 6b46 	vneg.f64	d6, d6
 8014a90:	eeb1 0b40 	vneg.f64	d0, d0
 8014a94:	ed84 6b00 	vstr	d6, [r4]
 8014a98:	ed84 0b02 	vstr	d0, [r4, #8]
 8014a9c:	4240      	negs	r0, r0
 8014a9e:	e77b      	b.n	8014998 <__ieee754_rem_pio2+0x60>
 8014aa0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8014b90 <__ieee754_rem_pio2+0x258>
 8014aa4:	eeb0 0b46 	vmov.f64	d0, d6
 8014aa8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8014aac:	ee36 6b40 	vsub.f64	d6, d6, d0
 8014ab0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8014ab4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8014b98 <__ieee754_rem_pio2+0x260>
 8014ab8:	eeb0 7b46 	vmov.f64	d7, d6
 8014abc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8014ac0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014ac4:	e7ba      	b.n	8014a3c <__ieee754_rem_pio2+0x104>
 8014ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8014bb8 <__ieee754_rem_pio2+0x280>)
 8014ac8:	429e      	cmp	r6, r3
 8014aca:	d906      	bls.n	8014ada <__ieee754_rem_pio2+0x1a2>
 8014acc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8014ad0:	ed80 7b02 	vstr	d7, [r0, #8]
 8014ad4:	ed80 7b00 	vstr	d7, [r0]
 8014ad8:	e740      	b.n	801495c <__ieee754_rem_pio2+0x24>
 8014ada:	ee10 3a10 	vmov	r3, s0
 8014ade:	1532      	asrs	r2, r6, #20
 8014ae0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8014aea:	ec41 0b17 	vmov	d7, r0, r1
 8014aee:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014af2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8014ba0 <__ieee754_rem_pio2+0x268>
 8014af6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014afa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014afe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014b02:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014b06:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014b0a:	a808      	add	r0, sp, #32
 8014b0c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014b10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014b14:	ed8d 6b04 	vstr	d6, [sp, #16]
 8014b18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014b1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014b20:	2103      	movs	r1, #3
 8014b22:	ed30 7b02 	vldmdb	r0!, {d7}
 8014b26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2e:	460b      	mov	r3, r1
 8014b30:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8014b34:	d0f5      	beq.n	8014b22 <__ieee754_rem_pio2+0x1ea>
 8014b36:	4921      	ldr	r1, [pc, #132]	@ (8014bbc <__ieee754_rem_pio2+0x284>)
 8014b38:	9101      	str	r1, [sp, #4]
 8014b3a:	2102      	movs	r1, #2
 8014b3c:	9100      	str	r1, [sp, #0]
 8014b3e:	a802      	add	r0, sp, #8
 8014b40:	4621      	mov	r1, r4
 8014b42:	f000 f8ed 	bl	8014d20 <__kernel_rem_pio2>
 8014b46:	2d00      	cmp	r5, #0
 8014b48:	f6bf af26 	bge.w	8014998 <__ieee754_rem_pio2+0x60>
 8014b4c:	ed94 7b00 	vldr	d7, [r4]
 8014b50:	eeb1 7b47 	vneg.f64	d7, d7
 8014b54:	ed84 7b00 	vstr	d7, [r4]
 8014b58:	ed94 7b02 	vldr	d7, [r4, #8]
 8014b5c:	eeb1 7b47 	vneg.f64	d7, d7
 8014b60:	ed84 7b02 	vstr	d7, [r4, #8]
 8014b64:	e79a      	b.n	8014a9c <__ieee754_rem_pio2+0x164>
 8014b66:	bf00      	nop
 8014b68:	54400000 	.word	0x54400000
 8014b6c:	3ff921fb 	.word	0x3ff921fb
 8014b70:	1a626331 	.word	0x1a626331
 8014b74:	3dd0b461 	.word	0x3dd0b461
 8014b78:	1a600000 	.word	0x1a600000
 8014b7c:	3dd0b461 	.word	0x3dd0b461
 8014b80:	2e037073 	.word	0x2e037073
 8014b84:	3ba3198a 	.word	0x3ba3198a
 8014b88:	6dc9c883 	.word	0x6dc9c883
 8014b8c:	3fe45f30 	.word	0x3fe45f30
 8014b90:	2e000000 	.word	0x2e000000
 8014b94:	3ba3198a 	.word	0x3ba3198a
 8014b98:	252049c1 	.word	0x252049c1
 8014b9c:	397b839a 	.word	0x397b839a
 8014ba0:	00000000 	.word	0x00000000
 8014ba4:	41700000 	.word	0x41700000
 8014ba8:	3fe921fb 	.word	0x3fe921fb
 8014bac:	4002d97b 	.word	0x4002d97b
 8014bb0:	413921fb 	.word	0x413921fb
 8014bb4:	080172a8 	.word	0x080172a8
 8014bb8:	7fefffff 	.word	0x7fefffff
 8014bbc:	08017328 	.word	0x08017328

08014bc0 <hypot>:
 8014bc0:	b508      	push	{r3, lr}
 8014bc2:	ed2d 8b06 	vpush	{d8-d10}
 8014bc6:	eeb0 ab40 	vmov.f64	d10, d0
 8014bca:	eeb0 9b41 	vmov.f64	d9, d1
 8014bce:	f000 fb23 	bl	8015218 <__ieee754_hypot>
 8014bd2:	eeb0 8b40 	vmov.f64	d8, d0
 8014bd6:	f000 f823 	bl	8014c20 <finite>
 8014bda:	b978      	cbnz	r0, 8014bfc <hypot+0x3c>
 8014bdc:	eeb0 0b4a 	vmov.f64	d0, d10
 8014be0:	f000 f81e 	bl	8014c20 <finite>
 8014be4:	b150      	cbz	r0, 8014bfc <hypot+0x3c>
 8014be6:	eeb0 0b49 	vmov.f64	d0, d9
 8014bea:	f000 f819 	bl	8014c20 <finite>
 8014bee:	b128      	cbz	r0, 8014bfc <hypot+0x3c>
 8014bf0:	f7fa fe24 	bl	800f83c <__errno>
 8014bf4:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 8014c08 <hypot+0x48>
 8014bf8:	2322      	movs	r3, #34	@ 0x22
 8014bfa:	6003      	str	r3, [r0, #0]
 8014bfc:	eeb0 0b48 	vmov.f64	d0, d8
 8014c00:	ecbd 8b06 	vpop	{d8-d10}
 8014c04:	bd08      	pop	{r3, pc}
 8014c06:	bf00      	nop
 8014c08:	00000000 	.word	0x00000000
 8014c0c:	7ff00000 	.word	0x7ff00000

08014c10 <fabs>:
 8014c10:	ec51 0b10 	vmov	r0, r1, d0
 8014c14:	4602      	mov	r2, r0
 8014c16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014c1a:	ec43 2b10 	vmov	d0, r2, r3
 8014c1e:	4770      	bx	lr

08014c20 <finite>:
 8014c20:	b082      	sub	sp, #8
 8014c22:	ed8d 0b00 	vstr	d0, [sp]
 8014c26:	9801      	ldr	r0, [sp, #4]
 8014c28:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8014c2c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8014c30:	0fc0      	lsrs	r0, r0, #31
 8014c32:	b002      	add	sp, #8
 8014c34:	4770      	bx	lr

08014c36 <with_errno>:
 8014c36:	b510      	push	{r4, lr}
 8014c38:	ed2d 8b02 	vpush	{d8}
 8014c3c:	eeb0 8b40 	vmov.f64	d8, d0
 8014c40:	4604      	mov	r4, r0
 8014c42:	f7fa fdfb 	bl	800f83c <__errno>
 8014c46:	eeb0 0b48 	vmov.f64	d0, d8
 8014c4a:	ecbd 8b02 	vpop	{d8}
 8014c4e:	6004      	str	r4, [r0, #0]
 8014c50:	bd10      	pop	{r4, pc}

08014c52 <xflow>:
 8014c52:	b082      	sub	sp, #8
 8014c54:	b158      	cbz	r0, 8014c6e <xflow+0x1c>
 8014c56:	eeb1 7b40 	vneg.f64	d7, d0
 8014c5a:	ed8d 7b00 	vstr	d7, [sp]
 8014c5e:	ed9d 7b00 	vldr	d7, [sp]
 8014c62:	2022      	movs	r0, #34	@ 0x22
 8014c64:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014c68:	b002      	add	sp, #8
 8014c6a:	f7ff bfe4 	b.w	8014c36 <with_errno>
 8014c6e:	eeb0 7b40 	vmov.f64	d7, d0
 8014c72:	e7f2      	b.n	8014c5a <xflow+0x8>
 8014c74:	0000      	movs	r0, r0
	...

08014c78 <__math_uflow>:
 8014c78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014c80 <__math_uflow+0x8>
 8014c7c:	f7ff bfe9 	b.w	8014c52 <xflow>
 8014c80:	00000000 	.word	0x00000000
 8014c84:	10000000 	.word	0x10000000

08014c88 <__math_oflow>:
 8014c88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014c90 <__math_oflow+0x8>
 8014c8c:	f7ff bfe1 	b.w	8014c52 <xflow>
 8014c90:	00000000 	.word	0x00000000
 8014c94:	70000000 	.word	0x70000000

08014c98 <__math_divzero>:
 8014c98:	b082      	sub	sp, #8
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8014ca0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8014ca4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8014ca8:	ed8d 7b00 	vstr	d7, [sp]
 8014cac:	ed9d 0b00 	vldr	d0, [sp]
 8014cb0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8014cc0 <__math_divzero+0x28>
 8014cb4:	2022      	movs	r0, #34	@ 0x22
 8014cb6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8014cba:	b002      	add	sp, #8
 8014cbc:	f7ff bfbb 	b.w	8014c36 <with_errno>
	...

08014cc8 <__math_invalid>:
 8014cc8:	eeb0 7b40 	vmov.f64	d7, d0
 8014ccc:	eeb4 7b47 	vcmp.f64	d7, d7
 8014cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8014cd8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8014cdc:	d602      	bvs.n	8014ce4 <__math_invalid+0x1c>
 8014cde:	2021      	movs	r0, #33	@ 0x21
 8014ce0:	f7ff bfa9 	b.w	8014c36 <with_errno>
 8014ce4:	4770      	bx	lr

08014ce6 <__math_check_uflow>:
 8014ce6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cee:	d102      	bne.n	8014cf6 <__math_check_uflow+0x10>
 8014cf0:	2022      	movs	r0, #34	@ 0x22
 8014cf2:	f7ff bfa0 	b.w	8014c36 <with_errno>
 8014cf6:	4770      	bx	lr

08014cf8 <__math_check_oflow>:
 8014cf8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8014d18 <__math_check_oflow+0x20>
 8014cfc:	eeb0 7bc0 	vabs.f64	d7, d0
 8014d00:	eeb4 7b46 	vcmp.f64	d7, d6
 8014d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d08:	dd02      	ble.n	8014d10 <__math_check_oflow+0x18>
 8014d0a:	2022      	movs	r0, #34	@ 0x22
 8014d0c:	f7ff bf93 	b.w	8014c36 <with_errno>
 8014d10:	4770      	bx	lr
 8014d12:	bf00      	nop
 8014d14:	f3af 8000 	nop.w
 8014d18:	ffffffff 	.word	0xffffffff
 8014d1c:	7fefffff 	.word	0x7fefffff

08014d20 <__kernel_rem_pio2>:
 8014d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d24:	ed2d 8b06 	vpush	{d8-d10}
 8014d28:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8014d2c:	469b      	mov	fp, r3
 8014d2e:	9001      	str	r0, [sp, #4]
 8014d30:	4bbb      	ldr	r3, [pc, #748]	@ (8015020 <__kernel_rem_pio2+0x300>)
 8014d32:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8014d34:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8014d38:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8014d3c:	f112 0f14 	cmn.w	r2, #20
 8014d40:	bfa8      	it	ge
 8014d42:	1ed3      	subge	r3, r2, #3
 8014d44:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8014d48:	bfb8      	it	lt
 8014d4a:	2300      	movlt	r3, #0
 8014d4c:	f06f 0517 	mvn.w	r5, #23
 8014d50:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8015008 <__kernel_rem_pio2+0x2e8>
 8014d54:	bfa4      	itt	ge
 8014d56:	2018      	movge	r0, #24
 8014d58:	fb93 f3f0 	sdivge	r3, r3, r0
 8014d5c:	fb03 5505 	mla	r5, r3, r5, r5
 8014d60:	eba3 040a 	sub.w	r4, r3, sl
 8014d64:	4415      	add	r5, r2
 8014d66:	460f      	mov	r7, r1
 8014d68:	eb09 060a 	add.w	r6, r9, sl
 8014d6c:	a81a      	add	r0, sp, #104	@ 0x68
 8014d6e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8014d72:	2200      	movs	r2, #0
 8014d74:	42b2      	cmp	r2, r6
 8014d76:	dd0e      	ble.n	8014d96 <__kernel_rem_pio2+0x76>
 8014d78:	aa1a      	add	r2, sp, #104	@ 0x68
 8014d7a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8014d7e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8014d82:	2600      	movs	r6, #0
 8014d84:	454e      	cmp	r6, r9
 8014d86:	dc25      	bgt.n	8014dd4 <__kernel_rem_pio2+0xb4>
 8014d88:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8015008 <__kernel_rem_pio2+0x2e8>
 8014d8c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8014d90:	4614      	mov	r4, r2
 8014d92:	2000      	movs	r0, #0
 8014d94:	e015      	b.n	8014dc2 <__kernel_rem_pio2+0xa2>
 8014d96:	42d4      	cmn	r4, r2
 8014d98:	d409      	bmi.n	8014dae <__kernel_rem_pio2+0x8e>
 8014d9a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8014d9e:	ee07 1a90 	vmov	s15, r1
 8014da2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014da6:	eca0 7b02 	vstmia	r0!, {d7}
 8014daa:	3201      	adds	r2, #1
 8014dac:	e7e2      	b.n	8014d74 <__kernel_rem_pio2+0x54>
 8014dae:	eeb0 7b46 	vmov.f64	d7, d6
 8014db2:	e7f8      	b.n	8014da6 <__kernel_rem_pio2+0x86>
 8014db4:	ecbc 5b02 	vldmia	ip!, {d5}
 8014db8:	ed94 6b00 	vldr	d6, [r4]
 8014dbc:	3001      	adds	r0, #1
 8014dbe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014dc2:	4550      	cmp	r0, sl
 8014dc4:	f1a4 0408 	sub.w	r4, r4, #8
 8014dc8:	ddf4      	ble.n	8014db4 <__kernel_rem_pio2+0x94>
 8014dca:	ecae 7b02 	vstmia	lr!, {d7}
 8014dce:	3601      	adds	r6, #1
 8014dd0:	3208      	adds	r2, #8
 8014dd2:	e7d7      	b.n	8014d84 <__kernel_rem_pio2+0x64>
 8014dd4:	aa06      	add	r2, sp, #24
 8014dd6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8015010 <__kernel_rem_pio2+0x2f0>
 8014dda:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8015018 <__kernel_rem_pio2+0x2f8>
 8014dde:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8014de2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8014de6:	9203      	str	r2, [sp, #12]
 8014de8:	9302      	str	r3, [sp, #8]
 8014dea:	464c      	mov	r4, r9
 8014dec:	00e3      	lsls	r3, r4, #3
 8014dee:	9304      	str	r3, [sp, #16]
 8014df0:	ab92      	add	r3, sp, #584	@ 0x248
 8014df2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014df6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8014dfa:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8014dfc:	ab06      	add	r3, sp, #24
 8014dfe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014e02:	461e      	mov	r6, r3
 8014e04:	4620      	mov	r0, r4
 8014e06:	2800      	cmp	r0, #0
 8014e08:	f1a2 0208 	sub.w	r2, r2, #8
 8014e0c:	dc4a      	bgt.n	8014ea4 <__kernel_rem_pio2+0x184>
 8014e0e:	4628      	mov	r0, r5
 8014e10:	9305      	str	r3, [sp, #20]
 8014e12:	f000 fab5 	bl	8015380 <scalbn>
 8014e16:	eeb0 8b40 	vmov.f64	d8, d0
 8014e1a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8014e1e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014e22:	f7ff fc51 	bl	80146c8 <floor>
 8014e26:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8014e2a:	eea0 8b47 	vfms.f64	d8, d0, d7
 8014e2e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014e32:	2d00      	cmp	r5, #0
 8014e34:	ee17 8a90 	vmov	r8, s15
 8014e38:	9b05      	ldr	r3, [sp, #20]
 8014e3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014e3e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8014e42:	dd41      	ble.n	8014ec8 <__kernel_rem_pio2+0x1a8>
 8014e44:	1e60      	subs	r0, r4, #1
 8014e46:	aa06      	add	r2, sp, #24
 8014e48:	f1c5 0c18 	rsb	ip, r5, #24
 8014e4c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8014e50:	fa46 f20c 	asr.w	r2, r6, ip
 8014e54:	4490      	add	r8, r2
 8014e56:	fa02 f20c 	lsl.w	r2, r2, ip
 8014e5a:	1ab6      	subs	r6, r6, r2
 8014e5c:	aa06      	add	r2, sp, #24
 8014e5e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8014e62:	f1c5 0217 	rsb	r2, r5, #23
 8014e66:	4116      	asrs	r6, r2
 8014e68:	2e00      	cmp	r6, #0
 8014e6a:	dd3c      	ble.n	8014ee6 <__kernel_rem_pio2+0x1c6>
 8014e6c:	f04f 0c00 	mov.w	ip, #0
 8014e70:	f108 0801 	add.w	r8, r8, #1
 8014e74:	4660      	mov	r0, ip
 8014e76:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8014e7a:	4564      	cmp	r4, ip
 8014e7c:	dc66      	bgt.n	8014f4c <__kernel_rem_pio2+0x22c>
 8014e7e:	2d00      	cmp	r5, #0
 8014e80:	dd03      	ble.n	8014e8a <__kernel_rem_pio2+0x16a>
 8014e82:	2d01      	cmp	r5, #1
 8014e84:	d072      	beq.n	8014f6c <__kernel_rem_pio2+0x24c>
 8014e86:	2d02      	cmp	r5, #2
 8014e88:	d07a      	beq.n	8014f80 <__kernel_rem_pio2+0x260>
 8014e8a:	2e02      	cmp	r6, #2
 8014e8c:	d12b      	bne.n	8014ee6 <__kernel_rem_pio2+0x1c6>
 8014e8e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014e92:	ee30 8b48 	vsub.f64	d8, d0, d8
 8014e96:	b330      	cbz	r0, 8014ee6 <__kernel_rem_pio2+0x1c6>
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f000 fa71 	bl	8015380 <scalbn>
 8014e9e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014ea2:	e020      	b.n	8014ee6 <__kernel_rem_pio2+0x1c6>
 8014ea4:	ee20 7b09 	vmul.f64	d7, d0, d9
 8014ea8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014eac:	3801      	subs	r0, #1
 8014eae:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8014eb2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014eb6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014eba:	eca6 0a01 	vstmia	r6!, {s0}
 8014ebe:	ed92 0b00 	vldr	d0, [r2]
 8014ec2:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014ec6:	e79e      	b.n	8014e06 <__kernel_rem_pio2+0xe6>
 8014ec8:	d105      	bne.n	8014ed6 <__kernel_rem_pio2+0x1b6>
 8014eca:	1e62      	subs	r2, r4, #1
 8014ecc:	a906      	add	r1, sp, #24
 8014ece:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8014ed2:	15f6      	asrs	r6, r6, #23
 8014ed4:	e7c8      	b.n	8014e68 <__kernel_rem_pio2+0x148>
 8014ed6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8014eda:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ee2:	da31      	bge.n	8014f48 <__kernel_rem_pio2+0x228>
 8014ee4:	2600      	movs	r6, #0
 8014ee6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eee:	f040 809b 	bne.w	8015028 <__kernel_rem_pio2+0x308>
 8014ef2:	1e62      	subs	r2, r4, #1
 8014ef4:	2000      	movs	r0, #0
 8014ef6:	454a      	cmp	r2, r9
 8014ef8:	da49      	bge.n	8014f8e <__kernel_rem_pio2+0x26e>
 8014efa:	2800      	cmp	r0, #0
 8014efc:	d062      	beq.n	8014fc4 <__kernel_rem_pio2+0x2a4>
 8014efe:	3c01      	subs	r4, #1
 8014f00:	ab06      	add	r3, sp, #24
 8014f02:	3d18      	subs	r5, #24
 8014f04:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d0f8      	beq.n	8014efe <__kernel_rem_pio2+0x1de>
 8014f0c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014f10:	4628      	mov	r0, r5
 8014f12:	f000 fa35 	bl	8015380 <scalbn>
 8014f16:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8015010 <__kernel_rem_pio2+0x2f0>
 8014f1a:	1c62      	adds	r2, r4, #1
 8014f1c:	a96a      	add	r1, sp, #424	@ 0x1a8
 8014f1e:	00d3      	lsls	r3, r2, #3
 8014f20:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014f24:	4622      	mov	r2, r4
 8014f26:	2a00      	cmp	r2, #0
 8014f28:	f280 80a8 	bge.w	801507c <__kernel_rem_pio2+0x35c>
 8014f2c:	4622      	mov	r2, r4
 8014f2e:	2a00      	cmp	r2, #0
 8014f30:	f2c0 80c6 	blt.w	80150c0 <__kernel_rem_pio2+0x3a0>
 8014f34:	a96a      	add	r1, sp, #424	@ 0x1a8
 8014f36:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8014f3a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8015008 <__kernel_rem_pio2+0x2e8>
 8014f3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8015024 <__kernel_rem_pio2+0x304>
 8014f42:	2000      	movs	r0, #0
 8014f44:	1aa1      	subs	r1, r4, r2
 8014f46:	e0b0      	b.n	80150aa <__kernel_rem_pio2+0x38a>
 8014f48:	2602      	movs	r6, #2
 8014f4a:	e78f      	b.n	8014e6c <__kernel_rem_pio2+0x14c>
 8014f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f50:	b948      	cbnz	r0, 8014f66 <__kernel_rem_pio2+0x246>
 8014f52:	b122      	cbz	r2, 8014f5e <__kernel_rem_pio2+0x23e>
 8014f54:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8014f58:	f843 2c04 	str.w	r2, [r3, #-4]
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	f10c 0c01 	add.w	ip, ip, #1
 8014f62:	4610      	mov	r0, r2
 8014f64:	e789      	b.n	8014e7a <__kernel_rem_pio2+0x15a>
 8014f66:	ebae 0202 	sub.w	r2, lr, r2
 8014f6a:	e7f5      	b.n	8014f58 <__kernel_rem_pio2+0x238>
 8014f6c:	1e62      	subs	r2, r4, #1
 8014f6e:	ab06      	add	r3, sp, #24
 8014f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014f78:	a906      	add	r1, sp, #24
 8014f7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014f7e:	e784      	b.n	8014e8a <__kernel_rem_pio2+0x16a>
 8014f80:	1e62      	subs	r2, r4, #1
 8014f82:	ab06      	add	r3, sp, #24
 8014f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014f8c:	e7f4      	b.n	8014f78 <__kernel_rem_pio2+0x258>
 8014f8e:	ab06      	add	r3, sp, #24
 8014f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f94:	3a01      	subs	r2, #1
 8014f96:	4318      	orrs	r0, r3
 8014f98:	e7ad      	b.n	8014ef6 <__kernel_rem_pio2+0x1d6>
 8014f9a:	3301      	adds	r3, #1
 8014f9c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d0fa      	beq.n	8014f9a <__kernel_rem_pio2+0x27a>
 8014fa4:	9a04      	ldr	r2, [sp, #16]
 8014fa6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8014faa:	446a      	add	r2, sp
 8014fac:	eb04 000b 	add.w	r0, r4, fp
 8014fb0:	a91a      	add	r1, sp, #104	@ 0x68
 8014fb2:	1c66      	adds	r6, r4, #1
 8014fb4:	3a98      	subs	r2, #152	@ 0x98
 8014fb6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8014fba:	4423      	add	r3, r4
 8014fbc:	42b3      	cmp	r3, r6
 8014fbe:	da04      	bge.n	8014fca <__kernel_rem_pio2+0x2aa>
 8014fc0:	461c      	mov	r4, r3
 8014fc2:	e713      	b.n	8014dec <__kernel_rem_pio2+0xcc>
 8014fc4:	9a03      	ldr	r2, [sp, #12]
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	e7e8      	b.n	8014f9c <__kernel_rem_pio2+0x27c>
 8014fca:	9902      	ldr	r1, [sp, #8]
 8014fcc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8014fd0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8014fd4:	9104      	str	r1, [sp, #16]
 8014fd6:	ee07 1a90 	vmov	s15, r1
 8014fda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014fde:	2400      	movs	r4, #0
 8014fe0:	eca0 7b02 	vstmia	r0!, {d7}
 8014fe4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015008 <__kernel_rem_pio2+0x2e8>
 8014fe8:	4686      	mov	lr, r0
 8014fea:	4554      	cmp	r4, sl
 8014fec:	dd03      	ble.n	8014ff6 <__kernel_rem_pio2+0x2d6>
 8014fee:	eca2 7b02 	vstmia	r2!, {d7}
 8014ff2:	3601      	adds	r6, #1
 8014ff4:	e7e2      	b.n	8014fbc <__kernel_rem_pio2+0x29c>
 8014ff6:	ecbc 5b02 	vldmia	ip!, {d5}
 8014ffa:	ed3e 6b02 	vldmdb	lr!, {d6}
 8014ffe:	3401      	adds	r4, #1
 8015000:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015004:	e7f1      	b.n	8014fea <__kernel_rem_pio2+0x2ca>
 8015006:	bf00      	nop
	...
 8015014:	3e700000 	.word	0x3e700000
 8015018:	00000000 	.word	0x00000000
 801501c:	41700000 	.word	0x41700000
 8015020:	08017ce0 	.word	0x08017ce0
 8015024:	08017ca0 	.word	0x08017ca0
 8015028:	4268      	negs	r0, r5
 801502a:	eeb0 0b48 	vmov.f64	d0, d8
 801502e:	f000 f9a7 	bl	8015380 <scalbn>
 8015032:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8015200 <__kernel_rem_pio2+0x4e0>
 8015036:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503e:	db17      	blt.n	8015070 <__kernel_rem_pio2+0x350>
 8015040:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8015208 <__kernel_rem_pio2+0x4e8>
 8015044:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015048:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801504c:	aa06      	add	r2, sp, #24
 801504e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8015052:	eea5 0b46 	vfms.f64	d0, d5, d6
 8015056:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801505a:	3518      	adds	r5, #24
 801505c:	ee10 3a10 	vmov	r3, s0
 8015060:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015064:	ee17 3a10 	vmov	r3, s14
 8015068:	3401      	adds	r4, #1
 801506a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801506e:	e74d      	b.n	8014f0c <__kernel_rem_pio2+0x1ec>
 8015070:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015074:	aa06      	add	r2, sp, #24
 8015076:	ee10 3a10 	vmov	r3, s0
 801507a:	e7f6      	b.n	801506a <__kernel_rem_pio2+0x34a>
 801507c:	a806      	add	r0, sp, #24
 801507e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8015082:	9001      	str	r0, [sp, #4]
 8015084:	ee07 0a90 	vmov	s15, r0
 8015088:	3a01      	subs	r2, #1
 801508a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801508e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8015092:	ee20 0b06 	vmul.f64	d0, d0, d6
 8015096:	ed21 7b02 	vstmdb	r1!, {d7}
 801509a:	e744      	b.n	8014f26 <__kernel_rem_pio2+0x206>
 801509c:	ecbc 5b02 	vldmia	ip!, {d5}
 80150a0:	ecb5 6b02 	vldmia	r5!, {d6}
 80150a4:	3001      	adds	r0, #1
 80150a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80150aa:	4548      	cmp	r0, r9
 80150ac:	dc01      	bgt.n	80150b2 <__kernel_rem_pio2+0x392>
 80150ae:	4281      	cmp	r1, r0
 80150b0:	daf4      	bge.n	801509c <__kernel_rem_pio2+0x37c>
 80150b2:	a842      	add	r0, sp, #264	@ 0x108
 80150b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80150b8:	ed81 7b00 	vstr	d7, [r1]
 80150bc:	3a01      	subs	r2, #1
 80150be:	e736      	b.n	8014f2e <__kernel_rem_pio2+0x20e>
 80150c0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80150c2:	2a02      	cmp	r2, #2
 80150c4:	dc0a      	bgt.n	80150dc <__kernel_rem_pio2+0x3bc>
 80150c6:	2a00      	cmp	r2, #0
 80150c8:	dc2d      	bgt.n	8015126 <__kernel_rem_pio2+0x406>
 80150ca:	d046      	beq.n	801515a <__kernel_rem_pio2+0x43a>
 80150cc:	f008 0007 	and.w	r0, r8, #7
 80150d0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80150d4:	ecbd 8b06 	vpop	{d8-d10}
 80150d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150dc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80150de:	2a03      	cmp	r2, #3
 80150e0:	d1f4      	bne.n	80150cc <__kernel_rem_pio2+0x3ac>
 80150e2:	a942      	add	r1, sp, #264	@ 0x108
 80150e4:	f1a3 0208 	sub.w	r2, r3, #8
 80150e8:	440a      	add	r2, r1
 80150ea:	4611      	mov	r1, r2
 80150ec:	4620      	mov	r0, r4
 80150ee:	2800      	cmp	r0, #0
 80150f0:	f1a1 0108 	sub.w	r1, r1, #8
 80150f4:	dc52      	bgt.n	801519c <__kernel_rem_pio2+0x47c>
 80150f6:	4621      	mov	r1, r4
 80150f8:	2901      	cmp	r1, #1
 80150fa:	f1a2 0208 	sub.w	r2, r2, #8
 80150fe:	dc5d      	bgt.n	80151bc <__kernel_rem_pio2+0x49c>
 8015100:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8015210 <__kernel_rem_pio2+0x4f0>
 8015104:	aa42      	add	r2, sp, #264	@ 0x108
 8015106:	4413      	add	r3, r2
 8015108:	2c01      	cmp	r4, #1
 801510a:	dc67      	bgt.n	80151dc <__kernel_rem_pio2+0x4bc>
 801510c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8015110:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8015114:	2e00      	cmp	r6, #0
 8015116:	d167      	bne.n	80151e8 <__kernel_rem_pio2+0x4c8>
 8015118:	ed87 5b00 	vstr	d5, [r7]
 801511c:	ed87 6b02 	vstr	d6, [r7, #8]
 8015120:	ed87 7b04 	vstr	d7, [r7, #16]
 8015124:	e7d2      	b.n	80150cc <__kernel_rem_pio2+0x3ac>
 8015126:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8015210 <__kernel_rem_pio2+0x4f0>
 801512a:	aa42      	add	r2, sp, #264	@ 0x108
 801512c:	4413      	add	r3, r2
 801512e:	4622      	mov	r2, r4
 8015130:	2a00      	cmp	r2, #0
 8015132:	da24      	bge.n	801517e <__kernel_rem_pio2+0x45e>
 8015134:	b34e      	cbz	r6, 801518a <__kernel_rem_pio2+0x46a>
 8015136:	eeb1 7b46 	vneg.f64	d7, d6
 801513a:	ed87 7b00 	vstr	d7, [r7]
 801513e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8015142:	aa44      	add	r2, sp, #272	@ 0x110
 8015144:	2301      	movs	r3, #1
 8015146:	ee37 7b46 	vsub.f64	d7, d7, d6
 801514a:	429c      	cmp	r4, r3
 801514c:	da20      	bge.n	8015190 <__kernel_rem_pio2+0x470>
 801514e:	b10e      	cbz	r6, 8015154 <__kernel_rem_pio2+0x434>
 8015150:	eeb1 7b47 	vneg.f64	d7, d7
 8015154:	ed87 7b02 	vstr	d7, [r7, #8]
 8015158:	e7b8      	b.n	80150cc <__kernel_rem_pio2+0x3ac>
 801515a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8015210 <__kernel_rem_pio2+0x4f0>
 801515e:	aa42      	add	r2, sp, #264	@ 0x108
 8015160:	4413      	add	r3, r2
 8015162:	2c00      	cmp	r4, #0
 8015164:	da05      	bge.n	8015172 <__kernel_rem_pio2+0x452>
 8015166:	b10e      	cbz	r6, 801516c <__kernel_rem_pio2+0x44c>
 8015168:	eeb1 7b47 	vneg.f64	d7, d7
 801516c:	ed87 7b00 	vstr	d7, [r7]
 8015170:	e7ac      	b.n	80150cc <__kernel_rem_pio2+0x3ac>
 8015172:	ed33 6b02 	vldmdb	r3!, {d6}
 8015176:	3c01      	subs	r4, #1
 8015178:	ee37 7b06 	vadd.f64	d7, d7, d6
 801517c:	e7f1      	b.n	8015162 <__kernel_rem_pio2+0x442>
 801517e:	ed33 7b02 	vldmdb	r3!, {d7}
 8015182:	3a01      	subs	r2, #1
 8015184:	ee36 6b07 	vadd.f64	d6, d6, d7
 8015188:	e7d2      	b.n	8015130 <__kernel_rem_pio2+0x410>
 801518a:	eeb0 7b46 	vmov.f64	d7, d6
 801518e:	e7d4      	b.n	801513a <__kernel_rem_pio2+0x41a>
 8015190:	ecb2 6b02 	vldmia	r2!, {d6}
 8015194:	3301      	adds	r3, #1
 8015196:	ee37 7b06 	vadd.f64	d7, d7, d6
 801519a:	e7d6      	b.n	801514a <__kernel_rem_pio2+0x42a>
 801519c:	ed91 7b00 	vldr	d7, [r1]
 80151a0:	ed91 5b02 	vldr	d5, [r1, #8]
 80151a4:	3801      	subs	r0, #1
 80151a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80151aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80151ae:	ed81 6b00 	vstr	d6, [r1]
 80151b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80151b6:	ed81 7b02 	vstr	d7, [r1, #8]
 80151ba:	e798      	b.n	80150ee <__kernel_rem_pio2+0x3ce>
 80151bc:	ed92 7b00 	vldr	d7, [r2]
 80151c0:	ed92 5b02 	vldr	d5, [r2, #8]
 80151c4:	3901      	subs	r1, #1
 80151c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80151ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80151ce:	ed82 6b00 	vstr	d6, [r2]
 80151d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80151d6:	ed82 7b02 	vstr	d7, [r2, #8]
 80151da:	e78d      	b.n	80150f8 <__kernel_rem_pio2+0x3d8>
 80151dc:	ed33 6b02 	vldmdb	r3!, {d6}
 80151e0:	3c01      	subs	r4, #1
 80151e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80151e6:	e78f      	b.n	8015108 <__kernel_rem_pio2+0x3e8>
 80151e8:	eeb1 5b45 	vneg.f64	d5, d5
 80151ec:	eeb1 6b46 	vneg.f64	d6, d6
 80151f0:	ed87 5b00 	vstr	d5, [r7]
 80151f4:	eeb1 7b47 	vneg.f64	d7, d7
 80151f8:	ed87 6b02 	vstr	d6, [r7, #8]
 80151fc:	e790      	b.n	8015120 <__kernel_rem_pio2+0x400>
 80151fe:	bf00      	nop
 8015200:	00000000 	.word	0x00000000
 8015204:	41700000 	.word	0x41700000
 8015208:	00000000 	.word	0x00000000
 801520c:	3e700000 	.word	0x3e700000
	...

08015218 <__ieee754_hypot>:
 8015218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801521a:	ec51 0b10 	vmov	r0, r1, d0
 801521e:	ec53 2b11 	vmov	r2, r3, d1
 8015222:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8015226:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801522a:	42a5      	cmp	r5, r4
 801522c:	da05      	bge.n	801523a <__ieee754_hypot+0x22>
 801522e:	462e      	mov	r6, r5
 8015230:	4625      	mov	r5, r4
 8015232:	4634      	mov	r4, r6
 8015234:	4606      	mov	r6, r0
 8015236:	4610      	mov	r0, r2
 8015238:	4632      	mov	r2, r6
 801523a:	4623      	mov	r3, r4
 801523c:	ec43 2b14 	vmov	d4, r2, r3
 8015240:	1b2b      	subs	r3, r5, r4
 8015242:	4629      	mov	r1, r5
 8015244:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8015248:	ec41 0b10 	vmov	d0, r0, r1
 801524c:	dd02      	ble.n	8015254 <__ieee754_hypot+0x3c>
 801524e:	ee30 0b04 	vadd.f64	d0, d0, d4
 8015252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015254:	4b46      	ldr	r3, [pc, #280]	@ (8015370 <__ieee754_hypot+0x158>)
 8015256:	429d      	cmp	r5, r3
 8015258:	dd58      	ble.n	801530c <__ieee754_hypot+0xf4>
 801525a:	4b46      	ldr	r3, [pc, #280]	@ (8015374 <__ieee754_hypot+0x15c>)
 801525c:	429d      	cmp	r5, r3
 801525e:	dd0f      	ble.n	8015280 <__ieee754_hypot+0x68>
 8015260:	ee14 3a10 	vmov	r3, s8
 8015264:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8015268:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801526c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8015270:	4305      	orrs	r5, r0
 8015272:	bf18      	it	ne
 8015274:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8015278:	431c      	orrs	r4, r3
 801527a:	fe04 0b00 	vseleq.f64	d0, d4, d0
 801527e:	e7e8      	b.n	8015252 <__ieee754_hypot+0x3a>
 8015280:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8015284:	4602      	mov	r2, r0
 8015286:	462b      	mov	r3, r5
 8015288:	ec43 2b10 	vmov	d0, r2, r3
 801528c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8015290:	ec53 2b14 	vmov	r2, r3, d4
 8015294:	4623      	mov	r3, r4
 8015296:	ec43 2b14 	vmov	d4, r2, r3
 801529a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 801529e:	4b36      	ldr	r3, [pc, #216]	@ (8015378 <__ieee754_hypot+0x160>)
 80152a0:	429c      	cmp	r4, r3
 80152a2:	dc0e      	bgt.n	80152c2 <__ieee754_hypot+0xaa>
 80152a4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80152a8:	da32      	bge.n	8015310 <__ieee754_hypot+0xf8>
 80152aa:	ee14 3a10 	vmov	r3, s8
 80152ae:	4323      	orrs	r3, r4
 80152b0:	d0cf      	beq.n	8015252 <__ieee754_hypot+0x3a>
 80152b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8015368 <__ieee754_hypot+0x150>
 80152b6:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 80152ba:	ee24 4b07 	vmul.f64	d4, d4, d7
 80152be:	ee20 0b07 	vmul.f64	d0, d0, d7
 80152c2:	ee30 5b44 	vsub.f64	d5, d0, d4
 80152c6:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80152ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ce:	f04f 0200 	mov.w	r2, #0
 80152d2:	d52e      	bpl.n	8015332 <__ieee754_hypot+0x11a>
 80152d4:	462b      	mov	r3, r5
 80152d6:	ec43 2b17 	vmov	d7, r2, r3
 80152da:	ee30 6b07 	vadd.f64	d6, d0, d7
 80152de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80152e2:	ee26 0b00 	vmul.f64	d0, d6, d0
 80152e6:	eea4 0b04 	vfma.f64	d0, d4, d4
 80152ea:	eea7 0b07 	vfma.f64	d0, d7, d7
 80152ee:	f7ff f9e6 	bl	80146be <__ieee754_sqrt>
 80152f2:	2e00      	cmp	r6, #0
 80152f4:	d0ad      	beq.n	8015252 <__ieee754_hypot+0x3a>
 80152f6:	0533      	lsls	r3, r6, #20
 80152f8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80152fc:	2000      	movs	r0, #0
 80152fe:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015302:	ec41 0b17 	vmov	d7, r0, r1
 8015306:	ee20 0b07 	vmul.f64	d0, d0, d7
 801530a:	e7a2      	b.n	8015252 <__ieee754_hypot+0x3a>
 801530c:	2600      	movs	r6, #0
 801530e:	e7c6      	b.n	801529e <__ieee754_hypot+0x86>
 8015310:	ec53 2b10 	vmov	r2, r3, d0
 8015314:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8015318:	462b      	mov	r3, r5
 801531a:	ec43 2b10 	vmov	d0, r2, r3
 801531e:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8015322:	ec53 2b14 	vmov	r2, r3, d4
 8015326:	4623      	mov	r3, r4
 8015328:	ec43 2b14 	vmov	d4, r2, r3
 801532c:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8015330:	e7c7      	b.n	80152c2 <__ieee754_hypot+0xaa>
 8015332:	4623      	mov	r3, r4
 8015334:	ec43 2b16 	vmov	d6, r2, r3
 8015338:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 801533c:	2200      	movs	r2, #0
 801533e:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8015342:	ec43 2b17 	vmov	d7, r2, r3
 8015346:	ee34 3b46 	vsub.f64	d3, d4, d6
 801534a:	eeb0 2b47 	vmov.f64	d2, d7
 801534e:	ee90 2b01 	vfnms.f64	d2, d0, d1
 8015352:	ee24 0b02 	vmul.f64	d0, d4, d2
 8015356:	eea3 0b07 	vfma.f64	d0, d3, d7
 801535a:	eea5 0b05 	vfma.f64	d0, d5, d5
 801535e:	eea6 0b07 	vfma.f64	d0, d6, d7
 8015362:	e7c4      	b.n	80152ee <__ieee754_hypot+0xd6>
 8015364:	f3af 8000 	nop.w
 8015368:	00000000 	.word	0x00000000
 801536c:	7fd00000 	.word	0x7fd00000
 8015370:	5f300000 	.word	0x5f300000
 8015374:	7fefffff 	.word	0x7fefffff
 8015378:	20afffff 	.word	0x20afffff
 801537c:	00000000 	.word	0x00000000

08015380 <scalbn>:
 8015380:	ee10 1a90 	vmov	r1, s1
 8015384:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015388:	b98b      	cbnz	r3, 80153ae <scalbn+0x2e>
 801538a:	ee10 3a10 	vmov	r3, s0
 801538e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015392:	4319      	orrs	r1, r3
 8015394:	d00a      	beq.n	80153ac <scalbn+0x2c>
 8015396:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015448 <scalbn+0xc8>
 801539a:	4b37      	ldr	r3, [pc, #220]	@ (8015478 <scalbn+0xf8>)
 801539c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80153a0:	4298      	cmp	r0, r3
 80153a2:	da0b      	bge.n	80153bc <scalbn+0x3c>
 80153a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015450 <scalbn+0xd0>
 80153a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80153ac:	4770      	bx	lr
 80153ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80153b2:	4293      	cmp	r3, r2
 80153b4:	d107      	bne.n	80153c6 <scalbn+0x46>
 80153b6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80153ba:	4770      	bx	lr
 80153bc:	ee10 1a90 	vmov	r1, s1
 80153c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80153c4:	3b36      	subs	r3, #54	@ 0x36
 80153c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80153ca:	4290      	cmp	r0, r2
 80153cc:	dd0d      	ble.n	80153ea <scalbn+0x6a>
 80153ce:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8015458 <scalbn+0xd8>
 80153d2:	ee10 3a90 	vmov	r3, s1
 80153d6:	eeb0 6b47 	vmov.f64	d6, d7
 80153da:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8015460 <scalbn+0xe0>
 80153de:	2b00      	cmp	r3, #0
 80153e0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80153e4:	ee27 0b06 	vmul.f64	d0, d7, d6
 80153e8:	4770      	bx	lr
 80153ea:	4418      	add	r0, r3
 80153ec:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80153f0:	4298      	cmp	r0, r3
 80153f2:	dcec      	bgt.n	80153ce <scalbn+0x4e>
 80153f4:	2800      	cmp	r0, #0
 80153f6:	dd0a      	ble.n	801540e <scalbn+0x8e>
 80153f8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80153fc:	ec53 2b10 	vmov	r2, r3, d0
 8015400:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8015404:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8015408:	ec43 2b10 	vmov	d0, r2, r3
 801540c:	4770      	bx	lr
 801540e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8015412:	da09      	bge.n	8015428 <scalbn+0xa8>
 8015414:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8015450 <scalbn+0xd0>
 8015418:	ee10 3a90 	vmov	r3, s1
 801541c:	eeb0 6b47 	vmov.f64	d6, d7
 8015420:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8015468 <scalbn+0xe8>
 8015424:	2b00      	cmp	r3, #0
 8015426:	e7db      	b.n	80153e0 <scalbn+0x60>
 8015428:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801542c:	ec53 2b10 	vmov	r2, r3, d0
 8015430:	3036      	adds	r0, #54	@ 0x36
 8015432:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8015436:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801543a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8015470 <scalbn+0xf0>
 801543e:	ec43 2b10 	vmov	d0, r2, r3
 8015442:	e7b1      	b.n	80153a8 <scalbn+0x28>
 8015444:	f3af 8000 	nop.w
 8015448:	00000000 	.word	0x00000000
 801544c:	43500000 	.word	0x43500000
 8015450:	c2f8f359 	.word	0xc2f8f359
 8015454:	01a56e1f 	.word	0x01a56e1f
 8015458:	8800759c 	.word	0x8800759c
 801545c:	7e37e43c 	.word	0x7e37e43c
 8015460:	8800759c 	.word	0x8800759c
 8015464:	fe37e43c 	.word	0xfe37e43c
 8015468:	c2f8f359 	.word	0xc2f8f359
 801546c:	81a56e1f 	.word	0x81a56e1f
 8015470:	00000000 	.word	0x00000000
 8015474:	3c900000 	.word	0x3c900000
 8015478:	ffff3cb0 	.word	0xffff3cb0

0801547c <_init>:
 801547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801547e:	bf00      	nop
 8015480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015482:	bc08      	pop	{r3}
 8015484:	469e      	mov	lr, r3
 8015486:	4770      	bx	lr

08015488 <_fini>:
 8015488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801548a:	bf00      	nop
 801548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801548e:	bc08      	pop	{r3}
 8015490:	469e      	mov	lr, r3
 8015492:	4770      	bx	lr
