
2024G2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cc4  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002478  08011f60  08011f60  00012f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080143d8  080143d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080143e0  080143e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080143e8  080143e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000164  24000000  080143ec  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00000800  24000180  08014550  00016180  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ARM.__at_0x30080000 00002000  24000980  08014d50  00016980  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b21c  24002980  08016d50  00018980  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  2401db9c  08016d50  00018b9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00018980  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fb6  00000000  00000000  000189ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000427a  00000000  00000000  0003c964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00040be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149f  00000000  00000000  00042640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c353  00000000  00000000  00043adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000257c0  00000000  00000000  0007fe32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179bc7  00000000  00000000  000a55f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021f1b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a7c  00000000  00000000  0021f1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00226c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24002980 	.word	0x24002980
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011f44 	.word	0x08011f44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24002984 	.word	0x24002984
 80002d4:	08011f44 	.word	0x08011f44

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 bac6 	b.w	800087c <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f962 	bl	80005c0 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__muldc3>:
 8000308:	ee20 5b02 	vmul.f64	d5, d0, d2
 800030c:	ee21 4b03 	vmul.f64	d4, d1, d3
 8000310:	ee35 7b44 	vsub.f64	d7, d5, d4
 8000314:	eeb4 7b47 	vcmp.f64	d7, d7
 8000318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031c:	ed2d 8b0a 	vpush	{d8-d12}
 8000320:	ee20 9b03 	vmul.f64	d9, d0, d3
 8000324:	ee22 8b01 	vmul.f64	d8, d2, d1
 8000328:	ee39 6b08 	vadd.f64	d6, d9, d8
 800032c:	d606      	bvs.n	800033c <__muldc3+0x34>
 800032e:	eeb0 0b47 	vmov.f64	d0, d7
 8000332:	eeb0 1b46 	vmov.f64	d1, d6
 8000336:	ecbd 8b0a 	vpop	{d8-d12}
 800033a:	4770      	bx	lr
 800033c:	eeb4 6b46 	vcmp.f64	d6, d6
 8000340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000344:	d7f3      	bvc.n	800032e <__muldc3+0x26>
 8000346:	eeb0 bbc0 	vabs.f64	d11, d0
 800034a:	eeb0 cbc1 	vabs.f64	d12, d1
 800034e:	ed9f ab94 	vldr	d10, [pc, #592]	@ 80005a0 <__muldc3+0x298>
 8000352:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800035a:	f300 809d 	bgt.w	8000498 <__muldc3+0x190>
 800035e:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000366:	f300 8097 	bgt.w	8000498 <__muldc3+0x190>
 800036a:	2300      	movs	r3, #0
 800036c:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 80005a0 <__muldc3+0x298>
 8000370:	eeb0 bbc2 	vabs.f64	d11, d2
 8000374:	eeb0 cbc3 	vabs.f64	d12, d3
 8000378:	eeb4 bb4a 	vcmp.f64	d11, d10
 800037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000380:	dc48      	bgt.n	8000414 <__muldc3+0x10c>
 8000382:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800038a:	dc43      	bgt.n	8000414 <__muldc3+0x10c>
 800038c:	bb9b      	cbnz	r3, 80003f6 <__muldc3+0xee>
 800038e:	eeb0 5bc5 	vabs.f64	d5, d5
 8000392:	eeb4 5b4a 	vcmp.f64	d5, d10
 8000396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800039a:	dc14      	bgt.n	80003c6 <__muldc3+0xbe>
 800039c:	eeb0 4bc4 	vabs.f64	d4, d4
 80003a0:	eeb4 4b4a 	vcmp.f64	d4, d10
 80003a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a8:	dc0d      	bgt.n	80003c6 <__muldc3+0xbe>
 80003aa:	eeb0 9bc9 	vabs.f64	d9, d9
 80003ae:	eeb4 9b4a 	vcmp.f64	d9, d10
 80003b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b6:	dc06      	bgt.n	80003c6 <__muldc3+0xbe>
 80003b8:	eeb0 8bc8 	vabs.f64	d8, d8
 80003bc:	eeb4 8b4a 	vcmp.f64	d8, d10
 80003c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c4:	ddb3      	ble.n	800032e <__muldc3+0x26>
 80003c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80003ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ce:	f180 80dc 	bvs.w	800058a <__muldc3+0x282>
 80003d2:	eeb4 1b41 	vcmp.f64	d1, d1
 80003d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003da:	f180 80cc 	bvs.w	8000576 <__muldc3+0x26e>
 80003de:	eeb4 2b42 	vcmp.f64	d2, d2
 80003e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003e6:	f180 80bc 	bvs.w	8000562 <__muldc3+0x25a>
 80003ea:	eeb4 3b43 	vcmp.f64	d3, d3
 80003ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003f2:	f180 80ac 	bvs.w	800054e <__muldc3+0x246>
 80003f6:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80003fa:	ee21 1b02 	vmul.f64	d1, d1, d2
 80003fe:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 80005a8 <__muldc3+0x2a0>
 8000402:	eea0 7b02 	vfma.f64	d7, d0, d2
 8000406:	eea0 1b03 	vfma.f64	d1, d0, d3
 800040a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800040e:	ee21 6b06 	vmul.f64	d6, d1, d6
 8000412:	e78c      	b.n	800032e <__muldc3+0x26>
 8000414:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 80005a0 <__muldc3+0x298>
 8000418:	eeb4 bb47 	vcmp.f64	d11, d7
 800041c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000420:	bfcc      	ite	gt
 8000422:	2301      	movgt	r3, #1
 8000424:	2300      	movle	r3, #0
 8000426:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 80005a0 <__muldc3+0x298>
 800042a:	ee07 3a10 	vmov	s14, r3
 800042e:	eeb4 cb46 	vcmp.f64	d12, d6
 8000432:	ee12 3a90 	vmov	r3, s5
 8000436:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800043a:	2b00      	cmp	r3, #0
 800043c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000440:	bfb8      	it	lt
 8000442:	eeb1 7b47 	vneglt.f64	d7, d7
 8000446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800044a:	bfcc      	ite	gt
 800044c:	2301      	movgt	r3, #1
 800044e:	2300      	movle	r3, #0
 8000450:	eeb0 2b47 	vmov.f64	d2, d7
 8000454:	ee07 3a10 	vmov	s14, r3
 8000458:	eeb4 0b40 	vcmp.f64	d0, d0
 800045c:	ee13 3a90 	vmov	r3, s7
 8000460:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000464:	2b00      	cmp	r3, #0
 8000466:	eeb0 7bc7 	vabs.f64	d7, d7
 800046a:	bfb8      	it	lt
 800046c:	eeb1 7b47 	vneglt.f64	d7, d7
 8000470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000474:	eeb0 3b47 	vmov.f64	d3, d7
 8000478:	d655      	bvs.n	8000526 <__muldc3+0x21e>
 800047a:	eeb4 1b41 	vcmp.f64	d1, d1
 800047e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000482:	d7b8      	bvc.n	80003f6 <__muldc3+0xee>
 8000484:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 80005b0 <__muldc3+0x2a8>
 8000488:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 80005b8 <__muldc3+0x2b0>
 800048c:	ee11 3a90 	vmov	r3, s3
 8000490:	2b00      	cmp	r3, #0
 8000492:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000496:	e7ae      	b.n	80003f6 <__muldc3+0xee>
 8000498:	ed9f ab41 	vldr	d10, [pc, #260]	@ 80005a0 <__muldc3+0x298>
 800049c:	eeb4 bb4a 	vcmp.f64	d11, d10
 80004a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a4:	bfcc      	ite	gt
 80004a6:	2301      	movgt	r3, #1
 80004a8:	2300      	movle	r3, #0
 80004aa:	ee0a 3a10 	vmov	s20, r3
 80004ae:	ee10 3a90 	vmov	r3, s1
 80004b2:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	eeb0 abca 	vabs.f64	d10, d10
 80004bc:	bfb8      	it	lt
 80004be:	eeb1 ab4a 	vneglt.f64	d10, d10
 80004c2:	eeb0 0b4a 	vmov.f64	d0, d10
 80004c6:	ed9f ab36 	vldr	d10, [pc, #216]	@ 80005a0 <__muldc3+0x298>
 80004ca:	eeb4 cb4a 	vcmp.f64	d12, d10
 80004ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d2:	bfcc      	ite	gt
 80004d4:	2301      	movgt	r3, #1
 80004d6:	2300      	movle	r3, #0
 80004d8:	ee0a 3a10 	vmov	s20, r3
 80004dc:	eeb4 2b42 	vcmp.f64	d2, d2
 80004e0:	ee11 3a90 	vmov	r3, s3
 80004e4:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	eeb0 abca 	vabs.f64	d10, d10
 80004ee:	bfb8      	it	lt
 80004f0:	eeb1 ab4a 	vneglt.f64	d10, d10
 80004f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004f8:	eeb0 1b4a 	vmov.f64	d1, d10
 80004fc:	d61d      	bvs.n	800053a <__muldc3+0x232>
 80004fe:	eeb4 3b43 	vcmp.f64	d3, d3
 8000502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000506:	bf78      	it	vc
 8000508:	2301      	movvc	r3, #1
 800050a:	f5ff af2f 	bvc.w	800036c <__muldc3+0x64>
 800050e:	ee13 3a90 	vmov	r3, s7
 8000512:	ed9f ab29 	vldr	d10, [pc, #164]	@ 80005b8 <__muldc3+0x2b0>
 8000516:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 80005b0 <__muldc3+0x2a8>
 800051a:	2b00      	cmp	r3, #0
 800051c:	f04f 0301 	mov.w	r3, #1
 8000520:	fe23 3b0a 	vselge.f64	d3, d3, d10
 8000524:	e722      	b.n	800036c <__muldc3+0x64>
 8000526:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 80005b0 <__muldc3+0x2a8>
 800052a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80005b8 <__muldc3+0x2b0>
 800052e:	ee10 3a90 	vmov	r3, s1
 8000532:	2b00      	cmp	r3, #0
 8000534:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000538:	e79f      	b.n	800047a <__muldc3+0x172>
 800053a:	ee12 3a90 	vmov	r3, s5
 800053e:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 80005b8 <__muldc3+0x2b0>
 8000542:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 80005b0 <__muldc3+0x2a8>
 8000546:	2b00      	cmp	r3, #0
 8000548:	fe22 2b0a 	vselge.f64	d2, d2, d10
 800054c:	e7d7      	b.n	80004fe <__muldc3+0x1f6>
 800054e:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 80005b0 <__muldc3+0x2a8>
 8000552:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80005b8 <__muldc3+0x2b0>
 8000556:	ee13 3a90 	vmov	r3, s7
 800055a:	2b00      	cmp	r3, #0
 800055c:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000560:	e749      	b.n	80003f6 <__muldc3+0xee>
 8000562:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80005b0 <__muldc3+0x2a8>
 8000566:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 80005b8 <__muldc3+0x2b0>
 800056a:	ee12 3a90 	vmov	r3, s5
 800056e:	2b00      	cmp	r3, #0
 8000570:	fe26 2b07 	vselge.f64	d2, d6, d7
 8000574:	e739      	b.n	80003ea <__muldc3+0xe2>
 8000576:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80005b0 <__muldc3+0x2a8>
 800057a:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80005b8 <__muldc3+0x2b0>
 800057e:	ee11 3a90 	vmov	r3, s3
 8000582:	2b00      	cmp	r3, #0
 8000584:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000588:	e729      	b.n	80003de <__muldc3+0xd6>
 800058a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80005b0 <__muldc3+0x2a8>
 800058e:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80005b8 <__muldc3+0x2b0>
 8000592:	ee10 3a90 	vmov	r3, s1
 8000596:	2b00      	cmp	r3, #0
 8000598:	fe26 0b07 	vselge.f64	d0, d6, d7
 800059c:	e719      	b.n	80003d2 <__muldc3+0xca>
 800059e:	bf00      	nop
 80005a0:	ffffffff 	.word	0xffffffff
 80005a4:	7fefffff 	.word	0x7fefffff
 80005a8:	00000000 	.word	0x00000000
 80005ac:	7ff00000 	.word	0x7ff00000
	...
 80005bc:	80000000 	.word	0x80000000

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	460c      	mov	r4, r1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d14e      	bne.n	800066a <__udivmoddi4+0xaa>
 80005cc:	4694      	mov	ip, r2
 80005ce:	458c      	cmp	ip, r1
 80005d0:	4686      	mov	lr, r0
 80005d2:	fab2 f282 	clz	r2, r2
 80005d6:	d962      	bls.n	800069e <__udivmoddi4+0xde>
 80005d8:	b14a      	cbz	r2, 80005ee <__udivmoddi4+0x2e>
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	4091      	lsls	r1, r2
 80005e0:	fa20 f303 	lsr.w	r3, r0, r3
 80005e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e8:	4319      	orrs	r1, r3
 80005ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80005ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f2:	fa1f f68c 	uxth.w	r6, ip
 80005f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80005fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000602:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000606:	fb04 f106 	mul.w	r1, r4, r6
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000616:	f080 8112 	bcs.w	800083e <__udivmoddi4+0x27e>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 810f 	bls.w	800083e <__udivmoddi4+0x27e>
 8000620:	3c02      	subs	r4, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a59      	subs	r1, r3, r1
 8000626:	fa1f f38e 	uxth.w	r3, lr
 800062a:	fbb1 f0f7 	udiv	r0, r1, r7
 800062e:	fb07 1110 	mls	r1, r7, r0, r1
 8000632:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000636:	fb00 f606 	mul.w	r6, r0, r6
 800063a:	429e      	cmp	r6, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x94>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000646:	f080 80fc 	bcs.w	8000842 <__udivmoddi4+0x282>
 800064a:	429e      	cmp	r6, r3
 800064c:	f240 80f9 	bls.w	8000842 <__udivmoddi4+0x282>
 8000650:	4463      	add	r3, ip
 8000652:	3802      	subs	r0, #2
 8000654:	1b9b      	subs	r3, r3, r6
 8000656:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800065a:	2100      	movs	r1, #0
 800065c:	b11d      	cbz	r5, 8000666 <__udivmoddi4+0xa6>
 800065e:	40d3      	lsrs	r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	e9c5 3200 	strd	r3, r2, [r5]
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d905      	bls.n	800067a <__udivmoddi4+0xba>
 800066e:	b10d      	cbz	r5, 8000674 <__udivmoddi4+0xb4>
 8000670:	e9c5 0100 	strd	r0, r1, [r5]
 8000674:	2100      	movs	r1, #0
 8000676:	4608      	mov	r0, r1
 8000678:	e7f5      	b.n	8000666 <__udivmoddi4+0xa6>
 800067a:	fab3 f183 	clz	r1, r3
 800067e:	2900      	cmp	r1, #0
 8000680:	d146      	bne.n	8000710 <__udivmoddi4+0x150>
 8000682:	42a3      	cmp	r3, r4
 8000684:	d302      	bcc.n	800068c <__udivmoddi4+0xcc>
 8000686:	4290      	cmp	r0, r2
 8000688:	f0c0 80f0 	bcc.w	800086c <__udivmoddi4+0x2ac>
 800068c:	1a86      	subs	r6, r0, r2
 800068e:	eb64 0303 	sbc.w	r3, r4, r3
 8000692:	2001      	movs	r0, #1
 8000694:	2d00      	cmp	r5, #0
 8000696:	d0e6      	beq.n	8000666 <__udivmoddi4+0xa6>
 8000698:	e9c5 6300 	strd	r6, r3, [r5]
 800069c:	e7e3      	b.n	8000666 <__udivmoddi4+0xa6>
 800069e:	2a00      	cmp	r2, #0
 80006a0:	f040 8090 	bne.w	80007c4 <__udivmoddi4+0x204>
 80006a4:	eba1 040c 	sub.w	r4, r1, ip
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	fa1f f78c 	uxth.w	r7, ip
 80006b0:	2101      	movs	r1, #1
 80006b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006ba:	fb08 4416 	mls	r4, r8, r6, r4
 80006be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006c2:	fb07 f006 	mul.w	r0, r7, r6
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d908      	bls.n	80006dc <__udivmoddi4+0x11c>
 80006ca:	eb1c 0303 	adds.w	r3, ip, r3
 80006ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80006d2:	d202      	bcs.n	80006da <__udivmoddi4+0x11a>
 80006d4:	4298      	cmp	r0, r3
 80006d6:	f200 80cd 	bhi.w	8000874 <__udivmoddi4+0x2b4>
 80006da:	4626      	mov	r6, r4
 80006dc:	1a1c      	subs	r4, r3, r0
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80006e6:	fb08 4410 	mls	r4, r8, r0, r4
 80006ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006ee:	fb00 f707 	mul.w	r7, r0, r7
 80006f2:	429f      	cmp	r7, r3
 80006f4:	d908      	bls.n	8000708 <__udivmoddi4+0x148>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80006fe:	d202      	bcs.n	8000706 <__udivmoddi4+0x146>
 8000700:	429f      	cmp	r7, r3
 8000702:	f200 80b0 	bhi.w	8000866 <__udivmoddi4+0x2a6>
 8000706:	4620      	mov	r0, r4
 8000708:	1bdb      	subs	r3, r3, r7
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	e7a5      	b.n	800065c <__udivmoddi4+0x9c>
 8000710:	f1c1 0620 	rsb	r6, r1, #32
 8000714:	408b      	lsls	r3, r1
 8000716:	fa22 f706 	lsr.w	r7, r2, r6
 800071a:	431f      	orrs	r7, r3
 800071c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000720:	fa04 f301 	lsl.w	r3, r4, r1
 8000724:	ea43 030c 	orr.w	r3, r3, ip
 8000728:	40f4      	lsrs	r4, r6
 800072a:	fa00 f801 	lsl.w	r8, r0, r1
 800072e:	0c38      	lsrs	r0, r7, #16
 8000730:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000734:	fbb4 fef0 	udiv	lr, r4, r0
 8000738:	fa1f fc87 	uxth.w	ip, r7
 800073c:	fb00 441e 	mls	r4, r0, lr, r4
 8000740:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000744:	fb0e f90c 	mul.w	r9, lr, ip
 8000748:	45a1      	cmp	r9, r4
 800074a:	fa02 f201 	lsl.w	r2, r2, r1
 800074e:	d90a      	bls.n	8000766 <__udivmoddi4+0x1a6>
 8000750:	193c      	adds	r4, r7, r4
 8000752:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000756:	f080 8084 	bcs.w	8000862 <__udivmoddi4+0x2a2>
 800075a:	45a1      	cmp	r9, r4
 800075c:	f240 8081 	bls.w	8000862 <__udivmoddi4+0x2a2>
 8000760:	f1ae 0e02 	sub.w	lr, lr, #2
 8000764:	443c      	add	r4, r7
 8000766:	eba4 0409 	sub.w	r4, r4, r9
 800076a:	fa1f f983 	uxth.w	r9, r3
 800076e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000772:	fb00 4413 	mls	r4, r0, r3, r4
 8000776:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800077a:	fb03 fc0c 	mul.w	ip, r3, ip
 800077e:	45a4      	cmp	ip, r4
 8000780:	d907      	bls.n	8000792 <__udivmoddi4+0x1d2>
 8000782:	193c      	adds	r4, r7, r4
 8000784:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000788:	d267      	bcs.n	800085a <__udivmoddi4+0x29a>
 800078a:	45a4      	cmp	ip, r4
 800078c:	d965      	bls.n	800085a <__udivmoddi4+0x29a>
 800078e:	3b02      	subs	r3, #2
 8000790:	443c      	add	r4, r7
 8000792:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000796:	fba0 9302 	umull	r9, r3, r0, r2
 800079a:	eba4 040c 	sub.w	r4, r4, ip
 800079e:	429c      	cmp	r4, r3
 80007a0:	46ce      	mov	lr, r9
 80007a2:	469c      	mov	ip, r3
 80007a4:	d351      	bcc.n	800084a <__udivmoddi4+0x28a>
 80007a6:	d04e      	beq.n	8000846 <__udivmoddi4+0x286>
 80007a8:	b155      	cbz	r5, 80007c0 <__udivmoddi4+0x200>
 80007aa:	ebb8 030e 	subs.w	r3, r8, lr
 80007ae:	eb64 040c 	sbc.w	r4, r4, ip
 80007b2:	fa04 f606 	lsl.w	r6, r4, r6
 80007b6:	40cb      	lsrs	r3, r1
 80007b8:	431e      	orrs	r6, r3
 80007ba:	40cc      	lsrs	r4, r1
 80007bc:	e9c5 6400 	strd	r6, r4, [r5]
 80007c0:	2100      	movs	r1, #0
 80007c2:	e750      	b.n	8000666 <__udivmoddi4+0xa6>
 80007c4:	f1c2 0320 	rsb	r3, r2, #32
 80007c8:	fa20 f103 	lsr.w	r1, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	fa24 f303 	lsr.w	r3, r4, r3
 80007d4:	4094      	lsls	r4, r2
 80007d6:	430c      	orrs	r4, r1
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e0:	fa1f f78c 	uxth.w	r7, ip
 80007e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e8:	fb08 3110 	mls	r1, r8, r0, r3
 80007ec:	0c23      	lsrs	r3, r4, #16
 80007ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f2:	fb00 f107 	mul.w	r1, r0, r7
 80007f6:	4299      	cmp	r1, r3
 80007f8:	d908      	bls.n	800080c <__udivmoddi4+0x24c>
 80007fa:	eb1c 0303 	adds.w	r3, ip, r3
 80007fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000802:	d22c      	bcs.n	800085e <__udivmoddi4+0x29e>
 8000804:	4299      	cmp	r1, r3
 8000806:	d92a      	bls.n	800085e <__udivmoddi4+0x29e>
 8000808:	3802      	subs	r0, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f1f8 	udiv	r1, r3, r8
 8000814:	fb08 3311 	mls	r3, r8, r1, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb01 f307 	mul.w	r3, r1, r7
 8000820:	42a3      	cmp	r3, r4
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x276>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800082c:	d213      	bcs.n	8000856 <__udivmoddi4+0x296>
 800082e:	42a3      	cmp	r3, r4
 8000830:	d911      	bls.n	8000856 <__udivmoddi4+0x296>
 8000832:	3902      	subs	r1, #2
 8000834:	4464      	add	r4, ip
 8000836:	1ae4      	subs	r4, r4, r3
 8000838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800083c:	e739      	b.n	80006b2 <__udivmoddi4+0xf2>
 800083e:	4604      	mov	r4, r0
 8000840:	e6f0      	b.n	8000624 <__udivmoddi4+0x64>
 8000842:	4608      	mov	r0, r1
 8000844:	e706      	b.n	8000654 <__udivmoddi4+0x94>
 8000846:	45c8      	cmp	r8, r9
 8000848:	d2ae      	bcs.n	80007a8 <__udivmoddi4+0x1e8>
 800084a:	ebb9 0e02 	subs.w	lr, r9, r2
 800084e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000852:	3801      	subs	r0, #1
 8000854:	e7a8      	b.n	80007a8 <__udivmoddi4+0x1e8>
 8000856:	4631      	mov	r1, r6
 8000858:	e7ed      	b.n	8000836 <__udivmoddi4+0x276>
 800085a:	4603      	mov	r3, r0
 800085c:	e799      	b.n	8000792 <__udivmoddi4+0x1d2>
 800085e:	4630      	mov	r0, r6
 8000860:	e7d4      	b.n	800080c <__udivmoddi4+0x24c>
 8000862:	46d6      	mov	lr, sl
 8000864:	e77f      	b.n	8000766 <__udivmoddi4+0x1a6>
 8000866:	4463      	add	r3, ip
 8000868:	3802      	subs	r0, #2
 800086a:	e74d      	b.n	8000708 <__udivmoddi4+0x148>
 800086c:	4606      	mov	r6, r0
 800086e:	4623      	mov	r3, r4
 8000870:	4608      	mov	r0, r1
 8000872:	e70f      	b.n	8000694 <__udivmoddi4+0xd4>
 8000874:	3e02      	subs	r6, #2
 8000876:	4463      	add	r3, ip
 8000878:	e730      	b.n	80006dc <__udivmoddi4+0x11c>
 800087a:	bf00      	nop

0800087c <__aeabi_idiv0>:
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	ed2d 8b02 	vpush	{d8}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	ee07 3a90 	vmov	s15, r3
 8000894:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000898:	eeb0 0b47 	vmov.f64	d0, d7
 800089c:	f010 f8dc 	bl	8010a58 <log>
 80008a0:	eeb0 6b40 	vmov.f64	d6, d0
 80008a4:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000960 <rev+0xe0>
 80008a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008ac:	eeb0 0b47 	vmov.f64	d0, d7
 80008b0:	f010 fc6a 	bl	8011188 <floor>
 80008b4:	eeb0 7b40 	vmov.f64	d7, d0
 80008b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008bc:	ee17 3a90 	vmov	r3, s15
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	da00      	bge.n	80008d2 <rev+0x52>
 80008d0:	3301      	adds	r3, #1
 80008d2:	105b      	asrs	r3, r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e036      	b.n	8000946 <rev+0xc6>
    {
        reg = index%2;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	bfb8      	it	lt
 80008e2:	425b      	neglt	r3, r3
 80008e4:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008fc:	eeb0 1b47 	vmov.f64	d1, d7
 8000900:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8000904:	f010 f9d0 	bl	8010ca8 <pow>
 8000908:	eeb0 7b40 	vmov.f64	d7, d0
 800090c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	ee07 3a90 	vmov	s15, r3
 8000916:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800091a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800091e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000922:	ee17 3a90 	vmov	r3, s15
 8000926:	613b      	str	r3, [r7, #16]
        k--;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3b01      	subs	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
        index/= 2;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da00      	bge.n	8000936 <rev+0xb6>
 8000934:	3301      	adds	r3, #1
 8000936:	105b      	asrs	r3, r3, #1
 8000938:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	da00      	bge.n	8000942 <rev+0xc2>
 8000940:	3301      	adds	r3, #1
 8000942:	105b      	asrs	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	dcc5      	bgt.n	80008d8 <rev+0x58>
    }
    return ans;
 800094c:	693b      	ldr	r3, [r7, #16]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	ecbd 8b02 	vpop	{d8}
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	f3af 8000 	nop.w
 8000960:	fefa39ef 	.word	0xfefa39ef
 8000964:	3fe62e42 	.word	0x3fe62e42

08000968 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800096c:	ed2d 8b02 	vpush	{d8}
 8000970:	b0a9      	sub	sp, #164	@ 0xa4
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	466b      	mov	r3, sp
 800097a:	461e      	mov	r6, r3
    double complex W[size/2];
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da00      	bge.n	8000984 <FFT+0x1c>
 8000982:	3301      	adds	r3, #1
 8000984:	105b      	asrs	r3, r3, #1
 8000986:	4619      	mov	r1, r3
 8000988:	1e4b      	subs	r3, r1, #1
 800098a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800098e:	460a      	mov	r2, r1
 8000990:	2300      	movs	r3, #0
 8000992:	603a      	str	r2, [r7, #0]
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	f04f 0200 	mov.w	r2, #0
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	01c3      	lsls	r3, r0, #7
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	01c2      	lsls	r2, r0, #7
 80009ac:	460a      	mov	r2, r1
 80009ae:	2300      	movs	r3, #0
 80009b0:	4692      	mov	sl, r2
 80009b2:	469b      	mov	fp, r3
 80009b4:	f04f 0200 	mov.w	r2, #0
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 80009c0:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 80009c4:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 80009c8:	460b      	mov	r3, r1
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	3307      	adds	r3, #7
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	ebad 0d03 	sub.w	sp, sp, r3
 80009d6:	466b      	mov	r3, sp
 80009d8:	3307      	adds	r3, #7
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80009e8:	e049      	b.n	8000a7e <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 80009ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009f6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000ba0 <FFT+0x238>
 80009fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	ee07 3a90 	vmov	s15, r3
 8000a04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a08:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000a0c:	eeb0 0b45 	vmov.f64	d0, d5
 8000a10:	f00f ffd6 	bl	80109c0 <sin>
 8000a14:	eeb0 8b40 	vmov.f64	d8, d0
 8000a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a24:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000ba0 <FFT+0x238>
 8000a28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	ee07 3a90 	vmov	s15, r3
 8000a32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a36:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000a3a:	eeb0 0b45 	vmov.f64	d0, d5
 8000a3e:	f00f ff73 	bl	8010928 <cos>
 8000a42:	eeb0 6b40 	vmov.f64	d6, d0
 8000a46:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8000ba8 <FFT+0x240>
 8000a4a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000a4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a52:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	4413      	add	r3, r2
 8000a5e:	ed83 7b00 	vstr	d7, [r3]
 8000a62:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3308      	adds	r3, #8
 8000a70:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	da00      	bge.n	8000a86 <FFT+0x11e>
 8000a84:	3301      	adds	r3, #1
 8000a86:	105b      	asrs	r3, r3, #1
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	dbab      	blt.n	80009ea <FFT+0x82>
    }

    double complex A[size +100];
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000a98:	1e4b      	subs	r3, r1, #1
 8000a9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000ab2:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000ab6:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000aba:	460a      	mov	r2, r1
 8000abc:	2300      	movs	r3, #0
 8000abe:	4614      	mov	r4, r2
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	01eb      	lsls	r3, r5, #7
 8000acc:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000ad0:	01e2      	lsls	r2, r4, #7
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ae0:	466b      	mov	r3, sp
 8000ae2:	3307      	adds	r3, #7
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X =A;
 8000aea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000aec:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000af4:	e027      	b.n	8000b46 <FFT+0x1de>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000af6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff fec0 	bl	8000880 <rev>
 8000b00:	4603      	mov	r3, r0
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4413      	add	r3, r2
 8000b08:	ed93 7b00 	vldr	d7, [r3]
 8000b0c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000ba8 <FFT+0x240>
 8000b10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	4413      	add	r3, r2
 8000b1e:	ed83 7b00 	vstr	d7, [r3]
 8000b22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	4413      	add	r3, r2
 8000b2c:	f103 0108 	add.w	r1, r3, #8
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b40:	3301      	adds	r3, #1
 8000b42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000b46:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbd2      	blt.n	8000af6 <FFT+0x18e>
    }
    
    int s , m , k , j;
    double complex omega , t , u;

    for(s = 1 ; s <size ; s*=2)
 8000b50:	2301      	movs	r3, #1
 8000b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b56:	e0f8      	b.n	8000d4a <FFT+0x3e2>
    {
        m = s*2;
 8000b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k < size ; k+=m)
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b66:	e0e5      	b.n	8000d34 <FFT+0x3cc>
        {
            omega = 1;
 8000b68:	f04f 0200 	mov.w	r2, #0
 8000b6c:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <FFT+0x248>)
 8000b6e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	f04f 0300 	mov.w	r3, #0
 8000b7a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2 ; j++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <FFT+0x248>)
 8000b96:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000b9a:	e0ba      	b.n	8000d12 <FFT+0x3aa>
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	54442d18 	.word	0x54442d18
 8000ba4:	401921fb 	.word	0x401921fb
	...
 8000bb0:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000bb4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000bbc:	441a      	add	r2, r3
 8000bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da00      	bge.n	8000bc6 <FFT+0x25e>
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	105b      	asrs	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000bcc:	011a      	lsls	r2, r3, #4
 8000bce:	440a      	add	r2, r1
 8000bd0:	ed92 7b00 	vldr	d7, [r2]
 8000bd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	4413      	add	r3, r2
 8000bda:	ed93 6b02 	vldr	d6, [r3, #8]
 8000bde:	eeb0 3b46 	vmov.f64	d3, d6
 8000be2:	eeb0 2b47 	vmov.f64	d2, d7
 8000be6:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000bea:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000bee:	f7ff fb8b 	bl	8000308 <__muldc3>
 8000bf2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000bf6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000bfa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000bfe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000c06:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000c0a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c12:	18d1      	adds	r1, r2, r3
 8000c14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c16:	010b      	lsls	r3, r1, #4
 8000c18:	4413      	add	r3, r2
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c24:	010b      	lsls	r3, r1, #4
 8000c26:	4413      	add	r3, r2
 8000c28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000c30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c38:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000c3c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000c40:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c48:	4413      	add	r3, r2
 8000c4a:	ed97 6b06 	vldr	d6, [r7, #24]
 8000c4e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000c52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c56:	ed97 5b04 	vldr	d5, [r7, #16]
 8000c5a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000c5e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000c62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c64:	011a      	lsls	r2, r3, #4
 8000c66:	440a      	add	r2, r1
 8000c68:	ed82 6b00 	vstr	d6, [r2]
 8000c6c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4413      	add	r3, r2
 8000c72:	3308      	adds	r3, #8
 8000c74:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000c78:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c80:	441a      	add	r2, r3
 8000c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da00      	bge.n	8000c8a <FFT+0x322>
 8000c88:	3301      	adds	r3, #1
 8000c8a:	105b      	asrs	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000c92:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000c96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c9a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000c9e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000ca2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000ca6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000ca8:	011a      	lsls	r2, r3, #4
 8000caa:	440a      	add	r2, r1
 8000cac:	ed82 6b00 	vstr	d6, [r2]
 8000cb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000cc8:	011a      	lsls	r2, r3, #4
 8000cca:	440a      	add	r2, r1
 8000ccc:	ed92 7b00 	vldr	d7, [r2]
 8000cd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	ed93 6b02 	vldr	d6, [r3, #8]
 8000cdc:	eeb0 3b46 	vmov.f64	d3, d6
 8000ce0:	eeb0 2b47 	vmov.f64	d2, d7
 8000ce4:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ce8:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000cec:	f7ff fb0c 	bl	8000308 <__muldc3>
 8000cf0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000cf4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000cf8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000cfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000d00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d04:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2 ; j++)
 8000d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da00      	bge.n	8000d1a <FFT+0x3b2>
 8000d18:	3301      	adds	r3, #1
 8000d1a:	105b      	asrs	r3, r3, #1
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d22:	4293      	cmp	r3, r2
 8000d24:	f6ff af46 	blt.w	8000bb4 <FFT+0x24c>
        for ( k = 0 ; k < size ; k+=m)
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d2e:	4413      	add	r3, r2
 8000d30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d34:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f6ff af14 	blt.w	8000b68 <FFT+0x200>
    for(s = 1 ; s <size ; s*=2)
 8000d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f6ff af01 	blt.w	8000b58 <FFT+0x1f0>
            } 
        }
    }
    return X;
 8000d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000d58:	46b5      	mov	sp, r6

}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	37a4      	adds	r7, #164	@ 0xa4
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	ecbd 8b02 	vpop	{d8}
 8000d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d68 <FFT_Mag>:

double * FFT_Mag(int size , double x[])
{
 8000d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d6c:	b08d      	sub	sp, #52	@ 0x34
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
 8000d74:	466b      	mov	r3, sp
 8000d76:	461e      	mov	r6, r3
    double A[size +100];
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000d7e:	1e4b      	subs	r3, r1, #1
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d82:	460a      	mov	r2, r1
 8000d84:	2300      	movs	r3, #0
 8000d86:	4690      	mov	r8, r2
 8000d88:	4699      	mov	r9, r3
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000d9e:	460a      	mov	r2, r1
 8000da0:	2300      	movs	r3, #0
 8000da2:	4614      	mov	r4, r2
 8000da4:	461d      	mov	r5, r3
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	01ab      	lsls	r3, r5, #6
 8000db0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000db4:	01a2      	lsls	r2, r4, #6
 8000db6:	460b      	mov	r3, r1
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	3307      	adds	r3, #7
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	ebad 0d03 	sub.w	sp, sp, r3
 8000dc4:	466b      	mov	r3, sp
 8000dc6:	3307      	adds	r3, #7
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    double cr , ci;
    double complex*X = FFT(size , x);
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fdc9 	bl	8000968 <FFT>
 8000dd6:	6238      	str	r0, [r7, #32]
    for (int i = 0 ; i < size ; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ddc:	e035      	b.n	8000e4a <FFT_Mag+0xe2>
    {
        cr = (creal(X[i]) * creal(X[i]));
 8000dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	6a3a      	ldr	r2, [r7, #32]
 8000de4:	4413      	add	r3, r2
 8000de6:	ed93 6b00 	vldr	d6, [r3]
 8000dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	6a3a      	ldr	r2, [r7, #32]
 8000df0:	4413      	add	r3, r2
 8000df2:	ed93 7b00 	vldr	d7, [r3]
 8000df6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dfa:	ed87 7b04 	vstr	d7, [r7, #16]

        ci = (cimag(X[i]) * cimag(X[i]));
 8000dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	6a3a      	ldr	r2, [r7, #32]
 8000e04:	4413      	add	r3, r2
 8000e06:	ed93 6b02 	vldr	d6, [r3, #8]
 8000e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	6a3a      	ldr	r2, [r7, #32]
 8000e10:	4413      	add	r3, r2
 8000e12:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e1a:	ed87 7b02 	vstr	d7, [r7, #8]
        A[i] = (cr + ci) / size;
 8000e1e:	ed97 6b04 	vldr	d6, [r7, #16]
 8000e22:	ed97 7b02 	vldr	d7, [r7, #8]
 8000e26:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4413      	add	r3, r2
 8000e40:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0 ; i < size ; i++)
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	3301      	adds	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dbc5      	blt.n	8000dde <FFT_Mag+0x76>
    }
    double* a = A;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	61fb      	str	r3, [r7, #28]
    return a;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	46b5      	mov	sp, r6
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3734      	adds	r7, #52	@ 0x34
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e64 <FFT_Mag_sqrt>:


double * FFT_Mag_sqrt(int size , double x[])
{
 8000e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e68:	b089      	sub	sp, #36	@ 0x24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
 8000e70:	466b      	mov	r3, sp
 8000e72:	461e      	mov	r6, r3
    double A[size +100];
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000e7a:	1e4b      	subs	r3, r1, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	460a      	mov	r2, r1
 8000e80:	2300      	movs	r3, #0
 8000e82:	4690      	mov	r8, r2
 8000e84:	4699      	mov	r9, r3
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	4614      	mov	r4, r2
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	01ab      	lsls	r3, r5, #6
 8000eac:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000eb0:	01a2      	lsls	r2, r4, #6
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	3307      	adds	r3, #7
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ec0:	466b      	mov	r3, sp
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]
    double complex*X = FFT(size , x);
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fd4b 	bl	8000968 <FFT>
 8000ed2:	6138      	str	r0, [r7, #16]
    for (int i = 0 ; i < size ; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e01c      	b.n	8000f14 <FFT_Mag_sqrt+0xb0>
    {
        A[i] = cabs(X[i]) ;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000eea:	ec41 0b16 	vmov	d6, r0, r1
 8000eee:	ec43 2b17 	vmov	d7, r2, r3
 8000ef2:	eeb0 0b46 	vmov.f64	d0, d6
 8000ef6:	eeb0 1b47 	vmov.f64	d1, d7
 8000efa:	f010 f925 	bl	8011148 <cabs>
 8000efe:	eeb0 7b40 	vmov.f64	d7, d0
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0 ; i < size ; i++)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbde      	blt.n	8000eda <FFT_Mag_sqrt+0x76>
    }
    double* a = A;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	60fb      	str	r3, [r7, #12]
    return a;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	46b5      	mov	sp, r6
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3724      	adds	r7, #36	@ 0x24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f30 <Blackman>:

    return p;
}

double* Blackman(int size , int left , int right , double x[])
{
 8000f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f34:	ed2d 8b04 	vpush	{d8-d9}
 8000f38:	b089      	sub	sp, #36	@ 0x24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	466b      	mov	r3, sp
 8000f46:	461e      	mov	r6, r3
    double A[size  +100];
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000f4e:	1e4b      	subs	r3, r1, #1
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	460a      	mov	r2, r1
 8000f54:	2300      	movs	r3, #0
 8000f56:	4690      	mov	r8, r2
 8000f58:	4699      	mov	r9, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000f66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000f6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000f6e:	460a      	mov	r2, r1
 8000f70:	2300      	movs	r3, #0
 8000f72:	4614      	mov	r4, r2
 8000f74:	461d      	mov	r5, r3
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	01ab      	lsls	r3, r5, #6
 8000f80:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000f84:	01a2      	lsls	r2, r4, #6
 8000f86:	460b      	mov	r3, r1
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	ebad 0d03 	sub.w	sp, sp, r3
 8000f94:	466b      	mov	r3, sp
 8000f96:	3307      	adds	r3, #7
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	617b      	str	r3, [r7, #20]
    double *a = A ;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	613b      	str	r3, [r7, #16]

    for (int i = 0 ; i < size ; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e06b      	b.n	8001080 <Blackman+0x150>
    {
    	if (i < right && i >=  left)
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da5a      	bge.n	8001066 <Blackman+0x136>
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	db56      	blt.n	8001066 <Blackman+0x136>
    	{
    		A[i] = 10* x[i] * ( 0.42 + 0.08* cos(4*M_PI*(i - left )/(right - left - 1)) - 0.5*cos(2*M_PI*(i - left )/(right - left - 1)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	ed93 7b00 	vldr	d7, [r3]
 8000fc4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000fc8:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fda:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80010a0 <Blackman+0x170>
 8000fde:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ff6:	eeb0 0b45 	vmov.f64	d0, d5
 8000ffa:	f00f fc95 	bl	8010928 <cos>
 8000ffe:	eeb0 7b40 	vmov.f64	d7, d0
 8001002:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80010a8 <Blackman+0x178>
 8001006:	ee27 7b06 	vmul.f64	d7, d7, d6
 800100a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80010b0 <Blackman+0x180>
 800100e:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001020:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80010b8 <Blackman+0x188>
 8001024:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001038:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800103c:	eeb0 0b45 	vmov.f64	d0, d5
 8001040:	f00f fc72 	bl	8010928 <cos>
 8001044:	eeb0 7b40 	vmov.f64	d7, d0
 8001048:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800104c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001050:	ee39 7b47 	vsub.f64	d7, d9, d7
 8001054:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	ed83 7b00 	vstr	d7, [r3]
 8001064:	e009      	b.n	800107a <Blackman+0x14a>
    	}
    	else
    	{
    		A[i] = 0;
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	18d1      	adds	r1, r2, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	db8f      	blt.n	8000fa8 <Blackman+0x78>
    	}
    }
    return a;
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	46b5      	mov	sp, r6
}
 800108c:	4618      	mov	r0, r3
 800108e:	3724      	adds	r7, #36	@ 0x24
 8001090:	46bd      	mov	sp, r7
 8001092:	ecbd 8b04 	vpop	{d8-d9}
 8001096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800109a:	bf00      	nop
 800109c:	f3af 8000 	nop.w
 80010a0:	54442d18 	.word	0x54442d18
 80010a4:	402921fb 	.word	0x402921fb
 80010a8:	47ae147b 	.word	0x47ae147b
 80010ac:	3fb47ae1 	.word	0x3fb47ae1
 80010b0:	ae147ae1 	.word	0xae147ae1
 80010b4:	3fdae147 	.word	0x3fdae147
 80010b8:	54442d18 	.word	0x54442d18
 80010bc:	401921fb 	.word	0x401921fb

080010c0 <sgn>:
#include "FO.h"

char str[50];

double sgn(double x)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	ed87 0b00 	vstr	d0, [r7]
	return (x > 0)?(1) : -1;
 80010ca:	ed97 7b00 	vldr	d7, [r7]
 80010ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd03      	ble.n	80010e0 <sgn+0x20>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <sgn+0x38>)
 80010de:	e002      	b.n	80010e6 <sgn+0x26>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <sgn+0x3c>)
 80010e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80010ea:	eeb0 0b47 	vmov.f64	d0, d7
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	3ff00000 	.word	0x3ff00000
 80010fc:	bff00000 	.word	0xbff00000

08001100 <OverZero_Ave_Get>:

double OverZero_Ave_Get(int size , double x[])
{
 8001100:	b580      	push	{r7, lr}
 8001102:	ed2d 8b02 	vpush	{d8}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    double Z = 0;
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int i = 1 ; i < size ; i++)
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e027      	b.n	8001170 <OverZero_Ave_Get+0x70>
    {
        Z += fabs(sgn(x[i - 1]) - sgn(x[i]));
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	4413      	add	r3, r2
 800112e:	ed93 7b00 	vldr	d7, [r3]
 8001132:	eeb0 0b47 	vmov.f64	d0, d7
 8001136:	f7ff ffc3 	bl	80010c0 <sgn>
 800113a:	eeb0 8b40 	vmov.f64	d8, d0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	ed93 7b00 	vldr	d7, [r3]
 800114a:	eeb0 0b47 	vmov.f64	d0, d7
 800114e:	f7ff ffb7 	bl	80010c0 <sgn>
 8001152:	eeb0 7b40 	vmov.f64	d7, d0
 8001156:	ee38 7b47 	vsub.f64	d7, d8, d7
 800115a:	eeb0 7bc7 	vabs.f64	d7, d7
 800115e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001162:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001166:	ed87 7b04 	vstr	d7, [r7, #16]
    for (int i = 1 ; i < size ; i++)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbd3      	blt.n	8001120 <OverZero_Ave_Get+0x20>
    }
    return Z / 2 / size;
 8001178:	ed97 7b04 	vldr	d7, [r7, #16]
 800117c:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001180:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001192:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001196:	eeb0 0b47 	vmov.f64	d0, d7
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	ecbd 8b02 	vpop	{d8}
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <FrameNumber_Get>:

    return E;
}

int FrameNumber_Get(int Fsize , int length , int motion )
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
    return (Fsize - length + motion ) /motion;
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad2      	subs	r2, r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <MaxOZ_Get>:

double MaxOZ_Get(int size , double x[])
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    double *X = x;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
    int num = FrameNumber_Get(size ,frame_length , frame_motion);
 80011da:	2220      	movs	r2, #32
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffe0 	bl	80011a4 <FrameNumber_Get>
 80011e4:	6178      	str	r0, [r7, #20]
    double max = -1;
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MaxOZ_Get+0x78>)
 80011ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (int i = 0 ; i < num ; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	e019      	b.n	800122a <MaxOZ_Get+0x5e>
    {
        double Z  = OverZero_Ave_Get(frame_length , X + i* frame_motion);
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4413      	add	r3, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	2080      	movs	r0, #128	@ 0x80
 8001202:	f7ff ff7d 	bl	8001100 <OverZero_Ave_Get>
 8001206:	ed87 0b02 	vstr	d0, [r7, #8]
        if (max < Z)
 800120a:	ed97 6b08 	vldr	d6, [r7, #32]
 800120e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001212:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121a:	d503      	bpl.n	8001224 <MaxOZ_Get+0x58>
        {
            max = Z;
 800121c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001220:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (int i = 0 ; i < num ; i++)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3301      	adds	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbe1      	blt.n	80011f6 <MaxOZ_Get+0x2a>
        }
    }

    return max;
 8001232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001236:	ec43 2b17 	vmov	d7, r2, r3
}
 800123a:	eeb0 0b47 	vmov.f64	d0, d7
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	bff00000 	.word	0xbff00000

08001248 <OverOZ_Num_Get>:

int OverOZ_Num_Get(double para , int size , double x[])
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0
 800124e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    double* X = x;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    int count =  0;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int num = FrameNumber_Get(size ,frame_length , frame_motion);
 800125e:	2220      	movs	r2, #32
 8001260:	2180      	movs	r1, #128	@ 0x80
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff9e 	bl	80011a4 <FrameNumber_Get>
 8001268:	6238      	str	r0, [r7, #32]

    double Z_max = MaxOZ_Get(size , x);
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffad 	bl	80011cc <MaxOZ_Get>
 8001272:	ed87 0b06 	vstr	d0, [r7, #24]

    for (int i= 0 ; i  < num ; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800127a:	e01c      	b.n	80012b6 <OverOZ_Num_Get+0x6e>
    {
        double Z = OverZero_Ave_Get(frame_length,X + frame_motion*i);
 800127c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001282:	4413      	add	r3, r2
 8001284:	4619      	mov	r1, r3
 8001286:	2080      	movs	r0, #128	@ 0x80
 8001288:	f7ff ff3a 	bl	8001100 <OverZero_Ave_Get>
 800128c:	ed87 0b04 	vstr	d0, [r7, #16]
        if (Z > Z_max * para)
 8001290:	ed97 6b06 	vldr	d6, [r7, #24]
 8001294:	ed97 7b02 	vldr	d7, [r7, #8]
 8001298:	ee26 7b07 	vmul.f64	d7, d6, d7
 800129c:	ed97 6b04 	vldr	d6, [r7, #16]
 80012a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	dd02      	ble.n	80012b0 <OverOZ_Num_Get+0x68>
        {
            count ++;
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	3301      	adds	r3, #1
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i= 0 ; i  < num ; i++)
 80012b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b2:	3301      	adds	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dbde      	blt.n	800127c <OverOZ_Num_Get+0x34>
//        sprintf(str , "%.5lf" , Z);
//        		  	    		  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//        		  	    		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
    }

    return count ;
 80012be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3730      	adds	r7, #48	@ 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ec:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 80012ee:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <MX_ADC1_Init+0xec>)
 80012f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80012f8:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001306:	2204      	movs	r2, #4
 8001308:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001316:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001318:	2201      	movs	r2, #1
 800131a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131c:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001324:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800132a:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800132c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001334:	2203      	movs	r2, #3
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134c:	4818      	ldr	r0, [pc, #96]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800134e:	f002 fa6d 	bl	800382c <HAL_ADC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001358:	f001 fb28 	bl	80029ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001368:	f003 fdae 	bl	8004ec8 <HAL_ADCEx_MultiModeConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001372:	f001 fb1b 	bl	80029ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_ADC1_Init+0xf0>)
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137a:	2306      	movs	r3, #6
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800137e:	2302      	movs	r3, #2
 8001380:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001382:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001386:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001388:	2304      	movs	r3, #4
 800138a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800139a:	f002 fe41 	bl	8004020 <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80013a4:	f001 fb02 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2400299c 	.word	0x2400299c
 80013b4:	40022000 	.word	0x40022000
 80013b8:	0c900008 	.word	0x0c900008

080013bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0ba      	sub	sp, #232	@ 0xe8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	22c0      	movs	r2, #192	@ 0xc0
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00f fa0b 	bl	80107f8 <memset>
  if(adcHandle->Instance==ADC1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a43      	ldr	r2, [pc, #268]	@ (80014f4 <HAL_ADC_MspInit+0x138>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d17f      	bne.n	80014ec <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80013f8:	2319      	movs	r3, #25
 80013fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 80013fc:	23c8      	movs	r3, #200	@ 0xc8
 80013fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001404:	2302      	movs	r3, #2
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4618      	mov	r0, r3
 8001424:	f008 fd2a 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800142e:	f001 fabd 	bl	80029ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001438:	4a2f      	ldr	r2, [pc, #188]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 800143a:	f043 0320 	orr.w	r3, r3, #32
 800143e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	4a28      	ldr	r2, [pc, #160]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001460:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800146e:	2340      	movs	r3, #64	@ 0x40
 8001470:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001484:	4619      	mov	r1, r3
 8001486:	481d      	ldr	r0, [pc, #116]	@ (80014fc <HAL_ADC_MspInit+0x140>)
 8001488:	f007 f8da 	bl	8008640 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800148c:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 800148e:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <HAL_ADC_MspInit+0x148>)
 8001490:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 8001494:	2209      	movs	r2, #9
 8001496:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014d2:	f004 f8c3 	bl	800565c <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 80014dc:	f001 fa66 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014e4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014e6:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014ec:	bf00      	nop
 80014ee:	37e8      	adds	r7, #232	@ 0xe8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40022000 	.word	0x40022000
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020000 	.word	0x58020000
 8001500:	24002a00 	.word	0x24002a00
 8001504:	40020010 	.word	0x40020010

08001508 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_ADC_MspDeInit+0x3c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d110      	bne.n	800153c <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_ADC_MspDeInit+0x40>)
 800151c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001520:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_ADC_MspDeInit+0x40>)
 8001522:	f023 0320 	bic.w	r3, r3, #32
 8001526:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800152a:	2140      	movs	r1, #64	@ 0x40
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <HAL_ADC_MspDeInit+0x44>)
 800152e:	f007 fa37 	bl	80089a0 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fbec 	bl	8005d14 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40022000 	.word	0x40022000
 8001548:	58024400 	.word	0x58024400
 800154c:	58020000 	.word	0x58020000

08001550 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2224      	movs	r2, #36	@ 0x24
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00f f94b 	bl	80107f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_DAC1_Init+0x5c>)
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_DAC1_Init+0x60>)
 8001566:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001568:	4810      	ldr	r0, [pc, #64]	@ (80015ac <MX_DAC1_Init+0x5c>)
 800156a:	f003 ff17 	bl	800539c <HAL_DAC_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001574:	f001 fa1a 	bl	80029ac <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800157c:	2302      	movs	r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001580:	2302      	movs	r3, #2
 8001582:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001584:	2301      	movs	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2210      	movs	r2, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <MX_DAC1_Init+0x5c>)
 8001594:	f003 ff24 	bl	80053e0 <HAL_DAC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800159e:	f001 fa05 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24002a78 	.word	0x24002a78
 80015b0:	40007400 	.word	0x40007400

080015b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a30      	ldr	r2, [pc, #192]	@ (8001694 <HAL_DAC_MspInit+0xe0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d159      	bne.n	800168a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fa:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001612:	2320      	movs	r3, #32
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	481d      	ldr	r0, [pc, #116]	@ (800169c <HAL_DAC_MspInit+0xe8>)
 8001626:	f007 f80b 	bl	8008640 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800162c:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_DAC_MspInit+0xf0>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001632:	2244      	movs	r2, #68	@ 0x44
 8001634:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001638:	2240      	movs	r2, #64	@ 0x40
 800163a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001648:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800164c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001650:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001658:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800165c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001660:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800166e:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001670:	f003 fff4 	bl	800565c <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800167a:	f001 f997 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	@ 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40007400 	.word	0x40007400
 8001698:	58024400 	.word	0x58024400
 800169c:	58020000 	.word	0x58020000
 80016a0:	24002a8c 	.word	0x24002a8c
 80016a4:	40020028 	.word	0x40020028

080016a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_DMA_Init+0x4c>)
 80016b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <MX_DMA_Init+0x4c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <MX_DMA_Init+0x4c>)
 80016c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	200b      	movs	r0, #11
 80016d2:	f003 fdb2 	bl	800523a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016d6:	200b      	movs	r0, #11
 80016d8:	f003 fdc9 	bl	800526e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2101      	movs	r1, #1
 80016e0:	200c      	movs	r0, #12
 80016e2:	f003 fdaa 	bl	800523a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016e6:	200c      	movs	r0, #12
 80016e8:	f003 fdc1 	bl	800526e <HAL_NVIC_EnableIRQ>

}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58024400 	.word	0x58024400

080016f8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	4a32      	ldr	r2, [pc, #200]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001732:	4a2b      	ldr	r2, [pc, #172]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001750:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176e:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2102      	movs	r1, #2
 800178a:	4816      	ldr	r0, [pc, #88]	@ (80017e4 <MX_GPIO_Init+0xec>)
 800178c:	f007 fa12 	bl	8008bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001796:	4814      	ldr	r0, [pc, #80]	@ (80017e8 <MX_GPIO_Init+0xf0>)
 8001798:	f007 fa0c 	bl	8008bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800179c:	2302      	movs	r3, #2
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <MX_GPIO_Init+0xec>)
 80017b4:	f006 ff44 	bl	8008640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_GPIO_Init+0xf0>)
 80017d2:	f006 ff35 	bl	8008640 <HAL_GPIO_Init>

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020000 	.word	0x58020000
 80017e8:	58020c00 	.word	0x58020c00

080017ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <MX_I2C1_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001864 <MX_I2C1_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_I2C1_Init+0x74>)
 80017f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001868 <MX_I2C1_Init+0x7c>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001804:	2201      	movs	r2, #1
 8001806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_I2C1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_I2C1_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001826:	480e      	ldr	r0, [pc, #56]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001828:	f007 f9de 	bl	8008be8 <HAL_I2C_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001832:	f001 f8bb 	bl	80029ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4809      	ldr	r0, [pc, #36]	@ (8001860 <MX_I2C1_Init+0x74>)
 800183a:	f007 fa65 	bl	8008d08 <HAL_I2CEx_ConfigAnalogFilter>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001844:	f001 f8b2 	bl	80029ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_I2C1_Init+0x74>)
 800184c:	f007 faa7 	bl	8008d9e <HAL_I2CEx_ConfigDigitalFilter>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001856:	f001 f8a9 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24002b04 	.word	0x24002b04
 8001864:	40005400 	.word	0x40005400
 8001868:	00b03fdb 	.word	0x00b03fdb

0800186c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0ba      	sub	sp, #232	@ 0xe8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	22c0      	movs	r2, #192	@ 0xc0
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f00e ffb3 	bl	80107f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a26      	ldr	r2, [pc, #152]	@ (8001930 <HAL_I2C_MspInit+0xc4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d145      	bne.n	8001928 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800189c:	f04f 0208 	mov.w	r2, #8
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4618      	mov	r0, r3
 80018b4:	f008 fae2 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80018be:	f001 f875 	bl	80029ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e0:	23c0      	movs	r3, #192	@ 0xc0
 80018e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f8:	2304      	movs	r3, #4
 80018fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <HAL_I2C_MspInit+0xcc>)
 8001906:	f006 fe9b 	bl	8008640 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 800190c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001910:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 8001912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001916:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 800191c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001928:	bf00      	nop
 800192a:	37e8      	adds	r7, #232	@ 0xe8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40005400 	.word	0x40005400
 8001934:	58024400 	.word	0x58024400
 8001938:	58020400 	.word	0x58020400

0800193c <PWM_Output>:

uint8_t CNT=0;


void PWM_Output(int frequency , double r)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	ed87 0b00 	vstr	d0, [r7]
	rate = r;
 8001948:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <PWM_Output+0x68>)
 800194a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800194e:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001952:	2104      	movs	r1, #4
 8001954:	4814      	ldr	r0, [pc, #80]	@ (80019a8 <PWM_Output+0x6c>)
 8001956:	f00b f94f 	bl	800cbf8 <HAL_TIM_PWM_Start>
	//WRITE_REG(TIM4->CCR1,(TIM4->ARR+1)*rate);
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,(TIM4->ARR+1)*rate);
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <PWM_Output+0x70>)
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	3301      	adds	r3, #1
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001968:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <PWM_Output+0x68>)
 800196a:	ed93 7b00 	vldr	d7, [r3]
 800196e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <PWM_Output+0x6c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800197a:	ee17 2a90 	vmov	r2, s15
 800197e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->ARR=1000000/frequency-1;
 8001980:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <PWM_Output+0x74>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	fb92 f3f3 	sdiv	r3, r2, r3
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <PWM_Output+0x70>)
 800198c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CR1 &= ~TIM_CR1_ARPE;
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <PWM_Output+0x70>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a06      	ldr	r2, [pc, #24]	@ (80019ac <PWM_Output+0x70>)
 8001994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001998:	6013      	str	r3, [r2, #0]
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2401d6d0 	.word	0x2401d6d0
 80019a8:	2401d704 	.word	0x2401d704
 80019ac:	40000800 	.word	0x40000800
 80019b0:	000f4240 	.word	0x000f4240

080019b4 <adc_init>:


void adc_init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
	MX_ADC1_Init();
 80019b8:	f7ff fc86 	bl	80012c8 <MX_ADC1_Init>
	HAL_Delay(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f001 fccd 	bl	800335c <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80019c2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80019c6:	2100      	movs	r1, #0
 80019c8:	481a      	ldr	r0, [pc, #104]	@ (8001a34 <adc_init+0x80>)
 80019ca:	f003 fa19 	bl	8004e00 <HAL_ADCEx_Calibration_Start>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <adc_init+0x32>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019d8:	222f      	movs	r2, #47	@ 0x2f
 80019da:	4917      	ldr	r1, [pc, #92]	@ (8001a38 <adc_init+0x84>)
 80019dc:	4817      	ldr	r0, [pc, #92]	@ (8001a3c <adc_init+0x88>)
 80019de:	f00c fb33 	bl	800e048 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 80019e2:	f000 ffe3 	bl	80029ac <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH_HIGH) != HAL_OK)
 80019e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ea:	4915      	ldr	r1, [pc, #84]	@ (8001a40 <adc_init+0x8c>)
 80019ec:	4811      	ldr	r0, [pc, #68]	@ (8001a34 <adc_init+0x80>)
 80019ee:	f002 fa3f 	bl	8003e70 <HAL_ADC_Start_DMA>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <adc_init+0x56>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019fc:	2225      	movs	r2, #37	@ 0x25
 80019fe:	4911      	ldr	r1, [pc, #68]	@ (8001a44 <adc_init+0x90>)
 8001a00:	480e      	ldr	r0, [pc, #56]	@ (8001a3c <adc_init+0x88>)
 8001a02:	f00c fb21 	bl	800e048 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001a06:	f000 ffd1 	bl	80029ac <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001a0a:	480f      	ldr	r0, [pc, #60]	@ (8001a48 <adc_init+0x94>)
 8001a0c:	f00a ff8c 	bl	800c928 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001a10:	bf00      	nop
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <adc_init+0x98>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0fa      	beq.n	8001a12 <adc_init+0x5e>
	AdcConvEnd = 0;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <adc_init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8001a22:	4804      	ldr	r0, [pc, #16]	@ (8001a34 <adc_init+0x80>)
 8001a24:	f002 f8a4 	bl	8003b70 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001a28:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <adc_init+0x94>)
 8001a2a:	f00a ffed 	bl	800ca08 <HAL_TIM_Base_Stop>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2400299c 	.word	0x2400299c
 8001a38:	08011f60 	.word	0x08011f60
 8001a3c:	2401d834 	.word	0x2401d834
 8001a40:	24000180 	.word	0x24000180
 8001a44:	08011f90 	.word	0x08011f90
 8001a48:	2401d7e8 	.word	0x2401d7e8
 8001a4c:	24002b58 	.word	0x24002b58

08001a50 <adc_music_init>:


void adc_music_init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
	MX_ADC1_Init();
 8001a54:	f7ff fc38 	bl	80012c8 <MX_ADC1_Init>
	HAL_Delay(1);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f001 fc7f 	bl	800335c <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001a5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001a62:	2100      	movs	r1, #0
 8001a64:	481a      	ldr	r0, [pc, #104]	@ (8001ad0 <adc_music_init+0x80>)
 8001a66:	f003 f9cb 	bl	8004e00 <HAL_ADCEx_Calibration_Start>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <adc_music_init+0x32>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a74:	222f      	movs	r2, #47	@ 0x2f
 8001a76:	4917      	ldr	r1, [pc, #92]	@ (8001ad4 <adc_music_init+0x84>)
 8001a78:	4817      	ldr	r0, [pc, #92]	@ (8001ad8 <adc_music_init+0x88>)
 8001a7a:	f00c fae5 	bl	800e048 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001a7e:	f000 ff95 	bl	80029ac <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_music_data, FO_LENGTH_MIDDLE) != HAL_OK)
 8001a82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a86:	4915      	ldr	r1, [pc, #84]	@ (8001adc <adc_music_init+0x8c>)
 8001a88:	4811      	ldr	r0, [pc, #68]	@ (8001ad0 <adc_music_init+0x80>)
 8001a8a:	f002 f9f1 	bl	8003e70 <HAL_ADC_Start_DMA>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <adc_music_init+0x56>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a98:	2225      	movs	r2, #37	@ 0x25
 8001a9a:	4911      	ldr	r1, [pc, #68]	@ (8001ae0 <adc_music_init+0x90>)
 8001a9c:	480e      	ldr	r0, [pc, #56]	@ (8001ad8 <adc_music_init+0x88>)
 8001a9e:	f00c fad3 	bl	800e048 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001aa2:	f000 ff83 	bl	80029ac <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001aa6:	480f      	ldr	r0, [pc, #60]	@ (8001ae4 <adc_music_init+0x94>)
 8001aa8:	f00a ff3e 	bl	800c928 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001aac:	bf00      	nop
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <adc_music_init+0x98>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0fa      	beq.n	8001aae <adc_music_init+0x5e>
	AdcConvEnd = 0;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <adc_music_init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8001abe:	4804      	ldr	r0, [pc, #16]	@ (8001ad0 <adc_music_init+0x80>)
 8001ac0:	f002 f856 	bl	8003b70 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001ac4:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <adc_music_init+0x94>)
 8001ac6:	f00a ff9f 	bl	800ca08 <HAL_TIM_Base_Stop>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400299c 	.word	0x2400299c
 8001ad4:	08011f60 	.word	0x08011f60
 8001ad8:	2401d834 	.word	0x2401d834
 8001adc:	24000980 	.word	0x24000980
 8001ae0:	08011f90 	.word	0x08011f90
 8001ae4:	2401d7e8 	.word	0x2401d7e8
 8001ae8:	24002b58 	.word	0x24002b58

08001aec <Para_Init>:



void Para_Init(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

	 hold_music = 0;
 8001af0:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <Para_Init+0x9c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
	 hold_voice = 0;
 8001af6:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <Para_Init+0xa0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
	 hold_weak = 0;
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <Para_Init+0xa4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
//	 human_killed = 0;
//	 music_killed = 0;

	for (i = 0 ; i < 4 ; i ++)
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <Para_Init+0xa8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e015      	b.n	8001b36 <Para_Init+0x4a>
		  {
			  max[i] = 0;
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <Para_Init+0xa8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a22      	ldr	r2, [pc, #136]	@ (8001b98 <Para_Init+0xac>)
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	18d1      	adds	r1, r2, r3
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9c1 2300 	strd	r2, r3, [r1]
			  max_index[i] = 0;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <Para_Init+0xa8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1d      	ldr	r2, [pc, #116]	@ (8001b9c <Para_Init+0xb0>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0 ; i < 4 ; i ++)
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <Para_Init+0xa8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <Para_Init+0xa8>)
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <Para_Init+0xa8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	dde5      	ble.n	8001b0a <Para_Init+0x1e>

		  }
	for ( i = 0 ; i < FO_LENGTH_HIGH*2 ; i++)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <Para_Init+0xa8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e00f      	b.n	8001b66 <Para_Init+0x7a>
		  {
				  P[i] = 0;
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <Para_Init+0xa8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <Para_Init+0xb4>)
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	18d1      	adds	r1, r2, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9c1 2300 	strd	r2, r3, [r1]
	for ( i = 0 ; i < FO_LENGTH_HIGH*2 ; i++)
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <Para_Init+0xa8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <Para_Init+0xa8>)
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <Para_Init+0xa8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b6e:	dbea      	blt.n	8001b46 <Para_Init+0x5a>
				 // p[i] = 0;
		  }
		  count = 0;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <Para_Init+0xb8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
		  hold_on=0;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <Para_Init+0xbc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2401d6e0 	.word	0x2401d6e0
 8001b8c:	2401d6e4 	.word	0x2401d6e4
 8001b90:	2401d6e8 	.word	0x2401d6e8
 8001b94:	2401d4d8 	.word	0x2401d4d8
 8001b98:	24000000 	.word	0x24000000
 8001b9c:	24002b5c 	.word	0x24002b5c
 8001ba0:	24002b68 	.word	0x24002b68
 8001ba4:	2401d4e0 	.word	0x2401d4e0
 8001ba8:	2401d6c8 	.word	0x2401d6c8
 8001bac:	00000000 	.word	0x00000000

08001bb0 <ADC1_Get>:

void ADC1_Get(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

		adc_init();
 8001bb6:	f7ff fefd 	bl	80019b4 <adc_init>

		  for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	80fb      	strh	r3, [r7, #6]
 8001bbe:	e022      	b.n	8001c06 <ADC1_Get+0x56>
		  	    {
		  	    	  voltage = ((double)adc1_data[temp]*3.3)/65535 *3 ;
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <ADC1_Get+0x78>)
 8001bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001bd0:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001c18 <ADC1_Get+0x68>
 8001bd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bd8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001c20 <ADC1_Get+0x70>
 8001bdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001be0:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001be4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <ADC1_Get+0x7c>)
 8001bea:	ed83 7b00 	vstr	d7, [r3]

		  	    	  v[temp] = voltage ;
 8001bee:	88f9      	ldrh	r1, [r7, #6]
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <ADC1_Get+0x7c>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <ADC1_Get+0x80>)
 8001bf8:	00c9      	lsls	r1, r1, #3
 8001bfa:	4401      	add	r1, r0
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]
		  for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++)
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	3301      	adds	r3, #1
 8001c04:	80fb      	strh	r3, [r7, #6]
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0c:	d3d8      	bcc.n	8001bc0 <ADC1_Get+0x10>
//		  	    		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		  	    		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//		  	    		  count++;
//		  	    	  }
		  	    }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	66666666 	.word	0x66666666
 8001c1c:	400a6666 	.word	0x400a6666
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40efffe0 	.word	0x40efffe0
 8001c28:	24000180 	.word	0x24000180
 8001c2c:	2400ae90 	.word	0x2400ae90
 8001c30:	2400ae98 	.word	0x2400ae98
 8001c34:	00000000 	.word	0x00000000

08001c38 <ADC1_Get_Music>:



void ADC1_Get_Music(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_AUTORELOAD(&htim15, 500 -1);
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <ADC1_Get_Music+0xb0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001c46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c48:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <ADC1_Get_Music+0xb0>)
 8001c4a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001c4e:	60da      	str	r2, [r3, #12]
	  TIM15->ARR = 500 - 1;
 8001c50:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <ADC1_Get_Music+0xb4>)
 8001c52:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c
	  TIM15->CR1 &= ~TIM_CR1_ARPE;
 8001c58:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <ADC1_Get_Music+0xb4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a23      	ldr	r2, [pc, #140]	@ (8001cec <ADC1_Get_Music+0xb4>)
 8001c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c62:	6013      	str	r3, [r2, #0]
		adc_music_init();
 8001c64:	f7ff fef4 	bl	8001a50 <adc_music_init>

		  for (uint16_t temp = 0; temp< FO_LENGTH_MIDDLE;temp++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	80fb      	strh	r3, [r7, #6]
 8001c6c:	e026      	b.n	8001cbc <ADC1_Get_Music+0x84>
		  	    {
		  	    	  voltage = ((double)adc1_music_data[temp]*3.3)/65535 *3 ;
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf0 <ADC1_Get_Music+0xb8>)
 8001c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c7e:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001cd0 <ADC1_Get_Music+0x98>
 8001c82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c86:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 8001cd8 <ADC1_Get_Music+0xa0>
 8001c8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c8e:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001c92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <ADC1_Get_Music+0xbc>)
 8001c98:	ed83 7b00 	vstr	d7, [r3]

		  	    	  SP[temp] = voltage - 4.95;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <ADC1_Get_Music+0xbc>)
 8001c9e:	ed93 7b00 	vldr	d7, [r3]
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001ce0 <ADC1_Get_Music+0xa8>
 8001ca8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <ADC1_Get_Music+0xc0>)
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	ed83 7b00 	vstr	d7, [r3]
		  for (uint16_t temp = 0; temp< FO_LENGTH_MIDDLE;temp++)
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	80fb      	strh	r3, [r7, #6]
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cc2:	d3d4      	bcc.n	8001c6e <ADC1_Get_Music+0x36>
		  	    }
//		  for (uint16_t temp = 0; temp< 400;temp++)
//		  {
//			  SP[temp + FO_LENGTH_MIDDLE]  = 0;
//		  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	66666666 	.word	0x66666666
 8001cd4:	400a6666 	.word	0x400a6666
 8001cd8:	00000000 	.word	0x00000000
 8001cdc:	40efffe0 	.word	0x40efffe0
 8001ce0:	cccccccd 	.word	0xcccccccd
 8001ce4:	4013cccc 	.word	0x4013cccc
 8001ce8:	2401d7e8 	.word	0x2401d7e8
 8001cec:	40014000 	.word	0x40014000
 8001cf0:	24000980 	.word	0x24000980
 8001cf4:	2400ae90 	.word	0x2400ae90
 8001cf8:	2400d1b8 	.word	0x2400d1b8

08001cfc <HandleFFT>:
	  	    }
}


void HandleFFT(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
			  	  for (i = 1 ; i <= 1; i++)
 8001d02:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <HandleFFT+0xbc>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e04c      	b.n	8001da4 <HandleFFT+0xa8>
			  	  {
			  		  if (flag == 1)
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <HandleFFT+0xc0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d11b      	bne.n	8001d4a <HandleFFT+0x4e>
			  		  {
			  			X= Blackman(FO_LENGTH_HIGH ,(max_index[1]-max_index[1]/2),(max_index[1]+max_index[1]/2), v);
 8001d12:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <HandleFFT+0xc4>)
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc0 <HandleFFT+0xc4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da00      	bge.n	8001d20 <HandleFFT+0x24>
 8001d1e:	3301      	adds	r3, #1
 8001d20:	105b      	asrs	r3, r3, #1
 8001d22:	425b      	negs	r3, r3
 8001d24:	18d1      	adds	r1, r2, r3
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HandleFFT+0xc4>)
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <HandleFFT+0xc4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da00      	bge.n	8001d34 <HandleFFT+0x38>
 8001d32:	3301      	adds	r3, #1
 8001d34:	105b      	asrs	r3, r3, #1
 8001d36:	441a      	add	r2, r3
 8001d38:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <HandleFFT+0xc8>)
 8001d3a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d3e:	f7ff f8f7 	bl	8000f30 <Blackman>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <HandleFFT+0xcc>)
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e002      	b.n	8001d50 <HandleFFT+0x54>
			  		  }
			  		  else
			  		  {
			  			  X = v;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <HandleFFT+0xcc>)
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <HandleFFT+0xc8>)
 8001d4e:	601a      	str	r2, [r3, #0]
			  		  }

			  		  p = FFT_Mag(FO_LENGTH_HIGH , X);
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <HandleFFT+0xcc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d5a:	f7ff f805 	bl	8000d68 <FFT_Mag>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a1a      	ldr	r2, [pc, #104]	@ (8001dcc <HandleFFT+0xd0>)
 8001d62:	6013      	str	r3, [r2, #0]
			  		  for (int j = 0 ; j  <FO_LENGTH_HIGH/2 ; j++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	e013      	b.n	8001d92 <HandleFFT+0x96>
			  		  {
			  			  P[j]=p[j] * 5;
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HandleFFT+0xd0>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	ed93 7b00 	vldr	d7, [r3]
 8001d78:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8001d7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d80:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <HandleFFT+0xd4>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	ed83 7b00 	vstr	d7, [r3]
			  		  for (int j = 0 ; j  <FO_LENGTH_HIGH/2 ; j++)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d98:	dbe7      	blt.n	8001d6a <HandleFFT+0x6e>
			  	  for (i = 1 ; i <= 1; i++)
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <HandleFFT+0xbc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	4a05      	ldr	r2, [pc, #20]	@ (8001db8 <HandleFFT+0xbc>)
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <HandleFFT+0xbc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	ddae      	ble.n	8001d0a <HandleFFT+0xe>
			  		  }
			  	  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2401d4d8 	.word	0x2401d4d8
 8001dbc:	2401d4dc 	.word	0x2401d4dc
 8001dc0:	24002b5c 	.word	0x24002b5c
 8001dc4:	2400ae98 	.word	0x2400ae98
 8001dc8:	24002b64 	.word	0x24002b64
 8001dcc:	2400ae88 	.word	0x2400ae88
 8001dd0:	24002b68 	.word	0x24002b68

08001dd4 <PrintMag>:

void PrintMag(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	 for (i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 8001dd8:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <PrintMag+0xa8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e034      	b.n	8001e4a <PrintMag+0x76>
	 {

//		 sprintf(str_2 , "%.5lf" , (P[i]));
//		 HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		 HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
		 if (i > 10 && i < 1000)
 8001de0:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <PrintMag+0xa8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b0a      	cmp	r3, #10
 8001de6:	dd2b      	ble.n	8001e40 <PrintMag+0x6c>
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <PrintMag+0xa8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001df0:	da26      	bge.n	8001e40 <PrintMag+0x6c>
		 {
			 if ( (P[i] > 2 ||hold_on >=1 )  )
 8001df2:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <PrintMag+0xa8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a22      	ldr	r2, [pc, #136]	@ (8001e80 <PrintMag+0xac>)
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	ed93 7b00 	vldr	d7, [r3]
 8001e00:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 8001e04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	dc03      	bgt.n	8001e16 <PrintMag+0x42>
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <PrintMag+0xb0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dd08      	ble.n	8001e28 <PrintMag+0x54>
		 	 {
				 HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2102      	movs	r1, #2
 8001e1a:	481b      	ldr	r0, [pc, #108]	@ (8001e88 <PrintMag+0xb4>)
 8001e1c:	f006 feca 	bl	8008bb4 <HAL_GPIO_WritePin>
				 hold_on = 1;
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <PrintMag+0xb0>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e00b      	b.n	8001e40 <PrintMag+0x6c>
		 	 }
			 else if (hold_on ==0)
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <PrintMag+0xb0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <PrintMag+0x6c>
			 {
				 hold_on  =0 ;
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <PrintMag+0xb0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
				 HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4813      	ldr	r0, [pc, #76]	@ (8001e88 <PrintMag+0xb4>)
 8001e3c:	f006 feba 	bl	8008bb4 <HAL_GPIO_WritePin>
	 for (i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <PrintMag+0xa8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <PrintMag+0xa8>)
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <PrintMag+0xa8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e52:	dbc5      	blt.n	8001de0 <PrintMag+0xc>
			 }
		 }
	 }
	 max[4] = 0;
 8001e54:	490d      	ldr	r1, [pc, #52]	@ (8001e8c <PrintMag+0xb8>)
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	 if (hold_on)USART1PutString("t4.txt=\"Get Sound!\"\xff\xff\xff");
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <PrintMag+0xb0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <PrintMag+0x9e>
 8001e6a:	4809      	ldr	r0, [pc, #36]	@ (8001e90 <PrintMag+0xbc>)
 8001e6c:	f001 f99a 	bl	80031a4 <USART1PutString>
	 else {USART1PutString("t4.txt=\"Weak Sound!\"\xff\xff\xff");}
}
 8001e70:	e002      	b.n	8001e78 <PrintMag+0xa4>
	 else {USART1PutString("t4.txt=\"Weak Sound!\"\xff\xff\xff");}
 8001e72:	4808      	ldr	r0, [pc, #32]	@ (8001e94 <PrintMag+0xc0>)
 8001e74:	f001 f996 	bl	80031a4 <USART1PutString>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2401d4d8 	.word	0x2401d4d8
 8001e80:	24002b68 	.word	0x24002b68
 8001e84:	2401d6c8 	.word	0x2401d6c8
 8001e88:	58020000 	.word	0x58020000
 8001e8c:	24000000 	.word	0x24000000
 8001e90:	08011fb8 	.word	0x08011fb8
 8001e94:	08011fd0 	.word	0x08011fd0

08001e98 <ASK_Output>:

void ASK_Output(int fre)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	setFre(fre);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eaa:	eeb0 0b47 	vmov.f64	d0, d7
 8001eae:	f001 f85f 	bl	8002f70 <setFre>
	HAL_TIM_Base_Start_IT(&htim5);
 8001eb2:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <ASK_Output+0x28>)
 8001eb4:	f00a fdd0 	bl	800ca58 <HAL_TIM_Base_Start_IT>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2401d750 	.word	0x2401d750
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <Music_Init>:

void Music_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
	i = 0;
 8001ece:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb8 <Music_Init+0xf0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
	for (double j = 0 ; j < 60 ; j+=1)
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	e9c7 2300 	strd	r2, r3, [r7]
 8001ee0:	e025      	b.n	8001f2e <Music_Init+0x66>
	{
		Spec[i] =261.63 * pow(2.0 ,j/12);
 8001ee2:	ed97 7b00 	vldr	d7, [r7]
 8001ee6:	eeb2 5b08 	vmov.f64	d5, #40	@ 0x41400000  12.0
 8001eea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001eee:	eeb0 1b46 	vmov.f64	d1, d6
 8001ef2:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001ef6:	f00e fed7 	bl	8010ca8 <pow>
 8001efa:	eeb0 7b40 	vmov.f64	d7, d0
 8001efe:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <Music_Init+0xf0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8001fa8 <Music_Init+0xe0>
 8001f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fbc <Music_Init+0xf4>)
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	ed83 7b00 	vstr	d7, [r3]
					i++;
 8001f14:	4b28      	ldr	r3, [pc, #160]	@ (8001fb8 <Music_Init+0xf0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	4a27      	ldr	r2, [pc, #156]	@ (8001fb8 <Music_Init+0xf0>)
 8001f1c:	6013      	str	r3, [r2, #0]
	for (double j = 0 ; j < 60 ; j+=1)
 8001f1e:	ed97 7b00 	vldr	d7, [r7]
 8001f22:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001f26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f2a:	ed87 7b00 	vstr	d7, [r7]
 8001f2e:	ed97 7b00 	vldr	d7, [r7]
 8001f32:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001fb0 <Music_Init+0xe8>
 8001f36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	d4d0      	bmi.n	8001ee2 <Music_Init+0x1a>
	}
	__HAL_TIM_SET_AUTORELOAD(&htim15, 1000-1 );
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <Music_Init+0xf8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <Music_Init+0xf8>)
 8001f4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f50:	60da      	str	r2, [r3, #12]
		TIM15->ARR =  1000-1;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <Music_Init+0xfc>)
 8001f54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f58:	62da      	str	r2, [r3, #44]	@ 0x2c
		htim5.Init.Period = 1000-1;
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <Music_Init+0x100>)
 8001f5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f60:	60da      	str	r2, [r3, #12]
		TIM15->CR1 &= ~TIM_CR1_ARPE;
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <Music_Init+0xfc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <Music_Init+0xfc>)
 8001f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f6c:	6013      	str	r3, [r2, #0]
	i= 0 ;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <Music_Init+0xf0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
	max[0] = 0;
 8001f74:	4915      	ldr	r1, [pc, #84]	@ (8001fcc <Music_Init+0x104>)
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c1 2300 	strd	r2, r3, [r1]
	max[1] = 0;
 8001f82:	4912      	ldr	r1, [pc, #72]	@ (8001fcc <Music_Init+0x104>)
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	max[2] = 0;
 8001f90:	490e      	ldr	r1, [pc, #56]	@ (8001fcc <Music_Init+0x104>)
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	7ae147ae 	.word	0x7ae147ae
 8001fac:	40705a14 	.word	0x40705a14
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	404e0000 	.word	0x404e0000
 8001fb8:	2401d4d8 	.word	0x2401d4d8
 8001fbc:	2401d4e8 	.word	0x2401d4e8
 8001fc0:	2401d7e8 	.word	0x2401d7e8
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	2401d750 	.word	0x2401d750
 8001fcc:	24000000 	.word	0x24000000

08001fd0 <Is_Music_OZWithInit>:
		{
			HAL_UART_Transmit(&huart1 ,(uint8_t *)"Not Music!\n", 11 , HAL_MAX_DELAY);
		}
}
void Is_Music_OZWithInit(void )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
	ADC1_Get_Music();
 8001fd6:	f7ff fe2f 	bl	8001c38 <ADC1_Get_Music>
	for ( i = 0 ; i < FO_LENGTH_MIDDLE ; i++)
 8001fda:	4b8b      	ldr	r3, [pc, #556]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e01f      	b.n	8002022 <Is_Music_OZWithInit+0x52>
	{
		if (fabs(SP[i]) > max[4])
 8001fe2:	4b89      	ldr	r3, [pc, #548]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a89      	ldr	r2, [pc, #548]	@ (800220c <Is_Music_OZWithInit+0x23c>)
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	ed93 7b00 	vldr	d7, [r3]
 8001ff0:	eeb0 6bc7 	vabs.f64	d6, d7
 8001ff4:	4b86      	ldr	r3, [pc, #536]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 8001ff6:	ed93 7b08 	vldr	d7, [r3, #32]
 8001ffa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	dd09      	ble.n	8002018 <Is_Music_OZWithInit+0x48>
		{
			max[4] = SP[i];
 8002004:	4b80      	ldr	r3, [pc, #512]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a80      	ldr	r2, [pc, #512]	@ (800220c <Is_Music_OZWithInit+0x23c>)
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	497f      	ldr	r1, [pc, #508]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 8002014:	e9c1 2308 	strd	r2, r3, [r1, #32]
	for ( i = 0 ; i < FO_LENGTH_MIDDLE ; i++)
 8002018:	4b7b      	ldr	r3, [pc, #492]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a7a      	ldr	r2, [pc, #488]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b79      	ldr	r3, [pc, #484]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800202a:	dbda      	blt.n	8001fe2 <Is_Music_OZWithInit+0x12>
		}
	}
	if (max[4] < 1.0 )
 800202c:	4b78      	ldr	r3, [pc, #480]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 800202e:	ed93 7b08 	vldr	d7, [r3, #32]
 8002032:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002036:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d524      	bpl.n	800208a <Is_Music_OZWithInit+0xba>
	{
		hold_weak++;
 8002040:	4b74      	ldr	r3, [pc, #464]	@ (8002214 <Is_Music_OZWithInit+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	4a73      	ldr	r2, [pc, #460]	@ (8002214 <Is_Music_OZWithInit+0x244>)
 8002048:	6013      	str	r3, [r2, #0]
		hold_weak%=3;
 800204a:	4b72      	ldr	r3, [pc, #456]	@ (8002214 <Is_Music_OZWithInit+0x244>)
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	4b72      	ldr	r3, [pc, #456]	@ (8002218 <Is_Music_OZWithInit+0x248>)
 8002050:	fb83 3201 	smull	r3, r2, r3, r1
 8002054:	17cb      	asrs	r3, r1, #31
 8002056:	1ad2      	subs	r2, r2, r3
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	1aca      	subs	r2, r1, r3
 8002060:	4b6c      	ldr	r3, [pc, #432]	@ (8002214 <Is_Music_OZWithInit+0x244>)
 8002062:	601a      	str	r2, [r3, #0]
		if(hold_weak ==1){
 8002064:	4b6b      	ldr	r3, [pc, #428]	@ (8002214 <Is_Music_OZWithInit+0x244>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <Is_Music_OZWithInit+0xac>
			USART1PutString("t4.txt=\"Weak Sound!\"\xff\xff\xff");
 800206c:	486b      	ldr	r0, [pc, #428]	@ (800221c <Is_Music_OZWithInit+0x24c>)
 800206e:	f001 f899 	bl	80031a4 <USART1PutString>

			HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	2102      	movs	r1, #2
 8002076:	486a      	ldr	r0, [pc, #424]	@ (8002220 <Is_Music_OZWithInit+0x250>)
 8002078:	f006 fd9c 	bl	8008bb4 <HAL_GPIO_WritePin>
		}
		max[4] = -1;
 800207c:	4964      	ldr	r1, [pc, #400]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <Is_Music_OZWithInit+0x254>)
 8002084:	e9c1 2308 	strd	r2, r3, [r1, #32]
		return ;
 8002088:	e141      	b.n	800230e <Is_Music_OZWithInit+0x33e>
	}
	HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2102      	movs	r1, #2
 800208e:	4864      	ldr	r0, [pc, #400]	@ (8002220 <Is_Music_OZWithInit+0x250>)
 8002090:	f006 fd90 	bl	8008bb4 <HAL_GPIO_WritePin>
	for (i= 0 ; i < FO_LENGTH_MIDDLE ; i++)
 8002094:	4b5c      	ldr	r3, [pc, #368]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e01b      	b.n	80020d4 <Is_Music_OZWithInit+0x104>
	{
		SP[i]/=max[4] /10;
 800209c:	4b5a      	ldr	r3, [pc, #360]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5a      	ldr	r2, [pc, #360]	@ (800220c <Is_Music_OZWithInit+0x23c>)
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	ed93 5b00 	vldr	d5, [r3]
 80020aa:	4b59      	ldr	r3, [pc, #356]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 80020ac:	ed93 7b08 	vldr	d7, [r3, #32]
 80020b0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80020b4:	ee87 6b04 	vdiv.f64	d6, d7, d4
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020c0:	4a52      	ldr	r2, [pc, #328]	@ (800220c <Is_Music_OZWithInit+0x23c>)
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	ed83 7b00 	vstr	d7, [r3]
	for (i= 0 ; i < FO_LENGTH_MIDDLE ; i++)
 80020ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020dc:	dbde      	blt.n	800209c <Is_Music_OZWithInit+0xcc>
//		  sprintf(str_2 , "%.5f" , SP[i]);
//		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
	max[4] = 0;
 80020de:	494c      	ldr	r1, [pc, #304]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	double r1 = 0.5;
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <Is_Music_OZWithInit+0x258>)
 80020f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double r2 = 0.2 ;
 80020f6:	a342      	add	r3, pc, #264	@ (adr r3, 8002200 <Is_Music_OZWithInit+0x230>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	int a1 = OverOZ_Num_Get(r1 , FO_LENGTH_MIDDLE, SP);
 8002100:	4942      	ldr	r1, [pc, #264]	@ (800220c <Is_Music_OZWithInit+0x23c>)
 8002102:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002106:	ed97 0b04 	vldr	d0, [r7, #16]
 800210a:	f7ff f89d 	bl	8001248 <OverOZ_Num_Get>
 800210e:	6078      	str	r0, [r7, #4]
	int a2 = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
	max[1] = 0;
 8002114:	493e      	ldr	r1, [pc, #248]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	p =FFT_Mag_sqrt(FO_LENGTH_MIDDLE ,SP );
 8002122:	493a      	ldr	r1, [pc, #232]	@ (800220c <Is_Music_OZWithInit+0x23c>)
 8002124:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002128:	f7fe fe9c 	bl	8000e64 <FFT_Mag_sqrt>
 800212c:	4603      	mov	r3, r0
 800212e:	4a3f      	ldr	r2, [pc, #252]	@ (800222c <Is_Music_OZWithInit+0x25c>)
 8002130:	6013      	str	r3, [r2, #0]
	for (int l = 0 ; l < FO_LENGTH_MIDDLE/2 ; l++)
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e022      	b.n	800217e <Is_Music_OZWithInit+0x1ae>
			{
				if (max[1] < p[l] && l > 10 && l < 4000)
 8002138:	4b35      	ldr	r3, [pc, #212]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 800213a:	ed93 6b02 	vldr	d6, [r3, #8]
 800213e:	4b3b      	ldr	r3, [pc, #236]	@ (800222c <Is_Music_OZWithInit+0x25c>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	ed93 7b00 	vldr	d7, [r3]
 800214c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	d510      	bpl.n	8002178 <Is_Music_OZWithInit+0x1a8>
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b0a      	cmp	r3, #10
 800215a:	dd0d      	ble.n	8002178 <Is_Music_OZWithInit+0x1a8>
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002162:	da09      	bge.n	8002178 <Is_Music_OZWithInit+0x1a8>
				{
					max[1] = p[l];
 8002164:	4b31      	ldr	r3, [pc, #196]	@ (800222c <Is_Music_OZWithInit+0x25c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	4927      	ldr	r1, [pc, #156]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 8002174:	e9c1 2302 	strd	r2, r3, [r1, #8]
	for (int l = 0 ; l < FO_LENGTH_MIDDLE/2 ; l++)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3301      	adds	r3, #1
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002184:	dbd8      	blt.n	8002138 <Is_Music_OZWithInit+0x168>
//				sprintf(str_2 , "%.5lf" , p[l]);
//				HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//				HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
			}

	for (i = 0 ; i < FO_LENGTH_MIDDLE/2 ; i++)
 8002186:	4b20      	ldr	r3, [pc, #128]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e01b      	b.n	80021c6 <Is_Music_OZWithInit+0x1f6>
	{
		if (p[i] > r2 * max[1])a2++;
 800218e:	4b27      	ldr	r3, [pc, #156]	@ (800222c <Is_Music_OZWithInit+0x25c>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	ed93 6b00 	vldr	d6, [r3]
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <Is_Music_OZWithInit+0x240>)
 80021a0:	ed93 5b02 	vldr	d5, [r3, #8]
 80021a4:	ed97 7b02 	vldr	d7, [r7, #8]
 80021a8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80021b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b4:	dd02      	ble.n	80021bc <Is_Music_OZWithInit+0x1ec>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
	for (i = 0 ; i < FO_LENGTH_MIDDLE/2 ; i++)
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <Is_Music_OZWithInit+0x238>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021ce:	dbde      	blt.n	800218e <Is_Music_OZWithInit+0x1be>
//	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//	sprintf(str_2 , "%d" , a2);
//	HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 4   ,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//	sprintf(str_2 , "%d" , 2);
	if ( a1 >90 || a2 < 50)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b5a      	cmp	r3, #90	@ 0x5a
 80021d4:	dc02      	bgt.n	80021dc <Is_Music_OZWithInit+0x20c>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b31      	cmp	r3, #49	@ 0x31
 80021da:	dc2e      	bgt.n	800223a <Is_Music_OZWithInit+0x26a>
	{
		if (hold_music < 3)hold_music ++;
 80021dc:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <Is_Music_OZWithInit+0x260>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	dc04      	bgt.n	80021ee <Is_Music_OZWithInit+0x21e>
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <Is_Music_OZWithInit+0x260>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	4a11      	ldr	r2, [pc, #68]	@ (8002230 <Is_Music_OZWithInit+0x260>)
 80021ec:	6013      	str	r3, [r2, #0]
		hold_voice = ((hold_music >=2)?(5):(0));
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <Is_Music_OZWithInit+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	dd1e      	ble.n	8002234 <Is_Music_OZWithInit+0x264>
 80021f6:	2305      	movs	r3, #5
 80021f8:	e01d      	b.n	8002236 <Is_Music_OZWithInit+0x266>
 80021fa:	bf00      	nop
 80021fc:	f3af 8000 	nop.w
 8002200:	9999999a 	.word	0x9999999a
 8002204:	3fc99999 	.word	0x3fc99999
 8002208:	2401d4d8 	.word	0x2401d4d8
 800220c:	2400d1b8 	.word	0x2400d1b8
 8002210:	24000000 	.word	0x24000000
 8002214:	2401d6e8 	.word	0x2401d6e8
 8002218:	55555556 	.word	0x55555556
 800221c:	08011fd0 	.word	0x08011fd0
 8002220:	58020000 	.word	0x58020000
 8002224:	bff00000 	.word	0xbff00000
 8002228:	3fe00000 	.word	0x3fe00000
 800222c:	2400ae88 	.word	0x2400ae88
 8002230:	2401d6e0 	.word	0x2401d6e0
 8002234:	2300      	movs	r3, #0
 8002236:	4a3a      	ldr	r2, [pc, #232]	@ (8002320 <Is_Music_OZWithInit+0x350>)
 8002238:	6013      	str	r3, [r2, #0]
	}
	if (a1 < 90  )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b59      	cmp	r3, #89	@ 0x59
 800223e:	dc0b      	bgt.n	8002258 <Is_Music_OZWithInit+0x288>
	{
		if (hold_music >=3){hold_voice--; }
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <Is_Music_OZWithInit+0x354>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b02      	cmp	r3, #2
 8002246:	dd04      	ble.n	8002252 <Is_Music_OZWithInit+0x282>
 8002248:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <Is_Music_OZWithInit+0x350>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	4a34      	ldr	r2, [pc, #208]	@ (8002320 <Is_Music_OZWithInit+0x350>)
 8002250:	6013      	str	r3, [r2, #0]
		hold_music = 0;
 8002252:	4b34      	ldr	r3, [pc, #208]	@ (8002324 <Is_Music_OZWithInit+0x354>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
	}
//	HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_2);
	if (hold_music >= 3 || hold_voice >= 5)
 8002258:	4b32      	ldr	r3, [pc, #200]	@ (8002324 <Is_Music_OZWithInit+0x354>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	dc03      	bgt.n	8002268 <Is_Music_OZWithInit+0x298>
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <Is_Music_OZWithInit+0x350>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b04      	cmp	r3, #4
 8002266:	dd27      	ble.n	80022b8 <Is_Music_OZWithInit+0x2e8>
	{
		if (c == '7')
 8002268:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <Is_Music_OZWithInit+0x358>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b37      	cmp	r3, #55	@ 0x37
 800226e:	d115      	bne.n	800229c <Is_Music_OZWithInit+0x2cc>
		{
			USART1PutString("t4.txt=\"Music Killed!\"\xff\xff\xff");
 8002270:	482e      	ldr	r0, [pc, #184]	@ (800232c <Is_Music_OZWithInit+0x35c>)
 8002272:	f000 ff97 	bl	80031a4 <USART1PutString>
			kill_human = 0;
 8002276:	4b2e      	ldr	r3, [pc, #184]	@ (8002330 <Is_Music_OZWithInit+0x360>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
			kill_music ++;
 800227c:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <Is_Music_OZWithInit+0x364>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a2c      	ldr	r2, [pc, #176]	@ (8002334 <Is_Music_OZWithInit+0x364>)
 8002284:	6013      	str	r3, [r2, #0]
			if(kill_music > 2)PWM_Output(40000 , 0.2);
 8002286:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <Is_Music_OZWithInit+0x364>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	dd3c      	ble.n	8002308 <Is_Music_OZWithInit+0x338>
 800228e:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8002318 <Is_Music_OZWithInit+0x348>
 8002292:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8002296:	f7ff fb51 	bl	800193c <PWM_Output>
			return ;
 800229a:	e035      	b.n	8002308 <Is_Music_OZWithInit+0x338>
		}
		kill_music = 0;
 800229c:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <Is_Music_OZWithInit+0x364>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
		kill_human = 0;
 80022a2:	4b23      	ldr	r3, [pc, #140]	@ (8002330 <Is_Music_OZWithInit+0x360>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
		USART1PutString("t4.txt=\"Music!\"\xff\xff\xff");
 80022a8:	4823      	ldr	r0, [pc, #140]	@ (8002338 <Is_Music_OZWithInit+0x368>)
 80022aa:	f000 ff7b 	bl	80031a4 <USART1PutString>
		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_2);
 80022ae:	2104      	movs	r1, #4
 80022b0:	4822      	ldr	r0, [pc, #136]	@ (800233c <Is_Music_OZWithInit+0x36c>)
 80022b2:	f00a fdaf 	bl	800ce14 <HAL_TIM_PWM_Stop>
 80022b6:	e02a      	b.n	800230e <Is_Music_OZWithInit+0x33e>
	}
	else
	{
		if (c == '6')
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <Is_Music_OZWithInit+0x358>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b36      	cmp	r3, #54	@ 0x36
 80022be:	d115      	bne.n	80022ec <Is_Music_OZWithInit+0x31c>
			{
			USART1PutString("t4.txt=\"Human Sound Killed\"\xff\xff\xff");
 80022c0:	481f      	ldr	r0, [pc, #124]	@ (8002340 <Is_Music_OZWithInit+0x370>)
 80022c2:	f000 ff6f 	bl	80031a4 <USART1PutString>
			kill_human++;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <Is_Music_OZWithInit+0x360>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a18      	ldr	r2, [pc, #96]	@ (8002330 <Is_Music_OZWithInit+0x360>)
 80022ce:	6013      	str	r3, [r2, #0]
			kill_music = 0;
 80022d0:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <Is_Music_OZWithInit+0x364>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
			if(kill_human > 2)PWM_Output(40000 , 0.2);
 80022d6:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <Is_Music_OZWithInit+0x360>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	dd16      	ble.n	800230c <Is_Music_OZWithInit+0x33c>
 80022de:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8002318 <Is_Music_OZWithInit+0x348>
 80022e2:	f649 4040 	movw	r0, #40000	@ 0x9c40
 80022e6:	f7ff fb29 	bl	800193c <PWM_Output>
				return ;
 80022ea:	e00f      	b.n	800230c <Is_Music_OZWithInit+0x33c>

			}
		kill_music = 0;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <Is_Music_OZWithInit+0x364>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
		kill_human = 0;
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <Is_Music_OZWithInit+0x360>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
		USART1PutString("t4.txt=\"Human Sound!\"\xff\xff\xff");
 80022f8:	4812      	ldr	r0, [pc, #72]	@ (8002344 <Is_Music_OZWithInit+0x374>)
 80022fa:	f000 ff53 	bl	80031a4 <USART1PutString>
		HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_2);
 80022fe:	2104      	movs	r1, #4
 8002300:	480e      	ldr	r0, [pc, #56]	@ (800233c <Is_Music_OZWithInit+0x36c>)
 8002302:	f00a fd87 	bl	800ce14 <HAL_TIM_PWM_Stop>
 8002306:	e002      	b.n	800230e <Is_Music_OZWithInit+0x33e>
			return ;
 8002308:	bf00      	nop
 800230a:	e000      	b.n	800230e <Is_Music_OZWithInit+0x33e>
				return ;
 800230c:	bf00      	nop
	}
//	HAL_Delay(10);
}
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	f3af 8000 	nop.w
 8002318:	9999999a 	.word	0x9999999a
 800231c:	3fc99999 	.word	0x3fc99999
 8002320:	2401d6e4 	.word	0x2401d6e4
 8002324:	2401d6e0 	.word	0x2401d6e0
 8002328:	24000028 	.word	0x24000028
 800232c:	08012008 	.word	0x08012008
 8002330:	2401d6f8 	.word	0x2401d6f8
 8002334:	2401d6fc 	.word	0x2401d6fc
 8002338:	08012024 	.word	0x08012024
 800233c:	2401d704 	.word	0x2401d704
 8002340:	08012038 	.word	0x08012038
 8002344:	08012058 	.word	0x08012058

08002348 <ADC_FFT>:

void ADC_FFT(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	flag = 0;
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <ADC_FFT+0x54>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
	Para_Init();
 8002352:	f7ff fbcb 	bl	8001aec <Para_Init>
	ADC1_Get();
 8002356:	f7ff fc2b 	bl	8001bb0 <ADC1_Get>
	//Input_Simulate();
	HandleFFT();
 800235a:	f7ff fccf 	bl	8001cfc <HandleFFT>
	PrintMag();
 800235e:	f7ff fd39 	bl	8001dd4 <PrintMag>
	if (c == '6' ||  c == '7'){f =1;}
 8002362:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <ADC_FFT+0x58>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b36      	cmp	r3, #54	@ 0x36
 8002368:	d003      	beq.n	8002372 <ADC_FFT+0x2a>
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <ADC_FFT+0x58>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b37      	cmp	r3, #55	@ 0x37
 8002370:	d103      	bne.n	800237a <ADC_FFT+0x32>
 8002372:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <ADC_FFT+0x5c>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e002      	b.n	8002380 <ADC_FFT+0x38>
	else {f = 0;}
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <ADC_FFT+0x5c>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
	if (c == '1' || c == '0'){HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_2);}
 8002380:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <ADC_FFT+0x58>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b31      	cmp	r3, #49	@ 0x31
 8002386:	d003      	beq.n	8002390 <ADC_FFT+0x48>
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <ADC_FFT+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b30      	cmp	r3, #48	@ 0x30
 800238e:	d103      	bne.n	8002398 <ADC_FFT+0x50>
 8002390:	2104      	movs	r1, #4
 8002392:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <ADC_FFT+0x60>)
 8002394:	f00a fd3e 	bl	800ce14 <HAL_TIM_PWM_Stop>
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	2401d4dc 	.word	0x2401d4dc
 80023a0:	24000028 	.word	0x24000028
 80023a4:	2401d6f4 	.word	0x2401d6f4
 80023a8:	2401d704 	.word	0x2401d704

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80023b2:	f000 fa9d 	bl	80028f0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80023b6:	4b4b      	ldr	r3, [pc, #300]	@ (80024e4 <main+0x138>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11b      	bne.n	80023fa <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023c2:	f3bf 8f4f 	dsb	sy
}
 80023c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023c8:	f3bf 8f6f 	isb	sy
}
 80023cc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80023ce:	4b45      	ldr	r3, [pc, #276]	@ (80024e4 <main+0x138>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80023d6:	f3bf 8f4f 	dsb	sy
}
 80023da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023dc:	f3bf 8f6f 	isb	sy
}
 80023e0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80023e2:	4b40      	ldr	r3, [pc, #256]	@ (80024e4 <main+0x138>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	4a3f      	ldr	r2, [pc, #252]	@ (80024e4 <main+0x138>)
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80023ee:	f3bf 8f4f 	dsb	sy
}
 80023f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023f4:	f3bf 8f6f 	isb	sy
}
 80023f8:	e000      	b.n	80023fc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80023fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80023fc:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <main+0x138>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d138      	bne.n	800247a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002408:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <main+0x138>)
 800240a:	2200      	movs	r2, #0
 800240c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002410:	f3bf 8f4f 	dsb	sy
}
 8002414:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002416:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <main+0x138>)
 8002418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800241c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0b5b      	lsrs	r3, r3, #13
 8002422:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002426:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800243a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002440:	4928      	ldr	r1, [pc, #160]	@ (80024e4 <main+0x138>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1e5a      	subs	r2, r3, #1
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ef      	bne.n	8002432 <main+0x86>
    } while(sets-- != 0U);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	60ba      	str	r2, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e5      	bne.n	8002428 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800245c:	f3bf 8f4f 	dsb	sy
}
 8002460:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <main+0x138>)
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	4a1f      	ldr	r2, [pc, #124]	@ (80024e4 <main+0x138>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800246e:	f3bf 8f4f 	dsb	sy
}
 8002472:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002474:	f3bf 8f6f 	isb	sy
}
 8002478:	e000      	b.n	800247c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800247a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800247c:	f000 fedc 	bl	8003238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002480:	f000 f83a 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002484:	f7ff f938 	bl	80016f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002488:	f7ff f90e 	bl	80016a8 <MX_DMA_Init>
  MX_TIM7_Init();
 800248c:	f000 fc36 	bl	8002cfc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002490:	f000 fdca 	bl	8003028 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002494:	f7ff f9aa 	bl	80017ec <MX_I2C1_Init>
  MX_TIM15_Init();
 8002498:	f000 fc66 	bl	8002d68 <MX_TIM15_Init>
  MX_DAC1_Init();
 800249c:	f7ff f858 	bl	8001550 <MX_DAC1_Init>
  MX_ADC1_Init();
 80024a0:	f7fe ff12 	bl	80012c8 <MX_ADC1_Init>
  MX_TIM5_Init();
 80024a4:	f000 fbdc 	bl	8002c60 <MX_TIM5_Init>
  MX_TIM4_Init();
 80024a8:	f000 fb80 	bl	8002bac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Music_Init();
 80024ac:	f7ff fd0c 	bl	8001ec8 <Music_Init>
  Para_Init();
 80024b0:	f7ff fb1c 	bl	8001aec <Para_Init>
  //adc_init();
//  ADC1_Get();
  ASK_Output(1000);
 80024b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024b8:	f7ff fcee 	bl	8001e98 <ASK_Output>
//  PWM_Output(1000 , 0.2);
  //Is_Music();
  //ADC1_Get();
  HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	2102      	movs	r1, #2
 80024c0:	4809      	ldr	r0, [pc, #36]	@ (80024e8 <main+0x13c>)
 80024c2:	f006 fb77 	bl	8008bb4 <HAL_GPIO_WritePin>
//  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&c,1);
 80024c6:	2201      	movs	r2, #1
 80024c8:	4908      	ldr	r1, [pc, #32]	@ (80024ec <main+0x140>)
 80024ca:	4809      	ldr	r0, [pc, #36]	@ (80024f0 <main+0x144>)
 80024cc:	f00b fe4a 	bl	800e164 <HAL_UART_Receive_IT>
//	  PWM_Output(1000 , 0.2);
//	  Is_Music_OZWithInit();
//	  PWM_Output(20000 , 0.2);
	  //ADC_FFT();
//	  PWM_Output(40000 , 0.92);
	  if (f==0){ADC_FFT();}
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <main+0x148>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <main+0x132>
 80024d8:	f7ff ff36 	bl	8002348 <ADC_FFT>
 80024dc:	e7f8      	b.n	80024d0 <main+0x124>
	  else {Is_Music_OZWithInit();}
 80024de:	f7ff fd77 	bl	8001fd0 <Is_Music_OZWithInit>
	  if (f==0){ADC_FFT();}
 80024e2:	e7f5      	b.n	80024d0 <main+0x124>
 80024e4:	e000ed00 	.word	0xe000ed00
 80024e8:	58020000 	.word	0x58020000
 80024ec:	24000028 	.word	0x24000028
 80024f0:	2401d834 	.word	0x2401d834
 80024f4:	2401d6f4 	.word	0x2401d6f4

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	@ 0x78
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002502:	224c      	movs	r2, #76	@ 0x4c
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f00e f976 	bl	80107f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	2220      	movs	r2, #32
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f00e f96f 	bl	80107f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800251a:	2002      	movs	r0, #2
 800251c:	f006 fc8c 	bl	8008e38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	4b4c      	ldr	r3, [pc, #304]	@ (8002658 <SystemClock_Config+0x160>)
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	4a4b      	ldr	r2, [pc, #300]	@ (8002658 <SystemClock_Config+0x160>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002530:	4b49      	ldr	r3, [pc, #292]	@ (8002658 <SystemClock_Config+0x160>)
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b48      	ldr	r3, [pc, #288]	@ (800265c <SystemClock_Config+0x164>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	4a47      	ldr	r2, [pc, #284]	@ (800265c <SystemClock_Config+0x164>)
 8002540:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002544:	6193      	str	r3, [r2, #24]
 8002546:	4b45      	ldr	r3, [pc, #276]	@ (800265c <SystemClock_Config+0x164>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002552:	bf00      	nop
 8002554:	4b41      	ldr	r3, [pc, #260]	@ (800265c <SystemClock_Config+0x164>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002560:	d1f8      	bne.n	8002554 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	4b3f      	ldr	r3, [pc, #252]	@ (8002660 <SystemClock_Config+0x168>)
 8002564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002568:	4a3d      	ldr	r2, [pc, #244]	@ (8002660 <SystemClock_Config+0x168>)
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002572:	4b3b      	ldr	r3, [pc, #236]	@ (8002660 <SystemClock_Config+0x168>)
 8002574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002580:	2300      	movs	r3, #0
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4b35      	ldr	r3, [pc, #212]	@ (800265c <SystemClock_Config+0x164>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a34      	ldr	r2, [pc, #208]	@ (800265c <SystemClock_Config+0x164>)
 800258a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b32      	ldr	r3, [pc, #200]	@ (800265c <SystemClock_Config+0x164>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <SystemClock_Config+0x160>)
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	4a2e      	ldr	r2, [pc, #184]	@ (8002658 <SystemClock_Config+0x160>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80025a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <SystemClock_Config+0x160>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025b2:	bf00      	nop
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <SystemClock_Config+0x164>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c0:	d1f8      	bne.n	80025b4 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025c2:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <SystemClock_Config+0x168>)
 80025c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <SystemClock_Config+0x168>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025dc:	2302      	movs	r3, #2
 80025de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e0:	2302      	movs	r3, #2
 80025e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80025e4:	2305      	movs	r3, #5
 80025e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80025e8:	23c0      	movs	r3, #192	@ 0xc0
 80025ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025ec:	2302      	movs	r3, #2
 80025ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025f0:	2302      	movs	r3, #2
 80025f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025f4:	2302      	movs	r3, #2
 80025f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80025f8:	2308      	movs	r3, #8
 80025fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002604:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002608:	4618      	mov	r0, r3
 800260a:	f006 fc4f 	bl	8008eac <HAL_RCC_OscConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002614:	f000 f9ca 	bl	80029ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002618:	233f      	movs	r3, #63	@ 0x3f
 800261a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261c:	2303      	movs	r3, #3
 800261e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002624:	2308      	movs	r3, #8
 8002626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002628:	2340      	movs	r3, #64	@ 0x40
 800262a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800262c:	2340      	movs	r3, #64	@ 0x40
 800262e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002636:	2340      	movs	r3, #64	@ 0x40
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	2104      	movs	r1, #4
 8002640:	4618      	mov	r0, r3
 8002642:	f007 f88f 	bl	8009764 <HAL_RCC_ClockConfig>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800264c:	f000 f9ae 	bl	80029ac <Error_Handler>
  }
}
 8002650:	bf00      	nop
 8002652:	3778      	adds	r7, #120	@ 0x78
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	58000400 	.word	0x58000400
 800265c:	58024800 	.word	0x58024800
 8002660:	58024400 	.word	0x58024400

08002664 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_ADC_ConvCpltCallback+0x1c>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	24002b58 	.word	0x24002b58

08002684 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
    if(TIM5 == htim->Instance)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1a      	ldr	r2, [pc, #104]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d116      	bne.n	80026c4 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
        if(CNT)
 8002696:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_TIM_PeriodElapsedCallback+0x2e>
    {
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026a4:	4817      	ldr	r0, [pc, #92]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026a6:	f006 fa85 	bl	8008bb4 <HAL_GPIO_WritePin>
     CNT=0;
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e008      	b.n	80026c4 <HAL_TIM_PeriodElapsedCallback+0x40>
    }
    else
    {
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80026b2:	2201      	movs	r2, #1
 80026b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026b8:	4812      	ldr	r0, [pc, #72]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026ba:	f006 fa7b 	bl	8008bb4 <HAL_GPIO_WritePin>
     CNT=1;
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]

    }
  }
    if (TIM4 == htim->Instance)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d111      	bne.n	80026f2 <HAL_TIM_PeriodElapsedCallback+0x6e>
    {
    	WRITE_REG(TIM4->CCR1,(TIM4->ARR+1)*rate);
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	3301      	adds	r3, #1
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80026de:	ed93 7b00 	vldr	d7, [r3]
 80026e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80026e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026ec:	ee17 2a90 	vmov	r2, s15
 80026f0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40000c00 	.word	0x40000c00
 8002700:	2401d700 	.word	0x2401d700
 8002704:	58020c00 	.word	0x58020c00
 8002708:	40000800 	.word	0x40000800
 800270c:	2401d6d0 	.word	0x2401d6d0

08002710 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
    if(huart->Instance==USART1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6a      	ldr	r2, [pc, #424]	@ (80028c8 <HAL_UART_RxCpltCallback+0x1b8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	f040 80bf 	bne.w	80028a2 <HAL_UART_RxCpltCallback+0x192>
    {
        if(c=='0')
 8002724:	4b69      	ldr	r3, [pc, #420]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b30      	cmp	r3, #48	@ 0x30
 800272a:	d108      	bne.n	800273e <HAL_UART_RxCpltCallback+0x2e>
        {
        	f = 0;
 800272c:	4b68      	ldr	r3, [pc, #416]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
        	aaa= 0.2;
 8002732:	4968      	ldr	r1, [pc, #416]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 8002734:	a35e      	add	r3, pc, #376	@ (adr r3, 80028b0 <HAL_UART_RxCpltCallback+0x1a0>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	e9c1 2300 	strd	r2, r3, [r1]
        }
        if(c=='1')
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b31      	cmp	r3, #49	@ 0x31
 8002744:	d108      	bne.n	8002758 <HAL_UART_RxCpltCallback+0x48>
        {
        	f = 0;
 8002746:	4b62      	ldr	r3, [pc, #392]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
        	aaa=  0.2;
 800274c:	4961      	ldr	r1, [pc, #388]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 800274e:	a358      	add	r3, pc, #352	@ (adr r3, 80028b0 <HAL_UART_RxCpltCallback+0x1a0>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	e9c1 2300 	strd	r2, r3, [r1]
        }
         if(c=='2')
 8002758:	4b5c      	ldr	r3, [pc, #368]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b32      	cmp	r3, #50	@ 0x32
 800275e:	d115      	bne.n	800278c <HAL_UART_RxCpltCallback+0x7c>
        {
        	 aaa+=0.1;
 8002760:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 8002762:	ed93 7b00 	vldr	d7, [r3]
 8002766:	ed9f 6b54 	vldr	d6, [pc, #336]	@ 80028b8 <HAL_UART_RxCpltCallback+0x1a8>
 800276a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800276e:	4b59      	ldr	r3, [pc, #356]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 8002770:	ed83 7b00 	vstr	d7, [r3]
        		 PWM_Output(40000 , aaa);
 8002774:	4b57      	ldr	r3, [pc, #348]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 8002776:	ed93 7b00 	vldr	d7, [r3]
 800277a:	eeb0 0b47 	vmov.f64	d0, d7
 800277e:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8002782:	f7ff f8db 	bl	800193c <PWM_Output>
        		 f = 0;
 8002786:	4b52      	ldr	r3, [pc, #328]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        }
        if(c=='3')
 800278c:	4b4f      	ldr	r3, [pc, #316]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b33      	cmp	r3, #51	@ 0x33
 8002792:	d115      	bne.n	80027c0 <HAL_UART_RxCpltCallback+0xb0>
        {
        	aaa+=0.01;
 8002794:	4b4f      	ldr	r3, [pc, #316]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 8002796:	ed93 7b00 	vldr	d7, [r3]
 800279a:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 80028c0 <HAL_UART_RxCpltCallback+0x1b0>
 800279e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80027a2:	4b4c      	ldr	r3, [pc, #304]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 80027a4:	ed83 7b00 	vstr	d7, [r3]
        	     PWM_Output(40000 , aaa);
 80027a8:	4b4a      	ldr	r3, [pc, #296]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 80027aa:	ed93 7b00 	vldr	d7, [r3]
 80027ae:	eeb0 0b47 	vmov.f64	d0, d7
 80027b2:	f649 4040 	movw	r0, #40000	@ 0x9c40
 80027b6:	f7ff f8c1 	bl	800193c <PWM_Output>
        	     f = 0;
 80027ba:	4b45      	ldr	r3, [pc, #276]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
        }
        if(c=='4')
 80027c0:	4b42      	ldr	r3, [pc, #264]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b34      	cmp	r3, #52	@ 0x34
 80027c6:	d115      	bne.n	80027f4 <HAL_UART_RxCpltCallback+0xe4>
        {
        	aaa-=0.1;
 80027c8:	4b42      	ldr	r3, [pc, #264]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 80027ca:	ed93 7b00 	vldr	d7, [r3]
 80027ce:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80028b8 <HAL_UART_RxCpltCallback+0x1a8>
 80027d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027d6:	4b3f      	ldr	r3, [pc, #252]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 80027d8:	ed83 7b00 	vstr	d7, [r3]
        		 PWM_Output(40000 , aaa);
 80027dc:	4b3d      	ldr	r3, [pc, #244]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 80027de:	ed93 7b00 	vldr	d7, [r3]
 80027e2:	eeb0 0b47 	vmov.f64	d0, d7
 80027e6:	f649 4040 	movw	r0, #40000	@ 0x9c40
 80027ea:	f7ff f8a7 	bl	800193c <PWM_Output>
        		 f = 0;
 80027ee:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
        }
        if(c=='5')
 80027f4:	4b35      	ldr	r3, [pc, #212]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b35      	cmp	r3, #53	@ 0x35
 80027fa:	d115      	bne.n	8002828 <HAL_UART_RxCpltCallback+0x118>
        {
        	aaa-=0.01;
 80027fc:	4b35      	ldr	r3, [pc, #212]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 80027fe:	ed93 7b00 	vldr	d7, [r3]
 8002802:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 80028c0 <HAL_UART_RxCpltCallback+0x1b0>
 8002806:	ee37 7b46 	vsub.f64	d7, d7, d6
 800280a:	4b32      	ldr	r3, [pc, #200]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 800280c:	ed83 7b00 	vstr	d7, [r3]
        		PWM_Output(40000 , aaa);
 8002810:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <HAL_UART_RxCpltCallback+0x1c4>)
 8002812:	ed93 7b00 	vldr	d7, [r3]
 8002816:	eeb0 0b47 	vmov.f64	d0, d7
 800281a:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800281e:	f7ff f88d 	bl	800193c <PWM_Output>
        		f = 0;
 8002822:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
        }
         if(c=='6')
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b36      	cmp	r3, #54	@ 0x36
 800282e:	d117      	bne.n	8002860 <HAL_UART_RxCpltCallback+0x150>
        {
        	 human_killed=  1;
 8002830:	4b29      	ldr	r3, [pc, #164]	@ (80028d8 <HAL_UART_RxCpltCallback+0x1c8>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
        	 music_killed = 0;
 8002836:	4b29      	ldr	r3, [pc, #164]	@ (80028dc <HAL_UART_RxCpltCallback+0x1cc>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 	  		if (kill_human){PWM_Output(40000 , 0.2);}
 800283c:	4b28      	ldr	r3, [pc, #160]	@ (80028e0 <HAL_UART_RxCpltCallback+0x1d0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_UART_RxCpltCallback+0x142>
 8002844:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 80028b0 <HAL_UART_RxCpltCallback+0x1a0>
 8002848:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800284c:	f7ff f876 	bl	800193c <PWM_Output>
 8002850:	e003      	b.n	800285a <HAL_UART_RxCpltCallback+0x14a>
 	  		else {HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);}
 8002852:	2104      	movs	r1, #4
 8002854:	4823      	ldr	r0, [pc, #140]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1d4>)
 8002856:	f00a fadd 	bl	800ce14 <HAL_TIM_PWM_Stop>
        	 f= 1;
 800285a:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]
        }
        if(c=='7')
 8002860:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b37      	cmp	r3, #55	@ 0x37
 8002866:	d117      	bne.n	8002898 <HAL_UART_RxCpltCallback+0x188>
        {
        	human_killed=  1;
 8002868:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <HAL_UART_RxCpltCallback+0x1c8>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
        	music_killed = 0;
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_UART_RxCpltCallback+0x1cc>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
        	f = 1;
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_UART_RxCpltCallback+0x1c0>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
	  		if (kill_music){PWM_Output(40000 , 0.2);}
 800287a:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_UART_RxCpltCallback+0x1d8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_UART_RxCpltCallback+0x180>
 8002882:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 80028b0 <HAL_UART_RxCpltCallback+0x1a0>
 8002886:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800288a:	f7ff f857 	bl	800193c <PWM_Output>
 800288e:	e003      	b.n	8002898 <HAL_UART_RxCpltCallback+0x188>
	  		else {HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_2);}
 8002890:	2104      	movs	r1, #4
 8002892:	4814      	ldr	r0, [pc, #80]	@ (80028e4 <HAL_UART_RxCpltCallback+0x1d4>)
 8002894:	f00a fabe 	bl	800ce14 <HAL_TIM_PWM_Stop>
        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&c,1);
 8002898:	2201      	movs	r2, #1
 800289a:	490c      	ldr	r1, [pc, #48]	@ (80028cc <HAL_UART_RxCpltCallback+0x1bc>)
 800289c:	4813      	ldr	r0, [pc, #76]	@ (80028ec <HAL_UART_RxCpltCallback+0x1dc>)
 800289e:	f00b fc61 	bl	800e164 <HAL_UART_Receive_IT>
    }


}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w
 80028b0:	9999999a 	.word	0x9999999a
 80028b4:	3fc99999 	.word	0x3fc99999
 80028b8:	9999999a 	.word	0x9999999a
 80028bc:	3fb99999 	.word	0x3fb99999
 80028c0:	47ae147b 	.word	0x47ae147b
 80028c4:	3f847ae1 	.word	0x3f847ae1
 80028c8:	40011000 	.word	0x40011000
 80028cc:	24000028 	.word	0x24000028
 80028d0:	2401d6f4 	.word	0x2401d6f4
 80028d4:	2401d6d8 	.word	0x2401d6d8
 80028d8:	2401d6ec 	.word	0x2401d6ec
 80028dc:	2401d6f0 	.word	0x2401d6f0
 80028e0:	2401d6f8 	.word	0x2401d6f8
 80028e4:	2401d704 	.word	0x2401d704
 80028e8:	2401d6fc 	.word	0x2401d6fc
 80028ec:	2401d834 	.word	0x2401d834

080028f0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80028f6:	463b      	mov	r3, r7
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002902:	f002 fccf 	bl	80052a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002906:	2301      	movs	r3, #1
 8002908:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800290a:	2300      	movs	r3, #0
 800290c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800290e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8002912:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002914:	2312      	movs	r3, #18
 8002916:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002918:	2300      	movs	r3, #0
 800291a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800291c:	2301      	movs	r3, #1
 800291e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002920:	2303      	movs	r3, #3
 8002922:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800292c:	2301      	movs	r3, #1
 800292e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002934:	463b      	mov	r3, r7
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fcec 	bl	8005314 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800293c:	2301      	movs	r3, #1
 800293e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002940:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002944:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002946:	2310      	movs	r3, #16
 8002948:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002952:	463b      	mov	r3, r7
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fcdd 	bl	8005314 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800295a:	2302      	movs	r3, #2
 800295c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800295e:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <MPU_Config+0xb4>)
 8002960:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002962:	463b      	mov	r3, r7
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fcd5 	bl	8005314 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800296a:	2303      	movs	r3, #3
 800296c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <MPU_Config+0xb8>)
 8002970:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002972:	230e      	movs	r3, #14
 8002974:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002976:	463b      	mov	r3, r7
 8002978:	4618      	mov	r0, r3
 800297a:	f002 fccb 	bl	8005314 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800297e:	2304      	movs	r3, #4
 8002980:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8002982:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8002986:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002988:	230f      	movs	r3, #15
 800298a:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800298c:	463b      	mov	r3, r7
 800298e:	4618      	mov	r0, r3
 8002990:	f002 fcc0 	bl	8005314 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002994:	2004      	movs	r0, #4
 8002996:	f002 fc9d 	bl	80052d4 <HAL_MPU_Enable>

}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	30020000 	.word	0x30020000
 80029a8:	30040000 	.word	0x30040000

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <Error_Handler+0x8>

080029b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_MspInit+0x30>)
 80029c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029c4:	4a08      	ldr	r2, [pc, #32]	@ (80029e8 <HAL_MspInit+0x30>)
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_MspInit+0x30>)
 80029d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	58024400 	.word	0x58024400

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <NMI_Handler+0x4>

080029f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <HardFault_Handler+0x4>

080029fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <MemManage_Handler+0x4>

08002a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <BusFault_Handler+0x4>

08002a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <UsageFault_Handler+0x4>

08002a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a42:	f000 fc6b 	bl	800331c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a50:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <DMA1_Stream0_IRQHandler+0x10>)
 8002a52:	f004 fae3 	bl	800701c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	24002a00 	.word	0x24002a00

08002a60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002a64:	4802      	ldr	r0, [pc, #8]	@ (8002a70 <DMA1_Stream1_IRQHandler+0x10>)
 8002a66:	f004 fad9 	bl	800701c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	24002a8c 	.word	0x24002a8c

08002a74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <USART1_IRQHandler+0x10>)
 8002a7a:	f00b fbbf 	bl	800e1fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2401d834 	.word	0x2401d834

08002a88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <TIM5_IRQHandler+0x10>)
 8002a8e:	f00a fa57 	bl	800cf40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	2401d750 	.word	0x2401d750

08002a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002aa0:	4b37      	ldr	r3, [pc, #220]	@ (8002b80 <SystemInit+0xe4>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <SystemInit+0xe4>)
 8002aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ab0:	4b34      	ldr	r3, [pc, #208]	@ (8002b84 <SystemInit+0xe8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d807      	bhi.n	8002acc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002abc:	4b31      	ldr	r3, [pc, #196]	@ (8002b84 <SystemInit+0xe8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 030f 	bic.w	r3, r3, #15
 8002ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8002b84 <SystemInit+0xe8>)
 8002ac6:	f043 0307 	orr.w	r3, r3, #7
 8002aca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002acc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <SystemInit+0xec>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <SystemInit+0xec>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <SystemInit+0xec>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ade:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <SystemInit+0xec>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4929      	ldr	r1, [pc, #164]	@ (8002b88 <SystemInit+0xec>)
 8002ae4:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <SystemInit+0xf0>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002aea:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <SystemInit+0xe8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002af6:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <SystemInit+0xe8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 030f 	bic.w	r3, r3, #15
 8002afe:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <SystemInit+0xe8>)
 8002b00:	f043 0307 	orr.w	r3, r3, #7
 8002b04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b06:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <SystemInit+0xec>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <SystemInit+0xec>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <SystemInit+0xec>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <SystemInit+0xec>)
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <SystemInit+0xf4>)
 8002b1c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <SystemInit+0xec>)
 8002b20:	4a1c      	ldr	r2, [pc, #112]	@ (8002b94 <SystemInit+0xf8>)
 8002b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b24:	4b18      	ldr	r3, [pc, #96]	@ (8002b88 <SystemInit+0xec>)
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <SystemInit+0xfc>)
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b2a:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <SystemInit+0xec>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b30:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <SystemInit+0xec>)
 8002b32:	4a19      	ldr	r2, [pc, #100]	@ (8002b98 <SystemInit+0xfc>)
 8002b34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b36:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <SystemInit+0xec>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b3c:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <SystemInit+0xec>)
 8002b3e:	4a16      	ldr	r2, [pc, #88]	@ (8002b98 <SystemInit+0xfc>)
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b42:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <SystemInit+0xec>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b48:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <SystemInit+0xec>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b88 <SystemInit+0xec>)
 8002b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	@ (8002b88 <SystemInit+0xec>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <SystemInit+0x100>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <SystemInit+0x104>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b66:	d202      	bcs.n	8002b6e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <SystemInit+0x108>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <SystemInit+0x10c>)
 8002b70:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002b74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00
 8002b84:	52002000 	.word	0x52002000
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b90:	02020200 	.word	0x02020200
 8002b94:	01ff0000 	.word	0x01ff0000
 8002b98:	01010280 	.word	0x01010280
 8002b9c:	5c001000 	.word	0x5c001000
 8002ba0:	ffff0000 	.word	0xffff0000
 8002ba4:	51008108 	.word	0x51008108
 8002ba8:	52004000 	.word	0x52004000

08002bac <MX_TIM4_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb2:	f107 031c 	add.w	r3, r7, #28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
 8002bcc:	615a      	str	r2, [r3, #20]
 8002bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002bd2:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <MX_TIM4_Init+0xb0>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8002bd6:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002bd8:	22ef      	movs	r2, #239	@ 0xef
 8002bda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002be4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002be8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002bf2:	2280      	movs	r2, #128	@ 0x80
 8002bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bf6:	4818      	ldr	r0, [pc, #96]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002bf8:	f009 ffa6 	bl	800cb48 <HAL_TIM_PWM_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002c02:	f7ff fed3 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4810      	ldr	r0, [pc, #64]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002c16:	f00b f91b 	bl	800de50 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002c20:	f7ff fec4 	bl	80029ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c24:	2360      	movs	r3, #96	@ 0x60
 8002c26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c34:	463b      	mov	r3, r7
 8002c36:	2204      	movs	r2, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4807      	ldr	r0, [pc, #28]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002c3c:	f00a faa0 	bl	800d180 <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002c46:	f7ff feb1 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c4a:	4803      	ldr	r0, [pc, #12]	@ (8002c58 <MX_TIM4_Init+0xac>)
 8002c4c:	f000 f954 	bl	8002ef8 <HAL_TIM_MspPostInit>

}
 8002c50:	bf00      	nop
 8002c52:	3728      	adds	r7, #40	@ 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	2401d704 	.word	0x2401d704
 8002c5c:	40000800 	.word	0x40000800

08002c60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c66:	f107 0310 	add.w	r3, r7, #16
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002c80:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf8 <MX_TIM5_Init+0x98>)
 8002c82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002c86:	22ef      	movs	r2, #239	@ 0xef
 8002c88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8002c90:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002c92:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002c96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c98:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ca4:	4813      	ldr	r0, [pc, #76]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002ca6:	f009 fde7 	bl	800c878 <HAL_TIM_Base_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002cb0:	f7ff fe7c 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002cba:	f107 0310 	add.w	r3, r7, #16
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	480c      	ldr	r0, [pc, #48]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002cc2:	f00a fb71 	bl	800d3a8 <HAL_TIM_ConfigClockSource>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002ccc:	f7ff fe6e 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4805      	ldr	r0, [pc, #20]	@ (8002cf4 <MX_TIM5_Init+0x94>)
 8002cde:	f00b f8b7 	bl	800de50 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002ce8:	f7ff fe60 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002cec:	bf00      	nop
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2401d750 	.word	0x2401d750
 8002cf8:	40000c00 	.word	0x40000c00

08002cfc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <MX_TIM7_Init+0x64>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <MX_TIM7_Init+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <MX_TIM7_Init+0x64>)
 8002d14:	22ef      	movs	r2, #239	@ 0xef
 8002d16:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <MX_TIM7_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <MX_TIM7_Init+0x64>)
 8002d20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d24:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <MX_TIM7_Init+0x64>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d2c:	480c      	ldr	r0, [pc, #48]	@ (8002d60 <MX_TIM7_Init+0x64>)
 8002d2e:	f009 fda3 	bl	800c878 <HAL_TIM_Base_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002d38:	f7ff fe38 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	4619      	mov	r1, r3
 8002d48:	4805      	ldr	r0, [pc, #20]	@ (8002d60 <MX_TIM7_Init+0x64>)
 8002d4a:	f00b f881 	bl	800de50 <HAL_TIMEx_MasterConfigSynchronization>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002d54:	f7ff fe2a 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	2401d79c 	.word	0x2401d79c
 8002d64:	40001400 	.word	0x40001400

08002d68 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002d86:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002d88:	4a1e      	ldr	r2, [pc, #120]	@ (8002e04 <MX_TIM15_Init+0x9c>)
 8002d8a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50-1;
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002d8e:	2231      	movs	r2, #49	@ 0x31
 8002d90:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	4b1b      	ldr	r3, [pc, #108]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8002d98:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002d9a:	22c7      	movs	r2, #199	@ 0xc7
 8002d9c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d9e:	4b18      	ldr	r3, [pc, #96]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002da4:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002daa:	4b15      	ldr	r3, [pc, #84]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002dac:	2280      	movs	r2, #128	@ 0x80
 8002dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002db0:	4813      	ldr	r0, [pc, #76]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002db2:	f009 fd61 	bl	800c878 <HAL_TIM_Base_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002dbc:	f7ff fdf6 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	4619      	mov	r1, r3
 8002dcc:	480c      	ldr	r0, [pc, #48]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002dce:	f00a faeb 	bl	800d3a8 <HAL_TIM_ConfigClockSource>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002dd8:	f7ff fde8 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <MX_TIM15_Init+0x98>)
 8002dea:	f00b f831 	bl	800de50 <HAL_TIMEx_MasterConfigSynchronization>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002df4:	f7ff fdda 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002df8:	bf00      	nop
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	2401d7e8 	.word	0x2401d7e8
 8002e04:	40014000 	.word	0x40014000

08002e08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0b      	ldr	r2, [pc, #44]	@ (8002e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <HAL_TIM_PWM_MspInit+0x40>)
 8002e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e20:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <HAL_TIM_PWM_MspInit+0x40>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e2a:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <HAL_TIM_PWM_MspInit+0x40>)
 8002e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40000800 	.word	0x40000800
 8002e48:	58024400 	.word	0x58024400

08002e4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a23      	ldr	r2, [pc, #140]	@ (8002ee8 <HAL_TIM_Base_MspInit+0x9c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d117      	bne.n	8002e8e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e5e:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e64:	4a21      	ldr	r2, [pc, #132]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	2032      	movs	r0, #50	@ 0x32
 8002e82:	f002 f9da 	bl	800523a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e86:	2032      	movs	r0, #50	@ 0x32
 8002e88:	f002 f9f1 	bl	800526e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002e8c:	e028      	b.n	8002ee0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM7)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <HAL_TIM_Base_MspInit+0xa4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10f      	bne.n	8002eb8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e98:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e9e:	4a13      	ldr	r2, [pc, #76]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002ea0:	f043 0320 	orr.w	r3, r3, #32
 8002ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ea8:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
}
 8002eb6:	e013      	b.n	8002ee0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM15)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <HAL_TIM_Base_MspInit+0xa8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ec8:	4a08      	ldr	r2, [pc, #32]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ece:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_TIM_Base_MspInit+0xa0>)
 8002ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	40001400 	.word	0x40001400
 8002ef4:	40014000 	.word	0x40014000

08002ef8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <HAL_TIM_MspPostInit+0x6c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d11f      	bne.n	8002f5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1a:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <HAL_TIM_MspPostInit+0x70>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f20:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <HAL_TIM_MspPostInit+0x70>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_TIM_MspPostInit+0x70>)
 8002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	4619      	mov	r1, r3
 8002f54:	4805      	ldr	r0, [pc, #20]	@ (8002f6c <HAL_TIM_MspPostInit+0x74>)
 8002f56:	f005 fb73 	bl	8008640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f5a:	bf00      	nop
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40000800 	.word	0x40000800
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	58020c00 	.word	0x58020c00

08002f70 <setFre>:
  }
}

/* USER CODE BEGIN 1 */
void setFre(double frequency)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	ed87 0b00 	vstr	d0, [r7]
	   __HAL_TIM_SET_AUTORELOAD(&htim5, 500000/frequency -1 );
 8002f7a:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8003018 <setFre+0xa8>
 8002f7e:	ed97 6b00 	vldr	d6, [r7]
 8002f82:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f86:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002f8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f8e:	4b24      	ldr	r3, [pc, #144]	@ (8003020 <setFre+0xb0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002f96:	ee17 2a90 	vmov	r2, s15
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f9c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8003018 <setFre+0xa8>
 8002fa0:	ed97 6b00 	vldr	d6, [r7]
 8002fa4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002fa8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002fac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002fb4:	ee17 2a90 	vmov	r2, s15
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <setFre+0xb0>)
 8002fba:	60da      	str	r2, [r3, #12]
	   TIM5->ARR = 500000/frequency -1 ;
 8002fbc:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8003018 <setFre+0xa8>
 8002fc0:	ed97 6b00 	vldr	d6, [r7]
 8002fc4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002fc8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002fcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fd0:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <setFre+0xb4>)
 8002fd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002fd6:	ee17 2a90 	vmov	r2, s15
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c
       htim5.Init.Period = 500000/frequency - 1;
 8002fdc:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8003018 <setFre+0xa8>
 8002fe0:	ed97 6b00 	vldr	d6, [r7]
 8002fe4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002fe8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002fec:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ff0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ff4:	ee17 2a90 	vmov	r2, s15
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <setFre+0xb0>)
 8002ffa:	60da      	str	r2, [r3, #12]
       TIM5->CR1 &= ~TIM_CR1_ARPE;
 8002ffc:	4b09      	ldr	r3, [pc, #36]	@ (8003024 <setFre+0xb4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a08      	ldr	r2, [pc, #32]	@ (8003024 <setFre+0xb4>)
 8003002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	f3af 8000 	nop.w
 8003018:	00000000 	.word	0x00000000
 800301c:	411e8480 	.word	0x411e8480
 8003020:	2401d750 	.word	0x2401d750
 8003024:	40000c00 	.word	0x40000c00

08003028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800302c:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 800302e:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <MX_USART1_UART_Init+0x94>)
 8003030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003032:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800303a:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003040:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003046:	4b1c      	ldr	r3, [pc, #112]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 800304e:	220c      	movs	r2, #12
 8003050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003052:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003060:	2200      	movs	r2, #0
 8003062:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003070:	4811      	ldr	r0, [pc, #68]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003072:	f00a ff99 	bl	800dfa8 <HAL_UART_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800307c:	f7ff fc96 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003080:	2100      	movs	r1, #0
 8003082:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003084:	f00d faed 	bl	8010662 <HAL_UARTEx_SetTxFifoThreshold>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800308e:	f7ff fc8d 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003092:	2100      	movs	r1, #0
 8003094:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 8003096:	f00d fb22 	bl	80106de <HAL_UARTEx_SetRxFifoThreshold>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80030a0:	f7ff fc84 	bl	80029ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <MX_USART1_UART_Init+0x90>)
 80030a6:	f00d faa3 	bl	80105f0 <HAL_UARTEx_DisableFifoMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80030b0:	f7ff fc7c 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	2401d834 	.word	0x2401d834
 80030bc:	40011000 	.word	0x40011000

080030c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0ba      	sub	sp, #232	@ 0xe8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	22c0      	movs	r2, #192	@ 0xc0
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f00d fb89 	bl	80107f8 <memset>
  if(uartHandle->Instance==USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003198 <HAL_UART_MspInit+0xd8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d14e      	bne.n	800318e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030f0:	f04f 0201 	mov.w	r2, #1
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	4618      	mov	r0, r3
 8003108:	f006 feb8 	bl	8009e7c <HAL_RCCEx_PeriphCLKConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003112:	f7ff fc4b 	bl	80029ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003116:	4b21      	ldr	r3, [pc, #132]	@ (800319c <HAL_UART_MspInit+0xdc>)
 8003118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800311c:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_UART_MspInit+0xdc>)
 800311e:	f043 0310 	orr.w	r3, r3, #16
 8003122:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003126:	4b1d      	ldr	r3, [pc, #116]	@ (800319c <HAL_UART_MspInit+0xdc>)
 8003128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_UART_MspInit+0xdc>)
 8003136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800313a:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_UART_MspInit+0xdc>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003144:	4b15      	ldr	r3, [pc, #84]	@ (800319c <HAL_UART_MspInit+0xdc>)
 8003146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003152:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003156:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2300      	movs	r3, #0
 8003168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800316c:	2304      	movs	r3, #4
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003172:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003176:	4619      	mov	r1, r3
 8003178:	4809      	ldr	r0, [pc, #36]	@ (80031a0 <HAL_UART_MspInit+0xe0>)
 800317a:	f005 fa61 	bl	8008640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2102      	movs	r1, #2
 8003182:	2025      	movs	r0, #37	@ 0x25
 8003184:	f002 f859 	bl	800523a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003188:	2025      	movs	r0, #37	@ 0x25
 800318a:	f002 f870 	bl	800526e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800318e:	bf00      	nop
 8003190:	37e8      	adds	r7, #232	@ 0xe8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40011000 	.word	0x40011000
 800319c:	58024400 	.word	0x58024400
 80031a0:	58020400 	.word	0x58020400

080031a4 <USART1PutString>:
  }
}

/* USER CODE BEGIN 1 */
void USART1PutString(char *str)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	unsigned int k=0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  do
  {
      HAL_UART_Transmit(&huart1,(uint8_t *)(str + k) ,1,1000);
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	18d1      	adds	r1, r2, r3
 80031b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031ba:	2201      	movs	r2, #1
 80031bc:	4808      	ldr	r0, [pc, #32]	@ (80031e0 <USART1PutString+0x3c>)
 80031be:	f00a ff43 	bl	800e048 <HAL_UART_Transmit>
      k++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
  } while(*(str + k)!='\0');
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ed      	bne.n	80031b0 <USART1PutString+0xc>
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2401d834 	.word	0x2401d834

080031e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80031e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800321c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031e8:	f7ff fc58 	bl	8002a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031ec:	480c      	ldr	r0, [pc, #48]	@ (8003220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ee:	490d      	ldr	r1, [pc, #52]	@ (8003224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f4:	e002      	b.n	80031fc <LoopCopyDataInit>

080031f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fa:	3304      	adds	r3, #4

080031fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003200:	d3f9      	bcc.n	80031f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003202:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003204:	4c0a      	ldr	r4, [pc, #40]	@ (8003230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003208:	e001      	b.n	800320e <LoopFillZerobss>

0800320a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800320c:	3204      	adds	r2, #4

0800320e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003210:	d3fb      	bcc.n	800320a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003212:	f00d faff 	bl	8010814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003216:	f7ff f8c9 	bl	80023ac <main>
  bx  lr
 800321a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800321c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003220:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003224:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8003228:	080143ec 	.word	0x080143ec
  ldr r2, =_sbss
 800322c:	24002980 	.word	0x24002980
  ldr r4, =_ebss
 8003230:	2401db9c 	.word	0x2401db9c

08003234 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC3_IRQHandler>
	...

08003238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800323e:	2003      	movs	r0, #3
 8003240:	f001 fff0 	bl	8005224 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003244:	f006 fc44 	bl	8009ad0 <HAL_RCC_GetSysClockFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <HAL_Init+0x68>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	4913      	ldr	r1, [pc, #76]	@ (80032a4 <HAL_Init+0x6c>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003262:	4b0f      	ldr	r3, [pc, #60]	@ (80032a0 <HAL_Init+0x68>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	4a0e      	ldr	r2, [pc, #56]	@ (80032a4 <HAL_Init+0x6c>)
 800326c:	5cd3      	ldrb	r3, [r2, r3]
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <HAL_Init+0x70>)
 800327a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800327c:	4a0b      	ldr	r2, [pc, #44]	@ (80032ac <HAL_Init+0x74>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003282:	200f      	movs	r0, #15
 8003284:	f000 f814 	bl	80032b0 <HAL_InitTick>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e002      	b.n	8003298 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003292:	f7ff fb91 	bl	80029b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	58024400 	.word	0x58024400
 80032a4:	08012074 	.word	0x08012074
 80032a8:	24000030 	.word	0x24000030
 80032ac:	2400002c 	.word	0x2400002c

080032b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80032b8:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <HAL_InitTick+0x60>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e021      	b.n	8003308 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80032c4:	4b13      	ldr	r3, [pc, #76]	@ (8003314 <HAL_InitTick+0x64>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HAL_InitTick+0x60>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 ffd5 	bl	800528a <HAL_SYSTICK_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00e      	b.n	8003308 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b0f      	cmp	r3, #15
 80032ee:	d80a      	bhi.n	8003306 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f0:	2200      	movs	r2, #0
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032f8:	f001 ff9f 	bl	800523a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032fc:	4a06      	ldr	r2, [pc, #24]	@ (8003318 <HAL_InitTick+0x68>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e000      	b.n	8003308 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	24000038 	.word	0x24000038
 8003314:	2400002c 	.word	0x2400002c
 8003318:	24000034 	.word	0x24000034

0800331c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003320:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_IncTick+0x20>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_IncTick+0x24>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4413      	add	r3, r2
 800332c:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <HAL_IncTick+0x24>)
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	24000038 	.word	0x24000038
 8003340:	2401d8c8 	.word	0x2401d8c8

08003344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return uwTick;
 8003348:	4b03      	ldr	r3, [pc, #12]	@ (8003358 <HAL_GetTick+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	2401d8c8 	.word	0x2401d8c8

0800335c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003364:	f7ff ffee 	bl	8003344 <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003374:	d005      	beq.n	8003382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003376:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <HAL_Delay+0x44>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003382:	bf00      	nop
 8003384:	f7ff ffde 	bl	8003344 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	429a      	cmp	r2, r3
 8003392:	d8f7      	bhi.n	8003384 <HAL_Delay+0x28>
  {
  }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	24000038 	.word	0x24000038

080033a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80033a8:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <HAL_GetREVID+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0c1b      	lsrs	r3, r3, #16
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	5c001000 	.word	0x5c001000

080033bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	609a      	str	r2, [r3, #8]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3360      	adds	r3, #96	@ 0x60
 8003436:	461a      	mov	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	611a      	str	r2, [r3, #16]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3360      	adds	r3, #96	@ 0x60
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	601a      	str	r2, [r3, #0]
  }
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3330      	adds	r3, #48	@ 0x30
 8003502:	461a      	mov	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	4413      	add	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	211f      	movs	r1, #31
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	401a      	ands	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 011f 	and.w	r1, r3, #31
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f023 0203 	bic.w	r2, r3, #3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3314      	adds	r3, #20
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	0e5b      	lsrs	r3, r3, #25
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	0d1b      	lsrs	r3, r3, #20
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2107      	movs	r1, #7
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	0d1b      	lsrs	r3, r3, #20
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	431a      	orrs	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0318 	and.w	r3, r3, #24
 80035ea:	4908      	ldr	r1, [pc, #32]	@ (800360c <LL_ADC_SetChannelSingleDiff+0x44>)
 80035ec:	40d9      	lsrs	r1, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	400b      	ands	r3, r1
 80035f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	000fffff 	.word	0x000fffff

08003610 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 031f 	and.w	r3, r3, #31
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <LL_ADC_DisableDeepPowerDown+0x20>)
 800363a:	4013      	ands	r3, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6093      	str	r3, [r2, #8]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	5fffffc0 	.word	0x5fffffc0

08003650 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003664:	d101      	bne.n	800366a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <LL_ADC_EnableInternalRegulator+0x24>)
 8003686:	4013      	ands	r3, r2
 8003688:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	6fffffc0 	.word	0x6fffffc0

080036a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036b4:	d101      	bne.n	80036ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <LL_ADC_Enable+0x24>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	7fffffc0 	.word	0x7fffffc0

080036f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <LL_ADC_Disable+0x24>)
 80036fe:	4013      	ands	r3, r2
 8003700:	f043 0202 	orr.w	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	7fffffc0 	.word	0x7fffffc0

08003718 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <LL_ADC_IsEnabled+0x18>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <LL_ADC_IsEnabled+0x1a>
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsDisableOngoing+0x18>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsDisableOngoing+0x1a>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <LL_ADC_REG_StartConversion+0x24>)
 8003772:	4013      	ands	r3, r2
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	7fffffc0 	.word	0x7fffffc0

0800378c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <LL_ADC_REG_StopConversion+0x24>)
 800379a:	4013      	ands	r3, r2
 800379c:	f043 0210 	orr.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	7fffffc0 	.word	0x7fffffc0

080037b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d101      	bne.n	80037cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <LL_ADC_INJ_StopConversion+0x24>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	7fffffc0 	.word	0x7fffffc0

08003804 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d101      	bne.n	800381c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e18f      	b.n	8003b66 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fd fdb1 	bl	80013bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff feef 	bl	8003650 <LL_ADC_IsDeepPowerDownEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fed5 	bl	800362c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff0a 	bl	80036a0 <LL_ADC_IsInternalRegulatorEnabled>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d114      	bne.n	80038bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff feee 	bl	8003678 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800389c:	4b87      	ldr	r3, [pc, #540]	@ (8003abc <HAL_ADC_Init+0x290>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	4a87      	ldr	r2, [pc, #540]	@ (8003ac0 <HAL_ADC_Init+0x294>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff feed 	bl	80036a0 <LL_ADC_IsInternalRegulatorEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10d      	bne.n	80038e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff61 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 80038f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 8129 	bne.w	8003b54 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 8125 	bne.w	8003b54 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fefa 	bl	8003718 <LL_ADC_IsEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d136      	bne.n	8003998 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a65      	ldr	r2, [pc, #404]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_ADC_Init+0x112>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a63      	ldr	r2, [pc, #396]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10e      	bne.n	800395c <HAL_ADC_Init+0x130>
 800393e:	4861      	ldr	r0, [pc, #388]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003940:	f7ff feea 	bl	8003718 <LL_ADC_IsEnabled>
 8003944:	4604      	mov	r4, r0
 8003946:	4860      	ldr	r0, [pc, #384]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 8003948:	f7ff fee6 	bl	8003718 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	4323      	orrs	r3, r4
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e008      	b.n	800396e <HAL_ADC_Init+0x142>
 800395c:	485b      	ldr	r0, [pc, #364]	@ (8003acc <HAL_ADC_Init+0x2a0>)
 800395e:	f7ff fedb 	bl	8003718 <LL_ADC_IsEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a53      	ldr	r2, [pc, #332]	@ (8003ac4 <HAL_ADC_Init+0x298>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_ADC_Init+0x15a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a51      	ldr	r2, [pc, #324]	@ (8003ac8 <HAL_ADC_Init+0x29c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_ADC_Init+0x15e>
 8003986:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_ADC_Init+0x2a4>)
 8003988:	e000      	b.n	800398c <HAL_ADC_Init+0x160>
 800398a:	4a52      	ldr	r2, [pc, #328]	@ (8003ad4 <HAL_ADC_Init+0x2a8>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f7ff fd12 	bl	80033bc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003998:	f7ff fd04 	bl	80033a4 <HAL_GetREVID>
 800399c:	4603      	mov	r3, r0
 800399e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d914      	bls.n	80039d0 <HAL_ADC_Init+0x1a4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d110      	bne.n	80039d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7d5b      	ldrb	r3, [r3, #21]
 80039b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7f1b      	ldrb	r3, [r3, #28]
 80039c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039c8:	f043 030c 	orr.w	r3, r3, #12
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e00d      	b.n	80039ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7d5b      	ldrb	r3, [r3, #21]
 80039d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	7f1b      	ldrb	r3, [r3, #28]
 80039e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	7f1b      	ldrb	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	045b      	lsls	r3, r3, #17
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <HAL_ADC_Init+0x2ac>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff febc 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fede 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 8003a48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d15f      	bne.n	8003b10 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d15c      	bne.n	8003b10 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7d1b      	ldrb	r3, [r3, #20]
 8003a5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <HAL_ADC_Init+0x2b0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d130      	bne.n	8003ae4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <HAL_ADC_Init+0x2b4>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a96:	3a01      	subs	r2, #1
 8003a98:	0411      	lsls	r1, r2, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	611a      	str	r2, [r3, #16]
 8003ab8:	e01c      	b.n	8003af4 <HAL_ADC_Init+0x2c8>
 8003aba:	bf00      	nop
 8003abc:	2400002c 	.word	0x2400002c
 8003ac0:	053e2d63 	.word	0x053e2d63
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022100 	.word	0x40022100
 8003acc:	58026000 	.word	0x58026000
 8003ad0:	40022300 	.word	0x40022300
 8003ad4:	58026300 	.word	0x58026300
 8003ad8:	fff0c003 	.word	0xfff0c003
 8003adc:	ffffbffc 	.word	0xffffbffc
 8003ae0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f001 f812 	bl	8004b34 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10c      	bne.n	8003b32 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	f023 010f 	bic.w	r1, r3, #15
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b30:	e007      	b.n	8003b42 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020f 	bic.w	r2, r2, #15
 8003b40:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b52:	e007      	b.n	8003b64 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	bf00      	nop

08003b70 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e16e      	b.n	8003e60 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b8e:	2103      	movs	r1, #3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fd95 	bl	80046c0 <ADC_ConversionStop>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003ba8:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fecb 	bl	800494c <ADC_Disable>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003e04 <HAL_ADC_DeInit+0x294>)
 8003bd2:	400b      	ands	r3, r1
 8003bd4:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003bde:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8003bee:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003bfe:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8003c0e:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6919      	ldr	r1, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b77      	ldr	r3, [pc, #476]	@ (8003e08 <HAL_ADC_DeInit+0x298>)
 8003c2c:	400b      	ands	r3, r1
 8003c2e:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8003c3e:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8003c4e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003c5e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003c80:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003c94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003ca8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003cbc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b50      	ldr	r3, [pc, #320]	@ (8003e0c <HAL_ADC_DeInit+0x29c>)
 8003ccc:	400b      	ands	r3, r1
 8003cce:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b4d      	ldr	r3, [pc, #308]	@ (8003e10 <HAL_ADC_DeInit+0x2a0>)
 8003cdc:	400b      	ands	r3, r1
 8003cde:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b49      	ldr	r3, [pc, #292]	@ (8003e10 <HAL_ADC_DeInit+0x2a0>)
 8003cec:	400b      	ands	r3, r1
 8003cee:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b46      	ldr	r3, [pc, #280]	@ (8003e14 <HAL_ADC_DeInit+0x2a4>)
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <HAL_ADC_DeInit+0x2a8>)
 8003d46:	400b      	ands	r3, r1
 8003d48:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b2f      	ldr	r3, [pc, #188]	@ (8003e18 <HAL_ADC_DeInit+0x2a8>)
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e18 <HAL_ADC_DeInit+0x2a8>)
 8003d6e:	400b      	ands	r3, r1
 8003d70:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8003d84:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	@ (8003e1c <HAL_ADC_DeInit+0x2ac>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_ADC_DeInit+0x22c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a22      	ldr	r2, [pc, #136]	@ (8003e20 <HAL_ADC_DeInit+0x2b0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10e      	bne.n	8003dba <HAL_ADC_DeInit+0x24a>
 8003d9c:	481f      	ldr	r0, [pc, #124]	@ (8003e1c <HAL_ADC_DeInit+0x2ac>)
 8003d9e:	f7ff fcbb 	bl	8003718 <LL_ADC_IsEnabled>
 8003da2:	4604      	mov	r4, r0
 8003da4:	481e      	ldr	r0, [pc, #120]	@ (8003e20 <HAL_ADC_DeInit+0x2b0>)
 8003da6:	f7ff fcb7 	bl	8003718 <LL_ADC_IsEnabled>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4323      	orrs	r3, r4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	e008      	b.n	8003dcc <HAL_ADC_DeInit+0x25c>
 8003dba:	481a      	ldr	r0, [pc, #104]	@ (8003e24 <HAL_ADC_DeInit+0x2b4>)
 8003dbc:	f7ff fcac 	bl	8003718 <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d036      	beq.n	8003e3e <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a11      	ldr	r2, [pc, #68]	@ (8003e1c <HAL_ADC_DeInit+0x2ac>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_ADC_DeInit+0x274>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a10      	ldr	r2, [pc, #64]	@ (8003e20 <HAL_ADC_DeInit+0x2b0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_ADC_DeInit+0x278>
 8003de4:	4b10      	ldr	r3, [pc, #64]	@ (8003e28 <HAL_ADC_DeInit+0x2b8>)
 8003de6:	e000      	b.n	8003dea <HAL_ADC_DeInit+0x27a>
 8003de8:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <HAL_ADC_DeInit+0x2bc>)
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e1c <HAL_ADC_DeInit+0x2ac>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_ADC_DeInit+0x290>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <HAL_ADC_DeInit+0x2b0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d117      	bne.n	8003e30 <HAL_ADC_DeInit+0x2c0>
 8003e00:	4a09      	ldr	r2, [pc, #36]	@ (8003e28 <HAL_ADC_DeInit+0x2b8>)
 8003e02:	e016      	b.n	8003e32 <HAL_ADC_DeInit+0x2c2>
 8003e04:	fffff800 	.word	0xfffff800
 8003e08:	fc00f81c 	.word	0xfc00f81c
 8003e0c:	e0820830 	.word	0xe0820830
 8003e10:	e0820820 	.word	0xe0820820
 8003e14:	fffff820 	.word	0xfffff820
 8003e18:	fff00000 	.word	0xfff00000
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40022100 	.word	0x40022100
 8003e24:	58026000 	.word	0x58026000
 8003e28:	40022300 	.word	0x40022300
 8003e2c:	58026300 	.word	0x58026300
 8003e30:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <HAL_ADC_DeInit+0x2f8>)
 8003e32:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <HAL_ADC_DeInit+0x2fc>)
 8003e34:	400b      	ands	r3, r1
 8003e36:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fd fb65 	bl	8001508 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd90      	pop	{r4, r7, pc}
 8003e68:	58026300 	.word	0x58026300
 8003e6c:	fe0030e0 	.word	0xfe0030e0

08003e70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a55      	ldr	r2, [pc, #340]	@ (8003fd8 <HAL_ADC_Start_DMA+0x168>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <HAL_ADC_Start_DMA+0x20>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a54      	ldr	r2, [pc, #336]	@ (8003fdc <HAL_ADC_Start_DMA+0x16c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_Start_DMA+0x24>
 8003e90:	4b53      	ldr	r3, [pc, #332]	@ (8003fe0 <HAL_ADC_Start_DMA+0x170>)
 8003e92:	e000      	b.n	8003e96 <HAL_ADC_Start_DMA+0x26>
 8003e94:	4b53      	ldr	r3, [pc, #332]	@ (8003fe4 <HAL_ADC_Start_DMA+0x174>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fbba 	bl	8003610 <LL_ADC_GetMultimode>
 8003e9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fc86 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f040 808c 	bne.w	8003fc8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Start_DMA+0x4e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e087      	b.n	8003fce <HAL_ADC_Start_DMA+0x15e>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b05      	cmp	r3, #5
 8003ed0:	d002      	beq.n	8003ed8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b09      	cmp	r3, #9
 8003ed6:	d170      	bne.n	8003fba <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fcad 	bl	8004838 <ADC_Enable>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d163      	bne.n	8003fb0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003eec:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe8 <HAL_ADC_Start_DMA+0x178>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a37      	ldr	r2, [pc, #220]	@ (8003fdc <HAL_ADC_Start_DMA+0x16c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d002      	beq.n	8003f08 <HAL_ADC_Start_DMA+0x98>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e000      	b.n	8003f0a <HAL_ADC_Start_DMA+0x9a>
 8003f08:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <HAL_ADC_Start_DMA+0x168>)
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d002      	beq.n	8003f18 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	f023 0206 	bic.w	r2, r3, #6
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f3c:	e002      	b.n	8003f44 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f48:	4a28      	ldr	r2, [pc, #160]	@ (8003fec <HAL_ADC_Start_DMA+0x17c>)
 8003f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f50:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <HAL_ADC_Start_DMA+0x180>)
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f58:	4a26      	ldr	r2, [pc, #152]	@ (8003ff4 <HAL_ADC_Start_DMA+0x184>)
 8003f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	221c      	movs	r2, #28
 8003f62:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0210 	orr.w	r2, r2, #16
 8003f7a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f7ff fadf 	bl	800354a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3340      	adds	r3, #64	@ 0x40
 8003f96:	4619      	mov	r1, r3
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f002 f870 	bl	8006080 <HAL_DMA_Start_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fbdb 	bl	8003764 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003fae:	e00d      	b.n	8003fcc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003fb8:	e008      	b.n	8003fcc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003fc6:	e001      	b.n	8003fcc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40022100 	.word	0x40022100
 8003fe0:	40022300 	.word	0x40022300
 8003fe4:	58026300 	.word	0x58026300
 8003fe8:	fffff0fe 	.word	0xfffff0fe
 8003fec:	08004a0b 	.word	0x08004a0b
 8003ff0:	08004ae3 	.word	0x08004ae3
 8003ff4:	08004aff 	.word	0x08004aff

08003ff8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b0a1      	sub	sp, #132	@ 0x84
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a9d      	ldr	r2, [pc, #628]	@ (80042b0 <HAL_ADC_ConfigChannel+0x290>)
 800403a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_ADC_ConfigChannel+0x2a>
 8004046:	2302      	movs	r3, #2
 8004048:	e321      	b.n	800468e <HAL_ADC_ConfigChannel+0x66e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fbac 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 8306 	bne.w	8004670 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406c:	2b00      	cmp	r3, #0
 800406e:	d108      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x62>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2201      	movs	r2, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	e016      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x90>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004090:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004092:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800409a:	2320      	movs	r3, #32
 800409c:	e003      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800409e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040a0:	fab3 f383 	clz	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2201      	movs	r2, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	69d1      	ldr	r1, [r2, #28]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	430b      	orrs	r3, r1
 80040bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7ff fa11 	bl	80034f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fb6d 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 80040da:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fb8f 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 80040e6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 80b3 	bne.w	8004256 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 80af 	bne.w	8004256 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	461a      	mov	r2, r3
 8004106:	f7ff fa33 	bl	8003570 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800410a:	4b6a      	ldr	r3, [pc, #424]	@ (80042b4 <HAL_ADC_ConfigChannel+0x294>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004116:	d10b      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x110>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	e01d      	b.n	800416c <HAL_ADC_ConfigChannel+0x14c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x136>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	e00a      	b.n	800416c <HAL_ADC_ConfigChannel+0x14c>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d027      	beq.n	80041c6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6919      	ldr	r1, [r3, #16]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004184:	f7ff f94e 	bl	8003424 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	6919      	ldr	r1, [r3, #16]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	7e5b      	ldrb	r3, [r3, #25]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <HAL_ADC_ConfigChannel+0x17e>
 8004198:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800419c:	e000      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x180>
 800419e:	2300      	movs	r3, #0
 80041a0:	461a      	mov	r2, r3
 80041a2:	f7ff f978 	bl	8003496 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6919      	ldr	r1, [r3, #16]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	7e1b      	ldrb	r3, [r3, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d102      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x19c>
 80041b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80041ba:	e000      	b.n	80041be <HAL_ADC_ConfigChannel+0x19e>
 80041bc:	2300      	movs	r3, #0
 80041be:	461a      	mov	r2, r3
 80041c0:	f7ff f950 	bl	8003464 <LL_ADC_SetDataRightShift>
 80041c4:	e047      	b.n	8004256 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	069b      	lsls	r3, r3, #26
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d107      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041e8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	069b      	lsls	r3, r3, #26
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d107      	bne.n	800420e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800420c:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004214:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	069b      	lsls	r3, r3, #26
 800421e:	429a      	cmp	r2, r3
 8004220:	d107      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004230:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004238:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	069b      	lsls	r3, r3, #26
 8004242:	429a      	cmp	r2, r3
 8004244:	d107      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004254:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fa5c 	bl	8003718 <LL_ADC_IsEnabled>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 820d 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6819      	ldr	r1, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	461a      	mov	r2, r3
 8004276:	f7ff f9a7 	bl	80035c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4a0c      	ldr	r2, [pc, #48]	@ (80042b0 <HAL_ADC_ConfigChannel+0x290>)
 8004280:	4293      	cmp	r3, r2
 8004282:	f040 8133 	bne.w	80044ec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004292:	2b00      	cmp	r3, #0
 8004294:	d110      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x298>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	0e9b      	lsrs	r3, r3, #26
 800429c:	3301      	adds	r3, #1
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2b09      	cmp	r3, #9
 80042a4:	bf94      	ite	ls
 80042a6:	2301      	movls	r3, #1
 80042a8:	2300      	movhi	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	e01e      	b.n	80042ec <HAL_ADC_ConfigChannel+0x2cc>
 80042ae:	bf00      	nop
 80042b0:	47ff0000 	.word	0x47ff0000
 80042b4:	5c001000 	.word	0x5c001000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80042ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80042d0:	2320      	movs	r3, #32
 80042d2:	e003      	b.n	80042dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80042d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3301      	adds	r3, #1
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	bf94      	ite	ls
 80042e6:	2301      	movls	r3, #1
 80042e8:	2300      	movhi	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d079      	beq.n	80043e4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <HAL_ADC_ConfigChannel+0x2ec>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0e9b      	lsrs	r3, r3, #26
 8004302:	3301      	adds	r3, #1
 8004304:	069b      	lsls	r3, r3, #26
 8004306:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800430a:	e015      	b.n	8004338 <HAL_ADC_ConfigChannel+0x318>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800431a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800431e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004324:	2320      	movs	r3, #32
 8004326:	e003      	b.n	8004330 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3301      	adds	r3, #1
 8004332:	069b      	lsls	r3, r3, #26
 8004334:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x338>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	3301      	adds	r3, #1
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	e017      	b.n	8004388 <HAL_ADC_ConfigChannel+0x368>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004368:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800436a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004370:	2320      	movs	r3, #32
 8004372:	e003      	b.n	800437c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3301      	adds	r3, #1
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2101      	movs	r1, #1
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	ea42 0103 	orr.w	r1, r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x38e>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0e9b      	lsrs	r3, r3, #26
 800439e:	3301      	adds	r3, #1
 80043a0:	f003 021f 	and.w	r2, r3, #31
 80043a4:	4613      	mov	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	051b      	lsls	r3, r3, #20
 80043ac:	e018      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x3c0>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80043c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80043c6:	2320      	movs	r3, #32
 80043c8:	e003      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80043ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	3301      	adds	r3, #1
 80043d4:	f003 021f 	and.w	r2, r3, #31
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e0:	430b      	orrs	r3, r1
 80043e2:	e07e      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x3e0>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	0e9b      	lsrs	r3, r3, #26
 80043f6:	3301      	adds	r3, #1
 80043f8:	069b      	lsls	r3, r3, #26
 80043fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043fe:	e015      	b.n	800442c <HAL_ADC_ConfigChannel+0x40c>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004418:	2320      	movs	r3, #32
 800441a:	e003      	b.n	8004424 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	3301      	adds	r3, #1
 8004426:	069b      	lsls	r3, r3, #26
 8004428:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_ADC_ConfigChannel+0x42c>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	0e9b      	lsrs	r3, r3, #26
 800443e:	3301      	adds	r3, #1
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f303 	lsl.w	r3, r1, r3
 800444a:	e017      	b.n	800447c <HAL_ADC_ConfigChannel+0x45c>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	61bb      	str	r3, [r7, #24]
  return result;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e003      	b.n	8004470 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3301      	adds	r3, #1
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	ea42 0103 	orr.w	r1, r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x488>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	3301      	adds	r3, #1
 8004494:	f003 021f 	and.w	r2, r3, #31
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	3b1e      	subs	r3, #30
 80044a0:	051b      	lsls	r3, r3, #20
 80044a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	e01b      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x4c0>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	60fb      	str	r3, [r7, #12]
  return result;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80044c0:	2320      	movs	r3, #32
 80044c2:	e003      	b.n	80044cc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	f003 021f 	and.w	r2, r3, #31
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	3b1e      	subs	r3, #30
 80044da:	051b      	lsls	r3, r3, #20
 80044dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044e0:	430b      	orrs	r3, r1
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	6892      	ldr	r2, [r2, #8]
 80044e6:	4619      	mov	r1, r3
 80044e8:	f7ff f842 	bl	8003570 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f280 80c6 	bge.w	8004682 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a67      	ldr	r2, [pc, #412]	@ (8004698 <HAL_ADC_ConfigChannel+0x678>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_ADC_ConfigChannel+0x4ea>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a65      	ldr	r2, [pc, #404]	@ (800469c <HAL_ADC_ConfigChannel+0x67c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_ADC_ConfigChannel+0x4ee>
 800450a:	4b65      	ldr	r3, [pc, #404]	@ (80046a0 <HAL_ADC_ConfigChannel+0x680>)
 800450c:	e000      	b.n	8004510 <HAL_ADC_ConfigChannel+0x4f0>
 800450e:	4b65      	ldr	r3, [pc, #404]	@ (80046a4 <HAL_ADC_ConfigChannel+0x684>)
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe ff79 	bl	8003408 <LL_ADC_GetCommonPathInternalCh>
 8004516:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a5e      	ldr	r2, [pc, #376]	@ (8004698 <HAL_ADC_ConfigChannel+0x678>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_ADC_ConfigChannel+0x50c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a5d      	ldr	r2, [pc, #372]	@ (800469c <HAL_ADC_ConfigChannel+0x67c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d10e      	bne.n	800454a <HAL_ADC_ConfigChannel+0x52a>
 800452c:	485a      	ldr	r0, [pc, #360]	@ (8004698 <HAL_ADC_ConfigChannel+0x678>)
 800452e:	f7ff f8f3 	bl	8003718 <LL_ADC_IsEnabled>
 8004532:	4604      	mov	r4, r0
 8004534:	4859      	ldr	r0, [pc, #356]	@ (800469c <HAL_ADC_ConfigChannel+0x67c>)
 8004536:	f7ff f8ef 	bl	8003718 <LL_ADC_IsEnabled>
 800453a:	4603      	mov	r3, r0
 800453c:	4323      	orrs	r3, r4
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	e008      	b.n	800455c <HAL_ADC_ConfigChannel+0x53c>
 800454a:	4857      	ldr	r0, [pc, #348]	@ (80046a8 <HAL_ADC_ConfigChannel+0x688>)
 800454c:	f7ff f8e4 	bl	8003718 <LL_ADC_IsEnabled>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d07d      	beq.n	800465c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a51      	ldr	r2, [pc, #324]	@ (80046ac <HAL_ADC_ConfigChannel+0x68c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d130      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x5ac>
 800456a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800456c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d12b      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a4b      	ldr	r2, [pc, #300]	@ (80046a8 <HAL_ADC_ConfigChannel+0x688>)
 800457a:	4293      	cmp	r3, r2
 800457c:	f040 8081 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a44      	ldr	r2, [pc, #272]	@ (8004698 <HAL_ADC_ConfigChannel+0x678>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_ADC_ConfigChannel+0x574>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a43      	ldr	r2, [pc, #268]	@ (800469c <HAL_ADC_ConfigChannel+0x67c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x578>
 8004594:	4a42      	ldr	r2, [pc, #264]	@ (80046a0 <HAL_ADC_ConfigChannel+0x680>)
 8004596:	e000      	b.n	800459a <HAL_ADC_ConfigChannel+0x57a>
 8004598:	4a42      	ldr	r2, [pc, #264]	@ (80046a4 <HAL_ADC_ConfigChannel+0x684>)
 800459a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f7fe ff1d 	bl	80033e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045a8:	4b41      	ldr	r3, [pc, #260]	@ (80046b0 <HAL_ADC_ConfigChannel+0x690>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	4a41      	ldr	r2, [pc, #260]	@ (80046b4 <HAL_ADC_ConfigChannel+0x694>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	3301      	adds	r3, #1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045bc:	e002      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f9      	bne.n	80045be <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045ca:	e05a      	b.n	8004682 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a39      	ldr	r2, [pc, #228]	@ (80046b8 <HAL_ADC_ConfigChannel+0x698>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d11e      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x5f4>
 80045d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d119      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a30      	ldr	r2, [pc, #192]	@ (80046a8 <HAL_ADC_ConfigChannel+0x688>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d14b      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <HAL_ADC_ConfigChannel+0x678>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_ADC_ConfigChannel+0x5de>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a28      	ldr	r2, [pc, #160]	@ (800469c <HAL_ADC_ConfigChannel+0x67c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x5e2>
 80045fe:	4a28      	ldr	r2, [pc, #160]	@ (80046a0 <HAL_ADC_ConfigChannel+0x680>)
 8004600:	e000      	b.n	8004604 <HAL_ADC_ConfigChannel+0x5e4>
 8004602:	4a28      	ldr	r2, [pc, #160]	@ (80046a4 <HAL_ADC_ConfigChannel+0x684>)
 8004604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7fe fee8 	bl	80033e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004612:	e036      	b.n	8004682 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a28      	ldr	r2, [pc, #160]	@ (80046bc <HAL_ADC_ConfigChannel+0x69c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d131      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x662>
 800461e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d12c      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1e      	ldr	r2, [pc, #120]	@ (80046a8 <HAL_ADC_ConfigChannel+0x688>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d127      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a18      	ldr	r2, [pc, #96]	@ (8004698 <HAL_ADC_ConfigChannel+0x678>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_ADC_ConfigChannel+0x626>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a16      	ldr	r2, [pc, #88]	@ (800469c <HAL_ADC_ConfigChannel+0x67c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_ADC_ConfigChannel+0x62a>
 8004646:	4a16      	ldr	r2, [pc, #88]	@ (80046a0 <HAL_ADC_ConfigChannel+0x680>)
 8004648:	e000      	b.n	800464c <HAL_ADC_ConfigChannel+0x62c>
 800464a:	4a16      	ldr	r2, [pc, #88]	@ (80046a4 <HAL_ADC_ConfigChannel+0x684>)
 800464c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7fe fec4 	bl	80033e2 <LL_ADC_SetCommonPathInternalCh>
 800465a:	e012      	b.n	8004682 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800466e:	e008      	b.n	8004682 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	f043 0220 	orr.w	r2, r3, #32
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800468a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800468e:	4618      	mov	r0, r3
 8004690:	3784      	adds	r7, #132	@ 0x84
 8004692:	46bd      	mov	sp, r7
 8004694:	bd90      	pop	{r4, r7, pc}
 8004696:	bf00      	nop
 8004698:	40022000 	.word	0x40022000
 800469c:	40022100 	.word	0x40022100
 80046a0:	40022300 	.word	0x40022300
 80046a4:	58026300 	.word	0x58026300
 80046a8:	58026000 	.word	0x58026000
 80046ac:	cb840000 	.word	0xcb840000
 80046b0:	2400002c 	.word	0x2400002c
 80046b4:	053e2d63 	.word	0x053e2d63
 80046b8:	c7520000 	.word	0xc7520000
 80046bc:	cfb80000 	.word	0xcfb80000

080046c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff f86c 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 80046dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff f88e 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 80046e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8098 	beq.w	8004828 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d02a      	beq.n	800475c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7d5b      	ldrb	r3, [r3, #21]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d126      	bne.n	800475c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7d1b      	ldrb	r3, [r3, #20]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d122      	bne.n	800475c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004716:	2301      	movs	r3, #1
 8004718:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800471a:	e014      	b.n	8004746 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4a45      	ldr	r2, [pc, #276]	@ (8004834 <ADC_ConversionStop+0x174>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d90d      	bls.n	8004740 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f043 0210 	orr.w	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e074      	b.n	800482a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3301      	adds	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	d1e3      	bne.n	800471c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2240      	movs	r2, #64	@ 0x40
 800475a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d014      	beq.n	800478c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff f824 	bl	80037b4 <LL_ADC_REG_IsConversionOngoing>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe ffe1 	bl	800373e <LL_ADC_IsDisableOngoing>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff f800 	bl	800378c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d014      	beq.n	80047bc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff f834 	bl	8003804 <LL_ADC_INJ_IsConversionOngoing>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe ffc9 	bl	800373e <LL_ADC_IsDisableOngoing>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f810 	bl	80037dc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d005      	beq.n	80047ce <ADC_ConversionStop+0x10e>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d105      	bne.n	80047d4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80047c8:	230c      	movs	r3, #12
 80047ca:	617b      	str	r3, [r7, #20]
        break;
 80047cc:	e005      	b.n	80047da <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80047ce:	2308      	movs	r3, #8
 80047d0:	617b      	str	r3, [r7, #20]
        break;
 80047d2:	e002      	b.n	80047da <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80047d4:	2304      	movs	r3, #4
 80047d6:	617b      	str	r3, [r7, #20]
        break;
 80047d8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80047da:	f7fe fdb3 	bl	8003344 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047e0:	e01b      	b.n	800481a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047e2:	f7fe fdaf 	bl	8003344 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d914      	bls.n	800481a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00d      	beq.n	800481a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	f043 0210 	orr.w	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	f043 0201 	orr.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e007      	b.n	800482a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1dc      	bne.n	80047e2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	000cdbff 	.word	0x000cdbff

08004838 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe ff67 	bl	8003718 <LL_ADC_IsEnabled>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d16e      	bne.n	800492e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <ADC_Enable+0x100>)
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004862:	f043 0210 	orr.w	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e05a      	b.n	8004930 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe ff22 	bl	80036c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004884:	f7fe fd5e 	bl	8003344 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2b      	ldr	r2, [pc, #172]	@ (800493c <ADC_Enable+0x104>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <ADC_Enable+0x66>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a29      	ldr	r2, [pc, #164]	@ (8004940 <ADC_Enable+0x108>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <ADC_Enable+0x6a>
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <ADC_Enable+0x10c>)
 80048a0:	e000      	b.n	80048a4 <ADC_Enable+0x6c>
 80048a2:	4b29      	ldr	r3, [pc, #164]	@ (8004948 <ADC_Enable+0x110>)
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe feb3 	bl	8003610 <LL_ADC_GetMultimode>
 80048aa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a23      	ldr	r2, [pc, #140]	@ (8004940 <ADC_Enable+0x108>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d002      	beq.n	80048bc <ADC_Enable+0x84>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	e000      	b.n	80048be <ADC_Enable+0x86>
 80048bc:	4b1f      	ldr	r3, [pc, #124]	@ (800493c <ADC_Enable+0x104>)
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02c      	beq.n	8004920 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d130      	bne.n	800492e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048cc:	e028      	b.n	8004920 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe ff20 	bl	8003718 <LL_ADC_IsEnabled>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fef0 	bl	80036c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048e8:	f7fe fd2c 	bl	8003344 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d914      	bls.n	8004920 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d00d      	beq.n	8004920 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004908:	f043 0210 	orr.w	r2, r3, #16
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e007      	b.n	8004930 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d1cf      	bne.n	80048ce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	8000003f 	.word	0x8000003f
 800493c:	40022000 	.word	0x40022000
 8004940:	40022100 	.word	0x40022100
 8004944:	40022300 	.word	0x40022300
 8004948:	58026300 	.word	0x58026300

0800494c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fef0 	bl	800373e <LL_ADC_IsDisableOngoing>
 800495e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fed7 	bl	8003718 <LL_ADC_IsEnabled>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d047      	beq.n	8004a00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d144      	bne.n	8004a00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030d 	and.w	r3, r3, #13
 8004980:	2b01      	cmp	r3, #1
 8004982:	d10c      	bne.n	800499e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe feb1 	bl	80036f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2203      	movs	r2, #3
 8004994:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004996:	f7fe fcd5 	bl	8003344 <HAL_GetTick>
 800499a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800499c:	e029      	b.n	80049f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e023      	b.n	8004a02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049ba:	f7fe fcc3 	bl	8003344 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d914      	bls.n	80049f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00d      	beq.n	80049f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049da:	f043 0210 	orr.w	r2, r3, #16
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e007      	b.n	8004a02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1dc      	bne.n	80049ba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d14b      	bne.n	8004abc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d021      	beq.n	8004a82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe fd42 	bl	80034cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d032      	beq.n	8004ab4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d12b      	bne.n	8004ab4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11f      	bne.n	8004ab4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a80:	e018      	b.n	8004ab4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d111      	bne.n	8004ab4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aac:	f043 0201 	orr.w	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7fd fdd5 	bl	8002664 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004aba:	e00e      	b.n	8004ada <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fa9f 	bl	800400c <HAL_ADC_ErrorCallback>
}
 8004ace:	e004      	b.n	8004ada <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fa81 	bl	8003ff8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1c:	f043 0204 	orr.w	r2, r3, #4
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff fa71 	bl	800400c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a7a      	ldr	r2, [pc, #488]	@ (8004d2c <ADC_ConfigureBoostMode+0x1f8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <ADC_ConfigureBoostMode+0x1c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a79      	ldr	r2, [pc, #484]	@ (8004d30 <ADC_ConfigureBoostMode+0x1fc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <ADC_ConfigureBoostMode+0x30>
 8004b50:	4b78      	ldr	r3, [pc, #480]	@ (8004d34 <ADC_ConfigureBoostMode+0x200>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <ADC_ConfigureBoostMode+0x42>
 8004b64:	4b74      	ldr	r3, [pc, #464]	@ (8004d38 <ADC_ConfigureBoostMode+0x204>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01c      	beq.n	8004bb4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b7a:	f005 f923 	bl	8009dc4 <HAL_RCC_GetHCLKFreq>
 8004b7e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b88:	d010      	beq.n	8004bac <ADC_ConfigureBoostMode+0x78>
 8004b8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b8e:	d873      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b94:	d002      	beq.n	8004b9c <ADC_ConfigureBoostMode+0x68>
 8004b96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b9a:	d16d      	bne.n	8004c78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	60fb      	str	r3, [r7, #12]
        break;
 8004baa:	e068      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	60fb      	str	r3, [r7, #12]
        break;
 8004bb2:	e064      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bb4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004bb8:	f04f 0100 	mov.w	r1, #0
 8004bbc:	f006 fb68 	bl	800b290 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bc0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004bca:	d051      	beq.n	8004c70 <ADC_ConfigureBoostMode+0x13c>
 8004bcc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004bd0:	d854      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004bd2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004bd6:	d047      	beq.n	8004c68 <ADC_ConfigureBoostMode+0x134>
 8004bd8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004bdc:	d84e      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004bde:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004be2:	d03d      	beq.n	8004c60 <ADC_ConfigureBoostMode+0x12c>
 8004be4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004be8:	d848      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bee:	d033      	beq.n	8004c58 <ADC_ConfigureBoostMode+0x124>
 8004bf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bf4:	d842      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004bf6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004bfa:	d029      	beq.n	8004c50 <ADC_ConfigureBoostMode+0x11c>
 8004bfc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004c00:	d83c      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004c02:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c06:	d01a      	beq.n	8004c3e <ADC_ConfigureBoostMode+0x10a>
 8004c08:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004c0c:	d836      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004c0e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c12:	d014      	beq.n	8004c3e <ADC_ConfigureBoostMode+0x10a>
 8004c14:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004c18:	d830      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c1e:	d00e      	beq.n	8004c3e <ADC_ConfigureBoostMode+0x10a>
 8004c20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c24:	d82a      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004c26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c2a:	d008      	beq.n	8004c3e <ADC_ConfigureBoostMode+0x10a>
 8004c2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c30:	d824      	bhi.n	8004c7c <ADC_ConfigureBoostMode+0x148>
 8004c32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c36:	d002      	beq.n	8004c3e <ADC_ConfigureBoostMode+0x10a>
 8004c38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c3c:	d11e      	bne.n	8004c7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	0c9b      	lsrs	r3, r3, #18
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	60fb      	str	r3, [r7, #12]
        break;
 8004c4e:	e016      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	60fb      	str	r3, [r7, #12]
        break;
 8004c56:	e012      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	60fb      	str	r3, [r7, #12]
        break;
 8004c5e:	e00e      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	60fb      	str	r3, [r7, #12]
        break;
 8004c66:	e00a      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	09db      	lsrs	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
        break;
 8004c6e:	e006      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	60fb      	str	r3, [r7, #12]
        break;
 8004c76:	e002      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004c78:	bf00      	nop
 8004c7a:	e000      	b.n	8004c7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004c7c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004c7e:	f7fe fb91 	bl	80033a4 <HAL_GetREVID>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d815      	bhi.n	8004cb8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8004d3c <ADC_ConfigureBoostMode+0x208>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d908      	bls.n	8004ca6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ca4:	e03e      	b.n	8004d24 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cb4:	609a      	str	r2, [r3, #8]
}
 8004cb6:	e035      	b.n	8004d24 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <ADC_ConfigureBoostMode+0x20c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d808      	bhi.n	8004cd8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004cd4:	609a      	str	r2, [r3, #8]
}
 8004cd6:	e025      	b.n	8004d24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a1a      	ldr	r2, [pc, #104]	@ (8004d44 <ADC_ConfigureBoostMode+0x210>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d80a      	bhi.n	8004cf6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	e016      	b.n	8004d24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a13      	ldr	r2, [pc, #76]	@ (8004d48 <ADC_ConfigureBoostMode+0x214>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d80a      	bhi.n	8004d14 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	e007      	b.n	8004d24 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004d22:	609a      	str	r2, [r3, #8]
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40022000 	.word	0x40022000
 8004d30:	40022100 	.word	0x40022100
 8004d34:	40022300 	.word	0x40022300
 8004d38:	58026300 	.word	0x58026300
 8004d3c:	01312d00 	.word	0x01312d00
 8004d40:	005f5e10 	.word	0x005f5e10
 8004d44:	00bebc20 	.word	0x00bebc20
 8004d48:	017d7840 	.word	0x017d7840

08004d4c <LL_ADC_IsEnabled>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <LL_ADC_IsEnabled+0x18>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <LL_ADC_IsEnabled+0x1a>
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <LL_ADC_StartCalibration>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <LL_ADC_StartCalibration+0x38>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d94:	430a      	orrs	r2, r1
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	3ffeffc0 	.word	0x3ffeffc0

08004db0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc4:	d101      	bne.n	8004dca <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_ADC_REG_IsConversionOngoing>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d101      	bne.n	8004df0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_ADCEx_Calibration_Start+0x1e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e04c      	b.n	8004eb8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff fd90 	bl	800494c <ADC_Disable>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d135      	bne.n	8004ea2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e3a:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	f043 0202 	orr.w	r2, r3, #2
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff ff90 	bl	8004d74 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e54:	e014      	b.n	8004e80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4a19      	ldr	r2, [pc, #100]	@ (8004ec4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d30d      	bcc.n	8004e80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e68:	f023 0312 	bic.w	r3, r3, #18
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e01b      	b.n	8004eb8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff93 	bl	8004db0 <LL_ADC_IsCalibrationOnGoing>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e2      	bne.n	8004e56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	f023 0303 	bic.w	r3, r3, #3
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ea0:	e005      	b.n	8004eae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea6:	f043 0210 	orr.w	r2, r3, #16
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	ffffeefd 	.word	0xffffeefd
 8004ec4:	25c3f800 	.word	0x25c3f800

08004ec8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b09f      	sub	sp, #124	@ 0x7c
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e0be      	b.n	8005064 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5c      	ldr	r2, [pc, #368]	@ (800506c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d102      	bne.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f00:	4b5b      	ldr	r3, [pc, #364]	@ (8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f02:	60bb      	str	r3, [r7, #8]
 8004f04:	e001      	b.n	8004f0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e09d      	b.n	8005064 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff ff54 	bl	8004dd8 <LL_ADC_REG_IsConversionOngoing>
 8004f30:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff ff4e 	bl	8004dd8 <LL_ADC_REG_IsConversionOngoing>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d17f      	bne.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d17c      	bne.n	8005042 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a47      	ldr	r2, [pc, #284]	@ (800506c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a46      	ldr	r2, [pc, #280]	@ (8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004f5c:	4b45      	ldr	r3, [pc, #276]	@ (8005074 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f5e:	e000      	b.n	8004f62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f60:	4b45      	ldr	r3, [pc, #276]	@ (8005078 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f62:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d039      	beq.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f7c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a3a      	ldr	r2, [pc, #232]	@ (800506c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a38      	ldr	r2, [pc, #224]	@ (8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10e      	bne.n	8004fb0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004f92:	4836      	ldr	r0, [pc, #216]	@ (800506c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f94:	f7ff feda 	bl	8004d4c <LL_ADC_IsEnabled>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	4835      	ldr	r0, [pc, #212]	@ (8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f9c:	f7ff fed6 	bl	8004d4c <LL_ADC_IsEnabled>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4323      	orrs	r3, r4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e008      	b.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004fb0:	4832      	ldr	r0, [pc, #200]	@ (800507c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fb2:	f7ff fecb 	bl	8004d4c <LL_ADC_IsEnabled>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d047      	beq.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	4b2d      	ldr	r3, [pc, #180]	@ (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	6811      	ldr	r1, [r2, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fdc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fde:	e03a      	b.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004fe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10e      	bne.n	800501e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005000:	481a      	ldr	r0, [pc, #104]	@ (800506c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005002:	f7ff fea3 	bl	8004d4c <LL_ADC_IsEnabled>
 8005006:	4604      	mov	r4, r0
 8005008:	4819      	ldr	r0, [pc, #100]	@ (8005070 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800500a:	f7ff fe9f 	bl	8004d4c <LL_ADC_IsEnabled>
 800500e:	4603      	mov	r3, r0
 8005010:	4323      	orrs	r3, r4
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	e008      	b.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800501e:	4817      	ldr	r0, [pc, #92]	@ (800507c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005020:	f7ff fe94 	bl	8004d4c <LL_ADC_IsEnabled>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800503a:	4013      	ands	r3, r2
 800503c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800503e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005040:	e009      	b.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005054:	e000      	b.n	8005058 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005056:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005060:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005064:	4618      	mov	r0, r3
 8005066:	377c      	adds	r7, #124	@ 0x7c
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}
 800506c:	40022000 	.word	0x40022000
 8005070:	40022100 	.word	0x40022100
 8005074:	40022300 	.word	0x40022300
 8005078:	58026300 	.word	0x58026300
 800507c:	58026000 	.word	0x58026000
 8005080:	fffff0e0 	.word	0xfffff0e0

08005084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005094:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <__NVIC_SetPriorityGrouping+0x40>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050a0:	4013      	ands	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <__NVIC_SetPriorityGrouping+0x44>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050b2:	4a04      	ldr	r2, [pc, #16]	@ (80050c4 <__NVIC_SetPriorityGrouping+0x40>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	60d3      	str	r3, [r2, #12]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000ed00 	.word	0xe000ed00
 80050c8:	05fa0000 	.word	0x05fa0000

080050cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050d0:	4b04      	ldr	r3, [pc, #16]	@ (80050e4 <__NVIC_GetPriorityGrouping+0x18>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	f003 0307 	and.w	r3, r3, #7
}
 80050da:	4618      	mov	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db0b      	blt.n	8005112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	f003 021f 	and.w	r2, r3, #31
 8005100:	4907      	ldr	r1, [pc, #28]	@ (8005120 <__NVIC_EnableIRQ+0x38>)
 8005102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2001      	movs	r0, #1
 800510a:	fa00 f202 	lsl.w	r2, r0, r2
 800510e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e100 	.word	0xe000e100

08005124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	6039      	str	r1, [r7, #0]
 800512e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005134:	2b00      	cmp	r3, #0
 8005136:	db0a      	blt.n	800514e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	490c      	ldr	r1, [pc, #48]	@ (8005170 <__NVIC_SetPriority+0x4c>)
 800513e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005142:	0112      	lsls	r2, r2, #4
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	440b      	add	r3, r1
 8005148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800514c:	e00a      	b.n	8005164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	4908      	ldr	r1, [pc, #32]	@ (8005174 <__NVIC_SetPriority+0x50>)
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	3b04      	subs	r3, #4
 800515c:	0112      	lsls	r2, r2, #4
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	440b      	add	r3, r1
 8005162:	761a      	strb	r2, [r3, #24]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000e100 	.word	0xe000e100
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	@ 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f1c3 0307 	rsb	r3, r3, #7
 8005192:	2b04      	cmp	r3, #4
 8005194:	bf28      	it	cs
 8005196:	2304      	movcs	r3, #4
 8005198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3304      	adds	r3, #4
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d902      	bls.n	80051a8 <NVIC_EncodePriority+0x30>
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	3b03      	subs	r3, #3
 80051a6:	e000      	b.n	80051aa <NVIC_EncodePriority+0x32>
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	401a      	ands	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	43d9      	mvns	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d0:	4313      	orrs	r3, r2
         );
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3724      	adds	r7, #36	@ 0x24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051f0:	d301      	bcc.n	80051f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051f2:	2301      	movs	r3, #1
 80051f4:	e00f      	b.n	8005216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <SysTick_Config+0x40>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051fe:	210f      	movs	r1, #15
 8005200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005204:	f7ff ff8e 	bl	8005124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <SysTick_Config+0x40>)
 800520a:	2200      	movs	r2, #0
 800520c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800520e:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <SysTick_Config+0x40>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	e000e010 	.word	0xe000e010

08005224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ff29 	bl	8005084 <__NVIC_SetPriorityGrouping>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005248:	f7ff ff40 	bl	80050cc <__NVIC_GetPriorityGrouping>
 800524c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	6978      	ldr	r0, [r7, #20]
 8005254:	f7ff ff90 	bl	8005178 <NVIC_EncodePriority>
 8005258:	4602      	mov	r2, r0
 800525a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff ff5f 	bl	8005124 <__NVIC_SetPriority>
}
 8005266:	bf00      	nop
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	4603      	mov	r3, r0
 8005276:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff ff33 	bl	80050e8 <__NVIC_EnableIRQ>
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff ffa4 	bl	80051e0 <SysTick_Config>
 8005298:	4603      	mov	r3, r0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80052a8:	f3bf 8f5f 	dmb	sy
}
 80052ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80052ae:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <HAL_MPU_Disable+0x28>)
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	4a06      	ldr	r2, [pc, #24]	@ (80052cc <HAL_MPU_Disable+0x28>)
 80052b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80052ba:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <HAL_MPU_Disable+0x2c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	605a      	str	r2, [r3, #4]
}
 80052c0:	bf00      	nop
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	e000ed00 	.word	0xe000ed00
 80052d0:	e000ed90 	.word	0xe000ed90

080052d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80052dc:	4a0b      	ldr	r2, [pc, #44]	@ (800530c <HAL_MPU_Enable+0x38>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80052e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <HAL_MPU_Enable+0x3c>)
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	4a09      	ldr	r2, [pc, #36]	@ (8005310 <HAL_MPU_Enable+0x3c>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80052f2:	f3bf 8f4f 	dsb	sy
}
 80052f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052f8:	f3bf 8f6f 	isb	sy
}
 80052fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	e000ed90 	.word	0xe000ed90
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	785a      	ldrb	r2, [r3, #1]
 8005320:	4b1d      	ldr	r3, [pc, #116]	@ (8005398 <HAL_MPU_ConfigRegion+0x84>)
 8005322:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d029      	beq.n	8005380 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800532c:	4a1a      	ldr	r2, [pc, #104]	@ (8005398 <HAL_MPU_ConfigRegion+0x84>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7b1b      	ldrb	r3, [r3, #12]
 8005338:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	7adb      	ldrb	r3, [r3, #11]
 800533e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005340:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	7a9b      	ldrb	r3, [r3, #10]
 8005346:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005348:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7b5b      	ldrb	r3, [r3, #13]
 800534e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005350:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	7b9b      	ldrb	r3, [r3, #14]
 8005356:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005358:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7bdb      	ldrb	r3, [r3, #15]
 800535e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005360:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	7a5b      	ldrb	r3, [r3, #9]
 8005366:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005368:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	7a1b      	ldrb	r3, [r3, #8]
 800536e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005370:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005378:	4a07      	ldr	r2, [pc, #28]	@ (8005398 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800537a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800537c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800537e:	e005      	b.n	800538c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005380:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <HAL_MPU_ConfigRegion+0x84>)
 8005382:	2200      	movs	r2, #0
 8005384:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005386:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <HAL_MPU_ConfigRegion+0x84>)
 8005388:	2200      	movs	r2, #0
 800538a:	611a      	str	r2, [r3, #16]
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000ed90 	.word	0xe000ed90

0800539c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e014      	b.n	80053d8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	791b      	ldrb	r3, [r3, #4]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fc f8f8 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	795b      	ldrb	r3, [r3, #5]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_DAC_ConfigChannel+0x18>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e12a      	b.n	800564e <HAL_DAC_ConfigChannel+0x26e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2202      	movs	r2, #2
 8005402:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b04      	cmp	r3, #4
 800540a:	f040 8081 	bne.w	8005510 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800540e:	f7fd ff99 	bl	8003344 <HAL_GetTick>
 8005412:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d140      	bne.n	800549c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800541a:	e018      	b.n	800544e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800541c:	f7fd ff92 	bl	8003344 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b01      	cmp	r3, #1
 8005428:	d911      	bls.n	800544e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005430:	4b89      	ldr	r3, [pc, #548]	@ (8005658 <HAL_DAC_ConfigChannel+0x278>)
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f043 0208 	orr.w	r2, r3, #8
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2203      	movs	r2, #3
 8005448:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e0ff      	b.n	800564e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005454:	4b80      	ldr	r3, [pc, #512]	@ (8005658 <HAL_DAC_ConfigChannel+0x278>)
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1df      	bne.n	800541c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800545c:	2001      	movs	r0, #1
 800545e:	f7fd ff7d 	bl	800335c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	6992      	ldr	r2, [r2, #24]
 800546a:	641a      	str	r2, [r3, #64]	@ 0x40
 800546c:	e023      	b.n	80054b6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800546e:	f7fd ff69 	bl	8003344 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d90f      	bls.n	800549c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005482:	2b00      	cmp	r3, #0
 8005484:	da0a      	bge.n	800549c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f043 0208 	orr.w	r2, r3, #8
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2203      	movs	r2, #3
 8005496:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e0d8      	b.n	800564e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	dbe3      	blt.n	800546e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7fd ff58 	bl	800335c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	6992      	ldr	r2, [r2, #24]
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	43db      	mvns	r3, r3
 80054cc:	ea02 0103 	and.w	r1, r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	69da      	ldr	r2, [r3, #28]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	409a      	lsls	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	21ff      	movs	r1, #255	@ 0xff
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	ea02 0103 	and.w	r1, r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	409a      	lsls	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d11d      	bne.n	8005554 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	221f      	movs	r2, #31
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4013      	ands	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2207      	movs	r2, #7
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4013      	ands	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d102      	bne.n	800557e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e00f      	b.n	800559e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d102      	bne.n	800558c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005586:	2301      	movs	r3, #1
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e008      	b.n	800559e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005594:	2301      	movs	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e001      	b.n	800559e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	43da      	mvns	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	400a      	ands	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4013      	ands	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	22c0      	movs	r2, #192	@ 0xc0
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43da      	mvns	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	400a      	ands	r2, r1
 800563e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3720      	adds	r7, #32
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20008000 	.word	0x20008000

0800565c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005664:	f7fd fe6e 	bl	8003344 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e316      	b.n	8005ca2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a66      	ldr	r2, [pc, #408]	@ (8005814 <HAL_DMA_Init+0x1b8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d04a      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a65      	ldr	r2, [pc, #404]	@ (8005818 <HAL_DMA_Init+0x1bc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d045      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a63      	ldr	r2, [pc, #396]	@ (800581c <HAL_DMA_Init+0x1c0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d040      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a62      	ldr	r2, [pc, #392]	@ (8005820 <HAL_DMA_Init+0x1c4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d03b      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a60      	ldr	r2, [pc, #384]	@ (8005824 <HAL_DMA_Init+0x1c8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d036      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a5f      	ldr	r2, [pc, #380]	@ (8005828 <HAL_DMA_Init+0x1cc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d031      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5d      	ldr	r2, [pc, #372]	@ (800582c <HAL_DMA_Init+0x1d0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d02c      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a5c      	ldr	r2, [pc, #368]	@ (8005830 <HAL_DMA_Init+0x1d4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d027      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005834 <HAL_DMA_Init+0x1d8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d022      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a59      	ldr	r2, [pc, #356]	@ (8005838 <HAL_DMA_Init+0x1dc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d01d      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a57      	ldr	r2, [pc, #348]	@ (800583c <HAL_DMA_Init+0x1e0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a56      	ldr	r2, [pc, #344]	@ (8005840 <HAL_DMA_Init+0x1e4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a54      	ldr	r2, [pc, #336]	@ (8005844 <HAL_DMA_Init+0x1e8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a53      	ldr	r2, [pc, #332]	@ (8005848 <HAL_DMA_Init+0x1ec>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a51      	ldr	r2, [pc, #324]	@ (800584c <HAL_DMA_Init+0x1f0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_DMA_Init+0xb8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a50      	ldr	r2, [pc, #320]	@ (8005850 <HAL_DMA_Init+0x1f4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d101      	bne.n	8005718 <HAL_DMA_Init+0xbc>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <HAL_DMA_Init+0xbe>
 8005718:	2300      	movs	r3, #0
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 813b 	beq.w	8005996 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a37      	ldr	r2, [pc, #220]	@ (8005814 <HAL_DMA_Init+0x1b8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d04a      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a36      	ldr	r2, [pc, #216]	@ (8005818 <HAL_DMA_Init+0x1bc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d045      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a34      	ldr	r2, [pc, #208]	@ (800581c <HAL_DMA_Init+0x1c0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d040      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a33      	ldr	r2, [pc, #204]	@ (8005820 <HAL_DMA_Init+0x1c4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d03b      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a31      	ldr	r2, [pc, #196]	@ (8005824 <HAL_DMA_Init+0x1c8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d036      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a30      	ldr	r2, [pc, #192]	@ (8005828 <HAL_DMA_Init+0x1cc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d031      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2e      	ldr	r2, [pc, #184]	@ (800582c <HAL_DMA_Init+0x1d0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02c      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2d      	ldr	r2, [pc, #180]	@ (8005830 <HAL_DMA_Init+0x1d4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d027      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a2b      	ldr	r2, [pc, #172]	@ (8005834 <HAL_DMA_Init+0x1d8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d022      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2a      	ldr	r2, [pc, #168]	@ (8005838 <HAL_DMA_Init+0x1dc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d01d      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a28      	ldr	r2, [pc, #160]	@ (800583c <HAL_DMA_Init+0x1e0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d018      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a27      	ldr	r2, [pc, #156]	@ (8005840 <HAL_DMA_Init+0x1e4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a25      	ldr	r2, [pc, #148]	@ (8005844 <HAL_DMA_Init+0x1e8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00e      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a24      	ldr	r2, [pc, #144]	@ (8005848 <HAL_DMA_Init+0x1ec>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a22      	ldr	r2, [pc, #136]	@ (800584c <HAL_DMA_Init+0x1f0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_DMA_Init+0x174>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a21      	ldr	r2, [pc, #132]	@ (8005850 <HAL_DMA_Init+0x1f4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d108      	bne.n	80057e2 <HAL_DMA_Init+0x186>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e007      	b.n	80057f2 <HAL_DMA_Init+0x196>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057f2:	e02f      	b.n	8005854 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057f4:	f7fd fda6 	bl	8003344 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d928      	bls.n	8005854 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2203      	movs	r2, #3
 800580c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e246      	b.n	8005ca2 <HAL_DMA_Init+0x646>
 8005814:	40020010 	.word	0x40020010
 8005818:	40020028 	.word	0x40020028
 800581c:	40020040 	.word	0x40020040
 8005820:	40020058 	.word	0x40020058
 8005824:	40020070 	.word	0x40020070
 8005828:	40020088 	.word	0x40020088
 800582c:	400200a0 	.word	0x400200a0
 8005830:	400200b8 	.word	0x400200b8
 8005834:	40020410 	.word	0x40020410
 8005838:	40020428 	.word	0x40020428
 800583c:	40020440 	.word	0x40020440
 8005840:	40020458 	.word	0x40020458
 8005844:	40020470 	.word	0x40020470
 8005848:	40020488 	.word	0x40020488
 800584c:	400204a0 	.word	0x400204a0
 8005850:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1c8      	bne.n	80057f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4b83      	ldr	r3, [pc, #524]	@ (8005a7c <HAL_DMA_Init+0x420>)
 800586e:	4013      	ands	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800587a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005886:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005892:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d107      	bne.n	80058b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	4313      	orrs	r3, r2
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80058b8:	4b71      	ldr	r3, [pc, #452]	@ (8005a80 <HAL_DMA_Init+0x424>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b71      	ldr	r3, [pc, #452]	@ (8005a84 <HAL_DMA_Init+0x428>)
 80058be:	4013      	ands	r3, r2
 80058c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c4:	d328      	bcc.n	8005918 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b28      	cmp	r3, #40	@ 0x28
 80058cc:	d903      	bls.n	80058d6 <HAL_DMA_Init+0x27a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80058d4:	d917      	bls.n	8005906 <HAL_DMA_Init+0x2aa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b3e      	cmp	r3, #62	@ 0x3e
 80058dc:	d903      	bls.n	80058e6 <HAL_DMA_Init+0x28a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b42      	cmp	r3, #66	@ 0x42
 80058e4:	d90f      	bls.n	8005906 <HAL_DMA_Init+0x2aa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b46      	cmp	r3, #70	@ 0x46
 80058ec:	d903      	bls.n	80058f6 <HAL_DMA_Init+0x29a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b48      	cmp	r3, #72	@ 0x48
 80058f4:	d907      	bls.n	8005906 <HAL_DMA_Init+0x2aa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80058fc:	d905      	bls.n	800590a <HAL_DMA_Init+0x2ae>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b52      	cmp	r3, #82	@ 0x52
 8005904:	d801      	bhi.n	800590a <HAL_DMA_Init+0x2ae>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <HAL_DMA_Init+0x2b0>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005916:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0307 	bic.w	r3, r3, #7
 800592e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	2b04      	cmp	r3, #4
 8005940:	d117      	bne.n	8005972 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00e      	beq.n	8005972 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f002 fce9 	bl	800832c <DMA_CheckFifoParam>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2240      	movs	r2, #64	@ 0x40
 8005964:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e197      	b.n	8005ca2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f002 fc24 	bl	80081c8 <DMA_CalcBaseAndBitshift>
 8005980:	4603      	mov	r3, r0
 8005982:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	223f      	movs	r2, #63	@ 0x3f
 800598e:	409a      	lsls	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	e0cd      	b.n	8005b32 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a88 <HAL_DMA_Init+0x42c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d022      	beq.n	80059e6 <HAL_DMA_Init+0x38a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a39      	ldr	r2, [pc, #228]	@ (8005a8c <HAL_DMA_Init+0x430>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_Init+0x38a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a38      	ldr	r2, [pc, #224]	@ (8005a90 <HAL_DMA_Init+0x434>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_Init+0x38a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a36      	ldr	r2, [pc, #216]	@ (8005a94 <HAL_DMA_Init+0x438>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_Init+0x38a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a35      	ldr	r2, [pc, #212]	@ (8005a98 <HAL_DMA_Init+0x43c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_Init+0x38a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a33      	ldr	r2, [pc, #204]	@ (8005a9c <HAL_DMA_Init+0x440>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_DMA_Init+0x38a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a32      	ldr	r2, [pc, #200]	@ (8005aa0 <HAL_DMA_Init+0x444>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_DMA_Init+0x38a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a30      	ldr	r2, [pc, #192]	@ (8005aa4 <HAL_DMA_Init+0x448>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d101      	bne.n	80059ea <HAL_DMA_Init+0x38e>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_DMA_Init+0x390>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8097 	beq.w	8005b20 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a24      	ldr	r2, [pc, #144]	@ (8005a88 <HAL_DMA_Init+0x42c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d021      	beq.n	8005a40 <HAL_DMA_Init+0x3e4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <HAL_DMA_Init+0x430>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01c      	beq.n	8005a40 <HAL_DMA_Init+0x3e4>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a21      	ldr	r2, [pc, #132]	@ (8005a90 <HAL_DMA_Init+0x434>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d017      	beq.n	8005a40 <HAL_DMA_Init+0x3e4>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <HAL_DMA_Init+0x438>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d012      	beq.n	8005a40 <HAL_DMA_Init+0x3e4>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a98 <HAL_DMA_Init+0x43c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00d      	beq.n	8005a40 <HAL_DMA_Init+0x3e4>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <HAL_DMA_Init+0x440>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d008      	beq.n	8005a40 <HAL_DMA_Init+0x3e4>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa0 <HAL_DMA_Init+0x444>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <HAL_DMA_Init+0x3e4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_DMA_Init+0x448>)
 8005a3e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <HAL_DMA_Init+0x44c>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b40      	cmp	r3, #64	@ 0x40
 8005a66:	d021      	beq.n	8005aac <HAL_DMA_Init+0x450>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b80      	cmp	r3, #128	@ 0x80
 8005a6e:	d102      	bne.n	8005a76 <HAL_DMA_Init+0x41a>
 8005a70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a74:	e01b      	b.n	8005aae <HAL_DMA_Init+0x452>
 8005a76:	2300      	movs	r3, #0
 8005a78:	e019      	b.n	8005aae <HAL_DMA_Init+0x452>
 8005a7a:	bf00      	nop
 8005a7c:	fe10803f 	.word	0xfe10803f
 8005a80:	5c001000 	.word	0x5c001000
 8005a84:	ffff0000 	.word	0xffff0000
 8005a88:	58025408 	.word	0x58025408
 8005a8c:	5802541c 	.word	0x5802541c
 8005a90:	58025430 	.word	0x58025430
 8005a94:	58025444 	.word	0x58025444
 8005a98:	58025458 	.word	0x58025458
 8005a9c:	5802546c 	.word	0x5802546c
 8005aa0:	58025480 	.word	0x58025480
 8005aa4:	58025494 	.word	0x58025494
 8005aa8:	fffe000f 	.word	0xfffe000f
 8005aac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68d2      	ldr	r2, [r2, #12]
 8005ab2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005abc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005acc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ad4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005adc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	4b6e      	ldr	r3, [pc, #440]	@ (8005cac <HAL_DMA_Init+0x650>)
 8005af4:	4413      	add	r3, r2
 8005af6:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb0 <HAL_DMA_Init+0x654>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	009a      	lsls	r2, r3, #2
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f002 fb5f 	bl	80081c8 <DMA_CalcBaseAndBitshift>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2201      	movs	r2, #1
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	e008      	b.n	8005b32 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2240      	movs	r2, #64	@ 0x40
 8005b24:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2203      	movs	r2, #3
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e0b7      	b.n	8005ca2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a5f      	ldr	r2, [pc, #380]	@ (8005cb4 <HAL_DMA_Init+0x658>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d072      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5d      	ldr	r2, [pc, #372]	@ (8005cb8 <HAL_DMA_Init+0x65c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d06d      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8005cbc <HAL_DMA_Init+0x660>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d068      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a5a      	ldr	r2, [pc, #360]	@ (8005cc0 <HAL_DMA_Init+0x664>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d063      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a59      	ldr	r2, [pc, #356]	@ (8005cc4 <HAL_DMA_Init+0x668>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d05e      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a57      	ldr	r2, [pc, #348]	@ (8005cc8 <HAL_DMA_Init+0x66c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d059      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a56      	ldr	r2, [pc, #344]	@ (8005ccc <HAL_DMA_Init+0x670>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d054      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a54      	ldr	r2, [pc, #336]	@ (8005cd0 <HAL_DMA_Init+0x674>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d04f      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a53      	ldr	r2, [pc, #332]	@ (8005cd4 <HAL_DMA_Init+0x678>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a51      	ldr	r2, [pc, #324]	@ (8005cd8 <HAL_DMA_Init+0x67c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a50      	ldr	r2, [pc, #320]	@ (8005cdc <HAL_DMA_Init+0x680>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a4e      	ldr	r2, [pc, #312]	@ (8005ce0 <HAL_DMA_Init+0x684>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce4 <HAL_DMA_Init+0x688>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8005ce8 <HAL_DMA_Init+0x68c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a4a      	ldr	r2, [pc, #296]	@ (8005cec <HAL_DMA_Init+0x690>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a48      	ldr	r2, [pc, #288]	@ (8005cf0 <HAL_DMA_Init+0x694>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a47      	ldr	r2, [pc, #284]	@ (8005cf4 <HAL_DMA_Init+0x698>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a45      	ldr	r2, [pc, #276]	@ (8005cf8 <HAL_DMA_Init+0x69c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a44      	ldr	r2, [pc, #272]	@ (8005cfc <HAL_DMA_Init+0x6a0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a42      	ldr	r2, [pc, #264]	@ (8005d00 <HAL_DMA_Init+0x6a4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a41      	ldr	r2, [pc, #260]	@ (8005d04 <HAL_DMA_Init+0x6a8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3f      	ldr	r2, [pc, #252]	@ (8005d08 <HAL_DMA_Init+0x6ac>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3e      	ldr	r2, [pc, #248]	@ (8005d0c <HAL_DMA_Init+0x6b0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_Init+0x5c6>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d10 <HAL_DMA_Init+0x6b4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <HAL_DMA_Init+0x5ca>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <HAL_DMA_Init+0x5cc>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d032      	beq.n	8005c92 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f002 fbf9 	bl	8008424 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b80      	cmp	r3, #128	@ 0x80
 8005c38:	d102      	bne.n	8005c40 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005c54:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d010      	beq.n	8005c80 <HAL_DMA_Init+0x624>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d80c      	bhi.n	8005c80 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f002 fc76 	bl	8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e008      	b.n	8005c92 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	a7fdabf8 	.word	0xa7fdabf8
 8005cb0:	cccccccd 	.word	0xcccccccd
 8005cb4:	40020010 	.word	0x40020010
 8005cb8:	40020028 	.word	0x40020028
 8005cbc:	40020040 	.word	0x40020040
 8005cc0:	40020058 	.word	0x40020058
 8005cc4:	40020070 	.word	0x40020070
 8005cc8:	40020088 	.word	0x40020088
 8005ccc:	400200a0 	.word	0x400200a0
 8005cd0:	400200b8 	.word	0x400200b8
 8005cd4:	40020410 	.word	0x40020410
 8005cd8:	40020428 	.word	0x40020428
 8005cdc:	40020440 	.word	0x40020440
 8005ce0:	40020458 	.word	0x40020458
 8005ce4:	40020470 	.word	0x40020470
 8005ce8:	40020488 	.word	0x40020488
 8005cec:	400204a0 	.word	0x400204a0
 8005cf0:	400204b8 	.word	0x400204b8
 8005cf4:	58025408 	.word	0x58025408
 8005cf8:	5802541c 	.word	0x5802541c
 8005cfc:	58025430 	.word	0x58025430
 8005d00:	58025444 	.word	0x58025444
 8005d04:	58025458 	.word	0x58025458
 8005d08:	5802546c 	.word	0x5802546c
 8005d0c:	58025480 	.word	0x58025480
 8005d10:	58025494 	.word	0x58025494

08005d14 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e1a8      	b.n	8006078 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a82      	ldr	r2, [pc, #520]	@ (8005f34 <HAL_DMA_DeInit+0x220>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d04a      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a80      	ldr	r2, [pc, #512]	@ (8005f38 <HAL_DMA_DeInit+0x224>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d045      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a7f      	ldr	r2, [pc, #508]	@ (8005f3c <HAL_DMA_DeInit+0x228>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d040      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a7d      	ldr	r2, [pc, #500]	@ (8005f40 <HAL_DMA_DeInit+0x22c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d03b      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a7c      	ldr	r2, [pc, #496]	@ (8005f44 <HAL_DMA_DeInit+0x230>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d036      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a7a      	ldr	r2, [pc, #488]	@ (8005f48 <HAL_DMA_DeInit+0x234>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d031      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a79      	ldr	r2, [pc, #484]	@ (8005f4c <HAL_DMA_DeInit+0x238>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d02c      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a77      	ldr	r2, [pc, #476]	@ (8005f50 <HAL_DMA_DeInit+0x23c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d027      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a76      	ldr	r2, [pc, #472]	@ (8005f54 <HAL_DMA_DeInit+0x240>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d022      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a74      	ldr	r2, [pc, #464]	@ (8005f58 <HAL_DMA_DeInit+0x244>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d01d      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a73      	ldr	r2, [pc, #460]	@ (8005f5c <HAL_DMA_DeInit+0x248>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d018      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a71      	ldr	r2, [pc, #452]	@ (8005f60 <HAL_DMA_DeInit+0x24c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a70      	ldr	r2, [pc, #448]	@ (8005f64 <HAL_DMA_DeInit+0x250>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a6e      	ldr	r2, [pc, #440]	@ (8005f68 <HAL_DMA_DeInit+0x254>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a6d      	ldr	r2, [pc, #436]	@ (8005f6c <HAL_DMA_DeInit+0x258>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_DMA_DeInit+0xb2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a6b      	ldr	r2, [pc, #428]	@ (8005f70 <HAL_DMA_DeInit+0x25c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d108      	bne.n	8005dd8 <HAL_DMA_DeInit+0xc4>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e007      	b.n	8005de8 <HAL_DMA_DeInit+0xd4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0201 	bic.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a51      	ldr	r2, [pc, #324]	@ (8005f34 <HAL_DMA_DeInit+0x220>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d04a      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a50      	ldr	r2, [pc, #320]	@ (8005f38 <HAL_DMA_DeInit+0x224>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d045      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a4e      	ldr	r2, [pc, #312]	@ (8005f3c <HAL_DMA_DeInit+0x228>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d040      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8005f40 <HAL_DMA_DeInit+0x22c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d03b      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a4b      	ldr	r2, [pc, #300]	@ (8005f44 <HAL_DMA_DeInit+0x230>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d036      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a4a      	ldr	r2, [pc, #296]	@ (8005f48 <HAL_DMA_DeInit+0x234>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d031      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a48      	ldr	r2, [pc, #288]	@ (8005f4c <HAL_DMA_DeInit+0x238>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d02c      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a47      	ldr	r2, [pc, #284]	@ (8005f50 <HAL_DMA_DeInit+0x23c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d027      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a45      	ldr	r2, [pc, #276]	@ (8005f54 <HAL_DMA_DeInit+0x240>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d022      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a44      	ldr	r2, [pc, #272]	@ (8005f58 <HAL_DMA_DeInit+0x244>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d01d      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a42      	ldr	r2, [pc, #264]	@ (8005f5c <HAL_DMA_DeInit+0x248>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	@ (8005f60 <HAL_DMA_DeInit+0x24c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a3f      	ldr	r2, [pc, #252]	@ (8005f64 <HAL_DMA_DeInit+0x250>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f68 <HAL_DMA_DeInit+0x254>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a3c      	ldr	r2, [pc, #240]	@ (8005f6c <HAL_DMA_DeInit+0x258>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_DMA_DeInit+0x174>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3b      	ldr	r2, [pc, #236]	@ (8005f70 <HAL_DMA_DeInit+0x25c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d101      	bne.n	8005e8c <HAL_DMA_DeInit+0x178>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <HAL_DMA_DeInit+0x17a>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d025      	beq.n	8005ede <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2221      	movs	r2, #33	@ 0x21
 8005ec0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f002 f980 	bl	80081c8 <DMA_CalcBaseAndBitshift>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	223f      	movs	r2, #63	@ 0x3f
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]
 8005edc:	e081      	b.n	8005fe2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a24      	ldr	r2, [pc, #144]	@ (8005f74 <HAL_DMA_DeInit+0x260>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d022      	beq.n	8005f2e <HAL_DMA_DeInit+0x21a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <HAL_DMA_DeInit+0x264>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01d      	beq.n	8005f2e <HAL_DMA_DeInit+0x21a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	@ (8005f7c <HAL_DMA_DeInit+0x268>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d018      	beq.n	8005f2e <HAL_DMA_DeInit+0x21a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	@ (8005f80 <HAL_DMA_DeInit+0x26c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <HAL_DMA_DeInit+0x21a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005f84 <HAL_DMA_DeInit+0x270>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <HAL_DMA_DeInit+0x21a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <HAL_DMA_DeInit+0x274>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_DMA_DeInit+0x21a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f8c <HAL_DMA_DeInit+0x278>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_DMA_DeInit+0x21a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a19      	ldr	r2, [pc, #100]	@ (8005f90 <HAL_DMA_DeInit+0x27c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d132      	bne.n	8005f94 <HAL_DMA_DeInit+0x280>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e031      	b.n	8005f96 <HAL_DMA_DeInit+0x282>
 8005f32:	bf00      	nop
 8005f34:	40020010 	.word	0x40020010
 8005f38:	40020028 	.word	0x40020028
 8005f3c:	40020040 	.word	0x40020040
 8005f40:	40020058 	.word	0x40020058
 8005f44:	40020070 	.word	0x40020070
 8005f48:	40020088 	.word	0x40020088
 8005f4c:	400200a0 	.word	0x400200a0
 8005f50:	400200b8 	.word	0x400200b8
 8005f54:	40020410 	.word	0x40020410
 8005f58:	40020428 	.word	0x40020428
 8005f5c:	40020440 	.word	0x40020440
 8005f60:	40020458 	.word	0x40020458
 8005f64:	40020470 	.word	0x40020470
 8005f68:	40020488 	.word	0x40020488
 8005f6c:	400204a0 	.word	0x400204a0
 8005f70:	400204b8 	.word	0x400204b8
 8005f74:	58025408 	.word	0x58025408
 8005f78:	5802541c 	.word	0x5802541c
 8005f7c:	58025430 	.word	0x58025430
 8005f80:	58025444 	.word	0x58025444
 8005f84:	58025458 	.word	0x58025458
 8005f88:	5802546c 	.word	0x5802546c
 8005f8c:	58025480 	.word	0x58025480
 8005f90:	58025494 	.word	0x58025494
 8005f94:	2300      	movs	r3, #0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d021      	beq.n	8005fde <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 f900 	bl	80081c8 <DMA_CalcBaseAndBitshift>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	605a      	str	r2, [r3, #4]
 8005fdc:	e001      	b.n	8005fe2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e04a      	b.n	8006078 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f002 fa1e 	bl	8008424 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006000:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00f      	beq.n	800602a <HAL_DMA_DeInit+0x316>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b08      	cmp	r3, #8
 8006010:	d80b      	bhi.n	800602a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f002 faa0 	bl	8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006028:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e226      	b.n	80064ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_DMA_Start_IT+0x2a>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e21f      	b.n	80064ea <HAL_DMA_Start_IT+0x46a>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	f040 820a 	bne.w	80064d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a68      	ldr	r2, [pc, #416]	@ (8006274 <HAL_DMA_Start_IT+0x1f4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d04a      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a66      	ldr	r2, [pc, #408]	@ (8006278 <HAL_DMA_Start_IT+0x1f8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d045      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a65      	ldr	r2, [pc, #404]	@ (800627c <HAL_DMA_Start_IT+0x1fc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d040      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a63      	ldr	r2, [pc, #396]	@ (8006280 <HAL_DMA_Start_IT+0x200>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d03b      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a62      	ldr	r2, [pc, #392]	@ (8006284 <HAL_DMA_Start_IT+0x204>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d036      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a60      	ldr	r2, [pc, #384]	@ (8006288 <HAL_DMA_Start_IT+0x208>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d031      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a5f      	ldr	r2, [pc, #380]	@ (800628c <HAL_DMA_Start_IT+0x20c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d02c      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a5d      	ldr	r2, [pc, #372]	@ (8006290 <HAL_DMA_Start_IT+0x210>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d027      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a5c      	ldr	r2, [pc, #368]	@ (8006294 <HAL_DMA_Start_IT+0x214>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d022      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5a      	ldr	r2, [pc, #360]	@ (8006298 <HAL_DMA_Start_IT+0x218>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01d      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a59      	ldr	r2, [pc, #356]	@ (800629c <HAL_DMA_Start_IT+0x21c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d018      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a57      	ldr	r2, [pc, #348]	@ (80062a0 <HAL_DMA_Start_IT+0x220>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a56      	ldr	r2, [pc, #344]	@ (80062a4 <HAL_DMA_Start_IT+0x224>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a54      	ldr	r2, [pc, #336]	@ (80062a8 <HAL_DMA_Start_IT+0x228>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a53      	ldr	r2, [pc, #332]	@ (80062ac <HAL_DMA_Start_IT+0x22c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_DMA_Start_IT+0xee>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a51      	ldr	r2, [pc, #324]	@ (80062b0 <HAL_DMA_Start_IT+0x230>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d108      	bne.n	8006180 <HAL_DMA_Start_IT+0x100>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0201 	bic.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	e007      	b.n	8006190 <HAL_DMA_Start_IT+0x110>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f001 fe6a 	bl	8007e70 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a34      	ldr	r2, [pc, #208]	@ (8006274 <HAL_DMA_Start_IT+0x1f4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d04a      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a33      	ldr	r2, [pc, #204]	@ (8006278 <HAL_DMA_Start_IT+0x1f8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d045      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a31      	ldr	r2, [pc, #196]	@ (800627c <HAL_DMA_Start_IT+0x1fc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d040      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a30      	ldr	r2, [pc, #192]	@ (8006280 <HAL_DMA_Start_IT+0x200>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d03b      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006284 <HAL_DMA_Start_IT+0x204>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d036      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006288 <HAL_DMA_Start_IT+0x208>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d031      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	@ (800628c <HAL_DMA_Start_IT+0x20c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02c      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006290 <HAL_DMA_Start_IT+0x210>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d027      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a28      	ldr	r2, [pc, #160]	@ (8006294 <HAL_DMA_Start_IT+0x214>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a27      	ldr	r2, [pc, #156]	@ (8006298 <HAL_DMA_Start_IT+0x218>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01d      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a25      	ldr	r2, [pc, #148]	@ (800629c <HAL_DMA_Start_IT+0x21c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a24      	ldr	r2, [pc, #144]	@ (80062a0 <HAL_DMA_Start_IT+0x220>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	@ (80062a4 <HAL_DMA_Start_IT+0x224>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	@ (80062a8 <HAL_DMA_Start_IT+0x228>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1f      	ldr	r2, [pc, #124]	@ (80062ac <HAL_DMA_Start_IT+0x22c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_DMA_Start_IT+0x1bc>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1e      	ldr	r2, [pc, #120]	@ (80062b0 <HAL_DMA_Start_IT+0x230>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d101      	bne.n	8006240 <HAL_DMA_Start_IT+0x1c0>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_DMA_Start_IT+0x1c2>
 8006240:	2300      	movs	r3, #0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d036      	beq.n	80062b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f023 021e 	bic.w	r2, r3, #30
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0216 	orr.w	r2, r2, #22
 8006258:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d03e      	beq.n	80062e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0208 	orr.w	r2, r2, #8
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e035      	b.n	80062e0 <HAL_DMA_Start_IT+0x260>
 8006274:	40020010 	.word	0x40020010
 8006278:	40020028 	.word	0x40020028
 800627c:	40020040 	.word	0x40020040
 8006280:	40020058 	.word	0x40020058
 8006284:	40020070 	.word	0x40020070
 8006288:	40020088 	.word	0x40020088
 800628c:	400200a0 	.word	0x400200a0
 8006290:	400200b8 	.word	0x400200b8
 8006294:	40020410 	.word	0x40020410
 8006298:	40020428 	.word	0x40020428
 800629c:	40020440 	.word	0x40020440
 80062a0:	40020458 	.word	0x40020458
 80062a4:	40020470 	.word	0x40020470
 80062a8:	40020488 	.word	0x40020488
 80062ac:	400204a0 	.word	0x400204a0
 80062b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 020e 	bic.w	r2, r3, #14
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 020a 	orr.w	r2, r2, #10
 80062c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0204 	orr.w	r2, r2, #4
 80062de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a83      	ldr	r2, [pc, #524]	@ (80064f4 <HAL_DMA_Start_IT+0x474>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d072      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a82      	ldr	r2, [pc, #520]	@ (80064f8 <HAL_DMA_Start_IT+0x478>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d06d      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a80      	ldr	r2, [pc, #512]	@ (80064fc <HAL_DMA_Start_IT+0x47c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d068      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a7f      	ldr	r2, [pc, #508]	@ (8006500 <HAL_DMA_Start_IT+0x480>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d063      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a7d      	ldr	r2, [pc, #500]	@ (8006504 <HAL_DMA_Start_IT+0x484>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d05e      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7c      	ldr	r2, [pc, #496]	@ (8006508 <HAL_DMA_Start_IT+0x488>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d059      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a7a      	ldr	r2, [pc, #488]	@ (800650c <HAL_DMA_Start_IT+0x48c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d054      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a79      	ldr	r2, [pc, #484]	@ (8006510 <HAL_DMA_Start_IT+0x490>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d04f      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a77      	ldr	r2, [pc, #476]	@ (8006514 <HAL_DMA_Start_IT+0x494>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d04a      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a76      	ldr	r2, [pc, #472]	@ (8006518 <HAL_DMA_Start_IT+0x498>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d045      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a74      	ldr	r2, [pc, #464]	@ (800651c <HAL_DMA_Start_IT+0x49c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d040      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a73      	ldr	r2, [pc, #460]	@ (8006520 <HAL_DMA_Start_IT+0x4a0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d03b      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a71      	ldr	r2, [pc, #452]	@ (8006524 <HAL_DMA_Start_IT+0x4a4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d036      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a70      	ldr	r2, [pc, #448]	@ (8006528 <HAL_DMA_Start_IT+0x4a8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d031      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a6e      	ldr	r2, [pc, #440]	@ (800652c <HAL_DMA_Start_IT+0x4ac>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d02c      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a6d      	ldr	r2, [pc, #436]	@ (8006530 <HAL_DMA_Start_IT+0x4b0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d027      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a6b      	ldr	r2, [pc, #428]	@ (8006534 <HAL_DMA_Start_IT+0x4b4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d022      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a6a      	ldr	r2, [pc, #424]	@ (8006538 <HAL_DMA_Start_IT+0x4b8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d01d      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a68      	ldr	r2, [pc, #416]	@ (800653c <HAL_DMA_Start_IT+0x4bc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d018      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a67      	ldr	r2, [pc, #412]	@ (8006540 <HAL_DMA_Start_IT+0x4c0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a65      	ldr	r2, [pc, #404]	@ (8006544 <HAL_DMA_Start_IT+0x4c4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00e      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a64      	ldr	r2, [pc, #400]	@ (8006548 <HAL_DMA_Start_IT+0x4c8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d009      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a62      	ldr	r2, [pc, #392]	@ (800654c <HAL_DMA_Start_IT+0x4cc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_DMA_Start_IT+0x350>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a61      	ldr	r2, [pc, #388]	@ (8006550 <HAL_DMA_Start_IT+0x4d0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d101      	bne.n	80063d4 <HAL_DMA_Start_IT+0x354>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <HAL_DMA_Start_IT+0x356>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01a      	beq.n	8006410 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800640a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800640e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a37      	ldr	r2, [pc, #220]	@ (80064f4 <HAL_DMA_Start_IT+0x474>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d04a      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a36      	ldr	r2, [pc, #216]	@ (80064f8 <HAL_DMA_Start_IT+0x478>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d045      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a34      	ldr	r2, [pc, #208]	@ (80064fc <HAL_DMA_Start_IT+0x47c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d040      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a33      	ldr	r2, [pc, #204]	@ (8006500 <HAL_DMA_Start_IT+0x480>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d03b      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a31      	ldr	r2, [pc, #196]	@ (8006504 <HAL_DMA_Start_IT+0x484>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d036      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a30      	ldr	r2, [pc, #192]	@ (8006508 <HAL_DMA_Start_IT+0x488>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d031      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2e      	ldr	r2, [pc, #184]	@ (800650c <HAL_DMA_Start_IT+0x48c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d02c      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2d      	ldr	r2, [pc, #180]	@ (8006510 <HAL_DMA_Start_IT+0x490>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d027      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a2b      	ldr	r2, [pc, #172]	@ (8006514 <HAL_DMA_Start_IT+0x494>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d022      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2a      	ldr	r2, [pc, #168]	@ (8006518 <HAL_DMA_Start_IT+0x498>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d01d      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a28      	ldr	r2, [pc, #160]	@ (800651c <HAL_DMA_Start_IT+0x49c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d018      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a27      	ldr	r2, [pc, #156]	@ (8006520 <HAL_DMA_Start_IT+0x4a0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a25      	ldr	r2, [pc, #148]	@ (8006524 <HAL_DMA_Start_IT+0x4a4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a24      	ldr	r2, [pc, #144]	@ (8006528 <HAL_DMA_Start_IT+0x4a8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d009      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a22      	ldr	r2, [pc, #136]	@ (800652c <HAL_DMA_Start_IT+0x4ac>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_DMA_Start_IT+0x430>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a21      	ldr	r2, [pc, #132]	@ (8006530 <HAL_DMA_Start_IT+0x4b0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d108      	bne.n	80064c2 <HAL_DMA_Start_IT+0x442>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e012      	b.n	80064e8 <HAL_DMA_Start_IT+0x468>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e009      	b.n	80064e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40020010 	.word	0x40020010
 80064f8:	40020028 	.word	0x40020028
 80064fc:	40020040 	.word	0x40020040
 8006500:	40020058 	.word	0x40020058
 8006504:	40020070 	.word	0x40020070
 8006508:	40020088 	.word	0x40020088
 800650c:	400200a0 	.word	0x400200a0
 8006510:	400200b8 	.word	0x400200b8
 8006514:	40020410 	.word	0x40020410
 8006518:	40020428 	.word	0x40020428
 800651c:	40020440 	.word	0x40020440
 8006520:	40020458 	.word	0x40020458
 8006524:	40020470 	.word	0x40020470
 8006528:	40020488 	.word	0x40020488
 800652c:	400204a0 	.word	0x400204a0
 8006530:	400204b8 	.word	0x400204b8
 8006534:	58025408 	.word	0x58025408
 8006538:	5802541c 	.word	0x5802541c
 800653c:	58025430 	.word	0x58025430
 8006540:	58025444 	.word	0x58025444
 8006544:	58025458 	.word	0x58025458
 8006548:	5802546c 	.word	0x5802546c
 800654c:	58025480 	.word	0x58025480
 8006550:	58025494 	.word	0x58025494

08006554 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800655c:	f7fc fef2 	bl	8003344 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e2dc      	b.n	8006b26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d008      	beq.n	800658a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2280      	movs	r2, #128	@ 0x80
 800657c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e2cd      	b.n	8006b26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a76      	ldr	r2, [pc, #472]	@ (8006768 <HAL_DMA_Abort+0x214>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d04a      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a74      	ldr	r2, [pc, #464]	@ (800676c <HAL_DMA_Abort+0x218>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d045      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a73      	ldr	r2, [pc, #460]	@ (8006770 <HAL_DMA_Abort+0x21c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d040      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a71      	ldr	r2, [pc, #452]	@ (8006774 <HAL_DMA_Abort+0x220>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d03b      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a70      	ldr	r2, [pc, #448]	@ (8006778 <HAL_DMA_Abort+0x224>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d036      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a6e      	ldr	r2, [pc, #440]	@ (800677c <HAL_DMA_Abort+0x228>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d031      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006780 <HAL_DMA_Abort+0x22c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d02c      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a6b      	ldr	r2, [pc, #428]	@ (8006784 <HAL_DMA_Abort+0x230>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d027      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a6a      	ldr	r2, [pc, #424]	@ (8006788 <HAL_DMA_Abort+0x234>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d022      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a68      	ldr	r2, [pc, #416]	@ (800678c <HAL_DMA_Abort+0x238>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01d      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a67      	ldr	r2, [pc, #412]	@ (8006790 <HAL_DMA_Abort+0x23c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d018      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a65      	ldr	r2, [pc, #404]	@ (8006794 <HAL_DMA_Abort+0x240>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a64      	ldr	r2, [pc, #400]	@ (8006798 <HAL_DMA_Abort+0x244>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00e      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a62      	ldr	r2, [pc, #392]	@ (800679c <HAL_DMA_Abort+0x248>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a61      	ldr	r2, [pc, #388]	@ (80067a0 <HAL_DMA_Abort+0x24c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_DMA_Abort+0xd6>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5f      	ldr	r2, [pc, #380]	@ (80067a4 <HAL_DMA_Abort+0x250>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d101      	bne.n	800662e <HAL_DMA_Abort+0xda>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <HAL_DMA_Abort+0xdc>
 800662e:	2300      	movs	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 021e 	bic.w	r2, r2, #30
 8006642:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006652:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e00a      	b.n	8006672 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 020e 	bic.w	r2, r2, #14
 800666a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a3c      	ldr	r2, [pc, #240]	@ (8006768 <HAL_DMA_Abort+0x214>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d072      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3a      	ldr	r2, [pc, #232]	@ (800676c <HAL_DMA_Abort+0x218>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d06d      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a39      	ldr	r2, [pc, #228]	@ (8006770 <HAL_DMA_Abort+0x21c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d068      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a37      	ldr	r2, [pc, #220]	@ (8006774 <HAL_DMA_Abort+0x220>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d063      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a36      	ldr	r2, [pc, #216]	@ (8006778 <HAL_DMA_Abort+0x224>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d05e      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a34      	ldr	r2, [pc, #208]	@ (800677c <HAL_DMA_Abort+0x228>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d059      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a33      	ldr	r2, [pc, #204]	@ (8006780 <HAL_DMA_Abort+0x22c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d054      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a31      	ldr	r2, [pc, #196]	@ (8006784 <HAL_DMA_Abort+0x230>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d04f      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a30      	ldr	r2, [pc, #192]	@ (8006788 <HAL_DMA_Abort+0x234>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d04a      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a2e      	ldr	r2, [pc, #184]	@ (800678c <HAL_DMA_Abort+0x238>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d045      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2d      	ldr	r2, [pc, #180]	@ (8006790 <HAL_DMA_Abort+0x23c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d040      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006794 <HAL_DMA_Abort+0x240>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d03b      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006798 <HAL_DMA_Abort+0x244>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d036      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a28      	ldr	r2, [pc, #160]	@ (800679c <HAL_DMA_Abort+0x248>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d031      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a27      	ldr	r2, [pc, #156]	@ (80067a0 <HAL_DMA_Abort+0x24c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d02c      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a25      	ldr	r2, [pc, #148]	@ (80067a4 <HAL_DMA_Abort+0x250>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d027      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a24      	ldr	r2, [pc, #144]	@ (80067a8 <HAL_DMA_Abort+0x254>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d022      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a22      	ldr	r2, [pc, #136]	@ (80067ac <HAL_DMA_Abort+0x258>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d01d      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a21      	ldr	r2, [pc, #132]	@ (80067b0 <HAL_DMA_Abort+0x25c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d018      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1f      	ldr	r2, [pc, #124]	@ (80067b4 <HAL_DMA_Abort+0x260>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1e      	ldr	r2, [pc, #120]	@ (80067b8 <HAL_DMA_Abort+0x264>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00e      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1c      	ldr	r2, [pc, #112]	@ (80067bc <HAL_DMA_Abort+0x268>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d009      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a1b      	ldr	r2, [pc, #108]	@ (80067c0 <HAL_DMA_Abort+0x26c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d004      	beq.n	8006762 <HAL_DMA_Abort+0x20e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a19      	ldr	r2, [pc, #100]	@ (80067c4 <HAL_DMA_Abort+0x270>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d132      	bne.n	80067c8 <HAL_DMA_Abort+0x274>
 8006762:	2301      	movs	r3, #1
 8006764:	e031      	b.n	80067ca <HAL_DMA_Abort+0x276>
 8006766:	bf00      	nop
 8006768:	40020010 	.word	0x40020010
 800676c:	40020028 	.word	0x40020028
 8006770:	40020040 	.word	0x40020040
 8006774:	40020058 	.word	0x40020058
 8006778:	40020070 	.word	0x40020070
 800677c:	40020088 	.word	0x40020088
 8006780:	400200a0 	.word	0x400200a0
 8006784:	400200b8 	.word	0x400200b8
 8006788:	40020410 	.word	0x40020410
 800678c:	40020428 	.word	0x40020428
 8006790:	40020440 	.word	0x40020440
 8006794:	40020458 	.word	0x40020458
 8006798:	40020470 	.word	0x40020470
 800679c:	40020488 	.word	0x40020488
 80067a0:	400204a0 	.word	0x400204a0
 80067a4:	400204b8 	.word	0x400204b8
 80067a8:	58025408 	.word	0x58025408
 80067ac:	5802541c 	.word	0x5802541c
 80067b0:	58025430 	.word	0x58025430
 80067b4:	58025444 	.word	0x58025444
 80067b8:	58025458 	.word	0x58025458
 80067bc:	5802546c 	.word	0x5802546c
 80067c0:	58025480 	.word	0x58025480
 80067c4:	58025494 	.word	0x58025494
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a6d      	ldr	r2, [pc, #436]	@ (8006998 <HAL_DMA_Abort+0x444>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d04a      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a6b      	ldr	r2, [pc, #428]	@ (800699c <HAL_DMA_Abort+0x448>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d045      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6a      	ldr	r2, [pc, #424]	@ (80069a0 <HAL_DMA_Abort+0x44c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d040      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a68      	ldr	r2, [pc, #416]	@ (80069a4 <HAL_DMA_Abort+0x450>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d03b      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a67      	ldr	r2, [pc, #412]	@ (80069a8 <HAL_DMA_Abort+0x454>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d036      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a65      	ldr	r2, [pc, #404]	@ (80069ac <HAL_DMA_Abort+0x458>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d031      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a64      	ldr	r2, [pc, #400]	@ (80069b0 <HAL_DMA_Abort+0x45c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d02c      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a62      	ldr	r2, [pc, #392]	@ (80069b4 <HAL_DMA_Abort+0x460>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d027      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a61      	ldr	r2, [pc, #388]	@ (80069b8 <HAL_DMA_Abort+0x464>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a5f      	ldr	r2, [pc, #380]	@ (80069bc <HAL_DMA_Abort+0x468>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01d      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a5e      	ldr	r2, [pc, #376]	@ (80069c0 <HAL_DMA_Abort+0x46c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5c      	ldr	r2, [pc, #368]	@ (80069c4 <HAL_DMA_Abort+0x470>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a5b      	ldr	r2, [pc, #364]	@ (80069c8 <HAL_DMA_Abort+0x474>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a59      	ldr	r2, [pc, #356]	@ (80069cc <HAL_DMA_Abort+0x478>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a58      	ldr	r2, [pc, #352]	@ (80069d0 <HAL_DMA_Abort+0x47c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_DMA_Abort+0x32a>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a56      	ldr	r2, [pc, #344]	@ (80069d4 <HAL_DMA_Abort+0x480>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d108      	bne.n	8006890 <HAL_DMA_Abort+0x33c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	e007      	b.n	80068a0 <HAL_DMA_Abort+0x34c>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068a0:	e013      	b.n	80068ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068a2:	f7fc fd4f 	bl	8003344 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	d90c      	bls.n	80068ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2203      	movs	r2, #3
 80068ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e12d      	b.n	8006b26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e5      	bne.n	80068a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2f      	ldr	r2, [pc, #188]	@ (8006998 <HAL_DMA_Abort+0x444>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d04a      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a2d      	ldr	r2, [pc, #180]	@ (800699c <HAL_DMA_Abort+0x448>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d045      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2c      	ldr	r2, [pc, #176]	@ (80069a0 <HAL_DMA_Abort+0x44c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d040      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2a      	ldr	r2, [pc, #168]	@ (80069a4 <HAL_DMA_Abort+0x450>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d03b      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a29      	ldr	r2, [pc, #164]	@ (80069a8 <HAL_DMA_Abort+0x454>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d036      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a27      	ldr	r2, [pc, #156]	@ (80069ac <HAL_DMA_Abort+0x458>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d031      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a26      	ldr	r2, [pc, #152]	@ (80069b0 <HAL_DMA_Abort+0x45c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d02c      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a24      	ldr	r2, [pc, #144]	@ (80069b4 <HAL_DMA_Abort+0x460>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d027      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a23      	ldr	r2, [pc, #140]	@ (80069b8 <HAL_DMA_Abort+0x464>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a21      	ldr	r2, [pc, #132]	@ (80069bc <HAL_DMA_Abort+0x468>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01d      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a20      	ldr	r2, [pc, #128]	@ (80069c0 <HAL_DMA_Abort+0x46c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1e      	ldr	r2, [pc, #120]	@ (80069c4 <HAL_DMA_Abort+0x470>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <HAL_DMA_Abort+0x474>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	@ (80069cc <HAL_DMA_Abort+0x478>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1a      	ldr	r2, [pc, #104]	@ (80069d0 <HAL_DMA_Abort+0x47c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_DMA_Abort+0x422>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	@ (80069d4 <HAL_DMA_Abort+0x480>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d101      	bne.n	800697a <HAL_DMA_Abort+0x426>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <HAL_DMA_Abort+0x428>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02b      	beq.n	80069d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006984:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	223f      	movs	r2, #63	@ 0x3f
 8006990:	409a      	lsls	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	609a      	str	r2, [r3, #8]
 8006996:	e02a      	b.n	80069ee <HAL_DMA_Abort+0x49a>
 8006998:	40020010 	.word	0x40020010
 800699c:	40020028 	.word	0x40020028
 80069a0:	40020040 	.word	0x40020040
 80069a4:	40020058 	.word	0x40020058
 80069a8:	40020070 	.word	0x40020070
 80069ac:	40020088 	.word	0x40020088
 80069b0:	400200a0 	.word	0x400200a0
 80069b4:	400200b8 	.word	0x400200b8
 80069b8:	40020410 	.word	0x40020410
 80069bc:	40020428 	.word	0x40020428
 80069c0:	40020440 	.word	0x40020440
 80069c4:	40020458 	.word	0x40020458
 80069c8:	40020470 	.word	0x40020470
 80069cc:	40020488 	.word	0x40020488
 80069d0:	400204a0 	.word	0x400204a0
 80069d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2201      	movs	r2, #1
 80069e8:	409a      	lsls	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a4f      	ldr	r2, [pc, #316]	@ (8006b30 <HAL_DMA_Abort+0x5dc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d072      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a4d      	ldr	r2, [pc, #308]	@ (8006b34 <HAL_DMA_Abort+0x5e0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d06d      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a4c      	ldr	r2, [pc, #304]	@ (8006b38 <HAL_DMA_Abort+0x5e4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d068      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a4a      	ldr	r2, [pc, #296]	@ (8006b3c <HAL_DMA_Abort+0x5e8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d063      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a49      	ldr	r2, [pc, #292]	@ (8006b40 <HAL_DMA_Abort+0x5ec>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d05e      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a47      	ldr	r2, [pc, #284]	@ (8006b44 <HAL_DMA_Abort+0x5f0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d059      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a46      	ldr	r2, [pc, #280]	@ (8006b48 <HAL_DMA_Abort+0x5f4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d054      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a44      	ldr	r2, [pc, #272]	@ (8006b4c <HAL_DMA_Abort+0x5f8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d04f      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a43      	ldr	r2, [pc, #268]	@ (8006b50 <HAL_DMA_Abort+0x5fc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d04a      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a41      	ldr	r2, [pc, #260]	@ (8006b54 <HAL_DMA_Abort+0x600>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d045      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a40      	ldr	r2, [pc, #256]	@ (8006b58 <HAL_DMA_Abort+0x604>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d040      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a3e      	ldr	r2, [pc, #248]	@ (8006b5c <HAL_DMA_Abort+0x608>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d03b      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b60 <HAL_DMA_Abort+0x60c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d036      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a3b      	ldr	r2, [pc, #236]	@ (8006b64 <HAL_DMA_Abort+0x610>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d031      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8006b68 <HAL_DMA_Abort+0x614>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d02c      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a38      	ldr	r2, [pc, #224]	@ (8006b6c <HAL_DMA_Abort+0x618>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d027      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a37      	ldr	r2, [pc, #220]	@ (8006b70 <HAL_DMA_Abort+0x61c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d022      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a35      	ldr	r2, [pc, #212]	@ (8006b74 <HAL_DMA_Abort+0x620>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d01d      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a34      	ldr	r2, [pc, #208]	@ (8006b78 <HAL_DMA_Abort+0x624>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d018      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a32      	ldr	r2, [pc, #200]	@ (8006b7c <HAL_DMA_Abort+0x628>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d013      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a31      	ldr	r2, [pc, #196]	@ (8006b80 <HAL_DMA_Abort+0x62c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00e      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8006b84 <HAL_DMA_Abort+0x630>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d009      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2e      	ldr	r2, [pc, #184]	@ (8006b88 <HAL_DMA_Abort+0x634>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d004      	beq.n	8006ade <HAL_DMA_Abort+0x58a>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8006b8c <HAL_DMA_Abort+0x638>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d101      	bne.n	8006ae2 <HAL_DMA_Abort+0x58e>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <HAL_DMA_Abort+0x590>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d015      	beq.n	8006b14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006af0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40020010 	.word	0x40020010
 8006b34:	40020028 	.word	0x40020028
 8006b38:	40020040 	.word	0x40020040
 8006b3c:	40020058 	.word	0x40020058
 8006b40:	40020070 	.word	0x40020070
 8006b44:	40020088 	.word	0x40020088
 8006b48:	400200a0 	.word	0x400200a0
 8006b4c:	400200b8 	.word	0x400200b8
 8006b50:	40020410 	.word	0x40020410
 8006b54:	40020428 	.word	0x40020428
 8006b58:	40020440 	.word	0x40020440
 8006b5c:	40020458 	.word	0x40020458
 8006b60:	40020470 	.word	0x40020470
 8006b64:	40020488 	.word	0x40020488
 8006b68:	400204a0 	.word	0x400204a0
 8006b6c:	400204b8 	.word	0x400204b8
 8006b70:	58025408 	.word	0x58025408
 8006b74:	5802541c 	.word	0x5802541c
 8006b78:	58025430 	.word	0x58025430
 8006b7c:	58025444 	.word	0x58025444
 8006b80:	58025458 	.word	0x58025458
 8006b84:	5802546c 	.word	0x5802546c
 8006b88:	58025480 	.word	0x58025480
 8006b8c:	58025494 	.word	0x58025494

08006b90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e237      	b.n	8007012 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d004      	beq.n	8006bb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2280      	movs	r2, #128	@ 0x80
 8006bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e22c      	b.n	8007012 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a5c      	ldr	r2, [pc, #368]	@ (8006d30 <HAL_DMA_Abort_IT+0x1a0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d04a      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8006d34 <HAL_DMA_Abort_IT+0x1a4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d045      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a59      	ldr	r2, [pc, #356]	@ (8006d38 <HAL_DMA_Abort_IT+0x1a8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d040      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a58      	ldr	r2, [pc, #352]	@ (8006d3c <HAL_DMA_Abort_IT+0x1ac>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d03b      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a56      	ldr	r2, [pc, #344]	@ (8006d40 <HAL_DMA_Abort_IT+0x1b0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d036      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a55      	ldr	r2, [pc, #340]	@ (8006d44 <HAL_DMA_Abort_IT+0x1b4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d031      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a53      	ldr	r2, [pc, #332]	@ (8006d48 <HAL_DMA_Abort_IT+0x1b8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d02c      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a52      	ldr	r2, [pc, #328]	@ (8006d4c <HAL_DMA_Abort_IT+0x1bc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d027      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a50      	ldr	r2, [pc, #320]	@ (8006d50 <HAL_DMA_Abort_IT+0x1c0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d022      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a4f      	ldr	r2, [pc, #316]	@ (8006d54 <HAL_DMA_Abort_IT+0x1c4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d01d      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a4d      	ldr	r2, [pc, #308]	@ (8006d58 <HAL_DMA_Abort_IT+0x1c8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d018      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8006d5c <HAL_DMA_Abort_IT+0x1cc>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d013      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a4a      	ldr	r2, [pc, #296]	@ (8006d60 <HAL_DMA_Abort_IT+0x1d0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00e      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a49      	ldr	r2, [pc, #292]	@ (8006d64 <HAL_DMA_Abort_IT+0x1d4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d009      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a47      	ldr	r2, [pc, #284]	@ (8006d68 <HAL_DMA_Abort_IT+0x1d8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_DMA_Abort_IT+0xc8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a46      	ldr	r2, [pc, #280]	@ (8006d6c <HAL_DMA_Abort_IT+0x1dc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d101      	bne.n	8006c5c <HAL_DMA_Abort_IT+0xcc>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <HAL_DMA_Abort_IT+0xce>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8086 	beq.w	8006d70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2204      	movs	r2, #4
 8006c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2f      	ldr	r2, [pc, #188]	@ (8006d30 <HAL_DMA_Abort_IT+0x1a0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d04a      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8006d34 <HAL_DMA_Abort_IT+0x1a4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d045      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2c      	ldr	r2, [pc, #176]	@ (8006d38 <HAL_DMA_Abort_IT+0x1a8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d040      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8006d3c <HAL_DMA_Abort_IT+0x1ac>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d03b      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a29      	ldr	r2, [pc, #164]	@ (8006d40 <HAL_DMA_Abort_IT+0x1b0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d036      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a28      	ldr	r2, [pc, #160]	@ (8006d44 <HAL_DMA_Abort_IT+0x1b4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d031      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a26      	ldr	r2, [pc, #152]	@ (8006d48 <HAL_DMA_Abort_IT+0x1b8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d02c      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a25      	ldr	r2, [pc, #148]	@ (8006d4c <HAL_DMA_Abort_IT+0x1bc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d027      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a23      	ldr	r2, [pc, #140]	@ (8006d50 <HAL_DMA_Abort_IT+0x1c0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d022      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a22      	ldr	r2, [pc, #136]	@ (8006d54 <HAL_DMA_Abort_IT+0x1c4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d01d      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a20      	ldr	r2, [pc, #128]	@ (8006d58 <HAL_DMA_Abort_IT+0x1c8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d018      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1f      	ldr	r2, [pc, #124]	@ (8006d5c <HAL_DMA_Abort_IT+0x1cc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d013      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d60 <HAL_DMA_Abort_IT+0x1d0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00e      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d64 <HAL_DMA_Abort_IT+0x1d4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d68 <HAL_DMA_Abort_IT+0x1d8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <HAL_DMA_Abort_IT+0x17c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <HAL_DMA_Abort_IT+0x1dc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d108      	bne.n	8006d1e <HAL_DMA_Abort_IT+0x18e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	e178      	b.n	8007010 <HAL_DMA_Abort_IT+0x480>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e16f      	b.n	8007010 <HAL_DMA_Abort_IT+0x480>
 8006d30:	40020010 	.word	0x40020010
 8006d34:	40020028 	.word	0x40020028
 8006d38:	40020040 	.word	0x40020040
 8006d3c:	40020058 	.word	0x40020058
 8006d40:	40020070 	.word	0x40020070
 8006d44:	40020088 	.word	0x40020088
 8006d48:	400200a0 	.word	0x400200a0
 8006d4c:	400200b8 	.word	0x400200b8
 8006d50:	40020410 	.word	0x40020410
 8006d54:	40020428 	.word	0x40020428
 8006d58:	40020440 	.word	0x40020440
 8006d5c:	40020458 	.word	0x40020458
 8006d60:	40020470 	.word	0x40020470
 8006d64:	40020488 	.word	0x40020488
 8006d68:	400204a0 	.word	0x400204a0
 8006d6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 020e 	bic.w	r2, r2, #14
 8006d7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a6c      	ldr	r2, [pc, #432]	@ (8006f38 <HAL_DMA_Abort_IT+0x3a8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d04a      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8006f3c <HAL_DMA_Abort_IT+0x3ac>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d045      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a69      	ldr	r2, [pc, #420]	@ (8006f40 <HAL_DMA_Abort_IT+0x3b0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d040      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a68      	ldr	r2, [pc, #416]	@ (8006f44 <HAL_DMA_Abort_IT+0x3b4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d03b      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a66      	ldr	r2, [pc, #408]	@ (8006f48 <HAL_DMA_Abort_IT+0x3b8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d036      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a65      	ldr	r2, [pc, #404]	@ (8006f4c <HAL_DMA_Abort_IT+0x3bc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d031      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a63      	ldr	r2, [pc, #396]	@ (8006f50 <HAL_DMA_Abort_IT+0x3c0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d02c      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a62      	ldr	r2, [pc, #392]	@ (8006f54 <HAL_DMA_Abort_IT+0x3c4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d027      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a60      	ldr	r2, [pc, #384]	@ (8006f58 <HAL_DMA_Abort_IT+0x3c8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d022      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a5f      	ldr	r2, [pc, #380]	@ (8006f5c <HAL_DMA_Abort_IT+0x3cc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d01d      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a5d      	ldr	r2, [pc, #372]	@ (8006f60 <HAL_DMA_Abort_IT+0x3d0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a5c      	ldr	r2, [pc, #368]	@ (8006f64 <HAL_DMA_Abort_IT+0x3d4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d013      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8006f68 <HAL_DMA_Abort_IT+0x3d8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a59      	ldr	r2, [pc, #356]	@ (8006f6c <HAL_DMA_Abort_IT+0x3dc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a57      	ldr	r2, [pc, #348]	@ (8006f70 <HAL_DMA_Abort_IT+0x3e0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_DMA_Abort_IT+0x290>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a56      	ldr	r2, [pc, #344]	@ (8006f74 <HAL_DMA_Abort_IT+0x3e4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d108      	bne.n	8006e32 <HAL_DMA_Abort_IT+0x2a2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0201 	bic.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e007      	b.n	8006e42 <HAL_DMA_Abort_IT+0x2b2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0201 	bic.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a3c      	ldr	r2, [pc, #240]	@ (8006f38 <HAL_DMA_Abort_IT+0x3a8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d072      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a3a      	ldr	r2, [pc, #232]	@ (8006f3c <HAL_DMA_Abort_IT+0x3ac>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d06d      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a39      	ldr	r2, [pc, #228]	@ (8006f40 <HAL_DMA_Abort_IT+0x3b0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d068      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a37      	ldr	r2, [pc, #220]	@ (8006f44 <HAL_DMA_Abort_IT+0x3b4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d063      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a36      	ldr	r2, [pc, #216]	@ (8006f48 <HAL_DMA_Abort_IT+0x3b8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d05e      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a34      	ldr	r2, [pc, #208]	@ (8006f4c <HAL_DMA_Abort_IT+0x3bc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d059      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a33      	ldr	r2, [pc, #204]	@ (8006f50 <HAL_DMA_Abort_IT+0x3c0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d054      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a31      	ldr	r2, [pc, #196]	@ (8006f54 <HAL_DMA_Abort_IT+0x3c4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d04f      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a30      	ldr	r2, [pc, #192]	@ (8006f58 <HAL_DMA_Abort_IT+0x3c8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d04a      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8006f5c <HAL_DMA_Abort_IT+0x3cc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d045      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8006f60 <HAL_DMA_Abort_IT+0x3d0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d040      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f64 <HAL_DMA_Abort_IT+0x3d4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d03b      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8006f68 <HAL_DMA_Abort_IT+0x3d8>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d036      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	@ (8006f6c <HAL_DMA_Abort_IT+0x3dc>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d031      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a27      	ldr	r2, [pc, #156]	@ (8006f70 <HAL_DMA_Abort_IT+0x3e0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d02c      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a25      	ldr	r2, [pc, #148]	@ (8006f74 <HAL_DMA_Abort_IT+0x3e4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d027      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a24      	ldr	r2, [pc, #144]	@ (8006f78 <HAL_DMA_Abort_IT+0x3e8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d022      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a22      	ldr	r2, [pc, #136]	@ (8006f7c <HAL_DMA_Abort_IT+0x3ec>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d01d      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a21      	ldr	r2, [pc, #132]	@ (8006f80 <HAL_DMA_Abort_IT+0x3f0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d018      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1f      	ldr	r2, [pc, #124]	@ (8006f84 <HAL_DMA_Abort_IT+0x3f4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f88 <HAL_DMA_Abort_IT+0x3f8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1c      	ldr	r2, [pc, #112]	@ (8006f8c <HAL_DMA_Abort_IT+0x3fc>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a1b      	ldr	r2, [pc, #108]	@ (8006f90 <HAL_DMA_Abort_IT+0x400>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_DMA_Abort_IT+0x3a2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <HAL_DMA_Abort_IT+0x404>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d132      	bne.n	8006f98 <HAL_DMA_Abort_IT+0x408>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e031      	b.n	8006f9a <HAL_DMA_Abort_IT+0x40a>
 8006f36:	bf00      	nop
 8006f38:	40020010 	.word	0x40020010
 8006f3c:	40020028 	.word	0x40020028
 8006f40:	40020040 	.word	0x40020040
 8006f44:	40020058 	.word	0x40020058
 8006f48:	40020070 	.word	0x40020070
 8006f4c:	40020088 	.word	0x40020088
 8006f50:	400200a0 	.word	0x400200a0
 8006f54:	400200b8 	.word	0x400200b8
 8006f58:	40020410 	.word	0x40020410
 8006f5c:	40020428 	.word	0x40020428
 8006f60:	40020440 	.word	0x40020440
 8006f64:	40020458 	.word	0x40020458
 8006f68:	40020470 	.word	0x40020470
 8006f6c:	40020488 	.word	0x40020488
 8006f70:	400204a0 	.word	0x400204a0
 8006f74:	400204b8 	.word	0x400204b8
 8006f78:	58025408 	.word	0x58025408
 8006f7c:	5802541c 	.word	0x5802541c
 8006f80:	58025430 	.word	0x58025430
 8006f84:	58025444 	.word	0x58025444
 8006f88:	58025458 	.word	0x58025458
 8006f8c:	5802546c 	.word	0x5802546c
 8006f90:	58025480 	.word	0x58025480
 8006f94:	58025494 	.word	0x58025494
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d028      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006fcc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fe4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006fee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop

0800701c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	@ 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007028:	4b67      	ldr	r3, [pc, #412]	@ (80071c8 <HAL_DMA_IRQHandler+0x1ac>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a67      	ldr	r2, [pc, #412]	@ (80071cc <HAL_DMA_IRQHandler+0x1b0>)
 800702e:	fba2 2303 	umull	r2, r3, r2, r3
 8007032:	0a9b      	lsrs	r3, r3, #10
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007040:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a5f      	ldr	r2, [pc, #380]	@ (80071d0 <HAL_DMA_IRQHandler+0x1b4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d04a      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a5d      	ldr	r2, [pc, #372]	@ (80071d4 <HAL_DMA_IRQHandler+0x1b8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d045      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a5c      	ldr	r2, [pc, #368]	@ (80071d8 <HAL_DMA_IRQHandler+0x1bc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d040      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a5a      	ldr	r2, [pc, #360]	@ (80071dc <HAL_DMA_IRQHandler+0x1c0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d03b      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a59      	ldr	r2, [pc, #356]	@ (80071e0 <HAL_DMA_IRQHandler+0x1c4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d036      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a57      	ldr	r2, [pc, #348]	@ (80071e4 <HAL_DMA_IRQHandler+0x1c8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d031      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a56      	ldr	r2, [pc, #344]	@ (80071e8 <HAL_DMA_IRQHandler+0x1cc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d02c      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a54      	ldr	r2, [pc, #336]	@ (80071ec <HAL_DMA_IRQHandler+0x1d0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d027      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a53      	ldr	r2, [pc, #332]	@ (80071f0 <HAL_DMA_IRQHandler+0x1d4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d022      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a51      	ldr	r2, [pc, #324]	@ (80071f4 <HAL_DMA_IRQHandler+0x1d8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01d      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a50      	ldr	r2, [pc, #320]	@ (80071f8 <HAL_DMA_IRQHandler+0x1dc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d018      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a4e      	ldr	r2, [pc, #312]	@ (80071fc <HAL_DMA_IRQHandler+0x1e0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d013      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a4d      	ldr	r2, [pc, #308]	@ (8007200 <HAL_DMA_IRQHandler+0x1e4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00e      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007204 <HAL_DMA_IRQHandler+0x1e8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d009      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a4a      	ldr	r2, [pc, #296]	@ (8007208 <HAL_DMA_IRQHandler+0x1ec>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_DMA_IRQHandler+0xd2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a48      	ldr	r2, [pc, #288]	@ (800720c <HAL_DMA_IRQHandler+0x1f0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d101      	bne.n	80070f2 <HAL_DMA_IRQHandler+0xd6>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <HAL_DMA_IRQHandler+0xd8>
 80070f2:	2300      	movs	r3, #0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 842b 	beq.w	8007950 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	2208      	movs	r2, #8
 8007104:	409a      	lsls	r2, r3
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80a2 	beq.w	8007254 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2e      	ldr	r2, [pc, #184]	@ (80071d0 <HAL_DMA_IRQHandler+0x1b4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d04a      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2d      	ldr	r2, [pc, #180]	@ (80071d4 <HAL_DMA_IRQHandler+0x1b8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d045      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a2b      	ldr	r2, [pc, #172]	@ (80071d8 <HAL_DMA_IRQHandler+0x1bc>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d040      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a2a      	ldr	r2, [pc, #168]	@ (80071dc <HAL_DMA_IRQHandler+0x1c0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d03b      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a28      	ldr	r2, [pc, #160]	@ (80071e0 <HAL_DMA_IRQHandler+0x1c4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d036      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a27      	ldr	r2, [pc, #156]	@ (80071e4 <HAL_DMA_IRQHandler+0x1c8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d031      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a25      	ldr	r2, [pc, #148]	@ (80071e8 <HAL_DMA_IRQHandler+0x1cc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d02c      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a24      	ldr	r2, [pc, #144]	@ (80071ec <HAL_DMA_IRQHandler+0x1d0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d027      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a22      	ldr	r2, [pc, #136]	@ (80071f0 <HAL_DMA_IRQHandler+0x1d4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d022      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a21      	ldr	r2, [pc, #132]	@ (80071f4 <HAL_DMA_IRQHandler+0x1d8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d01d      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1f      	ldr	r2, [pc, #124]	@ (80071f8 <HAL_DMA_IRQHandler+0x1dc>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d018      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1e      	ldr	r2, [pc, #120]	@ (80071fc <HAL_DMA_IRQHandler+0x1e0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d013      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1c      	ldr	r2, [pc, #112]	@ (8007200 <HAL_DMA_IRQHandler+0x1e4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00e      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1b      	ldr	r2, [pc, #108]	@ (8007204 <HAL_DMA_IRQHandler+0x1e8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d009      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a19      	ldr	r2, [pc, #100]	@ (8007208 <HAL_DMA_IRQHandler+0x1ec>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d004      	beq.n	80071b0 <HAL_DMA_IRQHandler+0x194>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a18      	ldr	r2, [pc, #96]	@ (800720c <HAL_DMA_IRQHandler+0x1f0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d12f      	bne.n	8007210 <HAL_DMA_IRQHandler+0x1f4>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bf14      	ite	ne
 80071be:	2301      	movne	r3, #1
 80071c0:	2300      	moveq	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	e02e      	b.n	8007224 <HAL_DMA_IRQHandler+0x208>
 80071c6:	bf00      	nop
 80071c8:	2400002c 	.word	0x2400002c
 80071cc:	1b4e81b5 	.word	0x1b4e81b5
 80071d0:	40020010 	.word	0x40020010
 80071d4:	40020028 	.word	0x40020028
 80071d8:	40020040 	.word	0x40020040
 80071dc:	40020058 	.word	0x40020058
 80071e0:	40020070 	.word	0x40020070
 80071e4:	40020088 	.word	0x40020088
 80071e8:	400200a0 	.word	0x400200a0
 80071ec:	400200b8 	.word	0x400200b8
 80071f0:	40020410 	.word	0x40020410
 80071f4:	40020428 	.word	0x40020428
 80071f8:	40020440 	.word	0x40020440
 80071fc:	40020458 	.word	0x40020458
 8007200:	40020470 	.word	0x40020470
 8007204:	40020488 	.word	0x40020488
 8007208:	400204a0 	.word	0x400204a0
 800720c:	400204b8 	.word	0x400204b8
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	bf14      	ite	ne
 800721e:	2301      	movne	r3, #1
 8007220:	2300      	moveq	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d015      	beq.n	8007254 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0204 	bic.w	r2, r2, #4
 8007236:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	2208      	movs	r2, #8
 8007242:	409a      	lsls	r2, r3
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724c:	f043 0201 	orr.w	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	fa22 f303 	lsr.w	r3, r2, r3
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d06e      	beq.n	8007348 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a69      	ldr	r2, [pc, #420]	@ (8007414 <HAL_DMA_IRQHandler+0x3f8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d04a      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a67      	ldr	r2, [pc, #412]	@ (8007418 <HAL_DMA_IRQHandler+0x3fc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d045      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a66      	ldr	r2, [pc, #408]	@ (800741c <HAL_DMA_IRQHandler+0x400>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d040      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a64      	ldr	r2, [pc, #400]	@ (8007420 <HAL_DMA_IRQHandler+0x404>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d03b      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a63      	ldr	r2, [pc, #396]	@ (8007424 <HAL_DMA_IRQHandler+0x408>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d036      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a61      	ldr	r2, [pc, #388]	@ (8007428 <HAL_DMA_IRQHandler+0x40c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d031      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a60      	ldr	r2, [pc, #384]	@ (800742c <HAL_DMA_IRQHandler+0x410>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d02c      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a5e      	ldr	r2, [pc, #376]	@ (8007430 <HAL_DMA_IRQHandler+0x414>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d027      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5d      	ldr	r2, [pc, #372]	@ (8007434 <HAL_DMA_IRQHandler+0x418>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d022      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a5b      	ldr	r2, [pc, #364]	@ (8007438 <HAL_DMA_IRQHandler+0x41c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d01d      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a5a      	ldr	r2, [pc, #360]	@ (800743c <HAL_DMA_IRQHandler+0x420>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d018      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a58      	ldr	r2, [pc, #352]	@ (8007440 <HAL_DMA_IRQHandler+0x424>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d013      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a57      	ldr	r2, [pc, #348]	@ (8007444 <HAL_DMA_IRQHandler+0x428>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00e      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a55      	ldr	r2, [pc, #340]	@ (8007448 <HAL_DMA_IRQHandler+0x42c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d009      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a54      	ldr	r2, [pc, #336]	@ (800744c <HAL_DMA_IRQHandler+0x430>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d004      	beq.n	800730a <HAL_DMA_IRQHandler+0x2ee>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a52      	ldr	r2, [pc, #328]	@ (8007450 <HAL_DMA_IRQHandler+0x434>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d10a      	bne.n	8007320 <HAL_DMA_IRQHandler+0x304>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	e003      	b.n	8007328 <HAL_DMA_IRQHandler+0x30c>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00d      	beq.n	8007348 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	2201      	movs	r2, #1
 8007336:	409a      	lsls	r2, r3
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007340:	f043 0202 	orr.w	r2, r3, #2
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	2204      	movs	r2, #4
 8007352:	409a      	lsls	r2, r3
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 808f 	beq.w	800747c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a2c      	ldr	r2, [pc, #176]	@ (8007414 <HAL_DMA_IRQHandler+0x3f8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d04a      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a2a      	ldr	r2, [pc, #168]	@ (8007418 <HAL_DMA_IRQHandler+0x3fc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d045      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a29      	ldr	r2, [pc, #164]	@ (800741c <HAL_DMA_IRQHandler+0x400>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d040      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a27      	ldr	r2, [pc, #156]	@ (8007420 <HAL_DMA_IRQHandler+0x404>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d03b      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a26      	ldr	r2, [pc, #152]	@ (8007424 <HAL_DMA_IRQHandler+0x408>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d036      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a24      	ldr	r2, [pc, #144]	@ (8007428 <HAL_DMA_IRQHandler+0x40c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d031      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a23      	ldr	r2, [pc, #140]	@ (800742c <HAL_DMA_IRQHandler+0x410>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d02c      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a21      	ldr	r2, [pc, #132]	@ (8007430 <HAL_DMA_IRQHandler+0x414>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d027      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a20      	ldr	r2, [pc, #128]	@ (8007434 <HAL_DMA_IRQHandler+0x418>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d022      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007438 <HAL_DMA_IRQHandler+0x41c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01d      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1d      	ldr	r2, [pc, #116]	@ (800743c <HAL_DMA_IRQHandler+0x420>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d018      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007440 <HAL_DMA_IRQHandler+0x424>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1a      	ldr	r2, [pc, #104]	@ (8007444 <HAL_DMA_IRQHandler+0x428>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00e      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a18      	ldr	r2, [pc, #96]	@ (8007448 <HAL_DMA_IRQHandler+0x42c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d009      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a17      	ldr	r2, [pc, #92]	@ (800744c <HAL_DMA_IRQHandler+0x430>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <HAL_DMA_IRQHandler+0x3e2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a15      	ldr	r2, [pc, #84]	@ (8007450 <HAL_DMA_IRQHandler+0x434>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d12a      	bne.n	8007454 <HAL_DMA_IRQHandler+0x438>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	bf14      	ite	ne
 800740c:	2301      	movne	r3, #1
 800740e:	2300      	moveq	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e023      	b.n	800745c <HAL_DMA_IRQHandler+0x440>
 8007414:	40020010 	.word	0x40020010
 8007418:	40020028 	.word	0x40020028
 800741c:	40020040 	.word	0x40020040
 8007420:	40020058 	.word	0x40020058
 8007424:	40020070 	.word	0x40020070
 8007428:	40020088 	.word	0x40020088
 800742c:	400200a0 	.word	0x400200a0
 8007430:	400200b8 	.word	0x400200b8
 8007434:	40020410 	.word	0x40020410
 8007438:	40020428 	.word	0x40020428
 800743c:	40020440 	.word	0x40020440
 8007440:	40020458 	.word	0x40020458
 8007444:	40020470 	.word	0x40020470
 8007448:	40020488 	.word	0x40020488
 800744c:	400204a0 	.word	0x400204a0
 8007450:	400204b8 	.word	0x400204b8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00d      	beq.n	800747c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2204      	movs	r2, #4
 800746a:	409a      	lsls	r2, r3
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007474:	f043 0204 	orr.w	r2, r3, #4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	2210      	movs	r2, #16
 8007486:	409a      	lsls	r2, r3
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80a6 	beq.w	80075de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a85      	ldr	r2, [pc, #532]	@ (80076ac <HAL_DMA_IRQHandler+0x690>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d04a      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a83      	ldr	r2, [pc, #524]	@ (80076b0 <HAL_DMA_IRQHandler+0x694>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d045      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a82      	ldr	r2, [pc, #520]	@ (80076b4 <HAL_DMA_IRQHandler+0x698>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d040      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a80      	ldr	r2, [pc, #512]	@ (80076b8 <HAL_DMA_IRQHandler+0x69c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d03b      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a7f      	ldr	r2, [pc, #508]	@ (80076bc <HAL_DMA_IRQHandler+0x6a0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d036      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a7d      	ldr	r2, [pc, #500]	@ (80076c0 <HAL_DMA_IRQHandler+0x6a4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d031      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a7c      	ldr	r2, [pc, #496]	@ (80076c4 <HAL_DMA_IRQHandler+0x6a8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d02c      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a7a      	ldr	r2, [pc, #488]	@ (80076c8 <HAL_DMA_IRQHandler+0x6ac>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d027      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a79      	ldr	r2, [pc, #484]	@ (80076cc <HAL_DMA_IRQHandler+0x6b0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d022      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a77      	ldr	r2, [pc, #476]	@ (80076d0 <HAL_DMA_IRQHandler+0x6b4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01d      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a76      	ldr	r2, [pc, #472]	@ (80076d4 <HAL_DMA_IRQHandler+0x6b8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a74      	ldr	r2, [pc, #464]	@ (80076d8 <HAL_DMA_IRQHandler+0x6bc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a73      	ldr	r2, [pc, #460]	@ (80076dc <HAL_DMA_IRQHandler+0x6c0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a71      	ldr	r2, [pc, #452]	@ (80076e0 <HAL_DMA_IRQHandler+0x6c4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a70      	ldr	r2, [pc, #448]	@ (80076e4 <HAL_DMA_IRQHandler+0x6c8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_DMA_IRQHandler+0x516>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a6e      	ldr	r2, [pc, #440]	@ (80076e8 <HAL_DMA_IRQHandler+0x6cc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10a      	bne.n	8007548 <HAL_DMA_IRQHandler+0x52c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	e009      	b.n	800755c <HAL_DMA_IRQHandler+0x540>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	bf14      	ite	ne
 8007556:	2301      	movne	r3, #1
 8007558:	2300      	moveq	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d03e      	beq.n	80075de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007564:	f003 031f 	and.w	r3, r3, #31
 8007568:	2210      	movs	r2, #16
 800756a:	409a      	lsls	r2, r3
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d018      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d108      	bne.n	800759e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d024      	beq.n	80075de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
 800759c:	e01f      	b.n	80075de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
 80075ae:	e016      	b.n	80075de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d107      	bne.n	80075ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0208 	bic.w	r2, r2, #8
 80075cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	2220      	movs	r2, #32
 80075e8:	409a      	lsls	r2, r3
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	4013      	ands	r3, r2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8110 	beq.w	8007814 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a2c      	ldr	r2, [pc, #176]	@ (80076ac <HAL_DMA_IRQHandler+0x690>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d04a      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a2b      	ldr	r2, [pc, #172]	@ (80076b0 <HAL_DMA_IRQHandler+0x694>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d045      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a29      	ldr	r2, [pc, #164]	@ (80076b4 <HAL_DMA_IRQHandler+0x698>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d040      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a28      	ldr	r2, [pc, #160]	@ (80076b8 <HAL_DMA_IRQHandler+0x69c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d03b      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a26      	ldr	r2, [pc, #152]	@ (80076bc <HAL_DMA_IRQHandler+0x6a0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d036      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a25      	ldr	r2, [pc, #148]	@ (80076c0 <HAL_DMA_IRQHandler+0x6a4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d031      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a23      	ldr	r2, [pc, #140]	@ (80076c4 <HAL_DMA_IRQHandler+0x6a8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d02c      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a22      	ldr	r2, [pc, #136]	@ (80076c8 <HAL_DMA_IRQHandler+0x6ac>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d027      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a20      	ldr	r2, [pc, #128]	@ (80076cc <HAL_DMA_IRQHandler+0x6b0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d022      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1f      	ldr	r2, [pc, #124]	@ (80076d0 <HAL_DMA_IRQHandler+0x6b4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d01d      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1d      	ldr	r2, [pc, #116]	@ (80076d4 <HAL_DMA_IRQHandler+0x6b8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d018      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1c      	ldr	r2, [pc, #112]	@ (80076d8 <HAL_DMA_IRQHandler+0x6bc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1a      	ldr	r2, [pc, #104]	@ (80076dc <HAL_DMA_IRQHandler+0x6c0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00e      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a19      	ldr	r2, [pc, #100]	@ (80076e0 <HAL_DMA_IRQHandler+0x6c4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a17      	ldr	r2, [pc, #92]	@ (80076e4 <HAL_DMA_IRQHandler+0x6c8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_DMA_IRQHandler+0x678>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a16      	ldr	r2, [pc, #88]	@ (80076e8 <HAL_DMA_IRQHandler+0x6cc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d12b      	bne.n	80076ec <HAL_DMA_IRQHandler+0x6d0>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0310 	and.w	r3, r3, #16
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf14      	ite	ne
 80076a2:	2301      	movne	r3, #1
 80076a4:	2300      	moveq	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	e02a      	b.n	8007700 <HAL_DMA_IRQHandler+0x6e4>
 80076aa:	bf00      	nop
 80076ac:	40020010 	.word	0x40020010
 80076b0:	40020028 	.word	0x40020028
 80076b4:	40020040 	.word	0x40020040
 80076b8:	40020058 	.word	0x40020058
 80076bc:	40020070 	.word	0x40020070
 80076c0:	40020088 	.word	0x40020088
 80076c4:	400200a0 	.word	0x400200a0
 80076c8:	400200b8 	.word	0x400200b8
 80076cc:	40020410 	.word	0x40020410
 80076d0:	40020428 	.word	0x40020428
 80076d4:	40020440 	.word	0x40020440
 80076d8:	40020458 	.word	0x40020458
 80076dc:	40020470 	.word	0x40020470
 80076e0:	40020488 	.word	0x40020488
 80076e4:	400204a0 	.word	0x400204a0
 80076e8:	400204b8 	.word	0x400204b8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bf14      	ite	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	2300      	moveq	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8087 	beq.w	8007814 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2220      	movs	r2, #32
 8007710:	409a      	lsls	r2, r3
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b04      	cmp	r3, #4
 8007720:	d139      	bne.n	8007796 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0216 	bic.w	r2, r2, #22
 8007730:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695a      	ldr	r2, [r3, #20]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007740:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <HAL_DMA_IRQHandler+0x736>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774e:	2b00      	cmp	r3, #0
 8007750:	d007      	beq.n	8007762 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0208 	bic.w	r2, r2, #8
 8007760:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007766:	f003 031f 	and.w	r3, r3, #31
 800776a:	223f      	movs	r2, #63	@ 0x3f
 800776c:	409a      	lsls	r2, r3
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 834a 	beq.w	8007e20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
          }
          return;
 8007794:	e344      	b.n	8007e20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d018      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d108      	bne.n	80077c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d02c      	beq.n	8007814 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
 80077c2:	e027      	b.n	8007814 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d023      	beq.n	8007814 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
 80077d4:	e01e      	b.n	8007814 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10f      	bne.n	8007804 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0210 	bic.w	r2, r2, #16
 80077f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8306 	beq.w	8007e2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 8088 	beq.w	800793c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2204      	movs	r2, #4
 8007830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a7a      	ldr	r2, [pc, #488]	@ (8007a24 <HAL_DMA_IRQHandler+0xa08>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d04a      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a79      	ldr	r2, [pc, #484]	@ (8007a28 <HAL_DMA_IRQHandler+0xa0c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d045      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a77      	ldr	r2, [pc, #476]	@ (8007a2c <HAL_DMA_IRQHandler+0xa10>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d040      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a76      	ldr	r2, [pc, #472]	@ (8007a30 <HAL_DMA_IRQHandler+0xa14>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d03b      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a74      	ldr	r2, [pc, #464]	@ (8007a34 <HAL_DMA_IRQHandler+0xa18>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d036      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a73      	ldr	r2, [pc, #460]	@ (8007a38 <HAL_DMA_IRQHandler+0xa1c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d031      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a71      	ldr	r2, [pc, #452]	@ (8007a3c <HAL_DMA_IRQHandler+0xa20>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d02c      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a70      	ldr	r2, [pc, #448]	@ (8007a40 <HAL_DMA_IRQHandler+0xa24>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d027      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a6e      	ldr	r2, [pc, #440]	@ (8007a44 <HAL_DMA_IRQHandler+0xa28>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d022      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a6d      	ldr	r2, [pc, #436]	@ (8007a48 <HAL_DMA_IRQHandler+0xa2c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d01d      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a6b      	ldr	r2, [pc, #428]	@ (8007a4c <HAL_DMA_IRQHandler+0xa30>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d018      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a6a      	ldr	r2, [pc, #424]	@ (8007a50 <HAL_DMA_IRQHandler+0xa34>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a68      	ldr	r2, [pc, #416]	@ (8007a54 <HAL_DMA_IRQHandler+0xa38>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00e      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a67      	ldr	r2, [pc, #412]	@ (8007a58 <HAL_DMA_IRQHandler+0xa3c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a65      	ldr	r2, [pc, #404]	@ (8007a5c <HAL_DMA_IRQHandler+0xa40>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x8b8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a64      	ldr	r2, [pc, #400]	@ (8007a60 <HAL_DMA_IRQHandler+0xa44>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d108      	bne.n	80078e6 <HAL_DMA_IRQHandler+0x8ca>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e007      	b.n	80078f6 <HAL_DMA_IRQHandler+0x8da>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0201 	bic.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078fe:	429a      	cmp	r2, r3
 8007900:	d307      	bcc.n	8007912 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f2      	bne.n	80078f6 <HAL_DMA_IRQHandler+0x8da>
 8007910:	e000      	b.n	8007914 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007912:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d004      	beq.n	800792c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2203      	movs	r2, #3
 8007926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800792a:	e003      	b.n	8007934 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 8272 	beq.w	8007e2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
 800794e:	e26c      	b.n	8007e2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a43      	ldr	r2, [pc, #268]	@ (8007a64 <HAL_DMA_IRQHandler+0xa48>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d022      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x984>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a42      	ldr	r2, [pc, #264]	@ (8007a68 <HAL_DMA_IRQHandler+0xa4c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d01d      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x984>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a40      	ldr	r2, [pc, #256]	@ (8007a6c <HAL_DMA_IRQHandler+0xa50>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d018      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x984>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a3f      	ldr	r2, [pc, #252]	@ (8007a70 <HAL_DMA_IRQHandler+0xa54>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d013      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x984>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a3d      	ldr	r2, [pc, #244]	@ (8007a74 <HAL_DMA_IRQHandler+0xa58>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00e      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x984>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a3c      	ldr	r2, [pc, #240]	@ (8007a78 <HAL_DMA_IRQHandler+0xa5c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d009      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x984>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a3a      	ldr	r2, [pc, #232]	@ (8007a7c <HAL_DMA_IRQHandler+0xa60>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x984>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a39      	ldr	r2, [pc, #228]	@ (8007a80 <HAL_DMA_IRQHandler+0xa64>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d101      	bne.n	80079a4 <HAL_DMA_IRQHandler+0x988>
 80079a0:	2301      	movs	r3, #1
 80079a2:	e000      	b.n	80079a6 <HAL_DMA_IRQHandler+0x98a>
 80079a4:	2300      	movs	r3, #0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 823f 	beq.w	8007e2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	2204      	movs	r2, #4
 80079be:	409a      	lsls	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80cd 	beq.w	8007b64 <HAL_DMA_IRQHandler+0xb48>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80c7 	beq.w	8007b64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079da:	f003 031f 	and.w	r3, r3, #31
 80079de:	2204      	movs	r2, #4
 80079e0:	409a      	lsls	r2, r3
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d049      	beq.n	8007a84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 8210 	beq.w	8007e24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a0c:	e20a      	b.n	8007e24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8206 	beq.w	8007e24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a20:	e200      	b.n	8007e24 <HAL_DMA_IRQHandler+0xe08>
 8007a22:	bf00      	nop
 8007a24:	40020010 	.word	0x40020010
 8007a28:	40020028 	.word	0x40020028
 8007a2c:	40020040 	.word	0x40020040
 8007a30:	40020058 	.word	0x40020058
 8007a34:	40020070 	.word	0x40020070
 8007a38:	40020088 	.word	0x40020088
 8007a3c:	400200a0 	.word	0x400200a0
 8007a40:	400200b8 	.word	0x400200b8
 8007a44:	40020410 	.word	0x40020410
 8007a48:	40020428 	.word	0x40020428
 8007a4c:	40020440 	.word	0x40020440
 8007a50:	40020458 	.word	0x40020458
 8007a54:	40020470 	.word	0x40020470
 8007a58:	40020488 	.word	0x40020488
 8007a5c:	400204a0 	.word	0x400204a0
 8007a60:	400204b8 	.word	0x400204b8
 8007a64:	58025408 	.word	0x58025408
 8007a68:	5802541c 	.word	0x5802541c
 8007a6c:	58025430 	.word	0x58025430
 8007a70:	58025444 	.word	0x58025444
 8007a74:	58025458 	.word	0x58025458
 8007a78:	5802546c 	.word	0x5802546c
 8007a7c:	58025480 	.word	0x58025480
 8007a80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d160      	bne.n	8007b50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a7f      	ldr	r2, [pc, #508]	@ (8007c90 <HAL_DMA_IRQHandler+0xc74>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d04a      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a7d      	ldr	r2, [pc, #500]	@ (8007c94 <HAL_DMA_IRQHandler+0xc78>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d045      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8007c98 <HAL_DMA_IRQHandler+0xc7c>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d040      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a7a      	ldr	r2, [pc, #488]	@ (8007c9c <HAL_DMA_IRQHandler+0xc80>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d03b      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a79      	ldr	r2, [pc, #484]	@ (8007ca0 <HAL_DMA_IRQHandler+0xc84>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d036      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a77      	ldr	r2, [pc, #476]	@ (8007ca4 <HAL_DMA_IRQHandler+0xc88>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d031      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a76      	ldr	r2, [pc, #472]	@ (8007ca8 <HAL_DMA_IRQHandler+0xc8c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d02c      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a74      	ldr	r2, [pc, #464]	@ (8007cac <HAL_DMA_IRQHandler+0xc90>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d027      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a73      	ldr	r2, [pc, #460]	@ (8007cb0 <HAL_DMA_IRQHandler+0xc94>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d022      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a71      	ldr	r2, [pc, #452]	@ (8007cb4 <HAL_DMA_IRQHandler+0xc98>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d01d      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a70      	ldr	r2, [pc, #448]	@ (8007cb8 <HAL_DMA_IRQHandler+0xc9c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d018      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a6e      	ldr	r2, [pc, #440]	@ (8007cbc <HAL_DMA_IRQHandler+0xca0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a6d      	ldr	r2, [pc, #436]	@ (8007cc0 <HAL_DMA_IRQHandler+0xca4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00e      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a6b      	ldr	r2, [pc, #428]	@ (8007cc4 <HAL_DMA_IRQHandler+0xca8>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a6a      	ldr	r2, [pc, #424]	@ (8007cc8 <HAL_DMA_IRQHandler+0xcac>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xb12>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a68      	ldr	r2, [pc, #416]	@ (8007ccc <HAL_DMA_IRQHandler+0xcb0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d108      	bne.n	8007b40 <HAL_DMA_IRQHandler+0xb24>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0208 	bic.w	r2, r2, #8
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e007      	b.n	8007b50 <HAL_DMA_IRQHandler+0xb34>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0204 	bic.w	r2, r2, #4
 8007b4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8165 	beq.w	8007e24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b62:	e15f      	b.n	8007e24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	409a      	lsls	r2, r3
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80c5 	beq.w	8007d04 <HAL_DMA_IRQHandler+0xce8>
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80bf 	beq.w	8007d04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	2202      	movs	r2, #2
 8007b90:	409a      	lsls	r2, r3
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d018      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 813a 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bbc:	e134      	b.n	8007e28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 8130 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bd0:	e12a      	b.n	8007e28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 8089 	bne.w	8007cf0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a2b      	ldr	r2, [pc, #172]	@ (8007c90 <HAL_DMA_IRQHandler+0xc74>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d04a      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a29      	ldr	r2, [pc, #164]	@ (8007c94 <HAL_DMA_IRQHandler+0xc78>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d045      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a28      	ldr	r2, [pc, #160]	@ (8007c98 <HAL_DMA_IRQHandler+0xc7c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d040      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a26      	ldr	r2, [pc, #152]	@ (8007c9c <HAL_DMA_IRQHandler+0xc80>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d03b      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a25      	ldr	r2, [pc, #148]	@ (8007ca0 <HAL_DMA_IRQHandler+0xc84>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d036      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a23      	ldr	r2, [pc, #140]	@ (8007ca4 <HAL_DMA_IRQHandler+0xc88>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d031      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a22      	ldr	r2, [pc, #136]	@ (8007ca8 <HAL_DMA_IRQHandler+0xc8c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d02c      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a20      	ldr	r2, [pc, #128]	@ (8007cac <HAL_DMA_IRQHandler+0xc90>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d027      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a1f      	ldr	r2, [pc, #124]	@ (8007cb0 <HAL_DMA_IRQHandler+0xc94>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d022      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb4 <HAL_DMA_IRQHandler+0xc98>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d01d      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb8 <HAL_DMA_IRQHandler+0xc9c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d018      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1a      	ldr	r2, [pc, #104]	@ (8007cbc <HAL_DMA_IRQHandler+0xca0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d013      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <HAL_DMA_IRQHandler+0xca4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00e      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a17      	ldr	r2, [pc, #92]	@ (8007cc4 <HAL_DMA_IRQHandler+0xca8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d009      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a16      	ldr	r2, [pc, #88]	@ (8007cc8 <HAL_DMA_IRQHandler+0xcac>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d004      	beq.n	8007c7e <HAL_DMA_IRQHandler+0xc62>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a14      	ldr	r2, [pc, #80]	@ (8007ccc <HAL_DMA_IRQHandler+0xcb0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d128      	bne.n	8007cd0 <HAL_DMA_IRQHandler+0xcb4>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0214 	bic.w	r2, r2, #20
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e027      	b.n	8007ce0 <HAL_DMA_IRQHandler+0xcc4>
 8007c90:	40020010 	.word	0x40020010
 8007c94:	40020028 	.word	0x40020028
 8007c98:	40020040 	.word	0x40020040
 8007c9c:	40020058 	.word	0x40020058
 8007ca0:	40020070 	.word	0x40020070
 8007ca4:	40020088 	.word	0x40020088
 8007ca8:	400200a0 	.word	0x400200a0
 8007cac:	400200b8 	.word	0x400200b8
 8007cb0:	40020410 	.word	0x40020410
 8007cb4:	40020428 	.word	0x40020428
 8007cb8:	40020440 	.word	0x40020440
 8007cbc:	40020458 	.word	0x40020458
 8007cc0:	40020470 	.word	0x40020470
 8007cc4:	40020488 	.word	0x40020488
 8007cc8:	400204a0 	.word	0x400204a0
 8007ccc:	400204b8 	.word	0x400204b8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 020a 	bic.w	r2, r2, #10
 8007cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8097 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d02:	e091      	b.n	8007e28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	2208      	movs	r2, #8
 8007d0e:	409a      	lsls	r2, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8088 	beq.w	8007e2a <HAL_DMA_IRQHandler+0xe0e>
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8082 	beq.w	8007e2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a41      	ldr	r2, [pc, #260]	@ (8007e30 <HAL_DMA_IRQHandler+0xe14>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d04a      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a3f      	ldr	r2, [pc, #252]	@ (8007e34 <HAL_DMA_IRQHandler+0xe18>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d045      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8007e38 <HAL_DMA_IRQHandler+0xe1c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d040      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a3c      	ldr	r2, [pc, #240]	@ (8007e3c <HAL_DMA_IRQHandler+0xe20>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d03b      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a3b      	ldr	r2, [pc, #236]	@ (8007e40 <HAL_DMA_IRQHandler+0xe24>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d036      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a39      	ldr	r2, [pc, #228]	@ (8007e44 <HAL_DMA_IRQHandler+0xe28>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d031      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a38      	ldr	r2, [pc, #224]	@ (8007e48 <HAL_DMA_IRQHandler+0xe2c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d02c      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a36      	ldr	r2, [pc, #216]	@ (8007e4c <HAL_DMA_IRQHandler+0xe30>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d027      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a35      	ldr	r2, [pc, #212]	@ (8007e50 <HAL_DMA_IRQHandler+0xe34>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d022      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a33      	ldr	r2, [pc, #204]	@ (8007e54 <HAL_DMA_IRQHandler+0xe38>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01d      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a32      	ldr	r2, [pc, #200]	@ (8007e58 <HAL_DMA_IRQHandler+0xe3c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d018      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a30      	ldr	r2, [pc, #192]	@ (8007e5c <HAL_DMA_IRQHandler+0xe40>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2f      	ldr	r2, [pc, #188]	@ (8007e60 <HAL_DMA_IRQHandler+0xe44>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00e      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2d      	ldr	r2, [pc, #180]	@ (8007e64 <HAL_DMA_IRQHandler+0xe48>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d009      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2c      	ldr	r2, [pc, #176]	@ (8007e68 <HAL_DMA_IRQHandler+0xe4c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d004      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0xdaa>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8007e6c <HAL_DMA_IRQHandler+0xe50>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d108      	bne.n	8007dd8 <HAL_DMA_IRQHandler+0xdbc>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 021c 	bic.w	r2, r2, #28
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e007      	b.n	8007de8 <HAL_DMA_IRQHandler+0xdcc>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 020e 	bic.w	r2, r2, #14
 8007de6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	2201      	movs	r2, #1
 8007df2:	409a      	lsls	r2, r3
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
 8007e1e:	e004      	b.n	8007e2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e2a:	3728      	adds	r7, #40	@ 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40020010 	.word	0x40020010
 8007e34:	40020028 	.word	0x40020028
 8007e38:	40020040 	.word	0x40020040
 8007e3c:	40020058 	.word	0x40020058
 8007e40:	40020070 	.word	0x40020070
 8007e44:	40020088 	.word	0x40020088
 8007e48:	400200a0 	.word	0x400200a0
 8007e4c:	400200b8 	.word	0x400200b8
 8007e50:	40020410 	.word	0x40020410
 8007e54:	40020428 	.word	0x40020428
 8007e58:	40020440 	.word	0x40020440
 8007e5c:	40020458 	.word	0x40020458
 8007e60:	40020470 	.word	0x40020470
 8007e64:	40020488 	.word	0x40020488
 8007e68:	400204a0 	.word	0x400204a0
 8007e6c:	400204b8 	.word	0x400204b8

08007e70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e82:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e88:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a7f      	ldr	r2, [pc, #508]	@ (800808c <DMA_SetConfig+0x21c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d072      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a7d      	ldr	r2, [pc, #500]	@ (8008090 <DMA_SetConfig+0x220>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d06d      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8008094 <DMA_SetConfig+0x224>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d068      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a7a      	ldr	r2, [pc, #488]	@ (8008098 <DMA_SetConfig+0x228>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d063      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a79      	ldr	r2, [pc, #484]	@ (800809c <DMA_SetConfig+0x22c>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d05e      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a77      	ldr	r2, [pc, #476]	@ (80080a0 <DMA_SetConfig+0x230>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d059      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a76      	ldr	r2, [pc, #472]	@ (80080a4 <DMA_SetConfig+0x234>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d054      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a74      	ldr	r2, [pc, #464]	@ (80080a8 <DMA_SetConfig+0x238>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d04f      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a73      	ldr	r2, [pc, #460]	@ (80080ac <DMA_SetConfig+0x23c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d04a      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a71      	ldr	r2, [pc, #452]	@ (80080b0 <DMA_SetConfig+0x240>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d045      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a70      	ldr	r2, [pc, #448]	@ (80080b4 <DMA_SetConfig+0x244>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d040      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a6e      	ldr	r2, [pc, #440]	@ (80080b8 <DMA_SetConfig+0x248>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d03b      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a6d      	ldr	r2, [pc, #436]	@ (80080bc <DMA_SetConfig+0x24c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d036      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a6b      	ldr	r2, [pc, #428]	@ (80080c0 <DMA_SetConfig+0x250>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d031      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a6a      	ldr	r2, [pc, #424]	@ (80080c4 <DMA_SetConfig+0x254>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d02c      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a68      	ldr	r2, [pc, #416]	@ (80080c8 <DMA_SetConfig+0x258>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d027      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a67      	ldr	r2, [pc, #412]	@ (80080cc <DMA_SetConfig+0x25c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d022      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a65      	ldr	r2, [pc, #404]	@ (80080d0 <DMA_SetConfig+0x260>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d01d      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a64      	ldr	r2, [pc, #400]	@ (80080d4 <DMA_SetConfig+0x264>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d018      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a62      	ldr	r2, [pc, #392]	@ (80080d8 <DMA_SetConfig+0x268>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a61      	ldr	r2, [pc, #388]	@ (80080dc <DMA_SetConfig+0x26c>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00e      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a5f      	ldr	r2, [pc, #380]	@ (80080e0 <DMA_SetConfig+0x270>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d009      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80080e4 <DMA_SetConfig+0x274>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d004      	beq.n	8007f7a <DMA_SetConfig+0x10a>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a5c      	ldr	r2, [pc, #368]	@ (80080e8 <DMA_SetConfig+0x278>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d101      	bne.n	8007f7e <DMA_SetConfig+0x10e>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <DMA_SetConfig+0x110>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00d      	beq.n	8007fa0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007f8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007f9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a39      	ldr	r2, [pc, #228]	@ (800808c <DMA_SetConfig+0x21c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d04a      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a38      	ldr	r2, [pc, #224]	@ (8008090 <DMA_SetConfig+0x220>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d045      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a36      	ldr	r2, [pc, #216]	@ (8008094 <DMA_SetConfig+0x224>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d040      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a35      	ldr	r2, [pc, #212]	@ (8008098 <DMA_SetConfig+0x228>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d03b      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a33      	ldr	r2, [pc, #204]	@ (800809c <DMA_SetConfig+0x22c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d036      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a32      	ldr	r2, [pc, #200]	@ (80080a0 <DMA_SetConfig+0x230>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d031      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a30      	ldr	r2, [pc, #192]	@ (80080a4 <DMA_SetConfig+0x234>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d02c      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a2f      	ldr	r2, [pc, #188]	@ (80080a8 <DMA_SetConfig+0x238>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d027      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80080ac <DMA_SetConfig+0x23c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d022      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80080b0 <DMA_SetConfig+0x240>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d01d      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a2a      	ldr	r2, [pc, #168]	@ (80080b4 <DMA_SetConfig+0x244>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d018      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a29      	ldr	r2, [pc, #164]	@ (80080b8 <DMA_SetConfig+0x248>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d013      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a27      	ldr	r2, [pc, #156]	@ (80080bc <DMA_SetConfig+0x24c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00e      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a26      	ldr	r2, [pc, #152]	@ (80080c0 <DMA_SetConfig+0x250>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d009      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a24      	ldr	r2, [pc, #144]	@ (80080c4 <DMA_SetConfig+0x254>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d004      	beq.n	8008040 <DMA_SetConfig+0x1d0>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a23      	ldr	r2, [pc, #140]	@ (80080c8 <DMA_SetConfig+0x258>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d101      	bne.n	8008044 <DMA_SetConfig+0x1d4>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <DMA_SetConfig+0x1d6>
 8008044:	2300      	movs	r3, #0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d059      	beq.n	80080fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	223f      	movs	r2, #63	@ 0x3f
 8008054:	409a      	lsls	r2, r3
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008068:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b40      	cmp	r3, #64	@ 0x40
 8008078:	d138      	bne.n	80080ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800808a:	e086      	b.n	800819a <DMA_SetConfig+0x32a>
 800808c:	40020010 	.word	0x40020010
 8008090:	40020028 	.word	0x40020028
 8008094:	40020040 	.word	0x40020040
 8008098:	40020058 	.word	0x40020058
 800809c:	40020070 	.word	0x40020070
 80080a0:	40020088 	.word	0x40020088
 80080a4:	400200a0 	.word	0x400200a0
 80080a8:	400200b8 	.word	0x400200b8
 80080ac:	40020410 	.word	0x40020410
 80080b0:	40020428 	.word	0x40020428
 80080b4:	40020440 	.word	0x40020440
 80080b8:	40020458 	.word	0x40020458
 80080bc:	40020470 	.word	0x40020470
 80080c0:	40020488 	.word	0x40020488
 80080c4:	400204a0 	.word	0x400204a0
 80080c8:	400204b8 	.word	0x400204b8
 80080cc:	58025408 	.word	0x58025408
 80080d0:	5802541c 	.word	0x5802541c
 80080d4:	58025430 	.word	0x58025430
 80080d8:	58025444 	.word	0x58025444
 80080dc:	58025458 	.word	0x58025458
 80080e0:	5802546c 	.word	0x5802546c
 80080e4:	58025480 	.word	0x58025480
 80080e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	60da      	str	r2, [r3, #12]
}
 80080fc:	e04d      	b.n	800819a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a29      	ldr	r2, [pc, #164]	@ (80081a8 <DMA_SetConfig+0x338>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d022      	beq.n	800814e <DMA_SetConfig+0x2de>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a27      	ldr	r2, [pc, #156]	@ (80081ac <DMA_SetConfig+0x33c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d01d      	beq.n	800814e <DMA_SetConfig+0x2de>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a26      	ldr	r2, [pc, #152]	@ (80081b0 <DMA_SetConfig+0x340>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d018      	beq.n	800814e <DMA_SetConfig+0x2de>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a24      	ldr	r2, [pc, #144]	@ (80081b4 <DMA_SetConfig+0x344>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d013      	beq.n	800814e <DMA_SetConfig+0x2de>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a23      	ldr	r2, [pc, #140]	@ (80081b8 <DMA_SetConfig+0x348>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00e      	beq.n	800814e <DMA_SetConfig+0x2de>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a21      	ldr	r2, [pc, #132]	@ (80081bc <DMA_SetConfig+0x34c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d009      	beq.n	800814e <DMA_SetConfig+0x2de>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a20      	ldr	r2, [pc, #128]	@ (80081c0 <DMA_SetConfig+0x350>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d004      	beq.n	800814e <DMA_SetConfig+0x2de>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1e      	ldr	r2, [pc, #120]	@ (80081c4 <DMA_SetConfig+0x354>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d101      	bne.n	8008152 <DMA_SetConfig+0x2e2>
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <DMA_SetConfig+0x2e4>
 8008152:	2300      	movs	r3, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d020      	beq.n	800819a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800815c:	f003 031f 	and.w	r3, r3, #31
 8008160:	2201      	movs	r2, #1
 8008162:	409a      	lsls	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	2b40      	cmp	r3, #64	@ 0x40
 8008176:	d108      	bne.n	800818a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	60da      	str	r2, [r3, #12]
}
 8008188:	e007      	b.n	800819a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	60da      	str	r2, [r3, #12]
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	58025408 	.word	0x58025408
 80081ac:	5802541c 	.word	0x5802541c
 80081b0:	58025430 	.word	0x58025430
 80081b4:	58025444 	.word	0x58025444
 80081b8:	58025458 	.word	0x58025458
 80081bc:	5802546c 	.word	0x5802546c
 80081c0:	58025480 	.word	0x58025480
 80081c4:	58025494 	.word	0x58025494

080081c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a42      	ldr	r2, [pc, #264]	@ (80082e0 <DMA_CalcBaseAndBitshift+0x118>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d04a      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a41      	ldr	r2, [pc, #260]	@ (80082e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d045      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a3f      	ldr	r2, [pc, #252]	@ (80082e8 <DMA_CalcBaseAndBitshift+0x120>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d040      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a3e      	ldr	r2, [pc, #248]	@ (80082ec <DMA_CalcBaseAndBitshift+0x124>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d03b      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a3c      	ldr	r2, [pc, #240]	@ (80082f0 <DMA_CalcBaseAndBitshift+0x128>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d036      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a3b      	ldr	r2, [pc, #236]	@ (80082f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d031      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a39      	ldr	r2, [pc, #228]	@ (80082f8 <DMA_CalcBaseAndBitshift+0x130>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d02c      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a38      	ldr	r2, [pc, #224]	@ (80082fc <DMA_CalcBaseAndBitshift+0x134>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d027      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a36      	ldr	r2, [pc, #216]	@ (8008300 <DMA_CalcBaseAndBitshift+0x138>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d022      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a35      	ldr	r2, [pc, #212]	@ (8008304 <DMA_CalcBaseAndBitshift+0x13c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d01d      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a33      	ldr	r2, [pc, #204]	@ (8008308 <DMA_CalcBaseAndBitshift+0x140>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d018      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a32      	ldr	r2, [pc, #200]	@ (800830c <DMA_CalcBaseAndBitshift+0x144>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d013      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a30      	ldr	r2, [pc, #192]	@ (8008310 <DMA_CalcBaseAndBitshift+0x148>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d00e      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2f      	ldr	r2, [pc, #188]	@ (8008314 <DMA_CalcBaseAndBitshift+0x14c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d009      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a2d      	ldr	r2, [pc, #180]	@ (8008318 <DMA_CalcBaseAndBitshift+0x150>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d004      	beq.n	8008270 <DMA_CalcBaseAndBitshift+0xa8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a2c      	ldr	r2, [pc, #176]	@ (800831c <DMA_CalcBaseAndBitshift+0x154>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d101      	bne.n	8008274 <DMA_CalcBaseAndBitshift+0xac>
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <DMA_CalcBaseAndBitshift+0xae>
 8008274:	2300      	movs	r3, #0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d024      	beq.n	80082c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	3b10      	subs	r3, #16
 8008282:	4a27      	ldr	r2, [pc, #156]	@ (8008320 <DMA_CalcBaseAndBitshift+0x158>)
 8008284:	fba2 2303 	umull	r2, r3, r2, r3
 8008288:	091b      	lsrs	r3, r3, #4
 800828a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	4a24      	ldr	r2, [pc, #144]	@ (8008324 <DMA_CalcBaseAndBitshift+0x15c>)
 8008294:	5cd3      	ldrb	r3, [r2, r3]
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d908      	bls.n	80082b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008328 <DMA_CalcBaseAndBitshift+0x160>)
 80082aa:	4013      	ands	r3, r2
 80082ac:	1d1a      	adds	r2, r3, #4
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80082b2:	e00d      	b.n	80082d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008328 <DMA_CalcBaseAndBitshift+0x160>)
 80082bc:	4013      	ands	r3, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80082c2:	e005      	b.n	80082d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40020010 	.word	0x40020010
 80082e4:	40020028 	.word	0x40020028
 80082e8:	40020040 	.word	0x40020040
 80082ec:	40020058 	.word	0x40020058
 80082f0:	40020070 	.word	0x40020070
 80082f4:	40020088 	.word	0x40020088
 80082f8:	400200a0 	.word	0x400200a0
 80082fc:	400200b8 	.word	0x400200b8
 8008300:	40020410 	.word	0x40020410
 8008304:	40020428 	.word	0x40020428
 8008308:	40020440 	.word	0x40020440
 800830c:	40020458 	.word	0x40020458
 8008310:	40020470 	.word	0x40020470
 8008314:	40020488 	.word	0x40020488
 8008318:	400204a0 	.word	0x400204a0
 800831c:	400204b8 	.word	0x400204b8
 8008320:	aaaaaaab 	.word	0xaaaaaaab
 8008324:	08012084 	.word	0x08012084
 8008328:	fffffc00 	.word	0xfffffc00

0800832c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d120      	bne.n	8008382 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008344:	2b03      	cmp	r3, #3
 8008346:	d858      	bhi.n	80083fa <DMA_CheckFifoParam+0xce>
 8008348:	a201      	add	r2, pc, #4	@ (adr r2, 8008350 <DMA_CheckFifoParam+0x24>)
 800834a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834e:	bf00      	nop
 8008350:	08008361 	.word	0x08008361
 8008354:	08008373 	.word	0x08008373
 8008358:	08008361 	.word	0x08008361
 800835c:	080083fb 	.word	0x080083fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d048      	beq.n	80083fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008370:	e045      	b.n	80083fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008376:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800837a:	d142      	bne.n	8008402 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008380:	e03f      	b.n	8008402 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800838a:	d123      	bne.n	80083d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	2b03      	cmp	r3, #3
 8008392:	d838      	bhi.n	8008406 <DMA_CheckFifoParam+0xda>
 8008394:	a201      	add	r2, pc, #4	@ (adr r2, 800839c <DMA_CheckFifoParam+0x70>)
 8008396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839a:	bf00      	nop
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083b3 	.word	0x080083b3
 80083a4:	080083ad 	.word	0x080083ad
 80083a8:	080083c5 	.word	0x080083c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
        break;
 80083b0:	e030      	b.n	8008414 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d025      	beq.n	800840a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083c2:	e022      	b.n	800840a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80083cc:	d11f      	bne.n	800840e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083d2:	e01c      	b.n	800840e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d902      	bls.n	80083e2 <DMA_CheckFifoParam+0xb6>
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d003      	beq.n	80083e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083e0:	e018      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	73fb      	strb	r3, [r7, #15]
        break;
 80083e6:	e015      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00e      	beq.n	8008412 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	e00b      	b.n	8008412 <DMA_CheckFifoParam+0xe6>
        break;
 80083fa:	bf00      	nop
 80083fc:	e00a      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
        break;
 80083fe:	bf00      	nop
 8008400:	e008      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
        break;
 8008402:	bf00      	nop
 8008404:	e006      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
        break;
 8008406:	bf00      	nop
 8008408:	e004      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
        break;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
        break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <DMA_CheckFifoParam+0xe8>
    break;
 8008412:	bf00      	nop
    }
  }

  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop

08008424 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a38      	ldr	r2, [pc, #224]	@ (8008518 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d022      	beq.n	8008482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a36      	ldr	r2, [pc, #216]	@ (800851c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01d      	beq.n	8008482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a35      	ldr	r2, [pc, #212]	@ (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d018      	beq.n	8008482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a33      	ldr	r2, [pc, #204]	@ (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d013      	beq.n	8008482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a32      	ldr	r2, [pc, #200]	@ (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00e      	beq.n	8008482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a30      	ldr	r2, [pc, #192]	@ (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d009      	beq.n	8008482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a2f      	ldr	r2, [pc, #188]	@ (8008530 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d004      	beq.n	8008482 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a2d      	ldr	r2, [pc, #180]	@ (8008534 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d101      	bne.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008486:	2300      	movs	r3, #0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01a      	beq.n	80084c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	3b08      	subs	r3, #8
 8008494:	4a28      	ldr	r2, [pc, #160]	@ (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008496:	fba2 2303 	umull	r2, r3, r2, r3
 800849a:	091b      	lsrs	r3, r3, #4
 800849c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4b26      	ldr	r3, [pc, #152]	@ (800853c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a24      	ldr	r2, [pc, #144]	@ (8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80084b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084c0:	e024      	b.n	800850c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	3b10      	subs	r3, #16
 80084ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d806      	bhi.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4a1b      	ldr	r2, [pc, #108]	@ (800854c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d902      	bls.n	80084ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3308      	adds	r3, #8
 80084e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4b18      	ldr	r3, [pc, #96]	@ (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a16      	ldr	r2, [pc, #88]	@ (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80084fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	2201      	movs	r2, #1
 8008506:	409a      	lsls	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800850c:	bf00      	nop
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	58025408 	.word	0x58025408
 800851c:	5802541c 	.word	0x5802541c
 8008520:	58025430 	.word	0x58025430
 8008524:	58025444 	.word	0x58025444
 8008528:	58025458 	.word	0x58025458
 800852c:	5802546c 	.word	0x5802546c
 8008530:	58025480 	.word	0x58025480
 8008534:	58025494 	.word	0x58025494
 8008538:	cccccccd 	.word	0xcccccccd
 800853c:	16009600 	.word	0x16009600
 8008540:	58025880 	.word	0x58025880
 8008544:	aaaaaaab 	.word	0xaaaaaaab
 8008548:	400204b8 	.word	0x400204b8
 800854c:	4002040f 	.word	0x4002040f
 8008550:	10008200 	.word	0x10008200
 8008554:	40020880 	.word	0x40020880

08008558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d04a      	beq.n	8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b08      	cmp	r3, #8
 8008572:	d847      	bhi.n	8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a25      	ldr	r2, [pc, #148]	@ (8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d022      	beq.n	80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a24      	ldr	r2, [pc, #144]	@ (8008614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d01d      	beq.n	80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a22      	ldr	r2, [pc, #136]	@ (8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d018      	beq.n	80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a21      	ldr	r2, [pc, #132]	@ (800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d013      	beq.n	80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00e      	beq.n	80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d009      	beq.n	80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a1b      	ldr	r2, [pc, #108]	@ (800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d101      	bne.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085c8:	2300      	movs	r3, #0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4b17      	ldr	r3, [pc, #92]	@ (8008630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a15      	ldr	r2, [pc, #84]	@ (8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085e0:	671a      	str	r2, [r3, #112]	@ 0x70
 80085e2:	e009      	b.n	80085f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4b14      	ldr	r3, [pc, #80]	@ (8008638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	461a      	mov	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a11      	ldr	r2, [pc, #68]	@ (800863c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	2201      	movs	r2, #1
 80085fe:	409a      	lsls	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008604:	bf00      	nop
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	58025408 	.word	0x58025408
 8008614:	5802541c 	.word	0x5802541c
 8008618:	58025430 	.word	0x58025430
 800861c:	58025444 	.word	0x58025444
 8008620:	58025458 	.word	0x58025458
 8008624:	5802546c 	.word	0x5802546c
 8008628:	58025480 	.word	0x58025480
 800862c:	58025494 	.word	0x58025494
 8008630:	1600963f 	.word	0x1600963f
 8008634:	58025940 	.word	0x58025940
 8008638:	1000823f 	.word	0x1000823f
 800863c:	40020940 	.word	0x40020940

08008640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008640:	b480      	push	{r7}
 8008642:	b089      	sub	sp, #36	@ 0x24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800864e:	4b89      	ldr	r3, [pc, #548]	@ (8008874 <HAL_GPIO_Init+0x234>)
 8008650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008652:	e194      	b.n	800897e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	2101      	movs	r1, #1
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	4013      	ands	r3, r2
 8008662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 8186 	beq.w	8008978 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f003 0303 	and.w	r3, r3, #3
 8008674:	2b01      	cmp	r3, #1
 8008676:	d005      	beq.n	8008684 <HAL_GPIO_Init+0x44>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d130      	bne.n	80086e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	2203      	movs	r2, #3
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	43db      	mvns	r3, r3
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	4013      	ands	r3, r2
 800869a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	fa02 f303 	lsl.w	r3, r2, r3
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086ba:	2201      	movs	r2, #1
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43db      	mvns	r3, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4013      	ands	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	091b      	lsrs	r3, r3, #4
 80086d0:	f003 0201 	and.w	r2, r3, #1
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	fa02 f303 	lsl.w	r3, r2, r3
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	4313      	orrs	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d017      	beq.n	8008722 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	2203      	movs	r2, #3
 80086fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008702:	43db      	mvns	r3, r3
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	4013      	ands	r3, r2
 8008708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4313      	orrs	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d123      	bne.n	8008776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	08da      	lsrs	r2, r3, #3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3208      	adds	r2, #8
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	220f      	movs	r2, #15
 8008746:	fa02 f303 	lsl.w	r3, r2, r3
 800874a:	43db      	mvns	r3, r3
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	4013      	ands	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	691a      	ldr	r2, [r3, #16]
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	fa02 f303 	lsl.w	r3, r2, r3
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	4313      	orrs	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	08da      	lsrs	r2, r3, #3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3208      	adds	r2, #8
 8008770:	69b9      	ldr	r1, [r7, #24]
 8008772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	2203      	movs	r2, #3
 8008782:	fa02 f303 	lsl.w	r3, r2, r3
 8008786:	43db      	mvns	r3, r3
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	4013      	ands	r3, r2
 800878c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f003 0203 	and.w	r2, r3, #3
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	fa02 f303 	lsl.w	r3, r2, r3
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 80e0 	beq.w	8008978 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008878 <HAL_GPIO_Init+0x238>)
 80087ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087be:	4a2e      	ldr	r2, [pc, #184]	@ (8008878 <HAL_GPIO_Init+0x238>)
 80087c0:	f043 0302 	orr.w	r3, r3, #2
 80087c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80087c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008878 <HAL_GPIO_Init+0x238>)
 80087ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087d6:	4a29      	ldr	r2, [pc, #164]	@ (800887c <HAL_GPIO_Init+0x23c>)
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	089b      	lsrs	r3, r3, #2
 80087dc:	3302      	adds	r3, #2
 80087de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	220f      	movs	r2, #15
 80087ee:	fa02 f303 	lsl.w	r3, r2, r3
 80087f2:	43db      	mvns	r3, r3
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	4013      	ands	r3, r2
 80087f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a20      	ldr	r2, [pc, #128]	@ (8008880 <HAL_GPIO_Init+0x240>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d052      	beq.n	80088a8 <HAL_GPIO_Init+0x268>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1f      	ldr	r2, [pc, #124]	@ (8008884 <HAL_GPIO_Init+0x244>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d031      	beq.n	800886e <HAL_GPIO_Init+0x22e>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1e      	ldr	r2, [pc, #120]	@ (8008888 <HAL_GPIO_Init+0x248>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d02b      	beq.n	800886a <HAL_GPIO_Init+0x22a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1d      	ldr	r2, [pc, #116]	@ (800888c <HAL_GPIO_Init+0x24c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d025      	beq.n	8008866 <HAL_GPIO_Init+0x226>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1c      	ldr	r2, [pc, #112]	@ (8008890 <HAL_GPIO_Init+0x250>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d01f      	beq.n	8008862 <HAL_GPIO_Init+0x222>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a1b      	ldr	r2, [pc, #108]	@ (8008894 <HAL_GPIO_Init+0x254>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d019      	beq.n	800885e <HAL_GPIO_Init+0x21e>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1a      	ldr	r2, [pc, #104]	@ (8008898 <HAL_GPIO_Init+0x258>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d013      	beq.n	800885a <HAL_GPIO_Init+0x21a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a19      	ldr	r2, [pc, #100]	@ (800889c <HAL_GPIO_Init+0x25c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00d      	beq.n	8008856 <HAL_GPIO_Init+0x216>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a18      	ldr	r2, [pc, #96]	@ (80088a0 <HAL_GPIO_Init+0x260>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d007      	beq.n	8008852 <HAL_GPIO_Init+0x212>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a17      	ldr	r2, [pc, #92]	@ (80088a4 <HAL_GPIO_Init+0x264>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d101      	bne.n	800884e <HAL_GPIO_Init+0x20e>
 800884a:	2309      	movs	r3, #9
 800884c:	e02d      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 800884e:	230a      	movs	r3, #10
 8008850:	e02b      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 8008852:	2308      	movs	r3, #8
 8008854:	e029      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 8008856:	2307      	movs	r3, #7
 8008858:	e027      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 800885a:	2306      	movs	r3, #6
 800885c:	e025      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 800885e:	2305      	movs	r3, #5
 8008860:	e023      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 8008862:	2304      	movs	r3, #4
 8008864:	e021      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 8008866:	2303      	movs	r3, #3
 8008868:	e01f      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 800886a:	2302      	movs	r3, #2
 800886c:	e01d      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 800886e:	2301      	movs	r3, #1
 8008870:	e01b      	b.n	80088aa <HAL_GPIO_Init+0x26a>
 8008872:	bf00      	nop
 8008874:	58000080 	.word	0x58000080
 8008878:	58024400 	.word	0x58024400
 800887c:	58000400 	.word	0x58000400
 8008880:	58020000 	.word	0x58020000
 8008884:	58020400 	.word	0x58020400
 8008888:	58020800 	.word	0x58020800
 800888c:	58020c00 	.word	0x58020c00
 8008890:	58021000 	.word	0x58021000
 8008894:	58021400 	.word	0x58021400
 8008898:	58021800 	.word	0x58021800
 800889c:	58021c00 	.word	0x58021c00
 80088a0:	58022000 	.word	0x58022000
 80088a4:	58022400 	.word	0x58022400
 80088a8:	2300      	movs	r3, #0
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	f002 0203 	and.w	r2, r2, #3
 80088b0:	0092      	lsls	r2, r2, #2
 80088b2:	4093      	lsls	r3, r2
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ba:	4938      	ldr	r1, [pc, #224]	@ (800899c <HAL_GPIO_Init+0x35c>)
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	089b      	lsrs	r3, r3, #2
 80088c0:	3302      	adds	r3, #2
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	43db      	mvns	r3, r3
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	4013      	ands	r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80088f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	43db      	mvns	r3, r3
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	4013      	ands	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800891c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	43db      	mvns	r3, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	4013      	ands	r3, r2
 8008932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d003      	beq.n	8008948 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	43db      	mvns	r3, r3
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	4013      	ands	r3, r2
 800895c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	3301      	adds	r3, #1
 800897c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	fa22 f303 	lsr.w	r3, r2, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	f47f ae63 	bne.w	8008654 <HAL_GPIO_Init+0x14>
  }
}
 800898e:	bf00      	nop
 8008990:	bf00      	nop
 8008992:	3724      	adds	r7, #36	@ 0x24
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	58000400 	.word	0x58000400

080089a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089ae:	4b75      	ldr	r3, [pc, #468]	@ (8008b84 <HAL_GPIO_DeInit+0x1e4>)
 80089b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80089b2:	e0d9      	b.n	8008b68 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80089b4:	2201      	movs	r2, #1
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	4013      	ands	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80cc 	beq.w	8008b62 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80089ca:	4a6f      	ldr	r2, [pc, #444]	@ (8008b88 <HAL_GPIO_DeInit+0x1e8>)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	089b      	lsrs	r3, r3, #2
 80089d0:	3302      	adds	r3, #2
 80089d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	220f      	movs	r2, #15
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	4013      	ands	r3, r2
 80089ea:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a67      	ldr	r2, [pc, #412]	@ (8008b8c <HAL_GPIO_DeInit+0x1ec>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d037      	beq.n	8008a64 <HAL_GPIO_DeInit+0xc4>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a66      	ldr	r2, [pc, #408]	@ (8008b90 <HAL_GPIO_DeInit+0x1f0>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d031      	beq.n	8008a60 <HAL_GPIO_DeInit+0xc0>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a65      	ldr	r2, [pc, #404]	@ (8008b94 <HAL_GPIO_DeInit+0x1f4>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d02b      	beq.n	8008a5c <HAL_GPIO_DeInit+0xbc>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a64      	ldr	r2, [pc, #400]	@ (8008b98 <HAL_GPIO_DeInit+0x1f8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d025      	beq.n	8008a58 <HAL_GPIO_DeInit+0xb8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a63      	ldr	r2, [pc, #396]	@ (8008b9c <HAL_GPIO_DeInit+0x1fc>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d01f      	beq.n	8008a54 <HAL_GPIO_DeInit+0xb4>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a62      	ldr	r2, [pc, #392]	@ (8008ba0 <HAL_GPIO_DeInit+0x200>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d019      	beq.n	8008a50 <HAL_GPIO_DeInit+0xb0>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a61      	ldr	r2, [pc, #388]	@ (8008ba4 <HAL_GPIO_DeInit+0x204>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d013      	beq.n	8008a4c <HAL_GPIO_DeInit+0xac>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a60      	ldr	r2, [pc, #384]	@ (8008ba8 <HAL_GPIO_DeInit+0x208>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00d      	beq.n	8008a48 <HAL_GPIO_DeInit+0xa8>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8008bac <HAL_GPIO_DeInit+0x20c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d007      	beq.n	8008a44 <HAL_GPIO_DeInit+0xa4>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a5e      	ldr	r2, [pc, #376]	@ (8008bb0 <HAL_GPIO_DeInit+0x210>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d101      	bne.n	8008a40 <HAL_GPIO_DeInit+0xa0>
 8008a3c:	2309      	movs	r3, #9
 8008a3e:	e012      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a40:	230a      	movs	r3, #10
 8008a42:	e010      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a44:	2308      	movs	r3, #8
 8008a46:	e00e      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a48:	2307      	movs	r3, #7
 8008a4a:	e00c      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a4c:	2306      	movs	r3, #6
 8008a4e:	e00a      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a50:	2305      	movs	r3, #5
 8008a52:	e008      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a54:	2304      	movs	r3, #4
 8008a56:	e006      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e004      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e002      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e000      	b.n	8008a66 <HAL_GPIO_DeInit+0xc6>
 8008a64:	2300      	movs	r3, #0
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	f002 0203 	and.w	r2, r2, #3
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	4093      	lsls	r3, r2
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d136      	bne.n	8008ae4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	401a      	ands	r2, r3
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	43db      	mvns	r3, r3
 8008a8c:	401a      	ands	r2, r3
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	43db      	mvns	r3, r3
 8008aae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	220f      	movs	r2, #15
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008ac6:	4a30      	ldr	r2, [pc, #192]	@ (8008b88 <HAL_GPIO_DeInit+0x1e8>)
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	089b      	lsrs	r3, r3, #2
 8008acc:	3302      	adds	r3, #2
 8008ace:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	43da      	mvns	r2, r3
 8008ad6:	482c      	ldr	r0, [pc, #176]	@ (8008b88 <HAL_GPIO_DeInit+0x1e8>)
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	089b      	lsrs	r3, r3, #2
 8008adc:	400a      	ands	r2, r1
 8008ade:	3302      	adds	r3, #2
 8008ae0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	2103      	movs	r1, #3
 8008aee:	fa01 f303 	lsl.w	r3, r1, r3
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	08da      	lsrs	r2, r3, #3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3208      	adds	r2, #8
 8008b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	220f      	movs	r2, #15
 8008b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b12:	43db      	mvns	r3, r3
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	08d2      	lsrs	r2, r2, #3
 8008b18:	4019      	ands	r1, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3208      	adds	r2, #8
 8008b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	2103      	movs	r1, #3
 8008b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b30:	43db      	mvns	r3, r3
 8008b32:	401a      	ands	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	fa01 f303 	lsl.w	r3, r1, r3
 8008b44:	43db      	mvns	r3, r3
 8008b46:	401a      	ands	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	2103      	movs	r1, #3
 8008b56:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5a:	43db      	mvns	r3, r3
 8008b5c:	401a      	ands	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	3301      	adds	r3, #1
 8008b66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f af1f 	bne.w	80089b4 <HAL_GPIO_DeInit+0x14>
  }
}
 8008b76:	bf00      	nop
 8008b78:	bf00      	nop
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	58000080 	.word	0x58000080
 8008b88:	58000400 	.word	0x58000400
 8008b8c:	58020000 	.word	0x58020000
 8008b90:	58020400 	.word	0x58020400
 8008b94:	58020800 	.word	0x58020800
 8008b98:	58020c00 	.word	0x58020c00
 8008b9c:	58021000 	.word	0x58021000
 8008ba0:	58021400 	.word	0x58021400
 8008ba4:	58021800 	.word	0x58021800
 8008ba8:	58021c00 	.word	0x58021c00
 8008bac:	58022000 	.word	0x58022000
 8008bb0:	58022400 	.word	0x58022400

08008bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	807b      	strh	r3, [r7, #2]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bc4:	787b      	ldrb	r3, [r7, #1]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bca:	887a      	ldrh	r2, [r7, #2]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008bd0:	e003      	b.n	8008bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008bd2:	887b      	ldrh	r3, [r7, #2]
 8008bd4:	041a      	lsls	r2, r3, #16
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	619a      	str	r2, [r3, #24]
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
	...

08008be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e07f      	b.n	8008cfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7f8 fe2c 	bl	800186c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2224      	movs	r2, #36	@ 0x24
 8008c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0201 	bic.w	r2, r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008c38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d107      	bne.n	8008c62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c5e:	609a      	str	r2, [r3, #8]
 8008c60:	e006      	b.n	8008c70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008c6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d104      	bne.n	8008c82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008d04 <HAL_I2C_Init+0x11c>)
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68da      	ldr	r2, [r3, #12]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691a      	ldr	r2, [r3, #16]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	69d9      	ldr	r1, [r3, #28]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1a      	ldr	r2, [r3, #32]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0201 	orr.w	r2, r2, #1
 8008cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	02008000 	.word	0x02008000

08008d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d138      	bne.n	8008d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e032      	b.n	8008d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2224      	movs	r2, #36	@ 0x24
 8008d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0201 	bic.w	r2, r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f042 0201 	orr.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e000      	b.n	8008d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008d90:	2302      	movs	r3, #2
  }
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d139      	bne.n	8008e28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	e033      	b.n	8008e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2224      	movs	r2, #36	@ 0x24
 8008dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008df0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f042 0201 	orr.w	r2, r2, #1
 8008e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	e000      	b.n	8008e2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008e28:	2302      	movs	r3, #2
  }
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
	...

08008e38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e40:	4b19      	ldr	r3, [pc, #100]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d00a      	beq.n	8008e62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e4c:	4b16      	ldr	r3, [pc, #88]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d001      	beq.n	8008e5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e01f      	b.n	8008e9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e01d      	b.n	8008e9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e62:	4b11      	ldr	r3, [pc, #68]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f023 0207 	bic.w	r2, r3, #7
 8008e6a:	490f      	ldr	r1, [pc, #60]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e72:	f7fa fa67 	bl	8003344 <HAL_GetTick>
 8008e76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e78:	e009      	b.n	8008e8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e7a:	f7fa fa63 	bl	8003344 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e88:	d901      	bls.n	8008e8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e007      	b.n	8008e9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <HAL_PWREx_ConfigSupply+0x70>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e9a:	d1ee      	bne.n	8008e7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	58024800 	.word	0x58024800

08008eac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	@ 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d102      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f000 bc48 	b.w	8009750 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 808c 	beq.w	8008fe6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ece:	4b96      	ldr	r3, [pc, #600]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ed8:	4b93      	ldr	r3, [pc, #588]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d007      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x48>
 8008ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee6:	2b18      	cmp	r3, #24
 8008ee8:	d111      	bne.n	8008f0e <HAL_RCC_OscConfig+0x62>
 8008eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eec:	f003 0303 	and.w	r3, r3, #3
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d10c      	bne.n	8008f0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef4:	4b8c      	ldr	r3, [pc, #560]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d071      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x138>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d16d      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f000 bc21 	b.w	8009750 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f16:	d106      	bne.n	8008f26 <HAL_RCC_OscConfig+0x7a>
 8008f18:	4b83      	ldr	r3, [pc, #524]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a82      	ldr	r2, [pc, #520]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	e02e      	b.n	8008f84 <HAL_RCC_OscConfig+0xd8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10c      	bne.n	8008f48 <HAL_RCC_OscConfig+0x9c>
 8008f2e:	4b7e      	ldr	r3, [pc, #504]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a7d      	ldr	r2, [pc, #500]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	4b7b      	ldr	r3, [pc, #492]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a7a      	ldr	r2, [pc, #488]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	e01d      	b.n	8008f84 <HAL_RCC_OscConfig+0xd8>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f50:	d10c      	bne.n	8008f6c <HAL_RCC_OscConfig+0xc0>
 8008f52:	4b75      	ldr	r3, [pc, #468]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a74      	ldr	r2, [pc, #464]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	4b72      	ldr	r3, [pc, #456]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a71      	ldr	r2, [pc, #452]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e00b      	b.n	8008f84 <HAL_RCC_OscConfig+0xd8>
 8008f6c:	4b6e      	ldr	r3, [pc, #440]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a6d      	ldr	r2, [pc, #436]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	4b6b      	ldr	r3, [pc, #428]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d015      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8c:	f7fa f9da 	bl	8003344 <HAL_GetTick>
 8008f90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f92:	e00a      	b.n	8008faa <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f94:	f7fa f9d6 	bl	8003344 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d901      	bls.n	8008faa <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e3d2      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008faa:	4b5f      	ldr	r3, [pc, #380]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0ee      	beq.n	8008f94 <HAL_RCC_OscConfig+0xe8>
 8008fb6:	e016      	b.n	8008fe6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb8:	f7fa f9c4 	bl	8003344 <HAL_GetTick>
 8008fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fbe:	e00a      	b.n	8008fd6 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fc0:	f7fa f9c0 	bl	8003344 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e3bc      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fd6:	4b54      	ldr	r3, [pc, #336]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1ee      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x114>
 8008fe2:	e000      	b.n	8008fe6 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 80cb 	beq.w	800918a <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ffc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8009000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009002:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <HAL_RCC_OscConfig+0x16e>
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	2b18      	cmp	r3, #24
 800900e:	d156      	bne.n	80090be <HAL_RCC_OscConfig+0x212>
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d151      	bne.n	80090be <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800901a:	4b43      	ldr	r3, [pc, #268]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <HAL_RCC_OscConfig+0x186>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e38e      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009032:	4b3d      	ldr	r3, [pc, #244]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f023 0219 	bic.w	r2, r3, #25
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	493a      	ldr	r1, [pc, #232]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8009040:	4313      	orrs	r3, r2
 8009042:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009044:	f7fa f97e 	bl	8003344 <HAL_GetTick>
 8009048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800904a:	e008      	b.n	800905e <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800904c:	f7fa f97a 	bl	8003344 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d901      	bls.n	800905e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e378      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800905e:	4b32      	ldr	r3, [pc, #200]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0f0      	beq.n	800904c <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800906a:	f7fa f99b 	bl	80033a4 <HAL_GetREVID>
 800906e:	4603      	mov	r3, r0
 8009070:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009074:	4293      	cmp	r3, r2
 8009076:	d817      	bhi.n	80090a8 <HAL_RCC_OscConfig+0x1fc>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b40      	cmp	r3, #64	@ 0x40
 800907e:	d108      	bne.n	8009092 <HAL_RCC_OscConfig+0x1e6>
 8009080:	4b29      	ldr	r3, [pc, #164]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009088:	4a27      	ldr	r2, [pc, #156]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 800908a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800908e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009090:	e07b      	b.n	800918a <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009092:	4b25      	ldr	r3, [pc, #148]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	031b      	lsls	r3, r3, #12
 80090a0:	4921      	ldr	r1, [pc, #132]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090a6:	e070      	b.n	800918a <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090a8:	4b1f      	ldr	r3, [pc, #124]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	061b      	lsls	r3, r3, #24
 80090b6:	491c      	ldr	r1, [pc, #112]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090bc:	e065      	b.n	800918a <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d048      	beq.n	8009158 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090c6:	4b18      	ldr	r3, [pc, #96]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f023 0219 	bic.w	r2, r3, #25
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4915      	ldr	r1, [pc, #84]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fa f934 	bl	8003344 <HAL_GetTick>
 80090dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090e0:	f7fa f930 	bl	8003344 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e32e      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090fe:	f7fa f951 	bl	80033a4 <HAL_GetREVID>
 8009102:	4603      	mov	r3, r0
 8009104:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009108:	4293      	cmp	r3, r2
 800910a:	d81a      	bhi.n	8009142 <HAL_RCC_OscConfig+0x296>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	2b40      	cmp	r3, #64	@ 0x40
 8009112:	d10b      	bne.n	800912c <HAL_RCC_OscConfig+0x280>
 8009114:	4b04      	ldr	r3, [pc, #16]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800911c:	4a02      	ldr	r2, [pc, #8]	@ (8009128 <HAL_RCC_OscConfig+0x27c>)
 800911e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009122:	6053      	str	r3, [r2, #4]
 8009124:	e031      	b.n	800918a <HAL_RCC_OscConfig+0x2de>
 8009126:	bf00      	nop
 8009128:	58024400 	.word	0x58024400
 800912c:	4b9c      	ldr	r3, [pc, #624]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	031b      	lsls	r3, r3, #12
 800913a:	4999      	ldr	r1, [pc, #612]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800913c:	4313      	orrs	r3, r2
 800913e:	604b      	str	r3, [r1, #4]
 8009140:	e023      	b.n	800918a <HAL_RCC_OscConfig+0x2de>
 8009142:	4b97      	ldr	r3, [pc, #604]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	061b      	lsls	r3, r3, #24
 8009150:	4993      	ldr	r1, [pc, #588]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009152:	4313      	orrs	r3, r2
 8009154:	604b      	str	r3, [r1, #4]
 8009156:	e018      	b.n	800918a <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009158:	4b91      	ldr	r3, [pc, #580]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a90      	ldr	r2, [pc, #576]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009164:	f7fa f8ee 	bl	8003344 <HAL_GetTick>
 8009168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800916a:	e008      	b.n	800917e <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800916c:	f7fa f8ea 	bl	8003344 <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	2b02      	cmp	r3, #2
 8009178:	d901      	bls.n	800917e <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e2e8      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800917e:	4b88      	ldr	r3, [pc, #544]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1f0      	bne.n	800916c <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0310 	and.w	r3, r3, #16
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 80a9 	beq.w	80092ea <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009198:	4b81      	ldr	r3, [pc, #516]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091a2:	4b7f      	ldr	r3, [pc, #508]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80091a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2b08      	cmp	r3, #8
 80091ac:	d007      	beq.n	80091be <HAL_RCC_OscConfig+0x312>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	2b18      	cmp	r3, #24
 80091b2:	d13a      	bne.n	800922a <HAL_RCC_OscConfig+0x37e>
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d135      	bne.n	800922a <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091be:	4b78      	ldr	r3, [pc, #480]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d005      	beq.n	80091d6 <HAL_RCC_OscConfig+0x32a>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	2b80      	cmp	r3, #128	@ 0x80
 80091d0:	d001      	beq.n	80091d6 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e2bc      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091d6:	f7fa f8e5 	bl	80033a4 <HAL_GetREVID>
 80091da:	4603      	mov	r3, r0
 80091dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d817      	bhi.n	8009214 <HAL_RCC_OscConfig+0x368>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d108      	bne.n	80091fe <HAL_RCC_OscConfig+0x352>
 80091ec:	4b6c      	ldr	r3, [pc, #432]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80091f4:	4a6a      	ldr	r2, [pc, #424]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80091f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091fc:	e075      	b.n	80092ea <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091fe:	4b68      	ldr	r3, [pc, #416]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	069b      	lsls	r3, r3, #26
 800920c:	4964      	ldr	r1, [pc, #400]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800920e:	4313      	orrs	r3, r2
 8009210:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009212:	e06a      	b.n	80092ea <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009214:	4b62      	ldr	r3, [pc, #392]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	061b      	lsls	r3, r3, #24
 8009222:	495f      	ldr	r1, [pc, #380]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009224:	4313      	orrs	r3, r2
 8009226:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009228:	e05f      	b.n	80092ea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d042      	beq.n	80092b8 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009232:	4b5b      	ldr	r3, [pc, #364]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a5a      	ldr	r2, [pc, #360]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800923c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800923e:	f7fa f881 	bl	8003344 <HAL_GetTick>
 8009242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009244:	e008      	b.n	8009258 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009246:	f7fa f87d 	bl	8003344 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d901      	bls.n	8009258 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e27b      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009258:	4b51      	ldr	r3, [pc, #324]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009260:	2b00      	cmp	r3, #0
 8009262:	d0f0      	beq.n	8009246 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009264:	f7fa f89e 	bl	80033a4 <HAL_GetREVID>
 8009268:	4603      	mov	r3, r0
 800926a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800926e:	4293      	cmp	r3, r2
 8009270:	d817      	bhi.n	80092a2 <HAL_RCC_OscConfig+0x3f6>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	2b20      	cmp	r3, #32
 8009278:	d108      	bne.n	800928c <HAL_RCC_OscConfig+0x3e0>
 800927a:	4b49      	ldr	r3, [pc, #292]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009282:	4a47      	ldr	r2, [pc, #284]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009284:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009288:	6053      	str	r3, [r2, #4]
 800928a:	e02e      	b.n	80092ea <HAL_RCC_OscConfig+0x43e>
 800928c:	4b44      	ldr	r3, [pc, #272]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	069b      	lsls	r3, r3, #26
 800929a:	4941      	ldr	r1, [pc, #260]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800929c:	4313      	orrs	r3, r2
 800929e:	604b      	str	r3, [r1, #4]
 80092a0:	e023      	b.n	80092ea <HAL_RCC_OscConfig+0x43e>
 80092a2:	4b3f      	ldr	r3, [pc, #252]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	061b      	lsls	r3, r3, #24
 80092b0:	493b      	ldr	r1, [pc, #236]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60cb      	str	r3, [r1, #12]
 80092b6:	e018      	b.n	80092ea <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80092b8:	4b39      	ldr	r3, [pc, #228]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a38      	ldr	r2, [pc, #224]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80092be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c4:	f7fa f83e 	bl	8003344 <HAL_GetTick>
 80092c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80092cc:	f7fa f83a 	bl	8003344 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e238      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092de:	4b30      	ldr	r3, [pc, #192]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1f0      	bne.n	80092cc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0308 	and.w	r3, r3, #8
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d036      	beq.n	8009364 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d019      	beq.n	8009332 <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092fe:	4b28      	ldr	r3, [pc, #160]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009302:	4a27      	ldr	r2, [pc, #156]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009304:	f043 0301 	orr.w	r3, r3, #1
 8009308:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800930a:	f7fa f81b 	bl	8003344 <HAL_GetTick>
 800930e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009310:	e008      	b.n	8009324 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009312:	f7fa f817 	bl	8003344 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e215      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009324:	4b1e      	ldr	r3, [pc, #120]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f0      	beq.n	8009312 <HAL_RCC_OscConfig+0x466>
 8009330:	e018      	b.n	8009364 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009332:	4b1b      	ldr	r3, [pc, #108]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009336:	4a1a      	ldr	r2, [pc, #104]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933e:	f7fa f801 	bl	8003344 <HAL_GetTick>
 8009342:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009344:	e008      	b.n	8009358 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009346:	f7f9 fffd 	bl	8003344 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d901      	bls.n	8009358 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e1fb      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009358:	4b11      	ldr	r3, [pc, #68]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800935a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1f0      	bne.n	8009346 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d039      	beq.n	80093e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01c      	beq.n	80093b2 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009378:	4b09      	ldr	r3, [pc, #36]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a08      	ldr	r2, [pc, #32]	@ (80093a0 <HAL_RCC_OscConfig+0x4f4>)
 800937e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009382:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009384:	f7f9 ffde 	bl	8003344 <HAL_GetTick>
 8009388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800938a:	e00b      	b.n	80093a4 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800938c:	f7f9 ffda 	bl	8003344 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d904      	bls.n	80093a4 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e1d8      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
 800939e:	bf00      	nop
 80093a0:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093a4:	4b65      	ldr	r3, [pc, #404]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0ed      	beq.n	800938c <HAL_RCC_OscConfig+0x4e0>
 80093b0:	e018      	b.n	80093e4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093b2:	4b62      	ldr	r3, [pc, #392]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a61      	ldr	r2, [pc, #388]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 80093b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093be:	f7f9 ffc1 	bl	8003344 <HAL_GetTick>
 80093c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093c4:	e008      	b.n	80093d8 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093c6:	f7f9 ffbd 	bl	8003344 <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d901      	bls.n	80093d8 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e1bb      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093d8:	4b58      	ldr	r3, [pc, #352]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1f0      	bne.n	80093c6 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8081 	beq.w	80094f4 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093f2:	4b53      	ldr	r3, [pc, #332]	@ (8009540 <HAL_RCC_OscConfig+0x694>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a52      	ldr	r2, [pc, #328]	@ (8009540 <HAL_RCC_OscConfig+0x694>)
 80093f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093fe:	f7f9 ffa1 	bl	8003344 <HAL_GetTick>
 8009402:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009404:	e008      	b.n	8009418 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009406:	f7f9 ff9d 	bl	8003344 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b64      	cmp	r3, #100	@ 0x64
 8009412:	d901      	bls.n	8009418 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e19b      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009418:	4b49      	ldr	r3, [pc, #292]	@ (8009540 <HAL_RCC_OscConfig+0x694>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0f0      	beq.n	8009406 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d106      	bne.n	800943a <HAL_RCC_OscConfig+0x58e>
 800942c:	4b43      	ldr	r3, [pc, #268]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 800942e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009430:	4a42      	ldr	r2, [pc, #264]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	6713      	str	r3, [r2, #112]	@ 0x70
 8009438:	e02d      	b.n	8009496 <HAL_RCC_OscConfig+0x5ea>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10c      	bne.n	800945c <HAL_RCC_OscConfig+0x5b0>
 8009442:	4b3e      	ldr	r3, [pc, #248]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009446:	4a3d      	ldr	r2, [pc, #244]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009448:	f023 0301 	bic.w	r3, r3, #1
 800944c:	6713      	str	r3, [r2, #112]	@ 0x70
 800944e:	4b3b      	ldr	r3, [pc, #236]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009452:	4a3a      	ldr	r2, [pc, #232]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009454:	f023 0304 	bic.w	r3, r3, #4
 8009458:	6713      	str	r3, [r2, #112]	@ 0x70
 800945a:	e01c      	b.n	8009496 <HAL_RCC_OscConfig+0x5ea>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	2b05      	cmp	r3, #5
 8009462:	d10c      	bne.n	800947e <HAL_RCC_OscConfig+0x5d2>
 8009464:	4b35      	ldr	r3, [pc, #212]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009468:	4a34      	ldr	r2, [pc, #208]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 800946a:	f043 0304 	orr.w	r3, r3, #4
 800946e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009470:	4b32      	ldr	r3, [pc, #200]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009474:	4a31      	ldr	r2, [pc, #196]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009476:	f043 0301 	orr.w	r3, r3, #1
 800947a:	6713      	str	r3, [r2, #112]	@ 0x70
 800947c:	e00b      	b.n	8009496 <HAL_RCC_OscConfig+0x5ea>
 800947e:	4b2f      	ldr	r3, [pc, #188]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009482:	4a2e      	ldr	r2, [pc, #184]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009484:	f023 0301 	bic.w	r3, r3, #1
 8009488:	6713      	str	r3, [r2, #112]	@ 0x70
 800948a:	4b2c      	ldr	r3, [pc, #176]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 800948c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948e:	4a2b      	ldr	r2, [pc, #172]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009490:	f023 0304 	bic.w	r3, r3, #4
 8009494:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d015      	beq.n	80094ca <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800949e:	f7f9 ff51 	bl	8003344 <HAL_GetTick>
 80094a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094a4:	e00a      	b.n	80094bc <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094a6:	f7f9 ff4d 	bl	8003344 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d901      	bls.n	80094bc <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e149      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094bc:	4b1f      	ldr	r3, [pc, #124]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 80094be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c0:	f003 0302 	and.w	r3, r3, #2
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0ee      	beq.n	80094a6 <HAL_RCC_OscConfig+0x5fa>
 80094c8:	e014      	b.n	80094f4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ca:	f7f9 ff3b 	bl	8003344 <HAL_GetTick>
 80094ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094d0:	e00a      	b.n	80094e8 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094d2:	f7f9 ff37 	bl	8003344 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d901      	bls.n	80094e8 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e133      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094e8:	4b14      	ldr	r3, [pc, #80]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 80094ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1ee      	bne.n	80094d2 <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8128 	beq.w	800974e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80094fe:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009506:	2b18      	cmp	r3, #24
 8009508:	f000 80b8 	beq.w	800967c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009510:	2b02      	cmp	r3, #2
 8009512:	f040 8099 	bne.w	8009648 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009516:	4b09      	ldr	r3, [pc, #36]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a08      	ldr	r2, [pc, #32]	@ (800953c <HAL_RCC_OscConfig+0x690>)
 800951c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009522:	f7f9 ff0f 	bl	8003344 <HAL_GetTick>
 8009526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009528:	e00c      	b.n	8009544 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800952a:	f7f9 ff0b 	bl	8003344 <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	d905      	bls.n	8009544 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e109      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
 800953c:	58024400 	.word	0x58024400
 8009540:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009544:	4b84      	ldr	r3, [pc, #528]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1ec      	bne.n	800952a <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009550:	4b81      	ldr	r3, [pc, #516]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009552:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009554:	4b81      	ldr	r3, [pc, #516]	@ (800975c <HAL_RCC_OscConfig+0x8b0>)
 8009556:	4013      	ands	r3, r2
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009560:	0112      	lsls	r2, r2, #4
 8009562:	430a      	orrs	r2, r1
 8009564:	497c      	ldr	r1, [pc, #496]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009566:	4313      	orrs	r3, r2
 8009568:	628b      	str	r3, [r1, #40]	@ 0x28
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800956e:	3b01      	subs	r3, #1
 8009570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009578:	3b01      	subs	r3, #1
 800957a:	025b      	lsls	r3, r3, #9
 800957c:	b29b      	uxth	r3, r3
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009584:	3b01      	subs	r3, #1
 8009586:	041b      	lsls	r3, r3, #16
 8009588:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800958c:	431a      	orrs	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009592:	3b01      	subs	r3, #1
 8009594:	061b      	lsls	r3, r3, #24
 8009596:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800959a:	496f      	ldr	r1, [pc, #444]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800959c:	4313      	orrs	r3, r2
 800959e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80095a0:	4b6d      	ldr	r3, [pc, #436]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a4:	4a6c      	ldr	r2, [pc, #432]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095a6:	f023 0301 	bic.w	r3, r3, #1
 80095aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095ac:	4b6a      	ldr	r3, [pc, #424]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095b0:	4b6b      	ldr	r3, [pc, #428]	@ (8009760 <HAL_RCC_OscConfig+0x8b4>)
 80095b2:	4013      	ands	r3, r2
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80095b8:	00d2      	lsls	r2, r2, #3
 80095ba:	4967      	ldr	r1, [pc, #412]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80095c0:	4b65      	ldr	r3, [pc, #404]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c4:	f023 020c 	bic.w	r2, r3, #12
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095cc:	4962      	ldr	r1, [pc, #392]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80095d2:	4b61      	ldr	r3, [pc, #388]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d6:	f023 0202 	bic.w	r2, r3, #2
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095de:	495e      	ldr	r1, [pc, #376]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095e4:	4b5c      	ldr	r3, [pc, #368]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	4a5b      	ldr	r2, [pc, #364]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f0:	4b59      	ldr	r3, [pc, #356]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f4:	4a58      	ldr	r2, [pc, #352]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80095fc:	4b56      	ldr	r3, [pc, #344]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009600:	4a55      	ldr	r2, [pc, #340]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009602:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009608:	4b53      	ldr	r3, [pc, #332]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	4a52      	ldr	r2, [pc, #328]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009614:	4b50      	ldr	r3, [pc, #320]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a4f      	ldr	r2, [pc, #316]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800961a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800961e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009620:	f7f9 fe90 	bl	8003344 <HAL_GetTick>
 8009624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009626:	e008      	b.n	800963a <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009628:	f7f9 fe8c 	bl	8003344 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	2b02      	cmp	r3, #2
 8009634:	d901      	bls.n	800963a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e08a      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800963a:	4b47      	ldr	r3, [pc, #284]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0f0      	beq.n	8009628 <HAL_RCC_OscConfig+0x77c>
 8009646:	e082      	b.n	800974e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009648:	4b43      	ldr	r3, [pc, #268]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a42      	ldr	r2, [pc, #264]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800964e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009654:	f7f9 fe76 	bl	8003344 <HAL_GetTick>
 8009658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800965a:	e008      	b.n	800966e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800965c:	f7f9 fe72 	bl	8003344 <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d901      	bls.n	800966e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e070      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800966e:	4b3a      	ldr	r3, [pc, #232]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1f0      	bne.n	800965c <HAL_RCC_OscConfig+0x7b0>
 800967a:	e068      	b.n	800974e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800967c:	4b36      	ldr	r3, [pc, #216]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800967e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009680:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009682:	4b35      	ldr	r3, [pc, #212]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009686:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	2b01      	cmp	r3, #1
 800968e:	d031      	beq.n	80096f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	f003 0203 	and.w	r2, r3, #3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800969a:	429a      	cmp	r2, r3
 800969c:	d12a      	bne.n	80096f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	091b      	lsrs	r3, r3, #4
 80096a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d122      	bne.n	80096f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d11a      	bne.n	80096f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	0a5b      	lsrs	r3, r3, #9
 80096c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d111      	bne.n	80096f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	0c1b      	lsrs	r3, r3, #16
 80096d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096de:	429a      	cmp	r2, r3
 80096e0:	d108      	bne.n	80096f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	0e1b      	lsrs	r3, r3, #24
 80096e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d001      	beq.n	80096f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e02b      	b.n	8009750 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80096f8:	4b17      	ldr	r3, [pc, #92]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 80096fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096fc:	08db      	lsrs	r3, r3, #3
 80096fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009702:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	429a      	cmp	r2, r3
 800970c:	d01f      	beq.n	800974e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800970e:	4b12      	ldr	r3, [pc, #72]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009712:	4a11      	ldr	r2, [pc, #68]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009714:	f023 0301 	bic.w	r3, r3, #1
 8009718:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800971a:	f7f9 fe13 	bl	8003344 <HAL_GetTick>
 800971e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009720:	bf00      	nop
 8009722:	f7f9 fe0f 	bl	8003344 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	4293      	cmp	r3, r2
 800972c:	d0f9      	beq.n	8009722 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800972e:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009732:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <HAL_RCC_OscConfig+0x8b4>)
 8009734:	4013      	ands	r3, r2
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800973a:	00d2      	lsls	r2, r2, #3
 800973c:	4906      	ldr	r1, [pc, #24]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 800973e:	4313      	orrs	r3, r2
 8009740:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009742:	4b05      	ldr	r3, [pc, #20]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	4a04      	ldr	r2, [pc, #16]	@ (8009758 <HAL_RCC_OscConfig+0x8ac>)
 8009748:	f043 0301 	orr.w	r3, r3, #1
 800974c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3730      	adds	r7, #48	@ 0x30
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	58024400 	.word	0x58024400
 800975c:	fffffc0c 	.word	0xfffffc0c
 8009760:	ffff0007 	.word	0xffff0007

08009764 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e19c      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009778:	4b8a      	ldr	r3, [pc, #552]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 030f 	and.w	r3, r3, #15
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d910      	bls.n	80097a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009786:	4b87      	ldr	r3, [pc, #540]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f023 020f 	bic.w	r2, r3, #15
 800978e:	4985      	ldr	r1, [pc, #532]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	4313      	orrs	r3, r2
 8009794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009796:	4b83      	ldr	r3, [pc, #524]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 030f 	and.w	r3, r3, #15
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d001      	beq.n	80097a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e184      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0304 	and.w	r3, r3, #4
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d010      	beq.n	80097d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	691a      	ldr	r2, [r3, #16]
 80097b8:	4b7b      	ldr	r3, [pc, #492]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d908      	bls.n	80097d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097c4:	4b78      	ldr	r3, [pc, #480]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	4975      	ldr	r1, [pc, #468]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0308 	and.w	r3, r3, #8
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d010      	beq.n	8009804 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	695a      	ldr	r2, [r3, #20]
 80097e6:	4b70      	ldr	r3, [pc, #448]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d908      	bls.n	8009804 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097f2:	4b6d      	ldr	r3, [pc, #436]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	496a      	ldr	r1, [pc, #424]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009800:	4313      	orrs	r3, r2
 8009802:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0310 	and.w	r3, r3, #16
 800980c:	2b00      	cmp	r3, #0
 800980e:	d010      	beq.n	8009832 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	4b64      	ldr	r3, [pc, #400]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800981c:	429a      	cmp	r2, r3
 800981e:	d908      	bls.n	8009832 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009820:	4b61      	ldr	r3, [pc, #388]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	495e      	ldr	r1, [pc, #376]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 800982e:	4313      	orrs	r3, r2
 8009830:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b00      	cmp	r3, #0
 800983c:	d010      	beq.n	8009860 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	69da      	ldr	r2, [r3, #28]
 8009842:	4b59      	ldr	r3, [pc, #356]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800984a:	429a      	cmp	r2, r3
 800984c:	d908      	bls.n	8009860 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800984e:	4b56      	ldr	r3, [pc, #344]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	4953      	ldr	r1, [pc, #332]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 800985c:	4313      	orrs	r3, r2
 800985e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d010      	beq.n	800988e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68da      	ldr	r2, [r3, #12]
 8009870:	4b4d      	ldr	r3, [pc, #308]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	f003 030f 	and.w	r3, r3, #15
 8009878:	429a      	cmp	r2, r3
 800987a:	d908      	bls.n	800988e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800987c:	4b4a      	ldr	r3, [pc, #296]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	f023 020f 	bic.w	r2, r3, #15
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	4947      	ldr	r1, [pc, #284]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 800988a:	4313      	orrs	r3, r2
 800988c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d055      	beq.n	8009946 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800989a:	4b43      	ldr	r3, [pc, #268]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	4940      	ldr	r1, [pc, #256]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d107      	bne.n	80098c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098b4:	4b3c      	ldr	r3, [pc, #240]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d121      	bne.n	8009904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e0f6      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d107      	bne.n	80098dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098cc:	4b36      	ldr	r3, [pc, #216]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d115      	bne.n	8009904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e0ea      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d107      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098e4:	4b30      	ldr	r3, [pc, #192]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0de      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098f4:	4b2c      	ldr	r3, [pc, #176]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e0d6      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009904:	4b28      	ldr	r3, [pc, #160]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	f023 0207 	bic.w	r2, r3, #7
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	4925      	ldr	r1, [pc, #148]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009912:	4313      	orrs	r3, r2
 8009914:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009916:	f7f9 fd15 	bl	8003344 <HAL_GetTick>
 800991a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800991c:	e00a      	b.n	8009934 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800991e:	f7f9 fd11 	bl	8003344 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800992c:	4293      	cmp	r3, r2
 800992e:	d901      	bls.n	8009934 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e0be      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009934:	4b1c      	ldr	r3, [pc, #112]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	429a      	cmp	r2, r3
 8009944:	d1eb      	bne.n	800991e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d010      	beq.n	8009974 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	4b14      	ldr	r3, [pc, #80]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	429a      	cmp	r2, r3
 8009960:	d208      	bcs.n	8009974 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009962:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f023 020f 	bic.w	r2, r3, #15
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	490e      	ldr	r1, [pc, #56]	@ (80099a8 <HAL_RCC_ClockConfig+0x244>)
 8009970:	4313      	orrs	r3, r2
 8009972:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009974:	4b0b      	ldr	r3, [pc, #44]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 030f 	and.w	r3, r3, #15
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	429a      	cmp	r2, r3
 8009980:	d214      	bcs.n	80099ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009982:	4b08      	ldr	r3, [pc, #32]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f023 020f 	bic.w	r2, r3, #15
 800998a:	4906      	ldr	r1, [pc, #24]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	4313      	orrs	r3, r2
 8009990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009992:	4b04      	ldr	r3, [pc, #16]	@ (80099a4 <HAL_RCC_ClockConfig+0x240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	429a      	cmp	r2, r3
 800999e:	d005      	beq.n	80099ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e086      	b.n	8009ab2 <HAL_RCC_ClockConfig+0x34e>
 80099a4:	52002000 	.word	0x52002000
 80099a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d010      	beq.n	80099da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691a      	ldr	r2, [r3, #16]
 80099bc:	4b3f      	ldr	r3, [pc, #252]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d208      	bcs.n	80099da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099c8:	4b3c      	ldr	r3, [pc, #240]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	4939      	ldr	r1, [pc, #228]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0308 	and.w	r3, r3, #8
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d010      	beq.n	8009a08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	695a      	ldr	r2, [r3, #20]
 80099ea:	4b34      	ldr	r3, [pc, #208]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d208      	bcs.n	8009a08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099f6:	4b31      	ldr	r3, [pc, #196]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	492e      	ldr	r1, [pc, #184]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d010      	beq.n	8009a36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699a      	ldr	r2, [r3, #24]
 8009a18:	4b28      	ldr	r3, [pc, #160]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d208      	bcs.n	8009a36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a24:	4b25      	ldr	r3, [pc, #148]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a26:	69db      	ldr	r3, [r3, #28]
 8009a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	4922      	ldr	r1, [pc, #136]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d010      	beq.n	8009a64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	69da      	ldr	r2, [r3, #28]
 8009a46:	4b1d      	ldr	r3, [pc, #116]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d208      	bcs.n	8009a64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a52:	4b1a      	ldr	r3, [pc, #104]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	4917      	ldr	r1, [pc, #92]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a64:	f000 f834 	bl	8009ad0 <HAL_RCC_GetSysClockFreq>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	4b14      	ldr	r3, [pc, #80]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	f003 030f 	and.w	r3, r3, #15
 8009a74:	4912      	ldr	r1, [pc, #72]	@ (8009ac0 <HAL_RCC_ClockConfig+0x35c>)
 8009a76:	5ccb      	ldrb	r3, [r1, r3]
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a82:	4b0e      	ldr	r3, [pc, #56]	@ (8009abc <HAL_RCC_ClockConfig+0x358>)
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8009ac0 <HAL_RCC_ClockConfig+0x35c>)
 8009a8c:	5cd3      	ldrb	r3, [r2, r3]
 8009a8e:	f003 031f 	and.w	r3, r3, #31
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
 8009a98:	4a0a      	ldr	r2, [pc, #40]	@ (8009ac4 <HAL_RCC_ClockConfig+0x360>)
 8009a9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8009ac8 <HAL_RCC_ClockConfig+0x364>)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8009acc <HAL_RCC_ClockConfig+0x368>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f9 fc02 	bl	80032b0 <HAL_InitTick>
 8009aac:	4603      	mov	r3, r0
 8009aae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	58024400 	.word	0x58024400
 8009ac0:	08012074 	.word	0x08012074
 8009ac4:	24000030 	.word	0x24000030
 8009ac8:	2400002c 	.word	0x2400002c
 8009acc:	24000034 	.word	0x24000034

08009ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b089      	sub	sp, #36	@ 0x24
 8009ad4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ad6:	4bb3      	ldr	r3, [pc, #716]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ade:	2b18      	cmp	r3, #24
 8009ae0:	f200 8155 	bhi.w	8009d8e <HAL_RCC_GetSysClockFreq+0x2be>
 8009ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <HAL_RCC_GetSysClockFreq+0x1c>)
 8009ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aea:	bf00      	nop
 8009aec:	08009b51 	.word	0x08009b51
 8009af0:	08009d8f 	.word	0x08009d8f
 8009af4:	08009d8f 	.word	0x08009d8f
 8009af8:	08009d8f 	.word	0x08009d8f
 8009afc:	08009d8f 	.word	0x08009d8f
 8009b00:	08009d8f 	.word	0x08009d8f
 8009b04:	08009d8f 	.word	0x08009d8f
 8009b08:	08009d8f 	.word	0x08009d8f
 8009b0c:	08009b77 	.word	0x08009b77
 8009b10:	08009d8f 	.word	0x08009d8f
 8009b14:	08009d8f 	.word	0x08009d8f
 8009b18:	08009d8f 	.word	0x08009d8f
 8009b1c:	08009d8f 	.word	0x08009d8f
 8009b20:	08009d8f 	.word	0x08009d8f
 8009b24:	08009d8f 	.word	0x08009d8f
 8009b28:	08009d8f 	.word	0x08009d8f
 8009b2c:	08009b7d 	.word	0x08009b7d
 8009b30:	08009d8f 	.word	0x08009d8f
 8009b34:	08009d8f 	.word	0x08009d8f
 8009b38:	08009d8f 	.word	0x08009d8f
 8009b3c:	08009d8f 	.word	0x08009d8f
 8009b40:	08009d8f 	.word	0x08009d8f
 8009b44:	08009d8f 	.word	0x08009d8f
 8009b48:	08009d8f 	.word	0x08009d8f
 8009b4c:	08009b83 	.word	0x08009b83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b50:	4b94      	ldr	r3, [pc, #592]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d009      	beq.n	8009b70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b5c:	4b91      	ldr	r3, [pc, #580]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	08db      	lsrs	r3, r3, #3
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	4a90      	ldr	r2, [pc, #576]	@ (8009da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b68:	fa22 f303 	lsr.w	r3, r2, r3
 8009b6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009b6e:	e111      	b.n	8009d94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b70:	4b8d      	ldr	r3, [pc, #564]	@ (8009da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b72:	61bb      	str	r3, [r7, #24]
      break;
 8009b74:	e10e      	b.n	8009d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009b76:	4b8d      	ldr	r3, [pc, #564]	@ (8009dac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b78:	61bb      	str	r3, [r7, #24]
      break;
 8009b7a:	e10b      	b.n	8009d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8009db0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b7e:	61bb      	str	r3, [r7, #24]
      break;
 8009b80:	e108      	b.n	8009d94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b82:	4b88      	ldr	r3, [pc, #544]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b8c:	4b85      	ldr	r3, [pc, #532]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b90:	091b      	lsrs	r3, r3, #4
 8009b92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b96:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b98:	4b82      	ldr	r3, [pc, #520]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ba2:	4b80      	ldr	r3, [pc, #512]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ba6:	08db      	lsrs	r3, r3, #3
 8009ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	fb02 f303 	mul.w	r3, r2, r3
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 80e1 	beq.w	8009d88 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	f000 8083 	beq.w	8009cd4 <HAL_RCC_GetSysClockFreq+0x204>
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	f200 80a1 	bhi.w	8009d18 <HAL_RCC_GetSysClockFreq+0x248>
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <HAL_RCC_GetSysClockFreq+0x114>
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d056      	beq.n	8009c90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009be2:	e099      	b.n	8009d18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009be4:	4b6f      	ldr	r3, [pc, #444]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d02d      	beq.n	8009c4c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	08db      	lsrs	r3, r3, #3
 8009bf6:	f003 0303 	and.w	r3, r3, #3
 8009bfa:	4a6b      	ldr	r2, [pc, #428]	@ (8009da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8009c00:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	ee07 3a90 	vmov	s15, r3
 8009c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b62      	ldr	r3, [pc, #392]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c2e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009c4a:	e087      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c56:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009db8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5e:	4b51      	ldr	r3, [pc, #324]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c72:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c8e:	e065      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009dbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca2:	4b40      	ldr	r3, [pc, #256]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cb6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cd2:	e043      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009dc0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cfa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d16:	e021      	b.n	8009d5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009dbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d3e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009d5c:	4b11      	ldr	r3, [pc, #68]	@ (8009da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d60:	0a5b      	lsrs	r3, r3, #9
 8009d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d66:	3301      	adds	r3, #1
 8009d68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	ee07 3a90 	vmov	s15, r3
 8009d70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d80:	ee17 3a90 	vmov	r3, s15
 8009d84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009d86:	e005      	b.n	8009d94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	61bb      	str	r3, [r7, #24]
      break;
 8009d8c:	e002      	b.n	8009d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009d8e:	4b07      	ldr	r3, [pc, #28]	@ (8009dac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d90:	61bb      	str	r3, [r7, #24]
      break;
 8009d92:	bf00      	nop
  }

  return sysclockfreq;
 8009d94:	69bb      	ldr	r3, [r7, #24]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3724      	adds	r7, #36	@ 0x24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	58024400 	.word	0x58024400
 8009da8:	03d09000 	.word	0x03d09000
 8009dac:	003d0900 	.word	0x003d0900
 8009db0:	017d7840 	.word	0x017d7840
 8009db4:	46000000 	.word	0x46000000
 8009db8:	4c742400 	.word	0x4c742400
 8009dbc:	4a742400 	.word	0x4a742400
 8009dc0:	4bbebc20 	.word	0x4bbebc20

08009dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009dca:	f7ff fe81 	bl	8009ad0 <HAL_RCC_GetSysClockFreq>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	4b10      	ldr	r3, [pc, #64]	@ (8009e14 <HAL_RCC_GetHCLKFreq+0x50>)
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	0a1b      	lsrs	r3, r3, #8
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	490f      	ldr	r1, [pc, #60]	@ (8009e18 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ddc:	5ccb      	ldrb	r3, [r1, r3]
 8009dde:	f003 031f 	and.w	r3, r3, #31
 8009de2:	fa22 f303 	lsr.w	r3, r2, r3
 8009de6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009de8:	4b0a      	ldr	r3, [pc, #40]	@ (8009e14 <HAL_RCC_GetHCLKFreq+0x50>)
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	f003 030f 	and.w	r3, r3, #15
 8009df0:	4a09      	ldr	r2, [pc, #36]	@ (8009e18 <HAL_RCC_GetHCLKFreq+0x54>)
 8009df2:	5cd3      	ldrb	r3, [r2, r3]
 8009df4:	f003 031f 	and.w	r3, r3, #31
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfe:	4a07      	ldr	r2, [pc, #28]	@ (8009e1c <HAL_RCC_GetHCLKFreq+0x58>)
 8009e00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e02:	4a07      	ldr	r2, [pc, #28]	@ (8009e20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009e08:	4b04      	ldr	r3, [pc, #16]	@ (8009e1c <HAL_RCC_GetHCLKFreq+0x58>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	58024400 	.word	0x58024400
 8009e18:	08012074 	.word	0x08012074
 8009e1c:	24000030 	.word	0x24000030
 8009e20:	2400002c 	.word	0x2400002c

08009e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009e28:	f7ff ffcc 	bl	8009dc4 <HAL_RCC_GetHCLKFreq>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	4b06      	ldr	r3, [pc, #24]	@ (8009e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	091b      	lsrs	r3, r3, #4
 8009e34:	f003 0307 	and.w	r3, r3, #7
 8009e38:	4904      	ldr	r1, [pc, #16]	@ (8009e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e3a:	5ccb      	ldrb	r3, [r1, r3]
 8009e3c:	f003 031f 	and.w	r3, r3, #31
 8009e40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	08012074 	.word	0x08012074

08009e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e54:	f7ff ffb6 	bl	8009dc4 <HAL_RCC_GetHCLKFreq>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	4b06      	ldr	r3, [pc, #24]	@ (8009e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	0a1b      	lsrs	r3, r3, #8
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	4904      	ldr	r1, [pc, #16]	@ (8009e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e66:	5ccb      	ldrb	r3, [r1, r3]
 8009e68:	f003 031f 	and.w	r3, r3, #31
 8009e6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	58024400 	.word	0x58024400
 8009e78:	08012074 	.word	0x08012074

08009e7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e80:	b0ca      	sub	sp, #296	@ 0x128
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009ea0:	2500      	movs	r5, #0
 8009ea2:	ea54 0305 	orrs.w	r3, r4, r5
 8009ea6:	d049      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009eb2:	d02f      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009eb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009eb8:	d828      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ebe:	d01a      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ec4:	d822      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ece:	d007      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ed0:	e01c      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed2:	4bb8      	ldr	r3, [pc, #736]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed6:	4ab7      	ldr	r2, [pc, #732]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ede:	e01a      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	2102      	movs	r1, #2
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 fb61 	bl	800c5b0 <RCCEx_PLL2_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ef4:	e00f      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efa:	3328      	adds	r3, #40	@ 0x28
 8009efc:	2102      	movs	r1, #2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f002 fc08 	bl	800c714 <RCCEx_PLL3_Config>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f0a:	e004      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f12:	e000      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f1e:	4ba5      	ldr	r3, [pc, #660]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f2c:	4aa1      	ldr	r2, [pc, #644]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f2e:	430b      	orrs	r3, r1
 8009f30:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f32:	e003      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009f48:	f04f 0900 	mov.w	r9, #0
 8009f4c:	ea58 0309 	orrs.w	r3, r8, r9
 8009f50:	d047      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d82a      	bhi.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f62:	bf00      	nop
 8009f64:	08009f79 	.word	0x08009f79
 8009f68:	08009f87 	.word	0x08009f87
 8009f6c:	08009f9d 	.word	0x08009f9d
 8009f70:	08009fbb 	.word	0x08009fbb
 8009f74:	08009fbb 	.word	0x08009fbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f78:	4b8e      	ldr	r3, [pc, #568]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7c:	4a8d      	ldr	r2, [pc, #564]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f84:	e01a      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f002 fb0e 	bl	800c5b0 <RCCEx_PLL2_Config>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f9a:	e00f      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa0:	3328      	adds	r3, #40	@ 0x28
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f002 fbb5 	bl	800c714 <RCCEx_PLL3_Config>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fb0:	e004      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fb8:	e000      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009fc4:	4b7b      	ldr	r3, [pc, #492]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc8:	f023 0107 	bic.w	r1, r3, #7
 8009fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fd2:	4a78      	ldr	r2, [pc, #480]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fd4:	430b      	orrs	r3, r1
 8009fd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009fd8:	e003      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009fee:	f04f 0b00 	mov.w	fp, #0
 8009ff2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ff6:	d04c      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a002:	d030      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a008:	d829      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a00a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a00c:	d02d      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a00e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a010:	d825      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a012:	2b80      	cmp	r3, #128	@ 0x80
 800a014:	d018      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a016:	2b80      	cmp	r3, #128	@ 0x80
 800a018:	d821      	bhi.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a01e:	2b40      	cmp	r3, #64	@ 0x40
 800a020:	d007      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a022:	e01c      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a024:	4b63      	ldr	r3, [pc, #396]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a028:	4a62      	ldr	r2, [pc, #392]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a02a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a02e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a030:	e01c      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a036:	3308      	adds	r3, #8
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f002 fab8 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a040:	4603      	mov	r3, r0
 800a042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a046:	e011      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04c:	3328      	adds	r3, #40	@ 0x28
 800a04e:	2100      	movs	r1, #0
 800a050:	4618      	mov	r0, r3
 800a052:	f002 fb5f 	bl	800c714 <RCCEx_PLL3_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a05c:	e006      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a064:	e002      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a066:	bf00      	nop
 800a068:	e000      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a06a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a06c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a074:	4b4f      	ldr	r3, [pc, #316]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a078:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a082:	4a4c      	ldr	r2, [pc, #304]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a084:	430b      	orrs	r3, r1
 800a086:	6513      	str	r3, [r2, #80]	@ 0x50
 800a088:	e003      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a08e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a09e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a0a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	d053      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a0ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0be:	d035      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a0c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0c4:	d82e      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a0c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0ca:	d031      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a0cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0d0:	d828      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a0d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0d6:	d01a      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a0d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0dc:	d822      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a0e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0e6:	d007      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a0e8:	e01c      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ea:	4b32      	ldr	r3, [pc, #200]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ee:	4a31      	ldr	r2, [pc, #196]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0f6:	e01c      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	2100      	movs	r1, #0
 800a100:	4618      	mov	r0, r3
 800a102:	f002 fa55 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a106:	4603      	mov	r3, r0
 800a108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a10c:	e011      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a112:	3328      	adds	r3, #40	@ 0x28
 800a114:	2100      	movs	r1, #0
 800a116:	4618      	mov	r0, r3
 800a118:	f002 fafc 	bl	800c714 <RCCEx_PLL3_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a122:	e006      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a12a:	e002      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a12c:	bf00      	nop
 800a12e:	e000      	b.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a130:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10b      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a13a:	4b1e      	ldr	r3, [pc, #120]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a13c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a13e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a14a:	4a1a      	ldr	r2, [pc, #104]	@ (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a14c:	430b      	orrs	r3, r1
 800a14e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a150:	e003      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a166:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a16a:	2300      	movs	r3, #0
 800a16c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a170:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d056      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a182:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a186:	d038      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a188:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a18c:	d831      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a18e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a192:	d034      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a194:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a198:	d82b      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a19a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a19e:	d01d      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a1a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1a4:	d825      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d006      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a1aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1ae:	d00a      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a1b0:	e01f      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a1b2:	bf00      	nop
 800a1b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b8:	4ba2      	ldr	r3, [pc, #648]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1bc:	4aa1      	ldr	r2, [pc, #644]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1c4:	e01c      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f002 f9ee 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a1da:	e011      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e0:	3328      	adds	r3, #40	@ 0x28
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f002 fa95 	bl	800c714 <RCCEx_PLL3_Config>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1f0:	e006      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1f8:	e002      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1fa:	bf00      	nop
 800a1fc:	e000      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10b      	bne.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a208:	4b8e      	ldr	r3, [pc, #568]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a20a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a20c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a214:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a218:	4a8a      	ldr	r2, [pc, #552]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a21a:	430b      	orrs	r3, r1
 800a21c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a21e:	e003      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a234:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a238:	2300      	movs	r3, #0
 800a23a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a23e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a242:	460b      	mov	r3, r1
 800a244:	4313      	orrs	r3, r2
 800a246:	d03a      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a24e:	2b30      	cmp	r3, #48	@ 0x30
 800a250:	d01f      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a252:	2b30      	cmp	r3, #48	@ 0x30
 800a254:	d819      	bhi.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a256:	2b20      	cmp	r3, #32
 800a258:	d00c      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a25a:	2b20      	cmp	r3, #32
 800a25c:	d815      	bhi.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d019      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a262:	2b10      	cmp	r3, #16
 800a264:	d111      	bne.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a266:	4b77      	ldr	r3, [pc, #476]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a26a:	4a76      	ldr	r2, [pc, #472]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a26c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a270:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a272:	e011      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a278:	3308      	adds	r3, #8
 800a27a:	2102      	movs	r1, #2
 800a27c:	4618      	mov	r0, r3
 800a27e:	f002 f997 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a282:	4603      	mov	r3, r0
 800a284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a288:	e006      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a290:	e002      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a292:	bf00      	nop
 800a294:	e000      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a296:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a2a0:	4b68      	ldr	r3, [pc, #416]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2ae:	4a65      	ldr	r2, [pc, #404]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a2b4:	e003      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a2ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a2d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	d051      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2e8:	d035      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a2ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2ee:	d82e      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2f4:	d031      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a2f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2fa:	d828      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a300:	d01a      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a306:	d822      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a30c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a310:	d007      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a312:	e01c      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a314:	4b4b      	ldr	r3, [pc, #300]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a318:	4a4a      	ldr	r2, [pc, #296]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a31a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a31e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a320:	e01c      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a326:	3308      	adds	r3, #8
 800a328:	2100      	movs	r1, #0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f002 f940 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a336:	e011      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a33c:	3328      	adds	r3, #40	@ 0x28
 800a33e:	2100      	movs	r1, #0
 800a340:	4618      	mov	r0, r3
 800a342:	f002 f9e7 	bl	800c714 <RCCEx_PLL3_Config>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a34c:	e006      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a354:	e002      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a356:	bf00      	nop
 800a358:	e000      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a35c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10a      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a364:	4b37      	ldr	r3, [pc, #220]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a368:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a372:	4a34      	ldr	r2, [pc, #208]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a374:	430b      	orrs	r3, r1
 800a376:	6513      	str	r3, [r2, #80]	@ 0x50
 800a378:	e003      	b.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a37e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a38e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a392:	2300      	movs	r3, #0
 800a394:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a398:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a39c:	460b      	mov	r3, r1
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	d056      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3ac:	d033      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a3ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3b2:	d82c      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a3b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3b8:	d02f      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a3ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3be:	d826      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a3c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3c4:	d02b      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a3c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3ca:	d820      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a3cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3d0:	d012      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a3d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3d6:	d81a      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d022      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a3dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3e0:	d115      	bne.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f002 f8e0 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3f6:	e015      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3fc:	3328      	adds	r3, #40	@ 0x28
 800a3fe:	2101      	movs	r1, #1
 800a400:	4618      	mov	r0, r3
 800a402:	f002 f987 	bl	800c714 <RCCEx_PLL3_Config>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a40c:	e00a      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a414:	e006      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a416:	bf00      	nop
 800a418:	e004      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a41a:	bf00      	nop
 800a41c:	e002      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a41e:	bf00      	nop
 800a420:	e000      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a422:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10d      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a430:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a43a:	4a02      	ldr	r2, [pc, #8]	@ (800a444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a43c:	430b      	orrs	r3, r1
 800a43e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a440:	e006      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a442:	bf00      	nop
 800a444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a44c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a45c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a460:	2300      	movs	r3, #0
 800a462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a466:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	d055      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a474:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a47c:	d033      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a47e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a482:	d82c      	bhi.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a488:	d02f      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a48a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a48e:	d826      	bhi.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a490:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a494:	d02b      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a496:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a49a:	d820      	bhi.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a49c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a0:	d012      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a4a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a6:	d81a      	bhi.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d022      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a4ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4b0:	d115      	bne.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f002 f878 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a4c6:	e015      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4cc:	3328      	adds	r3, #40	@ 0x28
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f002 f91f 	bl	800c714 <RCCEx_PLL3_Config>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a4dc:	e00a      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4e4:	e006      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4e6:	bf00      	nop
 800a4e8:	e004      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4ea:	bf00      	nop
 800a4ec:	e002      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4ee:	bf00      	nop
 800a4f0:	e000      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10b      	bne.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4fc:	4ba3      	ldr	r3, [pc, #652]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a500:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a50c:	4a9f      	ldr	r2, [pc, #636]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a50e:	430b      	orrs	r3, r1
 800a510:	6593      	str	r3, [r2, #88]	@ 0x58
 800a512:	e003      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a52c:	2300      	movs	r3, #0
 800a52e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a536:	460b      	mov	r3, r1
 800a538:	4313      	orrs	r3, r2
 800a53a:	d037      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a546:	d00e      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a54c:	d816      	bhi.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d018      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a556:	d111      	bne.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a558:	4b8c      	ldr	r3, [pc, #560]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	4a8b      	ldr	r2, [pc, #556]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a55e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a564:	e00f      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a56a:	3308      	adds	r3, #8
 800a56c:	2101      	movs	r1, #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f002 f81e 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a57a:	e004      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a582:	e000      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a584:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a58e:	4b7f      	ldr	r3, [pc, #508]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a592:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a59c:	4a7b      	ldr	r2, [pc, #492]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	6513      	str	r3, [r2, #80]	@ 0x50
 800a5a2:	e003      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a5b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a5c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	d039      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d81c      	bhi.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5dc:	0800a619 	.word	0x0800a619
 800a5e0:	0800a5ed 	.word	0x0800a5ed
 800a5e4:	0800a5fb 	.word	0x0800a5fb
 800a5e8:	0800a619 	.word	0x0800a619
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5ec:	4b67      	ldr	r3, [pc, #412]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f0:	4a66      	ldr	r2, [pc, #408]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5f8:	e00f      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5fe:	3308      	adds	r3, #8
 800a600:	2102      	movs	r1, #2
 800a602:	4618      	mov	r0, r3
 800a604:	f001 ffd4 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a608:	4603      	mov	r3, r0
 800a60a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a60e:	e004      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a616:	e000      	b.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a61a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10a      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a622:	4b5a      	ldr	r3, [pc, #360]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a626:	f023 0103 	bic.w	r1, r3, #3
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a630:	4a56      	ldr	r2, [pc, #344]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a632:	430b      	orrs	r3, r1
 800a634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a636:	e003      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a63c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a64c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a650:	2300      	movs	r3, #0
 800a652:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a656:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a65a:	460b      	mov	r3, r1
 800a65c:	4313      	orrs	r3, r2
 800a65e:	f000 809f 	beq.w	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a662:	4b4b      	ldr	r3, [pc, #300]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a4a      	ldr	r2, [pc, #296]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a66c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a66e:	f7f8 fe69 	bl	8003344 <HAL_GetTick>
 800a672:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a676:	e00b      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a678:	f7f8 fe64 	bl	8003344 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b64      	cmp	r3, #100	@ 0x64
 800a686:	d903      	bls.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a68e:	e005      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a690:	4b3f      	ldr	r3, [pc, #252]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0ed      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a69c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d179      	bne.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a6a4:	4b39      	ldr	r3, [pc, #228]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a6b0:	4053      	eors	r3, r2
 800a6b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d015      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6ba:	4b34      	ldr	r3, [pc, #208]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6c6:	4b31      	ldr	r3, [pc, #196]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6ca:	4a30      	ldr	r2, [pc, #192]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6d2:	4b2e      	ldr	r3, [pc, #184]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6d6:	4a2d      	ldr	r2, [pc, #180]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a6de:	4a2b      	ldr	r2, [pc, #172]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a6e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6f2:	d118      	bne.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6f4:	f7f8 fe26 	bl	8003344 <HAL_GetTick>
 800a6f8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6fc:	e00d      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6fe:	f7f8 fe21 	bl	8003344 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a708:	1ad2      	subs	r2, r2, r3
 800a70a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a70e:	429a      	cmp	r2, r3
 800a710:	d903      	bls.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a718:	e005      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a71a:	4b1c      	ldr	r3, [pc, #112]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0eb      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d129      	bne.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a732:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a73a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a73e:	d10e      	bne.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a740:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a74c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a750:	091a      	lsrs	r2, r3, #4
 800a752:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a754:	4013      	ands	r3, r2
 800a756:	4a0d      	ldr	r2, [pc, #52]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a758:	430b      	orrs	r3, r1
 800a75a:	6113      	str	r3, [r2, #16]
 800a75c:	e005      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a75e:	4b0b      	ldr	r3, [pc, #44]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	4a0a      	ldr	r2, [pc, #40]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a764:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a768:	6113      	str	r3, [r2, #16]
 800a76a:	4b08      	ldr	r3, [pc, #32]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a76c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a77a:	4a04      	ldr	r2, [pc, #16]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a77c:	430b      	orrs	r3, r1
 800a77e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a780:	e00e      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a78a:	e009      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a78c:	58024400 	.word	0x58024400
 800a790:	58024800 	.word	0x58024800
 800a794:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a79c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f002 0301 	and.w	r3, r2, #1
 800a7ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	f000 8089 	beq.w	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7c8:	2b28      	cmp	r3, #40	@ 0x28
 800a7ca:	d86b      	bhi.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a7cc:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d2:	bf00      	nop
 800a7d4:	0800a8ad 	.word	0x0800a8ad
 800a7d8:	0800a8a5 	.word	0x0800a8a5
 800a7dc:	0800a8a5 	.word	0x0800a8a5
 800a7e0:	0800a8a5 	.word	0x0800a8a5
 800a7e4:	0800a8a5 	.word	0x0800a8a5
 800a7e8:	0800a8a5 	.word	0x0800a8a5
 800a7ec:	0800a8a5 	.word	0x0800a8a5
 800a7f0:	0800a8a5 	.word	0x0800a8a5
 800a7f4:	0800a879 	.word	0x0800a879
 800a7f8:	0800a8a5 	.word	0x0800a8a5
 800a7fc:	0800a8a5 	.word	0x0800a8a5
 800a800:	0800a8a5 	.word	0x0800a8a5
 800a804:	0800a8a5 	.word	0x0800a8a5
 800a808:	0800a8a5 	.word	0x0800a8a5
 800a80c:	0800a8a5 	.word	0x0800a8a5
 800a810:	0800a8a5 	.word	0x0800a8a5
 800a814:	0800a88f 	.word	0x0800a88f
 800a818:	0800a8a5 	.word	0x0800a8a5
 800a81c:	0800a8a5 	.word	0x0800a8a5
 800a820:	0800a8a5 	.word	0x0800a8a5
 800a824:	0800a8a5 	.word	0x0800a8a5
 800a828:	0800a8a5 	.word	0x0800a8a5
 800a82c:	0800a8a5 	.word	0x0800a8a5
 800a830:	0800a8a5 	.word	0x0800a8a5
 800a834:	0800a8ad 	.word	0x0800a8ad
 800a838:	0800a8a5 	.word	0x0800a8a5
 800a83c:	0800a8a5 	.word	0x0800a8a5
 800a840:	0800a8a5 	.word	0x0800a8a5
 800a844:	0800a8a5 	.word	0x0800a8a5
 800a848:	0800a8a5 	.word	0x0800a8a5
 800a84c:	0800a8a5 	.word	0x0800a8a5
 800a850:	0800a8a5 	.word	0x0800a8a5
 800a854:	0800a8ad 	.word	0x0800a8ad
 800a858:	0800a8a5 	.word	0x0800a8a5
 800a85c:	0800a8a5 	.word	0x0800a8a5
 800a860:	0800a8a5 	.word	0x0800a8a5
 800a864:	0800a8a5 	.word	0x0800a8a5
 800a868:	0800a8a5 	.word	0x0800a8a5
 800a86c:	0800a8a5 	.word	0x0800a8a5
 800a870:	0800a8a5 	.word	0x0800a8a5
 800a874:	0800a8ad 	.word	0x0800a8ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a87c:	3308      	adds	r3, #8
 800a87e:	2101      	movs	r1, #1
 800a880:	4618      	mov	r0, r3
 800a882:	f001 fe95 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a886:	4603      	mov	r3, r0
 800a888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a88c:	e00f      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a892:	3328      	adds	r3, #40	@ 0x28
 800a894:	2101      	movs	r1, #1
 800a896:	4618      	mov	r0, r3
 800a898:	f001 ff3c 	bl	800c714 <RCCEx_PLL3_Config>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a8a2:	e004      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8aa:	e000      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a8ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a8b6:	4bbf      	ldr	r3, [pc, #764]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a8be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8c4:	4abb      	ldr	r2, [pc, #748]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8ca:	e003      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f002 0302 	and.w	r3, r2, #2
 800a8e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a8ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	d041      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8fa:	2b05      	cmp	r3, #5
 800a8fc:	d824      	bhi.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a904 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a951 	.word	0x0800a951
 800a908:	0800a91d 	.word	0x0800a91d
 800a90c:	0800a933 	.word	0x0800a933
 800a910:	0800a951 	.word	0x0800a951
 800a914:	0800a951 	.word	0x0800a951
 800a918:	0800a951 	.word	0x0800a951
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a920:	3308      	adds	r3, #8
 800a922:	2101      	movs	r1, #1
 800a924:	4618      	mov	r0, r3
 800a926:	f001 fe43 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a930:	e00f      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a936:	3328      	adds	r3, #40	@ 0x28
 800a938:	2101      	movs	r1, #1
 800a93a:	4618      	mov	r0, r3
 800a93c:	f001 feea 	bl	800c714 <RCCEx_PLL3_Config>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a946:	e004      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a94e:	e000      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a950:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a95a:	4b96      	ldr	r3, [pc, #600]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a95e:	f023 0107 	bic.w	r1, r3, #7
 800a962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a968:	4a92      	ldr	r2, [pc, #584]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a96a:	430b      	orrs	r3, r1
 800a96c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a96e:	e003      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a974:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f002 0304 	and.w	r3, r2, #4
 800a984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a988:	2300      	movs	r3, #0
 800a98a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a98e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a992:	460b      	mov	r3, r1
 800a994:	4313      	orrs	r3, r2
 800a996:	d044      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a99c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9a0:	2b05      	cmp	r3, #5
 800a9a2:	d825      	bhi.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a9a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a9ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9aa:	bf00      	nop
 800a9ac:	0800a9f9 	.word	0x0800a9f9
 800a9b0:	0800a9c5 	.word	0x0800a9c5
 800a9b4:	0800a9db 	.word	0x0800a9db
 800a9b8:	0800a9f9 	.word	0x0800a9f9
 800a9bc:	0800a9f9 	.word	0x0800a9f9
 800a9c0:	0800a9f9 	.word	0x0800a9f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 fdef 	bl	800c5b0 <RCCEx_PLL2_Config>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9d8:	e00f      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9de:	3328      	adds	r3, #40	@ 0x28
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fe96 	bl	800c714 <RCCEx_PLL3_Config>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9ee:	e004      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a9f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10b      	bne.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa02:	4b6c      	ldr	r3, [pc, #432]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa06:	f023 0107 	bic.w	r1, r3, #7
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa12:	4a68      	ldr	r2, [pc, #416]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa18:	e003      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f002 0320 	and.w	r3, r2, #32
 800aa2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aa32:	2300      	movs	r3, #0
 800aa34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	d055      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800aa42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa4e:	d033      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800aa50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa54:	d82c      	bhi.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa5a:	d02f      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800aa5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa60:	d826      	bhi.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa66:	d02b      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800aa68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa6c:	d820      	bhi.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa72:	d012      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800aa74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa78:	d81a      	bhi.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d022      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800aa7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa82:	d115      	bne.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa88:	3308      	adds	r3, #8
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f001 fd8f 	bl	800c5b0 <RCCEx_PLL2_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa98:	e015      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9e:	3328      	adds	r3, #40	@ 0x28
 800aaa0:	2102      	movs	r1, #2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f001 fe36 	bl	800c714 <RCCEx_PLL3_Config>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aaae:	e00a      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aab6:	e006      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aab8:	bf00      	nop
 800aaba:	e004      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aabc:	bf00      	nop
 800aabe:	e002      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aac0:	bf00      	nop
 800aac2:	e000      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10b      	bne.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aace:	4b39      	ldr	r3, [pc, #228]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aade:	4a35      	ldr	r2, [pc, #212]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aae0:	430b      	orrs	r3, r1
 800aae2:	6553      	str	r3, [r2, #84]	@ 0x54
 800aae4:	e003      	b.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aafa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800aafe:	2300      	movs	r3, #0
 800ab00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ab04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	d058      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ab0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab16:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ab1a:	d033      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ab1c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ab20:	d82c      	bhi.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab26:	d02f      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ab28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab2c:	d826      	bhi.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab32:	d02b      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ab34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab38:	d820      	bhi.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab3e:	d012      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ab40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab44:	d81a      	bhi.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d022      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ab4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab4e:	d115      	bne.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab54:	3308      	adds	r3, #8
 800ab56:	2100      	movs	r1, #0
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f001 fd29 	bl	800c5b0 <RCCEx_PLL2_Config>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab64:	e015      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab6a:	3328      	adds	r3, #40	@ 0x28
 800ab6c:	2102      	movs	r1, #2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f001 fdd0 	bl	800c714 <RCCEx_PLL3_Config>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab7a:	e00a      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab82:	e006      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab84:	bf00      	nop
 800ab86:	e004      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab88:	bf00      	nop
 800ab8a:	e002      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab8c:	bf00      	nop
 800ab8e:	e000      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10e      	bne.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab9a:	4b06      	ldr	r3, [pc, #24]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab9e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abaa:	4a02      	ldr	r2, [pc, #8]	@ (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800abac:	430b      	orrs	r3, r1
 800abae:	6593      	str	r3, [r2, #88]	@ 0x58
 800abb0:	e006      	b.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800abb2:	bf00      	nop
 800abb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800abc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800abcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abd0:	2300      	movs	r3, #0
 800abd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800abd6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800abda:	460b      	mov	r3, r1
 800abdc:	4313      	orrs	r3, r2
 800abde:	d055      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800abe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abe4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abe8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800abec:	d033      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800abee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800abf2:	d82c      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abf8:	d02f      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800abfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abfe:	d826      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ac00:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ac04:	d02b      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ac06:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ac0a:	d820      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ac0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac10:	d012      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ac12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac16:	d81a      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d022      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ac1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac20:	d115      	bne.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac26:	3308      	adds	r3, #8
 800ac28:	2100      	movs	r1, #0
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 fcc0 	bl	800c5b0 <RCCEx_PLL2_Config>
 800ac30:	4603      	mov	r3, r0
 800ac32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac36:	e015      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3c:	3328      	adds	r3, #40	@ 0x28
 800ac3e:	2102      	movs	r1, #2
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 fd67 	bl	800c714 <RCCEx_PLL3_Config>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac4c:	e00a      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac54:	e006      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac56:	bf00      	nop
 800ac58:	e004      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac5a:	bf00      	nop
 800ac5c:	e002      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac5e:	bf00      	nop
 800ac60:	e000      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10b      	bne.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac6c:	4ba1      	ldr	r3, [pc, #644]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac70:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ac74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac7c:	4a9d      	ldr	r2, [pc, #628]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac82:	e003      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ac8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f002 0308 	and.w	r3, r2, #8
 800ac98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aca2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aca6:	460b      	mov	r3, r1
 800aca8:	4313      	orrs	r3, r2
 800acaa:	d01e      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800acac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acb8:	d10c      	bne.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acbe:	3328      	adds	r3, #40	@ 0x28
 800acc0:	2102      	movs	r1, #2
 800acc2:	4618      	mov	r0, r3
 800acc4:	f001 fd26 	bl	800c714 <RCCEx_PLL3_Config>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800acd4:	4b87      	ldr	r3, [pc, #540]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ace4:	4a83      	ldr	r2, [pc, #524]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ace6:	430b      	orrs	r3, r1
 800ace8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	f002 0310 	and.w	r3, r2, #16
 800acf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800acfa:	2300      	movs	r3, #0
 800acfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ad00:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ad04:	460b      	mov	r3, r1
 800ad06:	4313      	orrs	r3, r2
 800ad08:	d01e      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ad0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad16:	d10c      	bne.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad1c:	3328      	adds	r3, #40	@ 0x28
 800ad1e:	2102      	movs	r1, #2
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 fcf7 	bl	800c714 <RCCEx_PLL3_Config>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad32:	4b70      	ldr	r3, [pc, #448]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ad3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad42:	4a6c      	ldr	r2, [pc, #432]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad44:	430b      	orrs	r3, r1
 800ad46:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ad54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad5e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ad62:	460b      	mov	r3, r1
 800ad64:	4313      	orrs	r3, r2
 800ad66:	d03e      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ad68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad74:	d022      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ad76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad7a:	d81b      	bhi.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ad80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad84:	d00b      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ad86:	e015      	b.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	2100      	movs	r1, #0
 800ad90:	4618      	mov	r0, r3
 800ad92:	f001 fc0d 	bl	800c5b0 <RCCEx_PLL2_Config>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad9c:	e00f      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada2:	3328      	adds	r3, #40	@ 0x28
 800ada4:	2102      	movs	r1, #2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 fcb4 	bl	800c714 <RCCEx_PLL3_Config>
 800adac:	4603      	mov	r3, r0
 800adae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800adb2:	e004      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adba:	e000      	b.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800adbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10b      	bne.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800adc6:	4b4b      	ldr	r3, [pc, #300]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800adce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800add6:	4a47      	ldr	r2, [pc, #284]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800add8:	430b      	orrs	r3, r1
 800adda:	6593      	str	r3, [r2, #88]	@ 0x58
 800addc:	e003      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ade2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ade6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800adf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800adf4:	2300      	movs	r3, #0
 800adf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800adf8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800adfc:	460b      	mov	r3, r1
 800adfe:	4313      	orrs	r3, r2
 800ae00:	d03b      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ae02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae0e:	d01f      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ae10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae14:	d818      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ae16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae1a:	d003      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ae1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae20:	d007      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ae22:	e011      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae24:	4b33      	ldr	r3, [pc, #204]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae28:	4a32      	ldr	r2, [pc, #200]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ae30:	e00f      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae36:	3328      	adds	r3, #40	@ 0x28
 800ae38:	2101      	movs	r1, #1
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 fc6a 	bl	800c714 <RCCEx_PLL3_Config>
 800ae40:	4603      	mov	r3, r0
 800ae42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ae46:	e004      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae4e:	e000      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ae50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10b      	bne.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae5a:	4b26      	ldr	r3, [pc, #152]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ae62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae6a:	4a22      	ldr	r2, [pc, #136]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae70:	e003      	b.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ae86:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae88:	2300      	movs	r3, #0
 800ae8a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ae90:	460b      	mov	r3, r1
 800ae92:	4313      	orrs	r3, r2
 800ae94:	d034      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aea4:	d007      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aea6:	e011      	b.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea8:	4b12      	ldr	r3, [pc, #72]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aeaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeac:	4a11      	ldr	r2, [pc, #68]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aeae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aeb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aeb4:	e00e      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeba:	3308      	adds	r3, #8
 800aebc:	2102      	movs	r1, #2
 800aebe:	4618      	mov	r0, r3
 800aec0:	f001 fb76 	bl	800c5b0 <RCCEx_PLL2_Config>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aeca:	e003      	b.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10d      	bne.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aedc:	4b05      	ldr	r3, [pc, #20]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aee0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeea:	4a02      	ldr	r2, [pc, #8]	@ (800aef4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aeec:	430b      	orrs	r3, r1
 800aeee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aef0:	e006      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aef2:	bf00      	nop
 800aef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aefc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800af00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800af0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af0e:	2300      	movs	r3, #0
 800af10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800af16:	460b      	mov	r3, r1
 800af18:	4313      	orrs	r3, r2
 800af1a:	d00c      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800af1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af20:	3328      	adds	r3, #40	@ 0x28
 800af22:	2102      	movs	r1, #2
 800af24:	4618      	mov	r0, r3
 800af26:	f001 fbf5 	bl	800c714 <RCCEx_PLL3_Config>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800af36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800af42:	663b      	str	r3, [r7, #96]	@ 0x60
 800af44:	2300      	movs	r3, #0
 800af46:	667b      	str	r3, [r7, #100]	@ 0x64
 800af48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800af4c:	460b      	mov	r3, r1
 800af4e:	4313      	orrs	r3, r2
 800af50:	d038      	beq.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af5e:	d018      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800af60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af64:	d811      	bhi.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af6a:	d014      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800af6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af70:	d80b      	bhi.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af72:	2b00      	cmp	r3, #0
 800af74:	d011      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800af76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af7a:	d106      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af7c:	4bc3      	ldr	r3, [pc, #780]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af80:	4ac2      	ldr	r2, [pc, #776]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800af88:	e008      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800af90:	e004      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af92:	bf00      	nop
 800af94:	e002      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af96:	bf00      	nop
 800af98:	e000      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800afa4:	4bb9      	ldr	r3, [pc, #740]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afa8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800afac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afb4:	4ab5      	ldr	r2, [pc, #724]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afb6:	430b      	orrs	r3, r1
 800afb8:	6553      	str	r3, [r2, #84]	@ 0x54
 800afba:	e003      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800afc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800afd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afd2:	2300      	movs	r3, #0
 800afd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afd6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800afda:	460b      	mov	r3, r1
 800afdc:	4313      	orrs	r3, r2
 800afde:	d009      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800afe0:	4baa      	ldr	r3, [pc, #680]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afe4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800afe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afee:	4aa7      	ldr	r2, [pc, #668]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aff0:	430b      	orrs	r3, r1
 800aff2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b000:	653b      	str	r3, [r7, #80]	@ 0x50
 800b002:	2300      	movs	r3, #0
 800b004:	657b      	str	r3, [r7, #84]	@ 0x54
 800b006:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b00a:	460b      	mov	r3, r1
 800b00c:	4313      	orrs	r3, r2
 800b00e:	d00a      	beq.n	800b026 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b010:	4b9e      	ldr	r3, [pc, #632]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800b018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b01c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b020:	4a9a      	ldr	r2, [pc, #616]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b022:	430b      	orrs	r3, r1
 800b024:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b032:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b034:	2300      	movs	r3, #0
 800b036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b038:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b03c:	460b      	mov	r3, r1
 800b03e:	4313      	orrs	r3, r2
 800b040:	d009      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b042:	4b92      	ldr	r3, [pc, #584]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b046:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b04e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b050:	4a8e      	ldr	r2, [pc, #568]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b052:	430b      	orrs	r3, r1
 800b054:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b062:	643b      	str	r3, [r7, #64]	@ 0x40
 800b064:	2300      	movs	r3, #0
 800b066:	647b      	str	r3, [r7, #68]	@ 0x44
 800b068:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b06c:	460b      	mov	r3, r1
 800b06e:	4313      	orrs	r3, r2
 800b070:	d00e      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b072:	4b86      	ldr	r3, [pc, #536]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	4a85      	ldr	r2, [pc, #532]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b078:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b07c:	6113      	str	r3, [r2, #16]
 800b07e:	4b83      	ldr	r3, [pc, #524]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b080:	6919      	ldr	r1, [r3, #16]
 800b082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b086:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b08a:	4a80      	ldr	r2, [pc, #512]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b08c:	430b      	orrs	r3, r1
 800b08e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b09c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b09e:	2300      	movs	r3, #0
 800b0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	d009      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b0ac:	4b77      	ldr	r3, [pc, #476]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ba:	4a74      	ldr	r2, [pc, #464]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b0cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	d00a      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b0dc:	4b6b      	ldr	r3, [pc, #428]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0ec:	4a67      	ldr	r2, [pc, #412]	@ (800b28c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0ee:	430b      	orrs	r3, r1
 800b0f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b104:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b108:	460b      	mov	r3, r1
 800b10a:	4313      	orrs	r3, r2
 800b10c:	d011      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b112:	3308      	adds	r3, #8
 800b114:	2100      	movs	r1, #0
 800b116:	4618      	mov	r0, r3
 800b118:	f001 fa4a 	bl	800c5b0 <RCCEx_PLL2_Config>
 800b11c:	4603      	mov	r3, r0
 800b11e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b12a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b12e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	2100      	movs	r1, #0
 800b13c:	6239      	str	r1, [r7, #32]
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	627b      	str	r3, [r7, #36]	@ 0x24
 800b144:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b148:	460b      	mov	r3, r1
 800b14a:	4313      	orrs	r3, r2
 800b14c:	d011      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b152:	3308      	adds	r3, #8
 800b154:	2101      	movs	r1, #1
 800b156:	4618      	mov	r0, r3
 800b158:	f001 fa2a 	bl	800c5b0 <RCCEx_PLL2_Config>
 800b15c:	4603      	mov	r3, r0
 800b15e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b16e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	2100      	movs	r1, #0
 800b17c:	61b9      	str	r1, [r7, #24]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	61fb      	str	r3, [r7, #28]
 800b184:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b188:	460b      	mov	r3, r1
 800b18a:	4313      	orrs	r3, r2
 800b18c:	d011      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b192:	3308      	adds	r3, #8
 800b194:	2102      	movs	r1, #2
 800b196:	4618      	mov	r0, r3
 800b198:	f001 fa0a 	bl	800c5b0 <RCCEx_PLL2_Config>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	6139      	str	r1, [r7, #16]
 800b1be:	f003 0308 	and.w	r3, r3, #8
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	d011      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1d2:	3328      	adds	r3, #40	@ 0x28
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 fa9c 	bl	800c714 <RCCEx_PLL3_Config>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	f003 0310 	and.w	r3, r3, #16
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b208:	460b      	mov	r3, r1
 800b20a:	4313      	orrs	r3, r2
 800b20c:	d011      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b212:	3328      	adds	r3, #40	@ 0x28
 800b214:	2101      	movs	r1, #1
 800b216:	4618      	mov	r0, r3
 800b218:	f001 fa7c 	bl	800c714 <RCCEx_PLL3_Config>
 800b21c:	4603      	mov	r3, r0
 800b21e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b22a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b22e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	2100      	movs	r1, #0
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	f003 0320 	and.w	r3, r3, #32
 800b242:	607b      	str	r3, [r7, #4]
 800b244:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b248:	460b      	mov	r3, r1
 800b24a:	4313      	orrs	r3, r2
 800b24c:	d011      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b252:	3328      	adds	r3, #40	@ 0x28
 800b254:	2102      	movs	r1, #2
 800b256:	4618      	mov	r0, r3
 800b258:	f001 fa5c 	bl	800c714 <RCCEx_PLL3_Config>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b266:	2b00      	cmp	r3, #0
 800b268:	d003      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b26e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b272:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e000      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
}
 800b280:	4618      	mov	r0, r3
 800b282:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b286:	46bd      	mov	sp, r7
 800b288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b28c:	58024400 	.word	0x58024400

0800b290 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b090      	sub	sp, #64	@ 0x40
 800b294:	af00      	add	r7, sp, #0
 800b296:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b29a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b29e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	f040 8094 	bne.w	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b2a8:	4b9e      	ldr	r3, [pc, #632]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	f200 8087 	bhi.w	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b2ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c0:	0800b2d5 	.word	0x0800b2d5
 800b2c4:	0800b2fd 	.word	0x0800b2fd
 800b2c8:	0800b325 	.word	0x0800b325
 800b2cc:	0800b3c1 	.word	0x0800b3c1
 800b2d0:	0800b34d 	.word	0x0800b34d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2d4:	4b93      	ldr	r3, [pc, #588]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2e0:	d108      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f001 f810 	bl	800c30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f0:	f000 bd45 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f8:	f000 bd41 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2fc:	4b89      	ldr	r3, [pc, #548]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b308:	d108      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b30a:	f107 0318 	add.w	r3, r7, #24
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fd54 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b318:	f000 bd31 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b320:	f000 bd2d 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b324:	4b7f      	ldr	r3, [pc, #508]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b32c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b330:	d108      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b332:	f107 030c 	add.w	r3, r7, #12
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fe94 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b340:	f000 bd1d 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b348:	f000 bd19 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b34c:	4b75      	ldr	r3, [pc, #468]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b34e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b350:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b354:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b356:	4b73      	ldr	r3, [pc, #460]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d10c      	bne.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b364:	2b00      	cmp	r3, #0
 800b366:	d109      	bne.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b368:	4b6e      	ldr	r3, [pc, #440]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	08db      	lsrs	r3, r3, #3
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	4a6d      	ldr	r2, [pc, #436]	@ (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b374:	fa22 f303 	lsr.w	r3, r2, r3
 800b378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b37a:	e01f      	b.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b37c:	4b69      	ldr	r3, [pc, #420]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b384:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b388:	d106      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b38c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b390:	d102      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b392:	4b66      	ldr	r3, [pc, #408]	@ (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b396:	e011      	b.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b398:	4b62      	ldr	r3, [pc, #392]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3a4:	d106      	bne.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3ac:	d102      	bne.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3ae:	4b60      	ldr	r3, [pc, #384]	@ (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3b2:	e003      	b.n	800b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3b8:	f000 bce1 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3bc:	f000 bcdf 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3c0:	4b5c      	ldr	r3, [pc, #368]	@ (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c4:	f000 bcdb 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3cc:	f000 bcd7 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b3d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3d4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b3d8:	430b      	orrs	r3, r1
 800b3da:	f040 80ad 	bne.w	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b3de:	4b51      	ldr	r3, [pc, #324]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b3e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ee:	d056      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3f6:	f200 8090 	bhi.w	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800b3fe:	f000 8088 	beq.w	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	2bc0      	cmp	r3, #192	@ 0xc0
 800b406:	f200 8088 	bhi.w	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	2b80      	cmp	r3, #128	@ 0x80
 800b40e:	d032      	beq.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	2b80      	cmp	r3, #128	@ 0x80
 800b414:	f200 8081 	bhi.w	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b420:	2b40      	cmp	r3, #64	@ 0x40
 800b422:	d014      	beq.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b424:	e079      	b.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b426:	4b3f      	ldr	r3, [pc, #252]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b42e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b432:	d108      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 ff67 	bl	800c30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b442:	f000 bc9c 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b44a:	f000 bc98 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b44e:	4b35      	ldr	r3, [pc, #212]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b45a:	d108      	bne.n	800b46e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45c:	f107 0318 	add.w	r3, r7, #24
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fcab 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b46a:	f000 bc88 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b472:	f000 bc84 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b476:	4b2b      	ldr	r3, [pc, #172]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b47e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b482:	d108      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b484:	f107 030c 	add.w	r3, r7, #12
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 fdeb 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b492:	f000 bc74 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b49a:	f000 bc70 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b49e:	4b21      	ldr	r3, [pc, #132]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4a8:	4b1e      	ldr	r3, [pc, #120]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d10c      	bne.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d109      	bne.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	08db      	lsrs	r3, r3, #3
 800b4c0:	f003 0303 	and.w	r3, r3, #3
 800b4c4:	4a18      	ldr	r2, [pc, #96]	@ (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4cc:	e01f      	b.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4ce:	4b15      	ldr	r3, [pc, #84]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4da:	d106      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4e2:	d102      	bne.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4e4:	4b11      	ldr	r3, [pc, #68]	@ (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4e8:	e011      	b.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4f6:	d106      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4fe:	d102      	bne.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b500:	4b0b      	ldr	r3, [pc, #44]	@ (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b504:	e003      	b.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b50a:	f000 bc38 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b50e:	f000 bc36 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b512:	4b08      	ldr	r3, [pc, #32]	@ (800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b516:	f000 bc32 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b51e:	f000 bc2e 	b.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b522:	bf00      	nop
 800b524:	58024400 	.word	0x58024400
 800b528:	03d09000 	.word	0x03d09000
 800b52c:	003d0900 	.word	0x003d0900
 800b530:	017d7840 	.word	0x017d7840
 800b534:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b53c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b540:	430b      	orrs	r3, r1
 800b542:	f040 809c 	bne.w	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b546:	4b9e      	ldr	r3, [pc, #632]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b54a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b54e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b552:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b556:	d054      	beq.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b55e:	f200 808b 	bhi.w	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b564:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b568:	f000 8083 	beq.w	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b572:	f200 8081 	bhi.w	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b57c:	d02f      	beq.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b584:	d878      	bhi.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d004      	beq.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b592:	d012      	beq.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b594:	e070      	b.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b596:	4b8a      	ldr	r3, [pc, #552]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b59e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5a2:	d107      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 feaf 	bl	800c30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b2:	e3e4      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b8:	e3e1      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5ba:	4b81      	ldr	r3, [pc, #516]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5c6:	d107      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5c8:	f107 0318 	add.w	r3, r7, #24
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 fbf5 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d6:	e3d2      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5dc:	e3cf      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5de:	4b78      	ldr	r3, [pc, #480]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ea:	d107      	bne.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5ec:	f107 030c 	add.w	r3, r7, #12
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 fd37 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5fa:	e3c0      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b600:	e3bd      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b602:	4b6f      	ldr	r3, [pc, #444]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b606:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b60a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b60c:	4b6c      	ldr	r3, [pc, #432]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 0304 	and.w	r3, r3, #4
 800b614:	2b04      	cmp	r3, #4
 800b616:	d10c      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d109      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b61e:	4b68      	ldr	r3, [pc, #416]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	08db      	lsrs	r3, r3, #3
 800b624:	f003 0303 	and.w	r3, r3, #3
 800b628:	4a66      	ldr	r2, [pc, #408]	@ (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b62a:	fa22 f303 	lsr.w	r3, r2, r3
 800b62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b630:	e01e      	b.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b632:	4b63      	ldr	r3, [pc, #396]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b63a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b63e:	d106      	bne.n	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b646:	d102      	bne.n	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b648:	4b5f      	ldr	r3, [pc, #380]	@ (800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b64c:	e010      	b.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b64e:	4b5c      	ldr	r3, [pc, #368]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b656:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b65a:	d106      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b65e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b662:	d102      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b664:	4b59      	ldr	r3, [pc, #356]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b668:	e002      	b.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b66e:	e386      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b670:	e385      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b672:	4b57      	ldr	r3, [pc, #348]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b676:	e382      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b67c:	e37f      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b67e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b682:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b686:	430b      	orrs	r3, r1
 800b688:	f040 80a7 	bne.w	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b68c:	4b4c      	ldr	r3, [pc, #304]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b690:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b694:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b69c:	d055      	beq.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6a4:	f200 8096 	bhi.w	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6ae:	f000 8084 	beq.w	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6b8:	f200 808c 	bhi.w	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6c2:	d030      	beq.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6ca:	f200 8083 	bhi.w	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d004      	beq.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6da:	d012      	beq.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b6dc:	e07a      	b.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6de:	4b38      	ldr	r3, [pc, #224]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6ea:	d107      	bne.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fe0b 	bl	800c30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6fa:	e340      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b700:	e33d      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b702:	4b2f      	ldr	r3, [pc, #188]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b70a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b70e:	d107      	bne.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b710:	f107 0318 	add.w	r3, r7, #24
 800b714:	4618      	mov	r0, r3
 800b716:	f000 fb51 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b71e:	e32e      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b720:	2300      	movs	r3, #0
 800b722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b724:	e32b      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b726:	4b26      	ldr	r3, [pc, #152]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b72e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b732:	d107      	bne.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b734:	f107 030c 	add.w	r3, r7, #12
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 fc93 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b742:	e31c      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b748:	e319      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b74a:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b74c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b74e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b752:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b754:	4b1a      	ldr	r3, [pc, #104]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d10c      	bne.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b766:	4b16      	ldr	r3, [pc, #88]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	08db      	lsrs	r3, r3, #3
 800b76c:	f003 0303 	and.w	r3, r3, #3
 800b770:	4a14      	ldr	r2, [pc, #80]	@ (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b772:	fa22 f303 	lsr.w	r3, r2, r3
 800b776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b778:	e01e      	b.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b77a:	4b11      	ldr	r3, [pc, #68]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b786:	d106      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b78a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b78e:	d102      	bne.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b790:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b794:	e010      	b.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b796:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b79e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7a2:	d106      	bne.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7aa:	d102      	bne.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7ac:	4b07      	ldr	r3, [pc, #28]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7b0:	e002      	b.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7b6:	e2e2      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b7b8:	e2e1      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b7ba:	4b05      	ldr	r3, [pc, #20]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7be:	e2de      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b7c0:	58024400 	.word	0x58024400
 800b7c4:	03d09000 	.word	0x03d09000
 800b7c8:	003d0900 	.word	0x003d0900
 800b7cc:	017d7840 	.word	0x017d7840
 800b7d0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7d8:	e2d1      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7de:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	f040 809c 	bne.w	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b7e8:	4b93      	ldr	r3, [pc, #588]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b7f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7f8:	d054      	beq.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b800:	f200 808b 	bhi.w	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b806:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b80a:	f000 8083 	beq.w	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b814:	f200 8081 	bhi.w	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b81e:	d02f      	beq.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b826:	d878      	bhi.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b834:	d012      	beq.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b836:	e070      	b.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b838:	4b7f      	ldr	r3, [pc, #508]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b844:	d107      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fd5e 	bl	800c30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b854:	e293      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b85a:	e290      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b85c:	4b76      	ldr	r3, [pc, #472]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b864:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b868:	d107      	bne.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b86a:	f107 0318 	add.w	r3, r7, #24
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 faa4 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b878:	e281      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87e:	e27e      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b880:	4b6d      	ldr	r3, [pc, #436]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b88c:	d107      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b88e:	f107 030c 	add.w	r3, r7, #12
 800b892:	4618      	mov	r0, r3
 800b894:	f000 fbe6 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b89c:	e26f      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a2:	e26c      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8a4:	4b64      	ldr	r3, [pc, #400]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8ae:	4b62      	ldr	r3, [pc, #392]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 0304 	and.w	r3, r3, #4
 800b8b6:	2b04      	cmp	r3, #4
 800b8b8:	d10c      	bne.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b8ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d109      	bne.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8c0:	4b5d      	ldr	r3, [pc, #372]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	08db      	lsrs	r3, r3, #3
 800b8c6:	f003 0303 	and.w	r3, r3, #3
 800b8ca:	4a5c      	ldr	r2, [pc, #368]	@ (800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8d2:	e01e      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8d4:	4b58      	ldr	r3, [pc, #352]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8e0:	d106      	bne.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8e8:	d102      	bne.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8ea:	4b55      	ldr	r3, [pc, #340]	@ (800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8ee:	e010      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8f0:	4b51      	ldr	r3, [pc, #324]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8fc:	d106      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b904:	d102      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b906:	4b4f      	ldr	r3, [pc, #316]	@ (800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b90a:	e002      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b910:	e235      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b912:	e234      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b914:	4b4c      	ldr	r3, [pc, #304]	@ (800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b918:	e231      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91e:	e22e      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b920:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b924:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b928:	430b      	orrs	r3, r1
 800b92a:	f040 808f 	bne.w	800ba4c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b92e:	4b42      	ldr	r3, [pc, #264]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b932:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b936:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b93e:	d06b      	beq.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b942:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b946:	d874      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b94e:	d056      	beq.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b952:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b956:	d86c      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b95e:	d03b      	beq.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b962:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b966:	d864      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b96e:	d021      	beq.n	800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b976:	d85c      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d004      	beq.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b984:	d004      	beq.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b986:	e054      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b988:	f7fe fa4c 	bl	8009e24 <HAL_RCC_GetPCLK1Freq>
 800b98c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b98e:	e1f6      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b990:	4b29      	ldr	r3, [pc, #164]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b99c:	d107      	bne.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b99e:	f107 0318 	add.w	r3, r7, #24
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fa0a 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ac:	e1e7      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b2:	e1e4      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9b4:	4b20      	ldr	r3, [pc, #128]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9c0:	d107      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9c2:	f107 030c 	add.w	r3, r7, #12
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 fb4c 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9d0:	e1d5      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9d6:	e1d2      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9d8:	4b17      	ldr	r3, [pc, #92]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0304 	and.w	r3, r3, #4
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d109      	bne.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9e4:	4b14      	ldr	r3, [pc, #80]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	08db      	lsrs	r3, r3, #3
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	4a13      	ldr	r2, [pc, #76]	@ (800ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9f6:	e1c2      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9fc:	e1bf      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9fe:	4b0e      	ldr	r3, [pc, #56]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba0a:	d102      	bne.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ba0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ba0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba10:	e1b5      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba16:	e1b2      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba18:	4b07      	ldr	r3, [pc, #28]	@ (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba24:	d102      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ba26:	4b07      	ldr	r3, [pc, #28]	@ (800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ba28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba2a:	e1a8      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba30:	e1a5      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba36:	e1a2      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba38:	58024400 	.word	0x58024400
 800ba3c:	03d09000 	.word	0x03d09000
 800ba40:	003d0900 	.word	0x003d0900
 800ba44:	017d7840 	.word	0x017d7840
 800ba48:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba50:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ba54:	430b      	orrs	r3, r1
 800ba56:	d173      	bne.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba58:	4b9c      	ldr	r3, [pc, #624]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ba60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba68:	d02f      	beq.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba70:	d863      	bhi.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ba72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d004      	beq.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ba78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba7e:	d012      	beq.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ba80:	e05b      	b.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba82:	4b92      	ldr	r3, [pc, #584]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba8e:	d107      	bne.n	800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba90:	f107 0318 	add.w	r3, r7, #24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f991 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba9e:	e16e      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa4:	e16b      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800baa6:	4b89      	ldr	r3, [pc, #548]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800baae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bab2:	d107      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bab4:	f107 030c 	add.w	r3, r7, #12
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fad3 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac2:	e15c      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bac8:	e159      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baca:	4b80      	ldr	r3, [pc, #512]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bacc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bad2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bad4:	4b7d      	ldr	r3, [pc, #500]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b04      	cmp	r3, #4
 800bade:	d10c      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800bae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d109      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bae6:	4b79      	ldr	r3, [pc, #484]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	08db      	lsrs	r3, r3, #3
 800baec:	f003 0303 	and.w	r3, r3, #3
 800baf0:	4a77      	ldr	r2, [pc, #476]	@ (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800baf2:	fa22 f303 	lsr.w	r3, r2, r3
 800baf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baf8:	e01e      	b.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bafa:	4b74      	ldr	r3, [pc, #464]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb06:	d106      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800bb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb0e:	d102      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb10:	4b70      	ldr	r3, [pc, #448]	@ (800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb14:	e010      	b.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb16:	4b6d      	ldr	r3, [pc, #436]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb22:	d106      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800bb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb2a:	d102      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb2c:	4b6a      	ldr	r3, [pc, #424]	@ (800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb30:	e002      	b.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bb36:	e122      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb38:	e121      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb3e:	e11e      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb44:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	d133      	bne.n	800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb4c:	4b5f      	ldr	r3, [pc, #380]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb54:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb62:	d012      	beq.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bb64:	e023      	b.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb66:	4b59      	ldr	r3, [pc, #356]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb72:	d107      	bne.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fbc7 	bl	800c30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb82:	e0fc      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb88:	e0f9      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb8a:	4b50      	ldr	r3, [pc, #320]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb96:	d107      	bne.n	800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb98:	f107 0318 	add.w	r3, r7, #24
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 f90d 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bba6:	e0ea      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbac:	e0e7      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbb2:	e0e4      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bbb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bbbc:	430b      	orrs	r3, r1
 800bbbe:	f040 808d 	bne.w	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bbc2:	4b42      	ldr	r3, [pc, #264]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bbca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbd2:	d06b      	beq.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbda:	d874      	bhi.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbe2:	d056      	beq.n	800bc92 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbea:	d86c      	bhi.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bbf2:	d03b      	beq.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bbfa:	d864      	bhi.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc02:	d021      	beq.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc0a:	d85c      	bhi.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d004      	beq.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc18:	d004      	beq.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bc1a:	e054      	b.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bc1c:	f000 f8b8 	bl	800bd90 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc20:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc22:	e0ac      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc24:	4b29      	ldr	r3, [pc, #164]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc30:	d107      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc32:	f107 0318 	add.w	r3, r7, #24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 f8c0 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc40:	e09d      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc42:	2300      	movs	r3, #0
 800bc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc46:	e09a      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc48:	4b20      	ldr	r3, [pc, #128]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc54:	d107      	bne.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc56:	f107 030c 	add.w	r3, r7, #12
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f000 fa02 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc64:	e08b      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc6a:	e088      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc6c:	4b17      	ldr	r3, [pc, #92]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	d109      	bne.n	800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc78:	4b14      	ldr	r3, [pc, #80]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	08db      	lsrs	r3, r3, #3
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	4a13      	ldr	r2, [pc, #76]	@ (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bc84:	fa22 f303 	lsr.w	r3, r2, r3
 800bc88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc8a:	e078      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc90:	e075      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc92:	4b0e      	ldr	r3, [pc, #56]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc9e:	d102      	bne.n	800bca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bca0:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca4:	e06b      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcaa:	e068      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcac:	4b07      	ldr	r3, [pc, #28]	@ (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcb8:	d102      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bcba:	4b07      	ldr	r3, [pc, #28]	@ (800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcbe:	e05e      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc4:	e05b      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcca:	e058      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bccc:	58024400 	.word	0x58024400
 800bcd0:	03d09000 	.word	0x03d09000
 800bcd4:	003d0900 	.word	0x003d0900
 800bcd8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bcdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bce4:	430b      	orrs	r3, r1
 800bce6:	d148      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bce8:	4b27      	ldr	r3, [pc, #156]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bcea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bcf0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bcf8:	d02a      	beq.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd00:	d838      	bhi.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd0e:	d00d      	beq.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bd10:	e030      	b.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bd12:	4b1d      	ldr	r3, [pc, #116]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd1e:	d102      	bne.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bd20:	4b1a      	ldr	r3, [pc, #104]	@ (800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd24:	e02b      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd2a:	e028      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd2c:	4b16      	ldr	r3, [pc, #88]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd38:	d107      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 fae4 	bl	800c30c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd48:	e019      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4e:	e016      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd50:	4b0d      	ldr	r3, [pc, #52]	@ (800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd5c:	d107      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd5e:	f107 0318 	add.w	r3, r7, #24
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 f82a 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd6c:	e007      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd72:	e004      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd78:	e001      	b.n	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3740      	adds	r7, #64	@ 0x40
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	58024400 	.word	0x58024400
 800bd8c:	017d7840 	.word	0x017d7840

0800bd90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd94:	f7fe f816 	bl	8009dc4 <HAL_RCC_GetHCLKFreq>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	4b06      	ldr	r3, [pc, #24]	@ (800bdb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	091b      	lsrs	r3, r3, #4
 800bda0:	f003 0307 	and.w	r3, r3, #7
 800bda4:	4904      	ldr	r1, [pc, #16]	@ (800bdb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bda6:	5ccb      	ldrb	r3, [r1, r3]
 800bda8:	f003 031f 	and.w	r3, r3, #31
 800bdac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	58024400 	.word	0x58024400
 800bdb8:	08012074 	.word	0x08012074

0800bdbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b089      	sub	sp, #36	@ 0x24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdc4:	4ba1      	ldr	r3, [pc, #644]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdc8:	f003 0303 	and.w	r3, r3, #3
 800bdcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bdce:	4b9f      	ldr	r3, [pc, #636]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd2:	0b1b      	lsrs	r3, r3, #12
 800bdd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bdda:	4b9c      	ldr	r3, [pc, #624]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdde:	091b      	lsrs	r3, r3, #4
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bde6:	4b99      	ldr	r3, [pc, #612]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdea:	08db      	lsrs	r3, r3, #3
 800bdec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	fb02 f303 	mul.w	r3, r2, r3
 800bdf6:	ee07 3a90 	vmov	s15, r3
 800bdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 8111 	beq.w	800c02c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	f000 8083 	beq.w	800bf18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	2b02      	cmp	r3, #2
 800be16:	f200 80a1 	bhi.w	800bf5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d003      	beq.n	800be28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d056      	beq.n	800bed4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800be26:	e099      	b.n	800bf5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be28:	4b88      	ldr	r3, [pc, #544]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0320 	and.w	r3, r3, #32
 800be30:	2b00      	cmp	r3, #0
 800be32:	d02d      	beq.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be34:	4b85      	ldr	r3, [pc, #532]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	08db      	lsrs	r3, r3, #3
 800be3a:	f003 0303 	and.w	r3, r3, #3
 800be3e:	4a84      	ldr	r2, [pc, #528]	@ (800c050 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800be40:	fa22 f303 	lsr.w	r3, r2, r3
 800be44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	ee07 3a90 	vmov	s15, r3
 800be4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be5e:	4b7b      	ldr	r3, [pc, #492]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be8e:	e087      	b.n	800bfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c058 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bea2:	4b6a      	ldr	r3, [pc, #424]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800beb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bed2:	e065      	b.n	800bfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bee6:	4b59      	ldr	r3, [pc, #356]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800befa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800befe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf16:	e043      	b.n	800bfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2a:	4b48      	ldr	r3, [pc, #288]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf5a:	e021      	b.n	800bfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf6e:	4b37      	ldr	r3, [pc, #220]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bfa0:	4b2a      	ldr	r3, [pc, #168]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa4:	0a5b      	lsrs	r3, r3, #9
 800bfa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfba:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfc6:	ee17 2a90 	vmov	r2, s15
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bfce:	4b1f      	ldr	r3, [pc, #124]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd2:	0c1b      	lsrs	r3, r3, #16
 800bfd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfd8:	ee07 3a90 	vmov	s15, r3
 800bfdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff4:	ee17 2a90 	vmov	r2, s15
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bffc:	4b13      	ldr	r3, [pc, #76]	@ (800c04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c000:	0e1b      	lsrs	r3, r3, #24
 800c002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c016:	edd7 6a07 	vldr	s13, [r7, #28]
 800c01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c022:	ee17 2a90 	vmov	r2, s15
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c02a:	e008      	b.n	800c03e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	609a      	str	r2, [r3, #8]
}
 800c03e:	bf00      	nop
 800c040:	3724      	adds	r7, #36	@ 0x24
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	58024400 	.word	0x58024400
 800c050:	03d09000 	.word	0x03d09000
 800c054:	46000000 	.word	0x46000000
 800c058:	4c742400 	.word	0x4c742400
 800c05c:	4a742400 	.word	0x4a742400
 800c060:	4bbebc20 	.word	0x4bbebc20

0800c064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c064:	b480      	push	{r7}
 800c066:	b089      	sub	sp, #36	@ 0x24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c06c:	4ba1      	ldr	r3, [pc, #644]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c070:	f003 0303 	and.w	r3, r3, #3
 800c074:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c076:	4b9f      	ldr	r3, [pc, #636]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c07a:	0d1b      	lsrs	r3, r3, #20
 800c07c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c080:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c082:	4b9c      	ldr	r3, [pc, #624]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c086:	0a1b      	lsrs	r3, r3, #8
 800c088:	f003 0301 	and.w	r3, r3, #1
 800c08c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c08e:	4b99      	ldr	r3, [pc, #612]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c092:	08db      	lsrs	r3, r3, #3
 800c094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	fb02 f303 	mul.w	r3, r2, r3
 800c09e:	ee07 3a90 	vmov	s15, r3
 800c0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 8111 	beq.w	800c2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	f000 8083 	beq.w	800c1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	f200 80a1 	bhi.w	800c204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d056      	beq.n	800c17c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c0ce:	e099      	b.n	800c204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0d0:	4b88      	ldr	r3, [pc, #544]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f003 0320 	and.w	r3, r3, #32
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d02d      	beq.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0dc:	4b85      	ldr	r3, [pc, #532]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	08db      	lsrs	r3, r3, #3
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	4a84      	ldr	r2, [pc, #528]	@ (800c2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c106:	4b7b      	ldr	r3, [pc, #492]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c116:	ed97 6a03 	vldr	s12, [r7, #12]
 800c11a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c132:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c136:	e087      	b.n	800c248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c142:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c300 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c14a:	4b6a      	ldr	r3, [pc, #424]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c15e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c16a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c17a:	e065      	b.n	800c248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	ee07 3a90 	vmov	s15, r3
 800c182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c186:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c18e:	4b59      	ldr	r3, [pc, #356]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1be:	e043      	b.n	800c248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d2:	4b48      	ldr	r3, [pc, #288]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1da:	ee07 3a90 	vmov	s15, r3
 800c1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c202:	e021      	b.n	800c248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c216:	4b37      	ldr	r3, [pc, #220]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c226:	ed97 6a03 	vldr	s12, [r7, #12]
 800c22a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c246:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c248:	4b2a      	ldr	r3, [pc, #168]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c24a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c24c:	0a5b      	lsrs	r3, r3, #9
 800c24e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c252:	ee07 3a90 	vmov	s15, r3
 800c256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c262:	edd7 6a07 	vldr	s13, [r7, #28]
 800c266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c26e:	ee17 2a90 	vmov	r2, s15
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c276:	4b1f      	ldr	r3, [pc, #124]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c27a:	0c1b      	lsrs	r3, r3, #16
 800c27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c280:	ee07 3a90 	vmov	s15, r3
 800c284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c290:	edd7 6a07 	vldr	s13, [r7, #28]
 800c294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c29c:	ee17 2a90 	vmov	r2, s15
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c2a4:	4b13      	ldr	r3, [pc, #76]	@ (800c2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2a8:	0e1b      	lsrs	r3, r3, #24
 800c2aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2ae:	ee07 3a90 	vmov	s15, r3
 800c2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2ca:	ee17 2a90 	vmov	r2, s15
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c2d2:	e008      	b.n	800c2e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	609a      	str	r2, [r3, #8]
}
 800c2e6:	bf00      	nop
 800c2e8:	3724      	adds	r7, #36	@ 0x24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	58024400 	.word	0x58024400
 800c2f8:	03d09000 	.word	0x03d09000
 800c2fc:	46000000 	.word	0x46000000
 800c300:	4c742400 	.word	0x4c742400
 800c304:	4a742400 	.word	0x4a742400
 800c308:	4bbebc20 	.word	0x4bbebc20

0800c30c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b089      	sub	sp, #36	@ 0x24
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c314:	4ba0      	ldr	r3, [pc, #640]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c31e:	4b9e      	ldr	r3, [pc, #632]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c322:	091b      	lsrs	r3, r3, #4
 800c324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c328:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c32a:	4b9b      	ldr	r3, [pc, #620]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c334:	4b98      	ldr	r3, [pc, #608]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c338:	08db      	lsrs	r3, r3, #3
 800c33a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	fb02 f303 	mul.w	r3, r2, r3
 800c344:	ee07 3a90 	vmov	s15, r3
 800c348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 8111 	beq.w	800c57a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	f000 8083 	beq.w	800c466 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	2b02      	cmp	r3, #2
 800c364:	f200 80a1 	bhi.w	800c4aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d056      	beq.n	800c422 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c374:	e099      	b.n	800c4aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c376:	4b88      	ldr	r3, [pc, #544]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 0320 	and.w	r3, r3, #32
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d02d      	beq.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c382:	4b85      	ldr	r3, [pc, #532]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	08db      	lsrs	r3, r3, #3
 800c388:	f003 0303 	and.w	r3, r3, #3
 800c38c:	4a83      	ldr	r2, [pc, #524]	@ (800c59c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c38e:	fa22 f303 	lsr.w	r3, r2, r3
 800c392:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	ee07 3a90 	vmov	s15, r3
 800c3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ac:	4b7a      	ldr	r3, [pc, #488]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b4:	ee07 3a90 	vmov	s15, r3
 800c3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3c0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c3dc:	e087      	b.n	800c4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	ee07 3a90 	vmov	s15, r3
 800c3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3f0:	4b69      	ldr	r3, [pc, #420]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f8:	ee07 3a90 	vmov	s15, r3
 800c3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c400:	ed97 6a03 	vldr	s12, [r7, #12]
 800c404:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c40c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c41c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c420:	e065      	b.n	800c4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c5a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c434:	4b58      	ldr	r3, [pc, #352]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43c:	ee07 3a90 	vmov	s15, r3
 800c440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c444:	ed97 6a03 	vldr	s12, [r7, #12]
 800c448:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c44c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c454:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c460:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c464:	e043      	b.n	800c4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	ee07 3a90 	vmov	s15, r3
 800c46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c470:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c5ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c478:	4b47      	ldr	r3, [pc, #284]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c480:	ee07 3a90 	vmov	s15, r3
 800c484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c488:	ed97 6a03 	vldr	s12, [r7, #12]
 800c48c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c498:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4a8:	e021      	b.n	800c4ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	ee07 3a90 	vmov	s15, r3
 800c4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c5a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c4b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4bc:	4b36      	ldr	r3, [pc, #216]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c4:	ee07 3a90 	vmov	s15, r3
 800c4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c5a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c4d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c4ee:	4b2a      	ldr	r3, [pc, #168]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4f2:	0a5b      	lsrs	r3, r3, #9
 800c4f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4f8:	ee07 3a90 	vmov	s15, r3
 800c4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c504:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c508:	edd7 6a07 	vldr	s13, [r7, #28]
 800c50c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c514:	ee17 2a90 	vmov	r2, s15
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c51c:	4b1e      	ldr	r3, [pc, #120]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c51e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c520:	0c1b      	lsrs	r3, r3, #16
 800c522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c532:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c536:	edd7 6a07 	vldr	s13, [r7, #28]
 800c53a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c542:	ee17 2a90 	vmov	r2, s15
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c54a:	4b13      	ldr	r3, [pc, #76]	@ (800c598 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c54c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c54e:	0e1b      	lsrs	r3, r3, #24
 800c550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c554:	ee07 3a90 	vmov	s15, r3
 800c558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c560:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c564:	edd7 6a07 	vldr	s13, [r7, #28]
 800c568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c56c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c570:	ee17 2a90 	vmov	r2, s15
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c578:	e008      	b.n	800c58c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	609a      	str	r2, [r3, #8]
}
 800c58c:	bf00      	nop
 800c58e:	3724      	adds	r7, #36	@ 0x24
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr
 800c598:	58024400 	.word	0x58024400
 800c59c:	03d09000 	.word	0x03d09000
 800c5a0:	46000000 	.word	0x46000000
 800c5a4:	4c742400 	.word	0x4c742400
 800c5a8:	4a742400 	.word	0x4a742400
 800c5ac:	4bbebc20 	.word	0x4bbebc20

0800c5b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5be:	4b53      	ldr	r3, [pc, #332]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c2:	f003 0303 	and.w	r3, r3, #3
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d101      	bne.n	800c5ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e099      	b.n	800c702 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c5ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a4e      	ldr	r2, [pc, #312]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c5d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5da:	f7f6 feb3 	bl	8003344 <HAL_GetTick>
 800c5de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5e0:	e008      	b.n	800c5f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5e2:	f7f6 feaf 	bl	8003344 <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d901      	bls.n	800c5f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e086      	b.n	800c702 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5f4:	4b45      	ldr	r3, [pc, #276]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1f0      	bne.n	800c5e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c600:	4b42      	ldr	r3, [pc, #264]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c604:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	031b      	lsls	r3, r3, #12
 800c60e:	493f      	ldr	r1, [pc, #252]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c610:	4313      	orrs	r3, r2
 800c612:	628b      	str	r3, [r1, #40]	@ 0x28
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	3b01      	subs	r3, #1
 800c61a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	3b01      	subs	r3, #1
 800c624:	025b      	lsls	r3, r3, #9
 800c626:	b29b      	uxth	r3, r3
 800c628:	431a      	orrs	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	3b01      	subs	r3, #1
 800c630:	041b      	lsls	r3, r3, #16
 800c632:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c636:	431a      	orrs	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	061b      	lsls	r3, r3, #24
 800c640:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c644:	4931      	ldr	r1, [pc, #196]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c646:	4313      	orrs	r3, r2
 800c648:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c64a:	4b30      	ldr	r3, [pc, #192]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c64e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	695b      	ldr	r3, [r3, #20]
 800c656:	492d      	ldr	r1, [pc, #180]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c658:	4313      	orrs	r3, r2
 800c65a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c65c:	4b2b      	ldr	r3, [pc, #172]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c660:	f023 0220 	bic.w	r2, r3, #32
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	4928      	ldr	r1, [pc, #160]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c66e:	4b27      	ldr	r3, [pc, #156]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c672:	4a26      	ldr	r2, [pc, #152]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c674:	f023 0310 	bic.w	r3, r3, #16
 800c678:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c67a:	4b24      	ldr	r3, [pc, #144]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c67c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c67e:	4b24      	ldr	r3, [pc, #144]	@ (800c710 <RCCEx_PLL2_Config+0x160>)
 800c680:	4013      	ands	r3, r2
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	69d2      	ldr	r2, [r2, #28]
 800c686:	00d2      	lsls	r2, r2, #3
 800c688:	4920      	ldr	r1, [pc, #128]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c68a:	4313      	orrs	r3, r2
 800c68c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c68e:	4b1f      	ldr	r3, [pc, #124]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c692:	4a1e      	ldr	r2, [pc, #120]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c694:	f043 0310 	orr.w	r3, r3, #16
 800c698:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d106      	bne.n	800c6ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a4:	4a19      	ldr	r2, [pc, #100]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c6aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c6ac:	e00f      	b.n	800c6ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d106      	bne.n	800c6c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6b4:	4b15      	ldr	r3, [pc, #84]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b8:	4a14      	ldr	r2, [pc, #80]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c6c0:	e005      	b.n	800c6ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6c2:	4b12      	ldr	r3, [pc, #72]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c6:	4a11      	ldr	r2, [pc, #68]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c6cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a0e      	ldr	r2, [pc, #56]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6da:	f7f6 fe33 	bl	8003344 <HAL_GetTick>
 800c6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6e0:	e008      	b.n	800c6f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6e2:	f7f6 fe2f 	bl	8003344 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e006      	b.n	800c702 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6f4:	4b05      	ldr	r3, [pc, #20]	@ (800c70c <RCCEx_PLL2_Config+0x15c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0f0      	beq.n	800c6e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c700:	7bfb      	ldrb	r3, [r7, #15]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	58024400 	.word	0x58024400
 800c710:	ffff0007 	.word	0xffff0007

0800c714 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c722:	4b53      	ldr	r3, [pc, #332]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c726:	f003 0303 	and.w	r3, r3, #3
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	d101      	bne.n	800c732 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e099      	b.n	800c866 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c732:	4b4f      	ldr	r3, [pc, #316]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a4e      	ldr	r2, [pc, #312]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c73c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c73e:	f7f6 fe01 	bl	8003344 <HAL_GetTick>
 800c742:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c744:	e008      	b.n	800c758 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c746:	f7f6 fdfd 	bl	8003344 <HAL_GetTick>
 800c74a:	4602      	mov	r2, r0
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	2b02      	cmp	r3, #2
 800c752:	d901      	bls.n	800c758 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c754:	2303      	movs	r3, #3
 800c756:	e086      	b.n	800c866 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c758:	4b45      	ldr	r3, [pc, #276]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1f0      	bne.n	800c746 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c764:	4b42      	ldr	r3, [pc, #264]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c768:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	051b      	lsls	r3, r3, #20
 800c772:	493f      	ldr	r1, [pc, #252]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c774:	4313      	orrs	r3, r2
 800c776:	628b      	str	r3, [r1, #40]	@ 0x28
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	3b01      	subs	r3, #1
 800c788:	025b      	lsls	r3, r3, #9
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	3b01      	subs	r3, #1
 800c794:	041b      	lsls	r3, r3, #16
 800c796:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c79a:	431a      	orrs	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	691b      	ldr	r3, [r3, #16]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	061b      	lsls	r3, r3, #24
 800c7a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c7a8:	4931      	ldr	r1, [pc, #196]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7ae:	4b30      	ldr	r3, [pc, #192]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	492d      	ldr	r1, [pc, #180]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7c0:	4b2b      	ldr	r3, [pc, #172]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	4928      	ldr	r1, [pc, #160]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c7d2:	4b27      	ldr	r3, [pc, #156]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d6:	4a26      	ldr	r2, [pc, #152]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7de:	4b24      	ldr	r3, [pc, #144]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7e2:	4b24      	ldr	r3, [pc, #144]	@ (800c874 <RCCEx_PLL3_Config+0x160>)
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	69d2      	ldr	r2, [r2, #28]
 800c7ea:	00d2      	lsls	r2, r2, #3
 800c7ec:	4920      	ldr	r1, [pc, #128]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7f2:	4b1f      	ldr	r3, [pc, #124]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c7f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d106      	bne.n	800c812 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c804:	4b1a      	ldr	r3, [pc, #104]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c808:	4a19      	ldr	r2, [pc, #100]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c80a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c80e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c810:	e00f      	b.n	800c832 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d106      	bne.n	800c826 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c818:	4b15      	ldr	r3, [pc, #84]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c81c:	4a14      	ldr	r2, [pc, #80]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c81e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c822:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c824:	e005      	b.n	800c832 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c826:	4b12      	ldr	r3, [pc, #72]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c82a:	4a11      	ldr	r2, [pc, #68]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c82c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c830:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c832:	4b0f      	ldr	r3, [pc, #60]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a0e      	ldr	r2, [pc, #56]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c83e:	f7f6 fd81 	bl	8003344 <HAL_GetTick>
 800c842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c844:	e008      	b.n	800c858 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c846:	f7f6 fd7d 	bl	8003344 <HAL_GetTick>
 800c84a:	4602      	mov	r2, r0
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	2b02      	cmp	r3, #2
 800c852:	d901      	bls.n	800c858 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c854:	2303      	movs	r3, #3
 800c856:	e006      	b.n	800c866 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c858:	4b05      	ldr	r3, [pc, #20]	@ (800c870 <RCCEx_PLL3_Config+0x15c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d0f0      	beq.n	800c846 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c864:	7bfb      	ldrb	r3, [r7, #15]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	58024400 	.word	0x58024400
 800c874:	ffff0007 	.word	0xffff0007

0800c878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d101      	bne.n	800c88a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e049      	b.n	800c91e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d106      	bne.n	800c8a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7f6 fad4 	bl	8002e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	f000 fe96 	bl	800d5e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
	...

0800c928 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d001      	beq.n	800c940 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e04c      	b.n	800c9da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2202      	movs	r2, #2
 800c944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a26      	ldr	r2, [pc, #152]	@ (800c9e8 <HAL_TIM_Base_Start+0xc0>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d022      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c95a:	d01d      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a22      	ldr	r2, [pc, #136]	@ (800c9ec <HAL_TIM_Base_Start+0xc4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d018      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a21      	ldr	r2, [pc, #132]	@ (800c9f0 <HAL_TIM_Base_Start+0xc8>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d013      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a1f      	ldr	r2, [pc, #124]	@ (800c9f4 <HAL_TIM_Base_Start+0xcc>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d00e      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a1e      	ldr	r2, [pc, #120]	@ (800c9f8 <HAL_TIM_Base_Start+0xd0>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d009      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a1c      	ldr	r2, [pc, #112]	@ (800c9fc <HAL_TIM_Base_Start+0xd4>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d004      	beq.n	800c998 <HAL_TIM_Base_Start+0x70>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a1b      	ldr	r2, [pc, #108]	@ (800ca00 <HAL_TIM_Base_Start+0xd8>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d115      	bne.n	800c9c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	689a      	ldr	r2, [r3, #8]
 800c99e:	4b19      	ldr	r3, [pc, #100]	@ (800ca04 <HAL_TIM_Base_Start+0xdc>)
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b06      	cmp	r3, #6
 800c9a8:	d015      	beq.n	800c9d6 <HAL_TIM_Base_Start+0xae>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9b0:	d011      	beq.n	800c9d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f042 0201 	orr.w	r2, r2, #1
 800c9c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9c2:	e008      	b.n	800c9d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f042 0201 	orr.w	r2, r2, #1
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	e000      	b.n	800c9d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3714      	adds	r7, #20
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	40010000 	.word	0x40010000
 800c9ec:	40000400 	.word	0x40000400
 800c9f0:	40000800 	.word	0x40000800
 800c9f4:	40000c00 	.word	0x40000c00
 800c9f8:	40010400 	.word	0x40010400
 800c9fc:	40001800 	.word	0x40001800
 800ca00:	40014000 	.word	0x40014000
 800ca04:	00010007 	.word	0x00010007

0800ca08 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6a1a      	ldr	r2, [r3, #32]
 800ca16:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10f      	bne.n	800ca40 <HAL_TIM_Base_Stop+0x38>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	6a1a      	ldr	r2, [r3, #32]
 800ca26:	f240 4344 	movw	r3, #1092	@ 0x444
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d107      	bne.n	800ca40 <HAL_TIM_Base_Stop+0x38>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f022 0201 	bic.w	r2, r2, #1
 800ca3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d001      	beq.n	800ca70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e054      	b.n	800cb1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68da      	ldr	r2, [r3, #12]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f042 0201 	orr.w	r2, r2, #1
 800ca86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a26      	ldr	r2, [pc, #152]	@ (800cb28 <HAL_TIM_Base_Start_IT+0xd0>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d022      	beq.n	800cad8 <HAL_TIM_Base_Start_IT+0x80>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca9a:	d01d      	beq.n	800cad8 <HAL_TIM_Base_Start_IT+0x80>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a22      	ldr	r2, [pc, #136]	@ (800cb2c <HAL_TIM_Base_Start_IT+0xd4>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d018      	beq.n	800cad8 <HAL_TIM_Base_Start_IT+0x80>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a21      	ldr	r2, [pc, #132]	@ (800cb30 <HAL_TIM_Base_Start_IT+0xd8>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d013      	beq.n	800cad8 <HAL_TIM_Base_Start_IT+0x80>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a1f      	ldr	r2, [pc, #124]	@ (800cb34 <HAL_TIM_Base_Start_IT+0xdc>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d00e      	beq.n	800cad8 <HAL_TIM_Base_Start_IT+0x80>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a1e      	ldr	r2, [pc, #120]	@ (800cb38 <HAL_TIM_Base_Start_IT+0xe0>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d009      	beq.n	800cad8 <HAL_TIM_Base_Start_IT+0x80>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a1c      	ldr	r2, [pc, #112]	@ (800cb3c <HAL_TIM_Base_Start_IT+0xe4>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d004      	beq.n	800cad8 <HAL_TIM_Base_Start_IT+0x80>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a1b      	ldr	r2, [pc, #108]	@ (800cb40 <HAL_TIM_Base_Start_IT+0xe8>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d115      	bne.n	800cb04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	689a      	ldr	r2, [r3, #8]
 800cade:	4b19      	ldr	r3, [pc, #100]	@ (800cb44 <HAL_TIM_Base_Start_IT+0xec>)
 800cae0:	4013      	ands	r3, r2
 800cae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b06      	cmp	r3, #6
 800cae8:	d015      	beq.n	800cb16 <HAL_TIM_Base_Start_IT+0xbe>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caf0:	d011      	beq.n	800cb16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f042 0201 	orr.w	r2, r2, #1
 800cb00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb02:	e008      	b.n	800cb16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0201 	orr.w	r2, r2, #1
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	e000      	b.n	800cb18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3714      	adds	r7, #20
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	40010000 	.word	0x40010000
 800cb2c:	40000400 	.word	0x40000400
 800cb30:	40000800 	.word	0x40000800
 800cb34:	40000c00 	.word	0x40000c00
 800cb38:	40010400 	.word	0x40010400
 800cb3c:	40001800 	.word	0x40001800
 800cb40:	40014000 	.word	0x40014000
 800cb44:	00010007 	.word	0x00010007

0800cb48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e049      	b.n	800cbee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7f6 f94a 	bl	8002e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2202      	movs	r2, #2
 800cb78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3304      	adds	r3, #4
 800cb84:	4619      	mov	r1, r3
 800cb86:	4610      	mov	r0, r2
 800cb88:	f000 fd2e 	bl	800d5e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2201      	movs	r2, #1
 800cb98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2201      	movs	r2, #1
 800cba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
	...

0800cbf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d109      	bne.n	800cc1c <HAL_TIM_PWM_Start+0x24>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	bf14      	ite	ne
 800cc14:	2301      	movne	r3, #1
 800cc16:	2300      	moveq	r3, #0
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	e03c      	b.n	800cc96 <HAL_TIM_PWM_Start+0x9e>
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d109      	bne.n	800cc36 <HAL_TIM_PWM_Start+0x3e>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	bf14      	ite	ne
 800cc2e:	2301      	movne	r3, #1
 800cc30:	2300      	moveq	r3, #0
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	e02f      	b.n	800cc96 <HAL_TIM_PWM_Start+0x9e>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b08      	cmp	r3, #8
 800cc3a:	d109      	bne.n	800cc50 <HAL_TIM_PWM_Start+0x58>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	bf14      	ite	ne
 800cc48:	2301      	movne	r3, #1
 800cc4a:	2300      	moveq	r3, #0
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	e022      	b.n	800cc96 <HAL_TIM_PWM_Start+0x9e>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	2b0c      	cmp	r3, #12
 800cc54:	d109      	bne.n	800cc6a <HAL_TIM_PWM_Start+0x72>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	bf14      	ite	ne
 800cc62:	2301      	movne	r3, #1
 800cc64:	2300      	moveq	r3, #0
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	e015      	b.n	800cc96 <HAL_TIM_PWM_Start+0x9e>
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	2b10      	cmp	r3, #16
 800cc6e:	d109      	bne.n	800cc84 <HAL_TIM_PWM_Start+0x8c>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	bf14      	ite	ne
 800cc7c:	2301      	movne	r3, #1
 800cc7e:	2300      	moveq	r3, #0
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	e008      	b.n	800cc96 <HAL_TIM_PWM_Start+0x9e>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	bf14      	ite	ne
 800cc90:	2301      	movne	r3, #1
 800cc92:	2300      	moveq	r3, #0
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e0a1      	b.n	800cde2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d104      	bne.n	800ccae <HAL_TIM_PWM_Start+0xb6>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2202      	movs	r2, #2
 800cca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ccac:	e023      	b.n	800ccf6 <HAL_TIM_PWM_Start+0xfe>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b04      	cmp	r3, #4
 800ccb2:	d104      	bne.n	800ccbe <HAL_TIM_PWM_Start+0xc6>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ccbc:	e01b      	b.n	800ccf6 <HAL_TIM_PWM_Start+0xfe>
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2b08      	cmp	r3, #8
 800ccc2:	d104      	bne.n	800ccce <HAL_TIM_PWM_Start+0xd6>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2202      	movs	r2, #2
 800ccc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cccc:	e013      	b.n	800ccf6 <HAL_TIM_PWM_Start+0xfe>
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b0c      	cmp	r3, #12
 800ccd2:	d104      	bne.n	800ccde <HAL_TIM_PWM_Start+0xe6>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ccdc:	e00b      	b.n	800ccf6 <HAL_TIM_PWM_Start+0xfe>
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	2b10      	cmp	r3, #16
 800cce2:	d104      	bne.n	800ccee <HAL_TIM_PWM_Start+0xf6>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2202      	movs	r2, #2
 800cce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ccec:	e003      	b.n	800ccf6 <HAL_TIM_PWM_Start+0xfe>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f001 f880 	bl	800de04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a38      	ldr	r2, [pc, #224]	@ (800cdec <HAL_TIM_PWM_Start+0x1f4>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d013      	beq.n	800cd36 <HAL_TIM_PWM_Start+0x13e>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a37      	ldr	r2, [pc, #220]	@ (800cdf0 <HAL_TIM_PWM_Start+0x1f8>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d00e      	beq.n	800cd36 <HAL_TIM_PWM_Start+0x13e>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a35      	ldr	r2, [pc, #212]	@ (800cdf4 <HAL_TIM_PWM_Start+0x1fc>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d009      	beq.n	800cd36 <HAL_TIM_PWM_Start+0x13e>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a34      	ldr	r2, [pc, #208]	@ (800cdf8 <HAL_TIM_PWM_Start+0x200>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d004      	beq.n	800cd36 <HAL_TIM_PWM_Start+0x13e>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a32      	ldr	r2, [pc, #200]	@ (800cdfc <HAL_TIM_PWM_Start+0x204>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d101      	bne.n	800cd3a <HAL_TIM_PWM_Start+0x142>
 800cd36:	2301      	movs	r3, #1
 800cd38:	e000      	b.n	800cd3c <HAL_TIM_PWM_Start+0x144>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cd4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a25      	ldr	r2, [pc, #148]	@ (800cdec <HAL_TIM_PWM_Start+0x1f4>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d022      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x1a8>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd62:	d01d      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x1a8>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a25      	ldr	r2, [pc, #148]	@ (800ce00 <HAL_TIM_PWM_Start+0x208>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d018      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x1a8>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a24      	ldr	r2, [pc, #144]	@ (800ce04 <HAL_TIM_PWM_Start+0x20c>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d013      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x1a8>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a22      	ldr	r2, [pc, #136]	@ (800ce08 <HAL_TIM_PWM_Start+0x210>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d00e      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x1a8>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a1a      	ldr	r2, [pc, #104]	@ (800cdf0 <HAL_TIM_PWM_Start+0x1f8>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d009      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x1a8>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a1e      	ldr	r2, [pc, #120]	@ (800ce0c <HAL_TIM_PWM_Start+0x214>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d004      	beq.n	800cda0 <HAL_TIM_PWM_Start+0x1a8>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a16      	ldr	r2, [pc, #88]	@ (800cdf4 <HAL_TIM_PWM_Start+0x1fc>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d115      	bne.n	800cdcc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689a      	ldr	r2, [r3, #8]
 800cda6:	4b1a      	ldr	r3, [pc, #104]	@ (800ce10 <HAL_TIM_PWM_Start+0x218>)
 800cda8:	4013      	ands	r3, r2
 800cdaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b06      	cmp	r3, #6
 800cdb0:	d015      	beq.n	800cdde <HAL_TIM_PWM_Start+0x1e6>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdb8:	d011      	beq.n	800cdde <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f042 0201 	orr.w	r2, r2, #1
 800cdc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdca:	e008      	b.n	800cdde <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f042 0201 	orr.w	r2, r2, #1
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	e000      	b.n	800cde0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	40010000 	.word	0x40010000
 800cdf0:	40010400 	.word	0x40010400
 800cdf4:	40014000 	.word	0x40014000
 800cdf8:	40014400 	.word	0x40014400
 800cdfc:	40014800 	.word	0x40014800
 800ce00:	40000400 	.word	0x40000400
 800ce04:	40000800 	.word	0x40000800
 800ce08:	40000c00 	.word	0x40000c00
 800ce0c:	40001800 	.word	0x40001800
 800ce10:	00010007 	.word	0x00010007

0800ce14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2200      	movs	r2, #0
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 ffec 	bl	800de04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a3e      	ldr	r2, [pc, #248]	@ (800cf2c <HAL_TIM_PWM_Stop+0x118>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d013      	beq.n	800ce5e <HAL_TIM_PWM_Stop+0x4a>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a3d      	ldr	r2, [pc, #244]	@ (800cf30 <HAL_TIM_PWM_Stop+0x11c>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d00e      	beq.n	800ce5e <HAL_TIM_PWM_Stop+0x4a>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a3b      	ldr	r2, [pc, #236]	@ (800cf34 <HAL_TIM_PWM_Stop+0x120>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d009      	beq.n	800ce5e <HAL_TIM_PWM_Stop+0x4a>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a3a      	ldr	r2, [pc, #232]	@ (800cf38 <HAL_TIM_PWM_Stop+0x124>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d004      	beq.n	800ce5e <HAL_TIM_PWM_Stop+0x4a>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a38      	ldr	r2, [pc, #224]	@ (800cf3c <HAL_TIM_PWM_Stop+0x128>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d101      	bne.n	800ce62 <HAL_TIM_PWM_Stop+0x4e>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e000      	b.n	800ce64 <HAL_TIM_PWM_Stop+0x50>
 800ce62:	2300      	movs	r3, #0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d017      	beq.n	800ce98 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6a1a      	ldr	r2, [r3, #32]
 800ce6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ce72:	4013      	ands	r3, r2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10f      	bne.n	800ce98 <HAL_TIM_PWM_Stop+0x84>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6a1a      	ldr	r2, [r3, #32]
 800ce7e:	f240 4344 	movw	r3, #1092	@ 0x444
 800ce82:	4013      	ands	r3, r2
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d107      	bne.n	800ce98 <HAL_TIM_PWM_Stop+0x84>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ce96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6a1a      	ldr	r2, [r3, #32]
 800ce9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cea2:	4013      	ands	r3, r2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10f      	bne.n	800cec8 <HAL_TIM_PWM_Stop+0xb4>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6a1a      	ldr	r2, [r3, #32]
 800ceae:	f240 4344 	movw	r3, #1092	@ 0x444
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d107      	bne.n	800cec8 <HAL_TIM_PWM_Stop+0xb4>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 0201 	bic.w	r2, r2, #1
 800cec6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d104      	bne.n	800ced8 <HAL_TIM_PWM_Stop+0xc4>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ced6:	e023      	b.n	800cf20 <HAL_TIM_PWM_Stop+0x10c>
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b04      	cmp	r3, #4
 800cedc:	d104      	bne.n	800cee8 <HAL_TIM_PWM_Stop+0xd4>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2201      	movs	r2, #1
 800cee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cee6:	e01b      	b.n	800cf20 <HAL_TIM_PWM_Stop+0x10c>
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	2b08      	cmp	r3, #8
 800ceec:	d104      	bne.n	800cef8 <HAL_TIM_PWM_Stop+0xe4>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cef6:	e013      	b.n	800cf20 <HAL_TIM_PWM_Stop+0x10c>
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2b0c      	cmp	r3, #12
 800cefc:	d104      	bne.n	800cf08 <HAL_TIM_PWM_Stop+0xf4>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cf06:	e00b      	b.n	800cf20 <HAL_TIM_PWM_Stop+0x10c>
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2b10      	cmp	r3, #16
 800cf0c:	d104      	bne.n	800cf18 <HAL_TIM_PWM_Stop+0x104>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cf16:	e003      	b.n	800cf20 <HAL_TIM_PWM_Stop+0x10c>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	40010000 	.word	0x40010000
 800cf30:	40010400 	.word	0x40010400
 800cf34:	40014000 	.word	0x40014000
 800cf38:	40014400 	.word	0x40014400
 800cf3c:	40014800 	.word	0x40014800

0800cf40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	f003 0302 	and.w	r3, r3, #2
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d122      	bne.n	800cf9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	f003 0302 	and.w	r3, r3, #2
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d11b      	bne.n	800cf9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f06f 0202 	mvn.w	r2, #2
 800cf6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	699b      	ldr	r3, [r3, #24]
 800cf7a:	f003 0303 	and.w	r3, r3, #3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fb12 	bl	800d5ac <HAL_TIM_IC_CaptureCallback>
 800cf88:	e005      	b.n	800cf96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 fb04 	bl	800d598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fb15 	bl	800d5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	f003 0304 	and.w	r3, r3, #4
 800cfa6:	2b04      	cmp	r3, #4
 800cfa8:	d122      	bne.n	800cff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	f003 0304 	and.w	r3, r3, #4
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d11b      	bne.n	800cff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f06f 0204 	mvn.w	r2, #4
 800cfc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2202      	movs	r2, #2
 800cfc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fae8 	bl	800d5ac <HAL_TIM_IC_CaptureCallback>
 800cfdc:	e005      	b.n	800cfea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fada 	bl	800d598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 faeb 	bl	800d5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	f003 0308 	and.w	r3, r3, #8
 800cffa:	2b08      	cmp	r3, #8
 800cffc:	d122      	bne.n	800d044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	f003 0308 	and.w	r3, r3, #8
 800d008:	2b08      	cmp	r3, #8
 800d00a:	d11b      	bne.n	800d044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f06f 0208 	mvn.w	r2, #8
 800d014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2204      	movs	r2, #4
 800d01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	f003 0303 	and.w	r3, r3, #3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d003      	beq.n	800d032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fabe 	bl	800d5ac <HAL_TIM_IC_CaptureCallback>
 800d030:	e005      	b.n	800d03e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fab0 	bl	800d598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fac1 	bl	800d5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	f003 0310 	and.w	r3, r3, #16
 800d04e:	2b10      	cmp	r3, #16
 800d050:	d122      	bne.n	800d098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	f003 0310 	and.w	r3, r3, #16
 800d05c:	2b10      	cmp	r3, #16
 800d05e:	d11b      	bne.n	800d098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f06f 0210 	mvn.w	r2, #16
 800d068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2208      	movs	r2, #8
 800d06e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	69db      	ldr	r3, [r3, #28]
 800d076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d003      	beq.n	800d086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fa94 	bl	800d5ac <HAL_TIM_IC_CaptureCallback>
 800d084:	e005      	b.n	800d092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 fa86 	bl	800d598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fa97 	bl	800d5c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d10e      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	f003 0301 	and.w	r3, r3, #1
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d107      	bne.n	800d0c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f06f 0201 	mvn.w	r2, #1
 800d0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7f5 fae0 	bl	8002684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0ce:	2b80      	cmp	r3, #128	@ 0x80
 800d0d0:	d10e      	bne.n	800d0f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0dc:	2b80      	cmp	r3, #128	@ 0x80
 800d0de:	d107      	bne.n	800d0f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 ff48 	bl	800df80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0fe:	d10e      	bne.n	800d11e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d10a:	2b80      	cmp	r3, #128	@ 0x80
 800d10c:	d107      	bne.n	800d11e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 ff3b 	bl	800df94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d128:	2b40      	cmp	r3, #64	@ 0x40
 800d12a:	d10e      	bne.n	800d14a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d136:	2b40      	cmp	r3, #64	@ 0x40
 800d138:	d107      	bne.n	800d14a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fa45 	bl	800d5d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	f003 0320 	and.w	r3, r3, #32
 800d154:	2b20      	cmp	r3, #32
 800d156:	d10e      	bne.n	800d176 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	f003 0320 	and.w	r3, r3, #32
 800d162:	2b20      	cmp	r3, #32
 800d164:	d107      	bne.n	800d176 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f06f 0220 	mvn.w	r2, #32
 800d16e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 fefb 	bl	800df6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
	...

0800d180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d18c:	2300      	movs	r3, #0
 800d18e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d196:	2b01      	cmp	r3, #1
 800d198:	d101      	bne.n	800d19e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d19a:	2302      	movs	r3, #2
 800d19c:	e0ff      	b.n	800d39e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b14      	cmp	r3, #20
 800d1aa:	f200 80f0 	bhi.w	800d38e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d1b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b4:	0800d209 	.word	0x0800d209
 800d1b8:	0800d38f 	.word	0x0800d38f
 800d1bc:	0800d38f 	.word	0x0800d38f
 800d1c0:	0800d38f 	.word	0x0800d38f
 800d1c4:	0800d249 	.word	0x0800d249
 800d1c8:	0800d38f 	.word	0x0800d38f
 800d1cc:	0800d38f 	.word	0x0800d38f
 800d1d0:	0800d38f 	.word	0x0800d38f
 800d1d4:	0800d28b 	.word	0x0800d28b
 800d1d8:	0800d38f 	.word	0x0800d38f
 800d1dc:	0800d38f 	.word	0x0800d38f
 800d1e0:	0800d38f 	.word	0x0800d38f
 800d1e4:	0800d2cb 	.word	0x0800d2cb
 800d1e8:	0800d38f 	.word	0x0800d38f
 800d1ec:	0800d38f 	.word	0x0800d38f
 800d1f0:	0800d38f 	.word	0x0800d38f
 800d1f4:	0800d30d 	.word	0x0800d30d
 800d1f8:	0800d38f 	.word	0x0800d38f
 800d1fc:	0800d38f 	.word	0x0800d38f
 800d200:	0800d38f 	.word	0x0800d38f
 800d204:	0800d34d 	.word	0x0800d34d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 fa84 	bl	800d71c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	699a      	ldr	r2, [r3, #24]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f042 0208 	orr.w	r2, r2, #8
 800d222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	699a      	ldr	r2, [r3, #24]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f022 0204 	bic.w	r2, r2, #4
 800d232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6999      	ldr	r1, [r3, #24]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	691a      	ldr	r2, [r3, #16]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	430a      	orrs	r2, r1
 800d244:	619a      	str	r2, [r3, #24]
      break;
 800d246:	e0a5      	b.n	800d394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	68b9      	ldr	r1, [r7, #8]
 800d24e:	4618      	mov	r0, r3
 800d250:	f000 faf4 	bl	800d83c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	699a      	ldr	r2, [r3, #24]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	699a      	ldr	r2, [r3, #24]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6999      	ldr	r1, [r3, #24]
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	021a      	lsls	r2, r3, #8
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	430a      	orrs	r2, r1
 800d286:	619a      	str	r2, [r3, #24]
      break;
 800d288:	e084      	b.n	800d394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	4618      	mov	r0, r3
 800d292:	f000 fb5d 	bl	800d950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69da      	ldr	r2, [r3, #28]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f042 0208 	orr.w	r2, r2, #8
 800d2a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	69da      	ldr	r2, [r3, #28]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f022 0204 	bic.w	r2, r2, #4
 800d2b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	69d9      	ldr	r1, [r3, #28]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	691a      	ldr	r2, [r3, #16]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	430a      	orrs	r2, r1
 800d2c6:	61da      	str	r2, [r3, #28]
      break;
 800d2c8:	e064      	b.n	800d394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68b9      	ldr	r1, [r7, #8]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 fbc5 	bl	800da60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	69da      	ldr	r2, [r3, #28]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d2e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	69da      	ldr	r2, [r3, #28]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d2f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	69d9      	ldr	r1, [r3, #28]
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	691b      	ldr	r3, [r3, #16]
 800d300:	021a      	lsls	r2, r3, #8
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	61da      	str	r2, [r3, #28]
      break;
 800d30a:	e043      	b.n	800d394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	4618      	mov	r0, r3
 800d314:	f000 fc0e 	bl	800db34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f042 0208 	orr.w	r2, r2, #8
 800d326:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f022 0204 	bic.w	r2, r2, #4
 800d336:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	691a      	ldr	r2, [r3, #16]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d34a:	e023      	b.n	800d394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	4618      	mov	r0, r3
 800d354:	f000 fc52 	bl	800dbfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d366:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d376:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	021a      	lsls	r2, r3, #8
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	430a      	orrs	r2, r1
 800d38a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d38c:	e002      	b.n	800d394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	75fb      	strb	r3, [r7, #23]
      break;
 800d392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2200      	movs	r2, #0
 800d398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3718      	adds	r7, #24
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop

0800d3a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d101      	bne.n	800d3c4 <HAL_TIM_ConfigClockSource+0x1c>
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e0dc      	b.n	800d57e <HAL_TIM_ConfigClockSource+0x1d6>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	4b6a      	ldr	r3, [pc, #424]	@ (800d588 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d3ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a64      	ldr	r2, [pc, #400]	@ (800d58c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	f000 80a9 	beq.w	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d400:	4a62      	ldr	r2, [pc, #392]	@ (800d58c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d402:	4293      	cmp	r3, r2
 800d404:	f200 80ae 	bhi.w	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d408:	4a61      	ldr	r2, [pc, #388]	@ (800d590 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	f000 80a1 	beq.w	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d410:	4a5f      	ldr	r2, [pc, #380]	@ (800d590 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d412:	4293      	cmp	r3, r2
 800d414:	f200 80a6 	bhi.w	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d418:	4a5e      	ldr	r2, [pc, #376]	@ (800d594 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	f000 8099 	beq.w	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d420:	4a5c      	ldr	r2, [pc, #368]	@ (800d594 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d422:	4293      	cmp	r3, r2
 800d424:	f200 809e 	bhi.w	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d428:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d42c:	f000 8091 	beq.w	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d430:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d434:	f200 8096 	bhi.w	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d43c:	f000 8089 	beq.w	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d444:	f200 808e 	bhi.w	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d44c:	d03e      	beq.n	800d4cc <HAL_TIM_ConfigClockSource+0x124>
 800d44e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d452:	f200 8087 	bhi.w	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d45a:	f000 8086 	beq.w	800d56a <HAL_TIM_ConfigClockSource+0x1c2>
 800d45e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d462:	d87f      	bhi.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d464:	2b70      	cmp	r3, #112	@ 0x70
 800d466:	d01a      	beq.n	800d49e <HAL_TIM_ConfigClockSource+0xf6>
 800d468:	2b70      	cmp	r3, #112	@ 0x70
 800d46a:	d87b      	bhi.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d46c:	2b60      	cmp	r3, #96	@ 0x60
 800d46e:	d050      	beq.n	800d512 <HAL_TIM_ConfigClockSource+0x16a>
 800d470:	2b60      	cmp	r3, #96	@ 0x60
 800d472:	d877      	bhi.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d474:	2b50      	cmp	r3, #80	@ 0x50
 800d476:	d03c      	beq.n	800d4f2 <HAL_TIM_ConfigClockSource+0x14a>
 800d478:	2b50      	cmp	r3, #80	@ 0x50
 800d47a:	d873      	bhi.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d47c:	2b40      	cmp	r3, #64	@ 0x40
 800d47e:	d058      	beq.n	800d532 <HAL_TIM_ConfigClockSource+0x18a>
 800d480:	2b40      	cmp	r3, #64	@ 0x40
 800d482:	d86f      	bhi.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d484:	2b30      	cmp	r3, #48	@ 0x30
 800d486:	d064      	beq.n	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d488:	2b30      	cmp	r3, #48	@ 0x30
 800d48a:	d86b      	bhi.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d48c:	2b20      	cmp	r3, #32
 800d48e:	d060      	beq.n	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d490:	2b20      	cmp	r3, #32
 800d492:	d867      	bhi.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
 800d494:	2b00      	cmp	r3, #0
 800d496:	d05c      	beq.n	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d498:	2b10      	cmp	r3, #16
 800d49a:	d05a      	beq.n	800d552 <HAL_TIM_ConfigClockSource+0x1aa>
 800d49c:	e062      	b.n	800d564 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d4ae:	f000 fc89 	bl	800ddc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d4c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	68ba      	ldr	r2, [r7, #8]
 800d4c8:	609a      	str	r2, [r3, #8]
      break;
 800d4ca:	e04f      	b.n	800d56c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d4dc:	f000 fc72 	bl	800ddc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	689a      	ldr	r2, [r3, #8]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d4ee:	609a      	str	r2, [r3, #8]
      break;
 800d4f0:	e03c      	b.n	800d56c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4fe:	461a      	mov	r2, r3
 800d500:	f000 fbe2 	bl	800dcc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2150      	movs	r1, #80	@ 0x50
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fc3c 	bl	800dd88 <TIM_ITRx_SetConfig>
      break;
 800d510:	e02c      	b.n	800d56c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d51e:	461a      	mov	r2, r3
 800d520:	f000 fc01 	bl	800dd26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2160      	movs	r1, #96	@ 0x60
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 fc2c 	bl	800dd88 <TIM_ITRx_SetConfig>
      break;
 800d530:	e01c      	b.n	800d56c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d53e:	461a      	mov	r2, r3
 800d540:	f000 fbc2 	bl	800dcc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2140      	movs	r1, #64	@ 0x40
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 fc1c 	bl	800dd88 <TIM_ITRx_SetConfig>
      break;
 800d550:	e00c      	b.n	800d56c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4619      	mov	r1, r3
 800d55c:	4610      	mov	r0, r2
 800d55e:	f000 fc13 	bl	800dd88 <TIM_ITRx_SetConfig>
      break;
 800d562:	e003      	b.n	800d56c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	73fb      	strb	r3, [r7, #15]
      break;
 800d568:	e000      	b.n	800d56c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d56a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	ffceff88 	.word	0xffceff88
 800d58c:	00100040 	.word	0x00100040
 800d590:	00100030 	.word	0x00100030
 800d594:	00100020 	.word	0x00100020

0800d598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5c8:	bf00      	nop
 800d5ca:	370c      	adds	r7, #12
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4a40      	ldr	r2, [pc, #256]	@ (800d6fc <TIM_Base_SetConfig+0x114>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d013      	beq.n	800d628 <TIM_Base_SetConfig+0x40>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d606:	d00f      	beq.n	800d628 <TIM_Base_SetConfig+0x40>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a3d      	ldr	r2, [pc, #244]	@ (800d700 <TIM_Base_SetConfig+0x118>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d00b      	beq.n	800d628 <TIM_Base_SetConfig+0x40>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a3c      	ldr	r2, [pc, #240]	@ (800d704 <TIM_Base_SetConfig+0x11c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d007      	beq.n	800d628 <TIM_Base_SetConfig+0x40>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a3b      	ldr	r2, [pc, #236]	@ (800d708 <TIM_Base_SetConfig+0x120>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d003      	beq.n	800d628 <TIM_Base_SetConfig+0x40>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a3a      	ldr	r2, [pc, #232]	@ (800d70c <TIM_Base_SetConfig+0x124>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d108      	bne.n	800d63a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d62e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	4313      	orrs	r3, r2
 800d638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a2f      	ldr	r2, [pc, #188]	@ (800d6fc <TIM_Base_SetConfig+0x114>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d01f      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d648:	d01b      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a2c      	ldr	r2, [pc, #176]	@ (800d700 <TIM_Base_SetConfig+0x118>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d017      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a2b      	ldr	r2, [pc, #172]	@ (800d704 <TIM_Base_SetConfig+0x11c>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d013      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a2a      	ldr	r2, [pc, #168]	@ (800d708 <TIM_Base_SetConfig+0x120>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d00f      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a29      	ldr	r2, [pc, #164]	@ (800d70c <TIM_Base_SetConfig+0x124>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d00b      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a28      	ldr	r2, [pc, #160]	@ (800d710 <TIM_Base_SetConfig+0x128>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d007      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a27      	ldr	r2, [pc, #156]	@ (800d714 <TIM_Base_SetConfig+0x12c>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d003      	beq.n	800d682 <TIM_Base_SetConfig+0x9a>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a26      	ldr	r2, [pc, #152]	@ (800d718 <TIM_Base_SetConfig+0x130>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d108      	bne.n	800d694 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	4313      	orrs	r3, r2
 800d692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	695b      	ldr	r3, [r3, #20]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	689a      	ldr	r2, [r3, #8]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a10      	ldr	r2, [pc, #64]	@ (800d6fc <TIM_Base_SetConfig+0x114>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d00f      	beq.n	800d6e0 <TIM_Base_SetConfig+0xf8>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a12      	ldr	r2, [pc, #72]	@ (800d70c <TIM_Base_SetConfig+0x124>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d00b      	beq.n	800d6e0 <TIM_Base_SetConfig+0xf8>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a11      	ldr	r2, [pc, #68]	@ (800d710 <TIM_Base_SetConfig+0x128>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d007      	beq.n	800d6e0 <TIM_Base_SetConfig+0xf8>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a10      	ldr	r2, [pc, #64]	@ (800d714 <TIM_Base_SetConfig+0x12c>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d003      	beq.n	800d6e0 <TIM_Base_SetConfig+0xf8>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a0f      	ldr	r2, [pc, #60]	@ (800d718 <TIM_Base_SetConfig+0x130>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d103      	bne.n	800d6e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	691a      	ldr	r2, [r3, #16]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	615a      	str	r2, [r3, #20]
}
 800d6ee:	bf00      	nop
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	40010000 	.word	0x40010000
 800d700:	40000400 	.word	0x40000400
 800d704:	40000800 	.word	0x40000800
 800d708:	40000c00 	.word	0x40000c00
 800d70c:	40010400 	.word	0x40010400
 800d710:	40014000 	.word	0x40014000
 800d714:	40014400 	.word	0x40014400
 800d718:	40014800 	.word	0x40014800

0800d71c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b087      	sub	sp, #28
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	f023 0201 	bic.w	r2, r3, #1
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	4b37      	ldr	r3, [pc, #220]	@ (800d824 <TIM_OC1_SetConfig+0x108>)
 800d748:	4013      	ands	r3, r2
 800d74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f023 0303 	bic.w	r3, r3, #3
 800d752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	4313      	orrs	r3, r2
 800d75c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f023 0302 	bic.w	r3, r3, #2
 800d764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	689b      	ldr	r3, [r3, #8]
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a2d      	ldr	r2, [pc, #180]	@ (800d828 <TIM_OC1_SetConfig+0x10c>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d00f      	beq.n	800d798 <TIM_OC1_SetConfig+0x7c>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a2c      	ldr	r2, [pc, #176]	@ (800d82c <TIM_OC1_SetConfig+0x110>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d00b      	beq.n	800d798 <TIM_OC1_SetConfig+0x7c>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a2b      	ldr	r2, [pc, #172]	@ (800d830 <TIM_OC1_SetConfig+0x114>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d007      	beq.n	800d798 <TIM_OC1_SetConfig+0x7c>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4a2a      	ldr	r2, [pc, #168]	@ (800d834 <TIM_OC1_SetConfig+0x118>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d003      	beq.n	800d798 <TIM_OC1_SetConfig+0x7c>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a29      	ldr	r2, [pc, #164]	@ (800d838 <TIM_OC1_SetConfig+0x11c>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d10c      	bne.n	800d7b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	f023 0308 	bic.w	r3, r3, #8
 800d79e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f023 0304 	bic.w	r3, r3, #4
 800d7b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4a1c      	ldr	r2, [pc, #112]	@ (800d828 <TIM_OC1_SetConfig+0x10c>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d00f      	beq.n	800d7da <TIM_OC1_SetConfig+0xbe>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800d82c <TIM_OC1_SetConfig+0x110>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d00b      	beq.n	800d7da <TIM_OC1_SetConfig+0xbe>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4a1a      	ldr	r2, [pc, #104]	@ (800d830 <TIM_OC1_SetConfig+0x114>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d007      	beq.n	800d7da <TIM_OC1_SetConfig+0xbe>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4a19      	ldr	r2, [pc, #100]	@ (800d834 <TIM_OC1_SetConfig+0x118>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d003      	beq.n	800d7da <TIM_OC1_SetConfig+0xbe>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a18      	ldr	r2, [pc, #96]	@ (800d838 <TIM_OC1_SetConfig+0x11c>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d111      	bne.n	800d7fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d7e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	699b      	ldr	r3, [r3, #24]
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	685a      	ldr	r2, [r3, #4]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	621a      	str	r2, [r3, #32]
}
 800d818:	bf00      	nop
 800d81a:	371c      	adds	r7, #28
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	fffeff8f 	.word	0xfffeff8f
 800d828:	40010000 	.word	0x40010000
 800d82c:	40010400 	.word	0x40010400
 800d830:	40014000 	.word	0x40014000
 800d834:	40014400 	.word	0x40014400
 800d838:	40014800 	.word	0x40014800

0800d83c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b087      	sub	sp, #28
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a1b      	ldr	r3, [r3, #32]
 800d84a:	f023 0210 	bic.w	r2, r3, #16
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	4b34      	ldr	r3, [pc, #208]	@ (800d938 <TIM_OC2_SetConfig+0xfc>)
 800d868:	4013      	ands	r3, r2
 800d86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	4313      	orrs	r3, r2
 800d87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	f023 0320 	bic.w	r3, r3, #32
 800d886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	011b      	lsls	r3, r3, #4
 800d88e:	697a      	ldr	r2, [r7, #20]
 800d890:	4313      	orrs	r3, r2
 800d892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4a29      	ldr	r2, [pc, #164]	@ (800d93c <TIM_OC2_SetConfig+0x100>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d003      	beq.n	800d8a4 <TIM_OC2_SetConfig+0x68>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	4a28      	ldr	r2, [pc, #160]	@ (800d940 <TIM_OC2_SetConfig+0x104>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d10d      	bne.n	800d8c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	011b      	lsls	r3, r3, #4
 800d8b2:	697a      	ldr	r2, [r7, #20]
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a1e      	ldr	r2, [pc, #120]	@ (800d93c <TIM_OC2_SetConfig+0x100>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d00f      	beq.n	800d8e8 <TIM_OC2_SetConfig+0xac>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a1d      	ldr	r2, [pc, #116]	@ (800d940 <TIM_OC2_SetConfig+0x104>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d00b      	beq.n	800d8e8 <TIM_OC2_SetConfig+0xac>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a1c      	ldr	r2, [pc, #112]	@ (800d944 <TIM_OC2_SetConfig+0x108>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d007      	beq.n	800d8e8 <TIM_OC2_SetConfig+0xac>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a1b      	ldr	r2, [pc, #108]	@ (800d948 <TIM_OC2_SetConfig+0x10c>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d003      	beq.n	800d8e8 <TIM_OC2_SetConfig+0xac>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a1a      	ldr	r2, [pc, #104]	@ (800d94c <TIM_OC2_SetConfig+0x110>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d113      	bne.n	800d910 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d8ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d8f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	693a      	ldr	r2, [r7, #16]
 800d900:	4313      	orrs	r3, r2
 800d902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	693a      	ldr	r2, [r7, #16]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	693a      	ldr	r2, [r7, #16]
 800d914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	621a      	str	r2, [r3, #32]
}
 800d92a:	bf00      	nop
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	feff8fff 	.word	0xfeff8fff
 800d93c:	40010000 	.word	0x40010000
 800d940:	40010400 	.word	0x40010400
 800d944:	40014000 	.word	0x40014000
 800d948:	40014400 	.word	0x40014400
 800d94c:	40014800 	.word	0x40014800

0800d950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	69db      	ldr	r3, [r3, #28]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4b33      	ldr	r3, [pc, #204]	@ (800da48 <TIM_OC3_SetConfig+0xf8>)
 800d97c:	4013      	ands	r3, r2
 800d97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f023 0303 	bic.w	r3, r3, #3
 800d986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	4313      	orrs	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	021b      	lsls	r3, r3, #8
 800d9a0:	697a      	ldr	r2, [r7, #20]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a28      	ldr	r2, [pc, #160]	@ (800da4c <TIM_OC3_SetConfig+0xfc>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d003      	beq.n	800d9b6 <TIM_OC3_SetConfig+0x66>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a27      	ldr	r2, [pc, #156]	@ (800da50 <TIM_OC3_SetConfig+0x100>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d10d      	bne.n	800d9d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	021b      	lsls	r3, r3, #8
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4a1d      	ldr	r2, [pc, #116]	@ (800da4c <TIM_OC3_SetConfig+0xfc>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d00f      	beq.n	800d9fa <TIM_OC3_SetConfig+0xaa>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a1c      	ldr	r2, [pc, #112]	@ (800da50 <TIM_OC3_SetConfig+0x100>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d00b      	beq.n	800d9fa <TIM_OC3_SetConfig+0xaa>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a1b      	ldr	r2, [pc, #108]	@ (800da54 <TIM_OC3_SetConfig+0x104>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d007      	beq.n	800d9fa <TIM_OC3_SetConfig+0xaa>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a1a      	ldr	r2, [pc, #104]	@ (800da58 <TIM_OC3_SetConfig+0x108>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d003      	beq.n	800d9fa <TIM_OC3_SetConfig+0xaa>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a19      	ldr	r2, [pc, #100]	@ (800da5c <TIM_OC3_SetConfig+0x10c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d113      	bne.n	800da22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800da08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	011b      	lsls	r3, r3, #4
 800da10:	693a      	ldr	r2, [r7, #16]
 800da12:	4313      	orrs	r3, r2
 800da14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	011b      	lsls	r3, r3, #4
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	4313      	orrs	r3, r2
 800da20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	693a      	ldr	r2, [r7, #16]
 800da26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	685a      	ldr	r2, [r3, #4]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	621a      	str	r2, [r3, #32]
}
 800da3c:	bf00      	nop
 800da3e:	371c      	adds	r7, #28
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr
 800da48:	fffeff8f 	.word	0xfffeff8f
 800da4c:	40010000 	.word	0x40010000
 800da50:	40010400 	.word	0x40010400
 800da54:	40014000 	.word	0x40014000
 800da58:	40014400 	.word	0x40014400
 800da5c:	40014800 	.word	0x40014800

0800da60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da60:	b480      	push	{r7}
 800da62:	b087      	sub	sp, #28
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a1b      	ldr	r3, [r3, #32]
 800da6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6a1b      	ldr	r3, [r3, #32]
 800da7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	69db      	ldr	r3, [r3, #28]
 800da86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	4b24      	ldr	r3, [pc, #144]	@ (800db1c <TIM_OC4_SetConfig+0xbc>)
 800da8c:	4013      	ands	r3, r2
 800da8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	021b      	lsls	r3, r3, #8
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800daaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	031b      	lsls	r3, r3, #12
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	4313      	orrs	r3, r2
 800dab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	4a19      	ldr	r2, [pc, #100]	@ (800db20 <TIM_OC4_SetConfig+0xc0>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d00f      	beq.n	800dae0 <TIM_OC4_SetConfig+0x80>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	4a18      	ldr	r2, [pc, #96]	@ (800db24 <TIM_OC4_SetConfig+0xc4>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d00b      	beq.n	800dae0 <TIM_OC4_SetConfig+0x80>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	4a17      	ldr	r2, [pc, #92]	@ (800db28 <TIM_OC4_SetConfig+0xc8>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d007      	beq.n	800dae0 <TIM_OC4_SetConfig+0x80>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4a16      	ldr	r2, [pc, #88]	@ (800db2c <TIM_OC4_SetConfig+0xcc>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d003      	beq.n	800dae0 <TIM_OC4_SetConfig+0x80>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a15      	ldr	r2, [pc, #84]	@ (800db30 <TIM_OC4_SetConfig+0xd0>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d109      	bne.n	800daf4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	019b      	lsls	r3, r3, #6
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	685a      	ldr	r2, [r3, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	693a      	ldr	r2, [r7, #16]
 800db0c:	621a      	str	r2, [r3, #32]
}
 800db0e:	bf00      	nop
 800db10:	371c      	adds	r7, #28
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	feff8fff 	.word	0xfeff8fff
 800db20:	40010000 	.word	0x40010000
 800db24:	40010400 	.word	0x40010400
 800db28:	40014000 	.word	0x40014000
 800db2c:	40014400 	.word	0x40014400
 800db30:	40014800 	.word	0x40014800

0800db34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	4b21      	ldr	r3, [pc, #132]	@ (800dbe4 <TIM_OC5_SetConfig+0xb0>)
 800db60:	4013      	ands	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	4313      	orrs	r3, r2
 800db6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800db74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	689b      	ldr	r3, [r3, #8]
 800db7a:	041b      	lsls	r3, r3, #16
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	4313      	orrs	r3, r2
 800db80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4a18      	ldr	r2, [pc, #96]	@ (800dbe8 <TIM_OC5_SetConfig+0xb4>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d00f      	beq.n	800dbaa <TIM_OC5_SetConfig+0x76>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4a17      	ldr	r2, [pc, #92]	@ (800dbec <TIM_OC5_SetConfig+0xb8>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d00b      	beq.n	800dbaa <TIM_OC5_SetConfig+0x76>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	4a16      	ldr	r2, [pc, #88]	@ (800dbf0 <TIM_OC5_SetConfig+0xbc>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d007      	beq.n	800dbaa <TIM_OC5_SetConfig+0x76>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4a15      	ldr	r2, [pc, #84]	@ (800dbf4 <TIM_OC5_SetConfig+0xc0>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d003      	beq.n	800dbaa <TIM_OC5_SetConfig+0x76>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	4a14      	ldr	r2, [pc, #80]	@ (800dbf8 <TIM_OC5_SetConfig+0xc4>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d109      	bne.n	800dbbe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	021b      	lsls	r3, r3, #8
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	685a      	ldr	r2, [r3, #4]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	621a      	str	r2, [r3, #32]
}
 800dbd8:	bf00      	nop
 800dbda:	371c      	adds	r7, #28
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	fffeff8f 	.word	0xfffeff8f
 800dbe8:	40010000 	.word	0x40010000
 800dbec:	40010400 	.word	0x40010400
 800dbf0:	40014000 	.word	0x40014000
 800dbf4:	40014400 	.word	0x40014400
 800dbf8:	40014800 	.word	0x40014800

0800dbfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b087      	sub	sp, #28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a1b      	ldr	r3, [r3, #32]
 800dc0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	4b22      	ldr	r3, [pc, #136]	@ (800dcb0 <TIM_OC6_SetConfig+0xb4>)
 800dc28:	4013      	ands	r3, r2
 800dc2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	021b      	lsls	r3, r3, #8
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dc3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	051b      	lsls	r3, r3, #20
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a19      	ldr	r2, [pc, #100]	@ (800dcb4 <TIM_OC6_SetConfig+0xb8>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d00f      	beq.n	800dc74 <TIM_OC6_SetConfig+0x78>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a18      	ldr	r2, [pc, #96]	@ (800dcb8 <TIM_OC6_SetConfig+0xbc>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d00b      	beq.n	800dc74 <TIM_OC6_SetConfig+0x78>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a17      	ldr	r2, [pc, #92]	@ (800dcbc <TIM_OC6_SetConfig+0xc0>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d007      	beq.n	800dc74 <TIM_OC6_SetConfig+0x78>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a16      	ldr	r2, [pc, #88]	@ (800dcc0 <TIM_OC6_SetConfig+0xc4>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d003      	beq.n	800dc74 <TIM_OC6_SetConfig+0x78>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a15      	ldr	r2, [pc, #84]	@ (800dcc4 <TIM_OC6_SetConfig+0xc8>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d109      	bne.n	800dc88 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	029b      	lsls	r3, r3, #10
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	685a      	ldr	r2, [r3, #4]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	693a      	ldr	r2, [r7, #16]
 800dca0:	621a      	str	r2, [r3, #32]
}
 800dca2:	bf00      	nop
 800dca4:	371c      	adds	r7, #28
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	feff8fff 	.word	0xfeff8fff
 800dcb4:	40010000 	.word	0x40010000
 800dcb8:	40010400 	.word	0x40010400
 800dcbc:	40014000 	.word	0x40014000
 800dcc0:	40014400 	.word	0x40014400
 800dcc4:	40014800 	.word	0x40014800

0800dcc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b087      	sub	sp, #28
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6a1b      	ldr	r3, [r3, #32]
 800dcd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	f023 0201 	bic.w	r2, r3, #1
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	699b      	ldr	r3, [r3, #24]
 800dcea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dcf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	011b      	lsls	r3, r3, #4
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f023 030a 	bic.w	r3, r3, #10
 800dd04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	621a      	str	r2, [r3, #32]
}
 800dd1a:	bf00      	nop
 800dd1c:	371c      	adds	r7, #28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr

0800dd26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b087      	sub	sp, #28
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	60f8      	str	r0, [r7, #12]
 800dd2e:	60b9      	str	r1, [r7, #8]
 800dd30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	f023 0210 	bic.w	r2, r3, #16
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	699b      	ldr	r3, [r3, #24]
 800dd42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6a1b      	ldr	r3, [r3, #32]
 800dd48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dd50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	031b      	lsls	r3, r3, #12
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dd62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	011b      	lsls	r3, r3, #4
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	697a      	ldr	r2, [r7, #20]
 800dd72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	693a      	ldr	r2, [r7, #16]
 800dd78:	621a      	str	r2, [r3, #32]
}
 800dd7a:	bf00      	nop
 800dd7c:	371c      	adds	r7, #28
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
	...

0800dd88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	4b09      	ldr	r3, [pc, #36]	@ (800ddc0 <TIM_ITRx_SetConfig+0x38>)
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	f043 0307 	orr.w	r3, r3, #7
 800ddaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	609a      	str	r2, [r3, #8]
}
 800ddb2:	bf00      	nop
 800ddb4:	3714      	adds	r7, #20
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	ffcfff8f 	.word	0xffcfff8f

0800ddc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b087      	sub	sp, #28
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ddde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	021a      	lsls	r2, r3, #8
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	431a      	orrs	r2, r3
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	609a      	str	r2, [r3, #8]
}
 800ddf8:	bf00      	nop
 800ddfa:	371c      	adds	r7, #28
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800de04:	b480      	push	{r7}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f003 031f 	and.w	r3, r3, #31
 800de16:	2201      	movs	r2, #1
 800de18:	fa02 f303 	lsl.w	r3, r2, r3
 800de1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6a1a      	ldr	r2, [r3, #32]
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	43db      	mvns	r3, r3
 800de26:	401a      	ands	r2, r3
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6a1a      	ldr	r2, [r3, #32]
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	f003 031f 	and.w	r3, r3, #31
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	fa01 f303 	lsl.w	r3, r1, r3
 800de3c:	431a      	orrs	r2, r3
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	621a      	str	r2, [r3, #32]
}
 800de42:	bf00      	nop
 800de44:	371c      	adds	r7, #28
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
	...

0800de50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de60:	2b01      	cmp	r3, #1
 800de62:	d101      	bne.n	800de68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de64:	2302      	movs	r3, #2
 800de66:	e06d      	b.n	800df44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a30      	ldr	r2, [pc, #192]	@ (800df50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d004      	beq.n	800de9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a2f      	ldr	r2, [pc, #188]	@ (800df54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d108      	bne.n	800deae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dea2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	4313      	orrs	r3, r2
 800deac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800deb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	4313      	orrs	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a20      	ldr	r2, [pc, #128]	@ (800df50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d022      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deda:	d01d      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a1d      	ldr	r2, [pc, #116]	@ (800df58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d018      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4a1c      	ldr	r2, [pc, #112]	@ (800df5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d013      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a1a      	ldr	r2, [pc, #104]	@ (800df60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d00e      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a15      	ldr	r2, [pc, #84]	@ (800df54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d009      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a16      	ldr	r2, [pc, #88]	@ (800df64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d004      	beq.n	800df18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a15      	ldr	r2, [pc, #84]	@ (800df68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d10c      	bne.n	800df32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	4313      	orrs	r3, r2
 800df28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3714      	adds	r7, #20
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	40010000 	.word	0x40010000
 800df54:	40010400 	.word	0x40010400
 800df58:	40000400 	.word	0x40000400
 800df5c:	40000800 	.word	0x40000800
 800df60:	40000c00 	.word	0x40000c00
 800df64:	40001800 	.word	0x40001800
 800df68:	40014000 	.word	0x40014000

0800df6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df74:	bf00      	nop
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df9c:	bf00      	nop
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d101      	bne.n	800dfba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e042      	b.n	800e040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d106      	bne.n	800dfd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7f5 f877 	bl	80030c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2224      	movs	r2, #36	@ 0x24
 800dfd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f022 0201 	bic.w	r2, r2, #1
 800dfe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 fce0 	bl	800e9b0 <UART_SetConfig>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d101      	bne.n	800dffa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e022      	b.n	800e040 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d002      	beq.n	800e008 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f001 fa3c 	bl	800f480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	689a      	ldr	r2, [r3, #8]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f042 0201 	orr.w	r2, r2, #1
 800e036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f001 fac3 	bl	800f5c4 <UART_CheckIdleState>
 800e03e:	4603      	mov	r3, r0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08a      	sub	sp, #40	@ 0x28
 800e04c:	af02      	add	r7, sp, #8
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	603b      	str	r3, [r7, #0]
 800e054:	4613      	mov	r3, r2
 800e056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e05e:	2b20      	cmp	r3, #32
 800e060:	d17b      	bne.n	800e15a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <HAL_UART_Transmit+0x26>
 800e068:	88fb      	ldrh	r3, [r7, #6]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d101      	bne.n	800e072 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e06e:	2301      	movs	r3, #1
 800e070:	e074      	b.n	800e15c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2221      	movs	r2, #33	@ 0x21
 800e07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e082:	f7f5 f95f 	bl	8003344 <HAL_GetTick>
 800e086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	88fa      	ldrh	r2, [r7, #6]
 800e08c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	88fa      	ldrh	r2, [r7, #6]
 800e094:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0a0:	d108      	bne.n	800e0b4 <HAL_UART_Transmit+0x6c>
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d104      	bne.n	800e0b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	61bb      	str	r3, [r7, #24]
 800e0b2:	e003      	b.n	800e0bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e0bc:	e030      	b.n	800e120 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	2180      	movs	r1, #128	@ 0x80
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f001 fb25 	bl	800f718 <UART_WaitOnFlagUntilTimeout>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d005      	beq.n	800e0e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2220      	movs	r2, #32
 800e0d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e03d      	b.n	800e15c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10b      	bne.n	800e0fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	3302      	adds	r3, #2
 800e0fa:	61bb      	str	r3, [r7, #24]
 800e0fc:	e007      	b.n	800e10e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	781a      	ldrb	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	3301      	adds	r3, #1
 800e10c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e114:	b29b      	uxth	r3, r3
 800e116:	3b01      	subs	r3, #1
 800e118:	b29a      	uxth	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e126:	b29b      	uxth	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1c8      	bne.n	800e0be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	2200      	movs	r2, #0
 800e134:	2140      	movs	r1, #64	@ 0x40
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f001 faee 	bl	800f718 <UART_WaitOnFlagUntilTimeout>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d005      	beq.n	800e14e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2220      	movs	r2, #32
 800e146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e14a:	2303      	movs	r3, #3
 800e14c:	e006      	b.n	800e15c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2220      	movs	r2, #32
 800e152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	e000      	b.n	800e15c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e15a:	2302      	movs	r3, #2
  }
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3720      	adds	r7, #32
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08a      	sub	sp, #40	@ 0x28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	4613      	mov	r3, r2
 800e170:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e178:	2b20      	cmp	r3, #32
 800e17a:	d137      	bne.n	800e1ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d002      	beq.n	800e188 <HAL_UART_Receive_IT+0x24>
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e030      	b.n	800e1ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2200      	movs	r2, #0
 800e190:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a18      	ldr	r2, [pc, #96]	@ (800e1f8 <HAL_UART_Receive_IT+0x94>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d01f      	beq.n	800e1dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d018      	beq.n	800e1dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	e853 3f00 	ldrex	r3, [r3]
 800e1b6:	613b      	str	r3, [r7, #16]
   return(result);
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e1be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c8:	623b      	str	r3, [r7, #32]
 800e1ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1cc:	69f9      	ldr	r1, [r7, #28]
 800e1ce:	6a3a      	ldr	r2, [r7, #32]
 800e1d0:	e841 2300 	strex	r3, r2, [r1]
 800e1d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1e6      	bne.n	800e1aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e1dc:	88fb      	ldrh	r3, [r7, #6]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	68b9      	ldr	r1, [r7, #8]
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f001 fb00 	bl	800f7e8 <UART_Start_Receive_IT>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	e000      	b.n	800e1ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e1ec:	2302      	movs	r3, #2
  }
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3728      	adds	r7, #40	@ 0x28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	58000c00 	.word	0x58000c00

0800e1fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b0ba      	sub	sp, #232	@ 0xe8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	69db      	ldr	r3, [r3, #28]
 800e20a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e222:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e226:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e22a:	4013      	ands	r3, r2
 800e22c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e234:	2b00      	cmp	r3, #0
 800e236:	d11b      	bne.n	800e270 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e23c:	f003 0320 	and.w	r3, r3, #32
 800e240:	2b00      	cmp	r3, #0
 800e242:	d015      	beq.n	800e270 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e248:	f003 0320 	and.w	r3, r3, #32
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d105      	bne.n	800e25c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d009      	beq.n	800e270 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e260:	2b00      	cmp	r3, #0
 800e262:	f000 8377 	beq.w	800e954 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	4798      	blx	r3
      }
      return;
 800e26e:	e371      	b.n	800e954 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e274:	2b00      	cmp	r3, #0
 800e276:	f000 8123 	beq.w	800e4c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e27a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e27e:	4b8d      	ldr	r3, [pc, #564]	@ (800e4b4 <HAL_UART_IRQHandler+0x2b8>)
 800e280:	4013      	ands	r3, r2
 800e282:	2b00      	cmp	r3, #0
 800e284:	d106      	bne.n	800e294 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e28a:	4b8b      	ldr	r3, [pc, #556]	@ (800e4b8 <HAL_UART_IRQHandler+0x2bc>)
 800e28c:	4013      	ands	r3, r2
 800e28e:	2b00      	cmp	r3, #0
 800e290:	f000 8116 	beq.w	800e4c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e298:	f003 0301 	and.w	r3, r3, #1
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d011      	beq.n	800e2c4 <HAL_UART_IRQHandler+0xc8>
 800e2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00b      	beq.n	800e2c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2ba:	f043 0201 	orr.w	r2, r3, #1
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2c8:	f003 0302 	and.w	r3, r3, #2
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d011      	beq.n	800e2f4 <HAL_UART_IRQHandler+0xf8>
 800e2d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e2d4:	f003 0301 	and.w	r3, r3, #1
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00b      	beq.n	800e2f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2202      	movs	r2, #2
 800e2e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2ea:	f043 0204 	orr.w	r2, r3, #4
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2f8:	f003 0304 	and.w	r3, r3, #4
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d011      	beq.n	800e324 <HAL_UART_IRQHandler+0x128>
 800e300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e304:	f003 0301 	and.w	r3, r3, #1
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00b      	beq.n	800e324 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2204      	movs	r2, #4
 800e312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e31a:	f043 0202 	orr.w	r2, r3, #2
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e328:	f003 0308 	and.w	r3, r3, #8
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d017      	beq.n	800e360 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e334:	f003 0320 	and.w	r3, r3, #32
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d105      	bne.n	800e348 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e33c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e340:	4b5c      	ldr	r3, [pc, #368]	@ (800e4b4 <HAL_UART_IRQHandler+0x2b8>)
 800e342:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00b      	beq.n	800e360 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2208      	movs	r2, #8
 800e34e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e356:	f043 0208 	orr.w	r2, r3, #8
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d012      	beq.n	800e392 <HAL_UART_IRQHandler+0x196>
 800e36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e370:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00c      	beq.n	800e392 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e388:	f043 0220 	orr.w	r2, r3, #32
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 82dd 	beq.w	800e958 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3a2:	f003 0320 	and.w	r3, r3, #32
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d013      	beq.n	800e3d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3ae:	f003 0320 	and.w	r3, r3, #32
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d105      	bne.n	800e3c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e3ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d007      	beq.n	800e3d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d003      	beq.n	800e3d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3e6:	2b40      	cmp	r3, #64	@ 0x40
 800e3e8:	d005      	beq.n	800e3f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e3ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e3ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d054      	beq.n	800e4a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fb18 	bl	800fa2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e406:	2b40      	cmp	r3, #64	@ 0x40
 800e408:	d146      	bne.n	800e498 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	3308      	adds	r3, #8
 800e410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e414:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e418:	e853 3f00 	ldrex	r3, [r3]
 800e41c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	3308      	adds	r3, #8
 800e432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e436:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e43a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e446:	e841 2300 	strex	r3, r2, [r1]
 800e44a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e44e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1d9      	bne.n	800e40a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d017      	beq.n	800e490 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e466:	4a15      	ldr	r2, [pc, #84]	@ (800e4bc <HAL_UART_IRQHandler+0x2c0>)
 800e468:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e470:	4618      	mov	r0, r3
 800e472:	f7f8 fb8d 	bl	8006b90 <HAL_DMA_Abort_IT>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d019      	beq.n	800e4b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e48a:	4610      	mov	r0, r2
 800e48c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e48e:	e00f      	b.n	800e4b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fa77 	bl	800e984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e496:	e00b      	b.n	800e4b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 fa73 	bl	800e984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e49e:	e007      	b.n	800e4b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 fa6f 	bl	800e984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e4ae:	e253      	b.n	800e958 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4b0:	bf00      	nop
    return;
 800e4b2:	e251      	b.n	800e958 <HAL_UART_IRQHandler+0x75c>
 800e4b4:	10000001 	.word	0x10000001
 800e4b8:	04000120 	.word	0x04000120
 800e4bc:	0800faf9 	.word	0x0800faf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	f040 81e7 	bne.w	800e898 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4ce:	f003 0310 	and.w	r3, r3, #16
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f000 81e0 	beq.w	800e898 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4dc:	f003 0310 	and.w	r3, r3, #16
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 81d9 	beq.w	800e898 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2210      	movs	r2, #16
 800e4ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4f8:	2b40      	cmp	r3, #64	@ 0x40
 800e4fa:	f040 8151 	bne.w	800e7a0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a96      	ldr	r2, [pc, #600]	@ (800e760 <HAL_UART_IRQHandler+0x564>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d068      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a93      	ldr	r2, [pc, #588]	@ (800e764 <HAL_UART_IRQHandler+0x568>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d061      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4a91      	ldr	r2, [pc, #580]	@ (800e768 <HAL_UART_IRQHandler+0x56c>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d05a      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a8e      	ldr	r2, [pc, #568]	@ (800e76c <HAL_UART_IRQHandler+0x570>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d053      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a8c      	ldr	r2, [pc, #560]	@ (800e770 <HAL_UART_IRQHandler+0x574>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d04c      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a89      	ldr	r2, [pc, #548]	@ (800e774 <HAL_UART_IRQHandler+0x578>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d045      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a87      	ldr	r2, [pc, #540]	@ (800e778 <HAL_UART_IRQHandler+0x57c>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d03e      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a84      	ldr	r2, [pc, #528]	@ (800e77c <HAL_UART_IRQHandler+0x580>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d037      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a82      	ldr	r2, [pc, #520]	@ (800e780 <HAL_UART_IRQHandler+0x584>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d030      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4a7f      	ldr	r2, [pc, #508]	@ (800e784 <HAL_UART_IRQHandler+0x588>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d029      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a7d      	ldr	r2, [pc, #500]	@ (800e788 <HAL_UART_IRQHandler+0x58c>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d022      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a7a      	ldr	r2, [pc, #488]	@ (800e78c <HAL_UART_IRQHandler+0x590>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d01b      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4a78      	ldr	r2, [pc, #480]	@ (800e790 <HAL_UART_IRQHandler+0x594>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d014      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a75      	ldr	r2, [pc, #468]	@ (800e794 <HAL_UART_IRQHandler+0x598>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d00d      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a73      	ldr	r2, [pc, #460]	@ (800e798 <HAL_UART_IRQHandler+0x59c>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d006      	beq.n	800e5de <HAL_UART_IRQHandler+0x3e2>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a70      	ldr	r2, [pc, #448]	@ (800e79c <HAL_UART_IRQHandler+0x5a0>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d106      	bne.n	800e5ec <HAL_UART_IRQHandler+0x3f0>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	e005      	b.n	800e5f8 <HAL_UART_IRQHandler+0x3fc>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e5fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 81ab 	beq.w	800e95c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e60c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e610:	429a      	cmp	r2, r3
 800e612:	f080 81a3 	bcs.w	800e95c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e61c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e626:	69db      	ldr	r3, [r3, #28]
 800e628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e62c:	f000 8087 	beq.w	800e73e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e63c:	e853 3f00 	ldrex	r3, [r3]
 800e640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e64c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	461a      	mov	r2, r3
 800e656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e65a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e65e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e662:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e666:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e66a:	e841 2300 	strex	r3, r2, [r1]
 800e66e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1da      	bne.n	800e630 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	3308      	adds	r3, #8
 800e680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e684:	e853 3f00 	ldrex	r3, [r3]
 800e688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e68a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e68c:	f023 0301 	bic.w	r3, r3, #1
 800e690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3308      	adds	r3, #8
 800e69a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e69e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e6a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e6a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e6aa:	e841 2300 	strex	r3, r2, [r1]
 800e6ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e6b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1e1      	bne.n	800e67a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e6c0:	e853 3f00 	ldrex	r3, [r3]
 800e6c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e6c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3308      	adds	r3, #8
 800e6d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e6da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e6dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e6e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e6e2:	e841 2300 	strex	r3, r2, [r1]
 800e6e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e6e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1e3      	bne.n	800e6b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2220      	movs	r2, #32
 800e6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e704:	e853 3f00 	ldrex	r3, [r3]
 800e708:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e70a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e70c:	f023 0310 	bic.w	r3, r3, #16
 800e710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	461a      	mov	r2, r3
 800e71a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e71e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e720:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e722:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e724:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e726:	e841 2300 	strex	r3, r2, [r1]
 800e72a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e72c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e4      	bne.n	800e6fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f7 ff0b 	bl	8006554 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2202      	movs	r2, #2
 800e742:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e750:	b29b      	uxth	r3, r3
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	b29b      	uxth	r3, r3
 800e756:	4619      	mov	r1, r3
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 f91d 	bl	800e998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e75e:	e0fd      	b.n	800e95c <HAL_UART_IRQHandler+0x760>
 800e760:	40020010 	.word	0x40020010
 800e764:	40020028 	.word	0x40020028
 800e768:	40020040 	.word	0x40020040
 800e76c:	40020058 	.word	0x40020058
 800e770:	40020070 	.word	0x40020070
 800e774:	40020088 	.word	0x40020088
 800e778:	400200a0 	.word	0x400200a0
 800e77c:	400200b8 	.word	0x400200b8
 800e780:	40020410 	.word	0x40020410
 800e784:	40020428 	.word	0x40020428
 800e788:	40020440 	.word	0x40020440
 800e78c:	40020458 	.word	0x40020458
 800e790:	40020470 	.word	0x40020470
 800e794:	40020488 	.word	0x40020488
 800e798:	400204a0 	.word	0x400204a0
 800e79c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 80cf 	beq.w	800e960 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e7c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f000 80ca 	beq.w	800e960 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d4:	e853 3f00 	ldrex	r3, [r3]
 800e7d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e7e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e7ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7f0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7f6:	e841 2300 	strex	r3, r2, [r1]
 800e7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d1e4      	bne.n	800e7cc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3308      	adds	r3, #8
 800e808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	e853 3f00 	ldrex	r3, [r3]
 800e810:	623b      	str	r3, [r7, #32]
   return(result);
 800e812:	6a3a      	ldr	r2, [r7, #32]
 800e814:	4b55      	ldr	r3, [pc, #340]	@ (800e96c <HAL_UART_IRQHandler+0x770>)
 800e816:	4013      	ands	r3, r2
 800e818:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3308      	adds	r3, #8
 800e822:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e826:	633a      	str	r2, [r7, #48]	@ 0x30
 800e828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e82c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e82e:	e841 2300 	strex	r3, r2, [r1]
 800e832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1e3      	bne.n	800e802 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2220      	movs	r2, #32
 800e83e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	e853 3f00 	ldrex	r3, [r3]
 800e85a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f023 0310 	bic.w	r3, r3, #16
 800e862:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	461a      	mov	r2, r3
 800e86c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e870:	61fb      	str	r3, [r7, #28]
 800e872:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e874:	69b9      	ldr	r1, [r7, #24]
 800e876:	69fa      	ldr	r2, [r7, #28]
 800e878:	e841 2300 	strex	r3, r2, [r1]
 800e87c:	617b      	str	r3, [r7, #20]
   return(result);
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1e4      	bne.n	800e84e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2202      	movs	r2, #2
 800e888:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e88a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e88e:	4619      	mov	r1, r3
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f881 	bl	800e998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e896:	e063      	b.n	800e960 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e89c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d00e      	beq.n	800e8c2 <HAL_UART_IRQHandler+0x6c6>
 800e8a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d008      	beq.n	800e8c2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e8b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f001 fe7a 	bl	80105b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8c0:	e051      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d014      	beq.n	800e8f8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e8ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d105      	bne.n	800e8e6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e8da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d008      	beq.n	800e8f8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d03a      	beq.n	800e964 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	4798      	blx	r3
    }
    return;
 800e8f6:	e035      	b.n	800e964 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e900:	2b00      	cmp	r3, #0
 800e902:	d009      	beq.n	800e918 <HAL_UART_IRQHandler+0x71c>
 800e904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d003      	beq.n	800e918 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f001 f907 	bl	800fb24 <UART_EndTransmit_IT>
    return;
 800e916:	e026      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e91c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e920:	2b00      	cmp	r3, #0
 800e922:	d009      	beq.n	800e938 <HAL_UART_IRQHandler+0x73c>
 800e924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e928:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d003      	beq.n	800e938 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f001 fe53 	bl	80105dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e936:	e016      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e93c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d010      	beq.n	800e966 <HAL_UART_IRQHandler+0x76a>
 800e944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	da0c      	bge.n	800e966 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f001 fe3b 	bl	80105c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e952:	e008      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
      return;
 800e954:	bf00      	nop
 800e956:	e006      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
    return;
 800e958:	bf00      	nop
 800e95a:	e004      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
      return;
 800e95c:	bf00      	nop
 800e95e:	e002      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
      return;
 800e960:	bf00      	nop
 800e962:	e000      	b.n	800e966 <HAL_UART_IRQHandler+0x76a>
    return;
 800e964:	bf00      	nop
  }
}
 800e966:	37e8      	adds	r7, #232	@ 0xe8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	effffffe 	.word	0xeffffffe

0800e970 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e978:	bf00      	nop
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e98c:	bf00      	nop
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9b4:	b092      	sub	sp, #72	@ 0x48
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	431a      	orrs	r2, r3
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	695b      	ldr	r3, [r3, #20]
 800e9ce:	431a      	orrs	r2, r3
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	69db      	ldr	r3, [r3, #28]
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	4bbe      	ldr	r3, [pc, #760]	@ (800ecd8 <UART_SetConfig+0x328>)
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	697a      	ldr	r2, [r7, #20]
 800e9e4:	6812      	ldr	r2, [r2, #0]
 800e9e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9e8:	430b      	orrs	r3, r1
 800e9ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	68da      	ldr	r2, [r3, #12]
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	699b      	ldr	r3, [r3, #24]
 800ea06:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4ab3      	ldr	r2, [pc, #716]	@ (800ecdc <UART_SetConfig+0x32c>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d004      	beq.n	800ea1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	6a1b      	ldr	r3, [r3, #32]
 800ea16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	689a      	ldr	r2, [r3, #8]
 800ea22:	4baf      	ldr	r3, [pc, #700]	@ (800ece0 <UART_SetConfig+0x330>)
 800ea24:	4013      	ands	r3, r2
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	6812      	ldr	r2, [r2, #0]
 800ea2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea2c:	430b      	orrs	r3, r1
 800ea2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea36:	f023 010f 	bic.w	r1, r3, #15
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4aa6      	ldr	r2, [pc, #664]	@ (800ece4 <UART_SetConfig+0x334>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d177      	bne.n	800eb40 <UART_SetConfig+0x190>
 800ea50:	4ba5      	ldr	r3, [pc, #660]	@ (800ece8 <UART_SetConfig+0x338>)
 800ea52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea58:	2b28      	cmp	r3, #40	@ 0x28
 800ea5a:	d86d      	bhi.n	800eb38 <UART_SetConfig+0x188>
 800ea5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ea64 <UART_SetConfig+0xb4>)
 800ea5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea62:	bf00      	nop
 800ea64:	0800eb09 	.word	0x0800eb09
 800ea68:	0800eb39 	.word	0x0800eb39
 800ea6c:	0800eb39 	.word	0x0800eb39
 800ea70:	0800eb39 	.word	0x0800eb39
 800ea74:	0800eb39 	.word	0x0800eb39
 800ea78:	0800eb39 	.word	0x0800eb39
 800ea7c:	0800eb39 	.word	0x0800eb39
 800ea80:	0800eb39 	.word	0x0800eb39
 800ea84:	0800eb11 	.word	0x0800eb11
 800ea88:	0800eb39 	.word	0x0800eb39
 800ea8c:	0800eb39 	.word	0x0800eb39
 800ea90:	0800eb39 	.word	0x0800eb39
 800ea94:	0800eb39 	.word	0x0800eb39
 800ea98:	0800eb39 	.word	0x0800eb39
 800ea9c:	0800eb39 	.word	0x0800eb39
 800eaa0:	0800eb39 	.word	0x0800eb39
 800eaa4:	0800eb19 	.word	0x0800eb19
 800eaa8:	0800eb39 	.word	0x0800eb39
 800eaac:	0800eb39 	.word	0x0800eb39
 800eab0:	0800eb39 	.word	0x0800eb39
 800eab4:	0800eb39 	.word	0x0800eb39
 800eab8:	0800eb39 	.word	0x0800eb39
 800eabc:	0800eb39 	.word	0x0800eb39
 800eac0:	0800eb39 	.word	0x0800eb39
 800eac4:	0800eb21 	.word	0x0800eb21
 800eac8:	0800eb39 	.word	0x0800eb39
 800eacc:	0800eb39 	.word	0x0800eb39
 800ead0:	0800eb39 	.word	0x0800eb39
 800ead4:	0800eb39 	.word	0x0800eb39
 800ead8:	0800eb39 	.word	0x0800eb39
 800eadc:	0800eb39 	.word	0x0800eb39
 800eae0:	0800eb39 	.word	0x0800eb39
 800eae4:	0800eb29 	.word	0x0800eb29
 800eae8:	0800eb39 	.word	0x0800eb39
 800eaec:	0800eb39 	.word	0x0800eb39
 800eaf0:	0800eb39 	.word	0x0800eb39
 800eaf4:	0800eb39 	.word	0x0800eb39
 800eaf8:	0800eb39 	.word	0x0800eb39
 800eafc:	0800eb39 	.word	0x0800eb39
 800eb00:	0800eb39 	.word	0x0800eb39
 800eb04:	0800eb31 	.word	0x0800eb31
 800eb08:	2301      	movs	r3, #1
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb0e:	e222      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb10:	2304      	movs	r3, #4
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb16:	e21e      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb18:	2308      	movs	r3, #8
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb1e:	e21a      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb20:	2310      	movs	r3, #16
 800eb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb26:	e216      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb28:	2320      	movs	r3, #32
 800eb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb2e:	e212      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb30:	2340      	movs	r3, #64	@ 0x40
 800eb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb36:	e20e      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb38:	2380      	movs	r3, #128	@ 0x80
 800eb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb3e:	e20a      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a69      	ldr	r2, [pc, #420]	@ (800ecec <UART_SetConfig+0x33c>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d130      	bne.n	800ebac <UART_SetConfig+0x1fc>
 800eb4a:	4b67      	ldr	r3, [pc, #412]	@ (800ece8 <UART_SetConfig+0x338>)
 800eb4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb4e:	f003 0307 	and.w	r3, r3, #7
 800eb52:	2b05      	cmp	r3, #5
 800eb54:	d826      	bhi.n	800eba4 <UART_SetConfig+0x1f4>
 800eb56:	a201      	add	r2, pc, #4	@ (adr r2, 800eb5c <UART_SetConfig+0x1ac>)
 800eb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb5c:	0800eb75 	.word	0x0800eb75
 800eb60:	0800eb7d 	.word	0x0800eb7d
 800eb64:	0800eb85 	.word	0x0800eb85
 800eb68:	0800eb8d 	.word	0x0800eb8d
 800eb6c:	0800eb95 	.word	0x0800eb95
 800eb70:	0800eb9d 	.word	0x0800eb9d
 800eb74:	2300      	movs	r3, #0
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb7a:	e1ec      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb7c:	2304      	movs	r3, #4
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb82:	e1e8      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb84:	2308      	movs	r3, #8
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8a:	e1e4      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb8c:	2310      	movs	r3, #16
 800eb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb92:	e1e0      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb94:	2320      	movs	r3, #32
 800eb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb9a:	e1dc      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eb9c:	2340      	movs	r3, #64	@ 0x40
 800eb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eba2:	e1d8      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eba4:	2380      	movs	r3, #128	@ 0x80
 800eba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebaa:	e1d4      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a4f      	ldr	r2, [pc, #316]	@ (800ecf0 <UART_SetConfig+0x340>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d130      	bne.n	800ec18 <UART_SetConfig+0x268>
 800ebb6:	4b4c      	ldr	r3, [pc, #304]	@ (800ece8 <UART_SetConfig+0x338>)
 800ebb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebba:	f003 0307 	and.w	r3, r3, #7
 800ebbe:	2b05      	cmp	r3, #5
 800ebc0:	d826      	bhi.n	800ec10 <UART_SetConfig+0x260>
 800ebc2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc8 <UART_SetConfig+0x218>)
 800ebc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc8:	0800ebe1 	.word	0x0800ebe1
 800ebcc:	0800ebe9 	.word	0x0800ebe9
 800ebd0:	0800ebf1 	.word	0x0800ebf1
 800ebd4:	0800ebf9 	.word	0x0800ebf9
 800ebd8:	0800ec01 	.word	0x0800ec01
 800ebdc:	0800ec09 	.word	0x0800ec09
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebe6:	e1b6      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ebe8:	2304      	movs	r3, #4
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebee:	e1b2      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ebf0:	2308      	movs	r3, #8
 800ebf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebf6:	e1ae      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ebf8:	2310      	movs	r3, #16
 800ebfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebfe:	e1aa      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec00:	2320      	movs	r3, #32
 800ec02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec06:	e1a6      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec08:	2340      	movs	r3, #64	@ 0x40
 800ec0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec0e:	e1a2      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec10:	2380      	movs	r3, #128	@ 0x80
 800ec12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec16:	e19e      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a35      	ldr	r2, [pc, #212]	@ (800ecf4 <UART_SetConfig+0x344>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d130      	bne.n	800ec84 <UART_SetConfig+0x2d4>
 800ec22:	4b31      	ldr	r3, [pc, #196]	@ (800ece8 <UART_SetConfig+0x338>)
 800ec24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec26:	f003 0307 	and.w	r3, r3, #7
 800ec2a:	2b05      	cmp	r3, #5
 800ec2c:	d826      	bhi.n	800ec7c <UART_SetConfig+0x2cc>
 800ec2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ec34 <UART_SetConfig+0x284>)
 800ec30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec34:	0800ec4d 	.word	0x0800ec4d
 800ec38:	0800ec55 	.word	0x0800ec55
 800ec3c:	0800ec5d 	.word	0x0800ec5d
 800ec40:	0800ec65 	.word	0x0800ec65
 800ec44:	0800ec6d 	.word	0x0800ec6d
 800ec48:	0800ec75 	.word	0x0800ec75
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec52:	e180      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec54:	2304      	movs	r3, #4
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5a:	e17c      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec5c:	2308      	movs	r3, #8
 800ec5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec62:	e178      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec64:	2310      	movs	r3, #16
 800ec66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6a:	e174      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec6c:	2320      	movs	r3, #32
 800ec6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec72:	e170      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec74:	2340      	movs	r3, #64	@ 0x40
 800ec76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7a:	e16c      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec7c:	2380      	movs	r3, #128	@ 0x80
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec82:	e168      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a1b      	ldr	r2, [pc, #108]	@ (800ecf8 <UART_SetConfig+0x348>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d142      	bne.n	800ed14 <UART_SetConfig+0x364>
 800ec8e:	4b16      	ldr	r3, [pc, #88]	@ (800ece8 <UART_SetConfig+0x338>)
 800ec90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec92:	f003 0307 	and.w	r3, r3, #7
 800ec96:	2b05      	cmp	r3, #5
 800ec98:	d838      	bhi.n	800ed0c <UART_SetConfig+0x35c>
 800ec9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eca0 <UART_SetConfig+0x2f0>)
 800ec9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca0:	0800ecb9 	.word	0x0800ecb9
 800eca4:	0800ecc1 	.word	0x0800ecc1
 800eca8:	0800ecc9 	.word	0x0800ecc9
 800ecac:	0800ecd1 	.word	0x0800ecd1
 800ecb0:	0800ecfd 	.word	0x0800ecfd
 800ecb4:	0800ed05 	.word	0x0800ed05
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecbe:	e14a      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc6:	e146      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ecc8:	2308      	movs	r3, #8
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecce:	e142      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ecd0:	2310      	movs	r3, #16
 800ecd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd6:	e13e      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ecd8:	cfff69f3 	.word	0xcfff69f3
 800ecdc:	58000c00 	.word	0x58000c00
 800ece0:	11fff4ff 	.word	0x11fff4ff
 800ece4:	40011000 	.word	0x40011000
 800ece8:	58024400 	.word	0x58024400
 800ecec:	40004400 	.word	0x40004400
 800ecf0:	40004800 	.word	0x40004800
 800ecf4:	40004c00 	.word	0x40004c00
 800ecf8:	40005000 	.word	0x40005000
 800ecfc:	2320      	movs	r3, #32
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed02:	e128      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ed04:	2340      	movs	r3, #64	@ 0x40
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0a:	e124      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ed0c:	2380      	movs	r3, #128	@ 0x80
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed12:	e120      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4acb      	ldr	r2, [pc, #812]	@ (800f048 <UART_SetConfig+0x698>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d176      	bne.n	800ee0c <UART_SetConfig+0x45c>
 800ed1e:	4bcb      	ldr	r3, [pc, #812]	@ (800f04c <UART_SetConfig+0x69c>)
 800ed20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed26:	2b28      	cmp	r3, #40	@ 0x28
 800ed28:	d86c      	bhi.n	800ee04 <UART_SetConfig+0x454>
 800ed2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed30 <UART_SetConfig+0x380>)
 800ed2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed30:	0800edd5 	.word	0x0800edd5
 800ed34:	0800ee05 	.word	0x0800ee05
 800ed38:	0800ee05 	.word	0x0800ee05
 800ed3c:	0800ee05 	.word	0x0800ee05
 800ed40:	0800ee05 	.word	0x0800ee05
 800ed44:	0800ee05 	.word	0x0800ee05
 800ed48:	0800ee05 	.word	0x0800ee05
 800ed4c:	0800ee05 	.word	0x0800ee05
 800ed50:	0800eddd 	.word	0x0800eddd
 800ed54:	0800ee05 	.word	0x0800ee05
 800ed58:	0800ee05 	.word	0x0800ee05
 800ed5c:	0800ee05 	.word	0x0800ee05
 800ed60:	0800ee05 	.word	0x0800ee05
 800ed64:	0800ee05 	.word	0x0800ee05
 800ed68:	0800ee05 	.word	0x0800ee05
 800ed6c:	0800ee05 	.word	0x0800ee05
 800ed70:	0800ede5 	.word	0x0800ede5
 800ed74:	0800ee05 	.word	0x0800ee05
 800ed78:	0800ee05 	.word	0x0800ee05
 800ed7c:	0800ee05 	.word	0x0800ee05
 800ed80:	0800ee05 	.word	0x0800ee05
 800ed84:	0800ee05 	.word	0x0800ee05
 800ed88:	0800ee05 	.word	0x0800ee05
 800ed8c:	0800ee05 	.word	0x0800ee05
 800ed90:	0800eded 	.word	0x0800eded
 800ed94:	0800ee05 	.word	0x0800ee05
 800ed98:	0800ee05 	.word	0x0800ee05
 800ed9c:	0800ee05 	.word	0x0800ee05
 800eda0:	0800ee05 	.word	0x0800ee05
 800eda4:	0800ee05 	.word	0x0800ee05
 800eda8:	0800ee05 	.word	0x0800ee05
 800edac:	0800ee05 	.word	0x0800ee05
 800edb0:	0800edf5 	.word	0x0800edf5
 800edb4:	0800ee05 	.word	0x0800ee05
 800edb8:	0800ee05 	.word	0x0800ee05
 800edbc:	0800ee05 	.word	0x0800ee05
 800edc0:	0800ee05 	.word	0x0800ee05
 800edc4:	0800ee05 	.word	0x0800ee05
 800edc8:	0800ee05 	.word	0x0800ee05
 800edcc:	0800ee05 	.word	0x0800ee05
 800edd0:	0800edfd 	.word	0x0800edfd
 800edd4:	2301      	movs	r3, #1
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edda:	e0bc      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eddc:	2304      	movs	r3, #4
 800edde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ede2:	e0b8      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ede4:	2308      	movs	r3, #8
 800ede6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edea:	e0b4      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800edec:	2310      	movs	r3, #16
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf2:	e0b0      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800edf4:	2320      	movs	r3, #32
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfa:	e0ac      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800edfc:	2340      	movs	r3, #64	@ 0x40
 800edfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee02:	e0a8      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee04:	2380      	movs	r3, #128	@ 0x80
 800ee06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0a:	e0a4      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a8f      	ldr	r2, [pc, #572]	@ (800f050 <UART_SetConfig+0x6a0>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d130      	bne.n	800ee78 <UART_SetConfig+0x4c8>
 800ee16:	4b8d      	ldr	r3, [pc, #564]	@ (800f04c <UART_SetConfig+0x69c>)
 800ee18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee1a:	f003 0307 	and.w	r3, r3, #7
 800ee1e:	2b05      	cmp	r3, #5
 800ee20:	d826      	bhi.n	800ee70 <UART_SetConfig+0x4c0>
 800ee22:	a201      	add	r2, pc, #4	@ (adr r2, 800ee28 <UART_SetConfig+0x478>)
 800ee24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee28:	0800ee41 	.word	0x0800ee41
 800ee2c:	0800ee49 	.word	0x0800ee49
 800ee30:	0800ee51 	.word	0x0800ee51
 800ee34:	0800ee59 	.word	0x0800ee59
 800ee38:	0800ee61 	.word	0x0800ee61
 800ee3c:	0800ee69 	.word	0x0800ee69
 800ee40:	2300      	movs	r3, #0
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee46:	e086      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee48:	2304      	movs	r3, #4
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4e:	e082      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee50:	2308      	movs	r3, #8
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee56:	e07e      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee58:	2310      	movs	r3, #16
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5e:	e07a      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee60:	2320      	movs	r3, #32
 800ee62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee66:	e076      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee68:	2340      	movs	r3, #64	@ 0x40
 800ee6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6e:	e072      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee70:	2380      	movs	r3, #128	@ 0x80
 800ee72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee76:	e06e      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a75      	ldr	r2, [pc, #468]	@ (800f054 <UART_SetConfig+0x6a4>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d130      	bne.n	800eee4 <UART_SetConfig+0x534>
 800ee82:	4b72      	ldr	r3, [pc, #456]	@ (800f04c <UART_SetConfig+0x69c>)
 800ee84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee86:	f003 0307 	and.w	r3, r3, #7
 800ee8a:	2b05      	cmp	r3, #5
 800ee8c:	d826      	bhi.n	800eedc <UART_SetConfig+0x52c>
 800ee8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee94 <UART_SetConfig+0x4e4>)
 800ee90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee94:	0800eead 	.word	0x0800eead
 800ee98:	0800eeb5 	.word	0x0800eeb5
 800ee9c:	0800eebd 	.word	0x0800eebd
 800eea0:	0800eec5 	.word	0x0800eec5
 800eea4:	0800eecd 	.word	0x0800eecd
 800eea8:	0800eed5 	.word	0x0800eed5
 800eeac:	2300      	movs	r3, #0
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeb2:	e050      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eeb4:	2304      	movs	r3, #4
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeba:	e04c      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eebc:	2308      	movs	r3, #8
 800eebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eec2:	e048      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eec4:	2310      	movs	r3, #16
 800eec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeca:	e044      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eecc:	2320      	movs	r3, #32
 800eece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed2:	e040      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eed4:	2340      	movs	r3, #64	@ 0x40
 800eed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeda:	e03c      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eedc:	2380      	movs	r3, #128	@ 0x80
 800eede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee2:	e038      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a5b      	ldr	r2, [pc, #364]	@ (800f058 <UART_SetConfig+0x6a8>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d130      	bne.n	800ef50 <UART_SetConfig+0x5a0>
 800eeee:	4b57      	ldr	r3, [pc, #348]	@ (800f04c <UART_SetConfig+0x69c>)
 800eef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eef2:	f003 0307 	and.w	r3, r3, #7
 800eef6:	2b05      	cmp	r3, #5
 800eef8:	d826      	bhi.n	800ef48 <UART_SetConfig+0x598>
 800eefa:	a201      	add	r2, pc, #4	@ (adr r2, 800ef00 <UART_SetConfig+0x550>)
 800eefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef00:	0800ef19 	.word	0x0800ef19
 800ef04:	0800ef21 	.word	0x0800ef21
 800ef08:	0800ef29 	.word	0x0800ef29
 800ef0c:	0800ef31 	.word	0x0800ef31
 800ef10:	0800ef39 	.word	0x0800ef39
 800ef14:	0800ef41 	.word	0x0800ef41
 800ef18:	2302      	movs	r3, #2
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1e:	e01a      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ef20:	2304      	movs	r3, #4
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef26:	e016      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ef28:	2308      	movs	r3, #8
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef2e:	e012      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ef30:	2310      	movs	r3, #16
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef36:	e00e      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ef38:	2320      	movs	r3, #32
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3e:	e00a      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ef40:	2340      	movs	r3, #64	@ 0x40
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef46:	e006      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ef48:	2380      	movs	r3, #128	@ 0x80
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4e:	e002      	b.n	800ef56 <UART_SetConfig+0x5a6>
 800ef50:	2380      	movs	r3, #128	@ 0x80
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a3f      	ldr	r2, [pc, #252]	@ (800f058 <UART_SetConfig+0x6a8>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	f040 80f8 	bne.w	800f152 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ef66:	2b20      	cmp	r3, #32
 800ef68:	dc46      	bgt.n	800eff8 <UART_SetConfig+0x648>
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	f2c0 8082 	blt.w	800f074 <UART_SetConfig+0x6c4>
 800ef70:	3b02      	subs	r3, #2
 800ef72:	2b1e      	cmp	r3, #30
 800ef74:	d87e      	bhi.n	800f074 <UART_SetConfig+0x6c4>
 800ef76:	a201      	add	r2, pc, #4	@ (adr r2, 800ef7c <UART_SetConfig+0x5cc>)
 800ef78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7c:	0800efff 	.word	0x0800efff
 800ef80:	0800f075 	.word	0x0800f075
 800ef84:	0800f007 	.word	0x0800f007
 800ef88:	0800f075 	.word	0x0800f075
 800ef8c:	0800f075 	.word	0x0800f075
 800ef90:	0800f075 	.word	0x0800f075
 800ef94:	0800f017 	.word	0x0800f017
 800ef98:	0800f075 	.word	0x0800f075
 800ef9c:	0800f075 	.word	0x0800f075
 800efa0:	0800f075 	.word	0x0800f075
 800efa4:	0800f075 	.word	0x0800f075
 800efa8:	0800f075 	.word	0x0800f075
 800efac:	0800f075 	.word	0x0800f075
 800efb0:	0800f075 	.word	0x0800f075
 800efb4:	0800f027 	.word	0x0800f027
 800efb8:	0800f075 	.word	0x0800f075
 800efbc:	0800f075 	.word	0x0800f075
 800efc0:	0800f075 	.word	0x0800f075
 800efc4:	0800f075 	.word	0x0800f075
 800efc8:	0800f075 	.word	0x0800f075
 800efcc:	0800f075 	.word	0x0800f075
 800efd0:	0800f075 	.word	0x0800f075
 800efd4:	0800f075 	.word	0x0800f075
 800efd8:	0800f075 	.word	0x0800f075
 800efdc:	0800f075 	.word	0x0800f075
 800efe0:	0800f075 	.word	0x0800f075
 800efe4:	0800f075 	.word	0x0800f075
 800efe8:	0800f075 	.word	0x0800f075
 800efec:	0800f075 	.word	0x0800f075
 800eff0:	0800f075 	.word	0x0800f075
 800eff4:	0800f067 	.word	0x0800f067
 800eff8:	2b40      	cmp	r3, #64	@ 0x40
 800effa:	d037      	beq.n	800f06c <UART_SetConfig+0x6bc>
 800effc:	e03a      	b.n	800f074 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800effe:	f7fc fec7 	bl	800bd90 <HAL_RCCEx_GetD3PCLK1Freq>
 800f002:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f004:	e03c      	b.n	800f080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fc fed6 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f014:	e034      	b.n	800f080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f016:	f107 0318 	add.w	r3, r7, #24
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fd f822 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f024:	e02c      	b.n	800f080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f026:	4b09      	ldr	r3, [pc, #36]	@ (800f04c <UART_SetConfig+0x69c>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f003 0320 	and.w	r3, r3, #32
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d016      	beq.n	800f060 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f032:	4b06      	ldr	r3, [pc, #24]	@ (800f04c <UART_SetConfig+0x69c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	08db      	lsrs	r3, r3, #3
 800f038:	f003 0303 	and.w	r3, r3, #3
 800f03c:	4a07      	ldr	r2, [pc, #28]	@ (800f05c <UART_SetConfig+0x6ac>)
 800f03e:	fa22 f303 	lsr.w	r3, r2, r3
 800f042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f044:	e01c      	b.n	800f080 <UART_SetConfig+0x6d0>
 800f046:	bf00      	nop
 800f048:	40011400 	.word	0x40011400
 800f04c:	58024400 	.word	0x58024400
 800f050:	40007800 	.word	0x40007800
 800f054:	40007c00 	.word	0x40007c00
 800f058:	58000c00 	.word	0x58000c00
 800f05c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f060:	4b9d      	ldr	r3, [pc, #628]	@ (800f2d8 <UART_SetConfig+0x928>)
 800f062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f064:	e00c      	b.n	800f080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f066:	4b9d      	ldr	r3, [pc, #628]	@ (800f2dc <UART_SetConfig+0x92c>)
 800f068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f06a:	e009      	b.n	800f080 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f06c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f072:	e005      	b.n	800f080 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f074:	2300      	movs	r3, #0
 800f076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f078:	2301      	movs	r3, #1
 800f07a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f07e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 81de 	beq.w	800f444 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f08c:	4a94      	ldr	r2, [pc, #592]	@ (800f2e0 <UART_SetConfig+0x930>)
 800f08e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f092:	461a      	mov	r2, r3
 800f094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f096:	fbb3 f3f2 	udiv	r3, r3, r2
 800f09a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	685a      	ldr	r2, [r3, #4]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	4413      	add	r3, r2
 800f0a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d305      	bcc.n	800f0b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d903      	bls.n	800f0c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f0be:	e1c1      	b.n	800f444 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	60bb      	str	r3, [r7, #8]
 800f0c6:	60fa      	str	r2, [r7, #12]
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0cc:	4a84      	ldr	r2, [pc, #528]	@ (800f2e0 <UART_SetConfig+0x930>)
 800f0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	603b      	str	r3, [r7, #0]
 800f0d8:	607a      	str	r2, [r7, #4]
 800f0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f0e2:	f7f1 f8f9 	bl	80002d8 <__aeabi_uldivmod>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	4610      	mov	r0, r2
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	f04f 0200 	mov.w	r2, #0
 800f0f2:	f04f 0300 	mov.w	r3, #0
 800f0f6:	020b      	lsls	r3, r1, #8
 800f0f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f0fc:	0202      	lsls	r2, r0, #8
 800f0fe:	6979      	ldr	r1, [r7, #20]
 800f100:	6849      	ldr	r1, [r1, #4]
 800f102:	0849      	lsrs	r1, r1, #1
 800f104:	2000      	movs	r0, #0
 800f106:	460c      	mov	r4, r1
 800f108:	4605      	mov	r5, r0
 800f10a:	eb12 0804 	adds.w	r8, r2, r4
 800f10e:	eb43 0905 	adc.w	r9, r3, r5
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	469a      	mov	sl, r3
 800f11a:	4693      	mov	fp, r2
 800f11c:	4652      	mov	r2, sl
 800f11e:	465b      	mov	r3, fp
 800f120:	4640      	mov	r0, r8
 800f122:	4649      	mov	r1, r9
 800f124:	f7f1 f8d8 	bl	80002d8 <__aeabi_uldivmod>
 800f128:	4602      	mov	r2, r0
 800f12a:	460b      	mov	r3, r1
 800f12c:	4613      	mov	r3, r2
 800f12e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f136:	d308      	bcc.n	800f14a <UART_SetConfig+0x79a>
 800f138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f13a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f13e:	d204      	bcs.n	800f14a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f146:	60da      	str	r2, [r3, #12]
 800f148:	e17c      	b.n	800f444 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f150:	e178      	b.n	800f444 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	69db      	ldr	r3, [r3, #28]
 800f156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f15a:	f040 80c5 	bne.w	800f2e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f15e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f162:	2b20      	cmp	r3, #32
 800f164:	dc48      	bgt.n	800f1f8 <UART_SetConfig+0x848>
 800f166:	2b00      	cmp	r3, #0
 800f168:	db7b      	blt.n	800f262 <UART_SetConfig+0x8b2>
 800f16a:	2b20      	cmp	r3, #32
 800f16c:	d879      	bhi.n	800f262 <UART_SetConfig+0x8b2>
 800f16e:	a201      	add	r2, pc, #4	@ (adr r2, 800f174 <UART_SetConfig+0x7c4>)
 800f170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f174:	0800f1ff 	.word	0x0800f1ff
 800f178:	0800f207 	.word	0x0800f207
 800f17c:	0800f263 	.word	0x0800f263
 800f180:	0800f263 	.word	0x0800f263
 800f184:	0800f20f 	.word	0x0800f20f
 800f188:	0800f263 	.word	0x0800f263
 800f18c:	0800f263 	.word	0x0800f263
 800f190:	0800f263 	.word	0x0800f263
 800f194:	0800f21f 	.word	0x0800f21f
 800f198:	0800f263 	.word	0x0800f263
 800f19c:	0800f263 	.word	0x0800f263
 800f1a0:	0800f263 	.word	0x0800f263
 800f1a4:	0800f263 	.word	0x0800f263
 800f1a8:	0800f263 	.word	0x0800f263
 800f1ac:	0800f263 	.word	0x0800f263
 800f1b0:	0800f263 	.word	0x0800f263
 800f1b4:	0800f22f 	.word	0x0800f22f
 800f1b8:	0800f263 	.word	0x0800f263
 800f1bc:	0800f263 	.word	0x0800f263
 800f1c0:	0800f263 	.word	0x0800f263
 800f1c4:	0800f263 	.word	0x0800f263
 800f1c8:	0800f263 	.word	0x0800f263
 800f1cc:	0800f263 	.word	0x0800f263
 800f1d0:	0800f263 	.word	0x0800f263
 800f1d4:	0800f263 	.word	0x0800f263
 800f1d8:	0800f263 	.word	0x0800f263
 800f1dc:	0800f263 	.word	0x0800f263
 800f1e0:	0800f263 	.word	0x0800f263
 800f1e4:	0800f263 	.word	0x0800f263
 800f1e8:	0800f263 	.word	0x0800f263
 800f1ec:	0800f263 	.word	0x0800f263
 800f1f0:	0800f263 	.word	0x0800f263
 800f1f4:	0800f255 	.word	0x0800f255
 800f1f8:	2b40      	cmp	r3, #64	@ 0x40
 800f1fa:	d02e      	beq.n	800f25a <UART_SetConfig+0x8aa>
 800f1fc:	e031      	b.n	800f262 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1fe:	f7fa fe11 	bl	8009e24 <HAL_RCC_GetPCLK1Freq>
 800f202:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f204:	e033      	b.n	800f26e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f206:	f7fa fe23 	bl	8009e50 <HAL_RCC_GetPCLK2Freq>
 800f20a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f20c:	e02f      	b.n	800f26e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f20e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f212:	4618      	mov	r0, r3
 800f214:	f7fc fdd2 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f21c:	e027      	b.n	800f26e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f21e:	f107 0318 	add.w	r3, r7, #24
 800f222:	4618      	mov	r0, r3
 800f224:	f7fc ff1e 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f22c:	e01f      	b.n	800f26e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f22e:	4b2d      	ldr	r3, [pc, #180]	@ (800f2e4 <UART_SetConfig+0x934>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 0320 	and.w	r3, r3, #32
 800f236:	2b00      	cmp	r3, #0
 800f238:	d009      	beq.n	800f24e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f23a:	4b2a      	ldr	r3, [pc, #168]	@ (800f2e4 <UART_SetConfig+0x934>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	08db      	lsrs	r3, r3, #3
 800f240:	f003 0303 	and.w	r3, r3, #3
 800f244:	4a24      	ldr	r2, [pc, #144]	@ (800f2d8 <UART_SetConfig+0x928>)
 800f246:	fa22 f303 	lsr.w	r3, r2, r3
 800f24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f24c:	e00f      	b.n	800f26e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f24e:	4b22      	ldr	r3, [pc, #136]	@ (800f2d8 <UART_SetConfig+0x928>)
 800f250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f252:	e00c      	b.n	800f26e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f254:	4b21      	ldr	r3, [pc, #132]	@ (800f2dc <UART_SetConfig+0x92c>)
 800f256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f258:	e009      	b.n	800f26e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f25a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f260:	e005      	b.n	800f26e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f262:	2300      	movs	r3, #0
 800f264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f266:	2301      	movs	r3, #1
 800f268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f26c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 80e7 	beq.w	800f444 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f27a:	4a19      	ldr	r2, [pc, #100]	@ (800f2e0 <UART_SetConfig+0x930>)
 800f27c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f280:	461a      	mov	r2, r3
 800f282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f284:	fbb3 f3f2 	udiv	r3, r3, r2
 800f288:	005a      	lsls	r2, r3, #1
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	085b      	lsrs	r3, r3, #1
 800f290:	441a      	add	r2, r3
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	fbb2 f3f3 	udiv	r3, r2, r3
 800f29a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29e:	2b0f      	cmp	r3, #15
 800f2a0:	d916      	bls.n	800f2d0 <UART_SetConfig+0x920>
 800f2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2a8:	d212      	bcs.n	800f2d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	f023 030f 	bic.w	r3, r3, #15
 800f2b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2b6:	085b      	lsrs	r3, r3, #1
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	f003 0307 	and.w	r3, r3, #7
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f2cc:	60da      	str	r2, [r3, #12]
 800f2ce:	e0b9      	b.n	800f444 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f2d6:	e0b5      	b.n	800f444 <UART_SetConfig+0xa94>
 800f2d8:	03d09000 	.word	0x03d09000
 800f2dc:	003d0900 	.word	0x003d0900
 800f2e0:	0801208c 	.word	0x0801208c
 800f2e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f2e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f2ec:	2b20      	cmp	r3, #32
 800f2ee:	dc49      	bgt.n	800f384 <UART_SetConfig+0x9d4>
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	db7c      	blt.n	800f3ee <UART_SetConfig+0xa3e>
 800f2f4:	2b20      	cmp	r3, #32
 800f2f6:	d87a      	bhi.n	800f3ee <UART_SetConfig+0xa3e>
 800f2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800f300 <UART_SetConfig+0x950>)
 800f2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fe:	bf00      	nop
 800f300:	0800f38b 	.word	0x0800f38b
 800f304:	0800f393 	.word	0x0800f393
 800f308:	0800f3ef 	.word	0x0800f3ef
 800f30c:	0800f3ef 	.word	0x0800f3ef
 800f310:	0800f39b 	.word	0x0800f39b
 800f314:	0800f3ef 	.word	0x0800f3ef
 800f318:	0800f3ef 	.word	0x0800f3ef
 800f31c:	0800f3ef 	.word	0x0800f3ef
 800f320:	0800f3ab 	.word	0x0800f3ab
 800f324:	0800f3ef 	.word	0x0800f3ef
 800f328:	0800f3ef 	.word	0x0800f3ef
 800f32c:	0800f3ef 	.word	0x0800f3ef
 800f330:	0800f3ef 	.word	0x0800f3ef
 800f334:	0800f3ef 	.word	0x0800f3ef
 800f338:	0800f3ef 	.word	0x0800f3ef
 800f33c:	0800f3ef 	.word	0x0800f3ef
 800f340:	0800f3bb 	.word	0x0800f3bb
 800f344:	0800f3ef 	.word	0x0800f3ef
 800f348:	0800f3ef 	.word	0x0800f3ef
 800f34c:	0800f3ef 	.word	0x0800f3ef
 800f350:	0800f3ef 	.word	0x0800f3ef
 800f354:	0800f3ef 	.word	0x0800f3ef
 800f358:	0800f3ef 	.word	0x0800f3ef
 800f35c:	0800f3ef 	.word	0x0800f3ef
 800f360:	0800f3ef 	.word	0x0800f3ef
 800f364:	0800f3ef 	.word	0x0800f3ef
 800f368:	0800f3ef 	.word	0x0800f3ef
 800f36c:	0800f3ef 	.word	0x0800f3ef
 800f370:	0800f3ef 	.word	0x0800f3ef
 800f374:	0800f3ef 	.word	0x0800f3ef
 800f378:	0800f3ef 	.word	0x0800f3ef
 800f37c:	0800f3ef 	.word	0x0800f3ef
 800f380:	0800f3e1 	.word	0x0800f3e1
 800f384:	2b40      	cmp	r3, #64	@ 0x40
 800f386:	d02e      	beq.n	800f3e6 <UART_SetConfig+0xa36>
 800f388:	e031      	b.n	800f3ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f38a:	f7fa fd4b 	bl	8009e24 <HAL_RCC_GetPCLK1Freq>
 800f38e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f390:	e033      	b.n	800f3fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f392:	f7fa fd5d 	bl	8009e50 <HAL_RCC_GetPCLK2Freq>
 800f396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f398:	e02f      	b.n	800f3fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f39a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7fc fd0c 	bl	800bdbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3a8:	e027      	b.n	800f3fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3aa:	f107 0318 	add.w	r3, r7, #24
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fc fe58 	bl	800c064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3b8:	e01f      	b.n	800f3fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3ba:	4b2d      	ldr	r3, [pc, #180]	@ (800f470 <UART_SetConfig+0xac0>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f003 0320 	and.w	r3, r3, #32
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d009      	beq.n	800f3da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3c6:	4b2a      	ldr	r3, [pc, #168]	@ (800f470 <UART_SetConfig+0xac0>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	08db      	lsrs	r3, r3, #3
 800f3cc:	f003 0303 	and.w	r3, r3, #3
 800f3d0:	4a28      	ldr	r2, [pc, #160]	@ (800f474 <UART_SetConfig+0xac4>)
 800f3d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3d8:	e00f      	b.n	800f3fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f3da:	4b26      	ldr	r3, [pc, #152]	@ (800f474 <UART_SetConfig+0xac4>)
 800f3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3de:	e00c      	b.n	800f3fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3e0:	4b25      	ldr	r3, [pc, #148]	@ (800f478 <UART_SetConfig+0xac8>)
 800f3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3e4:	e009      	b.n	800f3fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3ec:	e005      	b.n	800f3fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f3f8:	bf00      	nop
    }

    if (pclk != 0U)
 800f3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d021      	beq.n	800f444 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f404:	4a1d      	ldr	r2, [pc, #116]	@ (800f47c <UART_SetConfig+0xacc>)
 800f406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f40a:	461a      	mov	r2, r3
 800f40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f40e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	085b      	lsrs	r3, r3, #1
 800f418:	441a      	add	r2, r3
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f422:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f426:	2b0f      	cmp	r3, #15
 800f428:	d909      	bls.n	800f43e <UART_SetConfig+0xa8e>
 800f42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f430:	d205      	bcs.n	800f43e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f434:	b29a      	uxth	r2, r3
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	60da      	str	r2, [r3, #12]
 800f43c:	e002      	b.n	800f444 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	2201      	movs	r2, #1
 800f448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	2201      	movs	r2, #1
 800f450:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2200      	movs	r2, #0
 800f458:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2200      	movs	r2, #0
 800f45e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f460:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f464:	4618      	mov	r0, r3
 800f466:	3748      	adds	r7, #72	@ 0x48
 800f468:	46bd      	mov	sp, r7
 800f46a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f46e:	bf00      	nop
 800f470:	58024400 	.word	0x58024400
 800f474:	03d09000 	.word	0x03d09000
 800f478:	003d0900 	.word	0x003d0900
 800f47c:	0801208c 	.word	0x0801208c

0800f480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f48c:	f003 0301 	and.w	r3, r3, #1
 800f490:	2b00      	cmp	r3, #0
 800f492:	d00a      	beq.n	800f4aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	430a      	orrs	r2, r1
 800f4a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4ae:	f003 0302 	and.w	r3, r3, #2
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00a      	beq.n	800f4cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	430a      	orrs	r2, r1
 800f4ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4d0:	f003 0304 	and.w	r3, r3, #4
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00a      	beq.n	800f4ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	430a      	orrs	r2, r1
 800f4ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4f2:	f003 0308 	and.w	r3, r3, #8
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d00a      	beq.n	800f510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	430a      	orrs	r2, r1
 800f50e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f514:	f003 0310 	and.w	r3, r3, #16
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00a      	beq.n	800f532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	430a      	orrs	r2, r1
 800f530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f536:	f003 0320 	and.w	r3, r3, #32
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00a      	beq.n	800f554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	430a      	orrs	r2, r1
 800f552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d01a      	beq.n	800f596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	430a      	orrs	r2, r1
 800f574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f57a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f57e:	d10a      	bne.n	800f596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	430a      	orrs	r2, r1
 800f594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f59a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d00a      	beq.n	800f5b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	430a      	orrs	r2, r1
 800f5b6:	605a      	str	r2, [r3, #4]
  }
}
 800f5b8:	bf00      	nop
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b098      	sub	sp, #96	@ 0x60
 800f5c8:	af02      	add	r7, sp, #8
 800f5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f5d4:	f7f3 feb6 	bl	8003344 <HAL_GetTick>
 800f5d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f003 0308 	and.w	r3, r3, #8
 800f5e4:	2b08      	cmp	r3, #8
 800f5e6:	d12f      	bne.n	800f648 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f5e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f88e 	bl	800f718 <UART_WaitOnFlagUntilTimeout>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d022      	beq.n	800f648 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60a:	e853 3f00 	ldrex	r3, [r3]
 800f60e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f616:	653b      	str	r3, [r7, #80]	@ 0x50
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	461a      	mov	r2, r3
 800f61e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f620:	647b      	str	r3, [r7, #68]	@ 0x44
 800f622:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f628:	e841 2300 	strex	r3, r2, [r1]
 800f62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1e6      	bne.n	800f602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2220      	movs	r2, #32
 800f638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f644:	2303      	movs	r3, #3
 800f646:	e063      	b.n	800f710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f003 0304 	and.w	r3, r3, #4
 800f652:	2b04      	cmp	r3, #4
 800f654:	d149      	bne.n	800f6ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f656:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f65e:	2200      	movs	r2, #0
 800f660:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 f857 	bl	800f718 <UART_WaitOnFlagUntilTimeout>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d03c      	beq.n	800f6ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f678:	e853 3f00 	ldrex	r3, [r3]
 800f67c:	623b      	str	r3, [r7, #32]
   return(result);
 800f67e:	6a3b      	ldr	r3, [r7, #32]
 800f680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	461a      	mov	r2, r3
 800f68c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f68e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f690:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f696:	e841 2300 	strex	r3, r2, [r1]
 800f69a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1e6      	bne.n	800f670 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	e853 3f00 	ldrex	r3, [r3]
 800f6b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f023 0301 	bic.w	r3, r3, #1
 800f6b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	3308      	adds	r3, #8
 800f6c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6c2:	61fa      	str	r2, [r7, #28]
 800f6c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c6:	69b9      	ldr	r1, [r7, #24]
 800f6c8:	69fa      	ldr	r2, [r7, #28]
 800f6ca:	e841 2300 	strex	r3, r2, [r1]
 800f6ce:	617b      	str	r3, [r7, #20]
   return(result);
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1e5      	bne.n	800f6a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2220      	movs	r2, #32
 800f6da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	e012      	b.n	800f710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2220      	movs	r2, #32
 800f6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	3758      	adds	r7, #88	@ 0x58
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	603b      	str	r3, [r7, #0]
 800f724:	4613      	mov	r3, r2
 800f726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f728:	e049      	b.n	800f7be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f730:	d045      	beq.n	800f7be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f732:	f7f3 fe07 	bl	8003344 <HAL_GetTick>
 800f736:	4602      	mov	r2, r0
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d302      	bcc.n	800f748 <UART_WaitOnFlagUntilTimeout+0x30>
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d101      	bne.n	800f74c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f748:	2303      	movs	r3, #3
 800f74a:	e048      	b.n	800f7de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f003 0304 	and.w	r3, r3, #4
 800f756:	2b00      	cmp	r3, #0
 800f758:	d031      	beq.n	800f7be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	69db      	ldr	r3, [r3, #28]
 800f760:	f003 0308 	and.w	r3, r3, #8
 800f764:	2b08      	cmp	r3, #8
 800f766:	d110      	bne.n	800f78a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2208      	movs	r2, #8
 800f76e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f000 f95b 	bl	800fa2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2208      	movs	r2, #8
 800f77a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2200      	movs	r2, #0
 800f782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800f786:	2301      	movs	r3, #1
 800f788:	e029      	b.n	800f7de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	69db      	ldr	r3, [r3, #28]
 800f790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f798:	d111      	bne.n	800f7be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f7a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f000 f941 	bl	800fa2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2220      	movs	r2, #32
 800f7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f7ba:	2303      	movs	r3, #3
 800f7bc:	e00f      	b.n	800f7de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	69da      	ldr	r2, [r3, #28]
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	4013      	ands	r3, r2
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	bf0c      	ite	eq
 800f7ce:	2301      	moveq	r3, #1
 800f7d0:	2300      	movne	r3, #0
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	79fb      	ldrb	r3, [r7, #7]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d0a6      	beq.n	800f72a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
	...

0800f7e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b0a3      	sub	sp, #140	@ 0x8c
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	68ba      	ldr	r2, [r7, #8]
 800f7fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	88fa      	ldrh	r2, [r7, #6]
 800f800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	88fa      	ldrh	r2, [r7, #6]
 800f808:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2200      	movs	r2, #0
 800f810:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f81a:	d10e      	bne.n	800f83a <UART_Start_Receive_IT+0x52>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d105      	bne.n	800f830 <UART_Start_Receive_IT+0x48>
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f82a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f82e:	e02d      	b.n	800f88c <UART_Start_Receive_IT+0xa4>
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	22ff      	movs	r2, #255	@ 0xff
 800f834:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f838:	e028      	b.n	800f88c <UART_Start_Receive_IT+0xa4>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d10d      	bne.n	800f85e <UART_Start_Receive_IT+0x76>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	691b      	ldr	r3, [r3, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d104      	bne.n	800f854 <UART_Start_Receive_IT+0x6c>
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	22ff      	movs	r2, #255	@ 0xff
 800f84e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f852:	e01b      	b.n	800f88c <UART_Start_Receive_IT+0xa4>
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	227f      	movs	r2, #127	@ 0x7f
 800f858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f85c:	e016      	b.n	800f88c <UART_Start_Receive_IT+0xa4>
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f866:	d10d      	bne.n	800f884 <UART_Start_Receive_IT+0x9c>
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	691b      	ldr	r3, [r3, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d104      	bne.n	800f87a <UART_Start_Receive_IT+0x92>
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	227f      	movs	r2, #127	@ 0x7f
 800f874:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f878:	e008      	b.n	800f88c <UART_Start_Receive_IT+0xa4>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	223f      	movs	r2, #63	@ 0x3f
 800f87e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f882:	e003      	b.n	800f88c <UART_Start_Receive_IT+0xa4>
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2200      	movs	r2, #0
 800f888:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2200      	movs	r2, #0
 800f890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2222      	movs	r2, #34	@ 0x22
 800f898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8a6:	e853 3f00 	ldrex	r3, [r3]
 800f8aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f8ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f8ae:	f043 0301 	orr.w	r3, r3, #1
 800f8b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f8c0:	673a      	str	r2, [r7, #112]	@ 0x70
 800f8c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f8c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f8c8:	e841 2300 	strex	r3, r2, [r1]
 800f8cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800f8ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d1e3      	bne.n	800f89c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f8d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8dc:	d14f      	bne.n	800f97e <UART_Start_Receive_IT+0x196>
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f8e4:	88fa      	ldrh	r2, [r7, #6]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d349      	bcc.n	800f97e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8f2:	d107      	bne.n	800f904 <UART_Start_Receive_IT+0x11c>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	691b      	ldr	r3, [r3, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d103      	bne.n	800f904 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	4a47      	ldr	r2, [pc, #284]	@ (800fa1c <UART_Start_Receive_IT+0x234>)
 800f900:	675a      	str	r2, [r3, #116]	@ 0x74
 800f902:	e002      	b.n	800f90a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	4a46      	ldr	r2, [pc, #280]	@ (800fa20 <UART_Start_Receive_IT+0x238>)
 800f908:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	691b      	ldr	r3, [r3, #16]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d01a      	beq.n	800f948 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f91a:	e853 3f00 	ldrex	r3, [r3]
 800f91e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	461a      	mov	r2, r3
 800f930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f936:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f938:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f93a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f93c:	e841 2300 	strex	r3, r2, [r1]
 800f940:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800f942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1e4      	bne.n	800f912 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	3308      	adds	r3, #8
 800f94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f952:	e853 3f00 	ldrex	r3, [r3]
 800f956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f95e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	3308      	adds	r3, #8
 800f966:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f968:	64ba      	str	r2, [r7, #72]	@ 0x48
 800f96a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f96e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f970:	e841 2300 	strex	r3, r2, [r1]
 800f974:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1e5      	bne.n	800f948 <UART_Start_Receive_IT+0x160>
 800f97c:	e046      	b.n	800fa0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	689b      	ldr	r3, [r3, #8]
 800f982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f986:	d107      	bne.n	800f998 <UART_Start_Receive_IT+0x1b0>
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d103      	bne.n	800f998 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	4a24      	ldr	r2, [pc, #144]	@ (800fa24 <UART_Start_Receive_IT+0x23c>)
 800f994:	675a      	str	r2, [r3, #116]	@ 0x74
 800f996:	e002      	b.n	800f99e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	4a23      	ldr	r2, [pc, #140]	@ (800fa28 <UART_Start_Receive_IT+0x240>)
 800f99c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d019      	beq.n	800f9da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ae:	e853 3f00 	ldrex	r3, [r3]
 800f9b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800f9ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9c6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f9ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f9cc:	e841 2300 	strex	r3, r2, [r1]
 800f9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1e6      	bne.n	800f9a6 <UART_Start_Receive_IT+0x1be>
 800f9d8:	e018      	b.n	800fa0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	e853 3f00 	ldrex	r3, [r3]
 800f9e6:	613b      	str	r3, [r7, #16]
   return(result);
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	f043 0320 	orr.w	r3, r3, #32
 800f9ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9f8:	623b      	str	r3, [r7, #32]
 800f9fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9fc:	69f9      	ldr	r1, [r7, #28]
 800f9fe:	6a3a      	ldr	r2, [r7, #32]
 800fa00:	e841 2300 	strex	r3, r2, [r1]
 800fa04:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1e6      	bne.n	800f9da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	378c      	adds	r7, #140	@ 0x8c
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	0801024d 	.word	0x0801024d
 800fa20:	0800feed 	.word	0x0800feed
 800fa24:	0800fd35 	.word	0x0800fd35
 800fa28:	0800fb7d 	.word	0x0800fb7d

0800fa2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b095      	sub	sp, #84	@ 0x54
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa3c:	e853 3f00 	ldrex	r3, [r3]
 800fa40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa52:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fa58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa5a:	e841 2300 	strex	r3, r2, [r1]
 800fa5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d1e6      	bne.n	800fa34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	3308      	adds	r3, #8
 800fa6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa6e:	6a3b      	ldr	r3, [r7, #32]
 800fa70:	e853 3f00 	ldrex	r3, [r3]
 800fa74:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa76:	69fa      	ldr	r2, [r7, #28]
 800fa78:	4b1e      	ldr	r3, [pc, #120]	@ (800faf4 <UART_EndRxTransfer+0xc8>)
 800fa7a:	4013      	ands	r3, r2
 800fa7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3308      	adds	r3, #8
 800fa84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fa88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa8e:	e841 2300 	strex	r3, r2, [r1]
 800fa92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1e5      	bne.n	800fa66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d118      	bne.n	800fad4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	e853 3f00 	ldrex	r3, [r3]
 800faae:	60bb      	str	r3, [r7, #8]
   return(result);
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	f023 0310 	bic.w	r3, r3, #16
 800fab6:	647b      	str	r3, [r7, #68]	@ 0x44
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	461a      	mov	r2, r3
 800fabe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fac0:	61bb      	str	r3, [r7, #24]
 800fac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fac4:	6979      	ldr	r1, [r7, #20]
 800fac6:	69ba      	ldr	r2, [r7, #24]
 800fac8:	e841 2300 	strex	r3, r2, [r1]
 800facc:	613b      	str	r3, [r7, #16]
   return(result);
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d1e6      	bne.n	800faa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2220      	movs	r2, #32
 800fad8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fae8:	bf00      	nop
 800faea:	3754      	adds	r7, #84	@ 0x54
 800faec:	46bd      	mov	sp, r7
 800faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf2:	4770      	bx	lr
 800faf4:	effffffe 	.word	0xeffffffe

0800faf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f7fe ff34 	bl	800e984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb1c:	bf00      	nop
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb40:	61fb      	str	r3, [r7, #28]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	61bb      	str	r3, [r7, #24]
 800fb4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4e:	6979      	ldr	r1, [r7, #20]
 800fb50:	69ba      	ldr	r2, [r7, #24]
 800fb52:	e841 2300 	strex	r3, r2, [r1]
 800fb56:	613b      	str	r3, [r7, #16]
   return(result);
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1e6      	bne.n	800fb2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2220      	movs	r2, #32
 800fb62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7fe feff 	bl	800e970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb72:	bf00      	nop
 800fb74:	3720      	adds	r7, #32
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
	...

0800fb7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b09c      	sub	sp, #112	@ 0x70
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fb8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb94:	2b22      	cmp	r3, #34	@ 0x22
 800fb96:	f040 80be 	bne.w	800fd16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fba0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fba4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800fba8:	b2d9      	uxtb	r1, r3
 800fbaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbb4:	400a      	ands	r2, r1
 800fbb6:	b2d2      	uxtb	r2, r2
 800fbb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f040 80a1 	bne.w	800fd26 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbec:	e853 3f00 	ldrex	r3, [r3]
 800fbf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fbf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fbf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc02:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fc04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fc08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fc0a:	e841 2300 	strex	r3, r2, [r1]
 800fc0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fc10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d1e6      	bne.n	800fbe4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc20:	e853 3f00 	ldrex	r3, [r3]
 800fc24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc28:	f023 0301 	bic.w	r3, r3, #1
 800fc2c:	667b      	str	r3, [r7, #100]	@ 0x64
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	3308      	adds	r3, #8
 800fc34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fc36:	647a      	str	r2, [r7, #68]	@ 0x44
 800fc38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc3e:	e841 2300 	strex	r3, r2, [r1]
 800fc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1e5      	bne.n	800fc16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2220      	movs	r2, #32
 800fc4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a33      	ldr	r2, [pc, #204]	@ (800fd30 <UART_RxISR_8BIT+0x1b4>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d01f      	beq.n	800fca8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d018      	beq.n	800fca8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc7e:	e853 3f00 	ldrex	r3, [r3]
 800fc82:	623b      	str	r3, [r7, #32]
   return(result);
 800fc84:	6a3b      	ldr	r3, [r7, #32]
 800fc86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fc8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	461a      	mov	r2, r3
 800fc92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc94:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc9c:	e841 2300 	strex	r3, r2, [r1]
 800fca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1e6      	bne.n	800fc76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d12e      	bne.n	800fd0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	e853 3f00 	ldrex	r3, [r3]
 800fcc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f023 0310 	bic.w	r3, r3, #16
 800fcca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcd4:	61fb      	str	r3, [r7, #28]
 800fcd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd8:	69b9      	ldr	r1, [r7, #24]
 800fcda:	69fa      	ldr	r2, [r7, #28]
 800fcdc:	e841 2300 	strex	r3, r2, [r1]
 800fce0:	617b      	str	r3, [r7, #20]
   return(result);
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1e6      	bne.n	800fcb6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	69db      	ldr	r3, [r3, #28]
 800fcee:	f003 0310 	and.w	r3, r3, #16
 800fcf2:	2b10      	cmp	r3, #16
 800fcf4:	d103      	bne.n	800fcfe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2210      	movs	r2, #16
 800fcfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fd04:	4619      	mov	r1, r3
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f7fe fe46 	bl	800e998 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fd0c:	e00b      	b.n	800fd26 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f7f2 fcfe 	bl	8002710 <HAL_UART_RxCpltCallback>
}
 800fd14:	e007      	b.n	800fd26 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	699a      	ldr	r2, [r3, #24]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f042 0208 	orr.w	r2, r2, #8
 800fd24:	619a      	str	r2, [r3, #24]
}
 800fd26:	bf00      	nop
 800fd28:	3770      	adds	r7, #112	@ 0x70
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	58000c00 	.word	0x58000c00

0800fd34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b09c      	sub	sp, #112	@ 0x70
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fd42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fd4c:	2b22      	cmp	r3, #34	@ 0x22
 800fd4e:	f040 80be 	bne.w	800fece <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd60:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800fd62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800fd66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800fd6a:	4013      	ands	r3, r2
 800fd6c:	b29a      	uxth	r2, r3
 800fd6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fd70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd76:	1c9a      	adds	r2, r3, #2
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	3b01      	subs	r3, #1
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f040 80a1 	bne.w	800fede <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fda4:	e853 3f00 	ldrex	r3, [r3]
 800fda8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fdaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fdb0:	667b      	str	r3, [r7, #100]	@ 0x64
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdba:	657b      	str	r3, [r7, #84]	@ 0x54
 800fdbc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fdc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fdc2:	e841 2300 	strex	r3, r2, [r1]
 800fdc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fdc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1e6      	bne.n	800fd9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3308      	adds	r3, #8
 800fdd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd8:	e853 3f00 	ldrex	r3, [r3]
 800fddc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde0:	f023 0301 	bic.w	r3, r3, #1
 800fde4:	663b      	str	r3, [r7, #96]	@ 0x60
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	3308      	adds	r3, #8
 800fdec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fdee:	643a      	str	r2, [r7, #64]	@ 0x40
 800fdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fdf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fdf6:	e841 2300 	strex	r3, r2, [r1]
 800fdfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d1e5      	bne.n	800fdce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2220      	movs	r2, #32
 800fe06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2200      	movs	r2, #0
 800fe14:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4a33      	ldr	r2, [pc, #204]	@ (800fee8 <UART_RxISR_16BIT+0x1b4>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d01f      	beq.n	800fe60 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d018      	beq.n	800fe60 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe34:	6a3b      	ldr	r3, [r7, #32]
 800fe36:	e853 3f00 	ldrex	r3, [r3]
 800fe3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fe42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe4e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe54:	e841 2300 	strex	r3, r2, [r1]
 800fe58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fe5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1e6      	bne.n	800fe2e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d12e      	bne.n	800fec6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	e853 3f00 	ldrex	r3, [r3]
 800fe7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	f023 0310 	bic.w	r3, r3, #16
 800fe82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	461a      	mov	r2, r3
 800fe8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe8c:	61bb      	str	r3, [r7, #24]
 800fe8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe90:	6979      	ldr	r1, [r7, #20]
 800fe92:	69ba      	ldr	r2, [r7, #24]
 800fe94:	e841 2300 	strex	r3, r2, [r1]
 800fe98:	613b      	str	r3, [r7, #16]
   return(result);
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1e6      	bne.n	800fe6e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	69db      	ldr	r3, [r3, #28]
 800fea6:	f003 0310 	and.w	r3, r3, #16
 800feaa:	2b10      	cmp	r3, #16
 800feac:	d103      	bne.n	800feb6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2210      	movs	r2, #16
 800feb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7fe fd6a 	bl	800e998 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fec4:	e00b      	b.n	800fede <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7f2 fc22 	bl	8002710 <HAL_UART_RxCpltCallback>
}
 800fecc:	e007      	b.n	800fede <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	699a      	ldr	r2, [r3, #24]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f042 0208 	orr.w	r2, r2, #8
 800fedc:	619a      	str	r2, [r3, #24]
}
 800fede:	bf00      	nop
 800fee0:	3770      	adds	r7, #112	@ 0x70
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	58000c00 	.word	0x58000c00

0800feec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b0ac      	sub	sp, #176	@ 0xb0
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fefa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	69db      	ldr	r3, [r3, #28]
 800ff04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff22:	2b22      	cmp	r3, #34	@ 0x22
 800ff24:	f040 8180 	bne.w	8010228 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ff2e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff32:	e123      	b.n	801017c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff3a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ff3e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ff42:	b2d9      	uxtb	r1, r3
 800ff44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff4e:	400a      	ands	r2, r1
 800ff50:	b2d2      	uxtb	r2, r2
 800ff52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff58:	1c5a      	adds	r2, r3, #1
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	3b01      	subs	r3, #1
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	69db      	ldr	r3, [r3, #28]
 800ff76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ff7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff7e:	f003 0307 	and.w	r3, r3, #7
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d053      	beq.n	801002e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ff86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ff8a:	f003 0301 	and.w	r3, r3, #1
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d011      	beq.n	800ffb6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ff92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ff96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00b      	beq.n	800ffb6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffac:	f043 0201 	orr.w	r2, r3, #1
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffba:	f003 0302 	and.w	r3, r3, #2
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d011      	beq.n	800ffe6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ffc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00b      	beq.n	800ffe6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2202      	movs	r2, #2
 800ffd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffdc:	f043 0204 	orr.w	r2, r3, #4
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffea:	f003 0304 	and.w	r3, r3, #4
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d011      	beq.n	8010016 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fff6:	f003 0301 	and.w	r3, r3, #1
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00b      	beq.n	8010016 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2204      	movs	r2, #4
 8010004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801000c:	f043 0202 	orr.w	r2, r3, #2
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801001c:	2b00      	cmp	r3, #0
 801001e:	d006      	beq.n	801002e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7fe fcaf 	bl	800e984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010034:	b29b      	uxth	r3, r3
 8010036:	2b00      	cmp	r3, #0
 8010038:	f040 80a0 	bne.w	801017c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010044:	e853 3f00 	ldrex	r3, [r3]
 8010048:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801004a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801004c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010050:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	461a      	mov	r2, r3
 801005a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801005e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010060:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010062:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010064:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010066:	e841 2300 	strex	r3, r2, [r1]
 801006a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801006c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1e4      	bne.n	801003c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3308      	adds	r3, #8
 8010078:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801007a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801007c:	e853 3f00 	ldrex	r3, [r3]
 8010080:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8010082:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010084:	4b6e      	ldr	r3, [pc, #440]	@ (8010240 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010086:	4013      	ands	r3, r2
 8010088:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3308      	adds	r3, #8
 8010092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010096:	66ba      	str	r2, [r7, #104]	@ 0x68
 8010098:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801009a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801009c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801009e:	e841 2300 	strex	r3, r2, [r1]
 80100a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80100a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1e3      	bne.n	8010072 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2220      	movs	r2, #32
 80100ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a60      	ldr	r2, [pc, #384]	@ (8010244 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d021      	beq.n	801010c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d01a      	beq.n	801010c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100de:	e853 3f00 	ldrex	r3, [r3]
 80100e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80100e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80100ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	461a      	mov	r2, r3
 80100f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80100f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80100fa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80100fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010100:	e841 2300 	strex	r3, r2, [r1]
 8010104:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010108:	2b00      	cmp	r3, #0
 801010a:	d1e4      	bne.n	80100d6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010110:	2b01      	cmp	r3, #1
 8010112:	d130      	bne.n	8010176 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2200      	movs	r2, #0
 8010118:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010122:	e853 3f00 	ldrex	r3, [r3]
 8010126:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801012a:	f023 0310 	bic.w	r3, r3, #16
 801012e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	461a      	mov	r2, r3
 8010138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801013c:	643b      	str	r3, [r7, #64]	@ 0x40
 801013e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010144:	e841 2300 	strex	r3, r2, [r1]
 8010148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801014a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1e4      	bne.n	801011a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	69db      	ldr	r3, [r3, #28]
 8010156:	f003 0310 	and.w	r3, r3, #16
 801015a:	2b10      	cmp	r3, #16
 801015c:	d103      	bne.n	8010166 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	2210      	movs	r2, #16
 8010164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7fe fc12 	bl	800e998 <HAL_UARTEx_RxEventCallback>
 8010174:	e002      	b.n	801017c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f7f2 faca 	bl	8002710 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801017c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8010180:	2b00      	cmp	r3, #0
 8010182:	d006      	beq.n	8010192 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010188:	f003 0320 	and.w	r3, r3, #32
 801018c:	2b00      	cmp	r3, #0
 801018e:	f47f aed1 	bne.w	800ff34 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010198:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801019c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d049      	beq.n	8010238 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80101aa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d242      	bcs.n	8010238 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	3308      	adds	r3, #8
 80101b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ba:	6a3b      	ldr	r3, [r7, #32]
 80101bc:	e853 3f00 	ldrex	r3, [r3]
 80101c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80101c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	3308      	adds	r3, #8
 80101d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80101d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80101d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101de:	e841 2300 	strex	r3, r2, [r1]
 80101e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80101e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1e3      	bne.n	80101b2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4a16      	ldr	r2, [pc, #88]	@ (8010248 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80101ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	e853 3f00 	ldrex	r3, [r3]
 80101fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	f043 0320 	orr.w	r3, r3, #32
 8010204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
 801020e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010212:	61bb      	str	r3, [r7, #24]
 8010214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010216:	6979      	ldr	r1, [r7, #20]
 8010218:	69ba      	ldr	r2, [r7, #24]
 801021a:	e841 2300 	strex	r3, r2, [r1]
 801021e:	613b      	str	r3, [r7, #16]
   return(result);
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1e4      	bne.n	80101f0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010226:	e007      	b.n	8010238 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	699a      	ldr	r2, [r3, #24]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f042 0208 	orr.w	r2, r2, #8
 8010236:	619a      	str	r2, [r3, #24]
}
 8010238:	bf00      	nop
 801023a:	37b0      	adds	r7, #176	@ 0xb0
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	effffffe 	.word	0xeffffffe
 8010244:	58000c00 	.word	0x58000c00
 8010248:	0800fb7d 	.word	0x0800fb7d

0801024c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b0ae      	sub	sp, #184	@ 0xb8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801025a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010282:	2b22      	cmp	r3, #34	@ 0x22
 8010284:	f040 8184 	bne.w	8010590 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801028e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010292:	e127      	b.n	80104e4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801029a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80102a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80102aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80102ae:	4013      	ands	r3, r2
 80102b0:	b29a      	uxth	r2, r3
 80102b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80102b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102bc:	1c9a      	adds	r2, r3, #2
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	3b01      	subs	r3, #1
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	69db      	ldr	r3, [r3, #28]
 80102da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80102de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80102e2:	f003 0307 	and.w	r3, r3, #7
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d053      	beq.n	8010392 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d011      	beq.n	801031a <UART_RxISR_16BIT_FIFOEN+0xce>
 80102f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00b      	beq.n	801031a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2201      	movs	r2, #1
 8010308:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010310:	f043 0201 	orr.w	r2, r3, #1
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801031a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801031e:	f003 0302 	and.w	r3, r3, #2
 8010322:	2b00      	cmp	r3, #0
 8010324:	d011      	beq.n	801034a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801032a:	f003 0301 	and.w	r3, r3, #1
 801032e:	2b00      	cmp	r3, #0
 8010330:	d00b      	beq.n	801034a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	2202      	movs	r2, #2
 8010338:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010340:	f043 0204 	orr.w	r2, r3, #4
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801034a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801034e:	f003 0304 	and.w	r3, r3, #4
 8010352:	2b00      	cmp	r3, #0
 8010354:	d011      	beq.n	801037a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801035a:	f003 0301 	and.w	r3, r3, #1
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00b      	beq.n	801037a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2204      	movs	r2, #4
 8010368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010370:	f043 0202 	orr.w	r2, r3, #2
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010380:	2b00      	cmp	r3, #0
 8010382:	d006      	beq.n	8010392 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7fe fafd 	bl	800e984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010398:	b29b      	uxth	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	f040 80a2 	bne.w	80104e4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80103a8:	e853 3f00 	ldrex	r3, [r3]
 80103ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80103ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80103b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	461a      	mov	r2, r3
 80103be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80103c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80103c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80103ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80103ce:	e841 2300 	strex	r3, r2, [r1]
 80103d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80103d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d1e2      	bne.n	80103a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	3308      	adds	r3, #8
 80103e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103e4:	e853 3f00 	ldrex	r3, [r3]
 80103e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80103ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80103ec:	4b6e      	ldr	r3, [pc, #440]	@ (80105a8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80103ee:	4013      	ands	r3, r2
 80103f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	3308      	adds	r3, #8
 80103fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80103fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010400:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010402:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010406:	e841 2300 	strex	r3, r2, [r1]
 801040a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801040c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1e3      	bne.n	80103da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2220      	movs	r2, #32
 8010416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a60      	ldr	r2, [pc, #384]	@ (80105ac <UART_RxISR_16BIT_FIFOEN+0x360>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d021      	beq.n	8010474 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801043a:	2b00      	cmp	r3, #0
 801043c:	d01a      	beq.n	8010474 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010446:	e853 3f00 	ldrex	r3, [r3]
 801044a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801044c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801044e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010452:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	461a      	mov	r2, r3
 801045c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010460:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010462:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010464:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010466:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010468:	e841 2300 	strex	r3, r2, [r1]
 801046c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801046e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1e4      	bne.n	801043e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010478:	2b01      	cmp	r3, #1
 801047a:	d130      	bne.n	80104de <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2200      	movs	r2, #0
 8010480:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801048a:	e853 3f00 	ldrex	r3, [r3]
 801048e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010492:	f023 0310 	bic.w	r3, r3, #16
 8010496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	461a      	mov	r2, r3
 80104a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80104a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80104a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80104aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104ac:	e841 2300 	strex	r3, r2, [r1]
 80104b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80104b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e4      	bne.n	8010482 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	69db      	ldr	r3, [r3, #28]
 80104be:	f003 0310 	and.w	r3, r3, #16
 80104c2:	2b10      	cmp	r3, #16
 80104c4:	d103      	bne.n	80104ce <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2210      	movs	r2, #16
 80104cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80104d4:	4619      	mov	r1, r3
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f7fe fa5e 	bl	800e998 <HAL_UARTEx_RxEventCallback>
 80104dc:	e002      	b.n	80104e4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7f2 f916 	bl	8002710 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d006      	beq.n	80104fa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80104ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80104f0:	f003 0320 	and.w	r3, r3, #32
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f47f aecd 	bne.w	8010294 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010500:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010504:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8010508:	2b00      	cmp	r3, #0
 801050a:	d049      	beq.n	80105a0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010512:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8010516:	429a      	cmp	r2, r3
 8010518:	d242      	bcs.n	80105a0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	3308      	adds	r3, #8
 8010520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010524:	e853 3f00 	ldrex	r3, [r3]
 8010528:	623b      	str	r3, [r7, #32]
   return(result);
 801052a:	6a3b      	ldr	r3, [r7, #32]
 801052c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	3308      	adds	r3, #8
 801053a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801053e:	633a      	str	r2, [r7, #48]	@ 0x30
 8010540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010546:	e841 2300 	strex	r3, r2, [r1]
 801054a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801054c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1e3      	bne.n	801051a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4a16      	ldr	r2, [pc, #88]	@ (80105b0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010556:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	e853 3f00 	ldrex	r3, [r3]
 8010564:	60fb      	str	r3, [r7, #12]
   return(result);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f043 0320 	orr.w	r3, r3, #32
 801056c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	461a      	mov	r2, r3
 8010576:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801057a:	61fb      	str	r3, [r7, #28]
 801057c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057e:	69b9      	ldr	r1, [r7, #24]
 8010580:	69fa      	ldr	r2, [r7, #28]
 8010582:	e841 2300 	strex	r3, r2, [r1]
 8010586:	617b      	str	r3, [r7, #20]
   return(result);
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1e4      	bne.n	8010558 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801058e:	e007      	b.n	80105a0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	699a      	ldr	r2, [r3, #24]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f042 0208 	orr.w	r2, r2, #8
 801059e:	619a      	str	r2, [r3, #24]
}
 80105a0:	bf00      	nop
 80105a2:	37b8      	adds	r7, #184	@ 0xb8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	effffffe 	.word	0xeffffffe
 80105ac:	58000c00 	.word	0x58000c00
 80105b0:	0800fd35 	.word	0x0800fd35

080105b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80105bc:	bf00      	nop
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80105d0:	bf00      	nop
 80105d2:	370c      	adds	r7, #12
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr

080105dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80105dc:	b480      	push	{r7}
 80105de:	b083      	sub	sp, #12
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80105e4:	bf00      	nop
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d101      	bne.n	8010606 <HAL_UARTEx_DisableFifoMode+0x16>
 8010602:	2302      	movs	r3, #2
 8010604:	e027      	b.n	8010656 <HAL_UARTEx_DisableFifoMode+0x66>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2201      	movs	r2, #1
 801060a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2224      	movs	r2, #36	@ 0x24
 8010612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f022 0201 	bic.w	r2, r2, #1
 801062c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010634:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2220      	movs	r2, #32
 8010648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3714      	adds	r7, #20
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr

08010662 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010662:	b580      	push	{r7, lr}
 8010664:	b084      	sub	sp, #16
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010672:	2b01      	cmp	r3, #1
 8010674:	d101      	bne.n	801067a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010676:	2302      	movs	r3, #2
 8010678:	e02d      	b.n	80106d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2201      	movs	r2, #1
 801067e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2224      	movs	r2, #36	@ 0x24
 8010686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	681a      	ldr	r2, [r3, #0]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f022 0201 	bic.w	r2, r2, #1
 80106a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	683a      	ldr	r2, [r7, #0]
 80106b2:	430a      	orrs	r2, r1
 80106b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 f850 	bl	801075c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2220      	movs	r2, #32
 80106c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d101      	bne.n	80106f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80106f2:	2302      	movs	r3, #2
 80106f4:	e02d      	b.n	8010752 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2201      	movs	r2, #1
 80106fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2224      	movs	r2, #36	@ 0x24
 8010702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f022 0201 	bic.w	r2, r2, #1
 801071c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	689b      	ldr	r3, [r3, #8]
 8010724:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	683a      	ldr	r2, [r7, #0]
 801072e:	430a      	orrs	r2, r1
 8010730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 f812 	bl	801075c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2220      	movs	r2, #32
 8010744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010750:	2300      	movs	r3, #0
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
	...

0801075c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010768:	2b00      	cmp	r3, #0
 801076a:	d108      	bne.n	801077e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2201      	movs	r2, #1
 8010770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801077c:	e031      	b.n	80107e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801077e:	2310      	movs	r3, #16
 8010780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010782:	2310      	movs	r3, #16
 8010784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	0e5b      	lsrs	r3, r3, #25
 801078e:	b2db      	uxtb	r3, r3
 8010790:	f003 0307 	and.w	r3, r3, #7
 8010794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	689b      	ldr	r3, [r3, #8]
 801079c:	0f5b      	lsrs	r3, r3, #29
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	f003 0307 	and.w	r3, r3, #7
 80107a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107a6:	7bbb      	ldrb	r3, [r7, #14]
 80107a8:	7b3a      	ldrb	r2, [r7, #12]
 80107aa:	4911      	ldr	r1, [pc, #68]	@ (80107f0 <UARTEx_SetNbDataToProcess+0x94>)
 80107ac:	5c8a      	ldrb	r2, [r1, r2]
 80107ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80107b2:	7b3a      	ldrb	r2, [r7, #12]
 80107b4:	490f      	ldr	r1, [pc, #60]	@ (80107f4 <UARTEx_SetNbDataToProcess+0x98>)
 80107b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80107bc:	b29a      	uxth	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
 80107c6:	7b7a      	ldrb	r2, [r7, #13]
 80107c8:	4909      	ldr	r1, [pc, #36]	@ (80107f0 <UARTEx_SetNbDataToProcess+0x94>)
 80107ca:	5c8a      	ldrb	r2, [r1, r2]
 80107cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80107d0:	7b7a      	ldrb	r2, [r7, #13]
 80107d2:	4908      	ldr	r1, [pc, #32]	@ (80107f4 <UARTEx_SetNbDataToProcess+0x98>)
 80107d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80107da:	b29a      	uxth	r2, r3
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80107e2:	bf00      	nop
 80107e4:	3714      	adds	r7, #20
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop
 80107f0:	080120a4 	.word	0x080120a4
 80107f4:	080120ac 	.word	0x080120ac

080107f8 <memset>:
 80107f8:	4402      	add	r2, r0
 80107fa:	4603      	mov	r3, r0
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d100      	bne.n	8010802 <memset+0xa>
 8010800:	4770      	bx	lr
 8010802:	f803 1b01 	strb.w	r1, [r3], #1
 8010806:	e7f9      	b.n	80107fc <memset+0x4>

08010808 <__errno>:
 8010808:	4b01      	ldr	r3, [pc, #4]	@ (8010810 <__errno+0x8>)
 801080a:	6818      	ldr	r0, [r3, #0]
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop
 8010810:	2400003c 	.word	0x2400003c

08010814 <__libc_init_array>:
 8010814:	b570      	push	{r4, r5, r6, lr}
 8010816:	4d0d      	ldr	r5, [pc, #52]	@ (801084c <__libc_init_array+0x38>)
 8010818:	4c0d      	ldr	r4, [pc, #52]	@ (8010850 <__libc_init_array+0x3c>)
 801081a:	1b64      	subs	r4, r4, r5
 801081c:	10a4      	asrs	r4, r4, #2
 801081e:	2600      	movs	r6, #0
 8010820:	42a6      	cmp	r6, r4
 8010822:	d109      	bne.n	8010838 <__libc_init_array+0x24>
 8010824:	4d0b      	ldr	r5, [pc, #44]	@ (8010854 <__libc_init_array+0x40>)
 8010826:	4c0c      	ldr	r4, [pc, #48]	@ (8010858 <__libc_init_array+0x44>)
 8010828:	f001 fb8c 	bl	8011f44 <_init>
 801082c:	1b64      	subs	r4, r4, r5
 801082e:	10a4      	asrs	r4, r4, #2
 8010830:	2600      	movs	r6, #0
 8010832:	42a6      	cmp	r6, r4
 8010834:	d105      	bne.n	8010842 <__libc_init_array+0x2e>
 8010836:	bd70      	pop	{r4, r5, r6, pc}
 8010838:	f855 3b04 	ldr.w	r3, [r5], #4
 801083c:	4798      	blx	r3
 801083e:	3601      	adds	r6, #1
 8010840:	e7ee      	b.n	8010820 <__libc_init_array+0xc>
 8010842:	f855 3b04 	ldr.w	r3, [r5], #4
 8010846:	4798      	blx	r3
 8010848:	3601      	adds	r6, #1
 801084a:	e7f2      	b.n	8010832 <__libc_init_array+0x1e>
 801084c:	080143e0 	.word	0x080143e0
 8010850:	080143e0 	.word	0x080143e0
 8010854:	080143e0 	.word	0x080143e0
 8010858:	080143e8 	.word	0x080143e8

0801085c <__retarget_lock_acquire_recursive>:
 801085c:	4770      	bx	lr

0801085e <__retarget_lock_release_recursive>:
 801085e:	4770      	bx	lr

08010860 <register_fini>:
 8010860:	4b02      	ldr	r3, [pc, #8]	@ (801086c <register_fini+0xc>)
 8010862:	b113      	cbz	r3, 801086a <register_fini+0xa>
 8010864:	4802      	ldr	r0, [pc, #8]	@ (8010870 <register_fini+0x10>)
 8010866:	f000 b805 	b.w	8010874 <atexit>
 801086a:	4770      	bx	lr
 801086c:	00000000 	.word	0x00000000
 8010870:	08010881 	.word	0x08010881

08010874 <atexit>:
 8010874:	2300      	movs	r3, #0
 8010876:	4601      	mov	r1, r0
 8010878:	461a      	mov	r2, r3
 801087a:	4618      	mov	r0, r3
 801087c:	f000 b814 	b.w	80108a8 <__register_exitproc>

08010880 <__libc_fini_array>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4d07      	ldr	r5, [pc, #28]	@ (80108a0 <__libc_fini_array+0x20>)
 8010884:	4c07      	ldr	r4, [pc, #28]	@ (80108a4 <__libc_fini_array+0x24>)
 8010886:	1b64      	subs	r4, r4, r5
 8010888:	10a4      	asrs	r4, r4, #2
 801088a:	b91c      	cbnz	r4, 8010894 <__libc_fini_array+0x14>
 801088c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010890:	f001 bb5e 	b.w	8011f50 <_fini>
 8010894:	3c01      	subs	r4, #1
 8010896:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801089a:	4798      	blx	r3
 801089c:	e7f5      	b.n	801088a <__libc_fini_array+0xa>
 801089e:	bf00      	nop
 80108a0:	080143e8 	.word	0x080143e8
 80108a4:	080143ec 	.word	0x080143ec

080108a8 <__register_exitproc>:
 80108a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ac:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8010924 <__register_exitproc+0x7c>
 80108b0:	4606      	mov	r6, r0
 80108b2:	f8da 0000 	ldr.w	r0, [sl]
 80108b6:	4698      	mov	r8, r3
 80108b8:	460f      	mov	r7, r1
 80108ba:	4691      	mov	r9, r2
 80108bc:	f7ff ffce 	bl	801085c <__retarget_lock_acquire_recursive>
 80108c0:	4b16      	ldr	r3, [pc, #88]	@ (801091c <__register_exitproc+0x74>)
 80108c2:	681c      	ldr	r4, [r3, #0]
 80108c4:	b90c      	cbnz	r4, 80108ca <__register_exitproc+0x22>
 80108c6:	4c16      	ldr	r4, [pc, #88]	@ (8010920 <__register_exitproc+0x78>)
 80108c8:	601c      	str	r4, [r3, #0]
 80108ca:	6865      	ldr	r5, [r4, #4]
 80108cc:	f8da 0000 	ldr.w	r0, [sl]
 80108d0:	2d1f      	cmp	r5, #31
 80108d2:	dd05      	ble.n	80108e0 <__register_exitproc+0x38>
 80108d4:	f7ff ffc3 	bl	801085e <__retarget_lock_release_recursive>
 80108d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e0:	b19e      	cbz	r6, 801090a <__register_exitproc+0x62>
 80108e2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80108e6:	2201      	movs	r2, #1
 80108e8:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 80108ec:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 80108f0:	40aa      	lsls	r2, r5
 80108f2:	4313      	orrs	r3, r2
 80108f4:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 80108f8:	2e02      	cmp	r6, #2
 80108fa:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 80108fe:	bf02      	ittt	eq
 8010900:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8010904:	4313      	orreq	r3, r2
 8010906:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801090a:	1c6b      	adds	r3, r5, #1
 801090c:	3502      	adds	r5, #2
 801090e:	6063      	str	r3, [r4, #4]
 8010910:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010914:	f7ff ffa3 	bl	801085e <__retarget_lock_release_recursive>
 8010918:	2000      	movs	r0, #0
 801091a:	e7df      	b.n	80108dc <__register_exitproc+0x34>
 801091c:	2401da08 	.word	0x2401da08
 8010920:	2401da0c 	.word	0x2401da0c
 8010924:	24000160 	.word	0x24000160

08010928 <cos>:
 8010928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801092a:	eeb0 7b40 	vmov.f64	d7, d0
 801092e:	ee17 3a90 	vmov	r3, s15
 8010932:	4a21      	ldr	r2, [pc, #132]	@ (80109b8 <cos+0x90>)
 8010934:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010938:	4293      	cmp	r3, r2
 801093a:	d806      	bhi.n	801094a <cos+0x22>
 801093c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80109b0 <cos+0x88>
 8010940:	b005      	add	sp, #20
 8010942:	f85d eb04 	ldr.w	lr, [sp], #4
 8010946:	f000 bc97 	b.w	8011278 <__kernel_cos>
 801094a:	4a1c      	ldr	r2, [pc, #112]	@ (80109bc <cos+0x94>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d904      	bls.n	801095a <cos+0x32>
 8010950:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010954:	b005      	add	sp, #20
 8010956:	f85d fb04 	ldr.w	pc, [sp], #4
 801095a:	4668      	mov	r0, sp
 801095c:	f000 fd4c 	bl	80113f8 <__ieee754_rem_pio2>
 8010960:	f000 0003 	and.w	r0, r0, #3
 8010964:	2801      	cmp	r0, #1
 8010966:	d009      	beq.n	801097c <cos+0x54>
 8010968:	2802      	cmp	r0, #2
 801096a:	d010      	beq.n	801098e <cos+0x66>
 801096c:	b9b0      	cbnz	r0, 801099c <cos+0x74>
 801096e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010972:	ed9d 0b00 	vldr	d0, [sp]
 8010976:	f000 fc7f 	bl	8011278 <__kernel_cos>
 801097a:	e7eb      	b.n	8010954 <cos+0x2c>
 801097c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010980:	ed9d 0b00 	vldr	d0, [sp]
 8010984:	f000 fce0 	bl	8011348 <__kernel_sin>
 8010988:	eeb1 0b40 	vneg.f64	d0, d0
 801098c:	e7e2      	b.n	8010954 <cos+0x2c>
 801098e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010992:	ed9d 0b00 	vldr	d0, [sp]
 8010996:	f000 fc6f 	bl	8011278 <__kernel_cos>
 801099a:	e7f5      	b.n	8010988 <cos+0x60>
 801099c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109a0:	ed9d 0b00 	vldr	d0, [sp]
 80109a4:	2001      	movs	r0, #1
 80109a6:	f000 fccf 	bl	8011348 <__kernel_sin>
 80109aa:	e7d3      	b.n	8010954 <cos+0x2c>
 80109ac:	f3af 8000 	nop.w
	...
 80109b8:	3fe921fb 	.word	0x3fe921fb
 80109bc:	7fefffff 	.word	0x7fefffff

080109c0 <sin>:
 80109c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109c2:	eeb0 7b40 	vmov.f64	d7, d0
 80109c6:	ee17 3a90 	vmov	r3, s15
 80109ca:	4a21      	ldr	r2, [pc, #132]	@ (8010a50 <sin+0x90>)
 80109cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80109d0:	4293      	cmp	r3, r2
 80109d2:	d807      	bhi.n	80109e4 <sin+0x24>
 80109d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8010a48 <sin+0x88>
 80109d8:	2000      	movs	r0, #0
 80109da:	b005      	add	sp, #20
 80109dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80109e0:	f000 bcb2 	b.w	8011348 <__kernel_sin>
 80109e4:	4a1b      	ldr	r2, [pc, #108]	@ (8010a54 <sin+0x94>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d904      	bls.n	80109f4 <sin+0x34>
 80109ea:	ee30 0b40 	vsub.f64	d0, d0, d0
 80109ee:	b005      	add	sp, #20
 80109f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80109f4:	4668      	mov	r0, sp
 80109f6:	f000 fcff 	bl	80113f8 <__ieee754_rem_pio2>
 80109fa:	f000 0003 	and.w	r0, r0, #3
 80109fe:	2801      	cmp	r0, #1
 8010a00:	d00a      	beq.n	8010a18 <sin+0x58>
 8010a02:	2802      	cmp	r0, #2
 8010a04:	d00f      	beq.n	8010a26 <sin+0x66>
 8010a06:	b9c0      	cbnz	r0, 8010a3a <sin+0x7a>
 8010a08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a0c:	ed9d 0b00 	vldr	d0, [sp]
 8010a10:	2001      	movs	r0, #1
 8010a12:	f000 fc99 	bl	8011348 <__kernel_sin>
 8010a16:	e7ea      	b.n	80109ee <sin+0x2e>
 8010a18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a1c:	ed9d 0b00 	vldr	d0, [sp]
 8010a20:	f000 fc2a 	bl	8011278 <__kernel_cos>
 8010a24:	e7e3      	b.n	80109ee <sin+0x2e>
 8010a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a2a:	ed9d 0b00 	vldr	d0, [sp]
 8010a2e:	2001      	movs	r0, #1
 8010a30:	f000 fc8a 	bl	8011348 <__kernel_sin>
 8010a34:	eeb1 0b40 	vneg.f64	d0, d0
 8010a38:	e7d9      	b.n	80109ee <sin+0x2e>
 8010a3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a3e:	ed9d 0b00 	vldr	d0, [sp]
 8010a42:	f000 fc19 	bl	8011278 <__kernel_cos>
 8010a46:	e7f5      	b.n	8010a34 <sin+0x74>
	...
 8010a50:	3fe921fb 	.word	0x3fe921fb
 8010a54:	7fefffff 	.word	0x7fefffff

08010a58 <log>:
 8010a58:	b4f0      	push	{r4, r5, r6, r7}
 8010a5a:	ee10 0a90 	vmov	r0, s1
 8010a5e:	ee10 3a10 	vmov	r3, s0
 8010a62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010a66:	429c      	cmp	r4, r3
 8010a68:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8010a6c:	4c70      	ldr	r4, [pc, #448]	@ (8010c30 <log+0x1d8>)
 8010a6e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8010a72:	418c      	sbcs	r4, r1
 8010a74:	ed2d 8b02 	vpush	{d8}
 8010a78:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8010a7c:	d35a      	bcc.n	8010b34 <log+0xdc>
 8010a7e:	4a6d      	ldr	r2, [pc, #436]	@ (8010c34 <log+0x1dc>)
 8010a80:	4290      	cmp	r0, r2
 8010a82:	bf08      	it	eq
 8010a84:	2b00      	cmpeq	r3, #0
 8010a86:	f000 80c4 	beq.w	8010c12 <log+0x1ba>
 8010a8a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8010a8e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010a92:	4b69      	ldr	r3, [pc, #420]	@ (8010c38 <log+0x1e0>)
 8010a94:	ee20 2b00 	vmul.f64	d2, d0, d0
 8010a98:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8010a9c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8010aa0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8010aa4:	eea6 7b00 	vfma.f64	d7, d6, d0
 8010aa8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8010aac:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8010ab0:	eea6 7b02 	vfma.f64	d7, d6, d2
 8010ab4:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8010ab8:	eea5 6b00 	vfma.f64	d6, d5, d0
 8010abc:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8010ac0:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8010ac4:	eea5 6b02 	vfma.f64	d6, d5, d2
 8010ac8:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8010acc:	eea3 5b00 	vfma.f64	d5, d3, d0
 8010ad0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8010ad4:	eea3 5b02 	vfma.f64	d5, d3, d2
 8010ad8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8010adc:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010ae0:	eea5 6b04 	vfma.f64	d6, d5, d4
 8010ae4:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8010ae8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010aec:	eeb0 2b47 	vmov.f64	d2, d7
 8010af0:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8010c18 <log+0x1c0>
 8010af4:	eeb0 6b40 	vmov.f64	d6, d0
 8010af8:	eeb0 3b40 	vmov.f64	d3, d0
 8010afc:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010b00:	eea0 6b47 	vfms.f64	d6, d0, d7
 8010b04:	ee30 8b46 	vsub.f64	d8, d0, d6
 8010b08:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010b0c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8010b10:	ee30 7b43 	vsub.f64	d7, d0, d3
 8010b14:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010b18:	eea1 7b05 	vfma.f64	d7, d1, d5
 8010b1c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8010b20:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010b24:	eea2 7b04 	vfma.f64	d7, d2, d4
 8010b28:	ee33 0b07 	vadd.f64	d0, d3, d7
 8010b2c:	ecbd 8b02 	vpop	{d8}
 8010b30:	bcf0      	pop	{r4, r5, r6, r7}
 8010b32:	4770      	bx	lr
 8010b34:	f1a2 0410 	sub.w	r4, r2, #16
 8010b38:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8010b3c:	428c      	cmp	r4, r1
 8010b3e:	d923      	bls.n	8010b88 <log+0x130>
 8010b40:	18d9      	adds	r1, r3, r3
 8010b42:	eb40 0400 	adc.w	r4, r0, r0
 8010b46:	4321      	orrs	r1, r4
 8010b48:	d105      	bne.n	8010b56 <log+0xfe>
 8010b4a:	ecbd 8b02 	vpop	{d8}
 8010b4e:	2001      	movs	r0, #1
 8010b50:	bcf0      	pop	{r4, r5, r6, r7}
 8010b52:	f000 be01 	b.w	8011758 <__math_divzero>
 8010b56:	4939      	ldr	r1, [pc, #228]	@ (8010c3c <log+0x1e4>)
 8010b58:	4288      	cmp	r0, r1
 8010b5a:	bf08      	it	eq
 8010b5c:	2b00      	cmpeq	r3, #0
 8010b5e:	d0e5      	beq.n	8010b2c <log+0xd4>
 8010b60:	0413      	lsls	r3, r2, #16
 8010b62:	d403      	bmi.n	8010b6c <log+0x114>
 8010b64:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8010b68:	4393      	bics	r3, r2
 8010b6a:	d104      	bne.n	8010b76 <log+0x11e>
 8010b6c:	ecbd 8b02 	vpop	{d8}
 8010b70:	bcf0      	pop	{r4, r5, r6, r7}
 8010b72:	f000 be09 	b.w	8011788 <__math_invalid>
 8010b76:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010c20 <log+0x1c8>
 8010b7a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010b7e:	ec53 2b17 	vmov	r2, r3, d7
 8010b82:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8010b86:	4613      	mov	r3, r2
 8010b88:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8010b8c:	492a      	ldr	r1, [pc, #168]	@ (8010c38 <log+0x1e0>)
 8010b8e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8010b92:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8010b96:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8010b9a:	0d15      	lsrs	r5, r2, #20
 8010b9c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8010ba0:	052d      	lsls	r5, r5, #20
 8010ba2:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8010ba6:	1e1e      	subs	r6, r3, #0
 8010ba8:	1b47      	subs	r7, r0, r5
 8010baa:	ec47 6b16 	vmov	d6, r6, r7
 8010bae:	1512      	asrs	r2, r2, #20
 8010bb0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010bb4:	ee07 2a90 	vmov	s15, r2
 8010bb8:	ee25 2b05 	vmul.f64	d2, d5, d5
 8010bbc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010bc0:	ed91 4b00 	vldr	d4, [r1]
 8010bc4:	ee25 1b02 	vmul.f64	d1, d5, d2
 8010bc8:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8010bcc:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010bd0:	ee35 4b07 	vadd.f64	d4, d5, d7
 8010bd4:	ee37 0b44 	vsub.f64	d0, d7, d4
 8010bd8:	ed91 7b02 	vldr	d7, [r1, #8]
 8010bdc:	ee30 0b05 	vadd.f64	d0, d0, d5
 8010be0:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010be4:	ed91 7b04 	vldr	d7, [r1, #16]
 8010be8:	ed91 6b08 	vldr	d6, [r1, #32]
 8010bec:	eea7 0b02 	vfma.f64	d0, d7, d2
 8010bf0:	ed91 7b06 	vldr	d7, [r1, #24]
 8010bf4:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8010bf8:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010bfc:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8010c00:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010c04:	eea6 7b02 	vfma.f64	d7, d6, d2
 8010c08:	eea1 0b07 	vfma.f64	d0, d1, d7
 8010c0c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8010c10:	e78c      	b.n	8010b2c <log+0xd4>
 8010c12:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8010c28 <log+0x1d0>
 8010c16:	e789      	b.n	8010b2c <log+0xd4>
 8010c18:	00000000 	.word	0x00000000
 8010c1c:	41a00000 	.word	0x41a00000
 8010c20:	00000000 	.word	0x00000000
 8010c24:	43300000 	.word	0x43300000
	...
 8010c30:	000308ff 	.word	0x000308ff
 8010c34:	3ff00000 	.word	0x3ff00000
 8010c38:	080120b8 	.word	0x080120b8
 8010c3c:	7ff00000 	.word	0x7ff00000

08010c40 <checkint>:
 8010c40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010c44:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	b570      	push	{r4, r5, r6, lr}
 8010c4c:	dd2a      	ble.n	8010ca4 <checkint+0x64>
 8010c4e:	f240 4333 	movw	r3, #1075	@ 0x433
 8010c52:	429a      	cmp	r2, r3
 8010c54:	dc24      	bgt.n	8010ca0 <checkint+0x60>
 8010c56:	1a9b      	subs	r3, r3, r2
 8010c58:	f1a3 0620 	sub.w	r6, r3, #32
 8010c5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c60:	fa02 f403 	lsl.w	r4, r2, r3
 8010c64:	fa02 f606 	lsl.w	r6, r2, r6
 8010c68:	f1c3 0520 	rsb	r5, r3, #32
 8010c6c:	fa22 f505 	lsr.w	r5, r2, r5
 8010c70:	4334      	orrs	r4, r6
 8010c72:	432c      	orrs	r4, r5
 8010c74:	409a      	lsls	r2, r3
 8010c76:	ea20 0202 	bic.w	r2, r0, r2
 8010c7a:	ea21 0404 	bic.w	r4, r1, r4
 8010c7e:	4322      	orrs	r2, r4
 8010c80:	f1a3 0420 	sub.w	r4, r3, #32
 8010c84:	f1c3 0220 	rsb	r2, r3, #32
 8010c88:	d10c      	bne.n	8010ca4 <checkint+0x64>
 8010c8a:	40d8      	lsrs	r0, r3
 8010c8c:	fa01 f302 	lsl.w	r3, r1, r2
 8010c90:	4318      	orrs	r0, r3
 8010c92:	40e1      	lsrs	r1, r4
 8010c94:	4308      	orrs	r0, r1
 8010c96:	f000 0001 	and.w	r0, r0, #1
 8010c9a:	f1d0 0002 	rsbs	r0, r0, #2
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ca0:	2002      	movs	r0, #2
 8010ca2:	e7fc      	b.n	8010c9e <checkint+0x5e>
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	e7fa      	b.n	8010c9e <checkint+0x5e>

08010ca8 <pow>:
 8010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	ee10 4a90 	vmov	r4, s1
 8010cb0:	ed2d 8b0a 	vpush	{d8-d12}
 8010cb4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8010cb8:	ee11 aa90 	vmov	sl, s3
 8010cbc:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8010cc0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	ee10 5a10 	vmov	r5, s0
 8010cca:	ee11 0a10 	vmov	r0, s2
 8010cce:	b087      	sub	sp, #28
 8010cd0:	46c4      	mov	ip, r8
 8010cd2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8010cd6:	d806      	bhi.n	8010ce6 <pow+0x3e>
 8010cd8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8010cdc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8010ce0:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ce2:	f240 8157 	bls.w	8010f94 <pow+0x2ec>
 8010ce6:	1802      	adds	r2, r0, r0
 8010ce8:	eb4a 010a 	adc.w	r1, sl, sl
 8010cec:	f06f 0b01 	mvn.w	fp, #1
 8010cf0:	1e57      	subs	r7, r2, #1
 8010cf2:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8010cf6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8010cfa:	45bb      	cmp	fp, r7
 8010cfc:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010d00:	d242      	bcs.n	8010d88 <pow+0xe0>
 8010d02:	ea52 0301 	orrs.w	r3, r2, r1
 8010d06:	f04f 0300 	mov.w	r3, #0
 8010d0a:	d10c      	bne.n	8010d26 <pow+0x7e>
 8010d0c:	196d      	adds	r5, r5, r5
 8010d0e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8010d12:	4164      	adcs	r4, r4
 8010d14:	42ab      	cmp	r3, r5
 8010d16:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010d1a:	41a3      	sbcs	r3, r4
 8010d1c:	f0c0 808f 	bcc.w	8010e3e <pow+0x196>
 8010d20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010d24:	e02b      	b.n	8010d7e <pow+0xd6>
 8010d26:	4ed4      	ldr	r6, [pc, #848]	@ (8011078 <pow+0x3d0>)
 8010d28:	42b4      	cmp	r4, r6
 8010d2a:	bf08      	it	eq
 8010d2c:	429d      	cmpeq	r5, r3
 8010d2e:	d109      	bne.n	8010d44 <pow+0x9c>
 8010d30:	1800      	adds	r0, r0, r0
 8010d32:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8010d36:	eb4a 0a0a 	adc.w	sl, sl, sl
 8010d3a:	4283      	cmp	r3, r0
 8010d3c:	4bcf      	ldr	r3, [pc, #828]	@ (801107c <pow+0x3d4>)
 8010d3e:	eb73 030a 	sbcs.w	r3, r3, sl
 8010d42:	e7eb      	b.n	8010d1c <pow+0x74>
 8010d44:	196d      	adds	r5, r5, r5
 8010d46:	48ce      	ldr	r0, [pc, #824]	@ (8011080 <pow+0x3d8>)
 8010d48:	4164      	adcs	r4, r4
 8010d4a:	42ab      	cmp	r3, r5
 8010d4c:	eb70 0604 	sbcs.w	r6, r0, r4
 8010d50:	d375      	bcc.n	8010e3e <pow+0x196>
 8010d52:	4281      	cmp	r1, r0
 8010d54:	bf08      	it	eq
 8010d56:	429a      	cmpeq	r2, r3
 8010d58:	d171      	bne.n	8010e3e <pow+0x196>
 8010d5a:	4aca      	ldr	r2, [pc, #808]	@ (8011084 <pow+0x3dc>)
 8010d5c:	4294      	cmp	r4, r2
 8010d5e:	bf08      	it	eq
 8010d60:	429d      	cmpeq	r5, r3
 8010d62:	d0dd      	beq.n	8010d20 <pow+0x78>
 8010d64:	4294      	cmp	r4, r2
 8010d66:	ea6f 0a0a 	mvn.w	sl, sl
 8010d6a:	bf34      	ite	cc
 8010d6c:	2400      	movcc	r4, #0
 8010d6e:	2401      	movcs	r4, #1
 8010d70:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8010d74:	4554      	cmp	r4, sl
 8010d76:	f040 81dc 	bne.w	8011132 <pow+0x48a>
 8010d7a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010d7e:	b007      	add	sp, #28
 8010d80:	ecbd 8b0a 	vpop	{d8-d12}
 8010d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d88:	196f      	adds	r7, r5, r5
 8010d8a:	eb44 0904 	adc.w	r9, r4, r4
 8010d8e:	1e7a      	subs	r2, r7, #1
 8010d90:	f169 0300 	sbc.w	r3, r9, #0
 8010d94:	4593      	cmp	fp, r2
 8010d96:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010d9a:	d225      	bcs.n	8010de8 <pow+0x140>
 8010d9c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010da0:	2c00      	cmp	r4, #0
 8010da2:	da13      	bge.n	8010dcc <pow+0x124>
 8010da4:	4651      	mov	r1, sl
 8010da6:	f7ff ff4b 	bl	8010c40 <checkint>
 8010daa:	2801      	cmp	r0, #1
 8010dac:	d10e      	bne.n	8010dcc <pow+0x124>
 8010dae:	eeb1 0b40 	vneg.f64	d0, d0
 8010db2:	ea57 0909 	orrs.w	r9, r7, r9
 8010db6:	d10b      	bne.n	8010dd0 <pow+0x128>
 8010db8:	f1ba 0f00 	cmp.w	sl, #0
 8010dbc:	dadf      	bge.n	8010d7e <pow+0xd6>
 8010dbe:	b007      	add	sp, #28
 8010dc0:	ecbd 8b0a 	vpop	{d8-d12}
 8010dc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc8:	f000 bcc6 	b.w	8011758 <__math_divzero>
 8010dcc:	2000      	movs	r0, #0
 8010dce:	e7f0      	b.n	8010db2 <pow+0x10a>
 8010dd0:	f1ba 0f00 	cmp.w	sl, #0
 8010dd4:	dad3      	bge.n	8010d7e <pow+0xd6>
 8010dd6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010dda:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010dde:	ed8d 7b00 	vstr	d7, [sp]
 8010de2:	ed9d 0b00 	vldr	d0, [sp]
 8010de6:	e7ca      	b.n	8010d7e <pow+0xd6>
 8010de8:	2c00      	cmp	r4, #0
 8010dea:	da2b      	bge.n	8010e44 <pow+0x19c>
 8010dec:	4651      	mov	r1, sl
 8010dee:	f7ff ff27 	bl	8010c40 <checkint>
 8010df2:	b930      	cbnz	r0, 8010e02 <pow+0x15a>
 8010df4:	b007      	add	sp, #28
 8010df6:	ecbd 8b0a 	vpop	{d8-d12}
 8010dfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfe:	f000 bcc3 	b.w	8011788 <__math_invalid>
 8010e02:	1e41      	subs	r1, r0, #1
 8010e04:	4248      	negs	r0, r1
 8010e06:	4148      	adcs	r0, r1
 8010e08:	0480      	lsls	r0, r0, #18
 8010e0a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010e0e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8010e12:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8010e16:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8010e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010e1c:	d92d      	bls.n	8010e7a <pow+0x1d2>
 8010e1e:	4b96      	ldr	r3, [pc, #600]	@ (8011078 <pow+0x3d0>)
 8010e20:	2000      	movs	r0, #0
 8010e22:	429c      	cmp	r4, r3
 8010e24:	bf08      	it	eq
 8010e26:	4285      	cmpeq	r5, r0
 8010e28:	f43f af7a 	beq.w	8010d20 <pow+0x78>
 8010e2c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8010e30:	428a      	cmp	r2, r1
 8010e32:	d80c      	bhi.n	8010e4e <pow+0x1a6>
 8010e34:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010e38:	42a8      	cmp	r0, r5
 8010e3a:	41a3      	sbcs	r3, r4
 8010e3c:	d204      	bcs.n	8010e48 <pow+0x1a0>
 8010e3e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010e42:	e79c      	b.n	8010d7e <pow+0xd6>
 8010e44:	2000      	movs	r0, #0
 8010e46:	e7e4      	b.n	8010e12 <pow+0x16a>
 8010e48:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010e4c:	e797      	b.n	8010d7e <pow+0xd6>
 8010e4e:	2d01      	cmp	r5, #1
 8010e50:	eb74 0303 	sbcs.w	r3, r4, r3
 8010e54:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010e58:	bf34      	ite	cc
 8010e5a:	2301      	movcc	r3, #1
 8010e5c:	2300      	movcs	r3, #0
 8010e5e:	4296      	cmp	r6, r2
 8010e60:	bf8c      	ite	hi
 8010e62:	2600      	movhi	r6, #0
 8010e64:	2601      	movls	r6, #1
 8010e66:	42b3      	cmp	r3, r6
 8010e68:	f000 809c 	beq.w	8010fa4 <pow+0x2fc>
 8010e6c:	b007      	add	sp, #28
 8010e6e:	ecbd 8b0a 	vpop	{d8-d12}
 8010e72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e76:	f000 bc67 	b.w	8011748 <__math_oflow>
 8010e7a:	f1bc 0f00 	cmp.w	ip, #0
 8010e7e:	d10a      	bne.n	8010e96 <pow+0x1ee>
 8010e80:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8011068 <pow+0x3c0>
 8010e84:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010e88:	ec53 2b17 	vmov	r2, r3, d7
 8010e8c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8010e90:	4615      	mov	r5, r2
 8010e92:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8010e96:	4a7c      	ldr	r2, [pc, #496]	@ (8011088 <pow+0x3e0>)
 8010e98:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8010e9c:	4422      	add	r2, r4
 8010e9e:	1513      	asrs	r3, r2, #20
 8010ea0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8010ea4:	ee03 3a10 	vmov	s6, r3
 8010ea8:	0d12      	lsrs	r2, r2, #20
 8010eaa:	4b78      	ldr	r3, [pc, #480]	@ (801108c <pow+0x3e4>)
 8010eac:	0512      	lsls	r2, r2, #20
 8010eae:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8010eb2:	1aa7      	subs	r7, r4, r2
 8010eb4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8010eb8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8010ebc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8010ec0:	1e2e      	subs	r6, r5, #0
 8010ec2:	ec47 6b14 	vmov	d4, r6, r7
 8010ec6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8010eca:	eea4 6b05 	vfma.f64	d6, d4, d5
 8010ece:	ed93 5b00 	vldr	d5, [r3]
 8010ed2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8010ed6:	eea3 2b05 	vfma.f64	d2, d3, d5
 8010eda:	ed93 5b02 	vldr	d5, [r3, #8]
 8010ede:	ee36 4b02 	vadd.f64	d4, d6, d2
 8010ee2:	ee32 2b44 	vsub.f64	d2, d2, d4
 8010ee6:	eea3 7b05 	vfma.f64	d7, d3, d5
 8010eea:	ed93 5b04 	vldr	d5, [r3, #16]
 8010eee:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010ef2:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010ef6:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010efa:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010efe:	ee34 8b00 	vadd.f64	d8, d4, d0
 8010f02:	eeb0 9b40 	vmov.f64	d9, d0
 8010f06:	ee34 4b48 	vsub.f64	d4, d4, d8
 8010f0a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8010f0e:	ee34 ab00 	vadd.f64	d10, d4, d0
 8010f12:	ed93 5b06 	vldr	d5, [r3, #24]
 8010f16:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010f1a:	ee37 7b09 	vadd.f64	d7, d7, d9
 8010f1e:	ed93 4b08 	vldr	d4, [r3, #32]
 8010f22:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8010f26:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8010f2a:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010f2e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8010f32:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8010f36:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010f3a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8010f3e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010f42:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010f46:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010f4a:	eeab 7b05 	vfma.f64	d7, d11, d5
 8010f4e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8010f52:	ee21 6b04 	vmul.f64	d6, d1, d4
 8010f56:	ee16 3a90 	vmov	r3, s13
 8010f5a:	eeb0 5b46 	vmov.f64	d5, d6
 8010f5e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010f62:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8010f66:	18b2      	adds	r2, r6, r2
 8010f68:	2a3e      	cmp	r2, #62	@ 0x3e
 8010f6a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8010f6e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8010f72:	ee38 8b07 	vadd.f64	d8, d8, d7
 8010f76:	eea1 5b08 	vfma.f64	d5, d1, d8
 8010f7a:	d91b      	bls.n	8010fb4 <pow+0x30c>
 8010f7c:	2a00      	cmp	r2, #0
 8010f7e:	da0b      	bge.n	8010f98 <pow+0x2f0>
 8010f80:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010f84:	ee36 0b00 	vadd.f64	d0, d6, d0
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	f43f aef8 	beq.w	8010d7e <pow+0xd6>
 8010f8e:	eeb1 0b40 	vneg.f64	d0, d0
 8010f92:	e6f4      	b.n	8010d7e <pow+0xd6>
 8010f94:	2000      	movs	r0, #0
 8010f96:	e77e      	b.n	8010e96 <pow+0x1ee>
 8010f98:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8010f9c:	d909      	bls.n	8010fb2 <pow+0x30a>
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f6bf af64 	bge.w	8010e6c <pow+0x1c4>
 8010fa4:	b007      	add	sp, #28
 8010fa6:	ecbd 8b0a 	vpop	{d8-d12}
 8010faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fae:	f000 bbc3 	b.w	8011738 <__math_uflow>
 8010fb2:	2600      	movs	r6, #0
 8010fb4:	4936      	ldr	r1, [pc, #216]	@ (8011090 <pow+0x3e8>)
 8010fb6:	ed91 4b02 	vldr	d4, [r1, #8]
 8010fba:	ed91 3b00 	vldr	d3, [r1]
 8010fbe:	eeb0 7b44 	vmov.f64	d7, d4
 8010fc2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010fc6:	ee17 5a10 	vmov	r5, s14
 8010fca:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010fce:	ed91 4b04 	vldr	d4, [r1, #16]
 8010fd2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8010fd6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010fda:	ed91 4b06 	vldr	d4, [r1, #24]
 8010fde:	18dc      	adds	r4, r3, r3
 8010fe0:	f104 030f 	add.w	r3, r4, #15
 8010fe4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010fe8:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010fec:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8010ff0:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010ff4:	ee25 6b05 	vmul.f64	d6, d5, d5
 8010ff8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8010ffc:	ed91 4b08 	vldr	d4, [r1, #32]
 8011000:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011004:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011008:	eea5 4b03 	vfma.f64	d4, d5, d3
 801100c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8011010:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011014:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011018:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801101c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011020:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011024:	eea5 4b03 	vfma.f64	d4, d5, d3
 8011028:	1940      	adds	r0, r0, r5
 801102a:	2700      	movs	r7, #0
 801102c:	eb17 020c 	adds.w	r2, r7, ip
 8011030:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011034:	eea6 7b04 	vfma.f64	d7, d6, d4
 8011038:	2e00      	cmp	r6, #0
 801103a:	d175      	bne.n	8011128 <pow+0x480>
 801103c:	42bd      	cmp	r5, r7
 801103e:	db29      	blt.n	8011094 <pow+0x3ec>
 8011040:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8011044:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8011048:	4610      	mov	r0, r2
 801104a:	ec41 0b10 	vmov	d0, r0, r1
 801104e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011052:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8011070 <pow+0x3c8>
 8011056:	ee20 0b07 	vmul.f64	d0, d0, d7
 801105a:	b007      	add	sp, #28
 801105c:	ecbd 8b0a 	vpop	{d8-d12}
 8011060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011064:	f000 bba8 	b.w	80117b8 <__math_check_oflow>
 8011068:	00000000 	.word	0x00000000
 801106c:	43300000 	.word	0x43300000
 8011070:	00000000 	.word	0x00000000
 8011074:	7f000000 	.word	0x7f000000
 8011078:	3ff00000 	.word	0x3ff00000
 801107c:	fff00000 	.word	0xfff00000
 8011080:	ffe00000 	.word	0xffe00000
 8011084:	7fe00000 	.word	0x7fe00000
 8011088:	c0196aab 	.word	0xc0196aab
 801108c:	08012948 	.word	0x08012948
 8011090:	08013b18 	.word	0x08013b18
 8011094:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8011098:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801109c:	4610      	mov	r0, r2
 801109e:	ec41 0b15 	vmov	d5, r0, r1
 80110a2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80110a6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80110aa:	ee35 7b06 	vadd.f64	d7, d5, d6
 80110ae:	eeb0 4bc7 	vabs.f64	d4, d7
 80110b2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80110b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ba:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8011138 <pow+0x490>
 80110be:	d52a      	bpl.n	8011116 <pow+0x46e>
 80110c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80110c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	ee35 5b06 	vadd.f64	d5, d5, d6
 80110d0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 80110d4:	bf58      	it	pl
 80110d6:	eeb0 4b43 	vmovpl.f64	d4, d3
 80110da:	ee37 3b04 	vadd.f64	d3, d7, d4
 80110de:	ee34 6b43 	vsub.f64	d6, d4, d3
 80110e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80110e6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80110ea:	ee36 6b03 	vadd.f64	d6, d6, d3
 80110ee:	ee36 7b44 	vsub.f64	d7, d6, d4
 80110f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fa:	d104      	bne.n	8011106 <pow+0x45e>
 80110fc:	4632      	mov	r2, r6
 80110fe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8011102:	ec43 2b17 	vmov	d7, r2, r3
 8011106:	ed8d 0b02 	vstr	d0, [sp, #8]
 801110a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801110e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011112:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011116:	ee27 0b00 	vmul.f64	d0, d7, d0
 801111a:	b007      	add	sp, #28
 801111c:	ecbd 8b0a 	vpop	{d8-d12}
 8011120:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011124:	f000 bb3f 	b.w	80117a6 <__math_check_uflow>
 8011128:	ec43 2b10 	vmov	d0, r2, r3
 801112c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011130:	e625      	b.n	8010d7e <pow+0xd6>
 8011132:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8011140 <pow+0x498>
 8011136:	e622      	b.n	8010d7e <pow+0xd6>
 8011138:	00000000 	.word	0x00000000
 801113c:	00100000 	.word	0x00100000
	...

08011148 <cabs>:
 8011148:	b508      	push	{r3, lr}
 801114a:	ed2d 8b06 	vpush	{d8-d10}
 801114e:	eeb0 ab40 	vmov.f64	d10, d0
 8011152:	eeb0 9b41 	vmov.f64	d9, d1
 8011156:	f000 f815 	bl	8011184 <creal>
 801115a:	eeb0 1b49 	vmov.f64	d1, d9
 801115e:	eeb0 8b40 	vmov.f64	d8, d0
 8011162:	eeb0 0b4a 	vmov.f64	d0, d10
 8011166:	f000 f80a 	bl	801117e <cimag>
 801116a:	eeb0 1b40 	vmov.f64	d1, d0
 801116e:	eeb0 0b48 	vmov.f64	d0, d8
 8011172:	ecbd 8b06 	vpop	{d8-d10}
 8011176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801117a:	f000 ba81 	b.w	8011680 <hypot>

0801117e <cimag>:
 801117e:	eeb0 0b41 	vmov.f64	d0, d1
 8011182:	4770      	bx	lr

08011184 <creal>:
 8011184:	4770      	bx	lr
	...

08011188 <floor>:
 8011188:	ee10 3a90 	vmov	r3, s1
 801118c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8011190:	ee10 2a10 	vmov	r2, s0
 8011194:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8011198:	2913      	cmp	r1, #19
 801119a:	b530      	push	{r4, r5, lr}
 801119c:	4615      	mov	r5, r2
 801119e:	dc33      	bgt.n	8011208 <floor+0x80>
 80111a0:	2900      	cmp	r1, #0
 80111a2:	da18      	bge.n	80111d6 <floor+0x4e>
 80111a4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8011268 <floor+0xe0>
 80111a8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80111ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	dd0a      	ble.n	80111cc <floor+0x44>
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	da50      	bge.n	801125c <floor+0xd4>
 80111ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80111be:	4313      	orrs	r3, r2
 80111c0:	2200      	movs	r2, #0
 80111c2:	4293      	cmp	r3, r2
 80111c4:	4b2a      	ldr	r3, [pc, #168]	@ (8011270 <floor+0xe8>)
 80111c6:	bf08      	it	eq
 80111c8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80111cc:	4619      	mov	r1, r3
 80111ce:	4610      	mov	r0, r2
 80111d0:	ec41 0b10 	vmov	d0, r0, r1
 80111d4:	e01f      	b.n	8011216 <floor+0x8e>
 80111d6:	4827      	ldr	r0, [pc, #156]	@ (8011274 <floor+0xec>)
 80111d8:	4108      	asrs	r0, r1
 80111da:	ea03 0400 	and.w	r4, r3, r0
 80111de:	4314      	orrs	r4, r2
 80111e0:	d019      	beq.n	8011216 <floor+0x8e>
 80111e2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011268 <floor+0xe0>
 80111e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80111ea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f2:	ddeb      	ble.n	80111cc <floor+0x44>
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	bfbe      	ittt	lt
 80111f8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80111fc:	410a      	asrlt	r2, r1
 80111fe:	189b      	addlt	r3, r3, r2
 8011200:	ea23 0300 	bic.w	r3, r3, r0
 8011204:	2200      	movs	r2, #0
 8011206:	e7e1      	b.n	80111cc <floor+0x44>
 8011208:	2933      	cmp	r1, #51	@ 0x33
 801120a:	dd05      	ble.n	8011218 <floor+0x90>
 801120c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011210:	d101      	bne.n	8011216 <floor+0x8e>
 8011212:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011216:	bd30      	pop	{r4, r5, pc}
 8011218:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801121c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011220:	40e0      	lsrs	r0, r4
 8011222:	4210      	tst	r0, r2
 8011224:	d0f7      	beq.n	8011216 <floor+0x8e>
 8011226:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011268 <floor+0xe0>
 801122a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801122e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011236:	ddc9      	ble.n	80111cc <floor+0x44>
 8011238:	2b00      	cmp	r3, #0
 801123a:	da02      	bge.n	8011242 <floor+0xba>
 801123c:	2914      	cmp	r1, #20
 801123e:	d103      	bne.n	8011248 <floor+0xc0>
 8011240:	3301      	adds	r3, #1
 8011242:	ea22 0200 	bic.w	r2, r2, r0
 8011246:	e7c1      	b.n	80111cc <floor+0x44>
 8011248:	2401      	movs	r4, #1
 801124a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801124e:	fa04 f101 	lsl.w	r1, r4, r1
 8011252:	440a      	add	r2, r1
 8011254:	42aa      	cmp	r2, r5
 8011256:	bf38      	it	cc
 8011258:	191b      	addcc	r3, r3, r4
 801125a:	e7f2      	b.n	8011242 <floor+0xba>
 801125c:	2200      	movs	r2, #0
 801125e:	4613      	mov	r3, r2
 8011260:	e7b4      	b.n	80111cc <floor+0x44>
 8011262:	bf00      	nop
 8011264:	f3af 8000 	nop.w
 8011268:	8800759c 	.word	0x8800759c
 801126c:	7e37e43c 	.word	0x7e37e43c
 8011270:	bff00000 	.word	0xbff00000
 8011274:	000fffff 	.word	0x000fffff

08011278 <__kernel_cos>:
 8011278:	eeb0 5b40 	vmov.f64	d5, d0
 801127c:	ee15 1a90 	vmov	r1, s11
 8011280:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011284:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8011288:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801128c:	d204      	bcs.n	8011298 <__kernel_cos+0x20>
 801128e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8011292:	ee17 3a90 	vmov	r3, s15
 8011296:	b343      	cbz	r3, 80112ea <__kernel_cos+0x72>
 8011298:	ee25 6b05 	vmul.f64	d6, d5, d5
 801129c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80112a0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8011310 <__kernel_cos+0x98>
 80112a4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011318 <__kernel_cos+0xa0>
 80112a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80112ac:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011320 <__kernel_cos+0xa8>
 80112b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80112b4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011328 <__kernel_cos+0xb0>
 80112b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80112bc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011330 <__kernel_cos+0xb8>
 80112c0:	4b1f      	ldr	r3, [pc, #124]	@ (8011340 <__kernel_cos+0xc8>)
 80112c2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80112c6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011338 <__kernel_cos+0xc0>
 80112ca:	4299      	cmp	r1, r3
 80112cc:	eea7 4b06 	vfma.f64	d4, d7, d6
 80112d0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80112d4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80112d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80112dc:	eea6 1b04 	vfma.f64	d1, d6, d4
 80112e0:	d804      	bhi.n	80112ec <__kernel_cos+0x74>
 80112e2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80112e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80112ea:	4770      	bx	lr
 80112ec:	4b15      	ldr	r3, [pc, #84]	@ (8011344 <__kernel_cos+0xcc>)
 80112ee:	4299      	cmp	r1, r3
 80112f0:	d809      	bhi.n	8011306 <__kernel_cos+0x8e>
 80112f2:	2200      	movs	r2, #0
 80112f4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80112f8:	ec43 2b16 	vmov	d6, r2, r3
 80112fc:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011300:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011304:	e7ed      	b.n	80112e2 <__kernel_cos+0x6a>
 8011306:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801130a:	e7f7      	b.n	80112fc <__kernel_cos+0x84>
 801130c:	f3af 8000 	nop.w
 8011310:	be8838d4 	.word	0xbe8838d4
 8011314:	bda8fae9 	.word	0xbda8fae9
 8011318:	bdb4b1c4 	.word	0xbdb4b1c4
 801131c:	3e21ee9e 	.word	0x3e21ee9e
 8011320:	809c52ad 	.word	0x809c52ad
 8011324:	be927e4f 	.word	0xbe927e4f
 8011328:	19cb1590 	.word	0x19cb1590
 801132c:	3efa01a0 	.word	0x3efa01a0
 8011330:	16c15177 	.word	0x16c15177
 8011334:	bf56c16c 	.word	0xbf56c16c
 8011338:	5555554c 	.word	0x5555554c
 801133c:	3fa55555 	.word	0x3fa55555
 8011340:	3fd33332 	.word	0x3fd33332
 8011344:	3fe90000 	.word	0x3fe90000

08011348 <__kernel_sin>:
 8011348:	ee10 3a90 	vmov	r3, s1
 801134c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011350:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8011354:	d204      	bcs.n	8011360 <__kernel_sin+0x18>
 8011356:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801135a:	ee17 3a90 	vmov	r3, s15
 801135e:	b35b      	cbz	r3, 80113b8 <__kernel_sin+0x70>
 8011360:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011364:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011368:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80113c0 <__kernel_sin+0x78>
 801136c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80113c8 <__kernel_sin+0x80>
 8011370:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011374:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80113d0 <__kernel_sin+0x88>
 8011378:	eea4 7b06 	vfma.f64	d7, d4, d6
 801137c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80113d8 <__kernel_sin+0x90>
 8011380:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011384:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80113e0 <__kernel_sin+0x98>
 8011388:	eea4 7b06 	vfma.f64	d7, d4, d6
 801138c:	b930      	cbnz	r0, 801139c <__kernel_sin+0x54>
 801138e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80113e8 <__kernel_sin+0xa0>
 8011392:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011396:	eea4 0b05 	vfma.f64	d0, d4, d5
 801139a:	4770      	bx	lr
 801139c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80113a0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80113a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80113a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80113ac:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80113f0 <__kernel_sin+0xa8>
 80113b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80113b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	f3af 8000 	nop.w
 80113c0:	5acfd57c 	.word	0x5acfd57c
 80113c4:	3de5d93a 	.word	0x3de5d93a
 80113c8:	8a2b9ceb 	.word	0x8a2b9ceb
 80113cc:	be5ae5e6 	.word	0xbe5ae5e6
 80113d0:	57b1fe7d 	.word	0x57b1fe7d
 80113d4:	3ec71de3 	.word	0x3ec71de3
 80113d8:	19c161d5 	.word	0x19c161d5
 80113dc:	bf2a01a0 	.word	0xbf2a01a0
 80113e0:	1110f8a6 	.word	0x1110f8a6
 80113e4:	3f811111 	.word	0x3f811111
 80113e8:	55555549 	.word	0x55555549
 80113ec:	bfc55555 	.word	0xbfc55555
 80113f0:	55555549 	.word	0x55555549
 80113f4:	3fc55555 	.word	0x3fc55555

080113f8 <__ieee754_rem_pio2>:
 80113f8:	b570      	push	{r4, r5, r6, lr}
 80113fa:	eeb0 7b40 	vmov.f64	d7, d0
 80113fe:	ee17 5a90 	vmov	r5, s15
 8011402:	4b99      	ldr	r3, [pc, #612]	@ (8011668 <__ieee754_rem_pio2+0x270>)
 8011404:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011408:	429e      	cmp	r6, r3
 801140a:	b088      	sub	sp, #32
 801140c:	4604      	mov	r4, r0
 801140e:	d807      	bhi.n	8011420 <__ieee754_rem_pio2+0x28>
 8011410:	2200      	movs	r2, #0
 8011412:	2300      	movs	r3, #0
 8011414:	ed84 0b00 	vstr	d0, [r4]
 8011418:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801141c:	2000      	movs	r0, #0
 801141e:	e01b      	b.n	8011458 <__ieee754_rem_pio2+0x60>
 8011420:	4b92      	ldr	r3, [pc, #584]	@ (801166c <__ieee754_rem_pio2+0x274>)
 8011422:	429e      	cmp	r6, r3
 8011424:	d83b      	bhi.n	801149e <__ieee754_rem_pio2+0xa6>
 8011426:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801142a:	2d00      	cmp	r5, #0
 801142c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8011628 <__ieee754_rem_pio2+0x230>
 8011430:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8011434:	dd19      	ble.n	801146a <__ieee754_rem_pio2+0x72>
 8011436:	ee30 7b46 	vsub.f64	d7, d0, d6
 801143a:	429e      	cmp	r6, r3
 801143c:	d00e      	beq.n	801145c <__ieee754_rem_pio2+0x64>
 801143e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8011630 <__ieee754_rem_pio2+0x238>
 8011442:	ee37 6b45 	vsub.f64	d6, d7, d5
 8011446:	ee37 7b46 	vsub.f64	d7, d7, d6
 801144a:	ed84 6b00 	vstr	d6, [r4]
 801144e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011452:	ed84 7b02 	vstr	d7, [r4, #8]
 8011456:	2001      	movs	r0, #1
 8011458:	b008      	add	sp, #32
 801145a:	bd70      	pop	{r4, r5, r6, pc}
 801145c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8011638 <__ieee754_rem_pio2+0x240>
 8011460:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8011640 <__ieee754_rem_pio2+0x248>
 8011464:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011468:	e7eb      	b.n	8011442 <__ieee754_rem_pio2+0x4a>
 801146a:	429e      	cmp	r6, r3
 801146c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011470:	d00e      	beq.n	8011490 <__ieee754_rem_pio2+0x98>
 8011472:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8011630 <__ieee754_rem_pio2+0x238>
 8011476:	ee37 6b05 	vadd.f64	d6, d7, d5
 801147a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801147e:	ed84 6b00 	vstr	d6, [r4]
 8011482:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801148a:	ed84 7b02 	vstr	d7, [r4, #8]
 801148e:	e7e3      	b.n	8011458 <__ieee754_rem_pio2+0x60>
 8011490:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8011638 <__ieee754_rem_pio2+0x240>
 8011494:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8011640 <__ieee754_rem_pio2+0x248>
 8011498:	ee37 7b06 	vadd.f64	d7, d7, d6
 801149c:	e7eb      	b.n	8011476 <__ieee754_rem_pio2+0x7e>
 801149e:	4b74      	ldr	r3, [pc, #464]	@ (8011670 <__ieee754_rem_pio2+0x278>)
 80114a0:	429e      	cmp	r6, r3
 80114a2:	d870      	bhi.n	8011586 <__ieee754_rem_pio2+0x18e>
 80114a4:	f000 f914 	bl	80116d0 <fabs>
 80114a8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80114ac:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011648 <__ieee754_rem_pio2+0x250>
 80114b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80114b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80114b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80114bc:	ee17 0a90 	vmov	r0, s15
 80114c0:	eeb1 4b45 	vneg.f64	d4, d5
 80114c4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8011628 <__ieee754_rem_pio2+0x230>
 80114c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80114cc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8011630 <__ieee754_rem_pio2+0x238>
 80114d0:	281f      	cmp	r0, #31
 80114d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80114d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80114da:	dc05      	bgt.n	80114e8 <__ieee754_rem_pio2+0xf0>
 80114dc:	4b65      	ldr	r3, [pc, #404]	@ (8011674 <__ieee754_rem_pio2+0x27c>)
 80114de:	1e42      	subs	r2, r0, #1
 80114e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114e4:	42b3      	cmp	r3, r6
 80114e6:	d109      	bne.n	80114fc <__ieee754_rem_pio2+0x104>
 80114e8:	ee16 3a90 	vmov	r3, s13
 80114ec:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80114f0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80114f4:	2b10      	cmp	r3, #16
 80114f6:	ea4f 5226 	mov.w	r2, r6, asr #20
 80114fa:	dc02      	bgt.n	8011502 <__ieee754_rem_pio2+0x10a>
 80114fc:	ed84 6b00 	vstr	d6, [r4]
 8011500:	e01a      	b.n	8011538 <__ieee754_rem_pio2+0x140>
 8011502:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8011638 <__ieee754_rem_pio2+0x240>
 8011506:	eeb0 6b40 	vmov.f64	d6, d0
 801150a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801150e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011512:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011516:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8011640 <__ieee754_rem_pio2+0x248>
 801151a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801151e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011522:	ee13 3a90 	vmov	r3, s7
 8011526:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	2b31      	cmp	r3, #49	@ 0x31
 801152e:	dc17      	bgt.n	8011560 <__ieee754_rem_pio2+0x168>
 8011530:	eeb0 0b46 	vmov.f64	d0, d6
 8011534:	ed84 3b00 	vstr	d3, [r4]
 8011538:	ed94 6b00 	vldr	d6, [r4]
 801153c:	2d00      	cmp	r5, #0
 801153e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011542:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011546:	ed84 0b02 	vstr	d0, [r4, #8]
 801154a:	da85      	bge.n	8011458 <__ieee754_rem_pio2+0x60>
 801154c:	eeb1 6b46 	vneg.f64	d6, d6
 8011550:	eeb1 0b40 	vneg.f64	d0, d0
 8011554:	ed84 6b00 	vstr	d6, [r4]
 8011558:	ed84 0b02 	vstr	d0, [r4, #8]
 801155c:	4240      	negs	r0, r0
 801155e:	e77b      	b.n	8011458 <__ieee754_rem_pio2+0x60>
 8011560:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8011650 <__ieee754_rem_pio2+0x258>
 8011564:	eeb0 0b46 	vmov.f64	d0, d6
 8011568:	eea4 0b07 	vfma.f64	d0, d4, d7
 801156c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8011570:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011574:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8011658 <__ieee754_rem_pio2+0x260>
 8011578:	eeb0 7b46 	vmov.f64	d7, d6
 801157c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8011580:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011584:	e7ba      	b.n	80114fc <__ieee754_rem_pio2+0x104>
 8011586:	4b3c      	ldr	r3, [pc, #240]	@ (8011678 <__ieee754_rem_pio2+0x280>)
 8011588:	429e      	cmp	r6, r3
 801158a:	d906      	bls.n	801159a <__ieee754_rem_pio2+0x1a2>
 801158c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011590:	ed80 7b02 	vstr	d7, [r0, #8]
 8011594:	ed80 7b00 	vstr	d7, [r0]
 8011598:	e740      	b.n	801141c <__ieee754_rem_pio2+0x24>
 801159a:	ee10 3a10 	vmov	r3, s0
 801159e:	1532      	asrs	r2, r6, #20
 80115a0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80115a4:	4618      	mov	r0, r3
 80115a6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80115aa:	ec41 0b17 	vmov	d7, r0, r1
 80115ae:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80115b2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8011660 <__ieee754_rem_pio2+0x268>
 80115b6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80115ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115be:	ed8d 6b02 	vstr	d6, [sp, #8]
 80115c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80115c6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80115ca:	a808      	add	r0, sp, #32
 80115cc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80115d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115d4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80115d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80115dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115e0:	2103      	movs	r1, #3
 80115e2:	ed30 7b02 	vldmdb	r0!, {d7}
 80115e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ee:	460b      	mov	r3, r1
 80115f0:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 80115f4:	d0f5      	beq.n	80115e2 <__ieee754_rem_pio2+0x1ea>
 80115f6:	4921      	ldr	r1, [pc, #132]	@ (801167c <__ieee754_rem_pio2+0x284>)
 80115f8:	9101      	str	r1, [sp, #4]
 80115fa:	2102      	movs	r1, #2
 80115fc:	9100      	str	r1, [sp, #0]
 80115fe:	a802      	add	r0, sp, #8
 8011600:	4621      	mov	r1, r4
 8011602:	f000 f8ed 	bl	80117e0 <__kernel_rem_pio2>
 8011606:	2d00      	cmp	r5, #0
 8011608:	f6bf af26 	bge.w	8011458 <__ieee754_rem_pio2+0x60>
 801160c:	ed94 7b00 	vldr	d7, [r4]
 8011610:	eeb1 7b47 	vneg.f64	d7, d7
 8011614:	ed84 7b00 	vstr	d7, [r4]
 8011618:	ed94 7b02 	vldr	d7, [r4, #8]
 801161c:	eeb1 7b47 	vneg.f64	d7, d7
 8011620:	ed84 7b02 	vstr	d7, [r4, #8]
 8011624:	e79a      	b.n	801155c <__ieee754_rem_pio2+0x164>
 8011626:	bf00      	nop
 8011628:	54400000 	.word	0x54400000
 801162c:	3ff921fb 	.word	0x3ff921fb
 8011630:	1a626331 	.word	0x1a626331
 8011634:	3dd0b461 	.word	0x3dd0b461
 8011638:	1a600000 	.word	0x1a600000
 801163c:	3dd0b461 	.word	0x3dd0b461
 8011640:	2e037073 	.word	0x2e037073
 8011644:	3ba3198a 	.word	0x3ba3198a
 8011648:	6dc9c883 	.word	0x6dc9c883
 801164c:	3fe45f30 	.word	0x3fe45f30
 8011650:	2e000000 	.word	0x2e000000
 8011654:	3ba3198a 	.word	0x3ba3198a
 8011658:	252049c1 	.word	0x252049c1
 801165c:	397b839a 	.word	0x397b839a
 8011660:	00000000 	.word	0x00000000
 8011664:	41700000 	.word	0x41700000
 8011668:	3fe921fb 	.word	0x3fe921fb
 801166c:	4002d97b 	.word	0x4002d97b
 8011670:	413921fb 	.word	0x413921fb
 8011674:	08013990 	.word	0x08013990
 8011678:	7fefffff 	.word	0x7fefffff
 801167c:	08013a10 	.word	0x08013a10

08011680 <hypot>:
 8011680:	b508      	push	{r3, lr}
 8011682:	ed2d 8b06 	vpush	{d8-d10}
 8011686:	eeb0 ab40 	vmov.f64	d10, d0
 801168a:	eeb0 9b41 	vmov.f64	d9, d1
 801168e:	f000 fb23 	bl	8011cd8 <__ieee754_hypot>
 8011692:	eeb0 8b40 	vmov.f64	d8, d0
 8011696:	f000 f823 	bl	80116e0 <finite>
 801169a:	b978      	cbnz	r0, 80116bc <hypot+0x3c>
 801169c:	eeb0 0b4a 	vmov.f64	d0, d10
 80116a0:	f000 f81e 	bl	80116e0 <finite>
 80116a4:	b150      	cbz	r0, 80116bc <hypot+0x3c>
 80116a6:	eeb0 0b49 	vmov.f64	d0, d9
 80116aa:	f000 f819 	bl	80116e0 <finite>
 80116ae:	b128      	cbz	r0, 80116bc <hypot+0x3c>
 80116b0:	f7ff f8aa 	bl	8010808 <__errno>
 80116b4:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 80116c8 <hypot+0x48>
 80116b8:	2322      	movs	r3, #34	@ 0x22
 80116ba:	6003      	str	r3, [r0, #0]
 80116bc:	eeb0 0b48 	vmov.f64	d0, d8
 80116c0:	ecbd 8b06 	vpop	{d8-d10}
 80116c4:	bd08      	pop	{r3, pc}
 80116c6:	bf00      	nop
 80116c8:	00000000 	.word	0x00000000
 80116cc:	7ff00000 	.word	0x7ff00000

080116d0 <fabs>:
 80116d0:	ec51 0b10 	vmov	r0, r1, d0
 80116d4:	4602      	mov	r2, r0
 80116d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80116da:	ec43 2b10 	vmov	d0, r2, r3
 80116de:	4770      	bx	lr

080116e0 <finite>:
 80116e0:	b082      	sub	sp, #8
 80116e2:	ed8d 0b00 	vstr	d0, [sp]
 80116e6:	9801      	ldr	r0, [sp, #4]
 80116e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80116ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80116f0:	0fc0      	lsrs	r0, r0, #31
 80116f2:	b002      	add	sp, #8
 80116f4:	4770      	bx	lr

080116f6 <with_errno>:
 80116f6:	b510      	push	{r4, lr}
 80116f8:	ed2d 8b02 	vpush	{d8}
 80116fc:	eeb0 8b40 	vmov.f64	d8, d0
 8011700:	4604      	mov	r4, r0
 8011702:	f7ff f881 	bl	8010808 <__errno>
 8011706:	eeb0 0b48 	vmov.f64	d0, d8
 801170a:	ecbd 8b02 	vpop	{d8}
 801170e:	6004      	str	r4, [r0, #0]
 8011710:	bd10      	pop	{r4, pc}

08011712 <xflow>:
 8011712:	b082      	sub	sp, #8
 8011714:	b158      	cbz	r0, 801172e <xflow+0x1c>
 8011716:	eeb1 7b40 	vneg.f64	d7, d0
 801171a:	ed8d 7b00 	vstr	d7, [sp]
 801171e:	ed9d 7b00 	vldr	d7, [sp]
 8011722:	2022      	movs	r0, #34	@ 0x22
 8011724:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011728:	b002      	add	sp, #8
 801172a:	f7ff bfe4 	b.w	80116f6 <with_errno>
 801172e:	eeb0 7b40 	vmov.f64	d7, d0
 8011732:	e7f2      	b.n	801171a <xflow+0x8>
 8011734:	0000      	movs	r0, r0
	...

08011738 <__math_uflow>:
 8011738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011740 <__math_uflow+0x8>
 801173c:	f7ff bfe9 	b.w	8011712 <xflow>
 8011740:	00000000 	.word	0x00000000
 8011744:	10000000 	.word	0x10000000

08011748 <__math_oflow>:
 8011748:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011750 <__math_oflow+0x8>
 801174c:	f7ff bfe1 	b.w	8011712 <xflow>
 8011750:	00000000 	.word	0x00000000
 8011754:	70000000 	.word	0x70000000

08011758 <__math_divzero>:
 8011758:	b082      	sub	sp, #8
 801175a:	2800      	cmp	r0, #0
 801175c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8011760:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8011764:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8011768:	ed8d 7b00 	vstr	d7, [sp]
 801176c:	ed9d 0b00 	vldr	d0, [sp]
 8011770:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8011780 <__math_divzero+0x28>
 8011774:	2022      	movs	r0, #34	@ 0x22
 8011776:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801177a:	b002      	add	sp, #8
 801177c:	f7ff bfbb 	b.w	80116f6 <with_errno>
	...

08011788 <__math_invalid>:
 8011788:	eeb0 7b40 	vmov.f64	d7, d0
 801178c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011794:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011798:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801179c:	d602      	bvs.n	80117a4 <__math_invalid+0x1c>
 801179e:	2021      	movs	r0, #33	@ 0x21
 80117a0:	f7ff bfa9 	b.w	80116f6 <with_errno>
 80117a4:	4770      	bx	lr

080117a6 <__math_check_uflow>:
 80117a6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80117aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ae:	d102      	bne.n	80117b6 <__math_check_uflow+0x10>
 80117b0:	2022      	movs	r0, #34	@ 0x22
 80117b2:	f7ff bfa0 	b.w	80116f6 <with_errno>
 80117b6:	4770      	bx	lr

080117b8 <__math_check_oflow>:
 80117b8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80117d8 <__math_check_oflow+0x20>
 80117bc:	eeb0 7bc0 	vabs.f64	d7, d0
 80117c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80117c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c8:	dd02      	ble.n	80117d0 <__math_check_oflow+0x18>
 80117ca:	2022      	movs	r0, #34	@ 0x22
 80117cc:	f7ff bf93 	b.w	80116f6 <with_errno>
 80117d0:	4770      	bx	lr
 80117d2:	bf00      	nop
 80117d4:	f3af 8000 	nop.w
 80117d8:	ffffffff 	.word	0xffffffff
 80117dc:	7fefffff 	.word	0x7fefffff

080117e0 <__kernel_rem_pio2>:
 80117e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e4:	ed2d 8b06 	vpush	{d8-d10}
 80117e8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80117ec:	469b      	mov	fp, r3
 80117ee:	9001      	str	r0, [sp, #4]
 80117f0:	4bbb      	ldr	r3, [pc, #748]	@ (8011ae0 <__kernel_rem_pio2+0x300>)
 80117f2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80117f4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80117f8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80117fc:	f112 0f14 	cmn.w	r2, #20
 8011800:	bfa8      	it	ge
 8011802:	1ed3      	subge	r3, r2, #3
 8011804:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8011808:	bfb8      	it	lt
 801180a:	2300      	movlt	r3, #0
 801180c:	f06f 0517 	mvn.w	r5, #23
 8011810:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8011ac8 <__kernel_rem_pio2+0x2e8>
 8011814:	bfa4      	itt	ge
 8011816:	2018      	movge	r0, #24
 8011818:	fb93 f3f0 	sdivge	r3, r3, r0
 801181c:	fb03 5505 	mla	r5, r3, r5, r5
 8011820:	eba3 040a 	sub.w	r4, r3, sl
 8011824:	4415      	add	r5, r2
 8011826:	460f      	mov	r7, r1
 8011828:	eb09 060a 	add.w	r6, r9, sl
 801182c:	a81a      	add	r0, sp, #104	@ 0x68
 801182e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8011832:	2200      	movs	r2, #0
 8011834:	42b2      	cmp	r2, r6
 8011836:	dd0e      	ble.n	8011856 <__kernel_rem_pio2+0x76>
 8011838:	aa1a      	add	r2, sp, #104	@ 0x68
 801183a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801183e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8011842:	2600      	movs	r6, #0
 8011844:	454e      	cmp	r6, r9
 8011846:	dc25      	bgt.n	8011894 <__kernel_rem_pio2+0xb4>
 8011848:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8011ac8 <__kernel_rem_pio2+0x2e8>
 801184c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011850:	4614      	mov	r4, r2
 8011852:	2000      	movs	r0, #0
 8011854:	e015      	b.n	8011882 <__kernel_rem_pio2+0xa2>
 8011856:	42d4      	cmn	r4, r2
 8011858:	d409      	bmi.n	801186e <__kernel_rem_pio2+0x8e>
 801185a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801185e:	ee07 1a90 	vmov	s15, r1
 8011862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011866:	eca0 7b02 	vstmia	r0!, {d7}
 801186a:	3201      	adds	r2, #1
 801186c:	e7e2      	b.n	8011834 <__kernel_rem_pio2+0x54>
 801186e:	eeb0 7b46 	vmov.f64	d7, d6
 8011872:	e7f8      	b.n	8011866 <__kernel_rem_pio2+0x86>
 8011874:	ecbc 5b02 	vldmia	ip!, {d5}
 8011878:	ed94 6b00 	vldr	d6, [r4]
 801187c:	3001      	adds	r0, #1
 801187e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011882:	4550      	cmp	r0, sl
 8011884:	f1a4 0408 	sub.w	r4, r4, #8
 8011888:	ddf4      	ble.n	8011874 <__kernel_rem_pio2+0x94>
 801188a:	ecae 7b02 	vstmia	lr!, {d7}
 801188e:	3601      	adds	r6, #1
 8011890:	3208      	adds	r2, #8
 8011892:	e7d7      	b.n	8011844 <__kernel_rem_pio2+0x64>
 8011894:	aa06      	add	r2, sp, #24
 8011896:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8011ad0 <__kernel_rem_pio2+0x2f0>
 801189a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8011ad8 <__kernel_rem_pio2+0x2f8>
 801189e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80118a2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80118a6:	9203      	str	r2, [sp, #12]
 80118a8:	9302      	str	r3, [sp, #8]
 80118aa:	464c      	mov	r4, r9
 80118ac:	00e3      	lsls	r3, r4, #3
 80118ae:	9304      	str	r3, [sp, #16]
 80118b0:	ab92      	add	r3, sp, #584	@ 0x248
 80118b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118b6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80118ba:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80118bc:	ab06      	add	r3, sp, #24
 80118be:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80118c2:	461e      	mov	r6, r3
 80118c4:	4620      	mov	r0, r4
 80118c6:	2800      	cmp	r0, #0
 80118c8:	f1a2 0208 	sub.w	r2, r2, #8
 80118cc:	dc4a      	bgt.n	8011964 <__kernel_rem_pio2+0x184>
 80118ce:	4628      	mov	r0, r5
 80118d0:	9305      	str	r3, [sp, #20]
 80118d2:	f000 fab5 	bl	8011e40 <scalbn>
 80118d6:	eeb0 8b40 	vmov.f64	d8, d0
 80118da:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80118de:	ee28 0b00 	vmul.f64	d0, d8, d0
 80118e2:	f7ff fc51 	bl	8011188 <floor>
 80118e6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80118ea:	eea0 8b47 	vfms.f64	d8, d0, d7
 80118ee:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80118f2:	2d00      	cmp	r5, #0
 80118f4:	ee17 8a90 	vmov	r8, s15
 80118f8:	9b05      	ldr	r3, [sp, #20]
 80118fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80118fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 8011902:	dd41      	ble.n	8011988 <__kernel_rem_pio2+0x1a8>
 8011904:	1e60      	subs	r0, r4, #1
 8011906:	aa06      	add	r2, sp, #24
 8011908:	f1c5 0c18 	rsb	ip, r5, #24
 801190c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8011910:	fa46 f20c 	asr.w	r2, r6, ip
 8011914:	4490      	add	r8, r2
 8011916:	fa02 f20c 	lsl.w	r2, r2, ip
 801191a:	1ab6      	subs	r6, r6, r2
 801191c:	aa06      	add	r2, sp, #24
 801191e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8011922:	f1c5 0217 	rsb	r2, r5, #23
 8011926:	4116      	asrs	r6, r2
 8011928:	2e00      	cmp	r6, #0
 801192a:	dd3c      	ble.n	80119a6 <__kernel_rem_pio2+0x1c6>
 801192c:	f04f 0c00 	mov.w	ip, #0
 8011930:	f108 0801 	add.w	r8, r8, #1
 8011934:	4660      	mov	r0, ip
 8011936:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801193a:	4564      	cmp	r4, ip
 801193c:	dc66      	bgt.n	8011a0c <__kernel_rem_pio2+0x22c>
 801193e:	2d00      	cmp	r5, #0
 8011940:	dd03      	ble.n	801194a <__kernel_rem_pio2+0x16a>
 8011942:	2d01      	cmp	r5, #1
 8011944:	d072      	beq.n	8011a2c <__kernel_rem_pio2+0x24c>
 8011946:	2d02      	cmp	r5, #2
 8011948:	d07a      	beq.n	8011a40 <__kernel_rem_pio2+0x260>
 801194a:	2e02      	cmp	r6, #2
 801194c:	d12b      	bne.n	80119a6 <__kernel_rem_pio2+0x1c6>
 801194e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011952:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011956:	b330      	cbz	r0, 80119a6 <__kernel_rem_pio2+0x1c6>
 8011958:	4628      	mov	r0, r5
 801195a:	f000 fa71 	bl	8011e40 <scalbn>
 801195e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011962:	e020      	b.n	80119a6 <__kernel_rem_pio2+0x1c6>
 8011964:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011968:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801196c:	3801      	subs	r0, #1
 801196e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011972:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011976:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801197a:	eca6 0a01 	vstmia	r6!, {s0}
 801197e:	ed92 0b00 	vldr	d0, [r2]
 8011982:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011986:	e79e      	b.n	80118c6 <__kernel_rem_pio2+0xe6>
 8011988:	d105      	bne.n	8011996 <__kernel_rem_pio2+0x1b6>
 801198a:	1e62      	subs	r2, r4, #1
 801198c:	a906      	add	r1, sp, #24
 801198e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8011992:	15f6      	asrs	r6, r6, #23
 8011994:	e7c8      	b.n	8011928 <__kernel_rem_pio2+0x148>
 8011996:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801199a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a2:	da31      	bge.n	8011a08 <__kernel_rem_pio2+0x228>
 80119a4:	2600      	movs	r6, #0
 80119a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80119aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ae:	f040 809b 	bne.w	8011ae8 <__kernel_rem_pio2+0x308>
 80119b2:	1e62      	subs	r2, r4, #1
 80119b4:	2000      	movs	r0, #0
 80119b6:	454a      	cmp	r2, r9
 80119b8:	da49      	bge.n	8011a4e <__kernel_rem_pio2+0x26e>
 80119ba:	2800      	cmp	r0, #0
 80119bc:	d062      	beq.n	8011a84 <__kernel_rem_pio2+0x2a4>
 80119be:	3c01      	subs	r4, #1
 80119c0:	ab06      	add	r3, sp, #24
 80119c2:	3d18      	subs	r5, #24
 80119c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d0f8      	beq.n	80119be <__kernel_rem_pio2+0x1de>
 80119cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80119d0:	4628      	mov	r0, r5
 80119d2:	f000 fa35 	bl	8011e40 <scalbn>
 80119d6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8011ad0 <__kernel_rem_pio2+0x2f0>
 80119da:	1c62      	adds	r2, r4, #1
 80119dc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80119de:	00d3      	lsls	r3, r2, #3
 80119e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80119e4:	4622      	mov	r2, r4
 80119e6:	2a00      	cmp	r2, #0
 80119e8:	f280 80a8 	bge.w	8011b3c <__kernel_rem_pio2+0x35c>
 80119ec:	4622      	mov	r2, r4
 80119ee:	2a00      	cmp	r2, #0
 80119f0:	f2c0 80c6 	blt.w	8011b80 <__kernel_rem_pio2+0x3a0>
 80119f4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80119f6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80119fa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8011ac8 <__kernel_rem_pio2+0x2e8>
 80119fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8011ae4 <__kernel_rem_pio2+0x304>
 8011a02:	2000      	movs	r0, #0
 8011a04:	1aa1      	subs	r1, r4, r2
 8011a06:	e0b0      	b.n	8011b6a <__kernel_rem_pio2+0x38a>
 8011a08:	2602      	movs	r6, #2
 8011a0a:	e78f      	b.n	801192c <__kernel_rem_pio2+0x14c>
 8011a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a10:	b948      	cbnz	r0, 8011a26 <__kernel_rem_pio2+0x246>
 8011a12:	b122      	cbz	r2, 8011a1e <__kernel_rem_pio2+0x23e>
 8011a14:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8011a18:	f843 2c04 	str.w	r2, [r3, #-4]
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	f10c 0c01 	add.w	ip, ip, #1
 8011a22:	4610      	mov	r0, r2
 8011a24:	e789      	b.n	801193a <__kernel_rem_pio2+0x15a>
 8011a26:	ebae 0202 	sub.w	r2, lr, r2
 8011a2a:	e7f5      	b.n	8011a18 <__kernel_rem_pio2+0x238>
 8011a2c:	1e62      	subs	r2, r4, #1
 8011a2e:	ab06      	add	r3, sp, #24
 8011a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011a38:	a906      	add	r1, sp, #24
 8011a3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011a3e:	e784      	b.n	801194a <__kernel_rem_pio2+0x16a>
 8011a40:	1e62      	subs	r2, r4, #1
 8011a42:	ab06      	add	r3, sp, #24
 8011a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011a4c:	e7f4      	b.n	8011a38 <__kernel_rem_pio2+0x258>
 8011a4e:	ab06      	add	r3, sp, #24
 8011a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a54:	3a01      	subs	r2, #1
 8011a56:	4318      	orrs	r0, r3
 8011a58:	e7ad      	b.n	80119b6 <__kernel_rem_pio2+0x1d6>
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d0fa      	beq.n	8011a5a <__kernel_rem_pio2+0x27a>
 8011a64:	9a04      	ldr	r2, [sp, #16]
 8011a66:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8011a6a:	446a      	add	r2, sp
 8011a6c:	eb04 000b 	add.w	r0, r4, fp
 8011a70:	a91a      	add	r1, sp, #104	@ 0x68
 8011a72:	1c66      	adds	r6, r4, #1
 8011a74:	3a98      	subs	r2, #152	@ 0x98
 8011a76:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8011a7a:	4423      	add	r3, r4
 8011a7c:	42b3      	cmp	r3, r6
 8011a7e:	da04      	bge.n	8011a8a <__kernel_rem_pio2+0x2aa>
 8011a80:	461c      	mov	r4, r3
 8011a82:	e713      	b.n	80118ac <__kernel_rem_pio2+0xcc>
 8011a84:	9a03      	ldr	r2, [sp, #12]
 8011a86:	2301      	movs	r3, #1
 8011a88:	e7e8      	b.n	8011a5c <__kernel_rem_pio2+0x27c>
 8011a8a:	9902      	ldr	r1, [sp, #8]
 8011a8c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011a90:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8011a94:	9104      	str	r1, [sp, #16]
 8011a96:	ee07 1a90 	vmov	s15, r1
 8011a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011a9e:	2400      	movs	r4, #0
 8011aa0:	eca0 7b02 	vstmia	r0!, {d7}
 8011aa4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8011ac8 <__kernel_rem_pio2+0x2e8>
 8011aa8:	4686      	mov	lr, r0
 8011aaa:	4554      	cmp	r4, sl
 8011aac:	dd03      	ble.n	8011ab6 <__kernel_rem_pio2+0x2d6>
 8011aae:	eca2 7b02 	vstmia	r2!, {d7}
 8011ab2:	3601      	adds	r6, #1
 8011ab4:	e7e2      	b.n	8011a7c <__kernel_rem_pio2+0x29c>
 8011ab6:	ecbc 5b02 	vldmia	ip!, {d5}
 8011aba:	ed3e 6b02 	vldmdb	lr!, {d6}
 8011abe:	3401      	adds	r4, #1
 8011ac0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011ac4:	e7f1      	b.n	8011aaa <__kernel_rem_pio2+0x2ca>
 8011ac6:	bf00      	nop
	...
 8011ad4:	3e700000 	.word	0x3e700000
 8011ad8:	00000000 	.word	0x00000000
 8011adc:	41700000 	.word	0x41700000
 8011ae0:	080143c8 	.word	0x080143c8
 8011ae4:	08014388 	.word	0x08014388
 8011ae8:	4268      	negs	r0, r5
 8011aea:	eeb0 0b48 	vmov.f64	d0, d8
 8011aee:	f000 f9a7 	bl	8011e40 <scalbn>
 8011af2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8011cc0 <__kernel_rem_pio2+0x4e0>
 8011af6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afe:	db17      	blt.n	8011b30 <__kernel_rem_pio2+0x350>
 8011b00:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8011cc8 <__kernel_rem_pio2+0x4e8>
 8011b04:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011b08:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011b0c:	aa06      	add	r2, sp, #24
 8011b0e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011b12:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011b16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011b1a:	3518      	adds	r5, #24
 8011b1c:	ee10 3a10 	vmov	r3, s0
 8011b20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011b24:	ee17 3a10 	vmov	r3, s14
 8011b28:	3401      	adds	r4, #1
 8011b2a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011b2e:	e74d      	b.n	80119cc <__kernel_rem_pio2+0x1ec>
 8011b30:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011b34:	aa06      	add	r2, sp, #24
 8011b36:	ee10 3a10 	vmov	r3, s0
 8011b3a:	e7f6      	b.n	8011b2a <__kernel_rem_pio2+0x34a>
 8011b3c:	a806      	add	r0, sp, #24
 8011b3e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011b42:	9001      	str	r0, [sp, #4]
 8011b44:	ee07 0a90 	vmov	s15, r0
 8011b48:	3a01      	subs	r2, #1
 8011b4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b4e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011b52:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011b56:	ed21 7b02 	vstmdb	r1!, {d7}
 8011b5a:	e744      	b.n	80119e6 <__kernel_rem_pio2+0x206>
 8011b5c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011b60:	ecb5 6b02 	vldmia	r5!, {d6}
 8011b64:	3001      	adds	r0, #1
 8011b66:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011b6a:	4548      	cmp	r0, r9
 8011b6c:	dc01      	bgt.n	8011b72 <__kernel_rem_pio2+0x392>
 8011b6e:	4281      	cmp	r1, r0
 8011b70:	daf4      	bge.n	8011b5c <__kernel_rem_pio2+0x37c>
 8011b72:	a842      	add	r0, sp, #264	@ 0x108
 8011b74:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011b78:	ed81 7b00 	vstr	d7, [r1]
 8011b7c:	3a01      	subs	r2, #1
 8011b7e:	e736      	b.n	80119ee <__kernel_rem_pio2+0x20e>
 8011b80:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8011b82:	2a02      	cmp	r2, #2
 8011b84:	dc0a      	bgt.n	8011b9c <__kernel_rem_pio2+0x3bc>
 8011b86:	2a00      	cmp	r2, #0
 8011b88:	dc2d      	bgt.n	8011be6 <__kernel_rem_pio2+0x406>
 8011b8a:	d046      	beq.n	8011c1a <__kernel_rem_pio2+0x43a>
 8011b8c:	f008 0007 	and.w	r0, r8, #7
 8011b90:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8011b94:	ecbd 8b06 	vpop	{d8-d10}
 8011b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8011b9e:	2a03      	cmp	r2, #3
 8011ba0:	d1f4      	bne.n	8011b8c <__kernel_rem_pio2+0x3ac>
 8011ba2:	a942      	add	r1, sp, #264	@ 0x108
 8011ba4:	f1a3 0208 	sub.w	r2, r3, #8
 8011ba8:	440a      	add	r2, r1
 8011baa:	4611      	mov	r1, r2
 8011bac:	4620      	mov	r0, r4
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	f1a1 0108 	sub.w	r1, r1, #8
 8011bb4:	dc52      	bgt.n	8011c5c <__kernel_rem_pio2+0x47c>
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	2901      	cmp	r1, #1
 8011bba:	f1a2 0208 	sub.w	r2, r2, #8
 8011bbe:	dc5d      	bgt.n	8011c7c <__kernel_rem_pio2+0x49c>
 8011bc0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8011cd0 <__kernel_rem_pio2+0x4f0>
 8011bc4:	aa42      	add	r2, sp, #264	@ 0x108
 8011bc6:	4413      	add	r3, r2
 8011bc8:	2c01      	cmp	r4, #1
 8011bca:	dc67      	bgt.n	8011c9c <__kernel_rem_pio2+0x4bc>
 8011bcc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8011bd0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8011bd4:	2e00      	cmp	r6, #0
 8011bd6:	d167      	bne.n	8011ca8 <__kernel_rem_pio2+0x4c8>
 8011bd8:	ed87 5b00 	vstr	d5, [r7]
 8011bdc:	ed87 6b02 	vstr	d6, [r7, #8]
 8011be0:	ed87 7b04 	vstr	d7, [r7, #16]
 8011be4:	e7d2      	b.n	8011b8c <__kernel_rem_pio2+0x3ac>
 8011be6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8011cd0 <__kernel_rem_pio2+0x4f0>
 8011bea:	aa42      	add	r2, sp, #264	@ 0x108
 8011bec:	4413      	add	r3, r2
 8011bee:	4622      	mov	r2, r4
 8011bf0:	2a00      	cmp	r2, #0
 8011bf2:	da24      	bge.n	8011c3e <__kernel_rem_pio2+0x45e>
 8011bf4:	b34e      	cbz	r6, 8011c4a <__kernel_rem_pio2+0x46a>
 8011bf6:	eeb1 7b46 	vneg.f64	d7, d6
 8011bfa:	ed87 7b00 	vstr	d7, [r7]
 8011bfe:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8011c02:	aa44      	add	r2, sp, #272	@ 0x110
 8011c04:	2301      	movs	r3, #1
 8011c06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c0a:	429c      	cmp	r4, r3
 8011c0c:	da20      	bge.n	8011c50 <__kernel_rem_pio2+0x470>
 8011c0e:	b10e      	cbz	r6, 8011c14 <__kernel_rem_pio2+0x434>
 8011c10:	eeb1 7b47 	vneg.f64	d7, d7
 8011c14:	ed87 7b02 	vstr	d7, [r7, #8]
 8011c18:	e7b8      	b.n	8011b8c <__kernel_rem_pio2+0x3ac>
 8011c1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8011cd0 <__kernel_rem_pio2+0x4f0>
 8011c1e:	aa42      	add	r2, sp, #264	@ 0x108
 8011c20:	4413      	add	r3, r2
 8011c22:	2c00      	cmp	r4, #0
 8011c24:	da05      	bge.n	8011c32 <__kernel_rem_pio2+0x452>
 8011c26:	b10e      	cbz	r6, 8011c2c <__kernel_rem_pio2+0x44c>
 8011c28:	eeb1 7b47 	vneg.f64	d7, d7
 8011c2c:	ed87 7b00 	vstr	d7, [r7]
 8011c30:	e7ac      	b.n	8011b8c <__kernel_rem_pio2+0x3ac>
 8011c32:	ed33 6b02 	vldmdb	r3!, {d6}
 8011c36:	3c01      	subs	r4, #1
 8011c38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011c3c:	e7f1      	b.n	8011c22 <__kernel_rem_pio2+0x442>
 8011c3e:	ed33 7b02 	vldmdb	r3!, {d7}
 8011c42:	3a01      	subs	r2, #1
 8011c44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011c48:	e7d2      	b.n	8011bf0 <__kernel_rem_pio2+0x410>
 8011c4a:	eeb0 7b46 	vmov.f64	d7, d6
 8011c4e:	e7d4      	b.n	8011bfa <__kernel_rem_pio2+0x41a>
 8011c50:	ecb2 6b02 	vldmia	r2!, {d6}
 8011c54:	3301      	adds	r3, #1
 8011c56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011c5a:	e7d6      	b.n	8011c0a <__kernel_rem_pio2+0x42a>
 8011c5c:	ed91 7b00 	vldr	d7, [r1]
 8011c60:	ed91 5b02 	vldr	d5, [r1, #8]
 8011c64:	3801      	subs	r0, #1
 8011c66:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011c6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c6e:	ed81 6b00 	vstr	d6, [r1]
 8011c72:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011c76:	ed81 7b02 	vstr	d7, [r1, #8]
 8011c7a:	e798      	b.n	8011bae <__kernel_rem_pio2+0x3ce>
 8011c7c:	ed92 7b00 	vldr	d7, [r2]
 8011c80:	ed92 5b02 	vldr	d5, [r2, #8]
 8011c84:	3901      	subs	r1, #1
 8011c86:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011c8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011c8e:	ed82 6b00 	vstr	d6, [r2]
 8011c92:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011c96:	ed82 7b02 	vstr	d7, [r2, #8]
 8011c9a:	e78d      	b.n	8011bb8 <__kernel_rem_pio2+0x3d8>
 8011c9c:	ed33 6b02 	vldmdb	r3!, {d6}
 8011ca0:	3c01      	subs	r4, #1
 8011ca2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011ca6:	e78f      	b.n	8011bc8 <__kernel_rem_pio2+0x3e8>
 8011ca8:	eeb1 5b45 	vneg.f64	d5, d5
 8011cac:	eeb1 6b46 	vneg.f64	d6, d6
 8011cb0:	ed87 5b00 	vstr	d5, [r7]
 8011cb4:	eeb1 7b47 	vneg.f64	d7, d7
 8011cb8:	ed87 6b02 	vstr	d6, [r7, #8]
 8011cbc:	e790      	b.n	8011be0 <__kernel_rem_pio2+0x400>
 8011cbe:	bf00      	nop
 8011cc0:	00000000 	.word	0x00000000
 8011cc4:	41700000 	.word	0x41700000
 8011cc8:	00000000 	.word	0x00000000
 8011ccc:	3e700000 	.word	0x3e700000
	...

08011cd8 <__ieee754_hypot>:
 8011cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cda:	ec51 0b10 	vmov	r0, r1, d0
 8011cde:	ec53 2b11 	vmov	r2, r3, d1
 8011ce2:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8011ce6:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8011cea:	42a5      	cmp	r5, r4
 8011cec:	da05      	bge.n	8011cfa <__ieee754_hypot+0x22>
 8011cee:	462e      	mov	r6, r5
 8011cf0:	4625      	mov	r5, r4
 8011cf2:	4634      	mov	r4, r6
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	4610      	mov	r0, r2
 8011cf8:	4632      	mov	r2, r6
 8011cfa:	4623      	mov	r3, r4
 8011cfc:	ec43 2b14 	vmov	d4, r2, r3
 8011d00:	1b2b      	subs	r3, r5, r4
 8011d02:	4629      	mov	r1, r5
 8011d04:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8011d08:	ec41 0b10 	vmov	d0, r0, r1
 8011d0c:	dd02      	ble.n	8011d14 <__ieee754_hypot+0x3c>
 8011d0e:	ee30 0b04 	vadd.f64	d0, d0, d4
 8011d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d14:	4b46      	ldr	r3, [pc, #280]	@ (8011e30 <__ieee754_hypot+0x158>)
 8011d16:	429d      	cmp	r5, r3
 8011d18:	dd58      	ble.n	8011dcc <__ieee754_hypot+0xf4>
 8011d1a:	4b46      	ldr	r3, [pc, #280]	@ (8011e34 <__ieee754_hypot+0x15c>)
 8011d1c:	429d      	cmp	r5, r3
 8011d1e:	dd0f      	ble.n	8011d40 <__ieee754_hypot+0x68>
 8011d20:	ee14 3a10 	vmov	r3, s8
 8011d24:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8011d28:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011d2c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8011d30:	4305      	orrs	r5, r0
 8011d32:	bf18      	it	ne
 8011d34:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8011d38:	431c      	orrs	r4, r3
 8011d3a:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8011d3e:	e7e8      	b.n	8011d12 <__ieee754_hypot+0x3a>
 8011d40:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8011d44:	4602      	mov	r2, r0
 8011d46:	462b      	mov	r3, r5
 8011d48:	ec43 2b10 	vmov	d0, r2, r3
 8011d4c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8011d50:	ec53 2b14 	vmov	r2, r3, d4
 8011d54:	4623      	mov	r3, r4
 8011d56:	ec43 2b14 	vmov	d4, r2, r3
 8011d5a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8011d5e:	4b36      	ldr	r3, [pc, #216]	@ (8011e38 <__ieee754_hypot+0x160>)
 8011d60:	429c      	cmp	r4, r3
 8011d62:	dc0e      	bgt.n	8011d82 <__ieee754_hypot+0xaa>
 8011d64:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8011d68:	da32      	bge.n	8011dd0 <__ieee754_hypot+0xf8>
 8011d6a:	ee14 3a10 	vmov	r3, s8
 8011d6e:	4323      	orrs	r3, r4
 8011d70:	d0cf      	beq.n	8011d12 <__ieee754_hypot+0x3a>
 8011d72:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8011e28 <__ieee754_hypot+0x150>
 8011d76:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8011d7a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8011d7e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d82:	ee30 5b44 	vsub.f64	d5, d0, d4
 8011d86:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8011d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d8e:	f04f 0200 	mov.w	r2, #0
 8011d92:	d52e      	bpl.n	8011df2 <__ieee754_hypot+0x11a>
 8011d94:	462b      	mov	r3, r5
 8011d96:	ec43 2b17 	vmov	d7, r2, r3
 8011d9a:	ee30 6b07 	vadd.f64	d6, d0, d7
 8011d9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011da2:	ee26 0b00 	vmul.f64	d0, d6, d0
 8011da6:	eea4 0b04 	vfma.f64	d0, d4, d4
 8011daa:	eea7 0b07 	vfma.f64	d0, d7, d7
 8011dae:	f000 f8c5 	bl	8011f3c <__ieee754_sqrt>
 8011db2:	2e00      	cmp	r6, #0
 8011db4:	d0ad      	beq.n	8011d12 <__ieee754_hypot+0x3a>
 8011db6:	0533      	lsls	r3, r6, #20
 8011db8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8011dc2:	ec41 0b17 	vmov	d7, r0, r1
 8011dc6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011dca:	e7a2      	b.n	8011d12 <__ieee754_hypot+0x3a>
 8011dcc:	2600      	movs	r6, #0
 8011dce:	e7c6      	b.n	8011d5e <__ieee754_hypot+0x86>
 8011dd0:	ec53 2b10 	vmov	r2, r3, d0
 8011dd4:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8011dd8:	462b      	mov	r3, r5
 8011dda:	ec43 2b10 	vmov	d0, r2, r3
 8011dde:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8011de2:	ec53 2b14 	vmov	r2, r3, d4
 8011de6:	4623      	mov	r3, r4
 8011de8:	ec43 2b14 	vmov	d4, r2, r3
 8011dec:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8011df0:	e7c7      	b.n	8011d82 <__ieee754_hypot+0xaa>
 8011df2:	4623      	mov	r3, r4
 8011df4:	ec43 2b16 	vmov	d6, r2, r3
 8011df8:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8011e02:	ec43 2b17 	vmov	d7, r2, r3
 8011e06:	ee34 3b46 	vsub.f64	d3, d4, d6
 8011e0a:	eeb0 2b47 	vmov.f64	d2, d7
 8011e0e:	ee90 2b01 	vfnms.f64	d2, d0, d1
 8011e12:	ee24 0b02 	vmul.f64	d0, d4, d2
 8011e16:	eea3 0b07 	vfma.f64	d0, d3, d7
 8011e1a:	eea5 0b05 	vfma.f64	d0, d5, d5
 8011e1e:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011e22:	e7c4      	b.n	8011dae <__ieee754_hypot+0xd6>
 8011e24:	f3af 8000 	nop.w
 8011e28:	00000000 	.word	0x00000000
 8011e2c:	7fd00000 	.word	0x7fd00000
 8011e30:	5f300000 	.word	0x5f300000
 8011e34:	7fefffff 	.word	0x7fefffff
 8011e38:	20afffff 	.word	0x20afffff
 8011e3c:	00000000 	.word	0x00000000

08011e40 <scalbn>:
 8011e40:	ee10 1a90 	vmov	r1, s1
 8011e44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e48:	b98b      	cbnz	r3, 8011e6e <scalbn+0x2e>
 8011e4a:	ee10 3a10 	vmov	r3, s0
 8011e4e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8011e52:	4319      	orrs	r1, r3
 8011e54:	d00a      	beq.n	8011e6c <scalbn+0x2c>
 8011e56:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011f08 <scalbn+0xc8>
 8011e5a:	4b37      	ldr	r3, [pc, #220]	@ (8011f38 <scalbn+0xf8>)
 8011e5c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011e60:	4298      	cmp	r0, r3
 8011e62:	da0b      	bge.n	8011e7c <scalbn+0x3c>
 8011e64:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011f10 <scalbn+0xd0>
 8011e68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011e6c:	4770      	bx	lr
 8011e6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d107      	bne.n	8011e86 <scalbn+0x46>
 8011e76:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011e7a:	4770      	bx	lr
 8011e7c:	ee10 1a90 	vmov	r1, s1
 8011e80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e84:	3b36      	subs	r3, #54	@ 0x36
 8011e86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011e8a:	4290      	cmp	r0, r2
 8011e8c:	dd0d      	ble.n	8011eaa <scalbn+0x6a>
 8011e8e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8011f18 <scalbn+0xd8>
 8011e92:	ee10 3a90 	vmov	r3, s1
 8011e96:	eeb0 6b47 	vmov.f64	d6, d7
 8011e9a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8011f20 <scalbn+0xe0>
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011ea4:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011ea8:	4770      	bx	lr
 8011eaa:	4418      	add	r0, r3
 8011eac:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8011eb0:	4298      	cmp	r0, r3
 8011eb2:	dcec      	bgt.n	8011e8e <scalbn+0x4e>
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	dd0a      	ble.n	8011ece <scalbn+0x8e>
 8011eb8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8011ebc:	ec53 2b10 	vmov	r2, r3, d0
 8011ec0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011ec4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011ec8:	ec43 2b10 	vmov	d0, r2, r3
 8011ecc:	4770      	bx	lr
 8011ece:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8011ed2:	da09      	bge.n	8011ee8 <scalbn+0xa8>
 8011ed4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8011f10 <scalbn+0xd0>
 8011ed8:	ee10 3a90 	vmov	r3, s1
 8011edc:	eeb0 6b47 	vmov.f64	d6, d7
 8011ee0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8011f28 <scalbn+0xe8>
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	e7db      	b.n	8011ea0 <scalbn+0x60>
 8011ee8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8011eec:	ec53 2b10 	vmov	r2, r3, d0
 8011ef0:	3036      	adds	r0, #54	@ 0x36
 8011ef2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011ef6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011efa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011f30 <scalbn+0xf0>
 8011efe:	ec43 2b10 	vmov	d0, r2, r3
 8011f02:	e7b1      	b.n	8011e68 <scalbn+0x28>
 8011f04:	f3af 8000 	nop.w
 8011f08:	00000000 	.word	0x00000000
 8011f0c:	43500000 	.word	0x43500000
 8011f10:	c2f8f359 	.word	0xc2f8f359
 8011f14:	01a56e1f 	.word	0x01a56e1f
 8011f18:	8800759c 	.word	0x8800759c
 8011f1c:	7e37e43c 	.word	0x7e37e43c
 8011f20:	8800759c 	.word	0x8800759c
 8011f24:	fe37e43c 	.word	0xfe37e43c
 8011f28:	c2f8f359 	.word	0xc2f8f359
 8011f2c:	81a56e1f 	.word	0x81a56e1f
 8011f30:	00000000 	.word	0x00000000
 8011f34:	3c900000 	.word	0x3c900000
 8011f38:	ffff3cb0 	.word	0xffff3cb0

08011f3c <__ieee754_sqrt>:
 8011f3c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011f40:	4770      	bx	lr
	...

08011f44 <_init>:
 8011f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f46:	bf00      	nop
 8011f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f4a:	bc08      	pop	{r3}
 8011f4c:	469e      	mov	lr, r3
 8011f4e:	4770      	bx	lr

08011f50 <_fini>:
 8011f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f52:	bf00      	nop
 8011f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f56:	bc08      	pop	{r3}
 8011f58:	469e      	mov	lr, r3
 8011f5a:	4770      	bx	lr
