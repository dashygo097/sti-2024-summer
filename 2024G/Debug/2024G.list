
2024G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bb4  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002498  08011e50  08011e50  00012e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080142e8  080142e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080142f0  080142f0  000152f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080142f8  080142f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000164  24000000  080142fc  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00000800  24000180  08014460  00016180  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ARM.__at_0x30080000 00002000  24000980  08014c60  00016980  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b214  24002980  08016c60  00018980  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  2401db94  08016c60  00018b94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00018980  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fa3  00000000  00000000  000189ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425a  00000000  00000000  0003c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00040bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149f  00000000  00000000  00042610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c353  00000000  00000000  00043aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025746  00000000  00000000  0007fe02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179b96  00000000  00000000  000a5548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021f0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a7c  00000000  00000000  0021f124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00226ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24002980 	.word	0x24002980
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011e34 	.word	0x08011e34

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24002984 	.word	0x24002984
 80002d4:	08011e34 	.word	0x08011e34

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 bac6 	b.w	800087c <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f962 	bl	80005c0 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__muldc3>:
 8000308:	ee20 5b02 	vmul.f64	d5, d0, d2
 800030c:	ee21 4b03 	vmul.f64	d4, d1, d3
 8000310:	ee35 7b44 	vsub.f64	d7, d5, d4
 8000314:	eeb4 7b47 	vcmp.f64	d7, d7
 8000318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031c:	ed2d 8b0a 	vpush	{d8-d12}
 8000320:	ee20 9b03 	vmul.f64	d9, d0, d3
 8000324:	ee22 8b01 	vmul.f64	d8, d2, d1
 8000328:	ee39 6b08 	vadd.f64	d6, d9, d8
 800032c:	d606      	bvs.n	800033c <__muldc3+0x34>
 800032e:	eeb0 0b47 	vmov.f64	d0, d7
 8000332:	eeb0 1b46 	vmov.f64	d1, d6
 8000336:	ecbd 8b0a 	vpop	{d8-d12}
 800033a:	4770      	bx	lr
 800033c:	eeb4 6b46 	vcmp.f64	d6, d6
 8000340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000344:	d7f3      	bvc.n	800032e <__muldc3+0x26>
 8000346:	eeb0 bbc0 	vabs.f64	d11, d0
 800034a:	eeb0 cbc1 	vabs.f64	d12, d1
 800034e:	ed9f ab94 	vldr	d10, [pc, #592]	@ 80005a0 <__muldc3+0x298>
 8000352:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800035a:	f300 809d 	bgt.w	8000498 <__muldc3+0x190>
 800035e:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000366:	f300 8097 	bgt.w	8000498 <__muldc3+0x190>
 800036a:	2300      	movs	r3, #0
 800036c:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 80005a0 <__muldc3+0x298>
 8000370:	eeb0 bbc2 	vabs.f64	d11, d2
 8000374:	eeb0 cbc3 	vabs.f64	d12, d3
 8000378:	eeb4 bb4a 	vcmp.f64	d11, d10
 800037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000380:	dc48      	bgt.n	8000414 <__muldc3+0x10c>
 8000382:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800038a:	dc43      	bgt.n	8000414 <__muldc3+0x10c>
 800038c:	bb9b      	cbnz	r3, 80003f6 <__muldc3+0xee>
 800038e:	eeb0 5bc5 	vabs.f64	d5, d5
 8000392:	eeb4 5b4a 	vcmp.f64	d5, d10
 8000396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800039a:	dc14      	bgt.n	80003c6 <__muldc3+0xbe>
 800039c:	eeb0 4bc4 	vabs.f64	d4, d4
 80003a0:	eeb4 4b4a 	vcmp.f64	d4, d10
 80003a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a8:	dc0d      	bgt.n	80003c6 <__muldc3+0xbe>
 80003aa:	eeb0 9bc9 	vabs.f64	d9, d9
 80003ae:	eeb4 9b4a 	vcmp.f64	d9, d10
 80003b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b6:	dc06      	bgt.n	80003c6 <__muldc3+0xbe>
 80003b8:	eeb0 8bc8 	vabs.f64	d8, d8
 80003bc:	eeb4 8b4a 	vcmp.f64	d8, d10
 80003c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c4:	ddb3      	ble.n	800032e <__muldc3+0x26>
 80003c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80003ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ce:	f180 80dc 	bvs.w	800058a <__muldc3+0x282>
 80003d2:	eeb4 1b41 	vcmp.f64	d1, d1
 80003d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003da:	f180 80cc 	bvs.w	8000576 <__muldc3+0x26e>
 80003de:	eeb4 2b42 	vcmp.f64	d2, d2
 80003e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003e6:	f180 80bc 	bvs.w	8000562 <__muldc3+0x25a>
 80003ea:	eeb4 3b43 	vcmp.f64	d3, d3
 80003ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003f2:	f180 80ac 	bvs.w	800054e <__muldc3+0x246>
 80003f6:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80003fa:	ee21 1b02 	vmul.f64	d1, d1, d2
 80003fe:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 80005a8 <__muldc3+0x2a0>
 8000402:	eea0 7b02 	vfma.f64	d7, d0, d2
 8000406:	eea0 1b03 	vfma.f64	d1, d0, d3
 800040a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800040e:	ee21 6b06 	vmul.f64	d6, d1, d6
 8000412:	e78c      	b.n	800032e <__muldc3+0x26>
 8000414:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 80005a0 <__muldc3+0x298>
 8000418:	eeb4 bb47 	vcmp.f64	d11, d7
 800041c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000420:	bfcc      	ite	gt
 8000422:	2301      	movgt	r3, #1
 8000424:	2300      	movle	r3, #0
 8000426:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 80005a0 <__muldc3+0x298>
 800042a:	ee07 3a10 	vmov	s14, r3
 800042e:	eeb4 cb46 	vcmp.f64	d12, d6
 8000432:	ee12 3a90 	vmov	r3, s5
 8000436:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800043a:	2b00      	cmp	r3, #0
 800043c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000440:	bfb8      	it	lt
 8000442:	eeb1 7b47 	vneglt.f64	d7, d7
 8000446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800044a:	bfcc      	ite	gt
 800044c:	2301      	movgt	r3, #1
 800044e:	2300      	movle	r3, #0
 8000450:	eeb0 2b47 	vmov.f64	d2, d7
 8000454:	ee07 3a10 	vmov	s14, r3
 8000458:	eeb4 0b40 	vcmp.f64	d0, d0
 800045c:	ee13 3a90 	vmov	r3, s7
 8000460:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8000464:	2b00      	cmp	r3, #0
 8000466:	eeb0 7bc7 	vabs.f64	d7, d7
 800046a:	bfb8      	it	lt
 800046c:	eeb1 7b47 	vneglt.f64	d7, d7
 8000470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000474:	eeb0 3b47 	vmov.f64	d3, d7
 8000478:	d655      	bvs.n	8000526 <__muldc3+0x21e>
 800047a:	eeb4 1b41 	vcmp.f64	d1, d1
 800047e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000482:	d7b8      	bvc.n	80003f6 <__muldc3+0xee>
 8000484:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 80005b0 <__muldc3+0x2a8>
 8000488:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 80005b8 <__muldc3+0x2b0>
 800048c:	ee11 3a90 	vmov	r3, s3
 8000490:	2b00      	cmp	r3, #0
 8000492:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000496:	e7ae      	b.n	80003f6 <__muldc3+0xee>
 8000498:	ed9f ab41 	vldr	d10, [pc, #260]	@ 80005a0 <__muldc3+0x298>
 800049c:	eeb4 bb4a 	vcmp.f64	d11, d10
 80004a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a4:	bfcc      	ite	gt
 80004a6:	2301      	movgt	r3, #1
 80004a8:	2300      	movle	r3, #0
 80004aa:	ee0a 3a10 	vmov	s20, r3
 80004ae:	ee10 3a90 	vmov	r3, s1
 80004b2:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	eeb0 abca 	vabs.f64	d10, d10
 80004bc:	bfb8      	it	lt
 80004be:	eeb1 ab4a 	vneglt.f64	d10, d10
 80004c2:	eeb0 0b4a 	vmov.f64	d0, d10
 80004c6:	ed9f ab36 	vldr	d10, [pc, #216]	@ 80005a0 <__muldc3+0x298>
 80004ca:	eeb4 cb4a 	vcmp.f64	d12, d10
 80004ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d2:	bfcc      	ite	gt
 80004d4:	2301      	movgt	r3, #1
 80004d6:	2300      	movle	r3, #0
 80004d8:	ee0a 3a10 	vmov	s20, r3
 80004dc:	eeb4 2b42 	vcmp.f64	d2, d2
 80004e0:	ee11 3a90 	vmov	r3, s3
 80004e4:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	eeb0 abca 	vabs.f64	d10, d10
 80004ee:	bfb8      	it	lt
 80004f0:	eeb1 ab4a 	vneglt.f64	d10, d10
 80004f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004f8:	eeb0 1b4a 	vmov.f64	d1, d10
 80004fc:	d61d      	bvs.n	800053a <__muldc3+0x232>
 80004fe:	eeb4 3b43 	vcmp.f64	d3, d3
 8000502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000506:	bf78      	it	vc
 8000508:	2301      	movvc	r3, #1
 800050a:	f5ff af2f 	bvc.w	800036c <__muldc3+0x64>
 800050e:	ee13 3a90 	vmov	r3, s7
 8000512:	ed9f ab29 	vldr	d10, [pc, #164]	@ 80005b8 <__muldc3+0x2b0>
 8000516:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 80005b0 <__muldc3+0x2a8>
 800051a:	2b00      	cmp	r3, #0
 800051c:	f04f 0301 	mov.w	r3, #1
 8000520:	fe23 3b0a 	vselge.f64	d3, d3, d10
 8000524:	e722      	b.n	800036c <__muldc3+0x64>
 8000526:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 80005b0 <__muldc3+0x2a8>
 800052a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80005b8 <__muldc3+0x2b0>
 800052e:	ee10 3a90 	vmov	r3, s1
 8000532:	2b00      	cmp	r3, #0
 8000534:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000538:	e79f      	b.n	800047a <__muldc3+0x172>
 800053a:	ee12 3a90 	vmov	r3, s5
 800053e:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 80005b8 <__muldc3+0x2b0>
 8000542:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 80005b0 <__muldc3+0x2a8>
 8000546:	2b00      	cmp	r3, #0
 8000548:	fe22 2b0a 	vselge.f64	d2, d2, d10
 800054c:	e7d7      	b.n	80004fe <__muldc3+0x1f6>
 800054e:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 80005b0 <__muldc3+0x2a8>
 8000552:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80005b8 <__muldc3+0x2b0>
 8000556:	ee13 3a90 	vmov	r3, s7
 800055a:	2b00      	cmp	r3, #0
 800055c:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000560:	e749      	b.n	80003f6 <__muldc3+0xee>
 8000562:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80005b0 <__muldc3+0x2a8>
 8000566:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 80005b8 <__muldc3+0x2b0>
 800056a:	ee12 3a90 	vmov	r3, s5
 800056e:	2b00      	cmp	r3, #0
 8000570:	fe26 2b07 	vselge.f64	d2, d6, d7
 8000574:	e739      	b.n	80003ea <__muldc3+0xe2>
 8000576:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80005b0 <__muldc3+0x2a8>
 800057a:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80005b8 <__muldc3+0x2b0>
 800057e:	ee11 3a90 	vmov	r3, s3
 8000582:	2b00      	cmp	r3, #0
 8000584:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000588:	e729      	b.n	80003de <__muldc3+0xd6>
 800058a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80005b0 <__muldc3+0x2a8>
 800058e:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80005b8 <__muldc3+0x2b0>
 8000592:	ee10 3a90 	vmov	r3, s1
 8000596:	2b00      	cmp	r3, #0
 8000598:	fe26 0b07 	vselge.f64	d0, d6, d7
 800059c:	e719      	b.n	80003d2 <__muldc3+0xca>
 800059e:	bf00      	nop
 80005a0:	ffffffff 	.word	0xffffffff
 80005a4:	7fefffff 	.word	0x7fefffff
 80005a8:	00000000 	.word	0x00000000
 80005ac:	7ff00000 	.word	0x7ff00000
	...
 80005bc:	80000000 	.word	0x80000000

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	460c      	mov	r4, r1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d14e      	bne.n	800066a <__udivmoddi4+0xaa>
 80005cc:	4694      	mov	ip, r2
 80005ce:	458c      	cmp	ip, r1
 80005d0:	4686      	mov	lr, r0
 80005d2:	fab2 f282 	clz	r2, r2
 80005d6:	d962      	bls.n	800069e <__udivmoddi4+0xde>
 80005d8:	b14a      	cbz	r2, 80005ee <__udivmoddi4+0x2e>
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	4091      	lsls	r1, r2
 80005e0:	fa20 f303 	lsr.w	r3, r0, r3
 80005e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e8:	4319      	orrs	r1, r3
 80005ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80005ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f2:	fa1f f68c 	uxth.w	r6, ip
 80005f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80005fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000602:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000606:	fb04 f106 	mul.w	r1, r4, r6
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000616:	f080 8112 	bcs.w	800083e <__udivmoddi4+0x27e>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 810f 	bls.w	800083e <__udivmoddi4+0x27e>
 8000620:	3c02      	subs	r4, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a59      	subs	r1, r3, r1
 8000626:	fa1f f38e 	uxth.w	r3, lr
 800062a:	fbb1 f0f7 	udiv	r0, r1, r7
 800062e:	fb07 1110 	mls	r1, r7, r0, r1
 8000632:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000636:	fb00 f606 	mul.w	r6, r0, r6
 800063a:	429e      	cmp	r6, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x94>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000646:	f080 80fc 	bcs.w	8000842 <__udivmoddi4+0x282>
 800064a:	429e      	cmp	r6, r3
 800064c:	f240 80f9 	bls.w	8000842 <__udivmoddi4+0x282>
 8000650:	4463      	add	r3, ip
 8000652:	3802      	subs	r0, #2
 8000654:	1b9b      	subs	r3, r3, r6
 8000656:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800065a:	2100      	movs	r1, #0
 800065c:	b11d      	cbz	r5, 8000666 <__udivmoddi4+0xa6>
 800065e:	40d3      	lsrs	r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	e9c5 3200 	strd	r3, r2, [r5]
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d905      	bls.n	800067a <__udivmoddi4+0xba>
 800066e:	b10d      	cbz	r5, 8000674 <__udivmoddi4+0xb4>
 8000670:	e9c5 0100 	strd	r0, r1, [r5]
 8000674:	2100      	movs	r1, #0
 8000676:	4608      	mov	r0, r1
 8000678:	e7f5      	b.n	8000666 <__udivmoddi4+0xa6>
 800067a:	fab3 f183 	clz	r1, r3
 800067e:	2900      	cmp	r1, #0
 8000680:	d146      	bne.n	8000710 <__udivmoddi4+0x150>
 8000682:	42a3      	cmp	r3, r4
 8000684:	d302      	bcc.n	800068c <__udivmoddi4+0xcc>
 8000686:	4290      	cmp	r0, r2
 8000688:	f0c0 80f0 	bcc.w	800086c <__udivmoddi4+0x2ac>
 800068c:	1a86      	subs	r6, r0, r2
 800068e:	eb64 0303 	sbc.w	r3, r4, r3
 8000692:	2001      	movs	r0, #1
 8000694:	2d00      	cmp	r5, #0
 8000696:	d0e6      	beq.n	8000666 <__udivmoddi4+0xa6>
 8000698:	e9c5 6300 	strd	r6, r3, [r5]
 800069c:	e7e3      	b.n	8000666 <__udivmoddi4+0xa6>
 800069e:	2a00      	cmp	r2, #0
 80006a0:	f040 8090 	bne.w	80007c4 <__udivmoddi4+0x204>
 80006a4:	eba1 040c 	sub.w	r4, r1, ip
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	fa1f f78c 	uxth.w	r7, ip
 80006b0:	2101      	movs	r1, #1
 80006b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006ba:	fb08 4416 	mls	r4, r8, r6, r4
 80006be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006c2:	fb07 f006 	mul.w	r0, r7, r6
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d908      	bls.n	80006dc <__udivmoddi4+0x11c>
 80006ca:	eb1c 0303 	adds.w	r3, ip, r3
 80006ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80006d2:	d202      	bcs.n	80006da <__udivmoddi4+0x11a>
 80006d4:	4298      	cmp	r0, r3
 80006d6:	f200 80cd 	bhi.w	8000874 <__udivmoddi4+0x2b4>
 80006da:	4626      	mov	r6, r4
 80006dc:	1a1c      	subs	r4, r3, r0
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80006e6:	fb08 4410 	mls	r4, r8, r0, r4
 80006ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006ee:	fb00 f707 	mul.w	r7, r0, r7
 80006f2:	429f      	cmp	r7, r3
 80006f4:	d908      	bls.n	8000708 <__udivmoddi4+0x148>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80006fe:	d202      	bcs.n	8000706 <__udivmoddi4+0x146>
 8000700:	429f      	cmp	r7, r3
 8000702:	f200 80b0 	bhi.w	8000866 <__udivmoddi4+0x2a6>
 8000706:	4620      	mov	r0, r4
 8000708:	1bdb      	subs	r3, r3, r7
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	e7a5      	b.n	800065c <__udivmoddi4+0x9c>
 8000710:	f1c1 0620 	rsb	r6, r1, #32
 8000714:	408b      	lsls	r3, r1
 8000716:	fa22 f706 	lsr.w	r7, r2, r6
 800071a:	431f      	orrs	r7, r3
 800071c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000720:	fa04 f301 	lsl.w	r3, r4, r1
 8000724:	ea43 030c 	orr.w	r3, r3, ip
 8000728:	40f4      	lsrs	r4, r6
 800072a:	fa00 f801 	lsl.w	r8, r0, r1
 800072e:	0c38      	lsrs	r0, r7, #16
 8000730:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000734:	fbb4 fef0 	udiv	lr, r4, r0
 8000738:	fa1f fc87 	uxth.w	ip, r7
 800073c:	fb00 441e 	mls	r4, r0, lr, r4
 8000740:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000744:	fb0e f90c 	mul.w	r9, lr, ip
 8000748:	45a1      	cmp	r9, r4
 800074a:	fa02 f201 	lsl.w	r2, r2, r1
 800074e:	d90a      	bls.n	8000766 <__udivmoddi4+0x1a6>
 8000750:	193c      	adds	r4, r7, r4
 8000752:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000756:	f080 8084 	bcs.w	8000862 <__udivmoddi4+0x2a2>
 800075a:	45a1      	cmp	r9, r4
 800075c:	f240 8081 	bls.w	8000862 <__udivmoddi4+0x2a2>
 8000760:	f1ae 0e02 	sub.w	lr, lr, #2
 8000764:	443c      	add	r4, r7
 8000766:	eba4 0409 	sub.w	r4, r4, r9
 800076a:	fa1f f983 	uxth.w	r9, r3
 800076e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000772:	fb00 4413 	mls	r4, r0, r3, r4
 8000776:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800077a:	fb03 fc0c 	mul.w	ip, r3, ip
 800077e:	45a4      	cmp	ip, r4
 8000780:	d907      	bls.n	8000792 <__udivmoddi4+0x1d2>
 8000782:	193c      	adds	r4, r7, r4
 8000784:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000788:	d267      	bcs.n	800085a <__udivmoddi4+0x29a>
 800078a:	45a4      	cmp	ip, r4
 800078c:	d965      	bls.n	800085a <__udivmoddi4+0x29a>
 800078e:	3b02      	subs	r3, #2
 8000790:	443c      	add	r4, r7
 8000792:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000796:	fba0 9302 	umull	r9, r3, r0, r2
 800079a:	eba4 040c 	sub.w	r4, r4, ip
 800079e:	429c      	cmp	r4, r3
 80007a0:	46ce      	mov	lr, r9
 80007a2:	469c      	mov	ip, r3
 80007a4:	d351      	bcc.n	800084a <__udivmoddi4+0x28a>
 80007a6:	d04e      	beq.n	8000846 <__udivmoddi4+0x286>
 80007a8:	b155      	cbz	r5, 80007c0 <__udivmoddi4+0x200>
 80007aa:	ebb8 030e 	subs.w	r3, r8, lr
 80007ae:	eb64 040c 	sbc.w	r4, r4, ip
 80007b2:	fa04 f606 	lsl.w	r6, r4, r6
 80007b6:	40cb      	lsrs	r3, r1
 80007b8:	431e      	orrs	r6, r3
 80007ba:	40cc      	lsrs	r4, r1
 80007bc:	e9c5 6400 	strd	r6, r4, [r5]
 80007c0:	2100      	movs	r1, #0
 80007c2:	e750      	b.n	8000666 <__udivmoddi4+0xa6>
 80007c4:	f1c2 0320 	rsb	r3, r2, #32
 80007c8:	fa20 f103 	lsr.w	r1, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	fa24 f303 	lsr.w	r3, r4, r3
 80007d4:	4094      	lsls	r4, r2
 80007d6:	430c      	orrs	r4, r1
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e0:	fa1f f78c 	uxth.w	r7, ip
 80007e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e8:	fb08 3110 	mls	r1, r8, r0, r3
 80007ec:	0c23      	lsrs	r3, r4, #16
 80007ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f2:	fb00 f107 	mul.w	r1, r0, r7
 80007f6:	4299      	cmp	r1, r3
 80007f8:	d908      	bls.n	800080c <__udivmoddi4+0x24c>
 80007fa:	eb1c 0303 	adds.w	r3, ip, r3
 80007fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000802:	d22c      	bcs.n	800085e <__udivmoddi4+0x29e>
 8000804:	4299      	cmp	r1, r3
 8000806:	d92a      	bls.n	800085e <__udivmoddi4+0x29e>
 8000808:	3802      	subs	r0, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f1f8 	udiv	r1, r3, r8
 8000814:	fb08 3311 	mls	r3, r8, r1, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb01 f307 	mul.w	r3, r1, r7
 8000820:	42a3      	cmp	r3, r4
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x276>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800082c:	d213      	bcs.n	8000856 <__udivmoddi4+0x296>
 800082e:	42a3      	cmp	r3, r4
 8000830:	d911      	bls.n	8000856 <__udivmoddi4+0x296>
 8000832:	3902      	subs	r1, #2
 8000834:	4464      	add	r4, ip
 8000836:	1ae4      	subs	r4, r4, r3
 8000838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800083c:	e739      	b.n	80006b2 <__udivmoddi4+0xf2>
 800083e:	4604      	mov	r4, r0
 8000840:	e6f0      	b.n	8000624 <__udivmoddi4+0x64>
 8000842:	4608      	mov	r0, r1
 8000844:	e706      	b.n	8000654 <__udivmoddi4+0x94>
 8000846:	45c8      	cmp	r8, r9
 8000848:	d2ae      	bcs.n	80007a8 <__udivmoddi4+0x1e8>
 800084a:	ebb9 0e02 	subs.w	lr, r9, r2
 800084e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000852:	3801      	subs	r0, #1
 8000854:	e7a8      	b.n	80007a8 <__udivmoddi4+0x1e8>
 8000856:	4631      	mov	r1, r6
 8000858:	e7ed      	b.n	8000836 <__udivmoddi4+0x276>
 800085a:	4603      	mov	r3, r0
 800085c:	e799      	b.n	8000792 <__udivmoddi4+0x1d2>
 800085e:	4630      	mov	r0, r6
 8000860:	e7d4      	b.n	800080c <__udivmoddi4+0x24c>
 8000862:	46d6      	mov	lr, sl
 8000864:	e77f      	b.n	8000766 <__udivmoddi4+0x1a6>
 8000866:	4463      	add	r3, ip
 8000868:	3802      	subs	r0, #2
 800086a:	e74d      	b.n	8000708 <__udivmoddi4+0x148>
 800086c:	4606      	mov	r6, r0
 800086e:	4623      	mov	r3, r4
 8000870:	4608      	mov	r0, r1
 8000872:	e70f      	b.n	8000694 <__udivmoddi4+0xd4>
 8000874:	3e02      	subs	r6, #2
 8000876:	4463      	add	r3, ip
 8000878:	e730      	b.n	80006dc <__udivmoddi4+0x11c>
 800087a:	bf00      	nop

0800087c <__aeabi_idiv0>:
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	ed2d 8b02 	vpush	{d8}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	ee07 3a90 	vmov	s15, r3
 8000894:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000898:	eeb0 0b47 	vmov.f64	d0, d7
 800089c:	f010 f854 	bl	8010948 <log>
 80008a0:	eeb0 6b40 	vmov.f64	d6, d0
 80008a4:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000960 <rev+0xe0>
 80008a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008ac:	eeb0 0b47 	vmov.f64	d0, d7
 80008b0:	f010 fbe2 	bl	8011078 <floor>
 80008b4:	eeb0 7b40 	vmov.f64	d7, d0
 80008b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008bc:	ee17 3a90 	vmov	r3, s15
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	da00      	bge.n	80008d2 <rev+0x52>
 80008d0:	3301      	adds	r3, #1
 80008d2:	105b      	asrs	r3, r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e036      	b.n	8000946 <rev+0xc6>
    {
        reg = index%2;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	bfb8      	it	lt
 80008e2:	425b      	neglt	r3, r3
 80008e4:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008fc:	eeb0 1b47 	vmov.f64	d1, d7
 8000900:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8000904:	f010 f948 	bl	8010b98 <pow>
 8000908:	eeb0 7b40 	vmov.f64	d7, d0
 800090c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	ee07 3a90 	vmov	s15, r3
 8000916:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800091a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800091e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000922:	ee17 3a90 	vmov	r3, s15
 8000926:	613b      	str	r3, [r7, #16]
        k--;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3b01      	subs	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
        index/= 2;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da00      	bge.n	8000936 <rev+0xb6>
 8000934:	3301      	adds	r3, #1
 8000936:	105b      	asrs	r3, r3, #1
 8000938:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	da00      	bge.n	8000942 <rev+0xc2>
 8000940:	3301      	adds	r3, #1
 8000942:	105b      	asrs	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	dcc5      	bgt.n	80008d8 <rev+0x58>
    }
    return ans;
 800094c:	693b      	ldr	r3, [r7, #16]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	ecbd 8b02 	vpop	{d8}
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	f3af 8000 	nop.w
 8000960:	fefa39ef 	.word	0xfefa39ef
 8000964:	3fe62e42 	.word	0x3fe62e42

08000968 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800096c:	ed2d 8b02 	vpush	{d8}
 8000970:	b0a9      	sub	sp, #164	@ 0xa4
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	466b      	mov	r3, sp
 800097a:	461e      	mov	r6, r3
    double complex W[size/2];
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	da00      	bge.n	8000984 <FFT+0x1c>
 8000982:	3301      	adds	r3, #1
 8000984:	105b      	asrs	r3, r3, #1
 8000986:	4619      	mov	r1, r3
 8000988:	1e4b      	subs	r3, r1, #1
 800098a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800098e:	460a      	mov	r2, r1
 8000990:	2300      	movs	r3, #0
 8000992:	603a      	str	r2, [r7, #0]
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	f04f 0200 	mov.w	r2, #0
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	01c3      	lsls	r3, r0, #7
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	01c2      	lsls	r2, r0, #7
 80009ac:	460a      	mov	r2, r1
 80009ae:	2300      	movs	r3, #0
 80009b0:	4692      	mov	sl, r2
 80009b2:	469b      	mov	fp, r3
 80009b4:	f04f 0200 	mov.w	r2, #0
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 80009c0:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 80009c4:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 80009c8:	460b      	mov	r3, r1
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	3307      	adds	r3, #7
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	ebad 0d03 	sub.w	sp, sp, r3
 80009d6:	466b      	mov	r3, sp
 80009d8:	3307      	adds	r3, #7
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80009e8:	e049      	b.n	8000a7e <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 80009ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009f6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000ba0 <FFT+0x238>
 80009fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	ee07 3a90 	vmov	s15, r3
 8000a04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a08:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000a0c:	eeb0 0b45 	vmov.f64	d0, d5
 8000a10:	f00f ff4e 	bl	80108b0 <sin>
 8000a14:	eeb0 8b40 	vmov.f64	d8, d0
 8000a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a24:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000ba0 <FFT+0x238>
 8000a28:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	ee07 3a90 	vmov	s15, r3
 8000a32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a36:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000a3a:	eeb0 0b45 	vmov.f64	d0, d5
 8000a3e:	f00f feeb 	bl	8010818 <cos>
 8000a42:	eeb0 6b40 	vmov.f64	d6, d0
 8000a46:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8000ba8 <FFT+0x240>
 8000a4a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000a4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a52:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a5a:	011b      	lsls	r3, r3, #4
 8000a5c:	4413      	add	r3, r2
 8000a5e:	ed83 7b00 	vstr	d7, [r3]
 8000a62:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000a66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3308      	adds	r3, #8
 8000a70:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	da00      	bge.n	8000a86 <FFT+0x11e>
 8000a84:	3301      	adds	r3, #1
 8000a86:	105b      	asrs	r3, r3, #1
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	dbab      	blt.n	80009ea <FFT+0x82>
    }

    double complex A[size +100];
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000a98:	1e4b      	subs	r3, r1, #1
 8000a9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000a9e:	460a      	mov	r2, r1
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000ab2:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000ab6:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000aba:	460a      	mov	r2, r1
 8000abc:	2300      	movs	r3, #0
 8000abe:	4614      	mov	r4, r2
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	01eb      	lsls	r3, r5, #7
 8000acc:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000ad0:	01e2      	lsls	r2, r4, #7
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ae0:	466b      	mov	r3, sp
 8000ae2:	3307      	adds	r3, #7
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X =A;
 8000aea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000aec:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000af4:	e027      	b.n	8000b46 <FFT+0x1de>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000af6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff fec0 	bl	8000880 <rev>
 8000b00:	4603      	mov	r3, r0
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	4413      	add	r3, r2
 8000b08:	ed93 7b00 	vldr	d7, [r3]
 8000b0c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000ba8 <FFT+0x240>
 8000b10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	4413      	add	r3, r2
 8000b1e:	ed83 7b00 	vstr	d7, [r3]
 8000b22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	4413      	add	r3, r2
 8000b2c:	f103 0108 	add.w	r1, r3, #8
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000b40:	3301      	adds	r3, #1
 8000b42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000b46:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbd2      	blt.n	8000af6 <FFT+0x18e>
    }
    
    int s , m , k , j;
    double complex omega , t , u;

    for(s = 1 ; s <size ; s*=2)
 8000b50:	2301      	movs	r3, #1
 8000b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b56:	e0f8      	b.n	8000d4a <FFT+0x3e2>
    {
        m = s*2;
 8000b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k < size ; k+=m)
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b66:	e0e5      	b.n	8000d34 <FFT+0x3cc>
        {
            omega = 1;
 8000b68:	f04f 0200 	mov.w	r2, #0
 8000b6c:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <FFT+0x248>)
 8000b6e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	f04f 0300 	mov.w	r3, #0
 8000b7a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2 ; j++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <FFT+0x248>)
 8000b96:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000b9a:	e0ba      	b.n	8000d12 <FFT+0x3aa>
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	54442d18 	.word	0x54442d18
 8000ba4:	401921fb 	.word	0x401921fb
	...
 8000bb0:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000bb4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000bbc:	441a      	add	r2, r3
 8000bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da00      	bge.n	8000bc6 <FFT+0x25e>
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	105b      	asrs	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000bcc:	011a      	lsls	r2, r3, #4
 8000bce:	440a      	add	r2, r1
 8000bd0:	ed92 7b00 	vldr	d7, [r2]
 8000bd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	4413      	add	r3, r2
 8000bda:	ed93 6b02 	vldr	d6, [r3, #8]
 8000bde:	eeb0 3b46 	vmov.f64	d3, d6
 8000be2:	eeb0 2b47 	vmov.f64	d2, d7
 8000be6:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000bea:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000bee:	f7ff fb8b 	bl	8000308 <__muldc3>
 8000bf2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000bf6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000bfa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000bfe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000c06:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000c0a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c12:	18d1      	adds	r1, r2, r3
 8000c14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c16:	010b      	lsls	r3, r1, #4
 8000c18:	4413      	add	r3, r2
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c24:	010b      	lsls	r3, r1, #4
 8000c26:	4413      	add	r3, r2
 8000c28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000c30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c38:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000c3c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000c40:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c48:	4413      	add	r3, r2
 8000c4a:	ed97 6b06 	vldr	d6, [r7, #24]
 8000c4e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000c52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c56:	ed97 5b04 	vldr	d5, [r7, #16]
 8000c5a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000c5e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000c62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c64:	011a      	lsls	r2, r3, #4
 8000c66:	440a      	add	r2, r1
 8000c68:	ed82 6b00 	vstr	d6, [r2]
 8000c6c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	4413      	add	r3, r2
 8000c72:	3308      	adds	r3, #8
 8000c74:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000c78:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c80:	441a      	add	r2, r3
 8000c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da00      	bge.n	8000c8a <FFT+0x322>
 8000c88:	3301      	adds	r3, #1
 8000c8a:	105b      	asrs	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000c92:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000c96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c9a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000c9e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000ca2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000ca6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000ca8:	011a      	lsls	r2, r3, #4
 8000caa:	440a      	add	r2, r1
 8000cac:	ed82 6b00 	vstr	d6, [r2]
 8000cb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000cc8:	011a      	lsls	r2, r3, #4
 8000cca:	440a      	add	r2, r1
 8000ccc:	ed92 7b00 	vldr	d7, [r2]
 8000cd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	ed93 6b02 	vldr	d6, [r3, #8]
 8000cdc:	eeb0 3b46 	vmov.f64	d3, d6
 8000ce0:	eeb0 2b47 	vmov.f64	d2, d7
 8000ce4:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ce8:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000cec:	f7ff fb0c 	bl	8000308 <__muldc3>
 8000cf0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000cf4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000cf8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000cfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000d00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000d04:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2 ; j++)
 8000d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da00      	bge.n	8000d1a <FFT+0x3b2>
 8000d18:	3301      	adds	r3, #1
 8000d1a:	105b      	asrs	r3, r3, #1
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d22:	4293      	cmp	r3, r2
 8000d24:	f6ff af46 	blt.w	8000bb4 <FFT+0x24c>
        for ( k = 0 ; k < size ; k+=m)
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d2e:	4413      	add	r3, r2
 8000d30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d34:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f6ff af14 	blt.w	8000b68 <FFT+0x200>
    for(s = 1 ; s <size ; s*=2)
 8000d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f6ff af01 	blt.w	8000b58 <FFT+0x1f0>
            } 
        }
    }
    return X;
 8000d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000d58:	46b5      	mov	sp, r6

}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	37a4      	adds	r7, #164	@ 0xa4
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	ecbd 8b02 	vpop	{d8}
 8000d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d68 <FFT_Mag>:

double * FFT_Mag(int size , double x[])
{
 8000d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d6c:	b08d      	sub	sp, #52	@ 0x34
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
 8000d74:	466b      	mov	r3, sp
 8000d76:	461e      	mov	r6, r3
    double A[size +100];
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000d7e:	1e4b      	subs	r3, r1, #1
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d82:	460a      	mov	r2, r1
 8000d84:	2300      	movs	r3, #0
 8000d86:	4690      	mov	r8, r2
 8000d88:	4699      	mov	r9, r3
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000d9e:	460a      	mov	r2, r1
 8000da0:	2300      	movs	r3, #0
 8000da2:	4614      	mov	r4, r2
 8000da4:	461d      	mov	r5, r3
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	01ab      	lsls	r3, r5, #6
 8000db0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000db4:	01a2      	lsls	r2, r4, #6
 8000db6:	460b      	mov	r3, r1
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	3307      	adds	r3, #7
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	ebad 0d03 	sub.w	sp, sp, r3
 8000dc4:	466b      	mov	r3, sp
 8000dc6:	3307      	adds	r3, #7
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    double cr , ci;
    double complex*X = FFT(size , x);
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fdc9 	bl	8000968 <FFT>
 8000dd6:	6238      	str	r0, [r7, #32]
    for (int i = 0 ; i < size ; i++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ddc:	e035      	b.n	8000e4a <FFT_Mag+0xe2>
    {
        cr = (creal(X[i]) * creal(X[i]));
 8000dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	6a3a      	ldr	r2, [r7, #32]
 8000de4:	4413      	add	r3, r2
 8000de6:	ed93 6b00 	vldr	d6, [r3]
 8000dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	6a3a      	ldr	r2, [r7, #32]
 8000df0:	4413      	add	r3, r2
 8000df2:	ed93 7b00 	vldr	d7, [r3]
 8000df6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000dfa:	ed87 7b04 	vstr	d7, [r7, #16]

        ci = (cimag(X[i]) * cimag(X[i]));
 8000dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	6a3a      	ldr	r2, [r7, #32]
 8000e04:	4413      	add	r3, r2
 8000e06:	ed93 6b02 	vldr	d6, [r3, #8]
 8000e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	6a3a      	ldr	r2, [r7, #32]
 8000e10:	4413      	add	r3, r2
 8000e12:	ed93 7b02 	vldr	d7, [r3, #8]
 8000e16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e1a:	ed87 7b02 	vstr	d7, [r7, #8]
        A[i] = (cr + ci) / size;
 8000e1e:	ed97 6b04 	vldr	d6, [r7, #16]
 8000e22:	ed97 7b02 	vldr	d7, [r7, #8]
 8000e26:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4413      	add	r3, r2
 8000e40:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0 ; i < size ; i++)
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	3301      	adds	r3, #1
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dbc5      	blt.n	8000dde <FFT_Mag+0x76>
    }
    double* a = A;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	61fb      	str	r3, [r7, #28]
    return a;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	46b5      	mov	sp, r6
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3734      	adds	r7, #52	@ 0x34
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e64 <FFT_Mag_sqrt>:


double * FFT_Mag_sqrt(int size , double x[])
{
 8000e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e68:	b089      	sub	sp, #36	@ 0x24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
 8000e70:	466b      	mov	r3, sp
 8000e72:	461e      	mov	r6, r3
    double A[size +100];
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000e7a:	1e4b      	subs	r3, r1, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	460a      	mov	r2, r1
 8000e80:	2300      	movs	r3, #0
 8000e82:	4690      	mov	r8, r2
 8000e84:	4699      	mov	r9, r3
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000e9a:	460a      	mov	r2, r1
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	4614      	mov	r4, r2
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	01ab      	lsls	r3, r5, #6
 8000eac:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000eb0:	01a2      	lsls	r2, r4, #6
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	3307      	adds	r3, #7
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	ebad 0d03 	sub.w	sp, sp, r3
 8000ec0:	466b      	mov	r3, sp
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]
    double complex*X = FFT(size , x);
 8000eca:	6839      	ldr	r1, [r7, #0]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fd4b 	bl	8000968 <FFT>
 8000ed2:	6138      	str	r0, [r7, #16]
    for (int i = 0 ; i < size ; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	e01c      	b.n	8000f14 <FFT_Mag_sqrt+0xb0>
    {
        A[i] = cabs(X[i]) ;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000eea:	ec41 0b16 	vmov	d6, r0, r1
 8000eee:	ec43 2b17 	vmov	d7, r2, r3
 8000ef2:	eeb0 0b46 	vmov.f64	d0, d6
 8000ef6:	eeb0 1b47 	vmov.f64	d1, d7
 8000efa:	f010 f89d 	bl	8011038 <cabs>
 8000efe:	eeb0 7b40 	vmov.f64	d7, d0
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0 ; i < size ; i++)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbde      	blt.n	8000eda <FFT_Mag_sqrt+0x76>
    }
    double* a = A;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	60fb      	str	r3, [r7, #12]
    return a;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	46b5      	mov	sp, r6
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3724      	adds	r7, #36	@ 0x24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f30 <Blackman>:

    return p;
}

double* Blackman(int size , int left , int right , double x[])
{
 8000f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f34:	ed2d 8b04 	vpush	{d8-d9}
 8000f38:	b089      	sub	sp, #36	@ 0x24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	466b      	mov	r3, sp
 8000f46:	461e      	mov	r6, r3
    double A[size  +100];
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000f4e:	1e4b      	subs	r3, r1, #1
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	460a      	mov	r2, r1
 8000f54:	2300      	movs	r3, #0
 8000f56:	4690      	mov	r8, r2
 8000f58:	4699      	mov	r9, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000f66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000f6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000f6e:	460a      	mov	r2, r1
 8000f70:	2300      	movs	r3, #0
 8000f72:	4614      	mov	r4, r2
 8000f74:	461d      	mov	r5, r3
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	01ab      	lsls	r3, r5, #6
 8000f80:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000f84:	01a2      	lsls	r2, r4, #6
 8000f86:	460b      	mov	r3, r1
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	08db      	lsrs	r3, r3, #3
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	ebad 0d03 	sub.w	sp, sp, r3
 8000f94:	466b      	mov	r3, sp
 8000f96:	3307      	adds	r3, #7
 8000f98:	08db      	lsrs	r3, r3, #3
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	617b      	str	r3, [r7, #20]
    double *a = A ;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	613b      	str	r3, [r7, #16]

    for (int i = 0 ; i < size ; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e06b      	b.n	8001080 <Blackman+0x150>
    {
    	if (i < right && i >=  left)
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	da5a      	bge.n	8001066 <Blackman+0x136>
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	db56      	blt.n	8001066 <Blackman+0x136>
    	{
    		A[i] = 10* x[i] * ( 0.42 + 0.08* cos(4*M_PI*(i - left )/(right - left - 1)) - 0.5*cos(2*M_PI*(i - left )/(right - left - 1)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	ed93 7b00 	vldr	d7, [r3]
 8000fc4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000fc8:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fda:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80010a0 <Blackman+0x170>
 8000fde:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ff6:	eeb0 0b45 	vmov.f64	d0, d5
 8000ffa:	f00f fc0d 	bl	8010818 <cos>
 8000ffe:	eeb0 7b40 	vmov.f64	d7, d0
 8001002:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80010a8 <Blackman+0x178>
 8001006:	ee27 7b06 	vmul.f64	d7, d7, d6
 800100a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 80010b0 <Blackman+0x180>
 800100e:	ee37 9b06 	vadd.f64	d9, d7, d6
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001020:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80010b8 <Blackman+0x188>
 8001024:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001038:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800103c:	eeb0 0b45 	vmov.f64	d0, d5
 8001040:	f00f fbea 	bl	8010818 <cos>
 8001044:	eeb0 7b40 	vmov.f64	d7, d0
 8001048:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800104c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001050:	ee39 7b47 	vsub.f64	d7, d9, d7
 8001054:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4413      	add	r3, r2
 8001060:	ed83 7b00 	vstr	d7, [r3]
 8001064:	e009      	b.n	800107a <Blackman+0x14a>
    	}
    	else
    	{
    		A[i] = 0;
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	18d1      	adds	r1, r2, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	db8f      	blt.n	8000fa8 <Blackman+0x78>
    	}
    }
    return a;
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	46b5      	mov	sp, r6
}
 800108c:	4618      	mov	r0, r3
 800108e:	3724      	adds	r7, #36	@ 0x24
 8001090:	46bd      	mov	sp, r7
 8001092:	ecbd 8b04 	vpop	{d8-d9}
 8001096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800109a:	bf00      	nop
 800109c:	f3af 8000 	nop.w
 80010a0:	54442d18 	.word	0x54442d18
 80010a4:	402921fb 	.word	0x402921fb
 80010a8:	47ae147b 	.word	0x47ae147b
 80010ac:	3fb47ae1 	.word	0x3fb47ae1
 80010b0:	ae147ae1 	.word	0xae147ae1
 80010b4:	3fdae147 	.word	0x3fdae147
 80010b8:	54442d18 	.word	0x54442d18
 80010bc:	401921fb 	.word	0x401921fb

080010c0 <sgn>:
#include "FO.h"

char str[50];

double sgn(double x)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	ed87 0b00 	vstr	d0, [r7]
	return (x > 0)?(1) : -1;
 80010ca:	ed97 7b00 	vldr	d7, [r7]
 80010ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	dd03      	ble.n	80010e0 <sgn+0x20>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <sgn+0x38>)
 80010de:	e002      	b.n	80010e6 <sgn+0x26>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <sgn+0x3c>)
 80010e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80010ea:	eeb0 0b47 	vmov.f64	d0, d7
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	3ff00000 	.word	0x3ff00000
 80010fc:	bff00000 	.word	0xbff00000

08001100 <OverZero_Ave_Get>:

double OverZero_Ave_Get(int size , double x[])
{
 8001100:	b580      	push	{r7, lr}
 8001102:	ed2d 8b02 	vpush	{d8}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    double Z = 0;
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int i = 1 ; i < size ; i++)
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e027      	b.n	8001170 <OverZero_Ave_Get+0x70>
    {
        Z += fabs(sgn(x[i - 1]) - sgn(x[i]));
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001126:	4413      	add	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	4413      	add	r3, r2
 800112e:	ed93 7b00 	vldr	d7, [r3]
 8001132:	eeb0 0b47 	vmov.f64	d0, d7
 8001136:	f7ff ffc3 	bl	80010c0 <sgn>
 800113a:	eeb0 8b40 	vmov.f64	d8, d0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	ed93 7b00 	vldr	d7, [r3]
 800114a:	eeb0 0b47 	vmov.f64	d0, d7
 800114e:	f7ff ffb7 	bl	80010c0 <sgn>
 8001152:	eeb0 7b40 	vmov.f64	d7, d0
 8001156:	ee38 7b47 	vsub.f64	d7, d8, d7
 800115a:	eeb0 7bc7 	vabs.f64	d7, d7
 800115e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001162:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001166:	ed87 7b04 	vstr	d7, [r7, #16]
    for (int i = 1 ; i < size ; i++)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbd3      	blt.n	8001120 <OverZero_Ave_Get+0x20>
    }
    return Z / 2 / size;
 8001178:	ed97 7b04 	vldr	d7, [r7, #16]
 800117c:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001180:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001192:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001196:	eeb0 0b47 	vmov.f64	d0, d7
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	ecbd 8b02 	vpop	{d8}
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <FrameNumber_Get>:

    return E;
}

int FrameNumber_Get(int Fsize , int length , int motion )
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
    return (Fsize - length + motion ) /motion;
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad2      	subs	r2, r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <MaxOZ_Get>:

double MaxOZ_Get(int size , double x[])
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    double *X = x;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
    int num = FrameNumber_Get(size ,frame_length , frame_motion);
 80011da:	2220      	movs	r2, #32
 80011dc:	2180      	movs	r1, #128	@ 0x80
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffe0 	bl	80011a4 <FrameNumber_Get>
 80011e4:	6178      	str	r0, [r7, #20]
    double max = -1;
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <MaxOZ_Get+0x78>)
 80011ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (int i = 0 ; i < num ; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	e019      	b.n	800122a <MaxOZ_Get+0x5e>
    {
        double Z  = OverZero_Ave_Get(frame_length , X + i* frame_motion);
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4413      	add	r3, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	2080      	movs	r0, #128	@ 0x80
 8001202:	f7ff ff7d 	bl	8001100 <OverZero_Ave_Get>
 8001206:	ed87 0b02 	vstr	d0, [r7, #8]
        if (max < Z)
 800120a:	ed97 6b08 	vldr	d6, [r7, #32]
 800120e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001212:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121a:	d503      	bpl.n	8001224 <MaxOZ_Get+0x58>
        {
            max = Z;
 800121c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001220:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (int i = 0 ; i < num ; i++)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3301      	adds	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbe1      	blt.n	80011f6 <MaxOZ_Get+0x2a>
        }
    }

    return max;
 8001232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001236:	ec43 2b17 	vmov	d7, r2, r3
}
 800123a:	eeb0 0b47 	vmov.f64	d0, d7
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	bff00000 	.word	0xbff00000

08001248 <OverOZ_Num_Get>:

int OverOZ_Num_Get(double para , int size , double x[])
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0
 800124e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    double* X = x;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    int count =  0;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int num = FrameNumber_Get(size ,frame_length , frame_motion);
 800125e:	2220      	movs	r2, #32
 8001260:	2180      	movs	r1, #128	@ 0x80
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff9e 	bl	80011a4 <FrameNumber_Get>
 8001268:	6238      	str	r0, [r7, #32]

    double Z_max = MaxOZ_Get(size , x);
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffad 	bl	80011cc <MaxOZ_Get>
 8001272:	ed87 0b06 	vstr	d0, [r7, #24]

    for (int i= 0 ; i  < num ; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800127a:	e01c      	b.n	80012b6 <OverOZ_Num_Get+0x6e>
    {
        double Z = OverZero_Ave_Get(frame_length,X + frame_motion*i);
 800127c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001282:	4413      	add	r3, r2
 8001284:	4619      	mov	r1, r3
 8001286:	2080      	movs	r0, #128	@ 0x80
 8001288:	f7ff ff3a 	bl	8001100 <OverZero_Ave_Get>
 800128c:	ed87 0b04 	vstr	d0, [r7, #16]
        if (Z > Z_max * para)
 8001290:	ed97 6b06 	vldr	d6, [r7, #24]
 8001294:	ed97 7b02 	vldr	d7, [r7, #8]
 8001298:	ee26 7b07 	vmul.f64	d7, d6, d7
 800129c:	ed97 6b04 	vldr	d6, [r7, #16]
 80012a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	dd02      	ble.n	80012b0 <OverOZ_Num_Get+0x68>
        {
            count ++;
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	3301      	adds	r3, #1
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i= 0 ; i  < num ; i++)
 80012b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b2:	3301      	adds	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dbde      	blt.n	800127c <OverOZ_Num_Get+0x34>
//        sprintf(str , "%.5lf" , Z);
//        		  	    		  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//        		  	    		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
    }

    return count ;
 80012be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3730      	adds	r7, #48	@ 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ec:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 80012ee:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <MX_ADC1_Init+0xec>)
 80012f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80012f8:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012fe:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001306:	2204      	movs	r2, #4
 8001308:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800130c:	2200      	movs	r2, #0
 800130e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001310:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001316:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001318:	2201      	movs	r2, #1
 800131a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131c:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001324:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800132a:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800132c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001334:	2203      	movs	r2, #3
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134c:	4818      	ldr	r0, [pc, #96]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800134e:	f002 f9e5 	bl	800371c <HAL_ADC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001358:	f001 faa0 	bl	800289c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 8001368:	f003 fd26 	bl	8004db8 <HAL_ADCEx_MultiModeConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001372:	f001 fa93 	bl	800289c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_ADC1_Init+0xf0>)
 8001378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137a:	2306      	movs	r3, #6
 800137c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800137e:	2302      	movs	r3, #2
 8001380:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001382:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001386:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001388:	2304      	movs	r3, #4
 800138a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_ADC1_Init+0xe8>)
 800139a:	f002 fdb9 	bl	8003f10 <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80013a4:	f001 fa7a 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2400299c 	.word	0x2400299c
 80013b4:	40022000 	.word	0x40022000
 80013b8:	0c900008 	.word	0x0c900008

080013bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0ba      	sub	sp, #232	@ 0xe8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	22c0      	movs	r2, #192	@ 0xc0
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00f f983 	bl	80106e8 <memset>
  if(adcHandle->Instance==ADC1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a43      	ldr	r2, [pc, #268]	@ (80014f4 <HAL_ADC_MspInit+0x138>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d17f      	bne.n	80014ec <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80013f8:	2319      	movs	r3, #25
 80013fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 80013fc:	23c8      	movs	r3, #200	@ 0xc8
 80013fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001404:	2302      	movs	r3, #2
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001408:	2302      	movs	r3, #2
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001410:	2300      	movs	r3, #0
 8001412:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4618      	mov	r0, r3
 8001424:	f008 fca2 	bl	8009d6c <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800142e:	f001 fa35 	bl	800289c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001438:	4a2f      	ldr	r2, [pc, #188]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 800143a:	f043 0320 	orr.w	r3, r3, #32
 800143e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001456:	4a28      	ldr	r2, [pc, #160]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001460:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_ADC_MspInit+0x13c>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800146e:	2340      	movs	r3, #64	@ 0x40
 8001470:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001484:	4619      	mov	r1, r3
 8001486:	481d      	ldr	r0, [pc, #116]	@ (80014fc <HAL_ADC_MspInit+0x140>)
 8001488:	f007 f852 	bl	8008530 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800148c:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 800148e:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <HAL_ADC_MspInit+0x148>)
 8001490:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 8001494:	2209      	movs	r2, #9
 8001496:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014d2:	f004 f83b 	bl	800554c <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 80014dc:	f001 f9de 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014e4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014e6:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <HAL_ADC_MspInit+0x144>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014ec:	bf00      	nop
 80014ee:	37e8      	adds	r7, #232	@ 0xe8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40022000 	.word	0x40022000
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020000 	.word	0x58020000
 8001500:	24002a00 	.word	0x24002a00
 8001504:	40020010 	.word	0x40020010

08001508 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_ADC_MspDeInit+0x3c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d110      	bne.n	800153c <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_ADC_MspDeInit+0x40>)
 800151c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001520:	4a09      	ldr	r2, [pc, #36]	@ (8001548 <HAL_ADC_MspDeInit+0x40>)
 8001522:	f023 0320 	bic.w	r3, r3, #32
 8001526:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800152a:	2140      	movs	r1, #64	@ 0x40
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <HAL_ADC_MspDeInit+0x44>)
 800152e:	f007 f9af 	bl	8008890 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fb64 	bl	8005c04 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40022000 	.word	0x40022000
 8001548:	58024400 	.word	0x58024400
 800154c:	58020000 	.word	0x58020000

08001550 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2224      	movs	r2, #36	@ 0x24
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f00f f8c3 	bl	80106e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_DAC1_Init+0x5c>)
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <MX_DAC1_Init+0x60>)
 8001566:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001568:	4810      	ldr	r0, [pc, #64]	@ (80015ac <MX_DAC1_Init+0x5c>)
 800156a:	f003 fe8f 	bl	800528c <HAL_DAC_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001574:	f001 f992 	bl	800289c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800157c:	2302      	movs	r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001580:	2302      	movs	r3, #2
 8001582:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001584:	2301      	movs	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2210      	movs	r2, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <MX_DAC1_Init+0x5c>)
 8001594:	f003 fe9c 	bl	80052d0 <HAL_DAC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800159e:	f001 f97d 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	24002a78 	.word	0x24002a78
 80015b0:	40007400 	.word	0x40007400

080015b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a30      	ldr	r2, [pc, #192]	@ (8001694 <HAL_DAC_MspInit+0xe0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d159      	bne.n	800168a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fa:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <HAL_DAC_MspInit+0xe4>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001612:	2320      	movs	r3, #32
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	481d      	ldr	r0, [pc, #116]	@ (800169c <HAL_DAC_MspInit+0xe8>)
 8001626:	f006 ff83 	bl	8008530 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800162c:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_DAC_MspInit+0xf0>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001632:	2244      	movs	r2, #68	@ 0x44
 8001634:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001638:	2240      	movs	r2, #64	@ 0x40
 800163a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001648:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800164c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001650:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001658:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800165c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001660:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800166e:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001670:	f003 ff6c 	bl	800554c <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800167a:	f001 f90f 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_DAC_MspInit+0xec>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	@ 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40007400 	.word	0x40007400
 8001698:	58024400 	.word	0x58024400
 800169c:	58020000 	.word	0x58020000
 80016a0:	24002a8c 	.word	0x24002a8c
 80016a4:	40020028 	.word	0x40020028

080016a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_DMA_Init+0x4c>)
 80016b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <MX_DMA_Init+0x4c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <MX_DMA_Init+0x4c>)
 80016c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	200b      	movs	r0, #11
 80016d2:	f003 fd2a 	bl	800512a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016d6:	200b      	movs	r0, #11
 80016d8:	f003 fd41 	bl	800515e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2101      	movs	r1, #1
 80016e0:	200c      	movs	r0, #12
 80016e2:	f003 fd22 	bl	800512a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016e6:	200c      	movs	r0, #12
 80016e8:	f003 fd39 	bl	800515e <HAL_NVIC_EnableIRQ>

}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58024400 	.word	0x58024400

080016f8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	4a32      	ldr	r2, [pc, #200]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001732:	4a2b      	ldr	r2, [pc, #172]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001750:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176e:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001778:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <MX_GPIO_Init+0xe8>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2102      	movs	r1, #2
 800178a:	4816      	ldr	r0, [pc, #88]	@ (80017e4 <MX_GPIO_Init+0xec>)
 800178c:	f007 f98a 	bl	8008aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001796:	4814      	ldr	r0, [pc, #80]	@ (80017e8 <MX_GPIO_Init+0xf0>)
 8001798:	f007 f984 	bl	8008aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800179c:	2302      	movs	r3, #2
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <MX_GPIO_Init+0xec>)
 80017b4:	f006 febc 	bl	8008530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_GPIO_Init+0xf0>)
 80017d2:	f006 fead 	bl	8008530 <HAL_GPIO_Init>

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	58024400 	.word	0x58024400
 80017e4:	58020000 	.word	0x58020000
 80017e8:	58020c00 	.word	0x58020c00

080017ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <MX_I2C1_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001864 <MX_I2C1_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_I2C1_Init+0x74>)
 80017f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001868 <MX_I2C1_Init+0x7c>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001804:	2201      	movs	r2, #1
 8001806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_I2C1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_I2C1_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001826:	480e      	ldr	r0, [pc, #56]	@ (8001860 <MX_I2C1_Init+0x74>)
 8001828:	f007 f956 	bl	8008ad8 <HAL_I2C_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001832:	f001 f833 	bl	800289c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4809      	ldr	r0, [pc, #36]	@ (8001860 <MX_I2C1_Init+0x74>)
 800183a:	f007 f9dd 	bl	8008bf8 <HAL_I2CEx_ConfigAnalogFilter>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001844:	f001 f82a 	bl	800289c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_I2C1_Init+0x74>)
 800184c:	f007 fa1f 	bl	8008c8e <HAL_I2CEx_ConfigDigitalFilter>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001856:	f001 f821 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24002b04 	.word	0x24002b04
 8001864:	40005400 	.word	0x40005400
 8001868:	00b03fdb 	.word	0x00b03fdb

0800186c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0ba      	sub	sp, #232	@ 0xe8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	22c0      	movs	r2, #192	@ 0xc0
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f00e ff2b 	bl	80106e8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a26      	ldr	r2, [pc, #152]	@ (8001930 <HAL_I2C_MspInit+0xc4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d145      	bne.n	8001928 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800189c:	f04f 0208 	mov.w	r2, #8
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4618      	mov	r0, r3
 80018b4:	f008 fa5a 	bl	8009d6c <HAL_RCCEx_PeriphCLKConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80018be:	f000 ffed 	bl	800289c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d2:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e0:	23c0      	movs	r3, #192	@ 0xc0
 80018e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e6:	2312      	movs	r3, #18
 80018e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f8:	2304      	movs	r3, #4
 80018fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <HAL_I2C_MspInit+0xcc>)
 8001906:	f006 fe13 	bl	8008530 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 800190c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001910:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 8001912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001916:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_I2C_MspInit+0xc8>)
 800191c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001928:	bf00      	nop
 800192a:	37e8      	adds	r7, #232	@ 0xe8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40005400 	.word	0x40005400
 8001934:	58024400 	.word	0x58024400
 8001938:	58020400 	.word	0x58020400

0800193c <adc_init>:
int kill_music = 0;

uint8_t CNT=0;

void adc_init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
	MX_ADC1_Init();
 8001940:	f7ff fcc2 	bl	80012c8 <MX_ADC1_Init>
	HAL_Delay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f001 fc81 	bl	800324c <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 800194a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800194e:	2100      	movs	r1, #0
 8001950:	481a      	ldr	r0, [pc, #104]	@ (80019bc <adc_init+0x80>)
 8001952:	f003 f9cd 	bl	8004cf0 <HAL_ADCEx_Calibration_Start>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <adc_init+0x32>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 800195c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001960:	222f      	movs	r2, #47	@ 0x2f
 8001962:	4917      	ldr	r1, [pc, #92]	@ (80019c0 <adc_init+0x84>)
 8001964:	4817      	ldr	r0, [pc, #92]	@ (80019c4 <adc_init+0x88>)
 8001966:	f00c fae7 	bl	800df38 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 800196a:	f000 ff97 	bl	800289c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH_HIGH) != HAL_OK)
 800196e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001972:	4915      	ldr	r1, [pc, #84]	@ (80019c8 <adc_init+0x8c>)
 8001974:	4811      	ldr	r0, [pc, #68]	@ (80019bc <adc_init+0x80>)
 8001976:	f002 f9f3 	bl	8003d60 <HAL_ADC_Start_DMA>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <adc_init+0x56>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001984:	2225      	movs	r2, #37	@ 0x25
 8001986:	4911      	ldr	r1, [pc, #68]	@ (80019cc <adc_init+0x90>)
 8001988:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <adc_init+0x88>)
 800198a:	f00c fad5 	bl	800df38 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 800198e:	f000 ff85 	bl	800289c <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001992:	480f      	ldr	r0, [pc, #60]	@ (80019d0 <adc_init+0x94>)
 8001994:	f00a ff40 	bl	800c818 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001998:	bf00      	nop
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <adc_init+0x98>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0fa      	beq.n	800199a <adc_init+0x5e>
	AdcConvEnd = 0;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <adc_init+0x98>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 80019aa:	4804      	ldr	r0, [pc, #16]	@ (80019bc <adc_init+0x80>)
 80019ac:	f002 f858 	bl	8003a60 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 80019b0:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <adc_init+0x94>)
 80019b2:	f00a ffa1 	bl	800c8f8 <HAL_TIM_Base_Stop>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2400299c 	.word	0x2400299c
 80019c0:	08011e50 	.word	0x08011e50
 80019c4:	2401d82c 	.word	0x2401d82c
 80019c8:	24000180 	.word	0x24000180
 80019cc:	08011e80 	.word	0x08011e80
 80019d0:	2401d7e0 	.word	0x2401d7e0
 80019d4:	24002b58 	.word	0x24002b58

080019d8 <adc_music_init>:


void adc_music_init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
	MX_ADC1_Init();
 80019dc:	f7ff fc74 	bl	80012c8 <MX_ADC1_Init>
	HAL_Delay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f001 fc33 	bl	800324c <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80019e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80019ea:	2100      	movs	r1, #0
 80019ec:	481a      	ldr	r0, [pc, #104]	@ (8001a58 <adc_music_init+0x80>)
 80019ee:	f003 f97f 	bl	8004cf0 <HAL_ADCEx_Calibration_Start>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <adc_music_init+0x32>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019fc:	222f      	movs	r2, #47	@ 0x2f
 80019fe:	4917      	ldr	r1, [pc, #92]	@ (8001a5c <adc_music_init+0x84>)
 8001a00:	4817      	ldr	r0, [pc, #92]	@ (8001a60 <adc_music_init+0x88>)
 8001a02:	f00c fa99 	bl	800df38 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001a06:	f000 ff49 	bl	800289c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_music_data, FO_LENGTH_MIDDLE) != HAL_OK)
 8001a0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a0e:	4915      	ldr	r1, [pc, #84]	@ (8001a64 <adc_music_init+0x8c>)
 8001a10:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <adc_music_init+0x80>)
 8001a12:	f002 f9a5 	bl	8003d60 <HAL_ADC_Start_DMA>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <adc_music_init+0x56>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a20:	2225      	movs	r2, #37	@ 0x25
 8001a22:	4911      	ldr	r1, [pc, #68]	@ (8001a68 <adc_music_init+0x90>)
 8001a24:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <adc_music_init+0x88>)
 8001a26:	f00c fa87 	bl	800df38 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001a2a:	f000 ff37 	bl	800289c <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001a2e:	480f      	ldr	r0, [pc, #60]	@ (8001a6c <adc_music_init+0x94>)
 8001a30:	f00a fef2 	bl	800c818 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001a34:	bf00      	nop
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <adc_music_init+0x98>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0fa      	beq.n	8001a36 <adc_music_init+0x5e>
	AdcConvEnd = 0;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <adc_music_init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8001a46:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <adc_music_init+0x80>)
 8001a48:	f002 f80a 	bl	8003a60 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001a4c:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <adc_music_init+0x94>)
 8001a4e:	f00a ff53 	bl	800c8f8 <HAL_TIM_Base_Stop>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2400299c 	.word	0x2400299c
 8001a5c:	08011e50 	.word	0x08011e50
 8001a60:	2401d82c 	.word	0x2401d82c
 8001a64:	24000980 	.word	0x24000980
 8001a68:	08011e80 	.word	0x08011e80
 8001a6c:	2401d7e0 	.word	0x2401d7e0
 8001a70:	24002b58 	.word	0x24002b58

08001a74 <Para_Init>:



void Para_Init(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

	 hold_music = 0;
 8001a78:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <Para_Init+0x9c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
	 hold_voice = 0;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <Para_Init+0xa0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
	 hold_weak = 0;
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <Para_Init+0xa4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
//	 human_killed = 0;
//	 music_killed = 0;

	for (i = 0 ; i < 4 ; i ++)
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <Para_Init+0xa8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e015      	b.n	8001abe <Para_Init+0x4a>
		  {
			  max[i] = 0;
 8001a92:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <Para_Init+0xa8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a22      	ldr	r2, [pc, #136]	@ (8001b20 <Para_Init+0xac>)
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	18d1      	adds	r1, r2, r3
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c1 2300 	strd	r2, r3, [r1]
			  max_index[i] = 0;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <Para_Init+0xa8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1d      	ldr	r2, [pc, #116]	@ (8001b24 <Para_Init+0xb0>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0 ; i < 4 ; i ++)
 8001ab4:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <Para_Init+0xa8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <Para_Init+0xa8>)
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <Para_Init+0xa8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	dde5      	ble.n	8001a92 <Para_Init+0x1e>

		  }
	for ( i = 0 ; i < FO_LENGTH_HIGH*2 ; i++)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <Para_Init+0xa8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e00f      	b.n	8001aee <Para_Init+0x7a>
		  {
				  P[i] = 0;
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <Para_Init+0xa8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a15      	ldr	r2, [pc, #84]	@ (8001b28 <Para_Init+0xb4>)
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	18d1      	adds	r1, r2, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9c1 2300 	strd	r2, r3, [r1]
	for ( i = 0 ; i < FO_LENGTH_HIGH*2 ; i++)
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <Para_Init+0xa8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4a0c      	ldr	r2, [pc, #48]	@ (8001b1c <Para_Init+0xa8>)
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <Para_Init+0xa8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001af6:	dbea      	blt.n	8001ace <Para_Init+0x5a>
				 // p[i] = 0;
		  }
		  count = 0;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <Para_Init+0xb8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
		  hold_on=0;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <Para_Init+0xbc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2401d6d8 	.word	0x2401d6d8
 8001b14:	2401d6dc 	.word	0x2401d6dc
 8001b18:	2401d6e0 	.word	0x2401d6e0
 8001b1c:	2401d4d8 	.word	0x2401d4d8
 8001b20:	24000000 	.word	0x24000000
 8001b24:	24002b5c 	.word	0x24002b5c
 8001b28:	24002b68 	.word	0x24002b68
 8001b2c:	2401d4e0 	.word	0x2401d4e0
 8001b30:	2401d6c8 	.word	0x2401d6c8
 8001b34:	00000000 	.word	0x00000000

08001b38 <ADC1_Get>:

void ADC1_Get(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

		adc_init();
 8001b3e:	f7ff fefd 	bl	800193c <adc_init>

		  for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	80fb      	strh	r3, [r7, #6]
 8001b46:	e022      	b.n	8001b8e <ADC1_Get+0x56>
		  	    {
		  	    	  voltage = ((double)adc1_data[temp]*3.3)/65535 *3 ;
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	4a19      	ldr	r2, [pc, #100]	@ (8001bb0 <ADC1_Get+0x78>)
 8001b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b58:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001ba0 <ADC1_Get+0x68>
 8001b5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b60:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001ba8 <ADC1_Get+0x70>
 8001b64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b68:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001b6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <ADC1_Get+0x7c>)
 8001b72:	ed83 7b00 	vstr	d7, [r3]

		  	    	  v[temp] = voltage ;
 8001b76:	88f9      	ldrh	r1, [r7, #6]
 8001b78:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <ADC1_Get+0x7c>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <ADC1_Get+0x80>)
 8001b80:	00c9      	lsls	r1, r1, #3
 8001b82:	4401      	add	r1, r0
 8001b84:	e9c1 2300 	strd	r2, r3, [r1]
		  for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++)
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	80fb      	strh	r3, [r7, #6]
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b94:	d3d8      	bcc.n	8001b48 <ADC1_Get+0x10>
//		  	    		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		  	    		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//		  	    		  count++;
//		  	    	  }
		  	    }
}
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	66666666 	.word	0x66666666
 8001ba4:	400a6666 	.word	0x400a6666
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40efffe0 	.word	0x40efffe0
 8001bb0:	24000180 	.word	0x24000180
 8001bb4:	2400ae90 	.word	0x2400ae90
 8001bb8:	2400ae98 	.word	0x2400ae98
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <ADC1_Get_Music>:



void ADC1_Get_Music(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_AUTORELOAD(&htim15, 500 -1);
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <ADC1_Get_Music+0xb0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001bce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bd0:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <ADC1_Get_Music+0xb0>)
 8001bd2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001bd6:	60da      	str	r2, [r3, #12]
	  TIM15->ARR = 500 - 1;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <ADC1_Get_Music+0xb4>)
 8001bda:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
	  TIM15->CR1 &= ~TIM_CR1_ARPE;
 8001be0:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <ADC1_Get_Music+0xb4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <ADC1_Get_Music+0xb4>)
 8001be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bea:	6013      	str	r3, [r2, #0]
		adc_music_init();
 8001bec:	f7ff fef4 	bl	80019d8 <adc_music_init>

		  for (uint16_t temp = 0; temp< FO_LENGTH_MIDDLE;temp++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	80fb      	strh	r3, [r7, #6]
 8001bf4:	e026      	b.n	8001c44 <ADC1_Get_Music+0x84>
		  	    {
		  	    	  voltage = ((double)adc1_music_data[temp]*3.3)/65535 *3 ;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <ADC1_Get_Music+0xb8>)
 8001bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001c06:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001c58 <ADC1_Get_Music+0x98>
 8001c0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c0e:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 8001c60 <ADC1_Get_Music+0xa0>
 8001c12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c16:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <ADC1_Get_Music+0xbc>)
 8001c20:	ed83 7b00 	vstr	d7, [r3]

		  	    	  SP[temp] = voltage - 4.95;
 8001c24:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <ADC1_Get_Music+0xbc>)
 8001c26:	ed93 7b00 	vldr	d7, [r3]
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8001c68 <ADC1_Get_Music+0xa8>
 8001c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c34:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <ADC1_Get_Music+0xc0>)
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	ed83 7b00 	vstr	d7, [r3]
		  for (uint16_t temp = 0; temp< FO_LENGTH_MIDDLE;temp++)
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	3301      	adds	r3, #1
 8001c42:	80fb      	strh	r3, [r7, #6]
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c4a:	d3d4      	bcc.n	8001bf6 <ADC1_Get_Music+0x36>
		  	    }
//		  for (uint16_t temp = 0; temp< 400;temp++)
//		  {
//			  SP[temp + FO_LENGTH_MIDDLE]  = 0;
//		  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	66666666 	.word	0x66666666
 8001c5c:	400a6666 	.word	0x400a6666
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40efffe0 	.word	0x40efffe0
 8001c68:	cccccccd 	.word	0xcccccccd
 8001c6c:	4013cccc 	.word	0x4013cccc
 8001c70:	2401d7e0 	.word	0x2401d7e0
 8001c74:	40014000 	.word	0x40014000
 8001c78:	24000980 	.word	0x24000980
 8001c7c:	2400ae90 	.word	0x2400ae90
 8001c80:	2400d1b8 	.word	0x2400d1b8

08001c84 <HandleFFT>:
	  	    }
}


void HandleFFT(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
			  	  for (i = 1 ; i <= 1; i++)
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d40 <HandleFFT+0xbc>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e04c      	b.n	8001d2c <HandleFFT+0xa8>
			  	  {
			  		  if (flag == 1)
 8001c92:	4b2c      	ldr	r3, [pc, #176]	@ (8001d44 <HandleFFT+0xc0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d11b      	bne.n	8001cd2 <HandleFFT+0x4e>
			  		  {
			  			X= Blackman(FO_LENGTH_HIGH ,(max_index[1]-max_index[1]/2),(max_index[1]+max_index[1]/2), v);
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HandleFFT+0xc4>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <HandleFFT+0xc4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da00      	bge.n	8001ca8 <HandleFFT+0x24>
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	105b      	asrs	r3, r3, #1
 8001caa:	425b      	negs	r3, r3
 8001cac:	18d1      	adds	r1, r2, r3
 8001cae:	4b26      	ldr	r3, [pc, #152]	@ (8001d48 <HandleFFT+0xc4>)
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <HandleFFT+0xc4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da00      	bge.n	8001cbc <HandleFFT+0x38>
 8001cba:	3301      	adds	r3, #1
 8001cbc:	105b      	asrs	r3, r3, #1
 8001cbe:	441a      	add	r2, r3
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HandleFFT+0xc8>)
 8001cc2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cc6:	f7ff f933 	bl	8000f30 <Blackman>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a20      	ldr	r2, [pc, #128]	@ (8001d50 <HandleFFT+0xcc>)
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e002      	b.n	8001cd8 <HandleFFT+0x54>
			  		  }
			  		  else
			  		  {
			  			  X = v;
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <HandleFFT+0xcc>)
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d4c <HandleFFT+0xc8>)
 8001cd6:	601a      	str	r2, [r3, #0]
			  		  }

			  		  p = FFT_Mag(FO_LENGTH_HIGH , X);
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HandleFFT+0xcc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ce2:	f7ff f841 	bl	8000d68 <FFT_Mag>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d54 <HandleFFT+0xd0>)
 8001cea:	6013      	str	r3, [r2, #0]
			  		  for (int j = 0 ; j  <FO_LENGTH_HIGH/2 ; j++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	e013      	b.n	8001d1a <HandleFFT+0x96>
			  		  {
			  			  P[j]=p[j] * 5;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HandleFFT+0xd0>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	ed93 7b00 	vldr	d7, [r3]
 8001d00:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8001d04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d08:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <HandleFFT+0xd4>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	ed83 7b00 	vstr	d7, [r3]
			  		  for (int j = 0 ; j  <FO_LENGTH_HIGH/2 ; j++)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3301      	adds	r3, #1
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d20:	dbe7      	blt.n	8001cf2 <HandleFFT+0x6e>
			  	  for (i = 1 ; i <= 1; i++)
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <HandleFFT+0xbc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <HandleFFT+0xbc>)
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <HandleFFT+0xbc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	ddae      	ble.n	8001c92 <HandleFFT+0xe>
			  		  }
			  	  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2401d4d8 	.word	0x2401d4d8
 8001d44:	2401d4dc 	.word	0x2401d4dc
 8001d48:	24002b5c 	.word	0x24002b5c
 8001d4c:	2400ae98 	.word	0x2400ae98
 8001d50:	24002b64 	.word	0x24002b64
 8001d54:	2400ae88 	.word	0x2400ae88
 8001d58:	24002b68 	.word	0x24002b68
 8001d5c:	00000000 	.word	0x00000000

08001d60 <PrintMag>:

void PrintMag(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	 for (i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 8001d64:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <PrintMag+0xa8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e03a      	b.n	8001de2 <PrintMag+0x82>
	 {

//		 sprintf(str_2 , "%.5lf" , (P[i]));
//		 HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		 HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
		 if (i > 10 && i < 1000)
 8001d6c:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <PrintMag+0xa8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b0a      	cmp	r3, #10
 8001d72:	dd31      	ble.n	8001dd8 <PrintMag+0x78>
 8001d74:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <PrintMag+0xa8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d7c:	da2c      	bge.n	8001dd8 <PrintMag+0x78>
		 {
			 if ( (P[i] > 1.2 ||hold_on >=1 )  )
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <PrintMag+0xa8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a22      	ldr	r2, [pc, #136]	@ (8001e0c <PrintMag+0xac>)
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	ed93 7b00 	vldr	d7, [r3]
 8001d8c:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8001e00 <PrintMag+0xa0>
 8001d90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	dc03      	bgt.n	8001da2 <PrintMag+0x42>
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <PrintMag+0xb0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dd0b      	ble.n	8001dba <PrintMag+0x5a>
		 	 {
				 HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2102      	movs	r1, #2
 8001da6:	481b      	ldr	r0, [pc, #108]	@ (8001e14 <PrintMag+0xb4>)
 8001da8:	f006 fe7c 	bl	8008aa4 <HAL_GPIO_WritePin>
				 hold_on = 1;
 8001dac:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <PrintMag+0xb0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
				 USART1PutString("t4.txt=\"Get Sound!\"\xff\xff\xff");
 8001db2:	4819      	ldr	r0, [pc, #100]	@ (8001e18 <PrintMag+0xb8>)
 8001db4:	f001 f96e 	bl	8003094 <USART1PutString>
 8001db8:	e00e      	b.n	8001dd8 <PrintMag+0x78>
		 	 }
			 else if (hold_on ==0)
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <PrintMag+0xb0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10a      	bne.n	8001dd8 <PrintMag+0x78>
			 {
				 hold_on  =0 ;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <PrintMag+0xb0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
				 HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2102      	movs	r1, #2
 8001dcc:	4811      	ldr	r0, [pc, #68]	@ (8001e14 <PrintMag+0xb4>)
 8001dce:	f006 fe69 	bl	8008aa4 <HAL_GPIO_WritePin>
				 USART1PutString("t4.txt=\"Weak Sound\"\xff\xff\xff");
 8001dd2:	4812      	ldr	r0, [pc, #72]	@ (8001e1c <PrintMag+0xbc>)
 8001dd4:	f001 f95e 	bl	8003094 <USART1PutString>
	 for (i = 0 ; i < FO_LENGTH_HIGH/2 ; i++)
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <PrintMag+0xa8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <PrintMag+0xa8>)
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <PrintMag+0xa8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dea:	dbbf      	blt.n	8001d6c <PrintMag+0xc>
			 }
		 }
	 }
	 max[4] = 0;
 8001dec:	490c      	ldr	r1, [pc, #48]	@ (8001e20 <PrintMag+0xc0>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	33333333 	.word	0x33333333
 8001e04:	3ff33333 	.word	0x3ff33333
 8001e08:	2401d4d8 	.word	0x2401d4d8
 8001e0c:	24002b68 	.word	0x24002b68
 8001e10:	2401d6c8 	.word	0x2401d6c8
 8001e14:	58020000 	.word	0x58020000
 8001e18:	08011ea8 	.word	0x08011ea8
 8001e1c:	08011ec0 	.word	0x08011ec0
 8001e20:	24000000 	.word	0x24000000

08001e24 <ASK_Output>:

void ASK_Output(int fre)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	setFre(fre);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e36:	eeb0 0b47 	vmov.f64	d0, d7
 8001e3a:	f001 f811 	bl	8002e60 <setFre>
	HAL_TIM_Base_Start_IT(&htim5);
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <ASK_Output+0x28>)
 8001e40:	f00a fd82 	bl	800c948 <HAL_TIM_Base_Start_IT>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2401d748 	.word	0x2401d748

08001e50 <Music_Init>:

void Music_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
	i = 0;
 8001e56:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <Music_Init+0xf0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
	for (double j = 0 ; j < 60 ; j+=1)
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9c7 2300 	strd	r2, r3, [r7]
 8001e68:	e025      	b.n	8001eb6 <Music_Init+0x66>
	{
		Spec[i] =261.63 * pow(2.0 ,j/12);
 8001e6a:	ed97 7b00 	vldr	d7, [r7]
 8001e6e:	eeb2 5b08 	vmov.f64	d5, #40	@ 0x41400000  12.0
 8001e72:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001e76:	eeb0 1b46 	vmov.f64	d1, d6
 8001e7a:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001e7e:	f00e fe8b 	bl	8010b98 <pow>
 8001e82:	eeb0 7b40 	vmov.f64	d7, d0
 8001e86:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <Music_Init+0xf0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8001f30 <Music_Init+0xe0>
 8001e8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e92:	4a2c      	ldr	r2, [pc, #176]	@ (8001f44 <Music_Init+0xf4>)
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	ed83 7b00 	vstr	d7, [r3]
					i++;
 8001e9c:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <Music_Init+0xf0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <Music_Init+0xf0>)
 8001ea4:	6013      	str	r3, [r2, #0]
	for (double j = 0 ; j < 60 ; j+=1)
 8001ea6:	ed97 7b00 	vldr	d7, [r7]
 8001eaa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001eae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eb2:	ed87 7b00 	vstr	d7, [r7]
 8001eb6:	ed97 7b00 	vldr	d7, [r7]
 8001eba:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001f38 <Music_Init+0xe8>
 8001ebe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d4d0      	bmi.n	8001e6a <Music_Init+0x1a>
	}
	__HAL_TIM_SET_AUTORELOAD(&htim15, 1000-1 );
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <Music_Init+0xf8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <Music_Init+0xf8>)
 8001ed4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed8:	60da      	str	r2, [r3, #12]
		TIM15->ARR =  1000-1;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <Music_Init+0xfc>)
 8001edc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
		htim5.Init.Period = 1000-1;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <Music_Init+0x100>)
 8001ee4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee8:	60da      	str	r2, [r3, #12]
		TIM15->CR1 &= ~TIM_CR1_ARPE;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <Music_Init+0xfc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <Music_Init+0xfc>)
 8001ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ef4:	6013      	str	r3, [r2, #0]
	i= 0 ;
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <Music_Init+0xf0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
	max[0] = 0;
 8001efc:	4915      	ldr	r1, [pc, #84]	@ (8001f54 <Music_Init+0x104>)
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9c1 2300 	strd	r2, r3, [r1]
	max[1] = 0;
 8001f0a:	4912      	ldr	r1, [pc, #72]	@ (8001f54 <Music_Init+0x104>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
	max[2] = 0;
 8001f18:	490e      	ldr	r1, [pc, #56]	@ (8001f54 <Music_Init+0x104>)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	7ae147ae 	.word	0x7ae147ae
 8001f34:	40705a14 	.word	0x40705a14
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	404e0000 	.word	0x404e0000
 8001f40:	2401d4d8 	.word	0x2401d4d8
 8001f44:	2401d4e8 	.word	0x2401d4e8
 8001f48:	2401d7e0 	.word	0x2401d7e0
 8001f4c:	40014000 	.word	0x40014000
 8001f50:	2401d748 	.word	0x2401d748
 8001f54:	24000000 	.word	0x24000000

08001f58 <Is_Music_OZWithInit>:
		{
			HAL_UART_Transmit(&huart1 ,(uint8_t *)"Not Music!\n", 11 , HAL_MAX_DELAY);
		}
}
void Is_Music_OZWithInit(void )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
	ADC1_Get_Music();
 8001f5e:	f7ff fe2f 	bl	8001bc0 <ADC1_Get_Music>
	for ( i = 0 ; i < FO_LENGTH_MIDDLE ; i++)
 8001f62:	4b8d      	ldr	r3, [pc, #564]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e01f      	b.n	8001faa <Is_Music_OZWithInit+0x52>
	{
		if (fabs(SP[i]) > max[4])
 8001f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a8b      	ldr	r2, [pc, #556]	@ (800219c <Is_Music_OZWithInit+0x244>)
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	ed93 7b00 	vldr	d7, [r3]
 8001f78:	eeb0 6bc7 	vabs.f64	d6, d7
 8001f7c:	4b88      	ldr	r3, [pc, #544]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 8001f7e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001f82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	dd09      	ble.n	8001fa0 <Is_Music_OZWithInit+0x48>
		{
			max[4] = SP[i];
 8001f8c:	4b82      	ldr	r3, [pc, #520]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a82      	ldr	r2, [pc, #520]	@ (800219c <Is_Music_OZWithInit+0x244>)
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	4981      	ldr	r1, [pc, #516]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 8001f9c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	for ( i = 0 ; i < FO_LENGTH_MIDDLE ; i++)
 8001fa0:	4b7d      	ldr	r3, [pc, #500]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a7c      	ldr	r2, [pc, #496]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b7b      	ldr	r3, [pc, #492]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb2:	dbda      	blt.n	8001f6a <Is_Music_OZWithInit+0x12>
		}
	}
	if (max[4] < 3.0)
 8001fb4:	4b7a      	ldr	r3, [pc, #488]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 8001fb6:	ed93 7b08 	vldr	d7, [r3, #32]
 8001fba:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001fbe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	d524      	bpl.n	8002012 <Is_Music_OZWithInit+0xba>
	{
		hold_weak++;
 8001fc8:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <Is_Music_OZWithInit+0x24c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a75      	ldr	r2, [pc, #468]	@ (80021a4 <Is_Music_OZWithInit+0x24c>)
 8001fd0:	6013      	str	r3, [r2, #0]
		hold_weak%=3;
 8001fd2:	4b74      	ldr	r3, [pc, #464]	@ (80021a4 <Is_Music_OZWithInit+0x24c>)
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	4b74      	ldr	r3, [pc, #464]	@ (80021a8 <Is_Music_OZWithInit+0x250>)
 8001fd8:	fb83 3201 	smull	r3, r2, r3, r1
 8001fdc:	17cb      	asrs	r3, r1, #31
 8001fde:	1ad2      	subs	r2, r2, r3
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	1aca      	subs	r2, r1, r3
 8001fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80021a4 <Is_Music_OZWithInit+0x24c>)
 8001fea:	601a      	str	r2, [r3, #0]
		if(hold_weak ==1){
 8001fec:	4b6d      	ldr	r3, [pc, #436]	@ (80021a4 <Is_Music_OZWithInit+0x24c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <Is_Music_OZWithInit+0xac>
			USART1PutString("t4.txt=\"Weak Sound!\"\xff\xff\xff");
 8001ff4:	486d      	ldr	r0, [pc, #436]	@ (80021ac <Is_Music_OZWithInit+0x254>)
 8001ff6:	f001 f84d 	bl	8003094 <USART1PutString>

			HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	486c      	ldr	r0, [pc, #432]	@ (80021b0 <Is_Music_OZWithInit+0x258>)
 8002000:	f006 fd50 	bl	8008aa4 <HAL_GPIO_WritePin>
		}
		max[4] = -1;
 8002004:	4966      	ldr	r1, [pc, #408]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	4b6a      	ldr	r3, [pc, #424]	@ (80021b4 <Is_Music_OZWithInit+0x25c>)
 800200c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		return ;
 8002010:	e117      	b.n	8002242 <Is_Music_OZWithInit+0x2ea>
	}
	HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	2102      	movs	r1, #2
 8002016:	4866      	ldr	r0, [pc, #408]	@ (80021b0 <Is_Music_OZWithInit+0x258>)
 8002018:	f006 fd44 	bl	8008aa4 <HAL_GPIO_WritePin>
	for (i= 0 ; i < FO_LENGTH_MIDDLE ; i++)
 800201c:	4b5e      	ldr	r3, [pc, #376]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e01b      	b.n	800205c <Is_Music_OZWithInit+0x104>
	{
		SP[i]/=max[4] /10;
 8002024:	4b5c      	ldr	r3, [pc, #368]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a5c      	ldr	r2, [pc, #368]	@ (800219c <Is_Music_OZWithInit+0x244>)
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	ed93 5b00 	vldr	d5, [r3]
 8002032:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 8002034:	ed93 7b08 	vldr	d7, [r3, #32]
 8002038:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800203c:	ee87 6b04 	vdiv.f64	d6, d7, d4
 8002040:	4b55      	ldr	r3, [pc, #340]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002048:	4a54      	ldr	r2, [pc, #336]	@ (800219c <Is_Music_OZWithInit+0x244>)
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	ed83 7b00 	vstr	d7, [r3]
	for (i= 0 ; i < FO_LENGTH_MIDDLE ; i++)
 8002052:	4b51      	ldr	r3, [pc, #324]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3301      	adds	r3, #1
 8002058:	4a4f      	ldr	r2, [pc, #316]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b4e      	ldr	r3, [pc, #312]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002064:	dbde      	blt.n	8002024 <Is_Music_OZWithInit+0xcc>
//		  sprintf(str_2 , "%.5f" , SP[i]);
//		  HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//		  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
	max[4] = 0;
 8002066:	494e      	ldr	r1, [pc, #312]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9c1 2308 	strd	r2, r3, [r1, #32]
	double r1 = 0.6;
 8002074:	a344      	add	r3, pc, #272	@ (adr r3, 8002188 <Is_Music_OZWithInit+0x230>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double r2 = 0.1 ;
 800207e:	a344      	add	r3, pc, #272	@ (adr r3, 8002190 <Is_Music_OZWithInit+0x238>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	e9c7 2302 	strd	r2, r3, [r7, #8]
	int a1 = OverOZ_Num_Get(r1 , FO_LENGTH_MIDDLE, SP);
 8002088:	4944      	ldr	r1, [pc, #272]	@ (800219c <Is_Music_OZWithInit+0x244>)
 800208a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800208e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002092:	f7ff f8d9 	bl	8001248 <OverOZ_Num_Get>
 8002096:	6078      	str	r0, [r7, #4]
	int a2 = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
	max[1] = 0;
 800209c:	4940      	ldr	r1, [pc, #256]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	p =FFT_Mag_sqrt(FO_LENGTH_MIDDLE ,SP );
 80020aa:	493c      	ldr	r1, [pc, #240]	@ (800219c <Is_Music_OZWithInit+0x244>)
 80020ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80020b0:	f7fe fed8 	bl	8000e64 <FFT_Mag_sqrt>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a40      	ldr	r2, [pc, #256]	@ (80021b8 <Is_Music_OZWithInit+0x260>)
 80020b8:	6013      	str	r3, [r2, #0]
	for (int l = 0 ; l < FO_LENGTH_MIDDLE/2 ; l++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e022      	b.n	8002106 <Is_Music_OZWithInit+0x1ae>
			{
				if (max[1] < p[l] && l > 10 && l < 4000)
 80020c0:	4b37      	ldr	r3, [pc, #220]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 80020c2:	ed93 6b02 	vldr	d6, [r3, #8]
 80020c6:	4b3c      	ldr	r3, [pc, #240]	@ (80021b8 <Is_Music_OZWithInit+0x260>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	ed93 7b00 	vldr	d7, [r3]
 80020d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020dc:	d510      	bpl.n	8002100 <Is_Music_OZWithInit+0x1a8>
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b0a      	cmp	r3, #10
 80020e2:	dd0d      	ble.n	8002100 <Is_Music_OZWithInit+0x1a8>
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80020ea:	da09      	bge.n	8002100 <Is_Music_OZWithInit+0x1a8>
				{
					max[1] = p[l];
 80020ec:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <Is_Music_OZWithInit+0x260>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	4929      	ldr	r1, [pc, #164]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 80020fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	for (int l = 0 ; l < FO_LENGTH_MIDDLE/2 ; l++)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	3301      	adds	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800210c:	dbd8      	blt.n	80020c0 <Is_Music_OZWithInit+0x168>
//				sprintf(str_2 , "%.5lf" , p[l]);
//				HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 7   ,HAL_MAX_DELAY);
//				HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
			}

	for (i = 0 ; i < FO_LENGTH_MIDDLE/2 ; i++)
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e01b      	b.n	800214e <Is_Music_OZWithInit+0x1f6>
	{
		if (p[i] > r2 * max[1])a2++;
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <Is_Music_OZWithInit+0x260>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	ed93 6b00 	vldr	d6, [r3]
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <Is_Music_OZWithInit+0x248>)
 8002128:	ed93 5b02 	vldr	d5, [r3, #8]
 800212c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002130:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002134:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	dd02      	ble.n	8002144 <Is_Music_OZWithInit+0x1ec>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
	for (i = 0 ; i < FO_LENGTH_MIDDLE/2 ; i++)
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	4a13      	ldr	r2, [pc, #76]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <Is_Music_OZWithInit+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002156:	dbde      	blt.n	8002116 <Is_Music_OZWithInit+0x1be>
//	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//	sprintf(str_2 , "%d" , a2);
//	HAL_UART_Transmit(&huart1,(uint8_t *)str_2 , 4   ,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//	sprintf(str_2 , "%d" , 2);
	if (a1 > 45 || a2 < 400)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b2d      	cmp	r3, #45	@ 0x2d
 800215c:	dc03      	bgt.n	8002166 <Is_Music_OZWithInit+0x20e>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002164:	da2f      	bge.n	80021c6 <Is_Music_OZWithInit+0x26e>
	{
		if (hold_music < 2)hold_music ++;
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <Is_Music_OZWithInit+0x264>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	dc04      	bgt.n	8002178 <Is_Music_OZWithInit+0x220>
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <Is_Music_OZWithInit+0x264>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <Is_Music_OZWithInit+0x264>)
 8002176:	6013      	str	r3, [r2, #0]
		hold_voice = ((hold_music >=2)?(5):(0));
 8002178:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <Is_Music_OZWithInit+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	dd1f      	ble.n	80021c0 <Is_Music_OZWithInit+0x268>
 8002180:	2305      	movs	r3, #5
 8002182:	e01e      	b.n	80021c2 <Is_Music_OZWithInit+0x26a>
 8002184:	f3af 8000 	nop.w
 8002188:	33333333 	.word	0x33333333
 800218c:	3fe33333 	.word	0x3fe33333
 8002190:	9999999a 	.word	0x9999999a
 8002194:	3fb99999 	.word	0x3fb99999
 8002198:	2401d4d8 	.word	0x2401d4d8
 800219c:	2400d1b8 	.word	0x2400d1b8
 80021a0:	24000000 	.word	0x24000000
 80021a4:	2401d6e0 	.word	0x2401d6e0
 80021a8:	55555556 	.word	0x55555556
 80021ac:	08011ef8 	.word	0x08011ef8
 80021b0:	58020000 	.word	0x58020000
 80021b4:	bff00000 	.word	0xbff00000
 80021b8:	2400ae88 	.word	0x2400ae88
 80021bc:	2401d6d8 	.word	0x2401d6d8
 80021c0:	2300      	movs	r3, #0
 80021c2:	4a21      	ldr	r2, [pc, #132]	@ (8002248 <Is_Music_OZWithInit+0x2f0>)
 80021c4:	6013      	str	r3, [r2, #0]
	}
	if (a1 < 45 && a2 > 400 )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b2c      	cmp	r3, #44	@ 0x2c
 80021ca:	dc0f      	bgt.n	80021ec <Is_Music_OZWithInit+0x294>
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80021d2:	dd0b      	ble.n	80021ec <Is_Music_OZWithInit+0x294>
	{
		if (hold_music >=2){hold_voice--; }
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <Is_Music_OZWithInit+0x2f4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	dd04      	ble.n	80021e6 <Is_Music_OZWithInit+0x28e>
 80021dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <Is_Music_OZWithInit+0x2f0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	4a19      	ldr	r2, [pc, #100]	@ (8002248 <Is_Music_OZWithInit+0x2f0>)
 80021e4:	6013      	str	r3, [r2, #0]
		hold_music = 0;
 80021e6:	4b19      	ldr	r3, [pc, #100]	@ (800224c <Is_Music_OZWithInit+0x2f4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
	}
//	HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_2);
	if (hold_music >= 2 || hold_voice >= 5)
 80021ec:	4b17      	ldr	r3, [pc, #92]	@ (800224c <Is_Music_OZWithInit+0x2f4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	dc03      	bgt.n	80021fc <Is_Music_OZWithInit+0x2a4>
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <Is_Music_OZWithInit+0x2f0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	dd11      	ble.n	8002220 <Is_Music_OZWithInit+0x2c8>
	{
		if (c == '7')
 80021fc:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <Is_Music_OZWithInit+0x2f8>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b37      	cmp	r3, #55	@ 0x37
 8002202:	d109      	bne.n	8002218 <Is_Music_OZWithInit+0x2c0>
		{
			USART1PutString("t4.txt=\"123Music Killed!\"\xff\xff\xff");
 8002204:	4813      	ldr	r0, [pc, #76]	@ (8002254 <Is_Music_OZWithInit+0x2fc>)
 8002206:	f000 ff45 	bl	8003094 <USART1PutString>
			kill_human = 0;
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <Is_Music_OZWithInit+0x300>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
			kill_music = 1;
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <Is_Music_OZWithInit+0x304>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
			return ;
 8002216:	e014      	b.n	8002242 <Is_Music_OZWithInit+0x2ea>
		}
		USART1PutString("t4.txt=\"Music!\"\xff\xff\xff");
 8002218:	4811      	ldr	r0, [pc, #68]	@ (8002260 <Is_Music_OZWithInit+0x308>)
 800221a:	f000 ff3b 	bl	8003094 <USART1PutString>
 800221e:	e010      	b.n	8002242 <Is_Music_OZWithInit+0x2ea>
	}
	else
	{
		if (c == '6')
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <Is_Music_OZWithInit+0x2f8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b36      	cmp	r3, #54	@ 0x36
 8002226:	d109      	bne.n	800223c <Is_Music_OZWithInit+0x2e4>
			{
			USART1PutString("t4.txt=\"321Human Sound Killed\"\xff\xff\xff");
 8002228:	480e      	ldr	r0, [pc, #56]	@ (8002264 <Is_Music_OZWithInit+0x30c>)
 800222a:	f000 ff33 	bl	8003094 <USART1PutString>
			kill_human = 1;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <Is_Music_OZWithInit+0x300>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
			kill_music = 0;
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <Is_Music_OZWithInit+0x304>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
				return ;
 800223a:	e002      	b.n	8002242 <Is_Music_OZWithInit+0x2ea>

			}
		USART1PutString("t4.txt=\"Human Sound!\"\xff\xff\xff");
 800223c:	480a      	ldr	r0, [pc, #40]	@ (8002268 <Is_Music_OZWithInit+0x310>)
 800223e:	f000 ff29 	bl	8003094 <USART1PutString>
	}
//	HAL_Delay(10);
}
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2401d6dc 	.word	0x2401d6dc
 800224c:	2401d6d8 	.word	0x2401d6d8
 8002250:	24000028 	.word	0x24000028
 8002254:	08011f10 	.word	0x08011f10
 8002258:	2401d6f0 	.word	0x2401d6f0
 800225c:	2401d6f4 	.word	0x2401d6f4
 8002260:	08011f30 	.word	0x08011f30
 8002264:	08011f44 	.word	0x08011f44
 8002268:	08011f68 	.word	0x08011f68

0800226c <ADC_FFT>:

void ADC_FFT(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	flag = 0;
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <ADC_FFT+0x54>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
	Para_Init();
 8002276:	f7ff fbfd 	bl	8001a74 <Para_Init>
	ADC1_Get();
 800227a:	f7ff fc5d 	bl	8001b38 <ADC1_Get>
	//Input_Simulate();
	HandleFFT();
 800227e:	f7ff fd01 	bl	8001c84 <HandleFFT>
	PrintMag();
 8002282:	f7ff fd6d 	bl	8001d60 <PrintMag>
	if (c == '6' ||  c == '7'){f =1;}
 8002286:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <ADC_FFT+0x58>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b36      	cmp	r3, #54	@ 0x36
 800228c:	d003      	beq.n	8002296 <ADC_FFT+0x2a>
 800228e:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <ADC_FFT+0x58>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b37      	cmp	r3, #55	@ 0x37
 8002294:	d103      	bne.n	800229e <ADC_FFT+0x32>
 8002296:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <ADC_FFT+0x5c>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e002      	b.n	80022a4 <ADC_FFT+0x38>
	else {f = 0;}
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <ADC_FFT+0x5c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
	if (c == '1' || c == '0'){HAL_TIM_PWM_Stop(&htim4 , TIM_CHANNEL_2);}
 80022a4:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <ADC_FFT+0x58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b31      	cmp	r3, #49	@ 0x31
 80022aa:	d003      	beq.n	80022b4 <ADC_FFT+0x48>
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <ADC_FFT+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b30      	cmp	r3, #48	@ 0x30
 80022b2:	d103      	bne.n	80022bc <ADC_FFT+0x50>
 80022b4:	2104      	movs	r1, #4
 80022b6:	4805      	ldr	r0, [pc, #20]	@ (80022cc <ADC_FFT+0x60>)
 80022b8:	f00a fd24 	bl	800cd04 <HAL_TIM_PWM_Stop>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2401d4dc 	.word	0x2401d4dc
 80022c4:	24000028 	.word	0x24000028
 80022c8:	2401d6ec 	.word	0x2401d6ec
 80022cc:	2401d6fc 	.word	0x2401d6fc

080022d0 <PWM_Output>:

void PWM_Output(int frequency , double r)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	ed87 0b00 	vstr	d0, [r7]
	rate = r;
 80022dc:	4916      	ldr	r1, [pc, #88]	@ (8002338 <PWM_Output+0x68>)
 80022de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e2:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80022e6:	2104      	movs	r1, #4
 80022e8:	4814      	ldr	r0, [pc, #80]	@ (800233c <PWM_Output+0x6c>)
 80022ea:	f00a fbfd 	bl	800cae8 <HAL_TIM_PWM_Start>
	//WRITE_REG(TIM4->CCR1,(TIM4->ARR+1)*rate);
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,(TIM4->ARR+1)*rate);
 80022ee:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <PWM_Output+0x70>)
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	3301      	adds	r3, #1
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <PWM_Output+0x68>)
 80022fe:	ed93 7b00 	vldr	d7, [r3]
 8002302:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002306:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <PWM_Output+0x6c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800230e:	ee17 2a90 	vmov	r2, s15
 8002312:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->ARR=1000000/frequency-1;
 8002314:	4a0b      	ldr	r2, [pc, #44]	@ (8002344 <PWM_Output+0x74>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	fb92 f3f3 	sdiv	r3, r2, r3
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <PWM_Output+0x70>)
 8002320:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->CR1 &= ~TIM_CR1_ARPE;
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <PWM_Output+0x70>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a06      	ldr	r2, [pc, #24]	@ (8002340 <PWM_Output+0x70>)
 8002328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800232c:	6013      	str	r3, [r2, #0]
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2401d6d0 	.word	0x2401d6d0
 800233c:	2401d6fc 	.word	0x2401d6fc
 8002340:	40000800 	.word	0x40000800
 8002344:	000f4240 	.word	0x000f4240

08002348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800234e:	f000 fa47 	bl	80027e0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002352:	4b51      	ldr	r3, [pc, #324]	@ (8002498 <main+0x150>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11b      	bne.n	8002396 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800235e:	f3bf 8f4f 	dsb	sy
}
 8002362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002364:	f3bf 8f6f 	isb	sy
}
 8002368:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800236a:	4b4b      	ldr	r3, [pc, #300]	@ (8002498 <main+0x150>)
 800236c:	2200      	movs	r2, #0
 800236e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002372:	f3bf 8f4f 	dsb	sy
}
 8002376:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002378:	f3bf 8f6f 	isb	sy
}
 800237c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800237e:	4b46      	ldr	r3, [pc, #280]	@ (8002498 <main+0x150>)
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	4a45      	ldr	r2, [pc, #276]	@ (8002498 <main+0x150>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002388:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800238a:	f3bf 8f4f 	dsb	sy
}
 800238e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002390:	f3bf 8f6f 	isb	sy
}
 8002394:	e000      	b.n	8002398 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002396:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002398:	4b3f      	ldr	r3, [pc, #252]	@ (8002498 <main+0x150>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d138      	bne.n	8002416 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80023a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002498 <main+0x150>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80023ac:	f3bf 8f4f 	dsb	sy
}
 80023b0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80023b2:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <main+0x150>)
 80023b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023b8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0b5b      	lsrs	r3, r3, #13
 80023be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80023c2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023cc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80023d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023dc:	492e      	ldr	r1, [pc, #184]	@ (8002498 <main+0x150>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ef      	bne.n	80023ce <main+0x86>
    } while(sets-- != 0U);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	60ba      	str	r2, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e5      	bne.n	80023c4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80023f8:	f3bf 8f4f 	dsb	sy
}
 80023fc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <main+0x150>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	4a25      	ldr	r2, [pc, #148]	@ (8002498 <main+0x150>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002408:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800240a:	f3bf 8f4f 	dsb	sy
}
 800240e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002410:	f3bf 8f6f 	isb	sy
}
 8002414:	e000      	b.n	8002418 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002416:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002418:	f000 fe86 	bl	8003128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800241c:	f000 f846 	bl	80024ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002420:	f7ff f96a 	bl	80016f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002424:	f7ff f940 	bl	80016a8 <MX_DMA_Init>
  MX_TIM7_Init();
 8002428:	f000 fbe0 	bl	8002bec <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800242c:	f000 fd74 	bl	8002f18 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002430:	f7ff f9dc 	bl	80017ec <MX_I2C1_Init>
  MX_TIM15_Init();
 8002434:	f000 fc10 	bl	8002c58 <MX_TIM15_Init>
  MX_DAC1_Init();
 8002438:	f7ff f88a 	bl	8001550 <MX_DAC1_Init>
  MX_ADC1_Init();
 800243c:	f7fe ff44 	bl	80012c8 <MX_ADC1_Init>
  MX_TIM5_Init();
 8002440:	f000 fb86 	bl	8002b50 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002444:	f000 fb2a 	bl	8002a9c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Music_Init();
 8002448:	f7ff fd02 	bl	8001e50 <Music_Init>
  Para_Init();
 800244c:	f7ff fb12 	bl	8001a74 <Para_Init>
  //adc_init();
//  ADC1_Get();
  ASK_Output(1000);
 8002450:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002454:	f7ff fce6 	bl	8001e24 <ASK_Output>
  PWM_Output(1000 , 0.2);
 8002458:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8002490 <main+0x148>
 800245c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002460:	f7ff ff36 	bl	80022d0 <PWM_Output>
  //Is_Music();
  //ADC1_Get();
  HAL_GPIO_WritePin(GPIOA , GPIO_PIN_1 , GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	2102      	movs	r1, #2
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <main+0x154>)
 800246a:	f006 fb1b 	bl	8008aa4 <HAL_GPIO_WritePin>
//  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&c,1);
 800246e:	2201      	movs	r2, #1
 8002470:	490b      	ldr	r1, [pc, #44]	@ (80024a0 <main+0x158>)
 8002472:	480c      	ldr	r0, [pc, #48]	@ (80024a4 <main+0x15c>)
 8002474:	f00b fdee 	bl	800e054 <HAL_UART_Receive_IT>
	  //ADC_FFT();
//	  PWM_Output(1000 , 0.2);
//	  Is_Music_OZWithInit();
//	  PWM_Output(20000 , 0.2);
	  //ADC_FFT();
	  if (f==0){ADC_FFT();}
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <main+0x160>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <main+0x13e>
 8002480:	f7ff fef4 	bl	800226c <ADC_FFT>
 8002484:	e7f8      	b.n	8002478 <main+0x130>
	  else {Is_Music_OZWithInit();}
 8002486:	f7ff fd67 	bl	8001f58 <Is_Music_OZWithInit>
	  if (f==0){ADC_FFT();}
 800248a:	e7f5      	b.n	8002478 <main+0x130>
 800248c:	f3af 8000 	nop.w
 8002490:	9999999a 	.word	0x9999999a
 8002494:	3fc99999 	.word	0x3fc99999
 8002498:	e000ed00 	.word	0xe000ed00
 800249c:	58020000 	.word	0x58020000
 80024a0:	24000028 	.word	0x24000028
 80024a4:	2401d82c 	.word	0x2401d82c
 80024a8:	2401d6ec 	.word	0x2401d6ec

080024ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b09e      	sub	sp, #120	@ 0x78
 80024b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024b6:	224c      	movs	r2, #76	@ 0x4c
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f00e f914 	bl	80106e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	2220      	movs	r2, #32
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00e f90d 	bl	80106e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80024ce:	2002      	movs	r0, #2
 80024d0:	f006 fc2a 	bl	8008d28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	4b4c      	ldr	r3, [pc, #304]	@ (800260c <SystemClock_Config+0x160>)
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	4a4b      	ldr	r2, [pc, #300]	@ (800260c <SystemClock_Config+0x160>)
 80024de:	f023 0301 	bic.w	r3, r3, #1
 80024e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80024e4:	4b49      	ldr	r3, [pc, #292]	@ (800260c <SystemClock_Config+0x160>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	4b48      	ldr	r3, [pc, #288]	@ (8002610 <SystemClock_Config+0x164>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4a47      	ldr	r2, [pc, #284]	@ (8002610 <SystemClock_Config+0x164>)
 80024f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024f8:	6193      	str	r3, [r2, #24]
 80024fa:	4b45      	ldr	r3, [pc, #276]	@ (8002610 <SystemClock_Config+0x164>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002506:	bf00      	nop
 8002508:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <SystemClock_Config+0x164>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002514:	d1f8      	bne.n	8002508 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b3f      	ldr	r3, [pc, #252]	@ (8002614 <SystemClock_Config+0x168>)
 8002518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800251c:	4a3d      	ldr	r2, [pc, #244]	@ (8002614 <SystemClock_Config+0x168>)
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002526:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <SystemClock_Config+0x168>)
 8002528:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002534:	2300      	movs	r3, #0
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <SystemClock_Config+0x164>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a34      	ldr	r2, [pc, #208]	@ (8002610 <SystemClock_Config+0x164>)
 800253e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <SystemClock_Config+0x164>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <SystemClock_Config+0x160>)
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	4a2e      	ldr	r2, [pc, #184]	@ (800260c <SystemClock_Config+0x160>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800255a:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <SystemClock_Config+0x160>)
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002566:	bf00      	nop
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <SystemClock_Config+0x164>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002574:	d1f8      	bne.n	8002568 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002576:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <SystemClock_Config+0x168>)
 8002578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	4a25      	ldr	r2, [pc, #148]	@ (8002614 <SystemClock_Config+0x168>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002586:	2301      	movs	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800258a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002590:	2302      	movs	r3, #2
 8002592:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002594:	2302      	movs	r3, #2
 8002596:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002598:	2305      	movs	r3, #5
 800259a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800259c:	23c0      	movs	r3, #192	@ 0xc0
 800259e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025a8:	2302      	movs	r3, #2
 80025aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80025ac:	2308      	movs	r3, #8
 80025ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025bc:	4618      	mov	r0, r3
 80025be:	f006 fbed 	bl	8008d9c <HAL_RCC_OscConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <SystemClock_Config+0x120>
  {
    Error_Handler();
 80025c8:	f000 f968 	bl	800289c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025cc:	233f      	movs	r3, #63	@ 0x3f
 80025ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d0:	2303      	movs	r3, #3
 80025d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80025d8:	2308      	movs	r3, #8
 80025da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80025dc:	2340      	movs	r3, #64	@ 0x40
 80025de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80025e0:	2340      	movs	r3, #64	@ 0x40
 80025e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80025e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80025ea:	2340      	movs	r3, #64	@ 0x40
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	2104      	movs	r1, #4
 80025f4:	4618      	mov	r0, r3
 80025f6:	f007 f82d 	bl	8009654 <HAL_RCC_ClockConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002600:	f000 f94c 	bl	800289c <Error_Handler>
  }
}
 8002604:	bf00      	nop
 8002606:	3778      	adds	r7, #120	@ 0x78
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	58000400 	.word	0x58000400
 8002610:	58024800 	.word	0x58024800
 8002614:	58024400 	.word	0x58024400

08002618 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	24002b58 	.word	0x24002b58

08002638 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    if(TIM5 == htim->Instance)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1a      	ldr	r2, [pc, #104]	@ (80026b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d116      	bne.n	8002678 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
        if(CNT)
 800264a:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_TIM_PeriodElapsedCallback+0x2e>
    {
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002658:	4817      	ldr	r0, [pc, #92]	@ (80026b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800265a:	f006 fa23 	bl	8008aa4 <HAL_GPIO_WritePin>
     CNT=0;
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e008      	b.n	8002678 <HAL_TIM_PeriodElapsedCallback+0x40>
    }
    else
    {
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002666:	2201      	movs	r2, #1
 8002668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800266c:	4812      	ldr	r0, [pc, #72]	@ (80026b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800266e:	f006 fa19 	bl	8008aa4 <HAL_GPIO_WritePin>
     CNT=1;
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]

    }
  }
    if (TIM4 == htim->Instance)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0f      	ldr	r2, [pc, #60]	@ (80026bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_TIM_PeriodElapsedCallback+0x6e>
    {
    	WRITE_REG(TIM4->CCR1,(TIM4->ARR+1)*rate);
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002686:	3301      	adds	r3, #1
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002692:	ed93 7b00 	vldr	d7, [r3]
 8002696:	ee26 7b07 	vmul.f64	d7, d6, d7
 800269a:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800269c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80026a0:	ee17 2a90 	vmov	r2, s15
 80026a4:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40000c00 	.word	0x40000c00
 80026b4:	2401d6f8 	.word	0x2401d6f8
 80026b8:	58020c00 	.word	0x58020c00
 80026bc:	40000800 	.word	0x40000800
 80026c0:	2401d6d0 	.word	0x2401d6d0
 80026c4:	00000000 	.word	0x00000000

080026c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    if(huart->Instance==USART1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3c      	ldr	r2, [pc, #240]	@ (80027c8 <HAL_UART_RxCpltCallback+0x100>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d160      	bne.n	800279c <HAL_UART_RxCpltCallback+0xd4>
    {
        if(c=='0')
 80026da:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b30      	cmp	r3, #48	@ 0x30
 80026e0:	d102      	bne.n	80026e8 <HAL_UART_RxCpltCallback+0x20>
        {
        	f = 0;
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
        }
        if(c=='1')
 80026e8:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b31      	cmp	r3, #49	@ 0x31
 80026ee:	d102      	bne.n	80026f6 <HAL_UART_RxCpltCallback+0x2e>
        {
        	f = 0;
 80026f0:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
        }
         if(c=='2')
 80026f6:	4b35      	ldr	r3, [pc, #212]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b32      	cmp	r3, #50	@ 0x32
 80026fc:	d108      	bne.n	8002710 <HAL_UART_RxCpltCallback+0x48>
        {
        		 PWM_Output(20000 , 0.2);
 80026fe:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 80027a8 <HAL_UART_RxCpltCallback+0xe0>
 8002702:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8002706:	f7ff fde3 	bl	80022d0 <PWM_Output>
        		 f = 0;
 800270a:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
        }
        if(c=='3')
 8002710:	4b2e      	ldr	r3, [pc, #184]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b33      	cmp	r3, #51	@ 0x33
 8002716:	d108      	bne.n	800272a <HAL_UART_RxCpltCallback+0x62>
        {
        	     PWM_Output(20000 , 0.4);
 8002718:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 80027b0 <HAL_UART_RxCpltCallback+0xe8>
 800271c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8002720:	f7ff fdd6 	bl	80022d0 <PWM_Output>
        	     f = 0;
 8002724:	4b2a      	ldr	r3, [pc, #168]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
        }
        if(c=='4')
 800272a:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b34      	cmp	r3, #52	@ 0x34
 8002730:	d108      	bne.n	8002744 <HAL_UART_RxCpltCallback+0x7c>
        {
        		 PWM_Output(20000 , 0.6);
 8002732:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 80027b8 <HAL_UART_RxCpltCallback+0xf0>
 8002736:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800273a:	f7ff fdc9 	bl	80022d0 <PWM_Output>
        		 f = 0;
 800273e:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
        }
        if(c=='5')
 8002744:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b35      	cmp	r3, #53	@ 0x35
 800274a:	d108      	bne.n	800275e <HAL_UART_RxCpltCallback+0x96>
        {
        		PWM_Output(20000 , 0.8);
 800274c:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80027c0 <HAL_UART_RxCpltCallback+0xf8>
 8002750:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8002754:	f7ff fdbc 	bl	80022d0 <PWM_Output>
        		f = 0;
 8002758:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
        }
         if(c=='6')
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b36      	cmp	r3, #54	@ 0x36
 8002764:	d108      	bne.n	8002778 <HAL_UART_RxCpltCallback+0xb0>
        {
        	 human_killed=  1;
 8002766:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_UART_RxCpltCallback+0x10c>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
        	 music_killed = 0;
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_UART_RxCpltCallback+0x110>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
        	 f= 1;
 8002772:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
        }
        if(c=='7')
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b37      	cmp	r3, #55	@ 0x37
 800277e:	d108      	bne.n	8002792 <HAL_UART_RxCpltCallback+0xca>
        {
        	human_killed=  1;
 8002780:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HAL_UART_RxCpltCallback+0x10c>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
        	music_killed = 0;
 8002786:	4b14      	ldr	r3, [pc, #80]	@ (80027d8 <HAL_UART_RxCpltCallback+0x110>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
        	f = 1;
 800278c:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <HAL_UART_RxCpltCallback+0x108>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&c,1);
 8002792:	2201      	movs	r2, #1
 8002794:	490d      	ldr	r1, [pc, #52]	@ (80027cc <HAL_UART_RxCpltCallback+0x104>)
 8002796:	4811      	ldr	r0, [pc, #68]	@ (80027dc <HAL_UART_RxCpltCallback+0x114>)
 8002798:	f00b fc5c 	bl	800e054 <HAL_UART_Receive_IT>
    }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f3af 8000 	nop.w
 80027a8:	9999999a 	.word	0x9999999a
 80027ac:	3fc99999 	.word	0x3fc99999
 80027b0:	9999999a 	.word	0x9999999a
 80027b4:	3fd99999 	.word	0x3fd99999
 80027b8:	33333333 	.word	0x33333333
 80027bc:	3fe33333 	.word	0x3fe33333
 80027c0:	9999999a 	.word	0x9999999a
 80027c4:	3fe99999 	.word	0x3fe99999
 80027c8:	40011000 	.word	0x40011000
 80027cc:	24000028 	.word	0x24000028
 80027d0:	2401d6ec 	.word	0x2401d6ec
 80027d4:	2401d6e4 	.word	0x2401d6e4
 80027d8:	2401d6e8 	.word	0x2401d6e8
 80027dc:	2401d82c 	.word	0x2401d82c

080027e0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80027e6:	463b      	mov	r3, r7
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80027f2:	f002 fccf 	bl	8005194 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80027fe:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8002802:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002804:	2312      	movs	r3, #18
 8002806:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002808:	2300      	movs	r3, #0
 800280a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800280c:	2301      	movs	r3, #1
 800280e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002810:	2303      	movs	r3, #3
 8002812:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800281c:	2301      	movs	r3, #1
 800281e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002824:	463b      	mov	r3, r7
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fcec 	bl	8005204 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800282c:	2301      	movs	r3, #1
 800282e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002830:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002834:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002836:	2310      	movs	r3, #16
 8002838:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002842:	463b      	mov	r3, r7
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fcdd 	bl	8005204 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800284a:	2302      	movs	r3, #2
 800284c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800284e:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <MPU_Config+0xb4>)
 8002850:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002852:	463b      	mov	r3, r7
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fcd5 	bl	8005204 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800285a:	2303      	movs	r3, #3
 800285c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <MPU_Config+0xb8>)
 8002860:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002862:	230e      	movs	r3, #14
 8002864:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002866:	463b      	mov	r3, r7
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fccb 	bl	8005204 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800286e:	2304      	movs	r3, #4
 8002870:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8002872:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8002876:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002878:	230f      	movs	r3, #15
 800287a:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800287c:	463b      	mov	r3, r7
 800287e:	4618      	mov	r0, r3
 8002880:	f002 fcc0 	bl	8005204 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002884:	2004      	movs	r0, #4
 8002886:	f002 fc9d 	bl	80051c4 <HAL_MPU_Enable>

}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	30020000 	.word	0x30020000
 8002898:	30040000 	.word	0x30040000

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <Error_Handler+0x8>

080028a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_MspInit+0x30>)
 80028b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028b4:	4a08      	ldr	r2, [pc, #32]	@ (80028d8 <HAL_MspInit+0x30>)
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_MspInit+0x30>)
 80028c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	58024400 	.word	0x58024400

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <NMI_Handler+0x4>

080028e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <MemManage_Handler+0x4>

080028f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <UsageFault_Handler+0x4>

08002904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002932:	f000 fc6b 	bl	800320c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002940:	4802      	ldr	r0, [pc, #8]	@ (800294c <DMA1_Stream0_IRQHandler+0x10>)
 8002942:	f004 fae3 	bl	8006f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	24002a00 	.word	0x24002a00

08002950 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <DMA1_Stream1_IRQHandler+0x10>)
 8002956:	f004 fad9 	bl	8006f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	24002a8c 	.word	0x24002a8c

08002964 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <USART1_IRQHandler+0x10>)
 800296a:	f00b fbbf 	bl	800e0ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2401d82c 	.word	0x2401d82c

08002978 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800297c:	4802      	ldr	r0, [pc, #8]	@ (8002988 <TIM5_IRQHandler+0x10>)
 800297e:	f00a fa57 	bl	800ce30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2401d748 	.word	0x2401d748

0800298c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002990:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <SystemInit+0xe4>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002996:	4a36      	ldr	r2, [pc, #216]	@ (8002a70 <SystemInit+0xe4>)
 8002998:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800299c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029a0:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <SystemInit+0xe8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d807      	bhi.n	80029bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ac:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <SystemInit+0xe8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 030f 	bic.w	r3, r3, #15
 80029b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a74 <SystemInit+0xe8>)
 80029b6:	f043 0307 	orr.w	r3, r3, #7
 80029ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <SystemInit+0xec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a78 <SystemInit+0xec>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a78 <SystemInit+0xec>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <SystemInit+0xec>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4929      	ldr	r1, [pc, #164]	@ (8002a78 <SystemInit+0xec>)
 80029d4:	4b29      	ldr	r3, [pc, #164]	@ (8002a7c <SystemInit+0xf0>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029da:	4b26      	ldr	r3, [pc, #152]	@ (8002a74 <SystemInit+0xe8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <SystemInit+0xe8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 030f 	bic.w	r3, r3, #15
 80029ee:	4a21      	ldr	r2, [pc, #132]	@ (8002a74 <SystemInit+0xe8>)
 80029f0:	f043 0307 	orr.w	r3, r3, #7
 80029f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029f6:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <SystemInit+0xec>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <SystemInit+0xec>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a02:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <SystemInit+0xec>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <SystemInit+0xec>)
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <SystemInit+0xf4>)
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <SystemInit+0xec>)
 8002a10:	4a1c      	ldr	r2, [pc, #112]	@ (8002a84 <SystemInit+0xf8>)
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a14:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <SystemInit+0xec>)
 8002a16:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <SystemInit+0xfc>)
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a1a:	4b17      	ldr	r3, [pc, #92]	@ (8002a78 <SystemInit+0xec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a20:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <SystemInit+0xec>)
 8002a22:	4a19      	ldr	r2, [pc, #100]	@ (8002a88 <SystemInit+0xfc>)
 8002a24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a26:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <SystemInit+0xec>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	@ (8002a78 <SystemInit+0xec>)
 8002a2e:	4a16      	ldr	r2, [pc, #88]	@ (8002a88 <SystemInit+0xfc>)
 8002a30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a32:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <SystemInit+0xec>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <SystemInit+0xec>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a78 <SystemInit+0xec>)
 8002a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <SystemInit+0xec>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <SystemInit+0x100>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <SystemInit+0x104>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a56:	d202      	bcs.n	8002a5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <SystemInit+0x108>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <SystemInit+0x10c>)
 8002a60:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	52002000 	.word	0x52002000
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a80:	02020200 	.word	0x02020200
 8002a84:	01ff0000 	.word	0x01ff0000
 8002a88:	01010280 	.word	0x01010280
 8002a8c:	5c001000 	.word	0x5c001000
 8002a90:	ffff0000 	.word	0xffff0000
 8002a94:	51008108 	.word	0x51008108
 8002a98:	52004000 	.word	0x52004000

08002a9c <MX_TIM4_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	@ 0x28
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aae:	463b      	mov	r3, r7
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ac0:	4b21      	ldr	r3, [pc, #132]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002ac2:	4a22      	ldr	r2, [pc, #136]	@ (8002b4c <MX_TIM4_Init+0xb0>)
 8002ac4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002ac8:	22ef      	movs	r2, #239	@ 0xef
 8002aca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002ad4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002ad8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ae0:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ae6:	4818      	ldr	r0, [pc, #96]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002ae8:	f009 ffa6 	bl	800ca38 <HAL_TIM_PWM_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002af2:	f7ff fed3 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4619      	mov	r1, r3
 8002b04:	4810      	ldr	r0, [pc, #64]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002b06:	f00b f91b 	bl	800dd40 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002b10:	f7ff fec4 	bl	800289c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b14:	2360      	movs	r3, #96	@ 0x60
 8002b16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b24:	463b      	mov	r3, r7
 8002b26:	2204      	movs	r2, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4807      	ldr	r0, [pc, #28]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002b2c:	f00a faa0 	bl	800d070 <HAL_TIM_PWM_ConfigChannel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002b36:	f7ff feb1 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b3a:	4803      	ldr	r0, [pc, #12]	@ (8002b48 <MX_TIM4_Init+0xac>)
 8002b3c:	f000 f954 	bl	8002de8 <HAL_TIM_MspPostInit>

}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	@ 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	2401d6fc 	.word	0x2401d6fc
 8002b4c:	40000800 	.word	0x40000800

08002b50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b56:	f107 0310 	add.w	r3, r7, #16
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <MX_TIM5_Init+0x98>)
 8002b72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002b76:	22ef      	movs	r2, #239	@ 0xef
 8002b78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000-1;
 8002b80:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002b82:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002b86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b88:	4b16      	ldr	r3, [pc, #88]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8e:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b94:	4813      	ldr	r0, [pc, #76]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002b96:	f009 fde7 	bl	800c768 <HAL_TIM_Base_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002ba0:	f7ff fe7c 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002baa:	f107 0310 	add.w	r3, r7, #16
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480c      	ldr	r0, [pc, #48]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002bb2:	f00a fb71 	bl	800d298 <HAL_TIM_ConfigClockSource>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002bbc:	f7ff fe6e 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4805      	ldr	r0, [pc, #20]	@ (8002be4 <MX_TIM5_Init+0x94>)
 8002bce:	f00b f8b7 	bl	800dd40 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002bd8:	f7ff fe60 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2401d748 	.word	0x2401d748
 8002be8:	40000c00 	.word	0x40000c00

08002bec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <MX_TIM7_Init+0x64>)
 8002bfe:	4a15      	ldr	r2, [pc, #84]	@ (8002c54 <MX_TIM7_Init+0x68>)
 8002c00:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002c02:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <MX_TIM7_Init+0x64>)
 8002c04:	22ef      	movs	r2, #239	@ 0xef
 8002c06:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <MX_TIM7_Init+0x64>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <MX_TIM7_Init+0x64>)
 8002c10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c14:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <MX_TIM7_Init+0x64>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c1c:	480c      	ldr	r0, [pc, #48]	@ (8002c50 <MX_TIM7_Init+0x64>)
 8002c1e:	f009 fda3 	bl	800c768 <HAL_TIM_Base_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002c28:	f7ff fe38 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <MX_TIM7_Init+0x64>)
 8002c3a:	f00b f881 	bl	800dd40 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002c44:	f7ff fe2a 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2401d794 	.word	0x2401d794
 8002c54:	40001400 	.word	0x40001400

08002c58 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002c78:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <MX_TIM15_Init+0x9c>)
 8002c7a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 50-1;
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002c7e:	2231      	movs	r2, #49	@ 0x31
 8002c80:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 200-1;
 8002c88:	4b19      	ldr	r3, [pc, #100]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002c8a:	22c7      	movs	r2, #199	@ 0xc7
 8002c8c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002c94:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002c9c:	2280      	movs	r2, #128	@ 0x80
 8002c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002ca0:	4813      	ldr	r0, [pc, #76]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002ca2:	f009 fd61 	bl	800c768 <HAL_TIM_Base_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8002cac:	f7ff fdf6 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	4619      	mov	r1, r3
 8002cbc:	480c      	ldr	r0, [pc, #48]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002cbe:	f00a faeb 	bl	800d298 <HAL_TIM_ConfigClockSource>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002cc8:	f7ff fde8 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	@ (8002cf0 <MX_TIM15_Init+0x98>)
 8002cda:	f00b f831 	bl	800dd40 <HAL_TIMEx_MasterConfigSynchronization>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002ce4:	f7ff fdda 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2401d7e0 	.word	0x2401d7e0
 8002cf4:	40014000 	.word	0x40014000

08002cf8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	@ (8002d34 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10e      	bne.n	8002d28 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_TIM_PWM_MspInit+0x40>)
 8002d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d10:	4a09      	ldr	r2, [pc, #36]	@ (8002d38 <HAL_TIM_PWM_MspInit+0x40>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d1a:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <HAL_TIM_PWM_MspInit+0x40>)
 8002d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40000800 	.word	0x40000800
 8002d38:	58024400 	.word	0x58024400

08002d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a23      	ldr	r2, [pc, #140]	@ (8002dd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d117      	bne.n	8002d7e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d4e:	4b23      	ldr	r3, [pc, #140]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d54:	4a21      	ldr	r2, [pc, #132]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002d56:	f043 0308 	orr.w	r3, r3, #8
 8002d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2101      	movs	r1, #1
 8002d70:	2032      	movs	r0, #50	@ 0x32
 8002d72:	f002 f9da 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d76:	2032      	movs	r0, #50	@ 0x32
 8002d78:	f002 f9f1 	bl	800515e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002d7c:	e028      	b.n	8002dd0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM7)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <HAL_TIM_Base_MspInit+0xa4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10f      	bne.n	8002da8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d88:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d8e:	4a13      	ldr	r2, [pc, #76]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d98:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
}
 8002da6:	e013      	b.n	8002dd0 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM15)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0d      	ldr	r2, [pc, #52]	@ (8002de4 <HAL_TIM_Base_MspInit+0xa8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002db8:	4a08      	ldr	r2, [pc, #32]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <HAL_TIM_Base_MspInit+0xa0>)
 8002dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40000c00 	.word	0x40000c00
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	40001400 	.word	0x40001400
 8002de4:	40014000 	.word	0x40014000

08002de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <HAL_TIM_MspPostInit+0x6c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d11f      	bne.n	8002e4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HAL_TIM_MspPostInit+0x70>)
 8002e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e10:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <HAL_TIM_MspPostInit+0x70>)
 8002e12:	f043 0308 	orr.w	r3, r3, #8
 8002e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <HAL_TIM_MspPostInit+0x70>)
 8002e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	4619      	mov	r1, r3
 8002e44:	4805      	ldr	r0, [pc, #20]	@ (8002e5c <HAL_TIM_MspPostInit+0x74>)
 8002e46:	f005 fb73 	bl	8008530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e4a:	bf00      	nop
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40000800 	.word	0x40000800
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	58020c00 	.word	0x58020c00

08002e60 <setFre>:
  }
}

/* USER CODE BEGIN 1 */
void setFre(double frequency)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	ed87 0b00 	vstr	d0, [r7]
	   __HAL_TIM_SET_AUTORELOAD(&htim5, 500000/frequency -1 );
 8002e6a:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8002f08 <setFre+0xa8>
 8002e6e:	ed97 6b00 	vldr	d6, [r7]
 8002e72:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e76:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002e7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e7e:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <setFre+0xb0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002e86:	ee17 2a90 	vmov	r2, s15
 8002e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e8c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8002f08 <setFre+0xa8>
 8002e90:	ed97 6b00 	vldr	d6, [r7]
 8002e94:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002e98:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002e9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ea0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ea4:	ee17 2a90 	vmov	r2, s15
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <setFre+0xb0>)
 8002eaa:	60da      	str	r2, [r3, #12]
	   TIM5->ARR = 500000/frequency -1 ;
 8002eac:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8002f08 <setFre+0xa8>
 8002eb0:	ed97 6b00 	vldr	d6, [r7]
 8002eb4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002eb8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002ebc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <setFre+0xb4>)
 8002ec2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ec6:	ee17 2a90 	vmov	r2, s15
 8002eca:	62da      	str	r2, [r3, #44]	@ 0x2c
       htim5.Init.Period = 500000/frequency - 1;
 8002ecc:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8002f08 <setFre+0xa8>
 8002ed0:	ed97 6b00 	vldr	d6, [r7]
 8002ed4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002ed8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8002edc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ee0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002ee4:	ee17 2a90 	vmov	r2, s15
 8002ee8:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <setFre+0xb0>)
 8002eea:	60da      	str	r2, [r3, #12]
       TIM5->CR1 &= ~TIM_CR1_ARPE;
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <setFre+0xb4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a08      	ldr	r2, [pc, #32]	@ (8002f14 <setFre+0xb4>)
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	f3af 8000 	nop.w
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	411e8480 	.word	0x411e8480
 8002f10:	2401d748 	.word	0x2401d748
 8002f14:	40000c00 	.word	0x40000c00

08002f18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f1c:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f1e:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <MX_USART1_UART_Init+0x94>)
 8002f20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f22:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f5a:	4b13      	ldr	r3, [pc, #76]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f60:	4811      	ldr	r0, [pc, #68]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f62:	f00a ff99 	bl	800de98 <HAL_UART_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f6c:	f7ff fc96 	bl	800289c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f70:	2100      	movs	r1, #0
 8002f72:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f74:	f00d faed 	bl	8010552 <HAL_UARTEx_SetTxFifoThreshold>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f7e:	f7ff fc8d 	bl	800289c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f82:	2100      	movs	r1, #0
 8002f84:	4808      	ldr	r0, [pc, #32]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f86:	f00d fb22 	bl	80105ce <HAL_UARTEx_SetRxFifoThreshold>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f90:	f7ff fc84 	bl	800289c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f94:	4804      	ldr	r0, [pc, #16]	@ (8002fa8 <MX_USART1_UART_Init+0x90>)
 8002f96:	f00d faa3 	bl	80104e0 <HAL_UARTEx_DisableFifoMode>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fa0:	f7ff fc7c 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2401d82c 	.word	0x2401d82c
 8002fac:	40011000 	.word	0x40011000

08002fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	22c0      	movs	r2, #192	@ 0xc0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f00d fb89 	bl	80106e8 <memset>
  if(uartHandle->Instance==USART1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2b      	ldr	r2, [pc, #172]	@ (8003088 <HAL_UART_MspInit+0xd8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d14e      	bne.n	800307e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fe0:	f04f 0201 	mov.w	r2, #1
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff2:	f107 0310 	add.w	r3, r7, #16
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f006 feb8 	bl	8009d6c <HAL_RCCEx_PeriphCLKConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003002:	f7ff fc4b 	bl	800289c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003006:	4b21      	ldr	r3, [pc, #132]	@ (800308c <HAL_UART_MspInit+0xdc>)
 8003008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800300c:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <HAL_UART_MspInit+0xdc>)
 800300e:	f043 0310 	orr.w	r3, r3, #16
 8003012:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003016:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <HAL_UART_MspInit+0xdc>)
 8003018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003024:	4b19      	ldr	r3, [pc, #100]	@ (800308c <HAL_UART_MspInit+0xdc>)
 8003026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800302a:	4a18      	ldr	r2, [pc, #96]	@ (800308c <HAL_UART_MspInit+0xdc>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003034:	4b15      	ldr	r3, [pc, #84]	@ (800308c <HAL_UART_MspInit+0xdc>)
 8003036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003042:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800305c:	2304      	movs	r3, #4
 800305e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003062:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003066:	4619      	mov	r1, r3
 8003068:	4809      	ldr	r0, [pc, #36]	@ (8003090 <HAL_UART_MspInit+0xe0>)
 800306a:	f005 fa61 	bl	8008530 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2102      	movs	r1, #2
 8003072:	2025      	movs	r0, #37	@ 0x25
 8003074:	f002 f859 	bl	800512a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003078:	2025      	movs	r0, #37	@ 0x25
 800307a:	f002 f870 	bl	800515e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800307e:	bf00      	nop
 8003080:	37e8      	adds	r7, #232	@ 0xe8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40011000 	.word	0x40011000
 800308c:	58024400 	.word	0x58024400
 8003090:	58020400 	.word	0x58020400

08003094 <USART1PutString>:
  }
}

/* USER CODE BEGIN 1 */
void USART1PutString(char *str)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	unsigned int k=0;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  do
  {
      HAL_UART_Transmit(&huart1,(uint8_t *)(str + k) ,1,1000);
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	18d1      	adds	r1, r2, r3
 80030a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030aa:	2201      	movs	r2, #1
 80030ac:	4808      	ldr	r0, [pc, #32]	@ (80030d0 <USART1PutString+0x3c>)
 80030ae:	f00a ff43 	bl	800df38 <HAL_UART_Transmit>
      k++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3301      	adds	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
  } while(*(str + k)!='\0');
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ed      	bne.n	80030a0 <USART1PutString+0xc>
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2401d82c 	.word	0x2401d82c

080030d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800310c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030d8:	f7ff fc58 	bl	800298c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030dc:	480c      	ldr	r0, [pc, #48]	@ (8003110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030de:	490d      	ldr	r1, [pc, #52]	@ (8003114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003102:	f00d faff 	bl	8010704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003106:	f7ff f91f 	bl	8002348 <main>
  bx  lr
 800310a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800310c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003110:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003114:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8003118:	080142fc 	.word	0x080142fc
  ldr r2, =_sbss
 800311c:	24002980 	.word	0x24002980
  ldr r4, =_ebss
 8003120:	2401db94 	.word	0x2401db94

08003124 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC3_IRQHandler>
	...

08003128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312e:	2003      	movs	r0, #3
 8003130:	f001 fff0 	bl	8005114 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003134:	f006 fc44 	bl	80099c0 <HAL_RCC_GetSysClockFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <HAL_Init+0x68>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	4913      	ldr	r1, [pc, #76]	@ (8003194 <HAL_Init+0x6c>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003152:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <HAL_Init+0x68>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a0e      	ldr	r2, [pc, #56]	@ (8003194 <HAL_Init+0x6c>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	4a0b      	ldr	r2, [pc, #44]	@ (8003198 <HAL_Init+0x70>)
 800316a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800316c:	4a0b      	ldr	r2, [pc, #44]	@ (800319c <HAL_Init+0x74>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003172:	200f      	movs	r0, #15
 8003174:	f000 f814 	bl	80031a0 <HAL_InitTick>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e002      	b.n	8003188 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003182:	f7ff fb91 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58024400 	.word	0x58024400
 8003194:	08011f84 	.word	0x08011f84
 8003198:	24000030 	.word	0x24000030
 800319c:	2400002c 	.word	0x2400002c

080031a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <HAL_InitTick+0x60>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e021      	b.n	80031f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <HAL_InitTick+0x64>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <HAL_InitTick+0x60>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 ffd5 	bl	800517a <HAL_SYSTICK_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00e      	b.n	80031f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d80a      	bhi.n	80031f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e0:	2200      	movs	r2, #0
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031e8:	f001 ff9f 	bl	800512a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ec:	4a06      	ldr	r2, [pc, #24]	@ (8003208 <HAL_InitTick+0x68>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	24000038 	.word	0x24000038
 8003204:	2400002c 	.word	0x2400002c
 8003208:	24000034 	.word	0x24000034

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	@ (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	24000038 	.word	0x24000038
 8003230:	2401d8c0 	.word	0x2401d8c0

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	@ (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	2401d8c0 	.word	0x2401d8c0

0800324c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <HAL_Delay+0x44>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	24000038 	.word	0x24000038

08003294 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_GetREVID+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0c1b      	lsrs	r3, r3, #16
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	5c001000 	.word	0x5c001000

080032ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3360      	adds	r3, #96	@ 0x60
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	611a      	str	r2, [r3, #16]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3360      	adds	r3, #96	@ 0x60
 8003396:	461a      	mov	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]
  }
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b087      	sub	sp, #28
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3330      	adds	r3, #48	@ 0x30
 80033f2:	461a      	mov	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	4413      	add	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	211f      	movs	r1, #31
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	401a      	ands	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	f003 011f 	and.w	r1, r3, #31
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	431a      	orrs	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f023 0203 	bic.w	r2, r3, #3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3314      	adds	r3, #20
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	0e5b      	lsrs	r3, r3, #25
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	4413      	add	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0d1b      	lsrs	r3, r3, #20
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2107      	movs	r1, #7
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	401a      	ands	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0d1b      	lsrs	r3, r3, #20
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	431a      	orrs	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0318 	and.w	r3, r3, #24
 80034da:	4908      	ldr	r1, [pc, #32]	@ (80034fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80034dc:	40d9      	lsrs	r1, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	400b      	ands	r3, r1
 80034e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	000fffff 	.word	0x000fffff

08003500 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 031f 	and.w	r3, r3, #31
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <LL_ADC_DisableDeepPowerDown+0x20>)
 800352a:	4013      	ands	r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6093      	str	r3, [r2, #8]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	5fffffc0 	.word	0x5fffffc0

08003540 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003554:	d101      	bne.n	800355a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <LL_ADC_EnableInternalRegulator+0x24>)
 8003576:	4013      	ands	r3, r2
 8003578:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	6fffffc0 	.word	0x6fffffc0

08003590 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035a4:	d101      	bne.n	80035aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <LL_ADC_Enable+0x24>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	7fffffc0 	.word	0x7fffffc0

080035e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <LL_ADC_Disable+0x24>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	f043 0202 	orr.w	r2, r3, #2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	7fffffc0 	.word	0x7fffffc0

08003608 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <LL_ADC_IsEnabled+0x18>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <LL_ADC_IsEnabled+0x1a>
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d101      	bne.n	8003646 <LL_ADC_IsDisableOngoing+0x18>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <LL_ADC_IsDisableOngoing+0x1a>
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <LL_ADC_REG_StartConversion+0x24>)
 8003662:	4013      	ands	r3, r2
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	7fffffc0 	.word	0x7fffffc0

0800367c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <LL_ADC_REG_StopConversion+0x24>)
 800368a:	4013      	ands	r3, r2
 800368c:	f043 0210 	orr.w	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	7fffffc0 	.word	0x7fffffc0

080036a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d101      	bne.n	80036bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <LL_ADC_INJ_StopConversion+0x24>)
 80036da:	4013      	ands	r3, r2
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	7fffffc0 	.word	0x7fffffc0

080036f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d101      	bne.n	800370c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b089      	sub	sp, #36	@ 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e18f      	b.n	8003a56 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd fe39 	bl	80013bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff feef 	bl	8003540 <LL_ADC_IsDeepPowerDownEnabled>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fed5 	bl	800351c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff0a 	bl	8003590 <LL_ADC_IsInternalRegulatorEnabled>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d114      	bne.n	80037ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff feee 	bl	8003568 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800378c:	4b87      	ldr	r3, [pc, #540]	@ (80039ac <HAL_ADC_Init+0x290>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	4a87      	ldr	r2, [pc, #540]	@ (80039b0 <HAL_ADC_Init+0x294>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	3301      	adds	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800379e:	e002      	b.n	80037a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f9      	bne.n	80037a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff feed 	bl	8003590 <LL_ADC_IsInternalRegulatorEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	f043 0210 	orr.w	r2, r3, #16
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff61 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 80037e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 8129 	bne.w	8003a44 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f040 8125 	bne.w	8003a44 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fefa 	bl	8003608 <LL_ADC_IsEnabled>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d136      	bne.n	8003888 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a65      	ldr	r2, [pc, #404]	@ (80039b4 <HAL_ADC_Init+0x298>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_ADC_Init+0x112>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a63      	ldr	r2, [pc, #396]	@ (80039b8 <HAL_ADC_Init+0x29c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10e      	bne.n	800384c <HAL_ADC_Init+0x130>
 800382e:	4861      	ldr	r0, [pc, #388]	@ (80039b4 <HAL_ADC_Init+0x298>)
 8003830:	f7ff feea 	bl	8003608 <LL_ADC_IsEnabled>
 8003834:	4604      	mov	r4, r0
 8003836:	4860      	ldr	r0, [pc, #384]	@ (80039b8 <HAL_ADC_Init+0x29c>)
 8003838:	f7ff fee6 	bl	8003608 <LL_ADC_IsEnabled>
 800383c:	4603      	mov	r3, r0
 800383e:	4323      	orrs	r3, r4
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e008      	b.n	800385e <HAL_ADC_Init+0x142>
 800384c:	485b      	ldr	r0, [pc, #364]	@ (80039bc <HAL_ADC_Init+0x2a0>)
 800384e:	f7ff fedb 	bl	8003608 <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d012      	beq.n	8003888 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a53      	ldr	r2, [pc, #332]	@ (80039b4 <HAL_ADC_Init+0x298>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_ADC_Init+0x15a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a51      	ldr	r2, [pc, #324]	@ (80039b8 <HAL_ADC_Init+0x29c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d101      	bne.n	800387a <HAL_ADC_Init+0x15e>
 8003876:	4a52      	ldr	r2, [pc, #328]	@ (80039c0 <HAL_ADC_Init+0x2a4>)
 8003878:	e000      	b.n	800387c <HAL_ADC_Init+0x160>
 800387a:	4a52      	ldr	r2, [pc, #328]	@ (80039c4 <HAL_ADC_Init+0x2a8>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f7ff fd12 	bl	80032ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003888:	f7ff fd04 	bl	8003294 <HAL_GetREVID>
 800388c:	4603      	mov	r3, r0
 800388e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003892:	4293      	cmp	r3, r2
 8003894:	d914      	bls.n	80038c0 <HAL_ADC_Init+0x1a4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b10      	cmp	r3, #16
 800389c:	d110      	bne.n	80038c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	7d5b      	ldrb	r3, [r3, #21]
 80038a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80038ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7f1b      	ldrb	r3, [r3, #28]
 80038b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80038b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038b8:	f043 030c 	orr.w	r3, r3, #12
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e00d      	b.n	80038dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7d5b      	ldrb	r3, [r3, #21]
 80038c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80038d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7f1b      	ldrb	r3, [r3, #28]
 80038d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7f1b      	ldrb	r3, [r3, #28]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	045b      	lsls	r3, r3, #17
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4b2c      	ldr	r3, [pc, #176]	@ (80039c8 <HAL_ADC_Init+0x2ac>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	69b9      	ldr	r1, [r7, #24]
 800391e:	430b      	orrs	r3, r1
 8003920:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff febc 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 800392c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fede 	bl	80036f4 <LL_ADC_INJ_IsConversionOngoing>
 8003938:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d15f      	bne.n	8003a00 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d15c      	bne.n	8003a00 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7d1b      	ldrb	r3, [r3, #20]
 800394a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	4b1c      	ldr	r3, [pc, #112]	@ (80039cc <HAL_ADC_Init+0x2b0>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	69b9      	ldr	r1, [r7, #24]
 8003964:	430b      	orrs	r3, r1
 8003966:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800396e:	2b01      	cmp	r3, #1
 8003970:	d130      	bne.n	80039d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <HAL_ADC_Init+0x2b4>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003986:	3a01      	subs	r2, #1
 8003988:	0411      	lsls	r1, r2, #16
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003994:	4311      	orrs	r1, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800399a:	430a      	orrs	r2, r1
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	611a      	str	r2, [r3, #16]
 80039a8:	e01c      	b.n	80039e4 <HAL_ADC_Init+0x2c8>
 80039aa:	bf00      	nop
 80039ac:	2400002c 	.word	0x2400002c
 80039b0:	053e2d63 	.word	0x053e2d63
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40022100 	.word	0x40022100
 80039bc:	58026000 	.word	0x58026000
 80039c0:	40022300 	.word	0x40022300
 80039c4:	58026300 	.word	0x58026300
 80039c8:	fff0c003 	.word	0xfff0c003
 80039cc:	ffffbffc 	.word	0xffffbffc
 80039d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f001 f812 	bl	8004a24 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10c      	bne.n	8003a22 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f023 010f 	bic.w	r1, r3, #15
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a20:	e007      	b.n	8003a32 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 020f 	bic.w	r2, r2, #15
 8003a30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a36:	f023 0303 	bic.w	r3, r3, #3
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54
 8003a42:	e007      	b.n	8003a54 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a48:	f043 0210 	orr.w	r2, r3, #16
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	@ 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd90      	pop	{r4, r7, pc}
 8003a5e:	bf00      	nop

08003a60 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e16e      	b.n	8003d50 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	f043 0202 	orr.w	r2, r3, #2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003a7e:	2103      	movs	r1, #3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fd95 	bl	80045b0 <ADC_ConversionStop>
 8003a86:	4603      	mov	r3, r0
 8003a88:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003a98:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fecb 	bl	800483c <ADC_Disable>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8003cf4 <HAL_ADC_DeInit+0x294>)
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003ace:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8003ade:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003aee:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8003afe:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6919      	ldr	r1, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b77      	ldr	r3, [pc, #476]	@ (8003cf8 <HAL_ADC_DeInit+0x298>)
 8003b1c:	400b      	ands	r3, r1
 8003b1e:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8003b2e:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8003b3e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003b4e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003b70:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003b84:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003b98:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003bac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b50      	ldr	r3, [pc, #320]	@ (8003cfc <HAL_ADC_DeInit+0x29c>)
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b4d      	ldr	r3, [pc, #308]	@ (8003d00 <HAL_ADC_DeInit+0x2a0>)
 8003bcc:	400b      	ands	r3, r1
 8003bce:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <HAL_ADC_DeInit+0x2a0>)
 8003bdc:	400b      	ands	r3, r1
 8003bde:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b46      	ldr	r3, [pc, #280]	@ (8003d04 <HAL_ADC_DeInit+0x2a4>)
 8003bec:	400b      	ands	r3, r1
 8003bee:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2200      	movs	r2, #0
 8003c26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_ADC_DeInit+0x2a8>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <HAL_ADC_DeInit+0x2a8>)
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d08 <HAL_ADC_DeInit+0x2a8>)
 8003c5e:	400b      	ands	r3, r1
 8003c60:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8003c74:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a23      	ldr	r2, [pc, #140]	@ (8003d0c <HAL_ADC_DeInit+0x2ac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_ADC_DeInit+0x22c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <HAL_ADC_DeInit+0x2b0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10e      	bne.n	8003caa <HAL_ADC_DeInit+0x24a>
 8003c8c:	481f      	ldr	r0, [pc, #124]	@ (8003d0c <HAL_ADC_DeInit+0x2ac>)
 8003c8e:	f7ff fcbb 	bl	8003608 <LL_ADC_IsEnabled>
 8003c92:	4604      	mov	r4, r0
 8003c94:	481e      	ldr	r0, [pc, #120]	@ (8003d10 <HAL_ADC_DeInit+0x2b0>)
 8003c96:	f7ff fcb7 	bl	8003608 <LL_ADC_IsEnabled>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4323      	orrs	r3, r4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e008      	b.n	8003cbc <HAL_ADC_DeInit+0x25c>
 8003caa:	481a      	ldr	r0, [pc, #104]	@ (8003d14 <HAL_ADC_DeInit+0x2b4>)
 8003cac:	f7ff fcac 	bl	8003608 <LL_ADC_IsEnabled>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d036      	beq.n	8003d2e <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a11      	ldr	r2, [pc, #68]	@ (8003d0c <HAL_ADC_DeInit+0x2ac>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_ADC_DeInit+0x274>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a10      	ldr	r2, [pc, #64]	@ (8003d10 <HAL_ADC_DeInit+0x2b0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ADC_DeInit+0x278>
 8003cd4:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <HAL_ADC_DeInit+0x2b8>)
 8003cd6:	e000      	b.n	8003cda <HAL_ADC_DeInit+0x27a>
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_ADC_DeInit+0x2bc>)
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8003d0c <HAL_ADC_DeInit+0x2ac>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_ADC_DeInit+0x290>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a09      	ldr	r2, [pc, #36]	@ (8003d10 <HAL_ADC_DeInit+0x2b0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d117      	bne.n	8003d20 <HAL_ADC_DeInit+0x2c0>
 8003cf0:	4a09      	ldr	r2, [pc, #36]	@ (8003d18 <HAL_ADC_DeInit+0x2b8>)
 8003cf2:	e016      	b.n	8003d22 <HAL_ADC_DeInit+0x2c2>
 8003cf4:	fffff800 	.word	0xfffff800
 8003cf8:	fc00f81c 	.word	0xfc00f81c
 8003cfc:	e0820830 	.word	0xe0820830
 8003d00:	e0820820 	.word	0xe0820820
 8003d04:	fffff820 	.word	0xfffff820
 8003d08:	fff00000 	.word	0xfff00000
 8003d0c:	40022000 	.word	0x40022000
 8003d10:	40022100 	.word	0x40022100
 8003d14:	58026000 	.word	0x58026000
 8003d18:	40022300 	.word	0x40022300
 8003d1c:	58026300 	.word	0x58026300
 8003d20:	4a0d      	ldr	r2, [pc, #52]	@ (8003d58 <HAL_ADC_DeInit+0x2f8>)
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <HAL_ADC_DeInit+0x2fc>)
 8003d24:	400b      	ands	r3, r1
 8003d26:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fd fbed 	bl	8001508 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd90      	pop	{r4, r7, pc}
 8003d58:	58026300 	.word	0x58026300
 8003d5c:	fe0030e0 	.word	0xfe0030e0

08003d60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a55      	ldr	r2, [pc, #340]	@ (8003ec8 <HAL_ADC_Start_DMA+0x168>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_ADC_Start_DMA+0x20>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a54      	ldr	r2, [pc, #336]	@ (8003ecc <HAL_ADC_Start_DMA+0x16c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_Start_DMA+0x24>
 8003d80:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_ADC_Start_DMA+0x170>)
 8003d82:	e000      	b.n	8003d86 <HAL_ADC_Start_DMA+0x26>
 8003d84:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <HAL_ADC_Start_DMA+0x174>)
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fbba 	bl	8003500 <LL_ADC_GetMultimode>
 8003d8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fc86 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 808c 	bne.w	8003eb8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_Start_DMA+0x4e>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e087      	b.n	8003ebe <HAL_ADC_Start_DMA+0x15e>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d002      	beq.n	8003dc8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b09      	cmp	r3, #9
 8003dc6:	d170      	bne.n	8003eaa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fcad 	bl	8004728 <ADC_Enable>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d163      	bne.n	8003ea0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed8 <HAL_ADC_Start_DMA+0x178>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a37      	ldr	r2, [pc, #220]	@ (8003ecc <HAL_ADC_Start_DMA+0x16c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d002      	beq.n	8003df8 <HAL_ADC_Start_DMA+0x98>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	e000      	b.n	8003dfa <HAL_ADC_Start_DMA+0x9a>
 8003df8:	4b33      	ldr	r3, [pc, #204]	@ (8003ec8 <HAL_ADC_Start_DMA+0x168>)
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d002      	beq.n	8003e08 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	f023 0206 	bic.w	r2, r3, #6
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e2c:	e002      	b.n	8003e34 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e38:	4a28      	ldr	r2, [pc, #160]	@ (8003edc <HAL_ADC_Start_DMA+0x17c>)
 8003e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e40:	4a27      	ldr	r2, [pc, #156]	@ (8003ee0 <HAL_ADC_Start_DMA+0x180>)
 8003e42:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e48:	4a26      	ldr	r2, [pc, #152]	@ (8003ee4 <HAL_ADC_Start_DMA+0x184>)
 8003e4a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	221c      	movs	r2, #28
 8003e52:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0210 	orr.w	r2, r2, #16
 8003e6a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7ff fadf 	bl	800343a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3340      	adds	r3, #64	@ 0x40
 8003e86:	4619      	mov	r1, r3
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f002 f870 	bl	8005f70 <HAL_DMA_Start_IT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fbdb 	bl	8003654 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003e9e:	e00d      	b.n	8003ebc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003ea8:	e008      	b.n	8003ebc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003eb6:	e001      	b.n	8003ebc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40022000 	.word	0x40022000
 8003ecc:	40022100 	.word	0x40022100
 8003ed0:	40022300 	.word	0x40022300
 8003ed4:	58026300 	.word	0x58026300
 8003ed8:	fffff0fe 	.word	0xfffff0fe
 8003edc:	080048fb 	.word	0x080048fb
 8003ee0:	080049d3 	.word	0x080049d3
 8003ee4:	080049ef 	.word	0x080049ef

08003ee8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b0a1      	sub	sp, #132	@ 0x84
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a9d      	ldr	r2, [pc, #628]	@ (80041a0 <HAL_ADC_ConfigChannel+0x290>)
 8003f2a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x2a>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e321      	b.n	800457e <HAL_ADC_ConfigChannel+0x66e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fbac 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 8306 	bne.w	8004560 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d108      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x62>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0e9b      	lsrs	r3, r3, #26
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	e016      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x90>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f82:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	e003      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	69d1      	ldr	r1, [r2, #28]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	430b      	orrs	r3, r1
 8003fac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7ff fa11 	bl	80033e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fb6d 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 8003fca:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fb8f 	bl	80036f4 <LL_ADC_INJ_IsConversionOngoing>
 8003fd6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f040 80b3 	bne.w	8004146 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 80af 	bne.w	8004146 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f7ff fa33 	bl	8003460 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <HAL_ADC_ConfigChannel+0x294>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004006:	d10b      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x110>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	e01d      	b.n	800405c <HAL_ADC_ConfigChannel+0x14c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x136>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	e00a      	b.n	800405c <HAL_ADC_ConfigChannel+0x14c>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d027      	beq.n	80040b6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6919      	ldr	r1, [r3, #16]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004074:	f7ff f94e 	bl	8003314 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6919      	ldr	r1, [r3, #16]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	7e5b      	ldrb	r3, [r3, #25]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <HAL_ADC_ConfigChannel+0x17e>
 8004088:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800408c:	e000      	b.n	8004090 <HAL_ADC_ConfigChannel+0x180>
 800408e:	2300      	movs	r3, #0
 8004090:	461a      	mov	r2, r3
 8004092:	f7ff f978 	bl	8003386 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6919      	ldr	r1, [r3, #16]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7e1b      	ldrb	r3, [r3, #24]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x19c>
 80040a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80040aa:	e000      	b.n	80040ae <HAL_ADC_ConfigChannel+0x19e>
 80040ac:	2300      	movs	r3, #0
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7ff f950 	bl	8003354 <LL_ADC_SetDataRightShift>
 80040b4:	e047      	b.n	8004146 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	069b      	lsls	r3, r3, #26
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d107      	bne.n	80040da <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040d8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	069b      	lsls	r3, r3, #26
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d107      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040fc:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004104:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	069b      	lsls	r3, r3, #26
 800410e:	429a      	cmp	r2, r3
 8004110:	d107      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004120:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004128:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	069b      	lsls	r3, r3, #26
 8004132:	429a      	cmp	r2, r3
 8004134:	d107      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004144:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fa5c 	bl	8003608 <LL_ADC_IsEnabled>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 820d 	bne.w	8004572 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	461a      	mov	r2, r3
 8004166:	f7ff f9a7 	bl	80034b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a0c      	ldr	r2, [pc, #48]	@ (80041a0 <HAL_ADC_ConfigChannel+0x290>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f040 8133 	bne.w	80043dc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004182:	2b00      	cmp	r3, #0
 8004184:	d110      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x298>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0e9b      	lsrs	r3, r3, #26
 800418c:	3301      	adds	r3, #1
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2b09      	cmp	r3, #9
 8004194:	bf94      	ite	ls
 8004196:	2301      	movls	r3, #1
 8004198:	2300      	movhi	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e01e      	b.n	80041dc <HAL_ADC_ConfigChannel+0x2cc>
 800419e:	bf00      	nop
 80041a0:	47ff0000 	.word	0x47ff0000
 80041a4:	5c001000 	.word	0x5c001000
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80041b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80041ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e003      	b.n	80041cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80041c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	2b09      	cmp	r3, #9
 80041d4:	bf94      	ite	ls
 80041d6:	2301      	movls	r3, #1
 80041d8:	2300      	movhi	r3, #0
 80041da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d079      	beq.n	80042d4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x2ec>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	069b      	lsls	r3, r3, #26
 80041f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041fa:	e015      	b.n	8004228 <HAL_ADC_ConfigChannel+0x318>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800420a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800420c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800420e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004214:	2320      	movs	r3, #32
 8004216:	e003      	b.n	8004220 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	3301      	adds	r3, #1
 8004222:	069b      	lsls	r3, r3, #26
 8004224:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x338>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	3301      	adds	r3, #1
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	e017      	b.n	8004278 <HAL_ADC_ConfigChannel+0x368>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004258:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800425a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e003      	b.n	800426c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <HAL_ADC_ConfigChannel+0x38e>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	3301      	adds	r3, #1
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	051b      	lsls	r3, r3, #20
 800429c:	e018      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x3c0>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80042b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80042b6:	2320      	movs	r3, #32
 80042b8:	e003      	b.n	80042c2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	fab3 f383 	clz	r3, r3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	3301      	adds	r3, #1
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042d0:	430b      	orrs	r3, r1
 80042d2:	e07e      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x3e0>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	3301      	adds	r3, #1
 80042e8:	069b      	lsls	r3, r3, #26
 80042ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ee:	e015      	b.n	800431c <HAL_ADC_ConfigChannel+0x40c>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004308:	2320      	movs	r3, #32
 800430a:	e003      	b.n	8004314 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	069b      	lsls	r3, r3, #26
 8004318:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <HAL_ADC_ConfigChannel+0x42c>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	0e9b      	lsrs	r3, r3, #26
 800432e:	3301      	adds	r3, #1
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f303 	lsl.w	r3, r1, r3
 800433a:	e017      	b.n	800436c <HAL_ADC_ConfigChannel+0x45c>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	61bb      	str	r3, [r7, #24]
  return result;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004354:	2320      	movs	r3, #32
 8004356:	e003      	b.n	8004360 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2101      	movs	r1, #1
 8004368:	fa01 f303 	lsl.w	r3, r1, r3
 800436c:	ea42 0103 	orr.w	r1, r2, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10d      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x488>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0e9b      	lsrs	r3, r3, #26
 8004382:	3301      	adds	r3, #1
 8004384:	f003 021f 	and.w	r2, r3, #31
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	3b1e      	subs	r3, #30
 8004390:	051b      	lsls	r3, r3, #20
 8004392:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004396:	e01b      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x4c0>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	fa93 f3a3 	rbit	r3, r3
 80043a4:	60fb      	str	r3, [r7, #12]
  return result;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80043b0:	2320      	movs	r3, #32
 80043b2:	e003      	b.n	80043bc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	3301      	adds	r3, #1
 80043be:	f003 021f 	and.w	r2, r3, #31
 80043c2:	4613      	mov	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	3b1e      	subs	r3, #30
 80043ca:	051b      	lsls	r3, r3, #20
 80043cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043d0:	430b      	orrs	r3, r1
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	6892      	ldr	r2, [r2, #8]
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7ff f842 	bl	8003460 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f280 80c6 	bge.w	8004572 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a67      	ldr	r2, [pc, #412]	@ (8004588 <HAL_ADC_ConfigChannel+0x678>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_ADC_ConfigChannel+0x4ea>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	@ (800458c <HAL_ADC_ConfigChannel+0x67c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x4ee>
 80043fa:	4b65      	ldr	r3, [pc, #404]	@ (8004590 <HAL_ADC_ConfigChannel+0x680>)
 80043fc:	e000      	b.n	8004400 <HAL_ADC_ConfigChannel+0x4f0>
 80043fe:	4b65      	ldr	r3, [pc, #404]	@ (8004594 <HAL_ADC_ConfigChannel+0x684>)
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe ff79 	bl	80032f8 <LL_ADC_GetCommonPathInternalCh>
 8004406:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a5e      	ldr	r2, [pc, #376]	@ (8004588 <HAL_ADC_ConfigChannel+0x678>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_ADC_ConfigChannel+0x50c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a5d      	ldr	r2, [pc, #372]	@ (800458c <HAL_ADC_ConfigChannel+0x67c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10e      	bne.n	800443a <HAL_ADC_ConfigChannel+0x52a>
 800441c:	485a      	ldr	r0, [pc, #360]	@ (8004588 <HAL_ADC_ConfigChannel+0x678>)
 800441e:	f7ff f8f3 	bl	8003608 <LL_ADC_IsEnabled>
 8004422:	4604      	mov	r4, r0
 8004424:	4859      	ldr	r0, [pc, #356]	@ (800458c <HAL_ADC_ConfigChannel+0x67c>)
 8004426:	f7ff f8ef 	bl	8003608 <LL_ADC_IsEnabled>
 800442a:	4603      	mov	r3, r0
 800442c:	4323      	orrs	r3, r4
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e008      	b.n	800444c <HAL_ADC_ConfigChannel+0x53c>
 800443a:	4857      	ldr	r0, [pc, #348]	@ (8004598 <HAL_ADC_ConfigChannel+0x688>)
 800443c:	f7ff f8e4 	bl	8003608 <LL_ADC_IsEnabled>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d07d      	beq.n	800454c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a51      	ldr	r2, [pc, #324]	@ (800459c <HAL_ADC_ConfigChannel+0x68c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d130      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x5ac>
 800445a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d12b      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a4b      	ldr	r2, [pc, #300]	@ (8004598 <HAL_ADC_ConfigChannel+0x688>)
 800446a:	4293      	cmp	r3, r2
 800446c:	f040 8081 	bne.w	8004572 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a44      	ldr	r2, [pc, #272]	@ (8004588 <HAL_ADC_ConfigChannel+0x678>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_ADC_ConfigChannel+0x574>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a43      	ldr	r2, [pc, #268]	@ (800458c <HAL_ADC_ConfigChannel+0x67c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d101      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x578>
 8004484:	4a42      	ldr	r2, [pc, #264]	@ (8004590 <HAL_ADC_ConfigChannel+0x680>)
 8004486:	e000      	b.n	800448a <HAL_ADC_ConfigChannel+0x57a>
 8004488:	4a42      	ldr	r2, [pc, #264]	@ (8004594 <HAL_ADC_ConfigChannel+0x684>)
 800448a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800448c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f7fe ff1d 	bl	80032d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004498:	4b41      	ldr	r3, [pc, #260]	@ (80045a0 <HAL_ADC_ConfigChannel+0x690>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	4a41      	ldr	r2, [pc, #260]	@ (80045a4 <HAL_ADC_ConfigChannel+0x694>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	099b      	lsrs	r3, r3, #6
 80044a6:	3301      	adds	r3, #1
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044ac:	e002      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f9      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ba:	e05a      	b.n	8004572 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a39      	ldr	r2, [pc, #228]	@ (80045a8 <HAL_ADC_ConfigChannel+0x698>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d11e      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x5f4>
 80044c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d119      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a30      	ldr	r2, [pc, #192]	@ (8004598 <HAL_ADC_ConfigChannel+0x688>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d14b      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <HAL_ADC_ConfigChannel+0x678>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_ADC_ConfigChannel+0x5de>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <HAL_ADC_ConfigChannel+0x67c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x5e2>
 80044ee:	4a28      	ldr	r2, [pc, #160]	@ (8004590 <HAL_ADC_ConfigChannel+0x680>)
 80044f0:	e000      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x5e4>
 80044f2:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <HAL_ADC_ConfigChannel+0x684>)
 80044f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7fe fee8 	bl	80032d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004502:	e036      	b.n	8004572 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a28      	ldr	r2, [pc, #160]	@ (80045ac <HAL_ADC_ConfigChannel+0x69c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d131      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x662>
 800450e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d12c      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <HAL_ADC_ConfigChannel+0x688>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d127      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a18      	ldr	r2, [pc, #96]	@ (8004588 <HAL_ADC_ConfigChannel+0x678>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_ADC_ConfigChannel+0x626>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a16      	ldr	r2, [pc, #88]	@ (800458c <HAL_ADC_ConfigChannel+0x67c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <HAL_ADC_ConfigChannel+0x62a>
 8004536:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_ADC_ConfigChannel+0x680>)
 8004538:	e000      	b.n	800453c <HAL_ADC_ConfigChannel+0x62c>
 800453a:	4a16      	ldr	r2, [pc, #88]	@ (8004594 <HAL_ADC_ConfigChannel+0x684>)
 800453c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7fe fec4 	bl	80032d2 <LL_ADC_SetCommonPathInternalCh>
 800454a:	e012      	b.n	8004572 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800455e:	e008      	b.n	8004572 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800457a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800457e:	4618      	mov	r0, r3
 8004580:	3784      	adds	r7, #132	@ 0x84
 8004582:	46bd      	mov	sp, r7
 8004584:	bd90      	pop	{r4, r7, pc}
 8004586:	bf00      	nop
 8004588:	40022000 	.word	0x40022000
 800458c:	40022100 	.word	0x40022100
 8004590:	40022300 	.word	0x40022300
 8004594:	58026300 	.word	0x58026300
 8004598:	58026000 	.word	0x58026000
 800459c:	cb840000 	.word	0xcb840000
 80045a0:	2400002c 	.word	0x2400002c
 80045a4:	053e2d63 	.word	0x053e2d63
 80045a8:	c7520000 	.word	0xc7520000
 80045ac:	cfb80000 	.word	0xcfb80000

080045b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f86c 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 80045cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff f88e 	bl	80036f4 <LL_ADC_INJ_IsConversionOngoing>
 80045d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8098 	beq.w	8004718 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02a      	beq.n	800464c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7d5b      	ldrb	r3, [r3, #21]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d126      	bne.n	800464c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7d1b      	ldrb	r3, [r3, #20]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d122      	bne.n	800464c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004606:	2301      	movs	r3, #1
 8004608:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800460a:	e014      	b.n	8004636 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4a45      	ldr	r2, [pc, #276]	@ (8004724 <ADC_ConversionStop+0x174>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d90d      	bls.n	8004630 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004618:	f043 0210 	orr.w	r2, r3, #16
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004624:	f043 0201 	orr.w	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e074      	b.n	800471a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3301      	adds	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d1e3      	bne.n	800460c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2240      	movs	r2, #64	@ 0x40
 800464a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d014      	beq.n	800467c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f824 	bl	80036a4 <LL_ADC_REG_IsConversionOngoing>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe ffe1 	bl	800362e <LL_ADC_IsDisableOngoing>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff f800 	bl	800367c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d014      	beq.n	80046ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff f834 	bl	80036f4 <LL_ADC_INJ_IsConversionOngoing>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe ffc9 	bl	800362e <LL_ADC_IsDisableOngoing>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff f810 	bl	80036cc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d005      	beq.n	80046be <ADC_ConversionStop+0x10e>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d105      	bne.n	80046c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80046b8:	230c      	movs	r3, #12
 80046ba:	617b      	str	r3, [r7, #20]
        break;
 80046bc:	e005      	b.n	80046ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80046be:	2308      	movs	r3, #8
 80046c0:	617b      	str	r3, [r7, #20]
        break;
 80046c2:	e002      	b.n	80046ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80046c4:	2304      	movs	r3, #4
 80046c6:	617b      	str	r3, [r7, #20]
        break;
 80046c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80046ca:	f7fe fdb3 	bl	8003234 <HAL_GetTick>
 80046ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046d0:	e01b      	b.n	800470a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80046d2:	f7fe fdaf 	bl	8003234 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d914      	bls.n	800470a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f2:	f043 0210 	orr.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e007      	b.n	800471a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1dc      	bne.n	80046d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	000cdbff 	.word	0x000cdbff

08004728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe ff67 	bl	8003608 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d16e      	bne.n	800481e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	4b38      	ldr	r3, [pc, #224]	@ (8004828 <ADC_Enable+0x100>)
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004752:	f043 0210 	orr.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475e:	f043 0201 	orr.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e05a      	b.n	8004820 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe ff22 	bl	80035b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004774:	f7fe fd5e 	bl	8003234 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2b      	ldr	r2, [pc, #172]	@ (800482c <ADC_Enable+0x104>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <ADC_Enable+0x66>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a29      	ldr	r2, [pc, #164]	@ (8004830 <ADC_Enable+0x108>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <ADC_Enable+0x6a>
 800478e:	4b29      	ldr	r3, [pc, #164]	@ (8004834 <ADC_Enable+0x10c>)
 8004790:	e000      	b.n	8004794 <ADC_Enable+0x6c>
 8004792:	4b29      	ldr	r3, [pc, #164]	@ (8004838 <ADC_Enable+0x110>)
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe feb3 	bl	8003500 <LL_ADC_GetMultimode>
 800479a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <ADC_Enable+0x108>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d002      	beq.n	80047ac <ADC_Enable+0x84>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	e000      	b.n	80047ae <ADC_Enable+0x86>
 80047ac:	4b1f      	ldr	r3, [pc, #124]	@ (800482c <ADC_Enable+0x104>)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d130      	bne.n	800481e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047bc:	e028      	b.n	8004810 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe ff20 	bl	8003608 <LL_ADC_IsEnabled>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fef0 	bl	80035b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047d8:	f7fe fd2c 	bl	8003234 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d914      	bls.n	8004810 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d00d      	beq.n	8004810 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	f043 0210 	orr.w	r2, r3, #16
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004804:	f043 0201 	orr.w	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e007      	b.n	8004820 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d1cf      	bne.n	80047be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	8000003f 	.word	0x8000003f
 800482c:	40022000 	.word	0x40022000
 8004830:	40022100 	.word	0x40022100
 8004834:	40022300 	.word	0x40022300
 8004838:	58026300 	.word	0x58026300

0800483c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fe fef0 	bl	800362e <LL_ADC_IsDisableOngoing>
 800484e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe fed7 	bl	8003608 <LL_ADC_IsEnabled>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d047      	beq.n	80048f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d144      	bne.n	80048f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030d 	and.w	r3, r3, #13
 8004870:	2b01      	cmp	r3, #1
 8004872:	d10c      	bne.n	800488e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe feb1 	bl	80035e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2203      	movs	r2, #3
 8004884:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004886:	f7fe fcd5 	bl	8003234 <HAL_GetTick>
 800488a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800488c:	e029      	b.n	80048e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f043 0210 	orr.w	r2, r3, #16
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e023      	b.n	80048f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048aa:	f7fe fcc3 	bl	8003234 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d914      	bls.n	80048e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00d      	beq.n	80048e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	f043 0210 	orr.w	r2, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	f043 0201 	orr.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e007      	b.n	80048f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1dc      	bne.n	80048aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004910:	2b00      	cmp	r3, #0
 8004912:	d14b      	bne.n	80049ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004918:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d021      	beq.n	8004972 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fd42 	bl	80033bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d032      	beq.n	80049a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d12b      	bne.n	80049a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11f      	bne.n	80049a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004970:	e018      	b.n	80049a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d111      	bne.n	80049a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7fd fe37 	bl	8002618 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049aa:	e00e      	b.n	80049ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fa9f 	bl	8003efc <HAL_ADC_ErrorCallback>
}
 80049be:	e004      	b.n	80049ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff fa81 	bl	8003ee8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0c:	f043 0204 	orr.w	r2, r3, #4
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fa71 	bl	8003efc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7a      	ldr	r2, [pc, #488]	@ (8004c1c <ADC_ConfigureBoostMode+0x1f8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <ADC_ConfigureBoostMode+0x1c>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a79      	ldr	r2, [pc, #484]	@ (8004c20 <ADC_ConfigureBoostMode+0x1fc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d109      	bne.n	8004a54 <ADC_ConfigureBoostMode+0x30>
 8004a40:	4b78      	ldr	r3, [pc, #480]	@ (8004c24 <ADC_ConfigureBoostMode+0x200>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e008      	b.n	8004a66 <ADC_ConfigureBoostMode+0x42>
 8004a54:	4b74      	ldr	r3, [pc, #464]	@ (8004c28 <ADC_ConfigureBoostMode+0x204>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01c      	beq.n	8004aa4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a6a:	f005 f923 	bl	8009cb4 <HAL_RCC_GetHCLKFreq>
 8004a6e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a78:	d010      	beq.n	8004a9c <ADC_ConfigureBoostMode+0x78>
 8004a7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a7e:	d873      	bhi.n	8004b68 <ADC_ConfigureBoostMode+0x144>
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a84:	d002      	beq.n	8004a8c <ADC_ConfigureBoostMode+0x68>
 8004a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a8a:	d16d      	bne.n	8004b68 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	60fb      	str	r3, [r7, #12]
        break;
 8004a9a:	e068      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	089b      	lsrs	r3, r3, #2
 8004aa0:	60fb      	str	r3, [r7, #12]
        break;
 8004aa2:	e064      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004aa4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f006 fb68 	bl	800b180 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ab0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004aba:	d051      	beq.n	8004b60 <ADC_ConfigureBoostMode+0x13c>
 8004abc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004ac0:	d854      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004ac2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004ac6:	d047      	beq.n	8004b58 <ADC_ConfigureBoostMode+0x134>
 8004ac8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004acc:	d84e      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004ace:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004ad2:	d03d      	beq.n	8004b50 <ADC_ConfigureBoostMode+0x12c>
 8004ad4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004ad8:	d848      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ade:	d033      	beq.n	8004b48 <ADC_ConfigureBoostMode+0x124>
 8004ae0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ae4:	d842      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004ae6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004aea:	d029      	beq.n	8004b40 <ADC_ConfigureBoostMode+0x11c>
 8004aec:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004af0:	d83c      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004af2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004af6:	d01a      	beq.n	8004b2e <ADC_ConfigureBoostMode+0x10a>
 8004af8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004afc:	d836      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004afe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b02:	d014      	beq.n	8004b2e <ADC_ConfigureBoostMode+0x10a>
 8004b04:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b08:	d830      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0e:	d00e      	beq.n	8004b2e <ADC_ConfigureBoostMode+0x10a>
 8004b10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b14:	d82a      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004b16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b1a:	d008      	beq.n	8004b2e <ADC_ConfigureBoostMode+0x10a>
 8004b1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b20:	d824      	bhi.n	8004b6c <ADC_ConfigureBoostMode+0x148>
 8004b22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b26:	d002      	beq.n	8004b2e <ADC_ConfigureBoostMode+0x10a>
 8004b28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b2c:	d11e      	bne.n	8004b6c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	0c9b      	lsrs	r3, r3, #18
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	60fb      	str	r3, [r7, #12]
        break;
 8004b3e:	e016      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	60fb      	str	r3, [r7, #12]
        break;
 8004b46:	e012      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	60fb      	str	r3, [r7, #12]
        break;
 8004b4e:	e00e      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	60fb      	str	r3, [r7, #12]
        break;
 8004b56:	e00a      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	09db      	lsrs	r3, r3, #7
 8004b5c:	60fb      	str	r3, [r7, #12]
        break;
 8004b5e:	e006      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	0a1b      	lsrs	r3, r3, #8
 8004b64:	60fb      	str	r3, [r7, #12]
        break;
 8004b66:	e002      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b68:	bf00      	nop
 8004b6a:	e000      	b.n	8004b6e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004b6e:	f7fe fb91 	bl	8003294 <HAL_GetREVID>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d815      	bhi.n	8004ba8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8004c2c <ADC_ConfigureBoostMode+0x208>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d908      	bls.n	8004b96 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b94:	e03e      	b.n	8004c14 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ba4:	609a      	str	r2, [r3, #8]
}
 8004ba6:	e035      	b.n	8004c14 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c30 <ADC_ConfigureBoostMode+0x20c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d808      	bhi.n	8004bc8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bc4:	609a      	str	r2, [r3, #8]
}
 8004bc6:	e025      	b.n	8004c14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a1a      	ldr	r2, [pc, #104]	@ (8004c34 <ADC_ConfigureBoostMode+0x210>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d80a      	bhi.n	8004be6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	e016      	b.n	8004c14 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a13      	ldr	r2, [pc, #76]	@ (8004c38 <ADC_ConfigureBoostMode+0x214>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d80a      	bhi.n	8004c04 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c00:	609a      	str	r2, [r3, #8]
}
 8004c02:	e007      	b.n	8004c14 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c12:	609a      	str	r2, [r3, #8]
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40022000 	.word	0x40022000
 8004c20:	40022100 	.word	0x40022100
 8004c24:	40022300 	.word	0x40022300
 8004c28:	58026300 	.word	0x58026300
 8004c2c:	01312d00 	.word	0x01312d00
 8004c30:	005f5e10 	.word	0x005f5e10
 8004c34:	00bebc20 	.word	0x00bebc20
 8004c38:	017d7840 	.word	0x017d7840

08004c3c <LL_ADC_IsEnabled>:
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <LL_ADC_IsEnabled+0x18>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <LL_ADC_IsEnabled+0x1a>
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <LL_ADC_StartCalibration>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <LL_ADC_StartCalibration+0x38>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c84:	430a      	orrs	r2, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	609a      	str	r2, [r3, #8]
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	3ffeffc0 	.word	0x3ffeffc0

08004ca0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cb4:	d101      	bne.n	8004cba <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <LL_ADC_REG_IsConversionOngoing>:
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d101      	bne.n	8004ce0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_ADCEx_Calibration_Start+0x1e>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e04c      	b.n	8004da8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff fd90 	bl	800483c <ADC_Disable>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d135      	bne.n	8004d92 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d2a:	4b21      	ldr	r3, [pc, #132]	@ (8004db0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	f043 0202 	orr.w	r2, r3, #2
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff90 	bl	8004c64 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d44:	e014      	b.n	8004d70 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d30d      	bcc.n	8004d70 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d58:	f023 0312 	bic.w	r3, r3, #18
 8004d5c:	f043 0210 	orr.w	r2, r3, #16
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e01b      	b.n	8004da8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff93 	bl	8004ca0 <LL_ADC_IsCalibrationOnGoing>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e2      	bne.n	8004d46 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d84:	f023 0303 	bic.w	r3, r3, #3
 8004d88:	f043 0201 	orr.w	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d90:	e005      	b.n	8004d9e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d96:	f043 0210 	orr.w	r2, r3, #16
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	ffffeefd 	.word	0xffffeefd
 8004db4:	25c3f800 	.word	0x25c3f800

08004db8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b09f      	sub	sp, #124	@ 0x7c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e0be      	b.n	8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a5c      	ldr	r2, [pc, #368]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d102      	bne.n	8004df6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004df0:	4b5b      	ldr	r3, [pc, #364]	@ (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	e001      	b.n	8004dfa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e09d      	b.n	8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff54 	bl	8004cc8 <LL_ADC_REG_IsConversionOngoing>
 8004e20:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ff4e 	bl	8004cc8 <LL_ADC_REG_IsConversionOngoing>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d17f      	bne.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d17c      	bne.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a47      	ldr	r2, [pc, #284]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a46      	ldr	r2, [pc, #280]	@ (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d101      	bne.n	8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e4e:	e000      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004e50:	4b45      	ldr	r3, [pc, #276]	@ (8004f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e52:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d039      	beq.n	8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e6c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3a      	ldr	r2, [pc, #232]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a38      	ldr	r2, [pc, #224]	@ (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10e      	bne.n	8004ea0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004e82:	4836      	ldr	r0, [pc, #216]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e84:	f7ff feda 	bl	8004c3c <LL_ADC_IsEnabled>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	4835      	ldr	r0, [pc, #212]	@ (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e8c:	f7ff fed6 	bl	8004c3c <LL_ADC_IsEnabled>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4323      	orrs	r3, r4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e008      	b.n	8004eb2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004ea0:	4832      	ldr	r0, [pc, #200]	@ (8004f6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ea2:	f7ff fecb 	bl	8004c3c <LL_ADC_IsEnabled>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d047      	beq.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b2d      	ldr	r3, [pc, #180]	@ (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	6892      	ldr	r2, [r2, #8]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ecc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ece:	e03a      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1d      	ldr	r2, [pc, #116]	@ (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10e      	bne.n	8004f0e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004ef0:	481a      	ldr	r0, [pc, #104]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ef2:	f7ff fea3 	bl	8004c3c <LL_ADC_IsEnabled>
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	4819      	ldr	r0, [pc, #100]	@ (8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004efa:	f7ff fe9f 	bl	8004c3c <LL_ADC_IsEnabled>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4323      	orrs	r3, r4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e008      	b.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004f0e:	4817      	ldr	r0, [pc, #92]	@ (8004f6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f10:	f7ff fe94 	bl	8004c3c <LL_ADC_IsEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f2e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f30:	e009      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f36:	f043 0220 	orr.w	r2, r3, #32
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004f44:	e000      	b.n	8004f48 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f50:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	377c      	adds	r7, #124	@ 0x7c
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd90      	pop	{r4, r7, pc}
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40022100 	.word	0x40022100
 8004f64:	40022300 	.word	0x40022300
 8004f68:	58026300 	.word	0x58026300
 8004f6c:	58026000 	.word	0x58026000
 8004f70:	fffff0e0 	.word	0xfffff0e0

08004f74 <__NVIC_SetPriorityGrouping>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f84:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fa2:	4a04      	ldr	r2, [pc, #16]	@ (8004fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	60d3      	str	r3, [r2, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	e000ed00 	.word	0xe000ed00
 8004fb8:	05fa0000 	.word	0x05fa0000

08004fbc <__NVIC_GetPriorityGrouping>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fc0:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	f003 0307 	and.w	r3, r3, #7
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <__NVIC_EnableIRQ>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	db0b      	blt.n	8005002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	f003 021f 	and.w	r2, r3, #31
 8004ff0:	4907      	ldr	r1, [pc, #28]	@ (8005010 <__NVIC_EnableIRQ+0x38>)
 8004ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8004ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e100 	.word	0xe000e100

08005014 <__NVIC_SetPriority>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	6039      	str	r1, [r7, #0]
 800501e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	db0a      	blt.n	800503e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	490c      	ldr	r1, [pc, #48]	@ (8005060 <__NVIC_SetPriority+0x4c>)
 800502e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	440b      	add	r3, r1
 8005038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800503c:	e00a      	b.n	8005054 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	4908      	ldr	r1, [pc, #32]	@ (8005064 <__NVIC_SetPriority+0x50>)
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	3b04      	subs	r3, #4
 800504c:	0112      	lsls	r2, r2, #4
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	440b      	add	r3, r1
 8005052:	761a      	strb	r2, [r3, #24]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000e100 	.word	0xe000e100
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <NVIC_EncodePriority>:
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	@ 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f1c3 0307 	rsb	r3, r3, #7
 8005082:	2b04      	cmp	r3, #4
 8005084:	bf28      	it	cs
 8005086:	2304      	movcs	r3, #4
 8005088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3304      	adds	r3, #4
 800508e:	2b06      	cmp	r3, #6
 8005090:	d902      	bls.n	8005098 <NVIC_EncodePriority+0x30>
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3b03      	subs	r3, #3
 8005096:	e000      	b.n	800509a <NVIC_EncodePriority+0x32>
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800509c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43da      	mvns	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	401a      	ands	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	43d9      	mvns	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c0:	4313      	orrs	r3, r2
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3724      	adds	r7, #36	@ 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050e0:	d301      	bcc.n	80050e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050e2:	2301      	movs	r3, #1
 80050e4:	e00f      	b.n	8005106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <SysTick_Config+0x40>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ee:	210f      	movs	r1, #15
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050f4:	f7ff ff8e 	bl	8005014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <SysTick_Config+0x40>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050fe:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <SysTick_Config+0x40>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000e010 	.word	0xe000e010

08005114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff29 	bl	8004f74 <__NVIC_SetPriorityGrouping>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	4603      	mov	r3, r0
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005138:	f7ff ff40 	bl	8004fbc <__NVIC_GetPriorityGrouping>
 800513c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	6978      	ldr	r0, [r7, #20]
 8005144:	f7ff ff90 	bl	8005068 <NVIC_EncodePriority>
 8005148:	4602      	mov	r2, r0
 800514a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800514e:	4611      	mov	r1, r2
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ff5f 	bl	8005014 <__NVIC_SetPriority>
}
 8005156:	bf00      	nop
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	4603      	mov	r3, r0
 8005166:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff ff33 	bl	8004fd8 <__NVIC_EnableIRQ>
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff ffa4 	bl	80050d0 <SysTick_Config>
 8005188:	4603      	mov	r3, r0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005198:	f3bf 8f5f 	dmb	sy
}
 800519c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800519e:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <HAL_MPU_Disable+0x28>)
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	4a06      	ldr	r2, [pc, #24]	@ (80051bc <HAL_MPU_Disable+0x28>)
 80051a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80051aa:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_MPU_Disable+0x2c>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	605a      	str	r2, [r3, #4]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000ed00 	.word	0xe000ed00
 80051c0:	e000ed90 	.word	0xe000ed90

080051c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80051cc:	4a0b      	ldr	r2, [pc, #44]	@ (80051fc <HAL_MPU_Enable+0x38>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80051d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <HAL_MPU_Enable+0x3c>)
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	4a09      	ldr	r2, [pc, #36]	@ (8005200 <HAL_MPU_Enable+0x3c>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80051e2:	f3bf 8f4f 	dsb	sy
}
 80051e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051e8:	f3bf 8f6f 	isb	sy
}
 80051ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000ed90 	.word	0xe000ed90
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	785a      	ldrb	r2, [r3, #1]
 8005210:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <HAL_MPU_ConfigRegion+0x84>)
 8005212:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d029      	beq.n	8005270 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800521c:	4a1a      	ldr	r2, [pc, #104]	@ (8005288 <HAL_MPU_ConfigRegion+0x84>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	7b1b      	ldrb	r3, [r3, #12]
 8005228:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	7adb      	ldrb	r3, [r3, #11]
 800522e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005230:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7a9b      	ldrb	r3, [r3, #10]
 8005236:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005238:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7b5b      	ldrb	r3, [r3, #13]
 800523e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005240:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7b9b      	ldrb	r3, [r3, #14]
 8005246:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005248:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	7bdb      	ldrb	r3, [r3, #15]
 800524e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005250:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7a5b      	ldrb	r3, [r3, #9]
 8005256:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005258:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7a1b      	ldrb	r3, [r3, #8]
 800525e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005260:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005268:	4a07      	ldr	r2, [pc, #28]	@ (8005288 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800526a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800526c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800526e:	e005      	b.n	800527c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_MPU_ConfigRegion+0x84>)
 8005272:	2200      	movs	r2, #0
 8005274:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005276:	4b04      	ldr	r3, [pc, #16]	@ (8005288 <HAL_MPU_ConfigRegion+0x84>)
 8005278:	2200      	movs	r2, #0
 800527a:	611a      	str	r2, [r3, #16]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	e000ed90 	.word	0xe000ed90

0800528c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e014      	b.n	80052c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	791b      	ldrb	r3, [r3, #4]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d105      	bne.n	80052b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc f980 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	795b      	ldrb	r3, [r3, #5]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_DAC_ConfigChannel+0x18>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e12a      	b.n	800553e <HAL_DAC_ConfigChannel+0x26e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2202      	movs	r2, #2
 80052f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	f040 8081 	bne.w	8005400 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80052fe:	f7fd ff99 	bl	8003234 <HAL_GetTick>
 8005302:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d140      	bne.n	800538c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800530a:	e018      	b.n	800533e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800530c:	f7fd ff92 	bl	8003234 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	d911      	bls.n	800533e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005320:	4b89      	ldr	r3, [pc, #548]	@ (8005548 <HAL_DAC_ConfigChannel+0x278>)
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f043 0208 	orr.w	r2, r3, #8
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2203      	movs	r2, #3
 8005338:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e0ff      	b.n	800553e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005344:	4b80      	ldr	r3, [pc, #512]	@ (8005548 <HAL_DAC_ConfigChannel+0x278>)
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1df      	bne.n	800530c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800534c:	2001      	movs	r0, #1
 800534e:	f7fd ff7d 	bl	800324c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	6992      	ldr	r2, [r2, #24]
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40
 800535c:	e023      	b.n	80053a6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800535e:	f7fd ff69 	bl	8003234 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d90f      	bls.n	800538c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005372:	2b00      	cmp	r3, #0
 8005374:	da0a      	bge.n	800538c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f043 0208 	orr.w	r2, r3, #8
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2203      	movs	r2, #3
 8005386:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e0d8      	b.n	800553e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005392:	2b00      	cmp	r3, #0
 8005394:	dbe3      	blt.n	800535e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005396:	2001      	movs	r0, #1
 8005398:	f7fd ff58 	bl	800324c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	6992      	ldr	r2, [r2, #24]
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	ea02 0103 	and.w	r1, r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	409a      	lsls	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	21ff      	movs	r1, #255	@ 0xff
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	ea02 0103 	and.w	r1, r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d11d      	bne.n	8005444 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	221f      	movs	r2, #31
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4013      	ands	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2207      	movs	r2, #7
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	43db      	mvns	r3, r3
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4013      	ands	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d102      	bne.n	800546e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	e00f      	b.n	800548e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d102      	bne.n	800547c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005476:	2301      	movs	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	e008      	b.n	800548e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005484:	2301      	movs	r3, #1
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	e001      	b.n	800548e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43da      	mvns	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	400a      	ands	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4013      	ands	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	22c0      	movs	r2, #192	@ 0xc0
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	400a      	ands	r2, r1
 800552e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20008000 	.word	0x20008000

0800554c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005554:	f7fd fe6e 	bl	8003234 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e316      	b.n	8005b92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a66      	ldr	r2, [pc, #408]	@ (8005704 <HAL_DMA_Init+0x1b8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04a      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a65      	ldr	r2, [pc, #404]	@ (8005708 <HAL_DMA_Init+0x1bc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d045      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a63      	ldr	r2, [pc, #396]	@ (800570c <HAL_DMA_Init+0x1c0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d040      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a62      	ldr	r2, [pc, #392]	@ (8005710 <HAL_DMA_Init+0x1c4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d03b      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a60      	ldr	r2, [pc, #384]	@ (8005714 <HAL_DMA_Init+0x1c8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d036      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5f      	ldr	r2, [pc, #380]	@ (8005718 <HAL_DMA_Init+0x1cc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d031      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5d      	ldr	r2, [pc, #372]	@ (800571c <HAL_DMA_Init+0x1d0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d02c      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005720 <HAL_DMA_Init+0x1d4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d027      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a5a      	ldr	r2, [pc, #360]	@ (8005724 <HAL_DMA_Init+0x1d8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a59      	ldr	r2, [pc, #356]	@ (8005728 <HAL_DMA_Init+0x1dc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01d      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a57      	ldr	r2, [pc, #348]	@ (800572c <HAL_DMA_Init+0x1e0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a56      	ldr	r2, [pc, #344]	@ (8005730 <HAL_DMA_Init+0x1e4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a54      	ldr	r2, [pc, #336]	@ (8005734 <HAL_DMA_Init+0x1e8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a53      	ldr	r2, [pc, #332]	@ (8005738 <HAL_DMA_Init+0x1ec>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a51      	ldr	r2, [pc, #324]	@ (800573c <HAL_DMA_Init+0x1f0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_DMA_Init+0xb8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a50      	ldr	r2, [pc, #320]	@ (8005740 <HAL_DMA_Init+0x1f4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <HAL_DMA_Init+0xbc>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <HAL_DMA_Init+0xbe>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 813b 	beq.w	8005886 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a37      	ldr	r2, [pc, #220]	@ (8005704 <HAL_DMA_Init+0x1b8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d04a      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a36      	ldr	r2, [pc, #216]	@ (8005708 <HAL_DMA_Init+0x1bc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d045      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a34      	ldr	r2, [pc, #208]	@ (800570c <HAL_DMA_Init+0x1c0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d040      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a33      	ldr	r2, [pc, #204]	@ (8005710 <HAL_DMA_Init+0x1c4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d03b      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a31      	ldr	r2, [pc, #196]	@ (8005714 <HAL_DMA_Init+0x1c8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d036      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a30      	ldr	r2, [pc, #192]	@ (8005718 <HAL_DMA_Init+0x1cc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d031      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a2e      	ldr	r2, [pc, #184]	@ (800571c <HAL_DMA_Init+0x1d0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d02c      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2d      	ldr	r2, [pc, #180]	@ (8005720 <HAL_DMA_Init+0x1d4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d027      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a2b      	ldr	r2, [pc, #172]	@ (8005724 <HAL_DMA_Init+0x1d8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d022      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2a      	ldr	r2, [pc, #168]	@ (8005728 <HAL_DMA_Init+0x1dc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d01d      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a28      	ldr	r2, [pc, #160]	@ (800572c <HAL_DMA_Init+0x1e0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d018      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a27      	ldr	r2, [pc, #156]	@ (8005730 <HAL_DMA_Init+0x1e4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a25      	ldr	r2, [pc, #148]	@ (8005734 <HAL_DMA_Init+0x1e8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00e      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a24      	ldr	r2, [pc, #144]	@ (8005738 <HAL_DMA_Init+0x1ec>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d009      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a22      	ldr	r2, [pc, #136]	@ (800573c <HAL_DMA_Init+0x1f0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_DMA_Init+0x174>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a21      	ldr	r2, [pc, #132]	@ (8005740 <HAL_DMA_Init+0x1f4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <HAL_DMA_Init+0x186>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e007      	b.n	80056e2 <HAL_DMA_Init+0x196>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056e2:	e02f      	b.n	8005744 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056e4:	f7fd fda6 	bl	8003234 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d928      	bls.n	8005744 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2203      	movs	r2, #3
 80056fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e246      	b.n	8005b92 <HAL_DMA_Init+0x646>
 8005704:	40020010 	.word	0x40020010
 8005708:	40020028 	.word	0x40020028
 800570c:	40020040 	.word	0x40020040
 8005710:	40020058 	.word	0x40020058
 8005714:	40020070 	.word	0x40020070
 8005718:	40020088 	.word	0x40020088
 800571c:	400200a0 	.word	0x400200a0
 8005720:	400200b8 	.word	0x400200b8
 8005724:	40020410 	.word	0x40020410
 8005728:	40020428 	.word	0x40020428
 800572c:	40020440 	.word	0x40020440
 8005730:	40020458 	.word	0x40020458
 8005734:	40020470 	.word	0x40020470
 8005738:	40020488 	.word	0x40020488
 800573c:	400204a0 	.word	0x400204a0
 8005740:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1c8      	bne.n	80056e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4b83      	ldr	r3, [pc, #524]	@ (800596c <HAL_DMA_Init+0x420>)
 800575e:	4013      	ands	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800576a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005776:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005782:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	2b04      	cmp	r3, #4
 8005796:	d107      	bne.n	80057a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	4313      	orrs	r3, r2
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80057a8:	4b71      	ldr	r3, [pc, #452]	@ (8005970 <HAL_DMA_Init+0x424>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b71      	ldr	r3, [pc, #452]	@ (8005974 <HAL_DMA_Init+0x428>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057b4:	d328      	bcc.n	8005808 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b28      	cmp	r3, #40	@ 0x28
 80057bc:	d903      	bls.n	80057c6 <HAL_DMA_Init+0x27a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c4:	d917      	bls.n	80057f6 <HAL_DMA_Init+0x2aa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80057cc:	d903      	bls.n	80057d6 <HAL_DMA_Init+0x28a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b42      	cmp	r3, #66	@ 0x42
 80057d4:	d90f      	bls.n	80057f6 <HAL_DMA_Init+0x2aa>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b46      	cmp	r3, #70	@ 0x46
 80057dc:	d903      	bls.n	80057e6 <HAL_DMA_Init+0x29a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b48      	cmp	r3, #72	@ 0x48
 80057e4:	d907      	bls.n	80057f6 <HAL_DMA_Init+0x2aa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80057ec:	d905      	bls.n	80057fa <HAL_DMA_Init+0x2ae>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b52      	cmp	r3, #82	@ 0x52
 80057f4:	d801      	bhi.n	80057fa <HAL_DMA_Init+0x2ae>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <HAL_DMA_Init+0x2b0>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005806:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0307 	bic.w	r3, r3, #7
 800581e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	2b04      	cmp	r3, #4
 8005830:	d117      	bne.n	8005862 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f002 fce9 	bl	800821c <DMA_CheckFifoParam>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2240      	movs	r2, #64	@ 0x40
 8005854:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e197      	b.n	8005b92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f002 fc24 	bl	80080b8 <DMA_CalcBaseAndBitshift>
 8005870:	4603      	mov	r3, r0
 8005872:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	223f      	movs	r2, #63	@ 0x3f
 800587e:	409a      	lsls	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	609a      	str	r2, [r3, #8]
 8005884:	e0cd      	b.n	8005a22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3b      	ldr	r2, [pc, #236]	@ (8005978 <HAL_DMA_Init+0x42c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d022      	beq.n	80058d6 <HAL_DMA_Init+0x38a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a39      	ldr	r2, [pc, #228]	@ (800597c <HAL_DMA_Init+0x430>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01d      	beq.n	80058d6 <HAL_DMA_Init+0x38a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a38      	ldr	r2, [pc, #224]	@ (8005980 <HAL_DMA_Init+0x434>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d018      	beq.n	80058d6 <HAL_DMA_Init+0x38a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a36      	ldr	r2, [pc, #216]	@ (8005984 <HAL_DMA_Init+0x438>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_DMA_Init+0x38a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a35      	ldr	r2, [pc, #212]	@ (8005988 <HAL_DMA_Init+0x43c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00e      	beq.n	80058d6 <HAL_DMA_Init+0x38a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a33      	ldr	r2, [pc, #204]	@ (800598c <HAL_DMA_Init+0x440>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d009      	beq.n	80058d6 <HAL_DMA_Init+0x38a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a32      	ldr	r2, [pc, #200]	@ (8005990 <HAL_DMA_Init+0x444>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <HAL_DMA_Init+0x38a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <HAL_DMA_Init+0x448>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d101      	bne.n	80058da <HAL_DMA_Init+0x38e>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <HAL_DMA_Init+0x390>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8097 	beq.w	8005a10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a24      	ldr	r2, [pc, #144]	@ (8005978 <HAL_DMA_Init+0x42c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d021      	beq.n	8005930 <HAL_DMA_Init+0x3e4>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a22      	ldr	r2, [pc, #136]	@ (800597c <HAL_DMA_Init+0x430>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01c      	beq.n	8005930 <HAL_DMA_Init+0x3e4>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a21      	ldr	r2, [pc, #132]	@ (8005980 <HAL_DMA_Init+0x434>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d017      	beq.n	8005930 <HAL_DMA_Init+0x3e4>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1f      	ldr	r2, [pc, #124]	@ (8005984 <HAL_DMA_Init+0x438>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d012      	beq.n	8005930 <HAL_DMA_Init+0x3e4>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <HAL_DMA_Init+0x43c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00d      	beq.n	8005930 <HAL_DMA_Init+0x3e4>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1c      	ldr	r2, [pc, #112]	@ (800598c <HAL_DMA_Init+0x440>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d008      	beq.n	8005930 <HAL_DMA_Init+0x3e4>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1b      	ldr	r2, [pc, #108]	@ (8005990 <HAL_DMA_Init+0x444>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <HAL_DMA_Init+0x3e4>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <HAL_DMA_Init+0x448>)
 800592e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <HAL_DMA_Init+0x44c>)
 800594c:	4013      	ands	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b40      	cmp	r3, #64	@ 0x40
 8005956:	d021      	beq.n	800599c <HAL_DMA_Init+0x450>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b80      	cmp	r3, #128	@ 0x80
 800595e:	d102      	bne.n	8005966 <HAL_DMA_Init+0x41a>
 8005960:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005964:	e01b      	b.n	800599e <HAL_DMA_Init+0x452>
 8005966:	2300      	movs	r3, #0
 8005968:	e019      	b.n	800599e <HAL_DMA_Init+0x452>
 800596a:	bf00      	nop
 800596c:	fe10803f 	.word	0xfe10803f
 8005970:	5c001000 	.word	0x5c001000
 8005974:	ffff0000 	.word	0xffff0000
 8005978:	58025408 	.word	0x58025408
 800597c:	5802541c 	.word	0x5802541c
 8005980:	58025430 	.word	0x58025430
 8005984:	58025444 	.word	0x58025444
 8005988:	58025458 	.word	0x58025458
 800598c:	5802546c 	.word	0x5802546c
 8005990:	58025480 	.word	0x58025480
 8005994:	58025494 	.word	0x58025494
 8005998:	fffe000f 	.word	0xfffe000f
 800599c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68d2      	ldr	r2, [r2, #12]
 80059a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80059ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80059b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80059bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80059c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b6e      	ldr	r3, [pc, #440]	@ (8005b9c <HAL_DMA_Init+0x650>)
 80059e4:	4413      	add	r3, r2
 80059e6:	4a6e      	ldr	r2, [pc, #440]	@ (8005ba0 <HAL_DMA_Init+0x654>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	009a      	lsls	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f002 fb5f 	bl	80080b8 <DMA_CalcBaseAndBitshift>
 80059fa:	4603      	mov	r3, r0
 80059fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2201      	movs	r2, #1
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	e008      	b.n	8005a22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2240      	movs	r2, #64	@ 0x40
 8005a14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2203      	movs	r2, #3
 8005a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e0b7      	b.n	8005b92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a5f      	ldr	r2, [pc, #380]	@ (8005ba4 <HAL_DMA_Init+0x658>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d072      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a5d      	ldr	r2, [pc, #372]	@ (8005ba8 <HAL_DMA_Init+0x65c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d06d      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8005bac <HAL_DMA_Init+0x660>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d068      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a5a      	ldr	r2, [pc, #360]	@ (8005bb0 <HAL_DMA_Init+0x664>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d063      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a59      	ldr	r2, [pc, #356]	@ (8005bb4 <HAL_DMA_Init+0x668>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d05e      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a57      	ldr	r2, [pc, #348]	@ (8005bb8 <HAL_DMA_Init+0x66c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d059      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a56      	ldr	r2, [pc, #344]	@ (8005bbc <HAL_DMA_Init+0x670>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d054      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a54      	ldr	r2, [pc, #336]	@ (8005bc0 <HAL_DMA_Init+0x674>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d04f      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a53      	ldr	r2, [pc, #332]	@ (8005bc4 <HAL_DMA_Init+0x678>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d04a      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a51      	ldr	r2, [pc, #324]	@ (8005bc8 <HAL_DMA_Init+0x67c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d045      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a50      	ldr	r2, [pc, #320]	@ (8005bcc <HAL_DMA_Init+0x680>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d040      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a4e      	ldr	r2, [pc, #312]	@ (8005bd0 <HAL_DMA_Init+0x684>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d03b      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8005bd4 <HAL_DMA_Init+0x688>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d036      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8005bd8 <HAL_DMA_Init+0x68c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d031      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8005bdc <HAL_DMA_Init+0x690>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d02c      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a48      	ldr	r2, [pc, #288]	@ (8005be0 <HAL_DMA_Init+0x694>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d027      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a47      	ldr	r2, [pc, #284]	@ (8005be4 <HAL_DMA_Init+0x698>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d022      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a45      	ldr	r2, [pc, #276]	@ (8005be8 <HAL_DMA_Init+0x69c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01d      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a44      	ldr	r2, [pc, #272]	@ (8005bec <HAL_DMA_Init+0x6a0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d018      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a42      	ldr	r2, [pc, #264]	@ (8005bf0 <HAL_DMA_Init+0x6a4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a41      	ldr	r2, [pc, #260]	@ (8005bf4 <HAL_DMA_Init+0x6a8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00e      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3f      	ldr	r2, [pc, #252]	@ (8005bf8 <HAL_DMA_Init+0x6ac>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d009      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a3e      	ldr	r2, [pc, #248]	@ (8005bfc <HAL_DMA_Init+0x6b0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d004      	beq.n	8005b12 <HAL_DMA_Init+0x5c6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c00 <HAL_DMA_Init+0x6b4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d101      	bne.n	8005b16 <HAL_DMA_Init+0x5ca>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <HAL_DMA_Init+0x5cc>
 8005b16:	2300      	movs	r3, #0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d032      	beq.n	8005b82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f002 fbf9 	bl	8008314 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b80      	cmp	r3, #128	@ 0x80
 8005b28:	d102      	bne.n	8005b30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d010      	beq.n	8005b70 <HAL_DMA_Init+0x624>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d80c      	bhi.n	8005b70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f002 fc76 	bl	8008448 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	e008      	b.n	8005b82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	a7fdabf8 	.word	0xa7fdabf8
 8005ba0:	cccccccd 	.word	0xcccccccd
 8005ba4:	40020010 	.word	0x40020010
 8005ba8:	40020028 	.word	0x40020028
 8005bac:	40020040 	.word	0x40020040
 8005bb0:	40020058 	.word	0x40020058
 8005bb4:	40020070 	.word	0x40020070
 8005bb8:	40020088 	.word	0x40020088
 8005bbc:	400200a0 	.word	0x400200a0
 8005bc0:	400200b8 	.word	0x400200b8
 8005bc4:	40020410 	.word	0x40020410
 8005bc8:	40020428 	.word	0x40020428
 8005bcc:	40020440 	.word	0x40020440
 8005bd0:	40020458 	.word	0x40020458
 8005bd4:	40020470 	.word	0x40020470
 8005bd8:	40020488 	.word	0x40020488
 8005bdc:	400204a0 	.word	0x400204a0
 8005be0:	400204b8 	.word	0x400204b8
 8005be4:	58025408 	.word	0x58025408
 8005be8:	5802541c 	.word	0x5802541c
 8005bec:	58025430 	.word	0x58025430
 8005bf0:	58025444 	.word	0x58025444
 8005bf4:	58025458 	.word	0x58025458
 8005bf8:	5802546c 	.word	0x5802546c
 8005bfc:	58025480 	.word	0x58025480
 8005c00:	58025494 	.word	0x58025494

08005c04 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e1a8      	b.n	8005f68 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a82      	ldr	r2, [pc, #520]	@ (8005e24 <HAL_DMA_DeInit+0x220>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d04a      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a80      	ldr	r2, [pc, #512]	@ (8005e28 <HAL_DMA_DeInit+0x224>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d045      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a7f      	ldr	r2, [pc, #508]	@ (8005e2c <HAL_DMA_DeInit+0x228>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d040      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a7d      	ldr	r2, [pc, #500]	@ (8005e30 <HAL_DMA_DeInit+0x22c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d03b      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7c      	ldr	r2, [pc, #496]	@ (8005e34 <HAL_DMA_DeInit+0x230>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d036      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a7a      	ldr	r2, [pc, #488]	@ (8005e38 <HAL_DMA_DeInit+0x234>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d031      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a79      	ldr	r2, [pc, #484]	@ (8005e3c <HAL_DMA_DeInit+0x238>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d02c      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a77      	ldr	r2, [pc, #476]	@ (8005e40 <HAL_DMA_DeInit+0x23c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d027      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a76      	ldr	r2, [pc, #472]	@ (8005e44 <HAL_DMA_DeInit+0x240>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a74      	ldr	r2, [pc, #464]	@ (8005e48 <HAL_DMA_DeInit+0x244>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01d      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a73      	ldr	r2, [pc, #460]	@ (8005e4c <HAL_DMA_DeInit+0x248>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a71      	ldr	r2, [pc, #452]	@ (8005e50 <HAL_DMA_DeInit+0x24c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a70      	ldr	r2, [pc, #448]	@ (8005e54 <HAL_DMA_DeInit+0x250>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005e58 <HAL_DMA_DeInit+0x254>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e5c <HAL_DMA_DeInit+0x258>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_DMA_DeInit+0xb2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005e60 <HAL_DMA_DeInit+0x25c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d108      	bne.n	8005cc8 <HAL_DMA_DeInit+0xc4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e007      	b.n	8005cd8 <HAL_DMA_DeInit+0xd4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a51      	ldr	r2, [pc, #324]	@ (8005e24 <HAL_DMA_DeInit+0x220>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04a      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a50      	ldr	r2, [pc, #320]	@ (8005e28 <HAL_DMA_DeInit+0x224>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d045      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8005e2c <HAL_DMA_DeInit+0x228>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d040      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a4d      	ldr	r2, [pc, #308]	@ (8005e30 <HAL_DMA_DeInit+0x22c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d03b      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a4b      	ldr	r2, [pc, #300]	@ (8005e34 <HAL_DMA_DeInit+0x230>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d036      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8005e38 <HAL_DMA_DeInit+0x234>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d031      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a48      	ldr	r2, [pc, #288]	@ (8005e3c <HAL_DMA_DeInit+0x238>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02c      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a47      	ldr	r2, [pc, #284]	@ (8005e40 <HAL_DMA_DeInit+0x23c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d027      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a45      	ldr	r2, [pc, #276]	@ (8005e44 <HAL_DMA_DeInit+0x240>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a44      	ldr	r2, [pc, #272]	@ (8005e48 <HAL_DMA_DeInit+0x244>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a42      	ldr	r2, [pc, #264]	@ (8005e4c <HAL_DMA_DeInit+0x248>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a41      	ldr	r2, [pc, #260]	@ (8005e50 <HAL_DMA_DeInit+0x24c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a3f      	ldr	r2, [pc, #252]	@ (8005e54 <HAL_DMA_DeInit+0x250>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e58 <HAL_DMA_DeInit+0x254>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a3c      	ldr	r2, [pc, #240]	@ (8005e5c <HAL_DMA_DeInit+0x258>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_DeInit+0x174>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a3b      	ldr	r2, [pc, #236]	@ (8005e60 <HAL_DMA_DeInit+0x25c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_DMA_DeInit+0x178>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_DMA_DeInit+0x17a>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d025      	beq.n	8005dce <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2221      	movs	r2, #33	@ 0x21
 8005db0:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f002 f980 	bl	80080b8 <DMA_CalcBaseAndBitshift>
 8005db8:	4603      	mov	r3, r0
 8005dba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	223f      	movs	r2, #63	@ 0x3f
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	e081      	b.n	8005ed2 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a24      	ldr	r2, [pc, #144]	@ (8005e64 <HAL_DMA_DeInit+0x260>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d022      	beq.n	8005e1e <HAL_DMA_DeInit+0x21a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	@ (8005e68 <HAL_DMA_DeInit+0x264>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_DMA_DeInit+0x21a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a21      	ldr	r2, [pc, #132]	@ (8005e6c <HAL_DMA_DeInit+0x268>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d018      	beq.n	8005e1e <HAL_DMA_DeInit+0x21a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e70 <HAL_DMA_DeInit+0x26c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_DMA_DeInit+0x21a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005e74 <HAL_DMA_DeInit+0x270>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_DMA_DeInit+0x21a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <HAL_DMA_DeInit+0x274>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_DMA_DeInit+0x21a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <HAL_DMA_DeInit+0x278>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_DMA_DeInit+0x21a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <HAL_DMA_DeInit+0x27c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d132      	bne.n	8005e84 <HAL_DMA_DeInit+0x280>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e031      	b.n	8005e86 <HAL_DMA_DeInit+0x282>
 8005e22:	bf00      	nop
 8005e24:	40020010 	.word	0x40020010
 8005e28:	40020028 	.word	0x40020028
 8005e2c:	40020040 	.word	0x40020040
 8005e30:	40020058 	.word	0x40020058
 8005e34:	40020070 	.word	0x40020070
 8005e38:	40020088 	.word	0x40020088
 8005e3c:	400200a0 	.word	0x400200a0
 8005e40:	400200b8 	.word	0x400200b8
 8005e44:	40020410 	.word	0x40020410
 8005e48:	40020428 	.word	0x40020428
 8005e4c:	40020440 	.word	0x40020440
 8005e50:	40020458 	.word	0x40020458
 8005e54:	40020470 	.word	0x40020470
 8005e58:	40020488 	.word	0x40020488
 8005e5c:	400204a0 	.word	0x400204a0
 8005e60:	400204b8 	.word	0x400204b8
 8005e64:	58025408 	.word	0x58025408
 8005e68:	5802541c 	.word	0x5802541c
 8005e6c:	58025430 	.word	0x58025430
 8005e70:	58025444 	.word	0x58025444
 8005e74:	58025458 	.word	0x58025458
 8005e78:	5802546c 	.word	0x5802546c
 8005e7c:	58025480 	.word	0x58025480
 8005e80:	58025494 	.word	0x58025494
 8005e84:	2300      	movs	r3, #0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d021      	beq.n	8005ece <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f002 f900 	bl	80080b8 <DMA_CalcBaseAndBitshift>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	e001      	b.n	8005ed2 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e04a      	b.n	8005f68 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 fa1e 	bl	8008314 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ef0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00f      	beq.n	8005f1a <HAL_DMA_DeInit+0x316>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d80b      	bhi.n	8005f1a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f002 faa0 	bl	8008448 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f18:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e226      	b.n	80063da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_DMA_Start_IT+0x2a>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e21f      	b.n	80063da <HAL_DMA_Start_IT+0x46a>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	f040 820a 	bne.w	80063c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a68      	ldr	r2, [pc, #416]	@ (8006164 <HAL_DMA_Start_IT+0x1f4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d04a      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a66      	ldr	r2, [pc, #408]	@ (8006168 <HAL_DMA_Start_IT+0x1f8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d045      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a65      	ldr	r2, [pc, #404]	@ (800616c <HAL_DMA_Start_IT+0x1fc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d040      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a63      	ldr	r2, [pc, #396]	@ (8006170 <HAL_DMA_Start_IT+0x200>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d03b      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a62      	ldr	r2, [pc, #392]	@ (8006174 <HAL_DMA_Start_IT+0x204>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d036      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a60      	ldr	r2, [pc, #384]	@ (8006178 <HAL_DMA_Start_IT+0x208>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d031      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a5f      	ldr	r2, [pc, #380]	@ (800617c <HAL_DMA_Start_IT+0x20c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d02c      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a5d      	ldr	r2, [pc, #372]	@ (8006180 <HAL_DMA_Start_IT+0x210>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d027      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a5c      	ldr	r2, [pc, #368]	@ (8006184 <HAL_DMA_Start_IT+0x214>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d022      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a5a      	ldr	r2, [pc, #360]	@ (8006188 <HAL_DMA_Start_IT+0x218>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01d      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a59      	ldr	r2, [pc, #356]	@ (800618c <HAL_DMA_Start_IT+0x21c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d018      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a57      	ldr	r2, [pc, #348]	@ (8006190 <HAL_DMA_Start_IT+0x220>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a56      	ldr	r2, [pc, #344]	@ (8006194 <HAL_DMA_Start_IT+0x224>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00e      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a54      	ldr	r2, [pc, #336]	@ (8006198 <HAL_DMA_Start_IT+0x228>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d009      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a53      	ldr	r2, [pc, #332]	@ (800619c <HAL_DMA_Start_IT+0x22c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d004      	beq.n	800605e <HAL_DMA_Start_IT+0xee>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a51      	ldr	r2, [pc, #324]	@ (80061a0 <HAL_DMA_Start_IT+0x230>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <HAL_DMA_Start_IT+0x100>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e007      	b.n	8006080 <HAL_DMA_Start_IT+0x110>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f001 fe6a 	bl	8007d60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a34      	ldr	r2, [pc, #208]	@ (8006164 <HAL_DMA_Start_IT+0x1f4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d04a      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a33      	ldr	r2, [pc, #204]	@ (8006168 <HAL_DMA_Start_IT+0x1f8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d045      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a31      	ldr	r2, [pc, #196]	@ (800616c <HAL_DMA_Start_IT+0x1fc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d040      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a30      	ldr	r2, [pc, #192]	@ (8006170 <HAL_DMA_Start_IT+0x200>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d03b      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006174 <HAL_DMA_Start_IT+0x204>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d036      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2d      	ldr	r2, [pc, #180]	@ (8006178 <HAL_DMA_Start_IT+0x208>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d031      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2b      	ldr	r2, [pc, #172]	@ (800617c <HAL_DMA_Start_IT+0x20c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d02c      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006180 <HAL_DMA_Start_IT+0x210>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d027      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a28      	ldr	r2, [pc, #160]	@ (8006184 <HAL_DMA_Start_IT+0x214>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d022      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a27      	ldr	r2, [pc, #156]	@ (8006188 <HAL_DMA_Start_IT+0x218>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d01d      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a25      	ldr	r2, [pc, #148]	@ (800618c <HAL_DMA_Start_IT+0x21c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d018      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a24      	ldr	r2, [pc, #144]	@ (8006190 <HAL_DMA_Start_IT+0x220>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a22      	ldr	r2, [pc, #136]	@ (8006194 <HAL_DMA_Start_IT+0x224>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00e      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a21      	ldr	r2, [pc, #132]	@ (8006198 <HAL_DMA_Start_IT+0x228>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1f      	ldr	r2, [pc, #124]	@ (800619c <HAL_DMA_Start_IT+0x22c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_DMA_Start_IT+0x1bc>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1e      	ldr	r2, [pc, #120]	@ (80061a0 <HAL_DMA_Start_IT+0x230>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d101      	bne.n	8006130 <HAL_DMA_Start_IT+0x1c0>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <HAL_DMA_Start_IT+0x1c2>
 8006130:	2300      	movs	r3, #0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d036      	beq.n	80061a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f023 021e 	bic.w	r2, r3, #30
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0216 	orr.w	r2, r2, #22
 8006148:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d03e      	beq.n	80061d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0208 	orr.w	r2, r2, #8
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e035      	b.n	80061d0 <HAL_DMA_Start_IT+0x260>
 8006164:	40020010 	.word	0x40020010
 8006168:	40020028 	.word	0x40020028
 800616c:	40020040 	.word	0x40020040
 8006170:	40020058 	.word	0x40020058
 8006174:	40020070 	.word	0x40020070
 8006178:	40020088 	.word	0x40020088
 800617c:	400200a0 	.word	0x400200a0
 8006180:	400200b8 	.word	0x400200b8
 8006184:	40020410 	.word	0x40020410
 8006188:	40020428 	.word	0x40020428
 800618c:	40020440 	.word	0x40020440
 8006190:	40020458 	.word	0x40020458
 8006194:	40020470 	.word	0x40020470
 8006198:	40020488 	.word	0x40020488
 800619c:	400204a0 	.word	0x400204a0
 80061a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 020e 	bic.w	r2, r3, #14
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 020a 	orr.w	r2, r2, #10
 80061b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0204 	orr.w	r2, r2, #4
 80061ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a83      	ldr	r2, [pc, #524]	@ (80063e4 <HAL_DMA_Start_IT+0x474>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d072      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a82      	ldr	r2, [pc, #520]	@ (80063e8 <HAL_DMA_Start_IT+0x478>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d06d      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a80      	ldr	r2, [pc, #512]	@ (80063ec <HAL_DMA_Start_IT+0x47c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d068      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a7f      	ldr	r2, [pc, #508]	@ (80063f0 <HAL_DMA_Start_IT+0x480>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d063      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a7d      	ldr	r2, [pc, #500]	@ (80063f4 <HAL_DMA_Start_IT+0x484>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d05e      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a7c      	ldr	r2, [pc, #496]	@ (80063f8 <HAL_DMA_Start_IT+0x488>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d059      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a7a      	ldr	r2, [pc, #488]	@ (80063fc <HAL_DMA_Start_IT+0x48c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d054      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a79      	ldr	r2, [pc, #484]	@ (8006400 <HAL_DMA_Start_IT+0x490>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d04f      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a77      	ldr	r2, [pc, #476]	@ (8006404 <HAL_DMA_Start_IT+0x494>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d04a      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a76      	ldr	r2, [pc, #472]	@ (8006408 <HAL_DMA_Start_IT+0x498>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d045      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a74      	ldr	r2, [pc, #464]	@ (800640c <HAL_DMA_Start_IT+0x49c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d040      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a73      	ldr	r2, [pc, #460]	@ (8006410 <HAL_DMA_Start_IT+0x4a0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d03b      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a71      	ldr	r2, [pc, #452]	@ (8006414 <HAL_DMA_Start_IT+0x4a4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d036      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a70      	ldr	r2, [pc, #448]	@ (8006418 <HAL_DMA_Start_IT+0x4a8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d031      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a6e      	ldr	r2, [pc, #440]	@ (800641c <HAL_DMA_Start_IT+0x4ac>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d02c      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a6d      	ldr	r2, [pc, #436]	@ (8006420 <HAL_DMA_Start_IT+0x4b0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d027      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a6b      	ldr	r2, [pc, #428]	@ (8006424 <HAL_DMA_Start_IT+0x4b4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d022      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a6a      	ldr	r2, [pc, #424]	@ (8006428 <HAL_DMA_Start_IT+0x4b8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d01d      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a68      	ldr	r2, [pc, #416]	@ (800642c <HAL_DMA_Start_IT+0x4bc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d018      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a67      	ldr	r2, [pc, #412]	@ (8006430 <HAL_DMA_Start_IT+0x4c0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a65      	ldr	r2, [pc, #404]	@ (8006434 <HAL_DMA_Start_IT+0x4c4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a64      	ldr	r2, [pc, #400]	@ (8006438 <HAL_DMA_Start_IT+0x4c8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d009      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a62      	ldr	r2, [pc, #392]	@ (800643c <HAL_DMA_Start_IT+0x4cc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_DMA_Start_IT+0x350>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a61      	ldr	r2, [pc, #388]	@ (8006440 <HAL_DMA_Start_IT+0x4d0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d101      	bne.n	80062c4 <HAL_DMA_Start_IT+0x354>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <HAL_DMA_Start_IT+0x356>
 80062c4:	2300      	movs	r3, #0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01a      	beq.n	8006300 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a37      	ldr	r2, [pc, #220]	@ (80063e4 <HAL_DMA_Start_IT+0x474>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d04a      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a36      	ldr	r2, [pc, #216]	@ (80063e8 <HAL_DMA_Start_IT+0x478>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d045      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a34      	ldr	r2, [pc, #208]	@ (80063ec <HAL_DMA_Start_IT+0x47c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d040      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a33      	ldr	r2, [pc, #204]	@ (80063f0 <HAL_DMA_Start_IT+0x480>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d03b      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a31      	ldr	r2, [pc, #196]	@ (80063f4 <HAL_DMA_Start_IT+0x484>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d036      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a30      	ldr	r2, [pc, #192]	@ (80063f8 <HAL_DMA_Start_IT+0x488>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d031      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a2e      	ldr	r2, [pc, #184]	@ (80063fc <HAL_DMA_Start_IT+0x48c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d02c      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2d      	ldr	r2, [pc, #180]	@ (8006400 <HAL_DMA_Start_IT+0x490>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d027      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a2b      	ldr	r2, [pc, #172]	@ (8006404 <HAL_DMA_Start_IT+0x494>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d022      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2a      	ldr	r2, [pc, #168]	@ (8006408 <HAL_DMA_Start_IT+0x498>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d01d      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a28      	ldr	r2, [pc, #160]	@ (800640c <HAL_DMA_Start_IT+0x49c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d018      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <HAL_DMA_Start_IT+0x4a0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a25      	ldr	r2, [pc, #148]	@ (8006414 <HAL_DMA_Start_IT+0x4a4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00e      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a24      	ldr	r2, [pc, #144]	@ (8006418 <HAL_DMA_Start_IT+0x4a8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a22      	ldr	r2, [pc, #136]	@ (800641c <HAL_DMA_Start_IT+0x4ac>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_DMA_Start_IT+0x430>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a21      	ldr	r2, [pc, #132]	@ (8006420 <HAL_DMA_Start_IT+0x4b0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <HAL_DMA_Start_IT+0x442>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f042 0201 	orr.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	e012      	b.n	80063d8 <HAL_DMA_Start_IT+0x468>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e009      	b.n	80063d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40020010 	.word	0x40020010
 80063e8:	40020028 	.word	0x40020028
 80063ec:	40020040 	.word	0x40020040
 80063f0:	40020058 	.word	0x40020058
 80063f4:	40020070 	.word	0x40020070
 80063f8:	40020088 	.word	0x40020088
 80063fc:	400200a0 	.word	0x400200a0
 8006400:	400200b8 	.word	0x400200b8
 8006404:	40020410 	.word	0x40020410
 8006408:	40020428 	.word	0x40020428
 800640c:	40020440 	.word	0x40020440
 8006410:	40020458 	.word	0x40020458
 8006414:	40020470 	.word	0x40020470
 8006418:	40020488 	.word	0x40020488
 800641c:	400204a0 	.word	0x400204a0
 8006420:	400204b8 	.word	0x400204b8
 8006424:	58025408 	.word	0x58025408
 8006428:	5802541c 	.word	0x5802541c
 800642c:	58025430 	.word	0x58025430
 8006430:	58025444 	.word	0x58025444
 8006434:	58025458 	.word	0x58025458
 8006438:	5802546c 	.word	0x5802546c
 800643c:	58025480 	.word	0x58025480
 8006440:	58025494 	.word	0x58025494

08006444 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800644c:	f7fc fef2 	bl	8003234 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e2dc      	b.n	8006a16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d008      	beq.n	800647a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2280      	movs	r2, #128	@ 0x80
 800646c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e2cd      	b.n	8006a16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a76      	ldr	r2, [pc, #472]	@ (8006658 <HAL_DMA_Abort+0x214>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d04a      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a74      	ldr	r2, [pc, #464]	@ (800665c <HAL_DMA_Abort+0x218>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d045      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a73      	ldr	r2, [pc, #460]	@ (8006660 <HAL_DMA_Abort+0x21c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d040      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a71      	ldr	r2, [pc, #452]	@ (8006664 <HAL_DMA_Abort+0x220>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d03b      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a70      	ldr	r2, [pc, #448]	@ (8006668 <HAL_DMA_Abort+0x224>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d036      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a6e      	ldr	r2, [pc, #440]	@ (800666c <HAL_DMA_Abort+0x228>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d031      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a6d      	ldr	r2, [pc, #436]	@ (8006670 <HAL_DMA_Abort+0x22c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d02c      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a6b      	ldr	r2, [pc, #428]	@ (8006674 <HAL_DMA_Abort+0x230>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d027      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a6a      	ldr	r2, [pc, #424]	@ (8006678 <HAL_DMA_Abort+0x234>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d022      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a68      	ldr	r2, [pc, #416]	@ (800667c <HAL_DMA_Abort+0x238>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01d      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a67      	ldr	r2, [pc, #412]	@ (8006680 <HAL_DMA_Abort+0x23c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d018      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a65      	ldr	r2, [pc, #404]	@ (8006684 <HAL_DMA_Abort+0x240>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a64      	ldr	r2, [pc, #400]	@ (8006688 <HAL_DMA_Abort+0x244>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a62      	ldr	r2, [pc, #392]	@ (800668c <HAL_DMA_Abort+0x248>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a61      	ldr	r2, [pc, #388]	@ (8006690 <HAL_DMA_Abort+0x24c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_DMA_Abort+0xd6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a5f      	ldr	r2, [pc, #380]	@ (8006694 <HAL_DMA_Abort+0x250>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d101      	bne.n	800651e <HAL_DMA_Abort+0xda>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <HAL_DMA_Abort+0xdc>
 800651e:	2300      	movs	r3, #0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d013      	beq.n	800654c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 021e 	bic.w	r2, r2, #30
 8006532:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695a      	ldr	r2, [r3, #20]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006542:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e00a      	b.n	8006562 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 020e 	bic.w	r2, r2, #14
 800655a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a3c      	ldr	r2, [pc, #240]	@ (8006658 <HAL_DMA_Abort+0x214>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d072      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a3a      	ldr	r2, [pc, #232]	@ (800665c <HAL_DMA_Abort+0x218>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d06d      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a39      	ldr	r2, [pc, #228]	@ (8006660 <HAL_DMA_Abort+0x21c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d068      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a37      	ldr	r2, [pc, #220]	@ (8006664 <HAL_DMA_Abort+0x220>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d063      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a36      	ldr	r2, [pc, #216]	@ (8006668 <HAL_DMA_Abort+0x224>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d05e      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a34      	ldr	r2, [pc, #208]	@ (800666c <HAL_DMA_Abort+0x228>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d059      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a33      	ldr	r2, [pc, #204]	@ (8006670 <HAL_DMA_Abort+0x22c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d054      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a31      	ldr	r2, [pc, #196]	@ (8006674 <HAL_DMA_Abort+0x230>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d04f      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a30      	ldr	r2, [pc, #192]	@ (8006678 <HAL_DMA_Abort+0x234>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d04a      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2e      	ldr	r2, [pc, #184]	@ (800667c <HAL_DMA_Abort+0x238>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d045      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006680 <HAL_DMA_Abort+0x23c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d040      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006684 <HAL_DMA_Abort+0x240>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d03b      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a2a      	ldr	r2, [pc, #168]	@ (8006688 <HAL_DMA_Abort+0x244>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d036      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a28      	ldr	r2, [pc, #160]	@ (800668c <HAL_DMA_Abort+0x248>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d031      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a27      	ldr	r2, [pc, #156]	@ (8006690 <HAL_DMA_Abort+0x24c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d02c      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a25      	ldr	r2, [pc, #148]	@ (8006694 <HAL_DMA_Abort+0x250>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d027      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a24      	ldr	r2, [pc, #144]	@ (8006698 <HAL_DMA_Abort+0x254>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a22      	ldr	r2, [pc, #136]	@ (800669c <HAL_DMA_Abort+0x258>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a21      	ldr	r2, [pc, #132]	@ (80066a0 <HAL_DMA_Abort+0x25c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1f      	ldr	r2, [pc, #124]	@ (80066a4 <HAL_DMA_Abort+0x260>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <HAL_DMA_Abort+0x264>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1c      	ldr	r2, [pc, #112]	@ (80066ac <HAL_DMA_Abort+0x268>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1b      	ldr	r2, [pc, #108]	@ (80066b0 <HAL_DMA_Abort+0x26c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_DMA_Abort+0x20e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a19      	ldr	r2, [pc, #100]	@ (80066b4 <HAL_DMA_Abort+0x270>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d132      	bne.n	80066b8 <HAL_DMA_Abort+0x274>
 8006652:	2301      	movs	r3, #1
 8006654:	e031      	b.n	80066ba <HAL_DMA_Abort+0x276>
 8006656:	bf00      	nop
 8006658:	40020010 	.word	0x40020010
 800665c:	40020028 	.word	0x40020028
 8006660:	40020040 	.word	0x40020040
 8006664:	40020058 	.word	0x40020058
 8006668:	40020070 	.word	0x40020070
 800666c:	40020088 	.word	0x40020088
 8006670:	400200a0 	.word	0x400200a0
 8006674:	400200b8 	.word	0x400200b8
 8006678:	40020410 	.word	0x40020410
 800667c:	40020428 	.word	0x40020428
 8006680:	40020440 	.word	0x40020440
 8006684:	40020458 	.word	0x40020458
 8006688:	40020470 	.word	0x40020470
 800668c:	40020488 	.word	0x40020488
 8006690:	400204a0 	.word	0x400204a0
 8006694:	400204b8 	.word	0x400204b8
 8006698:	58025408 	.word	0x58025408
 800669c:	5802541c 	.word	0x5802541c
 80066a0:	58025430 	.word	0x58025430
 80066a4:	58025444 	.word	0x58025444
 80066a8:	58025458 	.word	0x58025458
 80066ac:	5802546c 	.word	0x5802546c
 80066b0:	58025480 	.word	0x58025480
 80066b4:	58025494 	.word	0x58025494
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6d      	ldr	r2, [pc, #436]	@ (8006888 <HAL_DMA_Abort+0x444>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d04a      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a6b      	ldr	r2, [pc, #428]	@ (800688c <HAL_DMA_Abort+0x448>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d045      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6a      	ldr	r2, [pc, #424]	@ (8006890 <HAL_DMA_Abort+0x44c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d040      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a68      	ldr	r2, [pc, #416]	@ (8006894 <HAL_DMA_Abort+0x450>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d03b      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a67      	ldr	r2, [pc, #412]	@ (8006898 <HAL_DMA_Abort+0x454>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d036      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a65      	ldr	r2, [pc, #404]	@ (800689c <HAL_DMA_Abort+0x458>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d031      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a64      	ldr	r2, [pc, #400]	@ (80068a0 <HAL_DMA_Abort+0x45c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d02c      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a62      	ldr	r2, [pc, #392]	@ (80068a4 <HAL_DMA_Abort+0x460>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d027      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a61      	ldr	r2, [pc, #388]	@ (80068a8 <HAL_DMA_Abort+0x464>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d022      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a5f      	ldr	r2, [pc, #380]	@ (80068ac <HAL_DMA_Abort+0x468>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a5e      	ldr	r2, [pc, #376]	@ (80068b0 <HAL_DMA_Abort+0x46c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5c      	ldr	r2, [pc, #368]	@ (80068b4 <HAL_DMA_Abort+0x470>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5b      	ldr	r2, [pc, #364]	@ (80068b8 <HAL_DMA_Abort+0x474>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a59      	ldr	r2, [pc, #356]	@ (80068bc <HAL_DMA_Abort+0x478>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a58      	ldr	r2, [pc, #352]	@ (80068c0 <HAL_DMA_Abort+0x47c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_DMA_Abort+0x32a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a56      	ldr	r2, [pc, #344]	@ (80068c4 <HAL_DMA_Abort+0x480>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d108      	bne.n	8006780 <HAL_DMA_Abort+0x33c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e007      	b.n	8006790 <HAL_DMA_Abort+0x34c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006790:	e013      	b.n	80067ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006792:	f7fc fd4f 	bl	8003234 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b05      	cmp	r3, #5
 800679e:	d90c      	bls.n	80067ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2203      	movs	r2, #3
 80067aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e12d      	b.n	8006a16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006888 <HAL_DMA_Abort+0x444>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d04a      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a2d      	ldr	r2, [pc, #180]	@ (800688c <HAL_DMA_Abort+0x448>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d045      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2c      	ldr	r2, [pc, #176]	@ (8006890 <HAL_DMA_Abort+0x44c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d040      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006894 <HAL_DMA_Abort+0x450>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d03b      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a29      	ldr	r2, [pc, #164]	@ (8006898 <HAL_DMA_Abort+0x454>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d036      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a27      	ldr	r2, [pc, #156]	@ (800689c <HAL_DMA_Abort+0x458>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d031      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a26      	ldr	r2, [pc, #152]	@ (80068a0 <HAL_DMA_Abort+0x45c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d02c      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a24      	ldr	r2, [pc, #144]	@ (80068a4 <HAL_DMA_Abort+0x460>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d027      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a23      	ldr	r2, [pc, #140]	@ (80068a8 <HAL_DMA_Abort+0x464>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d022      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a21      	ldr	r2, [pc, #132]	@ (80068ac <HAL_DMA_Abort+0x468>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d01d      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a20      	ldr	r2, [pc, #128]	@ (80068b0 <HAL_DMA_Abort+0x46c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d018      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1e      	ldr	r2, [pc, #120]	@ (80068b4 <HAL_DMA_Abort+0x470>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1d      	ldr	r2, [pc, #116]	@ (80068b8 <HAL_DMA_Abort+0x474>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00e      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1b      	ldr	r2, [pc, #108]	@ (80068bc <HAL_DMA_Abort+0x478>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1a      	ldr	r2, [pc, #104]	@ (80068c0 <HAL_DMA_Abort+0x47c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d004      	beq.n	8006866 <HAL_DMA_Abort+0x422>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a18      	ldr	r2, [pc, #96]	@ (80068c4 <HAL_DMA_Abort+0x480>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d101      	bne.n	800686a <HAL_DMA_Abort+0x426>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <HAL_DMA_Abort+0x428>
 800686a:	2300      	movs	r3, #0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d02b      	beq.n	80068c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006874:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	223f      	movs	r2, #63	@ 0x3f
 8006880:	409a      	lsls	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	609a      	str	r2, [r3, #8]
 8006886:	e02a      	b.n	80068de <HAL_DMA_Abort+0x49a>
 8006888:	40020010 	.word	0x40020010
 800688c:	40020028 	.word	0x40020028
 8006890:	40020040 	.word	0x40020040
 8006894:	40020058 	.word	0x40020058
 8006898:	40020070 	.word	0x40020070
 800689c:	40020088 	.word	0x40020088
 80068a0:	400200a0 	.word	0x400200a0
 80068a4:	400200b8 	.word	0x400200b8
 80068a8:	40020410 	.word	0x40020410
 80068ac:	40020428 	.word	0x40020428
 80068b0:	40020440 	.word	0x40020440
 80068b4:	40020458 	.word	0x40020458
 80068b8:	40020470 	.word	0x40020470
 80068bc:	40020488 	.word	0x40020488
 80068c0:	400204a0 	.word	0x400204a0
 80068c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2201      	movs	r2, #1
 80068d8:	409a      	lsls	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a4f      	ldr	r2, [pc, #316]	@ (8006a20 <HAL_DMA_Abort+0x5dc>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d072      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a4d      	ldr	r2, [pc, #308]	@ (8006a24 <HAL_DMA_Abort+0x5e0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d06d      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4c      	ldr	r2, [pc, #304]	@ (8006a28 <HAL_DMA_Abort+0x5e4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d068      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a4a      	ldr	r2, [pc, #296]	@ (8006a2c <HAL_DMA_Abort+0x5e8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d063      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a49      	ldr	r2, [pc, #292]	@ (8006a30 <HAL_DMA_Abort+0x5ec>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d05e      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a47      	ldr	r2, [pc, #284]	@ (8006a34 <HAL_DMA_Abort+0x5f0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d059      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a46      	ldr	r2, [pc, #280]	@ (8006a38 <HAL_DMA_Abort+0x5f4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d054      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a44      	ldr	r2, [pc, #272]	@ (8006a3c <HAL_DMA_Abort+0x5f8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d04f      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a43      	ldr	r2, [pc, #268]	@ (8006a40 <HAL_DMA_Abort+0x5fc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d04a      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a41      	ldr	r2, [pc, #260]	@ (8006a44 <HAL_DMA_Abort+0x600>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d045      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a40      	ldr	r2, [pc, #256]	@ (8006a48 <HAL_DMA_Abort+0x604>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d040      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a3e      	ldr	r2, [pc, #248]	@ (8006a4c <HAL_DMA_Abort+0x608>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d03b      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a50 <HAL_DMA_Abort+0x60c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d036      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a3b      	ldr	r2, [pc, #236]	@ (8006a54 <HAL_DMA_Abort+0x610>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d031      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3a      	ldr	r2, [pc, #232]	@ (8006a58 <HAL_DMA_Abort+0x614>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d02c      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a38      	ldr	r2, [pc, #224]	@ (8006a5c <HAL_DMA_Abort+0x618>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d027      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a37      	ldr	r2, [pc, #220]	@ (8006a60 <HAL_DMA_Abort+0x61c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d022      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a35      	ldr	r2, [pc, #212]	@ (8006a64 <HAL_DMA_Abort+0x620>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01d      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a34      	ldr	r2, [pc, #208]	@ (8006a68 <HAL_DMA_Abort+0x624>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d018      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a32      	ldr	r2, [pc, #200]	@ (8006a6c <HAL_DMA_Abort+0x628>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a31      	ldr	r2, [pc, #196]	@ (8006a70 <HAL_DMA_Abort+0x62c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00e      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006a74 <HAL_DMA_Abort+0x630>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d009      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a2e      	ldr	r2, [pc, #184]	@ (8006a78 <HAL_DMA_Abort+0x634>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d004      	beq.n	80069ce <HAL_DMA_Abort+0x58a>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2c      	ldr	r2, [pc, #176]	@ (8006a7c <HAL_DMA_Abort+0x638>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <HAL_DMA_Abort+0x58e>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <HAL_DMA_Abort+0x590>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d015      	beq.n	8006a04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80069e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00c      	beq.n	8006a04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40020010 	.word	0x40020010
 8006a24:	40020028 	.word	0x40020028
 8006a28:	40020040 	.word	0x40020040
 8006a2c:	40020058 	.word	0x40020058
 8006a30:	40020070 	.word	0x40020070
 8006a34:	40020088 	.word	0x40020088
 8006a38:	400200a0 	.word	0x400200a0
 8006a3c:	400200b8 	.word	0x400200b8
 8006a40:	40020410 	.word	0x40020410
 8006a44:	40020428 	.word	0x40020428
 8006a48:	40020440 	.word	0x40020440
 8006a4c:	40020458 	.word	0x40020458
 8006a50:	40020470 	.word	0x40020470
 8006a54:	40020488 	.word	0x40020488
 8006a58:	400204a0 	.word	0x400204a0
 8006a5c:	400204b8 	.word	0x400204b8
 8006a60:	58025408 	.word	0x58025408
 8006a64:	5802541c 	.word	0x5802541c
 8006a68:	58025430 	.word	0x58025430
 8006a6c:	58025444 	.word	0x58025444
 8006a70:	58025458 	.word	0x58025458
 8006a74:	5802546c 	.word	0x5802546c
 8006a78:	58025480 	.word	0x58025480
 8006a7c:	58025494 	.word	0x58025494

08006a80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e237      	b.n	8006f02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2280      	movs	r2, #128	@ 0x80
 8006aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e22c      	b.n	8006f02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a5c      	ldr	r2, [pc, #368]	@ (8006c20 <HAL_DMA_Abort_IT+0x1a0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d04a      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8006c24 <HAL_DMA_Abort_IT+0x1a4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d045      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a59      	ldr	r2, [pc, #356]	@ (8006c28 <HAL_DMA_Abort_IT+0x1a8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d040      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a58      	ldr	r2, [pc, #352]	@ (8006c2c <HAL_DMA_Abort_IT+0x1ac>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d03b      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a56      	ldr	r2, [pc, #344]	@ (8006c30 <HAL_DMA_Abort_IT+0x1b0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d036      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a55      	ldr	r2, [pc, #340]	@ (8006c34 <HAL_DMA_Abort_IT+0x1b4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d031      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a53      	ldr	r2, [pc, #332]	@ (8006c38 <HAL_DMA_Abort_IT+0x1b8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d02c      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a52      	ldr	r2, [pc, #328]	@ (8006c3c <HAL_DMA_Abort_IT+0x1bc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d027      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a50      	ldr	r2, [pc, #320]	@ (8006c40 <HAL_DMA_Abort_IT+0x1c0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d022      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a4f      	ldr	r2, [pc, #316]	@ (8006c44 <HAL_DMA_Abort_IT+0x1c4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d01d      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a4d      	ldr	r2, [pc, #308]	@ (8006c48 <HAL_DMA_Abort_IT+0x1c8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d018      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8006c4c <HAL_DMA_Abort_IT+0x1cc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d013      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a4a      	ldr	r2, [pc, #296]	@ (8006c50 <HAL_DMA_Abort_IT+0x1d0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00e      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a49      	ldr	r2, [pc, #292]	@ (8006c54 <HAL_DMA_Abort_IT+0x1d4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d009      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a47      	ldr	r2, [pc, #284]	@ (8006c58 <HAL_DMA_Abort_IT+0x1d8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_DMA_Abort_IT+0xc8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a46      	ldr	r2, [pc, #280]	@ (8006c5c <HAL_DMA_Abort_IT+0x1dc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d101      	bne.n	8006b4c <HAL_DMA_Abort_IT+0xcc>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <HAL_DMA_Abort_IT+0xce>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8086 	beq.w	8006c60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2f      	ldr	r2, [pc, #188]	@ (8006c20 <HAL_DMA_Abort_IT+0x1a0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d04a      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8006c24 <HAL_DMA_Abort_IT+0x1a4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d045      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2c      	ldr	r2, [pc, #176]	@ (8006c28 <HAL_DMA_Abort_IT+0x1a8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d040      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8006c2c <HAL_DMA_Abort_IT+0x1ac>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d03b      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a29      	ldr	r2, [pc, #164]	@ (8006c30 <HAL_DMA_Abort_IT+0x1b0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d036      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a28      	ldr	r2, [pc, #160]	@ (8006c34 <HAL_DMA_Abort_IT+0x1b4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d031      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a26      	ldr	r2, [pc, #152]	@ (8006c38 <HAL_DMA_Abort_IT+0x1b8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d02c      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a25      	ldr	r2, [pc, #148]	@ (8006c3c <HAL_DMA_Abort_IT+0x1bc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d027      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a23      	ldr	r2, [pc, #140]	@ (8006c40 <HAL_DMA_Abort_IT+0x1c0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d022      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a22      	ldr	r2, [pc, #136]	@ (8006c44 <HAL_DMA_Abort_IT+0x1c4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d01d      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	@ (8006c48 <HAL_DMA_Abort_IT+0x1c8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d018      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <HAL_DMA_Abort_IT+0x1cc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <HAL_DMA_Abort_IT+0x1d0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00e      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <HAL_DMA_Abort_IT+0x1d4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d009      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1a      	ldr	r2, [pc, #104]	@ (8006c58 <HAL_DMA_Abort_IT+0x1d8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x17c>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a19      	ldr	r2, [pc, #100]	@ (8006c5c <HAL_DMA_Abort_IT+0x1dc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <HAL_DMA_Abort_IT+0x18e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e178      	b.n	8006f00 <HAL_DMA_Abort_IT+0x480>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e16f      	b.n	8006f00 <HAL_DMA_Abort_IT+0x480>
 8006c20:	40020010 	.word	0x40020010
 8006c24:	40020028 	.word	0x40020028
 8006c28:	40020040 	.word	0x40020040
 8006c2c:	40020058 	.word	0x40020058
 8006c30:	40020070 	.word	0x40020070
 8006c34:	40020088 	.word	0x40020088
 8006c38:	400200a0 	.word	0x400200a0
 8006c3c:	400200b8 	.word	0x400200b8
 8006c40:	40020410 	.word	0x40020410
 8006c44:	40020428 	.word	0x40020428
 8006c48:	40020440 	.word	0x40020440
 8006c4c:	40020458 	.word	0x40020458
 8006c50:	40020470 	.word	0x40020470
 8006c54:	40020488 	.word	0x40020488
 8006c58:	400204a0 	.word	0x400204a0
 8006c5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 020e 	bic.w	r2, r2, #14
 8006c6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a6c      	ldr	r2, [pc, #432]	@ (8006e28 <HAL_DMA_Abort_IT+0x3a8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d04a      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6b      	ldr	r2, [pc, #428]	@ (8006e2c <HAL_DMA_Abort_IT+0x3ac>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d045      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a69      	ldr	r2, [pc, #420]	@ (8006e30 <HAL_DMA_Abort_IT+0x3b0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d040      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a68      	ldr	r2, [pc, #416]	@ (8006e34 <HAL_DMA_Abort_IT+0x3b4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d03b      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a66      	ldr	r2, [pc, #408]	@ (8006e38 <HAL_DMA_Abort_IT+0x3b8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d036      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a65      	ldr	r2, [pc, #404]	@ (8006e3c <HAL_DMA_Abort_IT+0x3bc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d031      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a63      	ldr	r2, [pc, #396]	@ (8006e40 <HAL_DMA_Abort_IT+0x3c0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02c      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a62      	ldr	r2, [pc, #392]	@ (8006e44 <HAL_DMA_Abort_IT+0x3c4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d027      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a60      	ldr	r2, [pc, #384]	@ (8006e48 <HAL_DMA_Abort_IT+0x3c8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a5f      	ldr	r2, [pc, #380]	@ (8006e4c <HAL_DMA_Abort_IT+0x3cc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01d      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8006e50 <HAL_DMA_Abort_IT+0x3d0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8006e54 <HAL_DMA_Abort_IT+0x3d4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5a      	ldr	r2, [pc, #360]	@ (8006e58 <HAL_DMA_Abort_IT+0x3d8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a59      	ldr	r2, [pc, #356]	@ (8006e5c <HAL_DMA_Abort_IT+0x3dc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a57      	ldr	r2, [pc, #348]	@ (8006e60 <HAL_DMA_Abort_IT+0x3e0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x290>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a56      	ldr	r2, [pc, #344]	@ (8006e64 <HAL_DMA_Abort_IT+0x3e4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <HAL_DMA_Abort_IT+0x2a2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	e007      	b.n	8006d32 <HAL_DMA_Abort_IT+0x2b2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a3c      	ldr	r2, [pc, #240]	@ (8006e28 <HAL_DMA_Abort_IT+0x3a8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d072      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a3a      	ldr	r2, [pc, #232]	@ (8006e2c <HAL_DMA_Abort_IT+0x3ac>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d06d      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a39      	ldr	r2, [pc, #228]	@ (8006e30 <HAL_DMA_Abort_IT+0x3b0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d068      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a37      	ldr	r2, [pc, #220]	@ (8006e34 <HAL_DMA_Abort_IT+0x3b4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d063      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a36      	ldr	r2, [pc, #216]	@ (8006e38 <HAL_DMA_Abort_IT+0x3b8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d05e      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a34      	ldr	r2, [pc, #208]	@ (8006e3c <HAL_DMA_Abort_IT+0x3bc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d059      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a33      	ldr	r2, [pc, #204]	@ (8006e40 <HAL_DMA_Abort_IT+0x3c0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d054      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a31      	ldr	r2, [pc, #196]	@ (8006e44 <HAL_DMA_Abort_IT+0x3c4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d04f      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a30      	ldr	r2, [pc, #192]	@ (8006e48 <HAL_DMA_Abort_IT+0x3c8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2e      	ldr	r2, [pc, #184]	@ (8006e4c <HAL_DMA_Abort_IT+0x3cc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8006e50 <HAL_DMA_Abort_IT+0x3d0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2b      	ldr	r2, [pc, #172]	@ (8006e54 <HAL_DMA_Abort_IT+0x3d4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2a      	ldr	r2, [pc, #168]	@ (8006e58 <HAL_DMA_Abort_IT+0x3d8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a28      	ldr	r2, [pc, #160]	@ (8006e5c <HAL_DMA_Abort_IT+0x3dc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a27      	ldr	r2, [pc, #156]	@ (8006e60 <HAL_DMA_Abort_IT+0x3e0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a25      	ldr	r2, [pc, #148]	@ (8006e64 <HAL_DMA_Abort_IT+0x3e4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a24      	ldr	r2, [pc, #144]	@ (8006e68 <HAL_DMA_Abort_IT+0x3e8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a22      	ldr	r2, [pc, #136]	@ (8006e6c <HAL_DMA_Abort_IT+0x3ec>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a21      	ldr	r2, [pc, #132]	@ (8006e70 <HAL_DMA_Abort_IT+0x3f0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e74 <HAL_DMA_Abort_IT+0x3f4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8006e78 <HAL_DMA_Abort_IT+0x3f8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1c      	ldr	r2, [pc, #112]	@ (8006e7c <HAL_DMA_Abort_IT+0x3fc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1b      	ldr	r2, [pc, #108]	@ (8006e80 <HAL_DMA_Abort_IT+0x400>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_DMA_Abort_IT+0x3a2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a19      	ldr	r2, [pc, #100]	@ (8006e84 <HAL_DMA_Abort_IT+0x404>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d132      	bne.n	8006e88 <HAL_DMA_Abort_IT+0x408>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e031      	b.n	8006e8a <HAL_DMA_Abort_IT+0x40a>
 8006e26:	bf00      	nop
 8006e28:	40020010 	.word	0x40020010
 8006e2c:	40020028 	.word	0x40020028
 8006e30:	40020040 	.word	0x40020040
 8006e34:	40020058 	.word	0x40020058
 8006e38:	40020070 	.word	0x40020070
 8006e3c:	40020088 	.word	0x40020088
 8006e40:	400200a0 	.word	0x400200a0
 8006e44:	400200b8 	.word	0x400200b8
 8006e48:	40020410 	.word	0x40020410
 8006e4c:	40020428 	.word	0x40020428
 8006e50:	40020440 	.word	0x40020440
 8006e54:	40020458 	.word	0x40020458
 8006e58:	40020470 	.word	0x40020470
 8006e5c:	40020488 	.word	0x40020488
 8006e60:	400204a0 	.word	0x400204a0
 8006e64:	400204b8 	.word	0x400204b8
 8006e68:	58025408 	.word	0x58025408
 8006e6c:	5802541c 	.word	0x5802541c
 8006e70:	58025430 	.word	0x58025430
 8006e74:	58025444 	.word	0x58025444
 8006e78:	58025458 	.word	0x58025458
 8006e7c:	5802546c 	.word	0x5802546c
 8006e80:	58025480 	.word	0x58025480
 8006e84:	58025494 	.word	0x58025494
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d028      	beq.n	8006ee0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2201      	movs	r2, #1
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ebc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ed4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ede:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop

08006f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	@ 0x28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f18:	4b67      	ldr	r3, [pc, #412]	@ (80070b8 <HAL_DMA_IRQHandler+0x1ac>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a67      	ldr	r2, [pc, #412]	@ (80070bc <HAL_DMA_IRQHandler+0x1b0>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	0a9b      	lsrs	r3, r3, #10
 8006f24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a5f      	ldr	r2, [pc, #380]	@ (80070c0 <HAL_DMA_IRQHandler+0x1b4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d04a      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80070c4 <HAL_DMA_IRQHandler+0x1b8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d045      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a5c      	ldr	r2, [pc, #368]	@ (80070c8 <HAL_DMA_IRQHandler+0x1bc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d040      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a5a      	ldr	r2, [pc, #360]	@ (80070cc <HAL_DMA_IRQHandler+0x1c0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d03b      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a59      	ldr	r2, [pc, #356]	@ (80070d0 <HAL_DMA_IRQHandler+0x1c4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d036      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a57      	ldr	r2, [pc, #348]	@ (80070d4 <HAL_DMA_IRQHandler+0x1c8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d031      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a56      	ldr	r2, [pc, #344]	@ (80070d8 <HAL_DMA_IRQHandler+0x1cc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d02c      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a54      	ldr	r2, [pc, #336]	@ (80070dc <HAL_DMA_IRQHandler+0x1d0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d027      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a53      	ldr	r2, [pc, #332]	@ (80070e0 <HAL_DMA_IRQHandler+0x1d4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d022      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a51      	ldr	r2, [pc, #324]	@ (80070e4 <HAL_DMA_IRQHandler+0x1d8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01d      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a50      	ldr	r2, [pc, #320]	@ (80070e8 <HAL_DMA_IRQHandler+0x1dc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d018      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a4e      	ldr	r2, [pc, #312]	@ (80070ec <HAL_DMA_IRQHandler+0x1e0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a4d      	ldr	r2, [pc, #308]	@ (80070f0 <HAL_DMA_IRQHandler+0x1e4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00e      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80070f4 <HAL_DMA_IRQHandler+0x1e8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d009      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a4a      	ldr	r2, [pc, #296]	@ (80070f8 <HAL_DMA_IRQHandler+0x1ec>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d004      	beq.n	8006fde <HAL_DMA_IRQHandler+0xd2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a48      	ldr	r2, [pc, #288]	@ (80070fc <HAL_DMA_IRQHandler+0x1f0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d101      	bne.n	8006fe2 <HAL_DMA_IRQHandler+0xd6>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <HAL_DMA_IRQHandler+0xd8>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 842b 	beq.w	8007840 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80a2 	beq.w	8007144 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a2e      	ldr	r2, [pc, #184]	@ (80070c0 <HAL_DMA_IRQHandler+0x1b4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d04a      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2d      	ldr	r2, [pc, #180]	@ (80070c4 <HAL_DMA_IRQHandler+0x1b8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d045      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2b      	ldr	r2, [pc, #172]	@ (80070c8 <HAL_DMA_IRQHandler+0x1bc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d040      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2a      	ldr	r2, [pc, #168]	@ (80070cc <HAL_DMA_IRQHandler+0x1c0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d03b      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a28      	ldr	r2, [pc, #160]	@ (80070d0 <HAL_DMA_IRQHandler+0x1c4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d036      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a27      	ldr	r2, [pc, #156]	@ (80070d4 <HAL_DMA_IRQHandler+0x1c8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d031      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a25      	ldr	r2, [pc, #148]	@ (80070d8 <HAL_DMA_IRQHandler+0x1cc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d02c      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a24      	ldr	r2, [pc, #144]	@ (80070dc <HAL_DMA_IRQHandler+0x1d0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d027      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a22      	ldr	r2, [pc, #136]	@ (80070e0 <HAL_DMA_IRQHandler+0x1d4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d022      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a21      	ldr	r2, [pc, #132]	@ (80070e4 <HAL_DMA_IRQHandler+0x1d8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d01d      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1f      	ldr	r2, [pc, #124]	@ (80070e8 <HAL_DMA_IRQHandler+0x1dc>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d018      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1e      	ldr	r2, [pc, #120]	@ (80070ec <HAL_DMA_IRQHandler+0x1e0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d013      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1c      	ldr	r2, [pc, #112]	@ (80070f0 <HAL_DMA_IRQHandler+0x1e4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00e      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1b      	ldr	r2, [pc, #108]	@ (80070f4 <HAL_DMA_IRQHandler+0x1e8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a19      	ldr	r2, [pc, #100]	@ (80070f8 <HAL_DMA_IRQHandler+0x1ec>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d004      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x194>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a18      	ldr	r2, [pc, #96]	@ (80070fc <HAL_DMA_IRQHandler+0x1f0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d12f      	bne.n	8007100 <HAL_DMA_IRQHandler+0x1f4>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bf14      	ite	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	2300      	moveq	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	e02e      	b.n	8007114 <HAL_DMA_IRQHandler+0x208>
 80070b6:	bf00      	nop
 80070b8:	2400002c 	.word	0x2400002c
 80070bc:	1b4e81b5 	.word	0x1b4e81b5
 80070c0:	40020010 	.word	0x40020010
 80070c4:	40020028 	.word	0x40020028
 80070c8:	40020040 	.word	0x40020040
 80070cc:	40020058 	.word	0x40020058
 80070d0:	40020070 	.word	0x40020070
 80070d4:	40020088 	.word	0x40020088
 80070d8:	400200a0 	.word	0x400200a0
 80070dc:	400200b8 	.word	0x400200b8
 80070e0:	40020410 	.word	0x40020410
 80070e4:	40020428 	.word	0x40020428
 80070e8:	40020440 	.word	0x40020440
 80070ec:	40020458 	.word	0x40020458
 80070f0:	40020470 	.word	0x40020470
 80070f4:	40020488 	.word	0x40020488
 80070f8:	400204a0 	.word	0x400204a0
 80070fc:	400204b8 	.word	0x400204b8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	bf14      	ite	ne
 800710e:	2301      	movne	r3, #1
 8007110:	2300      	moveq	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d015      	beq.n	8007144 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0204 	bic.w	r2, r2, #4
 8007126:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	2208      	movs	r2, #8
 8007132:	409a      	lsls	r2, r3
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713c:	f043 0201 	orr.w	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	fa22 f303 	lsr.w	r3, r2, r3
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d06e      	beq.n	8007238 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a69      	ldr	r2, [pc, #420]	@ (8007304 <HAL_DMA_IRQHandler+0x3f8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d04a      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a67      	ldr	r2, [pc, #412]	@ (8007308 <HAL_DMA_IRQHandler+0x3fc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d045      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a66      	ldr	r2, [pc, #408]	@ (800730c <HAL_DMA_IRQHandler+0x400>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d040      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a64      	ldr	r2, [pc, #400]	@ (8007310 <HAL_DMA_IRQHandler+0x404>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d03b      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a63      	ldr	r2, [pc, #396]	@ (8007314 <HAL_DMA_IRQHandler+0x408>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d036      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a61      	ldr	r2, [pc, #388]	@ (8007318 <HAL_DMA_IRQHandler+0x40c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d031      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a60      	ldr	r2, [pc, #384]	@ (800731c <HAL_DMA_IRQHandler+0x410>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d02c      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007320 <HAL_DMA_IRQHandler+0x414>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d027      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a5d      	ldr	r2, [pc, #372]	@ (8007324 <HAL_DMA_IRQHandler+0x418>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d022      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a5b      	ldr	r2, [pc, #364]	@ (8007328 <HAL_DMA_IRQHandler+0x41c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d01d      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a5a      	ldr	r2, [pc, #360]	@ (800732c <HAL_DMA_IRQHandler+0x420>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d018      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a58      	ldr	r2, [pc, #352]	@ (8007330 <HAL_DMA_IRQHandler+0x424>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a57      	ldr	r2, [pc, #348]	@ (8007334 <HAL_DMA_IRQHandler+0x428>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00e      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a55      	ldr	r2, [pc, #340]	@ (8007338 <HAL_DMA_IRQHandler+0x42c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d009      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a54      	ldr	r2, [pc, #336]	@ (800733c <HAL_DMA_IRQHandler+0x430>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d004      	beq.n	80071fa <HAL_DMA_IRQHandler+0x2ee>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a52      	ldr	r2, [pc, #328]	@ (8007340 <HAL_DMA_IRQHandler+0x434>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d10a      	bne.n	8007210 <HAL_DMA_IRQHandler+0x304>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007204:	2b00      	cmp	r3, #0
 8007206:	bf14      	ite	ne
 8007208:	2301      	movne	r3, #1
 800720a:	2300      	moveq	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	e003      	b.n	8007218 <HAL_DMA_IRQHandler+0x30c>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00d      	beq.n	8007238 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2201      	movs	r2, #1
 8007226:	409a      	lsls	r2, r3
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	f043 0202 	orr.w	r2, r3, #2
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	2204      	movs	r2, #4
 8007242:	409a      	lsls	r2, r3
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	4013      	ands	r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 808f 	beq.w	800736c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2c      	ldr	r2, [pc, #176]	@ (8007304 <HAL_DMA_IRQHandler+0x3f8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d04a      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a2a      	ldr	r2, [pc, #168]	@ (8007308 <HAL_DMA_IRQHandler+0x3fc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d045      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a29      	ldr	r2, [pc, #164]	@ (800730c <HAL_DMA_IRQHandler+0x400>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d040      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a27      	ldr	r2, [pc, #156]	@ (8007310 <HAL_DMA_IRQHandler+0x404>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d03b      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a26      	ldr	r2, [pc, #152]	@ (8007314 <HAL_DMA_IRQHandler+0x408>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d036      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a24      	ldr	r2, [pc, #144]	@ (8007318 <HAL_DMA_IRQHandler+0x40c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d031      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a23      	ldr	r2, [pc, #140]	@ (800731c <HAL_DMA_IRQHandler+0x410>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d02c      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a21      	ldr	r2, [pc, #132]	@ (8007320 <HAL_DMA_IRQHandler+0x414>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d027      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a20      	ldr	r2, [pc, #128]	@ (8007324 <HAL_DMA_IRQHandler+0x418>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d022      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007328 <HAL_DMA_IRQHandler+0x41c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d01d      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <HAL_DMA_IRQHandler+0x420>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d018      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007330 <HAL_DMA_IRQHandler+0x424>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007334 <HAL_DMA_IRQHandler+0x428>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a18      	ldr	r2, [pc, #96]	@ (8007338 <HAL_DMA_IRQHandler+0x42c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a17      	ldr	r2, [pc, #92]	@ (800733c <HAL_DMA_IRQHandler+0x430>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_DMA_IRQHandler+0x3e2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <HAL_DMA_IRQHandler+0x434>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d12a      	bne.n	8007344 <HAL_DMA_IRQHandler+0x438>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	e023      	b.n	800734c <HAL_DMA_IRQHandler+0x440>
 8007304:	40020010 	.word	0x40020010
 8007308:	40020028 	.word	0x40020028
 800730c:	40020040 	.word	0x40020040
 8007310:	40020058 	.word	0x40020058
 8007314:	40020070 	.word	0x40020070
 8007318:	40020088 	.word	0x40020088
 800731c:	400200a0 	.word	0x400200a0
 8007320:	400200b8 	.word	0x400200b8
 8007324:	40020410 	.word	0x40020410
 8007328:	40020428 	.word	0x40020428
 800732c:	40020440 	.word	0x40020440
 8007330:	40020458 	.word	0x40020458
 8007334:	40020470 	.word	0x40020470
 8007338:	40020488 	.word	0x40020488
 800733c:	400204a0 	.word	0x400204a0
 8007340:	400204b8 	.word	0x400204b8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00d      	beq.n	800736c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2204      	movs	r2, #4
 800735a:	409a      	lsls	r2, r3
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007364:	f043 0204 	orr.w	r2, r3, #4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	2210      	movs	r2, #16
 8007376:	409a      	lsls	r2, r3
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80a6 	beq.w	80074ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a85      	ldr	r2, [pc, #532]	@ (800759c <HAL_DMA_IRQHandler+0x690>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d04a      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a83      	ldr	r2, [pc, #524]	@ (80075a0 <HAL_DMA_IRQHandler+0x694>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d045      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a82      	ldr	r2, [pc, #520]	@ (80075a4 <HAL_DMA_IRQHandler+0x698>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d040      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a80      	ldr	r2, [pc, #512]	@ (80075a8 <HAL_DMA_IRQHandler+0x69c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d03b      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a7f      	ldr	r2, [pc, #508]	@ (80075ac <HAL_DMA_IRQHandler+0x6a0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d036      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a7d      	ldr	r2, [pc, #500]	@ (80075b0 <HAL_DMA_IRQHandler+0x6a4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d031      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a7c      	ldr	r2, [pc, #496]	@ (80075b4 <HAL_DMA_IRQHandler+0x6a8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d02c      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a7a      	ldr	r2, [pc, #488]	@ (80075b8 <HAL_DMA_IRQHandler+0x6ac>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d027      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a79      	ldr	r2, [pc, #484]	@ (80075bc <HAL_DMA_IRQHandler+0x6b0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d022      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a77      	ldr	r2, [pc, #476]	@ (80075c0 <HAL_DMA_IRQHandler+0x6b4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01d      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a76      	ldr	r2, [pc, #472]	@ (80075c4 <HAL_DMA_IRQHandler+0x6b8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d018      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a74      	ldr	r2, [pc, #464]	@ (80075c8 <HAL_DMA_IRQHandler+0x6bc>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a73      	ldr	r2, [pc, #460]	@ (80075cc <HAL_DMA_IRQHandler+0x6c0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a71      	ldr	r2, [pc, #452]	@ (80075d0 <HAL_DMA_IRQHandler+0x6c4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a70      	ldr	r2, [pc, #448]	@ (80075d4 <HAL_DMA_IRQHandler+0x6c8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_DMA_IRQHandler+0x516>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a6e      	ldr	r2, [pc, #440]	@ (80075d8 <HAL_DMA_IRQHandler+0x6cc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d10a      	bne.n	8007438 <HAL_DMA_IRQHandler+0x52c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e009      	b.n	800744c <HAL_DMA_IRQHandler+0x540>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	bf14      	ite	ne
 8007446:	2301      	movne	r3, #1
 8007448:	2300      	moveq	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d03e      	beq.n	80074ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2210      	movs	r2, #16
 800745a:	409a      	lsls	r2, r3
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d018      	beq.n	80074a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d108      	bne.n	800748e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d024      	beq.n	80074ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
 800748c:	e01f      	b.n	80074ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007492:	2b00      	cmp	r3, #0
 8007494:	d01b      	beq.n	80074ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
 800749e:	e016      	b.n	80074ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d107      	bne.n	80074be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0208 	bic.w	r2, r2, #8
 80074bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d2:	f003 031f 	and.w	r3, r3, #31
 80074d6:	2220      	movs	r2, #32
 80074d8:	409a      	lsls	r2, r3
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	4013      	ands	r3, r2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8110 	beq.w	8007704 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a2c      	ldr	r2, [pc, #176]	@ (800759c <HAL_DMA_IRQHandler+0x690>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d04a      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a2b      	ldr	r2, [pc, #172]	@ (80075a0 <HAL_DMA_IRQHandler+0x694>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d045      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a29      	ldr	r2, [pc, #164]	@ (80075a4 <HAL_DMA_IRQHandler+0x698>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d040      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a28      	ldr	r2, [pc, #160]	@ (80075a8 <HAL_DMA_IRQHandler+0x69c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d03b      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a26      	ldr	r2, [pc, #152]	@ (80075ac <HAL_DMA_IRQHandler+0x6a0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d036      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a25      	ldr	r2, [pc, #148]	@ (80075b0 <HAL_DMA_IRQHandler+0x6a4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d031      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a23      	ldr	r2, [pc, #140]	@ (80075b4 <HAL_DMA_IRQHandler+0x6a8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d02c      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a22      	ldr	r2, [pc, #136]	@ (80075b8 <HAL_DMA_IRQHandler+0x6ac>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d027      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a20      	ldr	r2, [pc, #128]	@ (80075bc <HAL_DMA_IRQHandler+0x6b0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d022      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1f      	ldr	r2, [pc, #124]	@ (80075c0 <HAL_DMA_IRQHandler+0x6b4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d01d      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a1d      	ldr	r2, [pc, #116]	@ (80075c4 <HAL_DMA_IRQHandler+0x6b8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a1c      	ldr	r2, [pc, #112]	@ (80075c8 <HAL_DMA_IRQHandler+0x6bc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <HAL_DMA_IRQHandler+0x6c0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a19      	ldr	r2, [pc, #100]	@ (80075d0 <HAL_DMA_IRQHandler+0x6c4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <HAL_DMA_IRQHandler+0x6c8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_DMA_IRQHandler+0x678>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a16      	ldr	r2, [pc, #88]	@ (80075d8 <HAL_DMA_IRQHandler+0x6cc>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d12b      	bne.n	80075dc <HAL_DMA_IRQHandler+0x6d0>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	bf14      	ite	ne
 8007592:	2301      	movne	r3, #1
 8007594:	2300      	moveq	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	e02a      	b.n	80075f0 <HAL_DMA_IRQHandler+0x6e4>
 800759a:	bf00      	nop
 800759c:	40020010 	.word	0x40020010
 80075a0:	40020028 	.word	0x40020028
 80075a4:	40020040 	.word	0x40020040
 80075a8:	40020058 	.word	0x40020058
 80075ac:	40020070 	.word	0x40020070
 80075b0:	40020088 	.word	0x40020088
 80075b4:	400200a0 	.word	0x400200a0
 80075b8:	400200b8 	.word	0x400200b8
 80075bc:	40020410 	.word	0x40020410
 80075c0:	40020428 	.word	0x40020428
 80075c4:	40020440 	.word	0x40020440
 80075c8:	40020458 	.word	0x40020458
 80075cc:	40020470 	.word	0x40020470
 80075d0:	40020488 	.word	0x40020488
 80075d4:	400204a0 	.word	0x400204a0
 80075d8:	400204b8 	.word	0x400204b8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8087 	beq.w	8007704 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	2220      	movs	r2, #32
 8007600:	409a      	lsls	r2, r3
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b04      	cmp	r3, #4
 8007610:	d139      	bne.n	8007686 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0216 	bic.w	r2, r2, #22
 8007620:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	695a      	ldr	r2, [r3, #20]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007630:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	d103      	bne.n	8007642 <HAL_DMA_IRQHandler+0x736>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0208 	bic.w	r2, r2, #8
 8007650:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	223f      	movs	r2, #63	@ 0x3f
 800765c:	409a      	lsls	r2, r3
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 834a 	beq.w	8007d10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
          }
          return;
 8007684:	e344      	b.n	8007d10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d018      	beq.n	80076c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d108      	bne.n	80076b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d02c      	beq.n	8007704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
 80076b2:	e027      	b.n	8007704 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d023      	beq.n	8007704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
 80076c4:	e01e      	b.n	8007704 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10f      	bne.n	80076f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0210 	bic.w	r2, r2, #16
 80076e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8306 	beq.w	8007d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8088 	beq.w	800782c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2204      	movs	r2, #4
 8007720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a7a      	ldr	r2, [pc, #488]	@ (8007914 <HAL_DMA_IRQHandler+0xa08>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d04a      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a79      	ldr	r2, [pc, #484]	@ (8007918 <HAL_DMA_IRQHandler+0xa0c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d045      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a77      	ldr	r2, [pc, #476]	@ (800791c <HAL_DMA_IRQHandler+0xa10>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d040      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a76      	ldr	r2, [pc, #472]	@ (8007920 <HAL_DMA_IRQHandler+0xa14>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d03b      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a74      	ldr	r2, [pc, #464]	@ (8007924 <HAL_DMA_IRQHandler+0xa18>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d036      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a73      	ldr	r2, [pc, #460]	@ (8007928 <HAL_DMA_IRQHandler+0xa1c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d031      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a71      	ldr	r2, [pc, #452]	@ (800792c <HAL_DMA_IRQHandler+0xa20>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d02c      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a70      	ldr	r2, [pc, #448]	@ (8007930 <HAL_DMA_IRQHandler+0xa24>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d027      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a6e      	ldr	r2, [pc, #440]	@ (8007934 <HAL_DMA_IRQHandler+0xa28>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d022      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a6d      	ldr	r2, [pc, #436]	@ (8007938 <HAL_DMA_IRQHandler+0xa2c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d01d      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a6b      	ldr	r2, [pc, #428]	@ (800793c <HAL_DMA_IRQHandler+0xa30>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d018      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a6a      	ldr	r2, [pc, #424]	@ (8007940 <HAL_DMA_IRQHandler+0xa34>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d013      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a68      	ldr	r2, [pc, #416]	@ (8007944 <HAL_DMA_IRQHandler+0xa38>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00e      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a67      	ldr	r2, [pc, #412]	@ (8007948 <HAL_DMA_IRQHandler+0xa3c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d009      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a65      	ldr	r2, [pc, #404]	@ (800794c <HAL_DMA_IRQHandler+0xa40>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d004      	beq.n	80077c4 <HAL_DMA_IRQHandler+0x8b8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a64      	ldr	r2, [pc, #400]	@ (8007950 <HAL_DMA_IRQHandler+0xa44>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d108      	bne.n	80077d6 <HAL_DMA_IRQHandler+0x8ca>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e007      	b.n	80077e6 <HAL_DMA_IRQHandler+0x8da>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0201 	bic.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3301      	adds	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d307      	bcc.n	8007802 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f2      	bne.n	80077e6 <HAL_DMA_IRQHandler+0x8da>
 8007800:	e000      	b.n	8007804 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007802:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2203      	movs	r2, #3
 8007816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800781a:	e003      	b.n	8007824 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8272 	beq.w	8007d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
 800783e:	e26c      	b.n	8007d1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a43      	ldr	r2, [pc, #268]	@ (8007954 <HAL_DMA_IRQHandler+0xa48>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d022      	beq.n	8007890 <HAL_DMA_IRQHandler+0x984>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a42      	ldr	r2, [pc, #264]	@ (8007958 <HAL_DMA_IRQHandler+0xa4c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d01d      	beq.n	8007890 <HAL_DMA_IRQHandler+0x984>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a40      	ldr	r2, [pc, #256]	@ (800795c <HAL_DMA_IRQHandler+0xa50>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d018      	beq.n	8007890 <HAL_DMA_IRQHandler+0x984>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a3f      	ldr	r2, [pc, #252]	@ (8007960 <HAL_DMA_IRQHandler+0xa54>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d013      	beq.n	8007890 <HAL_DMA_IRQHandler+0x984>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a3d      	ldr	r2, [pc, #244]	@ (8007964 <HAL_DMA_IRQHandler+0xa58>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00e      	beq.n	8007890 <HAL_DMA_IRQHandler+0x984>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a3c      	ldr	r2, [pc, #240]	@ (8007968 <HAL_DMA_IRQHandler+0xa5c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d009      	beq.n	8007890 <HAL_DMA_IRQHandler+0x984>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a3a      	ldr	r2, [pc, #232]	@ (800796c <HAL_DMA_IRQHandler+0xa60>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d004      	beq.n	8007890 <HAL_DMA_IRQHandler+0x984>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a39      	ldr	r2, [pc, #228]	@ (8007970 <HAL_DMA_IRQHandler+0xa64>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d101      	bne.n	8007894 <HAL_DMA_IRQHandler+0x988>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <HAL_DMA_IRQHandler+0x98a>
 8007894:	2300      	movs	r3, #0
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 823f 	beq.w	8007d1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2204      	movs	r2, #4
 80078ae:	409a      	lsls	r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 80cd 	beq.w	8007a54 <HAL_DMA_IRQHandler+0xb48>
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80c7 	beq.w	8007a54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ca:	f003 031f 	and.w	r3, r3, #31
 80078ce:	2204      	movs	r2, #4
 80078d0:	409a      	lsls	r2, r3
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d049      	beq.n	8007974 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8210 	beq.w	8007d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078fc:	e20a      	b.n	8007d14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 8206 	beq.w	8007d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007910:	e200      	b.n	8007d14 <HAL_DMA_IRQHandler+0xe08>
 8007912:	bf00      	nop
 8007914:	40020010 	.word	0x40020010
 8007918:	40020028 	.word	0x40020028
 800791c:	40020040 	.word	0x40020040
 8007920:	40020058 	.word	0x40020058
 8007924:	40020070 	.word	0x40020070
 8007928:	40020088 	.word	0x40020088
 800792c:	400200a0 	.word	0x400200a0
 8007930:	400200b8 	.word	0x400200b8
 8007934:	40020410 	.word	0x40020410
 8007938:	40020428 	.word	0x40020428
 800793c:	40020440 	.word	0x40020440
 8007940:	40020458 	.word	0x40020458
 8007944:	40020470 	.word	0x40020470
 8007948:	40020488 	.word	0x40020488
 800794c:	400204a0 	.word	0x400204a0
 8007950:	400204b8 	.word	0x400204b8
 8007954:	58025408 	.word	0x58025408
 8007958:	5802541c 	.word	0x5802541c
 800795c:	58025430 	.word	0x58025430
 8007960:	58025444 	.word	0x58025444
 8007964:	58025458 	.word	0x58025458
 8007968:	5802546c 	.word	0x5802546c
 800796c:	58025480 	.word	0x58025480
 8007970:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d160      	bne.n	8007a40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a7f      	ldr	r2, [pc, #508]	@ (8007b80 <HAL_DMA_IRQHandler+0xc74>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d04a      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a7d      	ldr	r2, [pc, #500]	@ (8007b84 <HAL_DMA_IRQHandler+0xc78>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d045      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a7c      	ldr	r2, [pc, #496]	@ (8007b88 <HAL_DMA_IRQHandler+0xc7c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d040      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a7a      	ldr	r2, [pc, #488]	@ (8007b8c <HAL_DMA_IRQHandler+0xc80>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d03b      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a79      	ldr	r2, [pc, #484]	@ (8007b90 <HAL_DMA_IRQHandler+0xc84>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d036      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a77      	ldr	r2, [pc, #476]	@ (8007b94 <HAL_DMA_IRQHandler+0xc88>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d031      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a76      	ldr	r2, [pc, #472]	@ (8007b98 <HAL_DMA_IRQHandler+0xc8c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d02c      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a74      	ldr	r2, [pc, #464]	@ (8007b9c <HAL_DMA_IRQHandler+0xc90>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d027      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a73      	ldr	r2, [pc, #460]	@ (8007ba0 <HAL_DMA_IRQHandler+0xc94>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d022      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a71      	ldr	r2, [pc, #452]	@ (8007ba4 <HAL_DMA_IRQHandler+0xc98>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d01d      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a70      	ldr	r2, [pc, #448]	@ (8007ba8 <HAL_DMA_IRQHandler+0xc9c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a6e      	ldr	r2, [pc, #440]	@ (8007bac <HAL_DMA_IRQHandler+0xca0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a6d      	ldr	r2, [pc, #436]	@ (8007bb0 <HAL_DMA_IRQHandler+0xca4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a6b      	ldr	r2, [pc, #428]	@ (8007bb4 <HAL_DMA_IRQHandler+0xca8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8007bb8 <HAL_DMA_IRQHandler+0xcac>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_DMA_IRQHandler+0xb12>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a68      	ldr	r2, [pc, #416]	@ (8007bbc <HAL_DMA_IRQHandler+0xcb0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d108      	bne.n	8007a30 <HAL_DMA_IRQHandler+0xb24>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0208 	bic.w	r2, r2, #8
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e007      	b.n	8007a40 <HAL_DMA_IRQHandler+0xb34>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0204 	bic.w	r2, r2, #4
 8007a3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8165 	beq.w	8007d14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a52:	e15f      	b.n	8007d14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 80c5 	beq.w	8007bf4 <HAL_DMA_IRQHandler+0xce8>
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80bf 	beq.w	8007bf4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	2202      	movs	r2, #2
 8007a80:	409a      	lsls	r2, r3
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d018      	beq.n	8007ac2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 813a 	beq.w	8007d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aac:	e134      	b.n	8007d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8130 	beq.w	8007d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac0:	e12a      	b.n	8007d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 8089 	bne.w	8007be0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b80 <HAL_DMA_IRQHandler+0xc74>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d04a      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a29      	ldr	r2, [pc, #164]	@ (8007b84 <HAL_DMA_IRQHandler+0xc78>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d045      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a28      	ldr	r2, [pc, #160]	@ (8007b88 <HAL_DMA_IRQHandler+0xc7c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d040      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a26      	ldr	r2, [pc, #152]	@ (8007b8c <HAL_DMA_IRQHandler+0xc80>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d03b      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a25      	ldr	r2, [pc, #148]	@ (8007b90 <HAL_DMA_IRQHandler+0xc84>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d036      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a23      	ldr	r2, [pc, #140]	@ (8007b94 <HAL_DMA_IRQHandler+0xc88>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d031      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a22      	ldr	r2, [pc, #136]	@ (8007b98 <HAL_DMA_IRQHandler+0xc8c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d02c      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a20      	ldr	r2, [pc, #128]	@ (8007b9c <HAL_DMA_IRQHandler+0xc90>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d027      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba0 <HAL_DMA_IRQHandler+0xc94>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d022      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba4 <HAL_DMA_IRQHandler+0xc98>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d01d      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba8 <HAL_DMA_IRQHandler+0xc9c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d018      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1a      	ldr	r2, [pc, #104]	@ (8007bac <HAL_DMA_IRQHandler+0xca0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d013      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a19      	ldr	r2, [pc, #100]	@ (8007bb0 <HAL_DMA_IRQHandler+0xca4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a17      	ldr	r2, [pc, #92]	@ (8007bb4 <HAL_DMA_IRQHandler+0xca8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d009      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a16      	ldr	r2, [pc, #88]	@ (8007bb8 <HAL_DMA_IRQHandler+0xcac>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_DMA_IRQHandler+0xc62>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a14      	ldr	r2, [pc, #80]	@ (8007bbc <HAL_DMA_IRQHandler+0xcb0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d128      	bne.n	8007bc0 <HAL_DMA_IRQHandler+0xcb4>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0214 	bic.w	r2, r2, #20
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e027      	b.n	8007bd0 <HAL_DMA_IRQHandler+0xcc4>
 8007b80:	40020010 	.word	0x40020010
 8007b84:	40020028 	.word	0x40020028
 8007b88:	40020040 	.word	0x40020040
 8007b8c:	40020058 	.word	0x40020058
 8007b90:	40020070 	.word	0x40020070
 8007b94:	40020088 	.word	0x40020088
 8007b98:	400200a0 	.word	0x400200a0
 8007b9c:	400200b8 	.word	0x400200b8
 8007ba0:	40020410 	.word	0x40020410
 8007ba4:	40020428 	.word	0x40020428
 8007ba8:	40020440 	.word	0x40020440
 8007bac:	40020458 	.word	0x40020458
 8007bb0:	40020470 	.word	0x40020470
 8007bb4:	40020488 	.word	0x40020488
 8007bb8:	400204a0 	.word	0x400204a0
 8007bbc:	400204b8 	.word	0x400204b8
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 020a 	bic.w	r2, r2, #10
 8007bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8097 	beq.w	8007d18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bf2:	e091      	b.n	8007d18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf8:	f003 031f 	and.w	r3, r3, #31
 8007bfc:	2208      	movs	r2, #8
 8007bfe:	409a      	lsls	r2, r3
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8088 	beq.w	8007d1a <HAL_DMA_IRQHandler+0xe0e>
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8082 	beq.w	8007d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a41      	ldr	r2, [pc, #260]	@ (8007d20 <HAL_DMA_IRQHandler+0xe14>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d04a      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a3f      	ldr	r2, [pc, #252]	@ (8007d24 <HAL_DMA_IRQHandler+0xe18>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d045      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8007d28 <HAL_DMA_IRQHandler+0xe1c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d040      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a3c      	ldr	r2, [pc, #240]	@ (8007d2c <HAL_DMA_IRQHandler+0xe20>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d03b      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a3b      	ldr	r2, [pc, #236]	@ (8007d30 <HAL_DMA_IRQHandler+0xe24>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d036      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a39      	ldr	r2, [pc, #228]	@ (8007d34 <HAL_DMA_IRQHandler+0xe28>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d031      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a38      	ldr	r2, [pc, #224]	@ (8007d38 <HAL_DMA_IRQHandler+0xe2c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d02c      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a36      	ldr	r2, [pc, #216]	@ (8007d3c <HAL_DMA_IRQHandler+0xe30>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d027      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a35      	ldr	r2, [pc, #212]	@ (8007d40 <HAL_DMA_IRQHandler+0xe34>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d022      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a33      	ldr	r2, [pc, #204]	@ (8007d44 <HAL_DMA_IRQHandler+0xe38>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01d      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a32      	ldr	r2, [pc, #200]	@ (8007d48 <HAL_DMA_IRQHandler+0xe3c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d018      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a30      	ldr	r2, [pc, #192]	@ (8007d4c <HAL_DMA_IRQHandler+0xe40>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a2f      	ldr	r2, [pc, #188]	@ (8007d50 <HAL_DMA_IRQHandler+0xe44>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	@ (8007d54 <HAL_DMA_IRQHandler+0xe48>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8007d58 <HAL_DMA_IRQHandler+0xe4c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_DMA_IRQHandler+0xdaa>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8007d5c <HAL_DMA_IRQHandler+0xe50>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d108      	bne.n	8007cc8 <HAL_DMA_IRQHandler+0xdbc>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 021c 	bic.w	r2, r2, #28
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e007      	b.n	8007cd8 <HAL_DMA_IRQHandler+0xdcc>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 020e 	bic.w	r2, r2, #14
 8007cd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	409a      	lsls	r2, r3
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d009      	beq.n	8007d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
 8007d0e:	e004      	b.n	8007d1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007d10:	bf00      	nop
 8007d12:	e002      	b.n	8007d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d14:	bf00      	nop
 8007d16:	e000      	b.n	8007d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007d1a:	3728      	adds	r7, #40	@ 0x28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40020010 	.word	0x40020010
 8007d24:	40020028 	.word	0x40020028
 8007d28:	40020040 	.word	0x40020040
 8007d2c:	40020058 	.word	0x40020058
 8007d30:	40020070 	.word	0x40020070
 8007d34:	40020088 	.word	0x40020088
 8007d38:	400200a0 	.word	0x400200a0
 8007d3c:	400200b8 	.word	0x400200b8
 8007d40:	40020410 	.word	0x40020410
 8007d44:	40020428 	.word	0x40020428
 8007d48:	40020440 	.word	0x40020440
 8007d4c:	40020458 	.word	0x40020458
 8007d50:	40020470 	.word	0x40020470
 8007d54:	40020488 	.word	0x40020488
 8007d58:	400204a0 	.word	0x400204a0
 8007d5c:	400204b8 	.word	0x400204b8

08007d60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8007f7c <DMA_SetConfig+0x21c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d072      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a7d      	ldr	r2, [pc, #500]	@ (8007f80 <DMA_SetConfig+0x220>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d06d      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a7c      	ldr	r2, [pc, #496]	@ (8007f84 <DMA_SetConfig+0x224>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d068      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a7a      	ldr	r2, [pc, #488]	@ (8007f88 <DMA_SetConfig+0x228>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d063      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a79      	ldr	r2, [pc, #484]	@ (8007f8c <DMA_SetConfig+0x22c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d05e      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a77      	ldr	r2, [pc, #476]	@ (8007f90 <DMA_SetConfig+0x230>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d059      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a76      	ldr	r2, [pc, #472]	@ (8007f94 <DMA_SetConfig+0x234>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d054      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a74      	ldr	r2, [pc, #464]	@ (8007f98 <DMA_SetConfig+0x238>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d04f      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a73      	ldr	r2, [pc, #460]	@ (8007f9c <DMA_SetConfig+0x23c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d04a      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a71      	ldr	r2, [pc, #452]	@ (8007fa0 <DMA_SetConfig+0x240>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d045      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a70      	ldr	r2, [pc, #448]	@ (8007fa4 <DMA_SetConfig+0x244>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d040      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a6e      	ldr	r2, [pc, #440]	@ (8007fa8 <DMA_SetConfig+0x248>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d03b      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a6d      	ldr	r2, [pc, #436]	@ (8007fac <DMA_SetConfig+0x24c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d036      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a6b      	ldr	r2, [pc, #428]	@ (8007fb0 <DMA_SetConfig+0x250>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a6a      	ldr	r2, [pc, #424]	@ (8007fb4 <DMA_SetConfig+0x254>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d02c      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a68      	ldr	r2, [pc, #416]	@ (8007fb8 <DMA_SetConfig+0x258>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d027      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a67      	ldr	r2, [pc, #412]	@ (8007fbc <DMA_SetConfig+0x25c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d022      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a65      	ldr	r2, [pc, #404]	@ (8007fc0 <DMA_SetConfig+0x260>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01d      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a64      	ldr	r2, [pc, #400]	@ (8007fc4 <DMA_SetConfig+0x264>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d018      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a62      	ldr	r2, [pc, #392]	@ (8007fc8 <DMA_SetConfig+0x268>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a61      	ldr	r2, [pc, #388]	@ (8007fcc <DMA_SetConfig+0x26c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00e      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a5f      	ldr	r2, [pc, #380]	@ (8007fd0 <DMA_SetConfig+0x270>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8007fd4 <DMA_SetConfig+0x274>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <DMA_SetConfig+0x10a>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a5c      	ldr	r2, [pc, #368]	@ (8007fd8 <DMA_SetConfig+0x278>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d101      	bne.n	8007e6e <DMA_SetConfig+0x10e>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <DMA_SetConfig+0x110>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00d      	beq.n	8007e90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a39      	ldr	r2, [pc, #228]	@ (8007f7c <DMA_SetConfig+0x21c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d04a      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a38      	ldr	r2, [pc, #224]	@ (8007f80 <DMA_SetConfig+0x220>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d045      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a36      	ldr	r2, [pc, #216]	@ (8007f84 <DMA_SetConfig+0x224>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d040      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a35      	ldr	r2, [pc, #212]	@ (8007f88 <DMA_SetConfig+0x228>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d03b      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a33      	ldr	r2, [pc, #204]	@ (8007f8c <DMA_SetConfig+0x22c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d036      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a32      	ldr	r2, [pc, #200]	@ (8007f90 <DMA_SetConfig+0x230>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d031      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a30      	ldr	r2, [pc, #192]	@ (8007f94 <DMA_SetConfig+0x234>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d02c      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a2f      	ldr	r2, [pc, #188]	@ (8007f98 <DMA_SetConfig+0x238>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d027      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8007f9c <DMA_SetConfig+0x23c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d022      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa0 <DMA_SetConfig+0x240>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d01d      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa4 <DMA_SetConfig+0x244>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d018      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a29      	ldr	r2, [pc, #164]	@ (8007fa8 <DMA_SetConfig+0x248>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d013      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a27      	ldr	r2, [pc, #156]	@ (8007fac <DMA_SetConfig+0x24c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d00e      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a26      	ldr	r2, [pc, #152]	@ (8007fb0 <DMA_SetConfig+0x250>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d009      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a24      	ldr	r2, [pc, #144]	@ (8007fb4 <DMA_SetConfig+0x254>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d004      	beq.n	8007f30 <DMA_SetConfig+0x1d0>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a23      	ldr	r2, [pc, #140]	@ (8007fb8 <DMA_SetConfig+0x258>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d101      	bne.n	8007f34 <DMA_SetConfig+0x1d4>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <DMA_SetConfig+0x1d6>
 8007f34:	2300      	movs	r3, #0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d059      	beq.n	8007fee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f3e:	f003 031f 	and.w	r3, r3, #31
 8007f42:	223f      	movs	r2, #63	@ 0x3f
 8007f44:	409a      	lsls	r2, r3
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007f58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	2b40      	cmp	r3, #64	@ 0x40
 8007f68:	d138      	bne.n	8007fdc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f7a:	e086      	b.n	800808a <DMA_SetConfig+0x32a>
 8007f7c:	40020010 	.word	0x40020010
 8007f80:	40020028 	.word	0x40020028
 8007f84:	40020040 	.word	0x40020040
 8007f88:	40020058 	.word	0x40020058
 8007f8c:	40020070 	.word	0x40020070
 8007f90:	40020088 	.word	0x40020088
 8007f94:	400200a0 	.word	0x400200a0
 8007f98:	400200b8 	.word	0x400200b8
 8007f9c:	40020410 	.word	0x40020410
 8007fa0:	40020428 	.word	0x40020428
 8007fa4:	40020440 	.word	0x40020440
 8007fa8:	40020458 	.word	0x40020458
 8007fac:	40020470 	.word	0x40020470
 8007fb0:	40020488 	.word	0x40020488
 8007fb4:	400204a0 	.word	0x400204a0
 8007fb8:	400204b8 	.word	0x400204b8
 8007fbc:	58025408 	.word	0x58025408
 8007fc0:	5802541c 	.word	0x5802541c
 8007fc4:	58025430 	.word	0x58025430
 8007fc8:	58025444 	.word	0x58025444
 8007fcc:	58025458 	.word	0x58025458
 8007fd0:	5802546c 	.word	0x5802546c
 8007fd4:	58025480 	.word	0x58025480
 8007fd8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	60da      	str	r2, [r3, #12]
}
 8007fec:	e04d      	b.n	800808a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a29      	ldr	r2, [pc, #164]	@ (8008098 <DMA_SetConfig+0x338>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d022      	beq.n	800803e <DMA_SetConfig+0x2de>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a27      	ldr	r2, [pc, #156]	@ (800809c <DMA_SetConfig+0x33c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d01d      	beq.n	800803e <DMA_SetConfig+0x2de>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a26      	ldr	r2, [pc, #152]	@ (80080a0 <DMA_SetConfig+0x340>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d018      	beq.n	800803e <DMA_SetConfig+0x2de>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a24      	ldr	r2, [pc, #144]	@ (80080a4 <DMA_SetConfig+0x344>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d013      	beq.n	800803e <DMA_SetConfig+0x2de>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a23      	ldr	r2, [pc, #140]	@ (80080a8 <DMA_SetConfig+0x348>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d00e      	beq.n	800803e <DMA_SetConfig+0x2de>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a21      	ldr	r2, [pc, #132]	@ (80080ac <DMA_SetConfig+0x34c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d009      	beq.n	800803e <DMA_SetConfig+0x2de>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a20      	ldr	r2, [pc, #128]	@ (80080b0 <DMA_SetConfig+0x350>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d004      	beq.n	800803e <DMA_SetConfig+0x2de>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a1e      	ldr	r2, [pc, #120]	@ (80080b4 <DMA_SetConfig+0x354>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d101      	bne.n	8008042 <DMA_SetConfig+0x2e2>
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <DMA_SetConfig+0x2e4>
 8008042:	2300      	movs	r3, #0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d020      	beq.n	800808a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	2201      	movs	r2, #1
 8008052:	409a      	lsls	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b40      	cmp	r3, #64	@ 0x40
 8008066:	d108      	bne.n	800807a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	60da      	str	r2, [r3, #12]
}
 8008078:	e007      	b.n	800808a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	60da      	str	r2, [r3, #12]
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	58025408 	.word	0x58025408
 800809c:	5802541c 	.word	0x5802541c
 80080a0:	58025430 	.word	0x58025430
 80080a4:	58025444 	.word	0x58025444
 80080a8:	58025458 	.word	0x58025458
 80080ac:	5802546c 	.word	0x5802546c
 80080b0:	58025480 	.word	0x58025480
 80080b4:	58025494 	.word	0x58025494

080080b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a42      	ldr	r2, [pc, #264]	@ (80081d0 <DMA_CalcBaseAndBitshift+0x118>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d04a      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a41      	ldr	r2, [pc, #260]	@ (80081d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d045      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a3f      	ldr	r2, [pc, #252]	@ (80081d8 <DMA_CalcBaseAndBitshift+0x120>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d040      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a3e      	ldr	r2, [pc, #248]	@ (80081dc <DMA_CalcBaseAndBitshift+0x124>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d03b      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a3c      	ldr	r2, [pc, #240]	@ (80081e0 <DMA_CalcBaseAndBitshift+0x128>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d036      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a3b      	ldr	r2, [pc, #236]	@ (80081e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d031      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a39      	ldr	r2, [pc, #228]	@ (80081e8 <DMA_CalcBaseAndBitshift+0x130>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d02c      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a38      	ldr	r2, [pc, #224]	@ (80081ec <DMA_CalcBaseAndBitshift+0x134>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d027      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a36      	ldr	r2, [pc, #216]	@ (80081f0 <DMA_CalcBaseAndBitshift+0x138>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d022      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a35      	ldr	r2, [pc, #212]	@ (80081f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d01d      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a33      	ldr	r2, [pc, #204]	@ (80081f8 <DMA_CalcBaseAndBitshift+0x140>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d018      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a32      	ldr	r2, [pc, #200]	@ (80081fc <DMA_CalcBaseAndBitshift+0x144>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d013      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a30      	ldr	r2, [pc, #192]	@ (8008200 <DMA_CalcBaseAndBitshift+0x148>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00e      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a2f      	ldr	r2, [pc, #188]	@ (8008204 <DMA_CalcBaseAndBitshift+0x14c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d009      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a2d      	ldr	r2, [pc, #180]	@ (8008208 <DMA_CalcBaseAndBitshift+0x150>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d004      	beq.n	8008160 <DMA_CalcBaseAndBitshift+0xa8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a2c      	ldr	r2, [pc, #176]	@ (800820c <DMA_CalcBaseAndBitshift+0x154>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d101      	bne.n	8008164 <DMA_CalcBaseAndBitshift+0xac>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <DMA_CalcBaseAndBitshift+0xae>
 8008164:	2300      	movs	r3, #0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d024      	beq.n	80081b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	b2db      	uxtb	r3, r3
 8008170:	3b10      	subs	r3, #16
 8008172:	4a27      	ldr	r2, [pc, #156]	@ (8008210 <DMA_CalcBaseAndBitshift+0x158>)
 8008174:	fba2 2303 	umull	r2, r3, r2, r3
 8008178:	091b      	lsrs	r3, r3, #4
 800817a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	4a24      	ldr	r2, [pc, #144]	@ (8008214 <DMA_CalcBaseAndBitshift+0x15c>)
 8008184:	5cd3      	ldrb	r3, [r2, r3]
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b03      	cmp	r3, #3
 8008190:	d908      	bls.n	80081a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	4b1f      	ldr	r3, [pc, #124]	@ (8008218 <DMA_CalcBaseAndBitshift+0x160>)
 800819a:	4013      	ands	r3, r2
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80081a2:	e00d      	b.n	80081c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008218 <DMA_CalcBaseAndBitshift+0x160>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80081b2:	e005      	b.n	80081c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	40020010 	.word	0x40020010
 80081d4:	40020028 	.word	0x40020028
 80081d8:	40020040 	.word	0x40020040
 80081dc:	40020058 	.word	0x40020058
 80081e0:	40020070 	.word	0x40020070
 80081e4:	40020088 	.word	0x40020088
 80081e8:	400200a0 	.word	0x400200a0
 80081ec:	400200b8 	.word	0x400200b8
 80081f0:	40020410 	.word	0x40020410
 80081f4:	40020428 	.word	0x40020428
 80081f8:	40020440 	.word	0x40020440
 80081fc:	40020458 	.word	0x40020458
 8008200:	40020470 	.word	0x40020470
 8008204:	40020488 	.word	0x40020488
 8008208:	400204a0 	.word	0x400204a0
 800820c:	400204b8 	.word	0x400204b8
 8008210:	aaaaaaab 	.word	0xaaaaaaab
 8008214:	08011f94 	.word	0x08011f94
 8008218:	fffffc00 	.word	0xfffffc00

0800821c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d120      	bne.n	8008272 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008234:	2b03      	cmp	r3, #3
 8008236:	d858      	bhi.n	80082ea <DMA_CheckFifoParam+0xce>
 8008238:	a201      	add	r2, pc, #4	@ (adr r2, 8008240 <DMA_CheckFifoParam+0x24>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008251 	.word	0x08008251
 8008244:	08008263 	.word	0x08008263
 8008248:	08008251 	.word	0x08008251
 800824c:	080082eb 	.word	0x080082eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d048      	beq.n	80082ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008260:	e045      	b.n	80082ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008266:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800826a:	d142      	bne.n	80082f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008270:	e03f      	b.n	80082f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800827a:	d123      	bne.n	80082c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008280:	2b03      	cmp	r3, #3
 8008282:	d838      	bhi.n	80082f6 <DMA_CheckFifoParam+0xda>
 8008284:	a201      	add	r2, pc, #4	@ (adr r2, 800828c <DMA_CheckFifoParam+0x70>)
 8008286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828a:	bf00      	nop
 800828c:	0800829d 	.word	0x0800829d
 8008290:	080082a3 	.word	0x080082a3
 8008294:	0800829d 	.word	0x0800829d
 8008298:	080082b5 	.word	0x080082b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
        break;
 80082a0:	e030      	b.n	8008304 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d025      	beq.n	80082fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082b2:	e022      	b.n	80082fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80082bc:	d11f      	bne.n	80082fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082c2:	e01c      	b.n	80082fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d902      	bls.n	80082d2 <DMA_CheckFifoParam+0xb6>
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d003      	beq.n	80082d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80082d0:	e018      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
        break;
 80082d6:	e015      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00e      	beq.n	8008302 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
    break;
 80082e8:	e00b      	b.n	8008302 <DMA_CheckFifoParam+0xe6>
        break;
 80082ea:	bf00      	nop
 80082ec:	e00a      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
        break;
 80082ee:	bf00      	nop
 80082f0:	e008      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
        break;
 80082f2:	bf00      	nop
 80082f4:	e006      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
        break;
 80082f6:	bf00      	nop
 80082f8:	e004      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
        break;
 80082fa:	bf00      	nop
 80082fc:	e002      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
        break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <DMA_CheckFifoParam+0xe8>
    break;
 8008302:	bf00      	nop
    }
  }

  return status;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop

08008314 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a38      	ldr	r2, [pc, #224]	@ (8008408 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d022      	beq.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a36      	ldr	r2, [pc, #216]	@ (800840c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d01d      	beq.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a35      	ldr	r2, [pc, #212]	@ (8008410 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d018      	beq.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a33      	ldr	r2, [pc, #204]	@ (8008414 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d013      	beq.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a32      	ldr	r2, [pc, #200]	@ (8008418 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00e      	beq.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a30      	ldr	r2, [pc, #192]	@ (800841c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d009      	beq.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a2f      	ldr	r2, [pc, #188]	@ (8008420 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d004      	beq.n	8008372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a2d      	ldr	r2, [pc, #180]	@ (8008424 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d101      	bne.n	8008376 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008376:	2300      	movs	r3, #0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01a      	beq.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	b2db      	uxtb	r3, r3
 8008382:	3b08      	subs	r3, #8
 8008384:	4a28      	ldr	r2, [pc, #160]	@ (8008428 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008386:	fba2 2303 	umull	r2, r3, r2, r3
 800838a:	091b      	lsrs	r3, r3, #4
 800838c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4b26      	ldr	r3, [pc, #152]	@ (800842c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	461a      	mov	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a24      	ldr	r2, [pc, #144]	@ (8008430 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80083a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 031f 	and.w	r3, r3, #31
 80083a8:	2201      	movs	r2, #1
 80083aa:	409a      	lsls	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80083b0:	e024      	b.n	80083fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	3b10      	subs	r3, #16
 80083ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008434 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80083bc:	fba2 2303 	umull	r2, r3, r2, r3
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008438 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d806      	bhi.n	80083da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4a1b      	ldr	r2, [pc, #108]	@ (800843c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d902      	bls.n	80083da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3308      	adds	r3, #8
 80083d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	4b18      	ldr	r3, [pc, #96]	@ (8008440 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a16      	ldr	r2, [pc, #88]	@ (8008444 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80083ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f003 031f 	and.w	r3, r3, #31
 80083f4:	2201      	movs	r2, #1
 80083f6:	409a      	lsls	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80083fc:	bf00      	nop
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	58025408 	.word	0x58025408
 800840c:	5802541c 	.word	0x5802541c
 8008410:	58025430 	.word	0x58025430
 8008414:	58025444 	.word	0x58025444
 8008418:	58025458 	.word	0x58025458
 800841c:	5802546c 	.word	0x5802546c
 8008420:	58025480 	.word	0x58025480
 8008424:	58025494 	.word	0x58025494
 8008428:	cccccccd 	.word	0xcccccccd
 800842c:	16009600 	.word	0x16009600
 8008430:	58025880 	.word	0x58025880
 8008434:	aaaaaaab 	.word	0xaaaaaaab
 8008438:	400204b8 	.word	0x400204b8
 800843c:	4002040f 	.word	0x4002040f
 8008440:	10008200 	.word	0x10008200
 8008444:	40020880 	.word	0x40020880

08008448 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d04a      	beq.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b08      	cmp	r3, #8
 8008462:	d847      	bhi.n	80084f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a25      	ldr	r2, [pc, #148]	@ (8008500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d022      	beq.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a24      	ldr	r2, [pc, #144]	@ (8008504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d01d      	beq.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a22      	ldr	r2, [pc, #136]	@ (8008508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d018      	beq.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a21      	ldr	r2, [pc, #132]	@ (800850c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d013      	beq.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1f      	ldr	r2, [pc, #124]	@ (8008510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00e      	beq.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a1e      	ldr	r2, [pc, #120]	@ (8008514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d009      	beq.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d004      	beq.n	80084b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d101      	bne.n	80084b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80084b8:	2300      	movs	r3, #0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4b17      	ldr	r3, [pc, #92]	@ (8008520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a15      	ldr	r2, [pc, #84]	@ (8008524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80084d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80084d2:	e009      	b.n	80084e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4b14      	ldr	r3, [pc, #80]	@ (8008528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	461a      	mov	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a11      	ldr	r2, [pc, #68]	@ (800852c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80084e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	2201      	movs	r2, #1
 80084ee:	409a      	lsls	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	58025408 	.word	0x58025408
 8008504:	5802541c 	.word	0x5802541c
 8008508:	58025430 	.word	0x58025430
 800850c:	58025444 	.word	0x58025444
 8008510:	58025458 	.word	0x58025458
 8008514:	5802546c 	.word	0x5802546c
 8008518:	58025480 	.word	0x58025480
 800851c:	58025494 	.word	0x58025494
 8008520:	1600963f 	.word	0x1600963f
 8008524:	58025940 	.word	0x58025940
 8008528:	1000823f 	.word	0x1000823f
 800852c:	40020940 	.word	0x40020940

08008530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008530:	b480      	push	{r7}
 8008532:	b089      	sub	sp, #36	@ 0x24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800853e:	4b89      	ldr	r3, [pc, #548]	@ (8008764 <HAL_GPIO_Init+0x234>)
 8008540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008542:	e194      	b.n	800886e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	2101      	movs	r1, #1
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	fa01 f303 	lsl.w	r3, r1, r3
 8008550:	4013      	ands	r3, r2
 8008552:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 8186 	beq.w	8008868 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	2b01      	cmp	r3, #1
 8008566:	d005      	beq.n	8008574 <HAL_GPIO_Init+0x44>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d130      	bne.n	80085d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	2203      	movs	r2, #3
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	43db      	mvns	r3, r3
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	4013      	ands	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	4313      	orrs	r3, r2
 800859c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085aa:	2201      	movs	r2, #1
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	43db      	mvns	r3, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4013      	ands	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	091b      	lsrs	r3, r3, #4
 80085c0:	f003 0201 	and.w	r2, r3, #1
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d017      	beq.n	8008612 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	2203      	movs	r2, #3
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	43db      	mvns	r3, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	4013      	ands	r3, r2
 80085f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	4313      	orrs	r3, r2
 800860a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d123      	bne.n	8008666 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	08da      	lsrs	r2, r3, #3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3208      	adds	r2, #8
 8008626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	220f      	movs	r2, #15
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	43db      	mvns	r3, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	691a      	ldr	r2, [r3, #16]
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	fa02 f303 	lsl.w	r3, r2, r3
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	4313      	orrs	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	08da      	lsrs	r2, r3, #3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3208      	adds	r2, #8
 8008660:	69b9      	ldr	r1, [r7, #24]
 8008662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	2203      	movs	r2, #3
 8008672:	fa02 f303 	lsl.w	r3, r2, r3
 8008676:	43db      	mvns	r3, r3
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	4013      	ands	r3, r2
 800867c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f003 0203 	and.w	r2, r3, #3
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	4313      	orrs	r3, r2
 8008692:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 80e0 	beq.w	8008868 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086a8:	4b2f      	ldr	r3, [pc, #188]	@ (8008768 <HAL_GPIO_Init+0x238>)
 80086aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086ae:	4a2e      	ldr	r2, [pc, #184]	@ (8008768 <HAL_GPIO_Init+0x238>)
 80086b0:	f043 0302 	orr.w	r3, r3, #2
 80086b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80086b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008768 <HAL_GPIO_Init+0x238>)
 80086ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086c6:	4a29      	ldr	r2, [pc, #164]	@ (800876c <HAL_GPIO_Init+0x23c>)
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	089b      	lsrs	r3, r3, #2
 80086cc:	3302      	adds	r3, #2
 80086ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	220f      	movs	r2, #15
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	43db      	mvns	r3, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4013      	ands	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a20      	ldr	r2, [pc, #128]	@ (8008770 <HAL_GPIO_Init+0x240>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d052      	beq.n	8008798 <HAL_GPIO_Init+0x268>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008774 <HAL_GPIO_Init+0x244>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d031      	beq.n	800875e <HAL_GPIO_Init+0x22e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a1e      	ldr	r2, [pc, #120]	@ (8008778 <HAL_GPIO_Init+0x248>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d02b      	beq.n	800875a <HAL_GPIO_Init+0x22a>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a1d      	ldr	r2, [pc, #116]	@ (800877c <HAL_GPIO_Init+0x24c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d025      	beq.n	8008756 <HAL_GPIO_Init+0x226>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a1c      	ldr	r2, [pc, #112]	@ (8008780 <HAL_GPIO_Init+0x250>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d01f      	beq.n	8008752 <HAL_GPIO_Init+0x222>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a1b      	ldr	r2, [pc, #108]	@ (8008784 <HAL_GPIO_Init+0x254>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d019      	beq.n	800874e <HAL_GPIO_Init+0x21e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a1a      	ldr	r2, [pc, #104]	@ (8008788 <HAL_GPIO_Init+0x258>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d013      	beq.n	800874a <HAL_GPIO_Init+0x21a>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a19      	ldr	r2, [pc, #100]	@ (800878c <HAL_GPIO_Init+0x25c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00d      	beq.n	8008746 <HAL_GPIO_Init+0x216>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a18      	ldr	r2, [pc, #96]	@ (8008790 <HAL_GPIO_Init+0x260>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d007      	beq.n	8008742 <HAL_GPIO_Init+0x212>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a17      	ldr	r2, [pc, #92]	@ (8008794 <HAL_GPIO_Init+0x264>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d101      	bne.n	800873e <HAL_GPIO_Init+0x20e>
 800873a:	2309      	movs	r3, #9
 800873c:	e02d      	b.n	800879a <HAL_GPIO_Init+0x26a>
 800873e:	230a      	movs	r3, #10
 8008740:	e02b      	b.n	800879a <HAL_GPIO_Init+0x26a>
 8008742:	2308      	movs	r3, #8
 8008744:	e029      	b.n	800879a <HAL_GPIO_Init+0x26a>
 8008746:	2307      	movs	r3, #7
 8008748:	e027      	b.n	800879a <HAL_GPIO_Init+0x26a>
 800874a:	2306      	movs	r3, #6
 800874c:	e025      	b.n	800879a <HAL_GPIO_Init+0x26a>
 800874e:	2305      	movs	r3, #5
 8008750:	e023      	b.n	800879a <HAL_GPIO_Init+0x26a>
 8008752:	2304      	movs	r3, #4
 8008754:	e021      	b.n	800879a <HAL_GPIO_Init+0x26a>
 8008756:	2303      	movs	r3, #3
 8008758:	e01f      	b.n	800879a <HAL_GPIO_Init+0x26a>
 800875a:	2302      	movs	r3, #2
 800875c:	e01d      	b.n	800879a <HAL_GPIO_Init+0x26a>
 800875e:	2301      	movs	r3, #1
 8008760:	e01b      	b.n	800879a <HAL_GPIO_Init+0x26a>
 8008762:	bf00      	nop
 8008764:	58000080 	.word	0x58000080
 8008768:	58024400 	.word	0x58024400
 800876c:	58000400 	.word	0x58000400
 8008770:	58020000 	.word	0x58020000
 8008774:	58020400 	.word	0x58020400
 8008778:	58020800 	.word	0x58020800
 800877c:	58020c00 	.word	0x58020c00
 8008780:	58021000 	.word	0x58021000
 8008784:	58021400 	.word	0x58021400
 8008788:	58021800 	.word	0x58021800
 800878c:	58021c00 	.word	0x58021c00
 8008790:	58022000 	.word	0x58022000
 8008794:	58022400 	.word	0x58022400
 8008798:	2300      	movs	r3, #0
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	f002 0203 	and.w	r2, r2, #3
 80087a0:	0092      	lsls	r2, r2, #2
 80087a2:	4093      	lsls	r3, r2
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087aa:	4938      	ldr	r1, [pc, #224]	@ (800888c <HAL_GPIO_Init+0x35c>)
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	089b      	lsrs	r3, r3, #2
 80087b0:	3302      	adds	r3, #2
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	43db      	mvns	r3, r3
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	4013      	ands	r3, r2
 80087c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80087de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80087e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	43db      	mvns	r3, r3
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	4013      	ands	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	4313      	orrs	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800880c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	43db      	mvns	r3, r3
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	4013      	ands	r3, r2
 8008822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	43db      	mvns	r3, r3
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	4013      	ands	r3, r2
 800884c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3301      	adds	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	fa22 f303 	lsr.w	r3, r2, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f ae63 	bne.w	8008544 <HAL_GPIO_Init+0x14>
  }
}
 800887e:	bf00      	nop
 8008880:	bf00      	nop
 8008882:	3724      	adds	r7, #36	@ 0x24
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	58000400 	.word	0x58000400

08008890 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800889e:	4b75      	ldr	r3, [pc, #468]	@ (8008a74 <HAL_GPIO_DeInit+0x1e4>)
 80088a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80088a2:	e0d9      	b.n	8008a58 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80088a4:	2201      	movs	r2, #1
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	4013      	ands	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80cc 	beq.w	8008a52 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80088ba:	4a6f      	ldr	r2, [pc, #444]	@ (8008a78 <HAL_GPIO_DeInit+0x1e8>)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	089b      	lsrs	r3, r3, #2
 80088c0:	3302      	adds	r3, #2
 80088c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	220f      	movs	r2, #15
 80088d2:	fa02 f303 	lsl.w	r3, r2, r3
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	4013      	ands	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a67      	ldr	r2, [pc, #412]	@ (8008a7c <HAL_GPIO_DeInit+0x1ec>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d037      	beq.n	8008954 <HAL_GPIO_DeInit+0xc4>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a66      	ldr	r2, [pc, #408]	@ (8008a80 <HAL_GPIO_DeInit+0x1f0>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d031      	beq.n	8008950 <HAL_GPIO_DeInit+0xc0>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a65      	ldr	r2, [pc, #404]	@ (8008a84 <HAL_GPIO_DeInit+0x1f4>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d02b      	beq.n	800894c <HAL_GPIO_DeInit+0xbc>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a64      	ldr	r2, [pc, #400]	@ (8008a88 <HAL_GPIO_DeInit+0x1f8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d025      	beq.n	8008948 <HAL_GPIO_DeInit+0xb8>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a63      	ldr	r2, [pc, #396]	@ (8008a8c <HAL_GPIO_DeInit+0x1fc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d01f      	beq.n	8008944 <HAL_GPIO_DeInit+0xb4>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a62      	ldr	r2, [pc, #392]	@ (8008a90 <HAL_GPIO_DeInit+0x200>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d019      	beq.n	8008940 <HAL_GPIO_DeInit+0xb0>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a61      	ldr	r2, [pc, #388]	@ (8008a94 <HAL_GPIO_DeInit+0x204>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d013      	beq.n	800893c <HAL_GPIO_DeInit+0xac>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a60      	ldr	r2, [pc, #384]	@ (8008a98 <HAL_GPIO_DeInit+0x208>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00d      	beq.n	8008938 <HAL_GPIO_DeInit+0xa8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a5f      	ldr	r2, [pc, #380]	@ (8008a9c <HAL_GPIO_DeInit+0x20c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d007      	beq.n	8008934 <HAL_GPIO_DeInit+0xa4>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a5e      	ldr	r2, [pc, #376]	@ (8008aa0 <HAL_GPIO_DeInit+0x210>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d101      	bne.n	8008930 <HAL_GPIO_DeInit+0xa0>
 800892c:	2309      	movs	r3, #9
 800892e:	e012      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008930:	230a      	movs	r3, #10
 8008932:	e010      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008934:	2308      	movs	r3, #8
 8008936:	e00e      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008938:	2307      	movs	r3, #7
 800893a:	e00c      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 800893c:	2306      	movs	r3, #6
 800893e:	e00a      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008940:	2305      	movs	r3, #5
 8008942:	e008      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008944:	2304      	movs	r3, #4
 8008946:	e006      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008948:	2303      	movs	r3, #3
 800894a:	e004      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 800894c:	2302      	movs	r3, #2
 800894e:	e002      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <HAL_GPIO_DeInit+0xc6>
 8008954:	2300      	movs	r3, #0
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	f002 0203 	and.w	r2, r2, #3
 800895c:	0092      	lsls	r2, r2, #2
 800895e:	4093      	lsls	r3, r2
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	d136      	bne.n	80089d4 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	43db      	mvns	r3, r3
 800896e:	401a      	ands	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	43db      	mvns	r3, r3
 800897c:	401a      	ands	r2, r3
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	43db      	mvns	r3, r3
 800898c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008990:	4013      	ands	r3, r2
 8008992:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	43db      	mvns	r3, r3
 800899e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089a2:	4013      	ands	r3, r2
 80089a4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f003 0303 	and.w	r3, r3, #3
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	220f      	movs	r2, #15
 80089b0:	fa02 f303 	lsl.w	r3, r2, r3
 80089b4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80089b6:	4a30      	ldr	r2, [pc, #192]	@ (8008a78 <HAL_GPIO_DeInit+0x1e8>)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	089b      	lsrs	r3, r3, #2
 80089bc:	3302      	adds	r3, #2
 80089be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	43da      	mvns	r2, r3
 80089c6:	482c      	ldr	r0, [pc, #176]	@ (8008a78 <HAL_GPIO_DeInit+0x1e8>)
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	089b      	lsrs	r3, r3, #2
 80089cc:	400a      	ands	r2, r1
 80089ce:	3302      	adds	r3, #2
 80089d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	2103      	movs	r1, #3
 80089de:	fa01 f303 	lsl.w	r3, r1, r3
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	08da      	lsrs	r2, r3, #3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3208      	adds	r2, #8
 80089f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f003 0307 	and.w	r3, r3, #7
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	220f      	movs	r2, #15
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	43db      	mvns	r3, r3
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	08d2      	lsrs	r2, r2, #3
 8008a08:	4019      	ands	r1, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3208      	adds	r2, #8
 8008a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	2103      	movs	r1, #3
 8008a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a20:	43db      	mvns	r3, r3
 8008a22:	401a      	ands	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	fa01 f303 	lsl.w	r3, r1, r3
 8008a34:	43db      	mvns	r3, r3
 8008a36:	401a      	ands	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	2103      	movs	r1, #3
 8008a46:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	401a      	ands	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	3301      	adds	r3, #1
 8008a56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f47f af1f 	bne.w	80088a4 <HAL_GPIO_DeInit+0x14>
  }
}
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	371c      	adds	r7, #28
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	58000080 	.word	0x58000080
 8008a78:	58000400 	.word	0x58000400
 8008a7c:	58020000 	.word	0x58020000
 8008a80:	58020400 	.word	0x58020400
 8008a84:	58020800 	.word	0x58020800
 8008a88:	58020c00 	.word	0x58020c00
 8008a8c:	58021000 	.word	0x58021000
 8008a90:	58021400 	.word	0x58021400
 8008a94:	58021800 	.word	0x58021800
 8008a98:	58021c00 	.word	0x58021c00
 8008a9c:	58022000 	.word	0x58022000
 8008aa0:	58022400 	.word	0x58022400

08008aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	807b      	strh	r3, [r7, #2]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ab4:	787b      	ldrb	r3, [r7, #1]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008aba:	887a      	ldrh	r2, [r7, #2]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ac0:	e003      	b.n	8008aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ac2:	887b      	ldrh	r3, [r7, #2]
 8008ac4:	041a      	lsls	r2, r3, #16
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	619a      	str	r2, [r3, #24]
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
	...

08008ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e07f      	b.n	8008bea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7f8 feb4 	bl	800186c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2224      	movs	r2, #36	@ 0x24
 8008b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0201 	bic.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008b28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d107      	bne.n	8008b52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b4e:	609a      	str	r2, [r3, #8]
 8008b50:	e006      	b.n	8008b60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008b5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d104      	bne.n	8008b72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6859      	ldr	r1, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf4 <HAL_I2C_Init+0x11c>)
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	691a      	ldr	r2, [r3, #16]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69d9      	ldr	r1, [r3, #28]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1a      	ldr	r2, [r3, #32]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0201 	orr.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	02008000 	.word	0x02008000

08008bf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	d138      	bne.n	8008c80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d101      	bne.n	8008c1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c18:	2302      	movs	r3, #2
 8008c1a:	e032      	b.n	8008c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2224      	movs	r2, #36	@ 0x24
 8008c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 0201 	bic.w	r2, r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6819      	ldr	r1, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0201 	orr.w	r2, r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e000      	b.n	8008c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c80:	2302      	movs	r3, #2
  }
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d139      	bne.n	8008d18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e033      	b.n	8008d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2224      	movs	r2, #36	@ 0x24
 8008cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0201 	bic.w	r2, r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008ce0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	021b      	lsls	r3, r3, #8
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e000      	b.n	8008d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d18:	2302      	movs	r3, #2
  }
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
	...

08008d28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d30:	4b19      	ldr	r3, [pc, #100]	@ (8008d98 <HAL_PWREx_ConfigSupply+0x70>)
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d00a      	beq.n	8008d52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d3c:	4b16      	ldr	r3, [pc, #88]	@ (8008d98 <HAL_PWREx_ConfigSupply+0x70>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d001      	beq.n	8008d4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e01f      	b.n	8008d8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e01d      	b.n	8008d8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d52:	4b11      	ldr	r3, [pc, #68]	@ (8008d98 <HAL_PWREx_ConfigSupply+0x70>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f023 0207 	bic.w	r2, r3, #7
 8008d5a:	490f      	ldr	r1, [pc, #60]	@ (8008d98 <HAL_PWREx_ConfigSupply+0x70>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d62:	f7fa fa67 	bl	8003234 <HAL_GetTick>
 8008d66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d68:	e009      	b.n	8008d7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d6a:	f7fa fa63 	bl	8003234 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d78:	d901      	bls.n	8008d7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e007      	b.n	8008d8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d7e:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <HAL_PWREx_ConfigSupply+0x70>)
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d8a:	d1ee      	bne.n	8008d6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	58024800 	.word	0x58024800

08008d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	@ 0x30
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f000 bc48 	b.w	8009640 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 808c 	beq.w	8008ed6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dbe:	4b96      	ldr	r3, [pc, #600]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dc8:	4b93      	ldr	r3, [pc, #588]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd0:	2b10      	cmp	r3, #16
 8008dd2:	d007      	beq.n	8008de4 <HAL_RCC_OscConfig+0x48>
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	2b18      	cmp	r3, #24
 8008dd8:	d111      	bne.n	8008dfe <HAL_RCC_OscConfig+0x62>
 8008dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ddc:	f003 0303 	and.w	r3, r3, #3
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d10c      	bne.n	8008dfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de4:	4b8c      	ldr	r3, [pc, #560]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d071      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x138>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d16d      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f000 bc21 	b.w	8009640 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e06:	d106      	bne.n	8008e16 <HAL_RCC_OscConfig+0x7a>
 8008e08:	4b83      	ldr	r3, [pc, #524]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a82      	ldr	r2, [pc, #520]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	e02e      	b.n	8008e74 <HAL_RCC_OscConfig+0xd8>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10c      	bne.n	8008e38 <HAL_RCC_OscConfig+0x9c>
 8008e1e:	4b7e      	ldr	r3, [pc, #504]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a7d      	ldr	r2, [pc, #500]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a7a      	ldr	r2, [pc, #488]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	e01d      	b.n	8008e74 <HAL_RCC_OscConfig+0xd8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e40:	d10c      	bne.n	8008e5c <HAL_RCC_OscConfig+0xc0>
 8008e42:	4b75      	ldr	r3, [pc, #468]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a74      	ldr	r2, [pc, #464]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	4b72      	ldr	r3, [pc, #456]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a71      	ldr	r2, [pc, #452]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	e00b      	b.n	8008e74 <HAL_RCC_OscConfig+0xd8>
 8008e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a6d      	ldr	r2, [pc, #436]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	4b6b      	ldr	r3, [pc, #428]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a6a      	ldr	r2, [pc, #424]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d015      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fa f9da 	bl	8003234 <HAL_GetTick>
 8008e80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e82:	e00a      	b.n	8008e9a <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e84:	f7fa f9d6 	bl	8003234 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e3d2      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0ee      	beq.n	8008e84 <HAL_RCC_OscConfig+0xe8>
 8008ea6:	e016      	b.n	8008ed6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea8:	f7fa f9c4 	bl	8003234 <HAL_GetTick>
 8008eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eae:	e00a      	b.n	8008ec6 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eb0:	f7fa f9c0 	bl	8003234 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e3bc      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ec6:	4b54      	ldr	r3, [pc, #336]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1ee      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x114>
 8008ed2:	e000      	b.n	8008ed6 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 80cb 	beq.w	800907a <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008eee:	4b4a      	ldr	r3, [pc, #296]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d007      	beq.n	8008f0a <HAL_RCC_OscConfig+0x16e>
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	2b18      	cmp	r3, #24
 8008efe:	d156      	bne.n	8008fae <HAL_RCC_OscConfig+0x212>
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f003 0303 	and.w	r3, r3, #3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d151      	bne.n	8008fae <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f0a:	4b43      	ldr	r3, [pc, #268]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_RCC_OscConfig+0x186>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e38e      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f22:	4b3d      	ldr	r3, [pc, #244]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 0219 	bic.w	r2, r3, #25
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	493a      	ldr	r1, [pc, #232]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f34:	f7fa f97e 	bl	8003234 <HAL_GetTick>
 8008f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f3c:	f7fa f97a 	bl	8003234 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e378      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f4e:	4b32      	ldr	r3, [pc, #200]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0f0      	beq.n	8008f3c <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f5a:	f7fa f99b 	bl	8003294 <HAL_GetREVID>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d817      	bhi.n	8008f98 <HAL_RCC_OscConfig+0x1fc>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	2b40      	cmp	r3, #64	@ 0x40
 8008f6e:	d108      	bne.n	8008f82 <HAL_RCC_OscConfig+0x1e6>
 8008f70:	4b29      	ldr	r3, [pc, #164]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008f78:	4a27      	ldr	r2, [pc, #156]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f80:	e07b      	b.n	800907a <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f82:	4b25      	ldr	r3, [pc, #148]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	031b      	lsls	r3, r3, #12
 8008f90:	4921      	ldr	r1, [pc, #132]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f96:	e070      	b.n	800907a <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f98:	4b1f      	ldr	r3, [pc, #124]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	061b      	lsls	r3, r3, #24
 8008fa6:	491c      	ldr	r1, [pc, #112]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fac:	e065      	b.n	800907a <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d048      	beq.n	8009048 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fb6:	4b18      	ldr	r3, [pc, #96]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f023 0219 	bic.w	r2, r3, #25
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	4915      	ldr	r1, [pc, #84]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc8:	f7fa f934 	bl	8003234 <HAL_GetTick>
 8008fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fd0:	f7fa f930 	bl	8003234 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e32e      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0304 	and.w	r3, r3, #4
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f0      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fee:	f7fa f951 	bl	8003294 <HAL_GetREVID>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d81a      	bhi.n	8009032 <HAL_RCC_OscConfig+0x296>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b40      	cmp	r3, #64	@ 0x40
 8009002:	d10b      	bne.n	800901c <HAL_RCC_OscConfig+0x280>
 8009004:	4b04      	ldr	r3, [pc, #16]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800900c:	4a02      	ldr	r2, [pc, #8]	@ (8009018 <HAL_RCC_OscConfig+0x27c>)
 800900e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009012:	6053      	str	r3, [r2, #4]
 8009014:	e031      	b.n	800907a <HAL_RCC_OscConfig+0x2de>
 8009016:	bf00      	nop
 8009018:	58024400 	.word	0x58024400
 800901c:	4b9c      	ldr	r3, [pc, #624]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	031b      	lsls	r3, r3, #12
 800902a:	4999      	ldr	r1, [pc, #612]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800902c:	4313      	orrs	r3, r2
 800902e:	604b      	str	r3, [r1, #4]
 8009030:	e023      	b.n	800907a <HAL_RCC_OscConfig+0x2de>
 8009032:	4b97      	ldr	r3, [pc, #604]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	061b      	lsls	r3, r3, #24
 8009040:	4993      	ldr	r1, [pc, #588]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009042:	4313      	orrs	r3, r2
 8009044:	604b      	str	r3, [r1, #4]
 8009046:	e018      	b.n	800907a <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009048:	4b91      	ldr	r3, [pc, #580]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a90      	ldr	r2, [pc, #576]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800904e:	f023 0301 	bic.w	r3, r3, #1
 8009052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7fa f8ee 	bl	8003234 <HAL_GetTick>
 8009058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800905a:	e008      	b.n	800906e <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800905c:	f7fa f8ea 	bl	8003234 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e2e8      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800906e:	4b88      	ldr	r3, [pc, #544]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f0      	bne.n	800905c <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0310 	and.w	r3, r3, #16
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80a9 	beq.w	80091da <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009088:	4b81      	ldr	r3, [pc, #516]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009090:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009092:	4b7f      	ldr	r3, [pc, #508]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009096:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	2b08      	cmp	r3, #8
 800909c:	d007      	beq.n	80090ae <HAL_RCC_OscConfig+0x312>
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b18      	cmp	r3, #24
 80090a2:	d13a      	bne.n	800911a <HAL_RCC_OscConfig+0x37e>
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d135      	bne.n	800911a <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090ae:	4b78      	ldr	r3, [pc, #480]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <HAL_RCC_OscConfig+0x32a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	2b80      	cmp	r3, #128	@ 0x80
 80090c0:	d001      	beq.n	80090c6 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e2bc      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090c6:	f7fa f8e5 	bl	8003294 <HAL_GetREVID>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d817      	bhi.n	8009104 <HAL_RCC_OscConfig+0x368>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d108      	bne.n	80090ee <HAL_RCC_OscConfig+0x352>
 80090dc:	4b6c      	ldr	r3, [pc, #432]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80090e4:	4a6a      	ldr	r2, [pc, #424]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80090e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090ec:	e075      	b.n	80091da <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090ee:	4b68      	ldr	r3, [pc, #416]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	069b      	lsls	r3, r3, #26
 80090fc:	4964      	ldr	r1, [pc, #400]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009102:	e06a      	b.n	80091da <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009104:	4b62      	ldr	r3, [pc, #392]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	061b      	lsls	r3, r3, #24
 8009112:	495f      	ldr	r1, [pc, #380]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009114:	4313      	orrs	r3, r2
 8009116:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009118:	e05f      	b.n	80091da <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d042      	beq.n	80091a8 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009122:	4b5b      	ldr	r3, [pc, #364]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a5a      	ldr	r2, [pc, #360]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800912e:	f7fa f881 	bl	8003234 <HAL_GetTick>
 8009132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009134:	e008      	b.n	8009148 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009136:	f7fa f87d 	bl	8003234 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e27b      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009148:	4b51      	ldr	r3, [pc, #324]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009154:	f7fa f89e 	bl	8003294 <HAL_GetREVID>
 8009158:	4603      	mov	r3, r0
 800915a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800915e:	4293      	cmp	r3, r2
 8009160:	d817      	bhi.n	8009192 <HAL_RCC_OscConfig+0x3f6>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	2b20      	cmp	r3, #32
 8009168:	d108      	bne.n	800917c <HAL_RCC_OscConfig+0x3e0>
 800916a:	4b49      	ldr	r3, [pc, #292]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009172:	4a47      	ldr	r2, [pc, #284]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009174:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009178:	6053      	str	r3, [r2, #4]
 800917a:	e02e      	b.n	80091da <HAL_RCC_OscConfig+0x43e>
 800917c:	4b44      	ldr	r3, [pc, #272]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	069b      	lsls	r3, r3, #26
 800918a:	4941      	ldr	r1, [pc, #260]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800918c:	4313      	orrs	r3, r2
 800918e:	604b      	str	r3, [r1, #4]
 8009190:	e023      	b.n	80091da <HAL_RCC_OscConfig+0x43e>
 8009192:	4b3f      	ldr	r3, [pc, #252]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	061b      	lsls	r3, r3, #24
 80091a0:	493b      	ldr	r1, [pc, #236]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60cb      	str	r3, [r1, #12]
 80091a6:	e018      	b.n	80091da <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091a8:	4b39      	ldr	r3, [pc, #228]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a38      	ldr	r2, [pc, #224]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80091ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b4:	f7fa f83e 	bl	8003234 <HAL_GetTick>
 80091b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091ba:	e008      	b.n	80091ce <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091bc:	f7fa f83a 	bl	8003234 <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e238      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091ce:	4b30      	ldr	r3, [pc, #192]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1f0      	bne.n	80091bc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d036      	beq.n	8009254 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d019      	beq.n	8009222 <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091ee:	4b28      	ldr	r3, [pc, #160]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80091f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f2:	4a27      	ldr	r2, [pc, #156]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 80091f4:	f043 0301 	orr.w	r3, r3, #1
 80091f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091fa:	f7fa f81b 	bl	8003234 <HAL_GetTick>
 80091fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009200:	e008      	b.n	8009214 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009202:	f7fa f817 	bl	8003234 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e215      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009214:	4b1e      	ldr	r3, [pc, #120]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0f0      	beq.n	8009202 <HAL_RCC_OscConfig+0x466>
 8009220:	e018      	b.n	8009254 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009222:	4b1b      	ldr	r3, [pc, #108]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009226:	4a1a      	ldr	r2, [pc, #104]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 8009228:	f023 0301 	bic.w	r3, r3, #1
 800922c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800922e:	f7fa f801 	bl	8003234 <HAL_GetTick>
 8009232:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009234:	e008      	b.n	8009248 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009236:	f7f9 fffd 	bl	8003234 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	2b02      	cmp	r3, #2
 8009242:	d901      	bls.n	8009248 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e1fb      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009248:	4b11      	ldr	r3, [pc, #68]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800924a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1f0      	bne.n	8009236 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d039      	beq.n	80092d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01c      	beq.n	80092a2 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009268:	4b09      	ldr	r3, [pc, #36]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a08      	ldr	r2, [pc, #32]	@ (8009290 <HAL_RCC_OscConfig+0x4f4>)
 800926e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009272:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009274:	f7f9 ffde 	bl	8003234 <HAL_GetTick>
 8009278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800927a:	e00b      	b.n	8009294 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800927c:	f7f9 ffda 	bl	8003234 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	2b02      	cmp	r3, #2
 8009288:	d904      	bls.n	8009294 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e1d8      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
 800928e:	bf00      	nop
 8009290:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009294:	4b65      	ldr	r3, [pc, #404]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0ed      	beq.n	800927c <HAL_RCC_OscConfig+0x4e0>
 80092a0:	e018      	b.n	80092d4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092a2:	4b62      	ldr	r3, [pc, #392]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a61      	ldr	r2, [pc, #388]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 80092a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092ae:	f7f9 ffc1 	bl	8003234 <HAL_GetTick>
 80092b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092b4:	e008      	b.n	80092c8 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092b6:	f7f9 ffbd 	bl	8003234 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d901      	bls.n	80092c8 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e1bb      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092c8:	4b58      	ldr	r3, [pc, #352]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1f0      	bne.n	80092b6 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 8081 	beq.w	80093e4 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092e2:	4b53      	ldr	r3, [pc, #332]	@ (8009430 <HAL_RCC_OscConfig+0x694>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a52      	ldr	r2, [pc, #328]	@ (8009430 <HAL_RCC_OscConfig+0x694>)
 80092e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092ee:	f7f9 ffa1 	bl	8003234 <HAL_GetTick>
 80092f2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f4:	e008      	b.n	8009308 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f6:	f7f9 ff9d 	bl	8003234 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b64      	cmp	r3, #100	@ 0x64
 8009302:	d901      	bls.n	8009308 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e19b      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009308:	4b49      	ldr	r3, [pc, #292]	@ (8009430 <HAL_RCC_OscConfig+0x694>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0f0      	beq.n	80092f6 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d106      	bne.n	800932a <HAL_RCC_OscConfig+0x58e>
 800931c:	4b43      	ldr	r3, [pc, #268]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 800931e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009320:	4a42      	ldr	r2, [pc, #264]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	6713      	str	r3, [r2, #112]	@ 0x70
 8009328:	e02d      	b.n	8009386 <HAL_RCC_OscConfig+0x5ea>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10c      	bne.n	800934c <HAL_RCC_OscConfig+0x5b0>
 8009332:	4b3e      	ldr	r3, [pc, #248]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009336:	4a3d      	ldr	r2, [pc, #244]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	6713      	str	r3, [r2, #112]	@ 0x70
 800933e:	4b3b      	ldr	r3, [pc, #236]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009342:	4a3a      	ldr	r2, [pc, #232]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009344:	f023 0304 	bic.w	r3, r3, #4
 8009348:	6713      	str	r3, [r2, #112]	@ 0x70
 800934a:	e01c      	b.n	8009386 <HAL_RCC_OscConfig+0x5ea>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	2b05      	cmp	r3, #5
 8009352:	d10c      	bne.n	800936e <HAL_RCC_OscConfig+0x5d2>
 8009354:	4b35      	ldr	r3, [pc, #212]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009358:	4a34      	ldr	r2, [pc, #208]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 800935a:	f043 0304 	orr.w	r3, r3, #4
 800935e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009360:	4b32      	ldr	r3, [pc, #200]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009364:	4a31      	ldr	r2, [pc, #196]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009366:	f043 0301 	orr.w	r3, r3, #1
 800936a:	6713      	str	r3, [r2, #112]	@ 0x70
 800936c:	e00b      	b.n	8009386 <HAL_RCC_OscConfig+0x5ea>
 800936e:	4b2f      	ldr	r3, [pc, #188]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009372:	4a2e      	ldr	r2, [pc, #184]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009374:	f023 0301 	bic.w	r3, r3, #1
 8009378:	6713      	str	r3, [r2, #112]	@ 0x70
 800937a:	4b2c      	ldr	r3, [pc, #176]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 800937c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800937e:	4a2b      	ldr	r2, [pc, #172]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009380:	f023 0304 	bic.w	r3, r3, #4
 8009384:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d015      	beq.n	80093ba <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800938e:	f7f9 ff51 	bl	8003234 <HAL_GetTick>
 8009392:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009394:	e00a      	b.n	80093ac <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009396:	f7f9 ff4d 	bl	8003234 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d901      	bls.n	80093ac <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e149      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093ac:	4b1f      	ldr	r3, [pc, #124]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 80093ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d0ee      	beq.n	8009396 <HAL_RCC_OscConfig+0x5fa>
 80093b8:	e014      	b.n	80093e4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ba:	f7f9 ff3b 	bl	8003234 <HAL_GetTick>
 80093be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093c0:	e00a      	b.n	80093d8 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093c2:	f7f9 ff37 	bl	8003234 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d901      	bls.n	80093d8 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e133      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093d8:	4b14      	ldr	r3, [pc, #80]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 80093da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1ee      	bne.n	80093c2 <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 8128 	beq.w	800963e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80093ee:	4b0f      	ldr	r3, [pc, #60]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093f6:	2b18      	cmp	r3, #24
 80093f8:	f000 80b8 	beq.w	800956c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	2b02      	cmp	r3, #2
 8009402:	f040 8099 	bne.w	8009538 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009406:	4b09      	ldr	r3, [pc, #36]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a08      	ldr	r2, [pc, #32]	@ (800942c <HAL_RCC_OscConfig+0x690>)
 800940c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009412:	f7f9 ff0f 	bl	8003234 <HAL_GetTick>
 8009416:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009418:	e00c      	b.n	8009434 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800941a:	f7f9 ff0b 	bl	8003234 <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	2b02      	cmp	r3, #2
 8009426:	d905      	bls.n	8009434 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e109      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
 800942c:	58024400 	.word	0x58024400
 8009430:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009434:	4b84      	ldr	r3, [pc, #528]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1ec      	bne.n	800941a <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009440:	4b81      	ldr	r3, [pc, #516]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009444:	4b81      	ldr	r3, [pc, #516]	@ (800964c <HAL_RCC_OscConfig+0x8b0>)
 8009446:	4013      	ands	r3, r2
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009450:	0112      	lsls	r2, r2, #4
 8009452:	430a      	orrs	r2, r1
 8009454:	497c      	ldr	r1, [pc, #496]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009456:	4313      	orrs	r3, r2
 8009458:	628b      	str	r3, [r1, #40]	@ 0x28
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945e:	3b01      	subs	r3, #1
 8009460:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009468:	3b01      	subs	r3, #1
 800946a:	025b      	lsls	r3, r3, #9
 800946c:	b29b      	uxth	r3, r3
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009474:	3b01      	subs	r3, #1
 8009476:	041b      	lsls	r3, r3, #16
 8009478:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800947c:	431a      	orrs	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009482:	3b01      	subs	r3, #1
 8009484:	061b      	lsls	r3, r3, #24
 8009486:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800948a:	496f      	ldr	r1, [pc, #444]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800948c:	4313      	orrs	r3, r2
 800948e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009490:	4b6d      	ldr	r3, [pc, #436]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	4a6c      	ldr	r2, [pc, #432]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009496:	f023 0301 	bic.w	r3, r3, #1
 800949a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800949c:	4b6a      	ldr	r3, [pc, #424]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800949e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094a0:	4b6b      	ldr	r3, [pc, #428]	@ (8009650 <HAL_RCC_OscConfig+0x8b4>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094a8:	00d2      	lsls	r2, r2, #3
 80094aa:	4967      	ldr	r1, [pc, #412]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094b0:	4b65      	ldr	r3, [pc, #404]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b4:	f023 020c 	bic.w	r2, r3, #12
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	4962      	ldr	r1, [pc, #392]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094c2:	4b61      	ldr	r3, [pc, #388]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	f023 0202 	bic.w	r2, r3, #2
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ce:	495e      	ldr	r1, [pc, #376]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094d4:	4b5c      	ldr	r3, [pc, #368]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d8:	4a5b      	ldr	r2, [pc, #364]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e0:	4b59      	ldr	r3, [pc, #356]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	4a58      	ldr	r2, [pc, #352]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094ec:	4b56      	ldr	r3, [pc, #344]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	4a55      	ldr	r2, [pc, #340]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80094f8:	4b53      	ldr	r3, [pc, #332]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fc:	4a52      	ldr	r2, [pc, #328]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80094fe:	f043 0301 	orr.w	r3, r3, #1
 8009502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009504:	4b50      	ldr	r3, [pc, #320]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a4f      	ldr	r2, [pc, #316]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800950a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800950e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009510:	f7f9 fe90 	bl	8003234 <HAL_GetTick>
 8009514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009516:	e008      	b.n	800952a <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009518:	f7f9 fe8c 	bl	8003234 <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	2b02      	cmp	r3, #2
 8009524:	d901      	bls.n	800952a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e08a      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800952a:	4b47      	ldr	r3, [pc, #284]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0f0      	beq.n	8009518 <HAL_RCC_OscConfig+0x77c>
 8009536:	e082      	b.n	800963e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009538:	4b43      	ldr	r3, [pc, #268]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a42      	ldr	r2, [pc, #264]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800953e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009544:	f7f9 fe76 	bl	8003234 <HAL_GetTick>
 8009548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800954a:	e008      	b.n	800955e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800954c:	f7f9 fe72 	bl	8003234 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b02      	cmp	r3, #2
 8009558:	d901      	bls.n	800955e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e070      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800955e:	4b3a      	ldr	r3, [pc, #232]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f0      	bne.n	800954c <HAL_RCC_OscConfig+0x7b0>
 800956a:	e068      	b.n	800963e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800956c:	4b36      	ldr	r3, [pc, #216]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800956e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009570:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009572:	4b35      	ldr	r3, [pc, #212]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009576:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957c:	2b01      	cmp	r3, #1
 800957e:	d031      	beq.n	80095e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f003 0203 	and.w	r2, r3, #3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800958a:	429a      	cmp	r2, r3
 800958c:	d12a      	bne.n	80095e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	091b      	lsrs	r3, r3, #4
 8009592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800959a:	429a      	cmp	r2, r3
 800959c:	d122      	bne.n	80095e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d11a      	bne.n	80095e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	0a5b      	lsrs	r3, r3, #9
 80095b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095bc:	429a      	cmp	r2, r3
 80095be:	d111      	bne.n	80095e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	0c1b      	lsrs	r3, r3, #16
 80095c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d108      	bne.n	80095e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	0e1b      	lsrs	r3, r3, #24
 80095d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d001      	beq.n	80095e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e02b      	b.n	8009640 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80095e8:	4b17      	ldr	r3, [pc, #92]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 80095ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ec:	08db      	lsrs	r3, r3, #3
 80095ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d01f      	beq.n	800963e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80095fe:	4b12      	ldr	r3, [pc, #72]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009602:	4a11      	ldr	r2, [pc, #68]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009604:	f023 0301 	bic.w	r3, r3, #1
 8009608:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800960a:	f7f9 fe13 	bl	8003234 <HAL_GetTick>
 800960e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009610:	bf00      	nop
 8009612:	f7f9 fe0f 	bl	8003234 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	4293      	cmp	r3, r2
 800961c:	d0f9      	beq.n	8009612 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800961e:	4b0a      	ldr	r3, [pc, #40]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009622:	4b0b      	ldr	r3, [pc, #44]	@ (8009650 <HAL_RCC_OscConfig+0x8b4>)
 8009624:	4013      	ands	r3, r2
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800962a:	00d2      	lsls	r2, r2, #3
 800962c:	4906      	ldr	r1, [pc, #24]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 800962e:	4313      	orrs	r3, r2
 8009630:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009632:	4b05      	ldr	r3, [pc, #20]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009636:	4a04      	ldr	r2, [pc, #16]	@ (8009648 <HAL_RCC_OscConfig+0x8ac>)
 8009638:	f043 0301 	orr.w	r3, r3, #1
 800963c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3730      	adds	r7, #48	@ 0x30
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	58024400 	.word	0x58024400
 800964c:	fffffc0c 	.word	0xfffffc0c
 8009650:	ffff0007 	.word	0xffff0007

08009654 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e19c      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009668:	4b8a      	ldr	r3, [pc, #552]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d910      	bls.n	8009698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009676:	4b87      	ldr	r3, [pc, #540]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f023 020f 	bic.w	r2, r3, #15
 800967e:	4985      	ldr	r1, [pc, #532]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	4313      	orrs	r3, r2
 8009684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009686:	4b83      	ldr	r3, [pc, #524]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d001      	beq.n	8009698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e184      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d010      	beq.n	80096c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	4b7b      	ldr	r3, [pc, #492]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d908      	bls.n	80096c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096b4:	4b78      	ldr	r3, [pc, #480]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	4975      	ldr	r1, [pc, #468]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d010      	beq.n	80096f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695a      	ldr	r2, [r3, #20]
 80096d6:	4b70      	ldr	r3, [pc, #448]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096de:	429a      	cmp	r2, r3
 80096e0:	d908      	bls.n	80096f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096e2:	4b6d      	ldr	r3, [pc, #436]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	496a      	ldr	r1, [pc, #424]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0310 	and.w	r3, r3, #16
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d010      	beq.n	8009722 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	4b64      	ldr	r3, [pc, #400]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800970c:	429a      	cmp	r2, r3
 800970e:	d908      	bls.n	8009722 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009710:	4b61      	ldr	r3, [pc, #388]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	495e      	ldr	r1, [pc, #376]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800971e:	4313      	orrs	r3, r2
 8009720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d010      	beq.n	8009750 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69da      	ldr	r2, [r3, #28]
 8009732:	4b59      	ldr	r3, [pc, #356]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800973a:	429a      	cmp	r2, r3
 800973c:	d908      	bls.n	8009750 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800973e:	4b56      	ldr	r3, [pc, #344]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	4953      	ldr	r1, [pc, #332]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800974c:	4313      	orrs	r3, r2
 800974e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d010      	beq.n	800977e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	4b4d      	ldr	r3, [pc, #308]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	429a      	cmp	r2, r3
 800976a:	d908      	bls.n	800977e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800976c:	4b4a      	ldr	r3, [pc, #296]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	f023 020f 	bic.w	r2, r3, #15
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4947      	ldr	r1, [pc, #284]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800977a:	4313      	orrs	r3, r2
 800977c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d055      	beq.n	8009836 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800978a:	4b43      	ldr	r3, [pc, #268]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	4940      	ldr	r1, [pc, #256]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009798:	4313      	orrs	r3, r2
 800979a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d107      	bne.n	80097b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097a4:	4b3c      	ldr	r3, [pc, #240]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d121      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e0f6      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d107      	bne.n	80097cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097bc:	4b36      	ldr	r3, [pc, #216]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d115      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e0ea      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d107      	bne.n	80097e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097d4:	4b30      	ldr	r3, [pc, #192]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d109      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e0de      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e0d6      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097f4:	4b28      	ldr	r3, [pc, #160]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	f023 0207 	bic.w	r2, r3, #7
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4925      	ldr	r1, [pc, #148]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009802:	4313      	orrs	r3, r2
 8009804:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009806:	f7f9 fd15 	bl	8003234 <HAL_GetTick>
 800980a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800980c:	e00a      	b.n	8009824 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800980e:	f7f9 fd11 	bl	8003234 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800981c:	4293      	cmp	r3, r2
 800981e:	d901      	bls.n	8009824 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e0be      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009824:	4b1c      	ldr	r3, [pc, #112]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	429a      	cmp	r2, r3
 8009834:	d1eb      	bne.n	800980e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d010      	beq.n	8009864 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68da      	ldr	r2, [r3, #12]
 8009846:	4b14      	ldr	r3, [pc, #80]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	429a      	cmp	r2, r3
 8009850:	d208      	bcs.n	8009864 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009852:	4b11      	ldr	r3, [pc, #68]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	f023 020f 	bic.w	r2, r3, #15
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	490e      	ldr	r1, [pc, #56]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009860:	4313      	orrs	r3, r2
 8009862:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009864:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 030f 	and.w	r3, r3, #15
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d214      	bcs.n	800989c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009872:	4b08      	ldr	r3, [pc, #32]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f023 020f 	bic.w	r2, r3, #15
 800987a:	4906      	ldr	r1, [pc, #24]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	4313      	orrs	r3, r2
 8009880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009882:	4b04      	ldr	r3, [pc, #16]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d005      	beq.n	800989c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e086      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
 8009894:	52002000 	.word	0x52002000
 8009898:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0304 	and.w	r3, r3, #4
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d010      	beq.n	80098ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	4b3f      	ldr	r3, [pc, #252]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d208      	bcs.n	80098ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098b8:	4b3c      	ldr	r3, [pc, #240]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	4939      	ldr	r1, [pc, #228]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0308 	and.w	r3, r3, #8
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d010      	beq.n	80098f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	4b34      	ldr	r3, [pc, #208]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d208      	bcs.n	80098f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098e6:	4b31      	ldr	r3, [pc, #196]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	492e      	ldr	r1, [pc, #184]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b00      	cmp	r3, #0
 8009902:	d010      	beq.n	8009926 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699a      	ldr	r2, [r3, #24]
 8009908:	4b28      	ldr	r3, [pc, #160]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009910:	429a      	cmp	r2, r3
 8009912:	d208      	bcs.n	8009926 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009914:	4b25      	ldr	r3, [pc, #148]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	4922      	ldr	r1, [pc, #136]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009922:	4313      	orrs	r3, r2
 8009924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b00      	cmp	r3, #0
 8009930:	d010      	beq.n	8009954 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69da      	ldr	r2, [r3, #28]
 8009936:	4b1d      	ldr	r3, [pc, #116]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800993e:	429a      	cmp	r2, r3
 8009940:	d208      	bcs.n	8009954 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009942:	4b1a      	ldr	r3, [pc, #104]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	4917      	ldr	r1, [pc, #92]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009950:	4313      	orrs	r3, r2
 8009952:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009954:	f000 f834 	bl	80099c0 <HAL_RCC_GetSysClockFreq>
 8009958:	4602      	mov	r2, r0
 800995a:	4b14      	ldr	r3, [pc, #80]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	4912      	ldr	r1, [pc, #72]	@ (80099b0 <HAL_RCC_ClockConfig+0x35c>)
 8009966:	5ccb      	ldrb	r3, [r1, r3]
 8009968:	f003 031f 	and.w	r3, r3, #31
 800996c:	fa22 f303 	lsr.w	r3, r2, r3
 8009970:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009972:	4b0e      	ldr	r3, [pc, #56]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	f003 030f 	and.w	r3, r3, #15
 800997a:	4a0d      	ldr	r2, [pc, #52]	@ (80099b0 <HAL_RCC_ClockConfig+0x35c>)
 800997c:	5cd3      	ldrb	r3, [r2, r3]
 800997e:	f003 031f 	and.w	r3, r3, #31
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	fa22 f303 	lsr.w	r3, r2, r3
 8009988:	4a0a      	ldr	r2, [pc, #40]	@ (80099b4 <HAL_RCC_ClockConfig+0x360>)
 800998a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800998c:	4a0a      	ldr	r2, [pc, #40]	@ (80099b8 <HAL_RCC_ClockConfig+0x364>)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009992:	4b0a      	ldr	r3, [pc, #40]	@ (80099bc <HAL_RCC_ClockConfig+0x368>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4618      	mov	r0, r3
 8009998:	f7f9 fc02 	bl	80031a0 <HAL_InitTick>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	58024400 	.word	0x58024400
 80099b0:	08011f84 	.word	0x08011f84
 80099b4:	24000030 	.word	0x24000030
 80099b8:	2400002c 	.word	0x2400002c
 80099bc:	24000034 	.word	0x24000034

080099c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b089      	sub	sp, #36	@ 0x24
 80099c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099c6:	4bb3      	ldr	r3, [pc, #716]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099ce:	2b18      	cmp	r3, #24
 80099d0:	f200 8155 	bhi.w	8009c7e <HAL_RCC_GetSysClockFreq+0x2be>
 80099d4:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	08009a41 	.word	0x08009a41
 80099e0:	08009c7f 	.word	0x08009c7f
 80099e4:	08009c7f 	.word	0x08009c7f
 80099e8:	08009c7f 	.word	0x08009c7f
 80099ec:	08009c7f 	.word	0x08009c7f
 80099f0:	08009c7f 	.word	0x08009c7f
 80099f4:	08009c7f 	.word	0x08009c7f
 80099f8:	08009c7f 	.word	0x08009c7f
 80099fc:	08009a67 	.word	0x08009a67
 8009a00:	08009c7f 	.word	0x08009c7f
 8009a04:	08009c7f 	.word	0x08009c7f
 8009a08:	08009c7f 	.word	0x08009c7f
 8009a0c:	08009c7f 	.word	0x08009c7f
 8009a10:	08009c7f 	.word	0x08009c7f
 8009a14:	08009c7f 	.word	0x08009c7f
 8009a18:	08009c7f 	.word	0x08009c7f
 8009a1c:	08009a6d 	.word	0x08009a6d
 8009a20:	08009c7f 	.word	0x08009c7f
 8009a24:	08009c7f 	.word	0x08009c7f
 8009a28:	08009c7f 	.word	0x08009c7f
 8009a2c:	08009c7f 	.word	0x08009c7f
 8009a30:	08009c7f 	.word	0x08009c7f
 8009a34:	08009c7f 	.word	0x08009c7f
 8009a38:	08009c7f 	.word	0x08009c7f
 8009a3c:	08009a73 	.word	0x08009a73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a40:	4b94      	ldr	r3, [pc, #592]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d009      	beq.n	8009a60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a4c:	4b91      	ldr	r3, [pc, #580]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	4a90      	ldr	r2, [pc, #576]	@ (8009c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a5e:	e111      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a60:	4b8d      	ldr	r3, [pc, #564]	@ (8009c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a62:	61bb      	str	r3, [r7, #24]
      break;
 8009a64:	e10e      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a66:	4b8d      	ldr	r3, [pc, #564]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a68:	61bb      	str	r3, [r7, #24]
      break;
 8009a6a:	e10b      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a6e:	61bb      	str	r3, [r7, #24]
      break;
 8009a70:	e108      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a72:	4b88      	ldr	r3, [pc, #544]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a7c:	4b85      	ldr	r3, [pc, #532]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a80:	091b      	lsrs	r3, r3, #4
 8009a82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a88:	4b82      	ldr	r3, [pc, #520]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a92:	4b80      	ldr	r3, [pc, #512]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80e1 	beq.w	8009c78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	f000 8083 	beq.w	8009bc4 <HAL_RCC_GetSysClockFreq+0x204>
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	f200 80a1 	bhi.w	8009c08 <HAL_RCC_GetSysClockFreq+0x248>
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x114>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d056      	beq.n	8009b80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ad2:	e099      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d02d      	beq.n	8009b3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	08db      	lsrs	r3, r3, #3
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	4a6b      	ldr	r2, [pc, #428]	@ (8009c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
 8009af0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0a:	4b62      	ldr	r3, [pc, #392]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b3a:	e087      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4e:	4b51      	ldr	r3, [pc, #324]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b7e:	e065      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b92:	4b40      	ldr	r3, [pc, #256]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ba6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bc2:	e043      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c06:	e021      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c4c:	4b11      	ldr	r3, [pc, #68]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c50:	0a5b      	lsrs	r3, r3, #9
 8009c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c56:	3301      	adds	r3, #1
 8009c58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c70:	ee17 3a90 	vmov	r3, s15
 8009c74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c76:	e005      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61bb      	str	r3, [r7, #24]
      break;
 8009c7c:	e002      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c7e:	4b07      	ldr	r3, [pc, #28]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c80:	61bb      	str	r3, [r7, #24]
      break;
 8009c82:	bf00      	nop
  }

  return sysclockfreq;
 8009c84:	69bb      	ldr	r3, [r7, #24]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3724      	adds	r7, #36	@ 0x24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	58024400 	.word	0x58024400
 8009c98:	03d09000 	.word	0x03d09000
 8009c9c:	003d0900 	.word	0x003d0900
 8009ca0:	017d7840 	.word	0x017d7840
 8009ca4:	46000000 	.word	0x46000000
 8009ca8:	4c742400 	.word	0x4c742400
 8009cac:	4a742400 	.word	0x4a742400
 8009cb0:	4bbebc20 	.word	0x4bbebc20

08009cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cba:	f7ff fe81 	bl	80099c0 <HAL_RCC_GetSysClockFreq>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	0a1b      	lsrs	r3, r3, #8
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	490f      	ldr	r1, [pc, #60]	@ (8009d08 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ccc:	5ccb      	ldrb	r3, [r1, r3]
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009d04 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	4a09      	ldr	r2, [pc, #36]	@ (8009d08 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ce2:	5cd3      	ldrb	r3, [r2, r3]
 8009ce4:	f003 031f 	and.w	r3, r3, #31
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	fa22 f303 	lsr.w	r3, r2, r3
 8009cee:	4a07      	ldr	r2, [pc, #28]	@ (8009d0c <HAL_RCC_GetHCLKFreq+0x58>)
 8009cf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cf2:	4a07      	ldr	r2, [pc, #28]	@ (8009d10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cf8:	4b04      	ldr	r3, [pc, #16]	@ (8009d0c <HAL_RCC_GetHCLKFreq+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	58024400 	.word	0x58024400
 8009d08:	08011f84 	.word	0x08011f84
 8009d0c:	24000030 	.word	0x24000030
 8009d10:	2400002c 	.word	0x2400002c

08009d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d18:	f7ff ffcc 	bl	8009cb4 <HAL_RCC_GetHCLKFreq>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	091b      	lsrs	r3, r3, #4
 8009d24:	f003 0307 	and.w	r3, r3, #7
 8009d28:	4904      	ldr	r1, [pc, #16]	@ (8009d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d2a:	5ccb      	ldrb	r3, [r1, r3]
 8009d2c:	f003 031f 	and.w	r3, r3, #31
 8009d30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	08011f84 	.word	0x08011f84

08009d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d44:	f7ff ffb6 	bl	8009cb4 <HAL_RCC_GetHCLKFreq>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	4b06      	ldr	r3, [pc, #24]	@ (8009d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	0a1b      	lsrs	r3, r3, #8
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	4904      	ldr	r1, [pc, #16]	@ (8009d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d56:	5ccb      	ldrb	r3, [r1, r3]
 8009d58:	f003 031f 	and.w	r3, r3, #31
 8009d5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	58024400 	.word	0x58024400
 8009d68:	08011f84 	.word	0x08011f84

08009d6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d70:	b0ca      	sub	sp, #296	@ 0x128
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d90:	2500      	movs	r5, #0
 8009d92:	ea54 0305 	orrs.w	r3, r4, r5
 8009d96:	d049      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009da2:	d02f      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009da4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009da8:	d828      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dae:	d01a      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009db0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009db4:	d822      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dbe:	d007      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dc0:	e01c      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc2:	4bb8      	ldr	r3, [pc, #736]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc6:	4ab7      	ldr	r2, [pc, #732]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dce:	e01a      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f002 fb61 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009de4:	e00f      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dea:	3328      	adds	r3, #40	@ 0x28
 8009dec:	2102      	movs	r1, #2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f002 fc08 	bl	800c604 <RCCEx_PLL3_Config>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dfa:	e004      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e02:	e000      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e0e:	4ba5      	ldr	r3, [pc, #660]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e1c:	4aa1      	ldr	r2, [pc, #644]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e22:	e003      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009e38:	f04f 0900 	mov.w	r9, #0
 8009e3c:	ea58 0309 	orrs.w	r3, r8, r9
 8009e40:	d047      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d82a      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009e69 	.word	0x08009e69
 8009e58:	08009e77 	.word	0x08009e77
 8009e5c:	08009e8d 	.word	0x08009e8d
 8009e60:	08009eab 	.word	0x08009eab
 8009e64:	08009eab 	.word	0x08009eab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e68:	4b8e      	ldr	r3, [pc, #568]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6c:	4a8d      	ldr	r2, [pc, #564]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e74:	e01a      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f002 fb0e 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e8a:	e00f      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e90:	3328      	adds	r3, #40	@ 0x28
 8009e92:	2100      	movs	r1, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 fbb5 	bl	800c604 <RCCEx_PLL3_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ea0:	e004      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ea8:	e000      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009eb4:	4b7b      	ldr	r3, [pc, #492]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb8:	f023 0107 	bic.w	r1, r3, #7
 8009ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ec2:	4a78      	ldr	r2, [pc, #480]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ec8:	e003      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009ede:	f04f 0b00 	mov.w	fp, #0
 8009ee2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ee6:	d04c      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef2:	d030      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef8:	d829      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8009efc:	d02d      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f00:	d825      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f02:	2b80      	cmp	r3, #128	@ 0x80
 8009f04:	d018      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009f06:	2b80      	cmp	r3, #128	@ 0x80
 8009f08:	d821      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009f0e:	2b40      	cmp	r3, #64	@ 0x40
 8009f10:	d007      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009f12:	e01c      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f14:	4b63      	ldr	r3, [pc, #396]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	4a62      	ldr	r2, [pc, #392]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f20:	e01c      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f26:	3308      	adds	r3, #8
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f002 fab8 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f36:	e011      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3c:	3328      	adds	r3, #40	@ 0x28
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f002 fb5f 	bl	800c604 <RCCEx_PLL3_Config>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f4c:	e006      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f54:	e002      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f56:	bf00      	nop
 8009f58:	e000      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10a      	bne.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f64:	4b4f      	ldr	r3, [pc, #316]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f72:	4a4c      	ldr	r2, [pc, #304]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f74:	430b      	orrs	r3, r1
 8009f76:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f78:	e003      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009f8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009f92:	2300      	movs	r3, #0
 8009f94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009f98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	d053      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009faa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fae:	d035      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009fb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fb4:	d82e      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fba:	d031      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009fbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fc0:	d828      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fc6:	d01a      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fcc:	d822      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fd6:	d007      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009fd8:	e01c      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fda:	4b32      	ldr	r3, [pc, #200]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fde:	4a31      	ldr	r2, [pc, #196]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fe6:	e01c      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fec:	3308      	adds	r3, #8
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f002 fa55 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ffc:	e011      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a002:	3328      	adds	r3, #40	@ 0x28
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f002 fafc 	bl	800c604 <RCCEx_PLL3_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a012:	e006      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a01a:	e002      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10b      	bne.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a02a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a02e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a036:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a03a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a040:	e003      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a056:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a05a:	2300      	movs	r3, #0
 800a05c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a060:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a064:	460b      	mov	r3, r1
 800a066:	4313      	orrs	r3, r2
 800a068:	d056      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a076:	d038      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a07c:	d831      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a07e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a082:	d034      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a084:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a088:	d82b      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a08a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a08e:	d01d      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a094:	d825      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a096:	2b00      	cmp	r3, #0
 800a098:	d006      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a09a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a09e:	d00a      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a0a0:	e01f      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0a2:	bf00      	nop
 800a0a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a8:	4ba2      	ldr	r3, [pc, #648]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	4aa1      	ldr	r2, [pc, #644]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0b4:	e01c      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f002 f9ee 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0ca:	e011      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d0:	3328      	adds	r3, #40	@ 0x28
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f002 fa95 	bl	800c604 <RCCEx_PLL3_Config>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0e0:	e006      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0e8:	e002      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a0ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10b      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0f8:	4b8e      	ldr	r3, [pc, #568]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a104:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a108:	4a8a      	ldr	r2, [pc, #552]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a10a:	430b      	orrs	r3, r1
 800a10c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a10e:	e003      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a128:	2300      	movs	r3, #0
 800a12a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a12e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a132:	460b      	mov	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	d03a      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a13e:	2b30      	cmp	r3, #48	@ 0x30
 800a140:	d01f      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a142:	2b30      	cmp	r3, #48	@ 0x30
 800a144:	d819      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a146:	2b20      	cmp	r3, #32
 800a148:	d00c      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a14a:	2b20      	cmp	r3, #32
 800a14c:	d815      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d019      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a152:	2b10      	cmp	r3, #16
 800a154:	d111      	bne.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a156:	4b77      	ldr	r3, [pc, #476]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15a:	4a76      	ldr	r2, [pc, #472]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a15c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a162:	e011      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a168:	3308      	adds	r3, #8
 800a16a:	2102      	movs	r1, #2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 f997 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a178:	e006      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a180:	e002      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a182:	bf00      	nop
 800a184:	e000      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a186:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a190:	4b68      	ldr	r3, [pc, #416]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a194:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a19e:	4a65      	ldr	r2, [pc, #404]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1a4:	e003      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a1ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a1c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	d051      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1d8:	d035      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a1da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1de:	d82e      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1e4:	d031      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a1e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1ea:	d828      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f0:	d01a      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a1f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f6:	d822      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a200:	d007      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a202:	e01c      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a204:	4b4b      	ldr	r3, [pc, #300]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a208:	4a4a      	ldr	r2, [pc, #296]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a20a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a20e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a210:	e01c      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	3308      	adds	r3, #8
 800a218:	2100      	movs	r1, #0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f002 f940 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a226:	e011      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22c:	3328      	adds	r3, #40	@ 0x28
 800a22e:	2100      	movs	r1, #0
 800a230:	4618      	mov	r0, r3
 800a232:	f002 f9e7 	bl	800c604 <RCCEx_PLL3_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a23c:	e006      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a244:	e002      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a246:	bf00      	nop
 800a248:	e000      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a254:	4b37      	ldr	r3, [pc, #220]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a258:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a262:	4a34      	ldr	r2, [pc, #208]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a264:	430b      	orrs	r3, r1
 800a266:	6513      	str	r3, [r2, #80]	@ 0x50
 800a268:	e003      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a27e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a282:	2300      	movs	r3, #0
 800a284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a288:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a28c:	460b      	mov	r3, r1
 800a28e:	4313      	orrs	r3, r2
 800a290:	d056      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a29c:	d033      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a29e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2a2:	d82c      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2a8:	d02f      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a2aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2ae:	d826      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2b4:	d02b      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a2b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2ba:	d820      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c0:	d012      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a2c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c6:	d81a      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d022      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2d0:	d115      	bne.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	2101      	movs	r1, #1
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f002 f8e0 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2e6:	e015      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ec:	3328      	adds	r3, #40	@ 0x28
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f002 f987 	bl	800c604 <RCCEx_PLL3_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2fc:	e00a      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a304:	e006      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a306:	bf00      	nop
 800a308:	e004      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a30a:	bf00      	nop
 800a30c:	e002      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a30e:	bf00      	nop
 800a310:	e000      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a312:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10d      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a31c:	4b05      	ldr	r3, [pc, #20]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a31e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a320:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a32a:	4a02      	ldr	r2, [pc, #8]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a32c:	430b      	orrs	r3, r1
 800a32e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a330:	e006      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a332:	bf00      	nop
 800a334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a33c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a34c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a350:	2300      	movs	r3, #0
 800a352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a356:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4313      	orrs	r3, r2
 800a35e:	d055      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a36c:	d033      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a36e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a372:	d82c      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a378:	d02f      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37e:	d826      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a380:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a384:	d02b      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a38a:	d820      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a38c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a390:	d012      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a396:	d81a      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d022      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a39c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a0:	d115      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f002 f878 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a3b6:	e015      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3bc:	3328      	adds	r3, #40	@ 0x28
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f002 f91f 	bl	800c604 <RCCEx_PLL3_Config>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a3cc:	e00a      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3d4:	e006      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3d6:	bf00      	nop
 800a3d8:	e004      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3da:	bf00      	nop
 800a3dc:	e002      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3de:	bf00      	nop
 800a3e0:	e000      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a3ec:	4ba3      	ldr	r3, [pc, #652]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3fc:	4a9f      	ldr	r2, [pc, #636]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6593      	str	r3, [r2, #88]	@ 0x58
 800a402:	e003      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a41c:	2300      	movs	r3, #0
 800a41e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a426:	460b      	mov	r3, r1
 800a428:	4313      	orrs	r3, r2
 800a42a:	d037      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a436:	d00e      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a43c:	d816      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d018      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a446:	d111      	bne.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a448:	4b8c      	ldr	r3, [pc, #560]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	4a8b      	ldr	r2, [pc, #556]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a454:	e00f      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45a:	3308      	adds	r3, #8
 800a45c:	2101      	movs	r1, #1
 800a45e:	4618      	mov	r0, r3
 800a460:	f002 f81e 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a46a:	e004      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a472:	e000      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10a      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a47e:	4b7f      	ldr	r3, [pc, #508]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a482:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a48a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a48c:	4a7b      	ldr	r2, [pc, #492]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a48e:	430b      	orrs	r3, r1
 800a490:	6513      	str	r3, [r2, #80]	@ 0x50
 800a492:	e003      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a4a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a4b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	d039      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d81c      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a509 	.word	0x0800a509
 800a4d0:	0800a4dd 	.word	0x0800a4dd
 800a4d4:	0800a4eb 	.word	0x0800a4eb
 800a4d8:	0800a509 	.word	0x0800a509
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4dc:	4b67      	ldr	r3, [pc, #412]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e0:	4a66      	ldr	r2, [pc, #408]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4e8:	e00f      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 ffd4 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4fe:	e004      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a506:	e000      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a50a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a512:	4b5a      	ldr	r3, [pc, #360]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a516:	f023 0103 	bic.w	r1, r3, #3
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a520:	4a56      	ldr	r2, [pc, #344]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a522:	430b      	orrs	r3, r1
 800a524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a526:	e003      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a52c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a538:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a53c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a540:	2300      	movs	r3, #0
 800a542:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a546:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a54a:	460b      	mov	r3, r1
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f000 809f 	beq.w	800a690 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a552:	4b4b      	ldr	r3, [pc, #300]	@ (800a680 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a4a      	ldr	r2, [pc, #296]	@ (800a680 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a55c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a55e:	f7f8 fe69 	bl	8003234 <HAL_GetTick>
 800a562:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a566:	e00b      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a568:	f7f8 fe64 	bl	8003234 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	2b64      	cmp	r3, #100	@ 0x64
 800a576:	d903      	bls.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a57e:	e005      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a580:	4b3f      	ldr	r3, [pc, #252]	@ (800a680 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0ed      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a58c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a590:	2b00      	cmp	r3, #0
 800a592:	d179      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a594:	4b39      	ldr	r3, [pc, #228]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a596:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5a0:	4053      	eors	r3, r2
 800a5a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d015      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5aa:	4b34      	ldr	r3, [pc, #208]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5b6:	4b31      	ldr	r3, [pc, #196]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ba:	4a30      	ldr	r2, [pc, #192]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5c2:	4b2e      	ldr	r3, [pc, #184]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5c6:	4a2d      	ldr	r2, [pc, #180]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a5ce:	4a2b      	ldr	r2, [pc, #172]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a5d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e2:	d118      	bne.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e4:	f7f8 fe26 	bl	8003234 <HAL_GetTick>
 800a5e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5ec:	e00d      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ee:	f7f8 fe21 	bl	8003234 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a5f8:	1ad2      	subs	r2, r2, r3
 800a5fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d903      	bls.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a608:	e005      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a60a:	4b1c      	ldr	r3, [pc, #112]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0eb      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d129      	bne.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a62a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a62e:	d10e      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a630:	4b12      	ldr	r3, [pc, #72]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a63c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a640:	091a      	lsrs	r2, r3, #4
 800a642:	4b10      	ldr	r3, [pc, #64]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a644:	4013      	ands	r3, r2
 800a646:	4a0d      	ldr	r2, [pc, #52]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a648:	430b      	orrs	r3, r1
 800a64a:	6113      	str	r3, [r2, #16]
 800a64c:	e005      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a64e:	4b0b      	ldr	r3, [pc, #44]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	4a0a      	ldr	r2, [pc, #40]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a654:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a658:	6113      	str	r3, [r2, #16]
 800a65a:	4b08      	ldr	r3, [pc, #32]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a65c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a66a:	4a04      	ldr	r2, [pc, #16]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a670:	e00e      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a67a:	e009      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a67c:	58024400 	.word	0x58024400
 800a680:	58024800 	.word	0x58024800
 800a684:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a68c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f002 0301 	and.w	r3, r2, #1
 800a69c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	f000 8089 	beq.w	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6b8:	2b28      	cmp	r3, #40	@ 0x28
 800a6ba:	d86b      	bhi.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a79d 	.word	0x0800a79d
 800a6c8:	0800a795 	.word	0x0800a795
 800a6cc:	0800a795 	.word	0x0800a795
 800a6d0:	0800a795 	.word	0x0800a795
 800a6d4:	0800a795 	.word	0x0800a795
 800a6d8:	0800a795 	.word	0x0800a795
 800a6dc:	0800a795 	.word	0x0800a795
 800a6e0:	0800a795 	.word	0x0800a795
 800a6e4:	0800a769 	.word	0x0800a769
 800a6e8:	0800a795 	.word	0x0800a795
 800a6ec:	0800a795 	.word	0x0800a795
 800a6f0:	0800a795 	.word	0x0800a795
 800a6f4:	0800a795 	.word	0x0800a795
 800a6f8:	0800a795 	.word	0x0800a795
 800a6fc:	0800a795 	.word	0x0800a795
 800a700:	0800a795 	.word	0x0800a795
 800a704:	0800a77f 	.word	0x0800a77f
 800a708:	0800a795 	.word	0x0800a795
 800a70c:	0800a795 	.word	0x0800a795
 800a710:	0800a795 	.word	0x0800a795
 800a714:	0800a795 	.word	0x0800a795
 800a718:	0800a795 	.word	0x0800a795
 800a71c:	0800a795 	.word	0x0800a795
 800a720:	0800a795 	.word	0x0800a795
 800a724:	0800a79d 	.word	0x0800a79d
 800a728:	0800a795 	.word	0x0800a795
 800a72c:	0800a795 	.word	0x0800a795
 800a730:	0800a795 	.word	0x0800a795
 800a734:	0800a795 	.word	0x0800a795
 800a738:	0800a795 	.word	0x0800a795
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a795 	.word	0x0800a795
 800a744:	0800a79d 	.word	0x0800a79d
 800a748:	0800a795 	.word	0x0800a795
 800a74c:	0800a795 	.word	0x0800a795
 800a750:	0800a795 	.word	0x0800a795
 800a754:	0800a795 	.word	0x0800a795
 800a758:	0800a795 	.word	0x0800a795
 800a75c:	0800a795 	.word	0x0800a795
 800a760:	0800a795 	.word	0x0800a795
 800a764:	0800a79d 	.word	0x0800a79d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a76c:	3308      	adds	r3, #8
 800a76e:	2101      	movs	r1, #1
 800a770:	4618      	mov	r0, r3
 800a772:	f001 fe95 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a776:	4603      	mov	r3, r0
 800a778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a77c:	e00f      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a782:	3328      	adds	r3, #40	@ 0x28
 800a784:	2101      	movs	r1, #1
 800a786:	4618      	mov	r0, r3
 800a788:	f001 ff3c 	bl	800c604 <RCCEx_PLL3_Config>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a792:	e004      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a79a:	e000      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a79c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a79e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10a      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a7a6:	4bbf      	ldr	r3, [pc, #764]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7b4:	4abb      	ldr	r2, [pc, #748]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7b6:	430b      	orrs	r3, r1
 800a7b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7ba:	e003      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	f002 0302 	and.w	r3, r2, #2
 800a7d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a7da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	d041      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	d824      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a841 	.word	0x0800a841
 800a7f8:	0800a80d 	.word	0x0800a80d
 800a7fc:	0800a823 	.word	0x0800a823
 800a800:	0800a841 	.word	0x0800a841
 800a804:	0800a841 	.word	0x0800a841
 800a808:	0800a841 	.word	0x0800a841
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a810:	3308      	adds	r3, #8
 800a812:	2101      	movs	r1, #1
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fe43 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a820:	e00f      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a826:	3328      	adds	r3, #40	@ 0x28
 800a828:	2101      	movs	r1, #1
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 feea 	bl	800c604 <RCCEx_PLL3_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a83e:	e000      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a84a:	4b96      	ldr	r3, [pc, #600]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84e:	f023 0107 	bic.w	r1, r3, #7
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a858:	4a92      	ldr	r2, [pc, #584]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a85a:	430b      	orrs	r3, r1
 800a85c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a85e:	e003      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 0304 	and.w	r3, r2, #4
 800a874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a87e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d044      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a88c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a890:	2b05      	cmp	r3, #5
 800a892:	d825      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a894:	a201      	add	r2, pc, #4	@ (adr r2, 800a89c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89a:	bf00      	nop
 800a89c:	0800a8e9 	.word	0x0800a8e9
 800a8a0:	0800a8b5 	.word	0x0800a8b5
 800a8a4:	0800a8cb 	.word	0x0800a8cb
 800a8a8:	0800a8e9 	.word	0x0800a8e9
 800a8ac:	0800a8e9 	.word	0x0800a8e9
 800a8b0:	0800a8e9 	.word	0x0800a8e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f001 fdef 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8c8:	e00f      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ce:	3328      	adds	r3, #40	@ 0x28
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 fe96 	bl	800c604 <RCCEx_PLL3_Config>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8de:	e004      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8e6:	e000      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10b      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8f2:	4b6c      	ldr	r3, [pc, #432]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f6:	f023 0107 	bic.w	r1, r3, #7
 800a8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a902:	4a68      	ldr	r2, [pc, #416]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a904:	430b      	orrs	r3, r1
 800a906:	6593      	str	r3, [r2, #88]	@ 0x58
 800a908:	e003      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a90e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f002 0320 	and.w	r3, r2, #32
 800a91e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a922:	2300      	movs	r3, #0
 800a924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a92c:	460b      	mov	r3, r1
 800a92e:	4313      	orrs	r3, r2
 800a930:	d055      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a93a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a93e:	d033      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a944:	d82c      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a94a:	d02f      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a94c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a950:	d826      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a952:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a956:	d02b      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a95c:	d820      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a962:	d012      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a968:	d81a      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d022      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a96e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a972:	d115      	bne.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a978:	3308      	adds	r3, #8
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 fd8f 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a982:	4603      	mov	r3, r0
 800a984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a988:	e015      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a98e:	3328      	adds	r3, #40	@ 0x28
 800a990:	2102      	movs	r1, #2
 800a992:	4618      	mov	r0, r3
 800a994:	f001 fe36 	bl	800c604 <RCCEx_PLL3_Config>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a99e:	e00a      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9a6:	e006      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9a8:	bf00      	nop
 800a9aa:	e004      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9ac:	bf00      	nop
 800a9ae:	e002      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9b0:	bf00      	nop
 800a9b2:	e000      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10b      	bne.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9be:	4b39      	ldr	r3, [pc, #228]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ce:	4a35      	ldr	r2, [pc, #212]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9d4:	e003      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a9ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a9f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	d058      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa0a:	d033      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aa0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa10:	d82c      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa16:	d02f      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aa18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa1c:	d826      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa22:	d02b      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aa24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa28:	d820      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aa30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa34:	d81a      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d022      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800aa3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa3e:	d115      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa44:	3308      	adds	r3, #8
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 fd29 	bl	800c4a0 <RCCEx_PLL2_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa54:	e015      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa5a:	3328      	adds	r3, #40	@ 0x28
 800aa5c:	2102      	movs	r1, #2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 fdd0 	bl	800c604 <RCCEx_PLL3_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa6a:	e00a      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa72:	e006      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa74:	bf00      	nop
 800aa76:	e004      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa78:	bf00      	nop
 800aa7a:	e002      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa7c:	bf00      	nop
 800aa7e:	e000      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10e      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa8a:	4b06      	ldr	r3, [pc, #24]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aa92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa9a:	4a02      	ldr	r2, [pc, #8]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaa0:	e006      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800aaa2:	bf00      	nop
 800aaa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aabc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aac0:	2300      	movs	r3, #0
 800aac2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aac6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aaca:	460b      	mov	r3, r1
 800aacc:	4313      	orrs	r3, r2
 800aace:	d055      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aad8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aadc:	d033      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aade:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aae2:	d82c      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aae8:	d02f      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800aaea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaee:	d826      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aaf0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aaf4:	d02b      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800aaf6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aafa:	d820      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aafc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab00:	d012      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ab02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab06:	d81a      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d022      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ab0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab10:	d115      	bne.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab16:	3308      	adds	r3, #8
 800ab18:	2100      	movs	r1, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f001 fcc0 	bl	800c4a0 <RCCEx_PLL2_Config>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab26:	e015      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2c:	3328      	adds	r3, #40	@ 0x28
 800ab2e:	2102      	movs	r1, #2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 fd67 	bl	800c604 <RCCEx_PLL3_Config>
 800ab36:	4603      	mov	r3, r0
 800ab38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab3c:	e00a      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab44:	e006      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab46:	bf00      	nop
 800ab48:	e004      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab4a:	bf00      	nop
 800ab4c:	e002      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab4e:	bf00      	nop
 800ab50:	e000      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10b      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab5c:	4ba1      	ldr	r3, [pc, #644]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab60:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ab64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab6c:	4a9d      	ldr	r2, [pc, #628]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab72:	e003      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ab7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f002 0308 	and.w	r3, r2, #8
 800ab88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ab96:	460b      	mov	r3, r1
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	d01e      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ab9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aba8:	d10c      	bne.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abae:	3328      	adds	r3, #40	@ 0x28
 800abb0:	2102      	movs	r1, #2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f001 fd26 	bl	800c604 <RCCEx_PLL3_Config>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800abc4:	4b87      	ldr	r3, [pc, #540]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abc8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abd4:	4a83      	ldr	r2, [pc, #524]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abd6:	430b      	orrs	r3, r1
 800abd8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f002 0310 	and.w	r3, r2, #16
 800abe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abea:	2300      	movs	r3, #0
 800abec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800abf0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800abf4:	460b      	mov	r3, r1
 800abf6:	4313      	orrs	r3, r2
 800abf8:	d01e      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac06:	d10c      	bne.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac0c:	3328      	adds	r3, #40	@ 0x28
 800ac0e:	2102      	movs	r1, #2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 fcf7 	bl	800c604 <RCCEx_PLL3_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac22:	4b70      	ldr	r3, [pc, #448]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac32:	4a6c      	ldr	r2, [pc, #432]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac34:	430b      	orrs	r3, r1
 800ac36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ac44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ac52:	460b      	mov	r3, r1
 800ac54:	4313      	orrs	r3, r2
 800ac56:	d03e      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ac58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac64:	d022      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ac66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac6a:	d81b      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac74:	d00b      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ac76:	e015      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	2100      	movs	r1, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f001 fc0d 	bl	800c4a0 <RCCEx_PLL2_Config>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac8c:	e00f      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac92:	3328      	adds	r3, #40	@ 0x28
 800ac94:	2102      	movs	r1, #2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 fcb4 	bl	800c604 <RCCEx_PLL3_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aca2:	e004      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acaa:	e000      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800acac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800acb6:	4b4b      	ldr	r3, [pc, #300]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800acbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acc6:	4a47      	ldr	r2, [pc, #284]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acc8:	430b      	orrs	r3, r1
 800acca:	6593      	str	r3, [r2, #88]	@ 0x58
 800accc:	e003      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800acd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ace2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ace4:	2300      	movs	r3, #0
 800ace6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ace8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800acec:	460b      	mov	r3, r1
 800acee:	4313      	orrs	r3, r2
 800acf0:	d03b      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acfe:	d01f      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ad00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad04:	d818      	bhi.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ad06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad0a:	d003      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ad0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad10:	d007      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ad12:	e011      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad14:	4b33      	ldr	r3, [pc, #204]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	4a32      	ldr	r2, [pc, #200]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad20:	e00f      	b.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad26:	3328      	adds	r3, #40	@ 0x28
 800ad28:	2101      	movs	r1, #1
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f001 fc6a 	bl	800c604 <RCCEx_PLL3_Config>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad36:	e004      	b.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad3e:	e000      	b.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ad40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10b      	bne.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad4a:	4b26      	ldr	r3, [pc, #152]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ad52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad5a:	4a22      	ldr	r2, [pc, #136]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad60:	e003      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ad76:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad78:	2300      	movs	r3, #0
 800ad7a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ad80:	460b      	mov	r3, r1
 800ad82:	4313      	orrs	r3, r2
 800ad84:	d034      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ad86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ad90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad94:	d007      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ad96:	e011      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad98:	4b12      	ldr	r3, [pc, #72]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9c:	4a11      	ldr	r2, [pc, #68]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ada2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ada4:	e00e      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ada6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adaa:	3308      	adds	r3, #8
 800adac:	2102      	movs	r1, #2
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 fb76 	bl	800c4a0 <RCCEx_PLL2_Config>
 800adb4:	4603      	mov	r3, r0
 800adb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800adba:	e003      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10d      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800adcc:	4b05      	ldr	r3, [pc, #20]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800add4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adda:	4a02      	ldr	r2, [pc, #8]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800addc:	430b      	orrs	r3, r1
 800adde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ade0:	e006      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ade2:	bf00      	nop
 800ade4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800adf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800adfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adfe:	2300      	movs	r3, #0
 800ae00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ae06:	460b      	mov	r3, r1
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	d00c      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae10:	3328      	adds	r3, #40	@ 0x28
 800ae12:	2102      	movs	r1, #2
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 fbf5 	bl	800c604 <RCCEx_PLL3_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ae32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae34:	2300      	movs	r3, #0
 800ae36:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	d038      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ae42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae4e:	d018      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ae50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae54:	d811      	bhi.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae5a:	d014      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ae5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae60:	d80b      	bhi.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d011      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ae66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae6a:	d106      	bne.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae6c:	4bc3      	ldr	r3, [pc, #780]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae70:	4ac2      	ldr	r2, [pc, #776]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ae78:	e008      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae80:	e004      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae82:	bf00      	nop
 800ae84:	e002      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae86:	bf00      	nop
 800ae88:	e000      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10b      	bne.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae94:	4bb9      	ldr	r3, [pc, #740]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea4:	4ab5      	ldr	r2, [pc, #724]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aea6:	430b      	orrs	r3, r1
 800aea8:	6553      	str	r3, [r2, #84]	@ 0x54
 800aeaa:	e003      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aec2:	2300      	movs	r3, #0
 800aec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aec6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	d009      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aed0:	4baa      	ldr	r3, [pc, #680]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aed4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aede:	4aa7      	ldr	r2, [pc, #668]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee0:	430b      	orrs	r3, r1
 800aee2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800aef0:	653b      	str	r3, [r7, #80]	@ 0x50
 800aef2:	2300      	movs	r3, #0
 800aef4:	657b      	str	r3, [r7, #84]	@ 0x54
 800aef6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800aefa:	460b      	mov	r3, r1
 800aefc:	4313      	orrs	r3, r2
 800aefe:	d00a      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800af00:	4b9e      	ldr	r3, [pc, #632]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800af08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800af10:	4a9a      	ldr	r2, [pc, #616]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af12:	430b      	orrs	r3, r1
 800af14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800af22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af24:	2300      	movs	r3, #0
 800af26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800af2c:	460b      	mov	r3, r1
 800af2e:	4313      	orrs	r3, r2
 800af30:	d009      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af32:	4b92      	ldr	r3, [pc, #584]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800af3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af40:	4a8e      	ldr	r2, [pc, #568]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af42:	430b      	orrs	r3, r1
 800af44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800af52:	643b      	str	r3, [r7, #64]	@ 0x40
 800af54:	2300      	movs	r3, #0
 800af56:	647b      	str	r3, [r7, #68]	@ 0x44
 800af58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800af5c:	460b      	mov	r3, r1
 800af5e:	4313      	orrs	r3, r2
 800af60:	d00e      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af62:	4b86      	ldr	r3, [pc, #536]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	4a85      	ldr	r2, [pc, #532]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af6c:	6113      	str	r3, [r2, #16]
 800af6e:	4b83      	ldr	r3, [pc, #524]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af70:	6919      	ldr	r1, [r3, #16]
 800af72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800af7a:	4a80      	ldr	r2, [pc, #512]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af7c:	430b      	orrs	r3, r1
 800af7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800af8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af8e:	2300      	movs	r3, #0
 800af90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800af96:	460b      	mov	r3, r1
 800af98:	4313      	orrs	r3, r2
 800af9a:	d009      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af9c:	4b77      	ldr	r3, [pc, #476]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afa0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800afa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afaa:	4a74      	ldr	r2, [pc, #464]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afac:	430b      	orrs	r3, r1
 800afae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800afbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800afbe:	2300      	movs	r3, #0
 800afc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d00a      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800afcc:	4b6b      	ldr	r3, [pc, #428]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800afd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afdc:	4a67      	ldr	r2, [pc, #412]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afde:	430b      	orrs	r3, r1
 800afe0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800afe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	2100      	movs	r1, #0
 800afec:	62b9      	str	r1, [r7, #40]	@ 0x28
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aff4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aff8:	460b      	mov	r3, r1
 800affa:	4313      	orrs	r3, r2
 800affc:	d011      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800affe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b002:	3308      	adds	r3, #8
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f001 fa4a 	bl	800c4a0 <RCCEx_PLL2_Config>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b01e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02a:	2100      	movs	r1, #0
 800b02c:	6239      	str	r1, [r7, #32]
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	627b      	str	r3, [r7, #36]	@ 0x24
 800b034:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b038:	460b      	mov	r3, r1
 800b03a:	4313      	orrs	r3, r2
 800b03c:	d011      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b042:	3308      	adds	r3, #8
 800b044:	2101      	movs	r1, #1
 800b046:	4618      	mov	r0, r3
 800b048:	f001 fa2a 	bl	800c4a0 <RCCEx_PLL2_Config>
 800b04c:	4603      	mov	r3, r0
 800b04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b05e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	2100      	movs	r1, #0
 800b06c:	61b9      	str	r1, [r7, #24]
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	61fb      	str	r3, [r7, #28]
 800b074:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b078:	460b      	mov	r3, r1
 800b07a:	4313      	orrs	r3, r2
 800b07c:	d011      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b082:	3308      	adds	r3, #8
 800b084:	2102      	movs	r1, #2
 800b086:	4618      	mov	r0, r3
 800b088:	f001 fa0a 	bl	800c4a0 <RCCEx_PLL2_Config>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b09e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	6139      	str	r1, [r7, #16]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	d011      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c2:	3328      	adds	r3, #40	@ 0x28
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 fa9c 	bl	800c604 <RCCEx_PLL3_Config>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	f003 0310 	and.w	r3, r3, #16
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	d011      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b102:	3328      	adds	r3, #40	@ 0x28
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f001 fa7c 	bl	800c604 <RCCEx_PLL3_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b11e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	2100      	movs	r1, #0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	607b      	str	r3, [r7, #4]
 800b134:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b138:	460b      	mov	r3, r1
 800b13a:	4313      	orrs	r3, r2
 800b13c:	d011      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b142:	3328      	adds	r3, #40	@ 0x28
 800b144:	2102      	movs	r1, #2
 800b146:	4618      	mov	r0, r3
 800b148:	f001 fa5c 	bl	800c604 <RCCEx_PLL3_Config>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b15e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b162:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	e000      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
}
 800b170:	4618      	mov	r0, r3
 800b172:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b176:	46bd      	mov	sp, r7
 800b178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b17c:	58024400 	.word	0x58024400

0800b180 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b090      	sub	sp, #64	@ 0x40
 800b184:	af00      	add	r7, sp, #0
 800b186:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b18e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b192:	430b      	orrs	r3, r1
 800b194:	f040 8094 	bne.w	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b198:	4b9e      	ldr	r3, [pc, #632]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b19c:	f003 0307 	and.w	r3, r3, #7
 800b1a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	f200 8087 	bhi.w	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b1c5 	.word	0x0800b1c5
 800b1b4:	0800b1ed 	.word	0x0800b1ed
 800b1b8:	0800b215 	.word	0x0800b215
 800b1bc:	0800b2b1 	.word	0x0800b2b1
 800b1c0:	0800b23d 	.word	0x0800b23d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1c4:	4b93      	ldr	r3, [pc, #588]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d0:	d108      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 f810 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e0:	f000 bd45 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1e8:	f000 bd41 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ec:	4b89      	ldr	r3, [pc, #548]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1f8:	d108      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fa:	f107 0318 	add.w	r3, r7, #24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fd54 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b208:	f000 bd31 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b210:	f000 bd2d 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b214:	4b7f      	ldr	r3, [pc, #508]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b21c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b220:	d108      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b222:	f107 030c 	add.w	r3, r7, #12
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fe94 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b230:	f000 bd1d 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b238:	f000 bd19 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b23c:	4b75      	ldr	r3, [pc, #468]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b23e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b240:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b244:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b246:	4b73      	ldr	r3, [pc, #460]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b04      	cmp	r3, #4
 800b250:	d10c      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b254:	2b00      	cmp	r3, #0
 800b256:	d109      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b258:	4b6e      	ldr	r3, [pc, #440]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	08db      	lsrs	r3, r3, #3
 800b25e:	f003 0303 	and.w	r3, r3, #3
 800b262:	4a6d      	ldr	r2, [pc, #436]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b264:	fa22 f303 	lsr.w	r3, r2, r3
 800b268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b26a:	e01f      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b26c:	4b69      	ldr	r3, [pc, #420]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b278:	d106      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b280:	d102      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b282:	4b66      	ldr	r3, [pc, #408]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b286:	e011      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b288:	4b62      	ldr	r3, [pc, #392]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b294:	d106      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b29c:	d102      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b29e:	4b60      	ldr	r3, [pc, #384]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2a2:	e003      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2a8:	f000 bce1 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2ac:	f000 bcdf 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2b0:	4b5c      	ldr	r3, [pc, #368]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b4:	f000 bcdb 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2bc:	f000 bcd7 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	f040 80ad 	bne.w	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b2ce:	4b51      	ldr	r3, [pc, #324]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2d2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b2d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2de:	d056      	beq.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2e6:	f200 8090 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2ee:	f000 8088 	beq.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2f6:	f200 8088 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	2b80      	cmp	r3, #128	@ 0x80
 800b2fe:	d032      	beq.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b302:	2b80      	cmp	r3, #128	@ 0x80
 800b304:	f200 8081 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	2b40      	cmp	r3, #64	@ 0x40
 800b312:	d014      	beq.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b314:	e079      	b.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b316:	4b3f      	ldr	r3, [pc, #252]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b31e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b322:	d108      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 ff67 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b332:	f000 bc9c 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b33a:	f000 bc98 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b33e:	4b35      	ldr	r3, [pc, #212]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b34a:	d108      	bne.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b34c:	f107 0318 	add.w	r3, r7, #24
 800b350:	4618      	mov	r0, r3
 800b352:	f000 fcab 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b35a:	f000 bc88 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b35e:	2300      	movs	r3, #0
 800b360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b362:	f000 bc84 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b366:	4b2b      	ldr	r3, [pc, #172]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b372:	d108      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fdeb 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b382:	f000 bc74 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b38a:	f000 bc70 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b38e:	4b21      	ldr	r3, [pc, #132]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b392:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b396:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b398:	4b1e      	ldr	r3, [pc, #120]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d10c      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d109      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	08db      	lsrs	r3, r3, #3
 800b3b0:	f003 0303 	and.w	r3, r3, #3
 800b3b4:	4a18      	ldr	r2, [pc, #96]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3bc:	e01f      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3be:	4b15      	ldr	r3, [pc, #84]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ca:	d106      	bne.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3d2:	d102      	bne.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3d4:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3d8:	e011      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3da:	4b0e      	ldr	r3, [pc, #56]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3e6:	d106      	bne.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3ee:	d102      	bne.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f4:	e003      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3fa:	f000 bc38 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3fe:	f000 bc36 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b402:	4b08      	ldr	r3, [pc, #32]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b406:	f000 bc32 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40e:	f000 bc2e 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b412:	bf00      	nop
 800b414:	58024400 	.word	0x58024400
 800b418:	03d09000 	.word	0x03d09000
 800b41c:	003d0900 	.word	0x003d0900
 800b420:	017d7840 	.word	0x017d7840
 800b424:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b42c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b430:	430b      	orrs	r3, r1
 800b432:	f040 809c 	bne.w	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b436:	4b9e      	ldr	r3, [pc, #632]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b43a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b43e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b446:	d054      	beq.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b44e:	f200 808b 	bhi.w	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b458:	f000 8083 	beq.w	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b462:	f200 8081 	bhi.w	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b46c:	d02f      	beq.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b474:	d878      	bhi.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d004      	beq.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b482:	d012      	beq.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b484:	e070      	b.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b486:	4b8a      	ldr	r3, [pc, #552]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b48e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b492:	d107      	bne.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 feaf 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a2:	e3e4      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a8:	e3e1      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4aa:	4b81      	ldr	r3, [pc, #516]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4b6:	d107      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4b8:	f107 0318 	add.w	r3, r7, #24
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f000 fbf5 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4c6:	e3d2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4cc:	e3cf      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4ce:	4b78      	ldr	r3, [pc, #480]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4da:	d107      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4dc:	f107 030c 	add.w	r3, r7, #12
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 fd37 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ea:	e3c0      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f0:	e3bd      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4f2:	4b6f      	ldr	r3, [pc, #444]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4fc:	4b6c      	ldr	r3, [pc, #432]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b04      	cmp	r3, #4
 800b506:	d10c      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d109      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b50e:	4b68      	ldr	r3, [pc, #416]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	08db      	lsrs	r3, r3, #3
 800b514:	f003 0303 	and.w	r3, r3, #3
 800b518:	4a66      	ldr	r2, [pc, #408]	@ (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b51a:	fa22 f303 	lsr.w	r3, r2, r3
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b520:	e01e      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b522:	4b63      	ldr	r3, [pc, #396]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b52a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b52e:	d106      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b536:	d102      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b538:	4b5f      	ldr	r3, [pc, #380]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b53c:	e010      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b53e:	4b5c      	ldr	r3, [pc, #368]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b54a:	d106      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b552:	d102      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b554:	4b59      	ldr	r3, [pc, #356]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b558:	e002      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b55e:	e386      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b560:	e385      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b562:	4b57      	ldr	r3, [pc, #348]	@ (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b566:	e382      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b56c:	e37f      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b572:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b576:	430b      	orrs	r3, r1
 800b578:	f040 80a7 	bne.w	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b57c:	4b4c      	ldr	r3, [pc, #304]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b57e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b580:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b584:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b588:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b58c:	d055      	beq.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b594:	f200 8096 	bhi.w	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b59e:	f000 8084 	beq.w	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5a8:	f200 808c 	bhi.w	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5b2:	d030      	beq.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5ba:	f200 8083 	bhi.w	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d004      	beq.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5ca:	d012      	beq.n	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b5cc:	e07a      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5ce:	4b38      	ldr	r3, [pc, #224]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5da:	d107      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fe0b 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ea:	e340      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f0:	e33d      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5fe:	d107      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b600:	f107 0318 	add.w	r3, r7, #24
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fb51 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b60e:	e32e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b614:	e32b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b616:	4b26      	ldr	r3, [pc, #152]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b61e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b622:	d107      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b624:	f107 030c 	add.w	r3, r7, #12
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fc93 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b632:	e31c      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b638:	e319      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b63a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b63c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b63e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b642:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b644:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d10c      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b652:	2b00      	cmp	r3, #0
 800b654:	d109      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b656:	4b16      	ldr	r3, [pc, #88]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	08db      	lsrs	r3, r3, #3
 800b65c:	f003 0303 	and.w	r3, r3, #3
 800b660:	4a14      	ldr	r2, [pc, #80]	@ (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b662:	fa22 f303 	lsr.w	r3, r2, r3
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b668:	e01e      	b.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b66a:	4b11      	ldr	r3, [pc, #68]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b676:	d106      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b67a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b67e:	d102      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b680:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b684:	e010      	b.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b686:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b692:	d106      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b69a:	d102      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b69c:	4b07      	ldr	r3, [pc, #28]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6a0:	e002      	b.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6a6:	e2e2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6a8:	e2e1      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6aa:	4b05      	ldr	r3, [pc, #20]	@ (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ae:	e2de      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6b0:	58024400 	.word	0x58024400
 800b6b4:	03d09000 	.word	0x03d09000
 800b6b8:	003d0900 	.word	0x003d0900
 800b6bc:	017d7840 	.word	0x017d7840
 800b6c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c8:	e2d1      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b6d2:	430b      	orrs	r3, r1
 800b6d4:	f040 809c 	bne.w	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b6d8:	4b93      	ldr	r3, [pc, #588]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b6e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6e8:	d054      	beq.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6f0:	f200 808b 	bhi.w	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b6fa:	f000 8083 	beq.w	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b704:	f200 8081 	bhi.w	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b70e:	d02f      	beq.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b716:	d878      	bhi.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d004      	beq.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b724:	d012      	beq.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b726:	e070      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b728:	4b7f      	ldr	r3, [pc, #508]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b734:	d107      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 fd5e 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b744:	e293      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b74a:	e290      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b74c:	4b76      	ldr	r3, [pc, #472]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b758:	d107      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b75a:	f107 0318 	add.w	r3, r7, #24
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 faa4 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b768:	e281      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b76e:	e27e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b770:	4b6d      	ldr	r3, [pc, #436]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b77c:	d107      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b77e:	f107 030c 	add.w	r3, r7, #12
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fbe6 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b78c:	e26f      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b792:	e26c      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b794:	4b64      	ldr	r3, [pc, #400]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b798:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b79c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b79e:	4b62      	ldr	r3, [pc, #392]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0304 	and.w	r3, r3, #4
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	d10c      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d109      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7b0:	4b5d      	ldr	r3, [pc, #372]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	08db      	lsrs	r3, r3, #3
 800b7b6:	f003 0303 	and.w	r3, r3, #3
 800b7ba:	4a5c      	ldr	r2, [pc, #368]	@ (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7c2:	e01e      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7c4:	4b58      	ldr	r3, [pc, #352]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7d0:	d106      	bne.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7d8:	d102      	bne.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7da:	4b55      	ldr	r3, [pc, #340]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7de:	e010      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7e0:	4b51      	ldr	r3, [pc, #324]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7ec:	d106      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7f4:	d102      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7fa:	e002      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b800:	e235      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b802:	e234      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b804:	4b4c      	ldr	r3, [pc, #304]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b808:	e231      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b80e:	e22e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b810:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b814:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b818:	430b      	orrs	r3, r1
 800b81a:	f040 808f 	bne.w	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b81e:	4b42      	ldr	r3, [pc, #264]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b822:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b826:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b82e:	d06b      	beq.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b836:	d874      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b83e:	d056      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b842:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b846:	d86c      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b84e:	d03b      	beq.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b856:	d864      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b85e:	d021      	beq.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b866:	d85c      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b874:	d004      	beq.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b876:	e054      	b.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b878:	f7fe fa4c 	bl	8009d14 <HAL_RCC_GetPCLK1Freq>
 800b87c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b87e:	e1f6      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b880:	4b29      	ldr	r3, [pc, #164]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b88c:	d107      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b88e:	f107 0318 	add.w	r3, r7, #24
 800b892:	4618      	mov	r0, r3
 800b894:	f000 fa0a 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b89c:	e1e7      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a2:	e1e4      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8a4:	4b20      	ldr	r3, [pc, #128]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8b0:	d107      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8b2:	f107 030c 	add.w	r3, r7, #12
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 fb4c 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c0:	e1d5      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8c6:	e1d2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b8c8:	4b17      	ldr	r3, [pc, #92]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b04      	cmp	r3, #4
 800b8d2:	d109      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8d4:	4b14      	ldr	r3, [pc, #80]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	08db      	lsrs	r3, r3, #3
 800b8da:	f003 0303 	and.w	r3, r3, #3
 800b8de:	4a13      	ldr	r2, [pc, #76]	@ (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b8e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8e6:	e1c2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ec:	e1bf      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8fa:	d102      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b900:	e1b5      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b906:	e1b2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b908:	4b07      	ldr	r3, [pc, #28]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b914:	d102      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b916:	4b07      	ldr	r3, [pc, #28]	@ (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b91a:	e1a8      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b920:	e1a5      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b926:	e1a2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b928:	58024400 	.word	0x58024400
 800b92c:	03d09000 	.word	0x03d09000
 800b930:	003d0900 	.word	0x003d0900
 800b934:	017d7840 	.word	0x017d7840
 800b938:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b93c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b940:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b944:	430b      	orrs	r3, r1
 800b946:	d173      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b948:	4b9c      	ldr	r3, [pc, #624]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b94a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b94c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b950:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b958:	d02f      	beq.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b960:	d863      	bhi.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	2b00      	cmp	r3, #0
 800b966:	d004      	beq.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b96e:	d012      	beq.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b970:	e05b      	b.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b972:	4b92      	ldr	r3, [pc, #584]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b97a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b97e:	d107      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b980:	f107 0318 	add.w	r3, r7, #24
 800b984:	4618      	mov	r0, r3
 800b986:	f000 f991 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98e:	e16e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b994:	e16b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b996:	4b89      	ldr	r3, [pc, #548]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b99e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9a2:	d107      	bne.n	800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9a4:	f107 030c 	add.w	r3, r7, #12
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 fad3 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b2:	e15c      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b8:	e159      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9ba:	4b80      	ldr	r3, [pc, #512]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9c4:	4b7d      	ldr	r3, [pc, #500]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d10c      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d109      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9d6:	4b79      	ldr	r3, [pc, #484]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	08db      	lsrs	r3, r3, #3
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	4a77      	ldr	r2, [pc, #476]	@ (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9e8:	e01e      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9ea:	4b74      	ldr	r3, [pc, #464]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9f6:	d106      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9fe:	d102      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba00:	4b70      	ldr	r3, [pc, #448]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba04:	e010      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba06:	4b6d      	ldr	r3, [pc, #436]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba12:	d106      	bne.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ba14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba1a:	d102      	bne.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba1c:	4b6a      	ldr	r3, [pc, #424]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba20:	e002      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba26:	e122      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba28:	e121      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba2e:	e11e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ba30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba34:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	d133      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ba3c:	4b5f      	ldr	r3, [pc, #380]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d004      	beq.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba52:	d012      	beq.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ba54:	e023      	b.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba56:	4b59      	ldr	r3, [pc, #356]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba62:	d107      	bne.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 fbc7 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba72:	e0fc      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba78:	e0f9      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba7a:	4b50      	ldr	r3, [pc, #320]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba86:	d107      	bne.n	800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba88:	f107 0318 	add.w	r3, r7, #24
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f90d 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba96:	e0ea      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba9c:	e0e7      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa2:	e0e4      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800baa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baa8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800baac:	430b      	orrs	r3, r1
 800baae:	f040 808d 	bne.w	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bab2:	4b42      	ldr	r3, [pc, #264]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bab6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800baba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800babc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bac2:	d06b      	beq.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baca:	d874      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad2:	d056      	beq.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bada:	d86c      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800badc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bae2:	d03b      	beq.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800baea:	d864      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baf2:	d021      	beq.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bafa:	d85c      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d004      	beq.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb08:	d004      	beq.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bb0a:	e054      	b.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bb0c:	f000 f8b8 	bl	800bc80 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb10:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb12:	e0ac      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb14:	4b29      	ldr	r3, [pc, #164]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb20:	d107      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb22:	f107 0318 	add.w	r3, r7, #24
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 f8c0 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb30:	e09d      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb36:	e09a      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb38:	4b20      	ldr	r3, [pc, #128]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb44:	d107      	bne.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb46:	f107 030c 	add.w	r3, r7, #12
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fa02 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb54:	e08b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb5a:	e088      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb5c:	4b17      	ldr	r3, [pc, #92]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	d109      	bne.n	800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb68:	4b14      	ldr	r3, [pc, #80]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	08db      	lsrs	r3, r3, #3
 800bb6e:	f003 0303 	and.w	r3, r3, #3
 800bb72:	4a13      	ldr	r2, [pc, #76]	@ (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bb74:	fa22 f303 	lsr.w	r3, r2, r3
 800bb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb7a:	e078      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb80:	e075      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bb82:	4b0e      	ldr	r3, [pc, #56]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb8e:	d102      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bb90:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb94:	e06b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb9a:	e068      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb9c:	4b07      	ldr	r3, [pc, #28]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bba8:	d102      	bne.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bbaa:	4b07      	ldr	r3, [pc, #28]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbae:	e05e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbb4:	e05b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbba:	e058      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bbbc:	58024400 	.word	0x58024400
 800bbc0:	03d09000 	.word	0x03d09000
 800bbc4:	003d0900 	.word	0x003d0900
 800bbc8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bbcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbd0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bbd4:	430b      	orrs	r3, r1
 800bbd6:	d148      	bne.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bbd8:	4b27      	ldr	r3, [pc, #156]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bbda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bbe0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbe8:	d02a      	beq.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbf0:	d838      	bhi.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d004      	beq.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbfe:	d00d      	beq.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bc00:	e030      	b.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc02:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc0e:	d102      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bc10:	4b1a      	ldr	r3, [pc, #104]	@ (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc14:	e02b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc1a:	e028      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc1c:	4b16      	ldr	r3, [pc, #88]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc28:	d107      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 fae4 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc38:	e019      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc3e:	e016      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc40:	4b0d      	ldr	r3, [pc, #52]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc4c:	d107      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc4e:	f107 0318 	add.w	r3, r7, #24
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 f82a 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc5c:	e007      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc62:	e004      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc68:	e001      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bc6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3740      	adds	r7, #64	@ 0x40
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	58024400 	.word	0x58024400
 800bc7c:	017d7840 	.word	0x017d7840

0800bc80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc84:	f7fe f816 	bl	8009cb4 <HAL_RCC_GetHCLKFreq>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	4b06      	ldr	r3, [pc, #24]	@ (800bca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	091b      	lsrs	r3, r3, #4
 800bc90:	f003 0307 	and.w	r3, r3, #7
 800bc94:	4904      	ldr	r1, [pc, #16]	@ (800bca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc96:	5ccb      	ldrb	r3, [r1, r3]
 800bc98:	f003 031f 	and.w	r3, r3, #31
 800bc9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	58024400 	.word	0x58024400
 800bca8:	08011f84 	.word	0x08011f84

0800bcac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b089      	sub	sp, #36	@ 0x24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcb4:	4ba1      	ldr	r3, [pc, #644]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb8:	f003 0303 	and.w	r3, r3, #3
 800bcbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bcbe:	4b9f      	ldr	r3, [pc, #636]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc2:	0b1b      	lsrs	r3, r3, #12
 800bcc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bcca:	4b9c      	ldr	r3, [pc, #624]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcce:	091b      	lsrs	r3, r3, #4
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bcd6:	4b99      	ldr	r3, [pc, #612]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcda:	08db      	lsrs	r3, r3, #3
 800bcdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	fb02 f303 	mul.w	r3, r2, r3
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8111 	beq.w	800bf1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	f000 8083 	beq.w	800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	f200 80a1 	bhi.w	800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d056      	beq.n	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd16:	e099      	b.n	800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd18:	4b88      	ldr	r3, [pc, #544]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0320 	and.w	r3, r3, #32
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d02d      	beq.n	800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd24:	4b85      	ldr	r3, [pc, #532]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	08db      	lsrs	r3, r3, #3
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	4a84      	ldr	r2, [pc, #528]	@ (800bf40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bd30:	fa22 f303 	lsr.w	r3, r2, r3
 800bd34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	ee07 3a90 	vmov	s15, r3
 800bd3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd4e:	4b7b      	ldr	r3, [pc, #492]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd56:	ee07 3a90 	vmov	s15, r3
 800bd5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd7e:	e087      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd92:	4b6a      	ldr	r3, [pc, #424]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdc2:	e065      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bdd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdd6:	4b59      	ldr	r3, [pc, #356]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be06:	e043      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	ee07 3a90 	vmov	s15, r3
 800be0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bf50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be1a:	4b48      	ldr	r3, [pc, #288]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be4a:	e021      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be5e:	4b37      	ldr	r3, [pc, #220]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800be90:	4b2a      	ldr	r3, [pc, #168]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be94:	0a5b      	lsrs	r3, r3, #9
 800be96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be9a:	ee07 3a90 	vmov	s15, r3
 800be9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800beae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb6:	ee17 2a90 	vmov	r2, s15
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bebe:	4b1f      	ldr	r3, [pc, #124]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bed8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee4:	ee17 2a90 	vmov	r2, s15
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800beec:	4b13      	ldr	r3, [pc, #76]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef0:	0e1b      	lsrs	r3, r3, #24
 800bef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf06:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf12:	ee17 2a90 	vmov	r2, s15
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf1a:	e008      	b.n	800bf2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	609a      	str	r2, [r3, #8]
}
 800bf2e:	bf00      	nop
 800bf30:	3724      	adds	r7, #36	@ 0x24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	58024400 	.word	0x58024400
 800bf40:	03d09000 	.word	0x03d09000
 800bf44:	46000000 	.word	0x46000000
 800bf48:	4c742400 	.word	0x4c742400
 800bf4c:	4a742400 	.word	0x4a742400
 800bf50:	4bbebc20 	.word	0x4bbebc20

0800bf54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b089      	sub	sp, #36	@ 0x24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf5c:	4ba1      	ldr	r3, [pc, #644]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf60:	f003 0303 	and.w	r3, r3, #3
 800bf64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bf66:	4b9f      	ldr	r3, [pc, #636]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6a:	0d1b      	lsrs	r3, r3, #20
 800bf6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf72:	4b9c      	ldr	r3, [pc, #624]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf76:	0a1b      	lsrs	r3, r3, #8
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bf7e:	4b99      	ldr	r3, [pc, #612]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf82:	08db      	lsrs	r3, r3, #3
 800bf84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	fb02 f303 	mul.w	r3, r2, r3
 800bf8e:	ee07 3a90 	vmov	s15, r3
 800bf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 8111 	beq.w	800c1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	f000 8083 	beq.w	800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	f200 80a1 	bhi.w	800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d056      	beq.n	800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bfbe:	e099      	b.n	800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfc0:	4b88      	ldr	r3, [pc, #544]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0320 	and.w	r3, r3, #32
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d02d      	beq.n	800c028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfcc:	4b85      	ldr	r3, [pc, #532]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	08db      	lsrs	r3, r3, #3
 800bfd2:	f003 0303 	and.w	r3, r3, #3
 800bfd6:	4a84      	ldr	r2, [pc, #528]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bfd8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff6:	4b7b      	ldr	r3, [pc, #492]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffe:	ee07 3a90 	vmov	s15, r3
 800c002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c006:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c026:	e087      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c032:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03a:	4b6a      	ldr	r3, [pc, #424]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c042:	ee07 3a90 	vmov	s15, r3
 800c046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c04e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c05a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c06a:	e065      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c076:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c07e:	4b59      	ldr	r3, [pc, #356]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c092:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ae:	e043      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0c2:	4b48      	ldr	r3, [pc, #288]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ca:	ee07 3a90 	vmov	s15, r3
 800c0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0f2:	e021      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c106:	4b37      	ldr	r3, [pc, #220]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c116:	ed97 6a03 	vldr	s12, [r7, #12]
 800c11a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c138:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c13c:	0a5b      	lsrs	r3, r3, #9
 800c13e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c14e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c152:	edd7 6a07 	vldr	s13, [r7, #28]
 800c156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c15a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c15e:	ee17 2a90 	vmov	r2, s15
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c166:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16a:	0c1b      	lsrs	r3, r3, #16
 800c16c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c170:	ee07 3a90 	vmov	s15, r3
 800c174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c17c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c180:	edd7 6a07 	vldr	s13, [r7, #28]
 800c184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c18c:	ee17 2a90 	vmov	r2, s15
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c194:	4b13      	ldr	r3, [pc, #76]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c198:	0e1b      	lsrs	r3, r3, #24
 800c19a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ba:	ee17 2a90 	vmov	r2, s15
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c1c2:	e008      	b.n	800c1d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	609a      	str	r2, [r3, #8]
}
 800c1d6:	bf00      	nop
 800c1d8:	3724      	adds	r7, #36	@ 0x24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	58024400 	.word	0x58024400
 800c1e8:	03d09000 	.word	0x03d09000
 800c1ec:	46000000 	.word	0x46000000
 800c1f0:	4c742400 	.word	0x4c742400
 800c1f4:	4a742400 	.word	0x4a742400
 800c1f8:	4bbebc20 	.word	0x4bbebc20

0800c1fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b089      	sub	sp, #36	@ 0x24
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c204:	4ba0      	ldr	r3, [pc, #640]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c20e:	4b9e      	ldr	r3, [pc, #632]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c212:	091b      	lsrs	r3, r3, #4
 800c214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c218:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c21a:	4b9b      	ldr	r3, [pc, #620]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c224:	4b98      	ldr	r3, [pc, #608]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c228:	08db      	lsrs	r3, r3, #3
 800c22a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	fb02 f303 	mul.w	r3, r2, r3
 800c234:	ee07 3a90 	vmov	s15, r3
 800c238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 8111 	beq.w	800c46a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	f000 8083 	beq.w	800c356 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	2b02      	cmp	r3, #2
 800c254:	f200 80a1 	bhi.w	800c39a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d056      	beq.n	800c312 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c264:	e099      	b.n	800c39a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c266:	4b88      	ldr	r3, [pc, #544]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0320 	and.w	r3, r3, #32
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d02d      	beq.n	800c2ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c272:	4b85      	ldr	r3, [pc, #532]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	08db      	lsrs	r3, r3, #3
 800c278:	f003 0303 	and.w	r3, r3, #3
 800c27c:	4a83      	ldr	r2, [pc, #524]	@ (800c48c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c27e:	fa22 f303 	lsr.w	r3, r2, r3
 800c282:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	ee07 3a90 	vmov	s15, r3
 800c28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	ee07 3a90 	vmov	s15, r3
 800c294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c29c:	4b7a      	ldr	r3, [pc, #488]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a4:	ee07 3a90 	vmov	s15, r3
 800c2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c2cc:	e087      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	ee07 3a90 	vmov	s15, r3
 800c2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c2dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e0:	4b69      	ldr	r3, [pc, #420]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e8:	ee07 3a90 	vmov	s15, r3
 800c2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c30c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c310:	e065      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	ee07 3a90 	vmov	s15, r3
 800c318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c31c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c498 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c324:	4b58      	ldr	r3, [pc, #352]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c32c:	ee07 3a90 	vmov	s15, r3
 800c330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c334:	ed97 6a03 	vldr	s12, [r7, #12]
 800c338:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c33c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c350:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c354:	e043      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	ee07 3a90 	vmov	s15, r3
 800c35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c360:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c49c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c368:	4b47      	ldr	r3, [pc, #284]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c36c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c370:	ee07 3a90 	vmov	s15, r3
 800c374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c378:	ed97 6a03 	vldr	s12, [r7, #12]
 800c37c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c388:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c38c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c390:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c394:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c398:	e021      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	ee07 3a90 	vmov	s15, r3
 800c3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ac:	4b36      	ldr	r3, [pc, #216]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b4:	ee07 3a90 	vmov	s15, r3
 800c3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c3de:	4b2a      	ldr	r3, [pc, #168]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3e2:	0a5b      	lsrs	r3, r3, #9
 800c3e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3e8:	ee07 3a90 	vmov	s15, r3
 800c3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c404:	ee17 2a90 	vmov	r2, s15
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c40c:	4b1e      	ldr	r3, [pc, #120]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c410:	0c1b      	lsrs	r3, r3, #16
 800c412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c416:	ee07 3a90 	vmov	s15, r3
 800c41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c41e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c422:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c426:	edd7 6a07 	vldr	s13, [r7, #28]
 800c42a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c42e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c432:	ee17 2a90 	vmov	r2, s15
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c43a:	4b13      	ldr	r3, [pc, #76]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c43e:	0e1b      	lsrs	r3, r3, #24
 800c440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c444:	ee07 3a90 	vmov	s15, r3
 800c448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c450:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c454:	edd7 6a07 	vldr	s13, [r7, #28]
 800c458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c460:	ee17 2a90 	vmov	r2, s15
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c468:	e008      	b.n	800c47c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	609a      	str	r2, [r3, #8]
}
 800c47c:	bf00      	nop
 800c47e:	3724      	adds	r7, #36	@ 0x24
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	58024400 	.word	0x58024400
 800c48c:	03d09000 	.word	0x03d09000
 800c490:	46000000 	.word	0x46000000
 800c494:	4c742400 	.word	0x4c742400
 800c498:	4a742400 	.word	0x4a742400
 800c49c:	4bbebc20 	.word	0x4bbebc20

0800c4a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4ae:	4b53      	ldr	r3, [pc, #332]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d101      	bne.n	800c4be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e099      	b.n	800c5f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c4be:	4b4f      	ldr	r3, [pc, #316]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a4e      	ldr	r2, [pc, #312]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4ca:	f7f6 feb3 	bl	8003234 <HAL_GetTick>
 800c4ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c4d0:	e008      	b.n	800c4e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4d2:	f7f6 feaf 	bl	8003234 <HAL_GetTick>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d901      	bls.n	800c4e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	e086      	b.n	800c5f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c4e4:	4b45      	ldr	r3, [pc, #276]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1f0      	bne.n	800c4d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c4f0:	4b42      	ldr	r3, [pc, #264]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	031b      	lsls	r3, r3, #12
 800c4fe:	493f      	ldr	r1, [pc, #252]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c500:	4313      	orrs	r3, r2
 800c502:	628b      	str	r3, [r1, #40]	@ 0x28
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	3b01      	subs	r3, #1
 800c50a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	3b01      	subs	r3, #1
 800c514:	025b      	lsls	r3, r3, #9
 800c516:	b29b      	uxth	r3, r3
 800c518:	431a      	orrs	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	3b01      	subs	r3, #1
 800c520:	041b      	lsls	r3, r3, #16
 800c522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c526:	431a      	orrs	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	3b01      	subs	r3, #1
 800c52e:	061b      	lsls	r3, r3, #24
 800c530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c534:	4931      	ldr	r1, [pc, #196]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c536:	4313      	orrs	r3, r2
 800c538:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c53a:	4b30      	ldr	r3, [pc, #192]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	695b      	ldr	r3, [r3, #20]
 800c546:	492d      	ldr	r1, [pc, #180]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c54c:	4b2b      	ldr	r3, [pc, #172]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c550:	f023 0220 	bic.w	r2, r3, #32
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	4928      	ldr	r1, [pc, #160]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c55a:	4313      	orrs	r3, r2
 800c55c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c55e:	4b27      	ldr	r3, [pc, #156]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c562:	4a26      	ldr	r2, [pc, #152]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c564:	f023 0310 	bic.w	r3, r3, #16
 800c568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c56a:	4b24      	ldr	r3, [pc, #144]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c56c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c56e:	4b24      	ldr	r3, [pc, #144]	@ (800c600 <RCCEx_PLL2_Config+0x160>)
 800c570:	4013      	ands	r3, r2
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	69d2      	ldr	r2, [r2, #28]
 800c576:	00d2      	lsls	r2, r2, #3
 800c578:	4920      	ldr	r1, [pc, #128]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c57a:	4313      	orrs	r3, r2
 800c57c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c57e:	4b1f      	ldr	r3, [pc, #124]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c582:	4a1e      	ldr	r2, [pc, #120]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c584:	f043 0310 	orr.w	r3, r3, #16
 800c588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c590:	4b1a      	ldr	r3, [pc, #104]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c594:	4a19      	ldr	r2, [pc, #100]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c596:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c59a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c59c:	e00f      	b.n	800c5be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d106      	bne.n	800c5b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c5a4:	4b15      	ldr	r3, [pc, #84]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a8:	4a14      	ldr	r2, [pc, #80]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5b0:	e005      	b.n	800c5be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c5b2:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b6:	4a11      	ldr	r2, [pc, #68]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c5bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c5be:	4b0f      	ldr	r3, [pc, #60]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a0e      	ldr	r2, [pc, #56]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c5c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ca:	f7f6 fe33 	bl	8003234 <HAL_GetTick>
 800c5ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5d0:	e008      	b.n	800c5e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5d2:	f7f6 fe2f 	bl	8003234 <HAL_GetTick>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d901      	bls.n	800c5e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e006      	b.n	800c5f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5e4:	4b05      	ldr	r3, [pc, #20]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d0f0      	beq.n	800c5d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	58024400 	.word	0x58024400
 800c600:	ffff0007 	.word	0xffff0007

0800c604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c612:	4b53      	ldr	r3, [pc, #332]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d101      	bne.n	800c622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e099      	b.n	800c756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c622:	4b4f      	ldr	r3, [pc, #316]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a4e      	ldr	r2, [pc, #312]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c62c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c62e:	f7f6 fe01 	bl	8003234 <HAL_GetTick>
 800c632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c634:	e008      	b.n	800c648 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c636:	f7f6 fdfd 	bl	8003234 <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b02      	cmp	r3, #2
 800c642:	d901      	bls.n	800c648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e086      	b.n	800c756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c648:	4b45      	ldr	r3, [pc, #276]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1f0      	bne.n	800c636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c654:	4b42      	ldr	r3, [pc, #264]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c658:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	051b      	lsls	r3, r3, #20
 800c662:	493f      	ldr	r1, [pc, #252]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c664:	4313      	orrs	r3, r2
 800c666:	628b      	str	r3, [r1, #40]	@ 0x28
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	3b01      	subs	r3, #1
 800c678:	025b      	lsls	r3, r3, #9
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	431a      	orrs	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	3b01      	subs	r3, #1
 800c684:	041b      	lsls	r3, r3, #16
 800c686:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c68a:	431a      	orrs	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	3b01      	subs	r3, #1
 800c692:	061b      	lsls	r3, r3, #24
 800c694:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c698:	4931      	ldr	r1, [pc, #196]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c69a:	4313      	orrs	r3, r2
 800c69c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c69e:	4b30      	ldr	r3, [pc, #192]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	492d      	ldr	r1, [pc, #180]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c6b0:	4b2b      	ldr	r3, [pc, #172]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	4928      	ldr	r1, [pc, #160]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c6c2:	4b27      	ldr	r3, [pc, #156]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c6:	4a26      	ldr	r2, [pc, #152]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c6ce:	4b24      	ldr	r3, [pc, #144]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6d2:	4b24      	ldr	r3, [pc, #144]	@ (800c764 <RCCEx_PLL3_Config+0x160>)
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	69d2      	ldr	r2, [r2, #28]
 800c6da:	00d2      	lsls	r2, r2, #3
 800c6dc:	4920      	ldr	r1, [pc, #128]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c6e2:	4b1f      	ldr	r3, [pc, #124]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e6:	4a1e      	ldr	r2, [pc, #120]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d106      	bne.n	800c702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f8:	4a19      	ldr	r2, [pc, #100]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c6fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c700:	e00f      	b.n	800c722 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d106      	bne.n	800c716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c708:	4b15      	ldr	r3, [pc, #84]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c70c:	4a14      	ldr	r2, [pc, #80]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c70e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c714:	e005      	b.n	800c722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c716:	4b12      	ldr	r3, [pc, #72]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c71a:	4a11      	ldr	r2, [pc, #68]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c71c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c720:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c722:	4b0f      	ldr	r3, [pc, #60]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a0e      	ldr	r2, [pc, #56]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c72c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c72e:	f7f6 fd81 	bl	8003234 <HAL_GetTick>
 800c732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c734:	e008      	b.n	800c748 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c736:	f7f6 fd7d 	bl	8003234 <HAL_GetTick>
 800c73a:	4602      	mov	r2, r0
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	2b02      	cmp	r3, #2
 800c742:	d901      	bls.n	800c748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e006      	b.n	800c756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c748:	4b05      	ldr	r3, [pc, #20]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0f0      	beq.n	800c736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c754:	7bfb      	ldrb	r3, [r7, #15]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	58024400 	.word	0x58024400
 800c764:	ffff0007 	.word	0xffff0007

0800c768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e049      	b.n	800c80e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d106      	bne.n	800c794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7f6 fad4 	bl	8002d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2202      	movs	r2, #2
 800c798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	f000 fe96 	bl	800d4d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c826:	b2db      	uxtb	r3, r3
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d001      	beq.n	800c830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	e04c      	b.n	800c8ca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2202      	movs	r2, #2
 800c834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a26      	ldr	r2, [pc, #152]	@ (800c8d8 <HAL_TIM_Base_Start+0xc0>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d022      	beq.n	800c888 <HAL_TIM_Base_Start+0x70>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c84a:	d01d      	beq.n	800c888 <HAL_TIM_Base_Start+0x70>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a22      	ldr	r2, [pc, #136]	@ (800c8dc <HAL_TIM_Base_Start+0xc4>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d018      	beq.n	800c888 <HAL_TIM_Base_Start+0x70>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a21      	ldr	r2, [pc, #132]	@ (800c8e0 <HAL_TIM_Base_Start+0xc8>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d013      	beq.n	800c888 <HAL_TIM_Base_Start+0x70>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a1f      	ldr	r2, [pc, #124]	@ (800c8e4 <HAL_TIM_Base_Start+0xcc>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d00e      	beq.n	800c888 <HAL_TIM_Base_Start+0x70>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a1e      	ldr	r2, [pc, #120]	@ (800c8e8 <HAL_TIM_Base_Start+0xd0>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d009      	beq.n	800c888 <HAL_TIM_Base_Start+0x70>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a1c      	ldr	r2, [pc, #112]	@ (800c8ec <HAL_TIM_Base_Start+0xd4>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d004      	beq.n	800c888 <HAL_TIM_Base_Start+0x70>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a1b      	ldr	r2, [pc, #108]	@ (800c8f0 <HAL_TIM_Base_Start+0xd8>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d115      	bne.n	800c8b4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689a      	ldr	r2, [r3, #8]
 800c88e:	4b19      	ldr	r3, [pc, #100]	@ (800c8f4 <HAL_TIM_Base_Start+0xdc>)
 800c890:	4013      	ands	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b06      	cmp	r3, #6
 800c898:	d015      	beq.n	800c8c6 <HAL_TIM_Base_Start+0xae>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8a0:	d011      	beq.n	800c8c6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f042 0201 	orr.w	r2, r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8b2:	e008      	b.n	800c8c6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f042 0201 	orr.w	r2, r2, #1
 800c8c2:	601a      	str	r2, [r3, #0]
 800c8c4:	e000      	b.n	800c8c8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3714      	adds	r7, #20
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	40010000 	.word	0x40010000
 800c8dc:	40000400 	.word	0x40000400
 800c8e0:	40000800 	.word	0x40000800
 800c8e4:	40000c00 	.word	0x40000c00
 800c8e8:	40010400 	.word	0x40010400
 800c8ec:	40001800 	.word	0x40001800
 800c8f0:	40014000 	.word	0x40014000
 800c8f4:	00010007 	.word	0x00010007

0800c8f8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6a1a      	ldr	r2, [r3, #32]
 800c906:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c90a:	4013      	ands	r3, r2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10f      	bne.n	800c930 <HAL_TIM_Base_Stop+0x38>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6a1a      	ldr	r2, [r3, #32]
 800c916:	f240 4344 	movw	r3, #1092	@ 0x444
 800c91a:	4013      	ands	r3, r2
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <HAL_TIM_Base_Stop+0x38>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f022 0201 	bic.w	r2, r2, #1
 800c92e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
	...

0800c948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d001      	beq.n	800c960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	e054      	b.n	800ca0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2202      	movs	r2, #2
 800c964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68da      	ldr	r2, [r3, #12]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f042 0201 	orr.w	r2, r2, #1
 800c976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a26      	ldr	r2, [pc, #152]	@ (800ca18 <HAL_TIM_Base_Start_IT+0xd0>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d022      	beq.n	800c9c8 <HAL_TIM_Base_Start_IT+0x80>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c98a:	d01d      	beq.n	800c9c8 <HAL_TIM_Base_Start_IT+0x80>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a22      	ldr	r2, [pc, #136]	@ (800ca1c <HAL_TIM_Base_Start_IT+0xd4>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d018      	beq.n	800c9c8 <HAL_TIM_Base_Start_IT+0x80>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a21      	ldr	r2, [pc, #132]	@ (800ca20 <HAL_TIM_Base_Start_IT+0xd8>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d013      	beq.n	800c9c8 <HAL_TIM_Base_Start_IT+0x80>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a1f      	ldr	r2, [pc, #124]	@ (800ca24 <HAL_TIM_Base_Start_IT+0xdc>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d00e      	beq.n	800c9c8 <HAL_TIM_Base_Start_IT+0x80>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a1e      	ldr	r2, [pc, #120]	@ (800ca28 <HAL_TIM_Base_Start_IT+0xe0>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d009      	beq.n	800c9c8 <HAL_TIM_Base_Start_IT+0x80>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a1c      	ldr	r2, [pc, #112]	@ (800ca2c <HAL_TIM_Base_Start_IT+0xe4>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d004      	beq.n	800c9c8 <HAL_TIM_Base_Start_IT+0x80>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a1b      	ldr	r2, [pc, #108]	@ (800ca30 <HAL_TIM_Base_Start_IT+0xe8>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d115      	bne.n	800c9f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	4b19      	ldr	r3, [pc, #100]	@ (800ca34 <HAL_TIM_Base_Start_IT+0xec>)
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b06      	cmp	r3, #6
 800c9d8:	d015      	beq.n	800ca06 <HAL_TIM_Base_Start_IT+0xbe>
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9e0:	d011      	beq.n	800ca06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f042 0201 	orr.w	r2, r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9f2:	e008      	b.n	800ca06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f042 0201 	orr.w	r2, r2, #1
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	e000      	b.n	800ca08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	40010000 	.word	0x40010000
 800ca1c:	40000400 	.word	0x40000400
 800ca20:	40000800 	.word	0x40000800
 800ca24:	40000c00 	.word	0x40000c00
 800ca28:	40010400 	.word	0x40010400
 800ca2c:	40001800 	.word	0x40001800
 800ca30:	40014000 	.word	0x40014000
 800ca34:	00010007 	.word	0x00010007

0800ca38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	e049      	b.n	800cade <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7f6 f94a 	bl	8002cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2202      	movs	r2, #2
 800ca68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	3304      	adds	r3, #4
 800ca74:	4619      	mov	r1, r3
 800ca76:	4610      	mov	r0, r2
 800ca78:	f000 fd2e 	bl	800d4d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
	...

0800cae8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d109      	bne.n	800cb0c <HAL_TIM_PWM_Start+0x24>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	bf14      	ite	ne
 800cb04:	2301      	movne	r3, #1
 800cb06:	2300      	moveq	r3, #0
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	e03c      	b.n	800cb86 <HAL_TIM_PWM_Start+0x9e>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b04      	cmp	r3, #4
 800cb10:	d109      	bne.n	800cb26 <HAL_TIM_PWM_Start+0x3e>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	bf14      	ite	ne
 800cb1e:	2301      	movne	r3, #1
 800cb20:	2300      	moveq	r3, #0
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	e02f      	b.n	800cb86 <HAL_TIM_PWM_Start+0x9e>
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	2b08      	cmp	r3, #8
 800cb2a:	d109      	bne.n	800cb40 <HAL_TIM_PWM_Start+0x58>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	bf14      	ite	ne
 800cb38:	2301      	movne	r3, #1
 800cb3a:	2300      	moveq	r3, #0
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	e022      	b.n	800cb86 <HAL_TIM_PWM_Start+0x9e>
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	2b0c      	cmp	r3, #12
 800cb44:	d109      	bne.n	800cb5a <HAL_TIM_PWM_Start+0x72>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	bf14      	ite	ne
 800cb52:	2301      	movne	r3, #1
 800cb54:	2300      	moveq	r3, #0
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	e015      	b.n	800cb86 <HAL_TIM_PWM_Start+0x9e>
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	2b10      	cmp	r3, #16
 800cb5e:	d109      	bne.n	800cb74 <HAL_TIM_PWM_Start+0x8c>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	bf14      	ite	ne
 800cb6c:	2301      	movne	r3, #1
 800cb6e:	2300      	moveq	r3, #0
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	e008      	b.n	800cb86 <HAL_TIM_PWM_Start+0x9e>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	bf14      	ite	ne
 800cb80:	2301      	movne	r3, #1
 800cb82:	2300      	moveq	r3, #0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e0a1      	b.n	800ccd2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d104      	bne.n	800cb9e <HAL_TIM_PWM_Start+0xb6>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2202      	movs	r2, #2
 800cb98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb9c:	e023      	b.n	800cbe6 <HAL_TIM_PWM_Start+0xfe>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d104      	bne.n	800cbae <HAL_TIM_PWM_Start+0xc6>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2202      	movs	r2, #2
 800cba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cbac:	e01b      	b.n	800cbe6 <HAL_TIM_PWM_Start+0xfe>
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b08      	cmp	r3, #8
 800cbb2:	d104      	bne.n	800cbbe <HAL_TIM_PWM_Start+0xd6>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbbc:	e013      	b.n	800cbe6 <HAL_TIM_PWM_Start+0xfe>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b0c      	cmp	r3, #12
 800cbc2:	d104      	bne.n	800cbce <HAL_TIM_PWM_Start+0xe6>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cbcc:	e00b      	b.n	800cbe6 <HAL_TIM_PWM_Start+0xfe>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b10      	cmp	r3, #16
 800cbd2:	d104      	bne.n	800cbde <HAL_TIM_PWM_Start+0xf6>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2202      	movs	r2, #2
 800cbd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbdc:	e003      	b.n	800cbe6 <HAL_TIM_PWM_Start+0xfe>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2201      	movs	r2, #1
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f001 f880 	bl	800dcf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a38      	ldr	r2, [pc, #224]	@ (800ccdc <HAL_TIM_PWM_Start+0x1f4>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d013      	beq.n	800cc26 <HAL_TIM_PWM_Start+0x13e>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a37      	ldr	r2, [pc, #220]	@ (800cce0 <HAL_TIM_PWM_Start+0x1f8>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d00e      	beq.n	800cc26 <HAL_TIM_PWM_Start+0x13e>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a35      	ldr	r2, [pc, #212]	@ (800cce4 <HAL_TIM_PWM_Start+0x1fc>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d009      	beq.n	800cc26 <HAL_TIM_PWM_Start+0x13e>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a34      	ldr	r2, [pc, #208]	@ (800cce8 <HAL_TIM_PWM_Start+0x200>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d004      	beq.n	800cc26 <HAL_TIM_PWM_Start+0x13e>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a32      	ldr	r2, [pc, #200]	@ (800ccec <HAL_TIM_PWM_Start+0x204>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d101      	bne.n	800cc2a <HAL_TIM_PWM_Start+0x142>
 800cc26:	2301      	movs	r3, #1
 800cc28:	e000      	b.n	800cc2c <HAL_TIM_PWM_Start+0x144>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d007      	beq.n	800cc40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cc3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a25      	ldr	r2, [pc, #148]	@ (800ccdc <HAL_TIM_PWM_Start+0x1f4>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d022      	beq.n	800cc90 <HAL_TIM_PWM_Start+0x1a8>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc52:	d01d      	beq.n	800cc90 <HAL_TIM_PWM_Start+0x1a8>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a25      	ldr	r2, [pc, #148]	@ (800ccf0 <HAL_TIM_PWM_Start+0x208>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d018      	beq.n	800cc90 <HAL_TIM_PWM_Start+0x1a8>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a24      	ldr	r2, [pc, #144]	@ (800ccf4 <HAL_TIM_PWM_Start+0x20c>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d013      	beq.n	800cc90 <HAL_TIM_PWM_Start+0x1a8>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a22      	ldr	r2, [pc, #136]	@ (800ccf8 <HAL_TIM_PWM_Start+0x210>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d00e      	beq.n	800cc90 <HAL_TIM_PWM_Start+0x1a8>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a1a      	ldr	r2, [pc, #104]	@ (800cce0 <HAL_TIM_PWM_Start+0x1f8>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d009      	beq.n	800cc90 <HAL_TIM_PWM_Start+0x1a8>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a1e      	ldr	r2, [pc, #120]	@ (800ccfc <HAL_TIM_PWM_Start+0x214>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d004      	beq.n	800cc90 <HAL_TIM_PWM_Start+0x1a8>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a16      	ldr	r2, [pc, #88]	@ (800cce4 <HAL_TIM_PWM_Start+0x1fc>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d115      	bne.n	800ccbc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	689a      	ldr	r2, [r3, #8]
 800cc96:	4b1a      	ldr	r3, [pc, #104]	@ (800cd00 <HAL_TIM_PWM_Start+0x218>)
 800cc98:	4013      	ands	r3, r2
 800cc9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2b06      	cmp	r3, #6
 800cca0:	d015      	beq.n	800ccce <HAL_TIM_PWM_Start+0x1e6>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cca8:	d011      	beq.n	800ccce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f042 0201 	orr.w	r2, r2, #1
 800ccb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccba:	e008      	b.n	800ccce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f042 0201 	orr.w	r2, r2, #1
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	e000      	b.n	800ccd0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	40010000 	.word	0x40010000
 800cce0:	40010400 	.word	0x40010400
 800cce4:	40014000 	.word	0x40014000
 800cce8:	40014400 	.word	0x40014400
 800ccec:	40014800 	.word	0x40014800
 800ccf0:	40000400 	.word	0x40000400
 800ccf4:	40000800 	.word	0x40000800
 800ccf8:	40000c00 	.word	0x40000c00
 800ccfc:	40001800 	.word	0x40001800
 800cd00:	00010007 	.word	0x00010007

0800cd04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2200      	movs	r2, #0
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 ffec 	bl	800dcf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a3e      	ldr	r2, [pc, #248]	@ (800ce1c <HAL_TIM_PWM_Stop+0x118>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d013      	beq.n	800cd4e <HAL_TIM_PWM_Stop+0x4a>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a3d      	ldr	r2, [pc, #244]	@ (800ce20 <HAL_TIM_PWM_Stop+0x11c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d00e      	beq.n	800cd4e <HAL_TIM_PWM_Stop+0x4a>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a3b      	ldr	r2, [pc, #236]	@ (800ce24 <HAL_TIM_PWM_Stop+0x120>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d009      	beq.n	800cd4e <HAL_TIM_PWM_Stop+0x4a>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a3a      	ldr	r2, [pc, #232]	@ (800ce28 <HAL_TIM_PWM_Stop+0x124>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d004      	beq.n	800cd4e <HAL_TIM_PWM_Stop+0x4a>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a38      	ldr	r2, [pc, #224]	@ (800ce2c <HAL_TIM_PWM_Stop+0x128>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d101      	bne.n	800cd52 <HAL_TIM_PWM_Stop+0x4e>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e000      	b.n	800cd54 <HAL_TIM_PWM_Stop+0x50>
 800cd52:	2300      	movs	r3, #0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d017      	beq.n	800cd88 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6a1a      	ldr	r2, [r3, #32]
 800cd5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cd62:	4013      	ands	r3, r2
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10f      	bne.n	800cd88 <HAL_TIM_PWM_Stop+0x84>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6a1a      	ldr	r2, [r3, #32]
 800cd6e:	f240 4344 	movw	r3, #1092	@ 0x444
 800cd72:	4013      	ands	r3, r2
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d107      	bne.n	800cd88 <HAL_TIM_PWM_Stop+0x84>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cd86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	6a1a      	ldr	r2, [r3, #32]
 800cd8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cd92:	4013      	ands	r3, r2
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10f      	bne.n	800cdb8 <HAL_TIM_PWM_Stop+0xb4>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6a1a      	ldr	r2, [r3, #32]
 800cd9e:	f240 4344 	movw	r3, #1092	@ 0x444
 800cda2:	4013      	ands	r3, r2
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d107      	bne.n	800cdb8 <HAL_TIM_PWM_Stop+0xb4>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f022 0201 	bic.w	r2, r2, #1
 800cdb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d104      	bne.n	800cdc8 <HAL_TIM_PWM_Stop+0xc4>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cdc6:	e023      	b.n	800ce10 <HAL_TIM_PWM_Stop+0x10c>
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2b04      	cmp	r3, #4
 800cdcc:	d104      	bne.n	800cdd8 <HAL_TIM_PWM_Stop+0xd4>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cdd6:	e01b      	b.n	800ce10 <HAL_TIM_PWM_Stop+0x10c>
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2b08      	cmp	r3, #8
 800cddc:	d104      	bne.n	800cde8 <HAL_TIM_PWM_Stop+0xe4>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cde6:	e013      	b.n	800ce10 <HAL_TIM_PWM_Stop+0x10c>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b0c      	cmp	r3, #12
 800cdec:	d104      	bne.n	800cdf8 <HAL_TIM_PWM_Stop+0xf4>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cdf6:	e00b      	b.n	800ce10 <HAL_TIM_PWM_Stop+0x10c>
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b10      	cmp	r3, #16
 800cdfc:	d104      	bne.n	800ce08 <HAL_TIM_PWM_Stop+0x104>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce06:	e003      	b.n	800ce10 <HAL_TIM_PWM_Stop+0x10c>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	40010000 	.word	0x40010000
 800ce20:	40010400 	.word	0x40010400
 800ce24:	40014000 	.word	0x40014000
 800ce28:	40014400 	.word	0x40014400
 800ce2c:	40014800 	.word	0x40014800

0800ce30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	f003 0302 	and.w	r3, r3, #2
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d122      	bne.n	800ce8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	f003 0302 	and.w	r3, r3, #2
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d11b      	bne.n	800ce8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f06f 0202 	mvn.w	r2, #2
 800ce5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2201      	movs	r2, #1
 800ce62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	699b      	ldr	r3, [r3, #24]
 800ce6a:	f003 0303 	and.w	r3, r3, #3
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d003      	beq.n	800ce7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fb12 	bl	800d49c <HAL_TIM_IC_CaptureCallback>
 800ce78:	e005      	b.n	800ce86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fb04 	bl	800d488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 fb15 	bl	800d4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	691b      	ldr	r3, [r3, #16]
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	d122      	bne.n	800cee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b04      	cmp	r3, #4
 800cea6:	d11b      	bne.n	800cee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f06f 0204 	mvn.w	r2, #4
 800ceb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2202      	movs	r2, #2
 800ceb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fae8 	bl	800d49c <HAL_TIM_IC_CaptureCallback>
 800cecc:	e005      	b.n	800ceda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fada 	bl	800d488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 faeb 	bl	800d4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	f003 0308 	and.w	r3, r3, #8
 800ceea:	2b08      	cmp	r3, #8
 800ceec:	d122      	bne.n	800cf34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	f003 0308 	and.w	r3, r3, #8
 800cef8:	2b08      	cmp	r3, #8
 800cefa:	d11b      	bne.n	800cf34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f06f 0208 	mvn.w	r2, #8
 800cf04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2204      	movs	r2, #4
 800cf0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fabe 	bl	800d49c <HAL_TIM_IC_CaptureCallback>
 800cf20:	e005      	b.n	800cf2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fab0 	bl	800d488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fac1 	bl	800d4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	f003 0310 	and.w	r3, r3, #16
 800cf3e:	2b10      	cmp	r3, #16
 800cf40:	d122      	bne.n	800cf88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	f003 0310 	and.w	r3, r3, #16
 800cf4c:	2b10      	cmp	r3, #16
 800cf4e:	d11b      	bne.n	800cf88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f06f 0210 	mvn.w	r2, #16
 800cf58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2208      	movs	r2, #8
 800cf5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	69db      	ldr	r3, [r3, #28]
 800cf66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d003      	beq.n	800cf76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fa94 	bl	800d49c <HAL_TIM_IC_CaptureCallback>
 800cf74:	e005      	b.n	800cf82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa86 	bl	800d488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fa97 	bl	800d4b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d10e      	bne.n	800cfb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d107      	bne.n	800cfb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f06f 0201 	mvn.w	r2, #1
 800cfac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7f5 fb42 	bl	8002638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfbe:	2b80      	cmp	r3, #128	@ 0x80
 800cfc0:	d10e      	bne.n	800cfe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfcc:	2b80      	cmp	r3, #128	@ 0x80
 800cfce:	d107      	bne.n	800cfe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cfd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 ff48 	bl	800de70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfee:	d10e      	bne.n	800d00e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cffa:	2b80      	cmp	r3, #128	@ 0x80
 800cffc:	d107      	bne.n	800d00e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 ff3b 	bl	800de84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d018:	2b40      	cmp	r3, #64	@ 0x40
 800d01a:	d10e      	bne.n	800d03a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d026:	2b40      	cmp	r3, #64	@ 0x40
 800d028:	d107      	bne.n	800d03a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fa45 	bl	800d4c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	f003 0320 	and.w	r3, r3, #32
 800d044:	2b20      	cmp	r3, #32
 800d046:	d10e      	bne.n	800d066 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	f003 0320 	and.w	r3, r3, #32
 800d052:	2b20      	cmp	r3, #32
 800d054:	d107      	bne.n	800d066 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f06f 0220 	mvn.w	r2, #32
 800d05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 fefb 	bl	800de5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d066:	bf00      	nop
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
	...

0800d070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d086:	2b01      	cmp	r3, #1
 800d088:	d101      	bne.n	800d08e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d08a:	2302      	movs	r3, #2
 800d08c:	e0ff      	b.n	800d28e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2201      	movs	r2, #1
 800d092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b14      	cmp	r3, #20
 800d09a:	f200 80f0 	bhi.w	800d27e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d09e:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a4:	0800d0f9 	.word	0x0800d0f9
 800d0a8:	0800d27f 	.word	0x0800d27f
 800d0ac:	0800d27f 	.word	0x0800d27f
 800d0b0:	0800d27f 	.word	0x0800d27f
 800d0b4:	0800d139 	.word	0x0800d139
 800d0b8:	0800d27f 	.word	0x0800d27f
 800d0bc:	0800d27f 	.word	0x0800d27f
 800d0c0:	0800d27f 	.word	0x0800d27f
 800d0c4:	0800d17b 	.word	0x0800d17b
 800d0c8:	0800d27f 	.word	0x0800d27f
 800d0cc:	0800d27f 	.word	0x0800d27f
 800d0d0:	0800d27f 	.word	0x0800d27f
 800d0d4:	0800d1bb 	.word	0x0800d1bb
 800d0d8:	0800d27f 	.word	0x0800d27f
 800d0dc:	0800d27f 	.word	0x0800d27f
 800d0e0:	0800d27f 	.word	0x0800d27f
 800d0e4:	0800d1fd 	.word	0x0800d1fd
 800d0e8:	0800d27f 	.word	0x0800d27f
 800d0ec:	0800d27f 	.word	0x0800d27f
 800d0f0:	0800d27f 	.word	0x0800d27f
 800d0f4:	0800d23d 	.word	0x0800d23d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 fa84 	bl	800d60c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	699a      	ldr	r2, [r3, #24]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f042 0208 	orr.w	r2, r2, #8
 800d112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	699a      	ldr	r2, [r3, #24]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f022 0204 	bic.w	r2, r2, #4
 800d122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6999      	ldr	r1, [r3, #24]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	691a      	ldr	r2, [r3, #16]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	430a      	orrs	r2, r1
 800d134:	619a      	str	r2, [r3, #24]
      break;
 800d136:	e0a5      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68b9      	ldr	r1, [r7, #8]
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 faf4 	bl	800d72c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	699a      	ldr	r2, [r3, #24]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699a      	ldr	r2, [r3, #24]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	6999      	ldr	r1, [r3, #24]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	021a      	lsls	r2, r3, #8
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	430a      	orrs	r2, r1
 800d176:	619a      	str	r2, [r3, #24]
      break;
 800d178:	e084      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fb5d 	bl	800d840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	69da      	ldr	r2, [r3, #28]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f042 0208 	orr.w	r2, r2, #8
 800d194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	69da      	ldr	r2, [r3, #28]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f022 0204 	bic.w	r2, r2, #4
 800d1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	69d9      	ldr	r1, [r3, #28]
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	691a      	ldr	r2, [r3, #16]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	61da      	str	r2, [r3, #28]
      break;
 800d1b8:	e064      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68b9      	ldr	r1, [r7, #8]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 fbc5 	bl	800d950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	69da      	ldr	r2, [r3, #28]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	69da      	ldr	r2, [r3, #28]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	69d9      	ldr	r1, [r3, #28]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	021a      	lsls	r2, r3, #8
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	61da      	str	r2, [r3, #28]
      break;
 800d1fa:	e043      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	4618      	mov	r0, r3
 800d204:	f000 fc0e 	bl	800da24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f042 0208 	orr.w	r2, r2, #8
 800d216:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f022 0204 	bic.w	r2, r2, #4
 800d226:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	691a      	ldr	r2, [r3, #16]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	430a      	orrs	r2, r1
 800d238:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d23a:	e023      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68b9      	ldr	r1, [r7, #8]
 800d242:	4618      	mov	r0, r3
 800d244:	f000 fc52 	bl	800daec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d256:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d266:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	021a      	lsls	r2, r3, #8
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	430a      	orrs	r2, r1
 800d27a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d27c:	e002      	b.n	800d284 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	75fb      	strb	r3, [r7, #23]
      break;
 800d282:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop

0800d298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d101      	bne.n	800d2b4 <HAL_TIM_ConfigClockSource+0x1c>
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	e0dc      	b.n	800d46e <HAL_TIM_ConfigClockSource+0x1d6>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2202      	movs	r2, #2
 800d2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	4b6a      	ldr	r3, [pc, #424]	@ (800d478 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d2da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a64      	ldr	r2, [pc, #400]	@ (800d47c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	f000 80a9 	beq.w	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2f0:	4a62      	ldr	r2, [pc, #392]	@ (800d47c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	f200 80ae 	bhi.w	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2f8:	4a61      	ldr	r2, [pc, #388]	@ (800d480 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	f000 80a1 	beq.w	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d300:	4a5f      	ldr	r2, [pc, #380]	@ (800d480 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d302:	4293      	cmp	r3, r2
 800d304:	f200 80a6 	bhi.w	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d308:	4a5e      	ldr	r2, [pc, #376]	@ (800d484 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	f000 8099 	beq.w	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d310:	4a5c      	ldr	r2, [pc, #368]	@ (800d484 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d312:	4293      	cmp	r3, r2
 800d314:	f200 809e 	bhi.w	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d318:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d31c:	f000 8091 	beq.w	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d320:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d324:	f200 8096 	bhi.w	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d32c:	f000 8089 	beq.w	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d334:	f200 808e 	bhi.w	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d33c:	d03e      	beq.n	800d3bc <HAL_TIM_ConfigClockSource+0x124>
 800d33e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d342:	f200 8087 	bhi.w	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d34a:	f000 8086 	beq.w	800d45a <HAL_TIM_ConfigClockSource+0x1c2>
 800d34e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d352:	d87f      	bhi.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d354:	2b70      	cmp	r3, #112	@ 0x70
 800d356:	d01a      	beq.n	800d38e <HAL_TIM_ConfigClockSource+0xf6>
 800d358:	2b70      	cmp	r3, #112	@ 0x70
 800d35a:	d87b      	bhi.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d35c:	2b60      	cmp	r3, #96	@ 0x60
 800d35e:	d050      	beq.n	800d402 <HAL_TIM_ConfigClockSource+0x16a>
 800d360:	2b60      	cmp	r3, #96	@ 0x60
 800d362:	d877      	bhi.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d364:	2b50      	cmp	r3, #80	@ 0x50
 800d366:	d03c      	beq.n	800d3e2 <HAL_TIM_ConfigClockSource+0x14a>
 800d368:	2b50      	cmp	r3, #80	@ 0x50
 800d36a:	d873      	bhi.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d36c:	2b40      	cmp	r3, #64	@ 0x40
 800d36e:	d058      	beq.n	800d422 <HAL_TIM_ConfigClockSource+0x18a>
 800d370:	2b40      	cmp	r3, #64	@ 0x40
 800d372:	d86f      	bhi.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d374:	2b30      	cmp	r3, #48	@ 0x30
 800d376:	d064      	beq.n	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d378:	2b30      	cmp	r3, #48	@ 0x30
 800d37a:	d86b      	bhi.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d37c:	2b20      	cmp	r3, #32
 800d37e:	d060      	beq.n	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d380:	2b20      	cmp	r3, #32
 800d382:	d867      	bhi.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
 800d384:	2b00      	cmp	r3, #0
 800d386:	d05c      	beq.n	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d388:	2b10      	cmp	r3, #16
 800d38a:	d05a      	beq.n	800d442 <HAL_TIM_ConfigClockSource+0x1aa>
 800d38c:	e062      	b.n	800d454 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d39e:	f000 fc89 	bl	800dcb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d3b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	609a      	str	r2, [r3, #8]
      break;
 800d3ba:	e04f      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3cc:	f000 fc72 	bl	800dcb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	689a      	ldr	r2, [r3, #8]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d3de:	609a      	str	r2, [r3, #8]
      break;
 800d3e0:	e03c      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	f000 fbe2 	bl	800dbb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2150      	movs	r1, #80	@ 0x50
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 fc3c 	bl	800dc78 <TIM_ITRx_SetConfig>
      break;
 800d400:	e02c      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d40e:	461a      	mov	r2, r3
 800d410:	f000 fc01 	bl	800dc16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2160      	movs	r1, #96	@ 0x60
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 fc2c 	bl	800dc78 <TIM_ITRx_SetConfig>
      break;
 800d420:	e01c      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d42e:	461a      	mov	r2, r3
 800d430:	f000 fbc2 	bl	800dbb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2140      	movs	r1, #64	@ 0x40
 800d43a:	4618      	mov	r0, r3
 800d43c:	f000 fc1c 	bl	800dc78 <TIM_ITRx_SetConfig>
      break;
 800d440:	e00c      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4619      	mov	r1, r3
 800d44c:	4610      	mov	r0, r2
 800d44e:	f000 fc13 	bl	800dc78 <TIM_ITRx_SetConfig>
      break;
 800d452:	e003      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d454:	2301      	movs	r3, #1
 800d456:	73fb      	strb	r3, [r7, #15]
      break;
 800d458:	e000      	b.n	800d45c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d45a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	ffceff88 	.word	0xffceff88
 800d47c:	00100040 	.word	0x00100040
 800d480:	00100030 	.word	0x00100030
 800d484:	00100020 	.word	0x00100020

0800d488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a40      	ldr	r2, [pc, #256]	@ (800d5ec <TIM_Base_SetConfig+0x114>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d013      	beq.n	800d518 <TIM_Base_SetConfig+0x40>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4f6:	d00f      	beq.n	800d518 <TIM_Base_SetConfig+0x40>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a3d      	ldr	r2, [pc, #244]	@ (800d5f0 <TIM_Base_SetConfig+0x118>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d00b      	beq.n	800d518 <TIM_Base_SetConfig+0x40>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a3c      	ldr	r2, [pc, #240]	@ (800d5f4 <TIM_Base_SetConfig+0x11c>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d007      	beq.n	800d518 <TIM_Base_SetConfig+0x40>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a3b      	ldr	r2, [pc, #236]	@ (800d5f8 <TIM_Base_SetConfig+0x120>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d003      	beq.n	800d518 <TIM_Base_SetConfig+0x40>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	4a3a      	ldr	r2, [pc, #232]	@ (800d5fc <TIM_Base_SetConfig+0x124>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d108      	bne.n	800d52a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d51e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4313      	orrs	r3, r2
 800d528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a2f      	ldr	r2, [pc, #188]	@ (800d5ec <TIM_Base_SetConfig+0x114>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d01f      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d538:	d01b      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a2c      	ldr	r2, [pc, #176]	@ (800d5f0 <TIM_Base_SetConfig+0x118>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d017      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a2b      	ldr	r2, [pc, #172]	@ (800d5f4 <TIM_Base_SetConfig+0x11c>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d013      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a2a      	ldr	r2, [pc, #168]	@ (800d5f8 <TIM_Base_SetConfig+0x120>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d00f      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a29      	ldr	r2, [pc, #164]	@ (800d5fc <TIM_Base_SetConfig+0x124>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d00b      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a28      	ldr	r2, [pc, #160]	@ (800d600 <TIM_Base_SetConfig+0x128>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d007      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a27      	ldr	r2, [pc, #156]	@ (800d604 <TIM_Base_SetConfig+0x12c>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d003      	beq.n	800d572 <TIM_Base_SetConfig+0x9a>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a26      	ldr	r2, [pc, #152]	@ (800d608 <TIM_Base_SetConfig+0x130>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d108      	bne.n	800d584 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	4313      	orrs	r3, r2
 800d582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	695b      	ldr	r3, [r3, #20]
 800d58e:	4313      	orrs	r3, r2
 800d590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	689a      	ldr	r2, [r3, #8]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a10      	ldr	r2, [pc, #64]	@ (800d5ec <TIM_Base_SetConfig+0x114>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d00f      	beq.n	800d5d0 <TIM_Base_SetConfig+0xf8>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a12      	ldr	r2, [pc, #72]	@ (800d5fc <TIM_Base_SetConfig+0x124>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d00b      	beq.n	800d5d0 <TIM_Base_SetConfig+0xf8>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a11      	ldr	r2, [pc, #68]	@ (800d600 <TIM_Base_SetConfig+0x128>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d007      	beq.n	800d5d0 <TIM_Base_SetConfig+0xf8>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a10      	ldr	r2, [pc, #64]	@ (800d604 <TIM_Base_SetConfig+0x12c>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d003      	beq.n	800d5d0 <TIM_Base_SetConfig+0xf8>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a0f      	ldr	r2, [pc, #60]	@ (800d608 <TIM_Base_SetConfig+0x130>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d103      	bne.n	800d5d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	691a      	ldr	r2, [r3, #16]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	615a      	str	r2, [r3, #20]
}
 800d5de:	bf00      	nop
 800d5e0:	3714      	adds	r7, #20
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	40010000 	.word	0x40010000
 800d5f0:	40000400 	.word	0x40000400
 800d5f4:	40000800 	.word	0x40000800
 800d5f8:	40000c00 	.word	0x40000c00
 800d5fc:	40010400 	.word	0x40010400
 800d600:	40014000 	.word	0x40014000
 800d604:	40014400 	.word	0x40014400
 800d608:	40014800 	.word	0x40014800

0800d60c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	f023 0201 	bic.w	r2, r3, #1
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	699b      	ldr	r3, [r3, #24]
 800d632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	4b37      	ldr	r3, [pc, #220]	@ (800d714 <TIM_OC1_SetConfig+0x108>)
 800d638:	4013      	ands	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f023 0303 	bic.w	r3, r3, #3
 800d642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	f023 0302 	bic.w	r3, r3, #2
 800d654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	697a      	ldr	r2, [r7, #20]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a2d      	ldr	r2, [pc, #180]	@ (800d718 <TIM_OC1_SetConfig+0x10c>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00f      	beq.n	800d688 <TIM_OC1_SetConfig+0x7c>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a2c      	ldr	r2, [pc, #176]	@ (800d71c <TIM_OC1_SetConfig+0x110>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d00b      	beq.n	800d688 <TIM_OC1_SetConfig+0x7c>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a2b      	ldr	r2, [pc, #172]	@ (800d720 <TIM_OC1_SetConfig+0x114>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d007      	beq.n	800d688 <TIM_OC1_SetConfig+0x7c>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a2a      	ldr	r2, [pc, #168]	@ (800d724 <TIM_OC1_SetConfig+0x118>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d003      	beq.n	800d688 <TIM_OC1_SetConfig+0x7c>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a29      	ldr	r2, [pc, #164]	@ (800d728 <TIM_OC1_SetConfig+0x11c>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d10c      	bne.n	800d6a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	f023 0308 	bic.w	r3, r3, #8
 800d68e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	697a      	ldr	r2, [r7, #20]
 800d696:	4313      	orrs	r3, r2
 800d698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f023 0304 	bic.w	r3, r3, #4
 800d6a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d718 <TIM_OC1_SetConfig+0x10c>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d00f      	beq.n	800d6ca <TIM_OC1_SetConfig+0xbe>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d71c <TIM_OC1_SetConfig+0x110>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d00b      	beq.n	800d6ca <TIM_OC1_SetConfig+0xbe>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d720 <TIM_OC1_SetConfig+0x114>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d007      	beq.n	800d6ca <TIM_OC1_SetConfig+0xbe>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a19      	ldr	r2, [pc, #100]	@ (800d724 <TIM_OC1_SetConfig+0x118>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d003      	beq.n	800d6ca <TIM_OC1_SetConfig+0xbe>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a18      	ldr	r2, [pc, #96]	@ (800d728 <TIM_OC1_SetConfig+0x11c>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d111      	bne.n	800d6ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	695b      	ldr	r3, [r3, #20]
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	699b      	ldr	r3, [r3, #24]
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	697a      	ldr	r2, [r7, #20]
 800d706:	621a      	str	r2, [r3, #32]
}
 800d708:	bf00      	nop
 800d70a:	371c      	adds	r7, #28
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	fffeff8f 	.word	0xfffeff8f
 800d718:	40010000 	.word	0x40010000
 800d71c:	40010400 	.word	0x40010400
 800d720:	40014000 	.word	0x40014000
 800d724:	40014400 	.word	0x40014400
 800d728:	40014800 	.word	0x40014800

0800d72c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b087      	sub	sp, #28
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	f023 0210 	bic.w	r2, r3, #16
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	4b34      	ldr	r3, [pc, #208]	@ (800d828 <TIM_OC2_SetConfig+0xfc>)
 800d758:	4013      	ands	r3, r2
 800d75a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	021b      	lsls	r3, r3, #8
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f023 0320 	bic.w	r3, r3, #32
 800d776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	011b      	lsls	r3, r3, #4
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	4313      	orrs	r3, r2
 800d782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4a29      	ldr	r2, [pc, #164]	@ (800d82c <TIM_OC2_SetConfig+0x100>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d003      	beq.n	800d794 <TIM_OC2_SetConfig+0x68>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a28      	ldr	r2, [pc, #160]	@ (800d830 <TIM_OC2_SetConfig+0x104>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d10d      	bne.n	800d7b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4a1e      	ldr	r2, [pc, #120]	@ (800d82c <TIM_OC2_SetConfig+0x100>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d00f      	beq.n	800d7d8 <TIM_OC2_SetConfig+0xac>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a1d      	ldr	r2, [pc, #116]	@ (800d830 <TIM_OC2_SetConfig+0x104>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d00b      	beq.n	800d7d8 <TIM_OC2_SetConfig+0xac>
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d834 <TIM_OC2_SetConfig+0x108>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d007      	beq.n	800d7d8 <TIM_OC2_SetConfig+0xac>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d838 <TIM_OC2_SetConfig+0x10c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d003      	beq.n	800d7d8 <TIM_OC2_SetConfig+0xac>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a1a      	ldr	r2, [pc, #104]	@ (800d83c <TIM_OC2_SetConfig+0x110>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d113      	bne.n	800d800 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d7de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d7e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	695b      	ldr	r3, [r3, #20]
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	699b      	ldr	r3, [r3, #24]
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	621a      	str	r2, [r3, #32]
}
 800d81a:	bf00      	nop
 800d81c:	371c      	adds	r7, #28
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	feff8fff 	.word	0xfeff8fff
 800d82c:	40010000 	.word	0x40010000
 800d830:	40010400 	.word	0x40010400
 800d834:	40014000 	.word	0x40014000
 800d838:	40014400 	.word	0x40014400
 800d83c:	40014800 	.word	0x40014800

0800d840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d840:	b480      	push	{r7}
 800d842:	b087      	sub	sp, #28
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a1b      	ldr	r3, [r3, #32]
 800d84e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6a1b      	ldr	r3, [r3, #32]
 800d85a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	4b33      	ldr	r3, [pc, #204]	@ (800d938 <TIM_OC3_SetConfig+0xf8>)
 800d86c:	4013      	ands	r3, r2
 800d86e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 0303 	bic.w	r3, r3, #3
 800d876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	4313      	orrs	r3, r2
 800d880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	021b      	lsls	r3, r3, #8
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	4313      	orrs	r3, r2
 800d894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4a28      	ldr	r2, [pc, #160]	@ (800d93c <TIM_OC3_SetConfig+0xfc>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d003      	beq.n	800d8a6 <TIM_OC3_SetConfig+0x66>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a27      	ldr	r2, [pc, #156]	@ (800d940 <TIM_OC3_SetConfig+0x100>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d10d      	bne.n	800d8c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d8ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	021b      	lsls	r3, r3, #8
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d8c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a1d      	ldr	r2, [pc, #116]	@ (800d93c <TIM_OC3_SetConfig+0xfc>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d00f      	beq.n	800d8ea <TIM_OC3_SetConfig+0xaa>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a1c      	ldr	r2, [pc, #112]	@ (800d940 <TIM_OC3_SetConfig+0x100>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d00b      	beq.n	800d8ea <TIM_OC3_SetConfig+0xaa>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a1b      	ldr	r2, [pc, #108]	@ (800d944 <TIM_OC3_SetConfig+0x104>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d007      	beq.n	800d8ea <TIM_OC3_SetConfig+0xaa>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a1a      	ldr	r2, [pc, #104]	@ (800d948 <TIM_OC3_SetConfig+0x108>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d003      	beq.n	800d8ea <TIM_OC3_SetConfig+0xaa>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4a19      	ldr	r2, [pc, #100]	@ (800d94c <TIM_OC3_SetConfig+0x10c>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d113      	bne.n	800d912 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d8f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	695b      	ldr	r3, [r3, #20]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	4313      	orrs	r3, r2
 800d904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	011b      	lsls	r3, r3, #4
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	4313      	orrs	r3, r2
 800d910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	697a      	ldr	r2, [r7, #20]
 800d92a:	621a      	str	r2, [r3, #32]
}
 800d92c:	bf00      	nop
 800d92e:	371c      	adds	r7, #28
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr
 800d938:	fffeff8f 	.word	0xfffeff8f
 800d93c:	40010000 	.word	0x40010000
 800d940:	40010400 	.word	0x40010400
 800d944:	40014000 	.word	0x40014000
 800d948:	40014400 	.word	0x40014400
 800d94c:	40014800 	.word	0x40014800

0800d950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	69db      	ldr	r3, [r3, #28]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	4b24      	ldr	r3, [pc, #144]	@ (800da0c <TIM_OC4_SetConfig+0xbc>)
 800d97c:	4013      	ands	r3, r2
 800d97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	021b      	lsls	r3, r3, #8
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	4313      	orrs	r3, r2
 800d992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d99a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	031b      	lsls	r3, r3, #12
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a19      	ldr	r2, [pc, #100]	@ (800da10 <TIM_OC4_SetConfig+0xc0>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00f      	beq.n	800d9d0 <TIM_OC4_SetConfig+0x80>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a18      	ldr	r2, [pc, #96]	@ (800da14 <TIM_OC4_SetConfig+0xc4>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00b      	beq.n	800d9d0 <TIM_OC4_SetConfig+0x80>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a17      	ldr	r2, [pc, #92]	@ (800da18 <TIM_OC4_SetConfig+0xc8>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d007      	beq.n	800d9d0 <TIM_OC4_SetConfig+0x80>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a16      	ldr	r2, [pc, #88]	@ (800da1c <TIM_OC4_SetConfig+0xcc>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d003      	beq.n	800d9d0 <TIM_OC4_SetConfig+0x80>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a15      	ldr	r2, [pc, #84]	@ (800da20 <TIM_OC4_SetConfig+0xd0>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d109      	bne.n	800d9e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	019b      	lsls	r3, r3, #6
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	685a      	ldr	r2, [r3, #4]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	621a      	str	r2, [r3, #32]
}
 800d9fe:	bf00      	nop
 800da00:	371c      	adds	r7, #28
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	feff8fff 	.word	0xfeff8fff
 800da10:	40010000 	.word	0x40010000
 800da14:	40010400 	.word	0x40010400
 800da18:	40014000 	.word	0x40014000
 800da1c:	40014400 	.word	0x40014400
 800da20:	40014800 	.word	0x40014800

0800da24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a1b      	ldr	r3, [r3, #32]
 800da32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	4b21      	ldr	r3, [pc, #132]	@ (800dad4 <TIM_OC5_SetConfig+0xb0>)
 800da50:	4013      	ands	r3, r2
 800da52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800da64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	041b      	lsls	r3, r3, #16
 800da6c:	693a      	ldr	r2, [r7, #16]
 800da6e:	4313      	orrs	r3, r2
 800da70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a18      	ldr	r2, [pc, #96]	@ (800dad8 <TIM_OC5_SetConfig+0xb4>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d00f      	beq.n	800da9a <TIM_OC5_SetConfig+0x76>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a17      	ldr	r2, [pc, #92]	@ (800dadc <TIM_OC5_SetConfig+0xb8>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d00b      	beq.n	800da9a <TIM_OC5_SetConfig+0x76>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a16      	ldr	r2, [pc, #88]	@ (800dae0 <TIM_OC5_SetConfig+0xbc>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d007      	beq.n	800da9a <TIM_OC5_SetConfig+0x76>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a15      	ldr	r2, [pc, #84]	@ (800dae4 <TIM_OC5_SetConfig+0xc0>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d003      	beq.n	800da9a <TIM_OC5_SetConfig+0x76>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a14      	ldr	r2, [pc, #80]	@ (800dae8 <TIM_OC5_SetConfig+0xc4>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d109      	bne.n	800daae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800daa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	021b      	lsls	r3, r3, #8
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	4313      	orrs	r3, r2
 800daac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	693a      	ldr	r2, [r7, #16]
 800dac6:	621a      	str	r2, [r3, #32]
}
 800dac8:	bf00      	nop
 800daca:	371c      	adds	r7, #28
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	fffeff8f 	.word	0xfffeff8f
 800dad8:	40010000 	.word	0x40010000
 800dadc:	40010400 	.word	0x40010400
 800dae0:	40014000 	.word	0x40014000
 800dae4:	40014400 	.word	0x40014400
 800dae8:	40014800 	.word	0x40014800

0800daec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800daec:	b480      	push	{r7}
 800daee:	b087      	sub	sp, #28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a1b      	ldr	r3, [r3, #32]
 800db06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	4b22      	ldr	r3, [pc, #136]	@ (800dba0 <TIM_OC6_SetConfig+0xb4>)
 800db18:	4013      	ands	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	021b      	lsls	r3, r3, #8
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	4313      	orrs	r3, r2
 800db26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800db2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	051b      	lsls	r3, r3, #20
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	4313      	orrs	r3, r2
 800db3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a19      	ldr	r2, [pc, #100]	@ (800dba4 <TIM_OC6_SetConfig+0xb8>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d00f      	beq.n	800db64 <TIM_OC6_SetConfig+0x78>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a18      	ldr	r2, [pc, #96]	@ (800dba8 <TIM_OC6_SetConfig+0xbc>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d00b      	beq.n	800db64 <TIM_OC6_SetConfig+0x78>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a17      	ldr	r2, [pc, #92]	@ (800dbac <TIM_OC6_SetConfig+0xc0>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d007      	beq.n	800db64 <TIM_OC6_SetConfig+0x78>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	4a16      	ldr	r2, [pc, #88]	@ (800dbb0 <TIM_OC6_SetConfig+0xc4>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d003      	beq.n	800db64 <TIM_OC6_SetConfig+0x78>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a15      	ldr	r2, [pc, #84]	@ (800dbb4 <TIM_OC6_SetConfig+0xc8>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d109      	bne.n	800db78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	029b      	lsls	r3, r3, #10
 800db72:	697a      	ldr	r2, [r7, #20]
 800db74:	4313      	orrs	r3, r2
 800db76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	693a      	ldr	r2, [r7, #16]
 800db90:	621a      	str	r2, [r3, #32]
}
 800db92:	bf00      	nop
 800db94:	371c      	adds	r7, #28
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	feff8fff 	.word	0xfeff8fff
 800dba4:	40010000 	.word	0x40010000
 800dba8:	40010400 	.word	0x40010400
 800dbac:	40014000 	.word	0x40014000
 800dbb0:	40014400 	.word	0x40014400
 800dbb4:	40014800 	.word	0x40014800

0800dbb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b087      	sub	sp, #28
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6a1b      	ldr	r3, [r3, #32]
 800dbc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	f023 0201 	bic.w	r2, r3, #1
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dbe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	f023 030a 	bic.w	r3, r3, #10
 800dbf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	621a      	str	r2, [r3, #32]
}
 800dc0a:	bf00      	nop
 800dc0c:	371c      	adds	r7, #28
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc16:	b480      	push	{r7}
 800dc18:	b087      	sub	sp, #28
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	60f8      	str	r0, [r7, #12]
 800dc1e:	60b9      	str	r1, [r7, #8]
 800dc20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	f023 0210 	bic.w	r2, r3, #16
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6a1b      	ldr	r3, [r3, #32]
 800dc38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dc40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	031b      	lsls	r3, r3, #12
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dc52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	011b      	lsls	r3, r3, #4
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	621a      	str	r2, [r3, #32]
}
 800dc6a:	bf00      	nop
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
	...

0800dc78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	4b09      	ldr	r3, [pc, #36]	@ (800dcb0 <TIM_ITRx_SetConfig+0x38>)
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	f043 0307 	orr.w	r3, r3, #7
 800dc9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	609a      	str	r2, [r3, #8]
}
 800dca2:	bf00      	nop
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	ffcfff8f 	.word	0xffcfff8f

0800dcb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b087      	sub	sp, #28
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dcce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	021a      	lsls	r2, r3, #8
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	431a      	orrs	r2, r3
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	4313      	orrs	r3, r2
 800dcdc:	697a      	ldr	r2, [r7, #20]
 800dcde:	4313      	orrs	r3, r2
 800dce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	609a      	str	r2, [r3, #8]
}
 800dce8:	bf00      	nop
 800dcea:	371c      	adds	r7, #28
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b087      	sub	sp, #28
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	f003 031f 	and.w	r3, r3, #31
 800dd06:	2201      	movs	r2, #1
 800dd08:	fa02 f303 	lsl.w	r3, r2, r3
 800dd0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6a1a      	ldr	r2, [r3, #32]
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	43db      	mvns	r3, r3
 800dd16:	401a      	ands	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6a1a      	ldr	r2, [r3, #32]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	f003 031f 	and.w	r3, r3, #31
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	fa01 f303 	lsl.w	r3, r1, r3
 800dd2c:	431a      	orrs	r2, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	621a      	str	r2, [r3, #32]
}
 800dd32:	bf00      	nop
 800dd34:	371c      	adds	r7, #28
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
	...

0800dd40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d101      	bne.n	800dd58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd54:	2302      	movs	r3, #2
 800dd56:	e06d      	b.n	800de34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2202      	movs	r2, #2
 800dd64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a30      	ldr	r2, [pc, #192]	@ (800de40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d004      	beq.n	800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a2f      	ldr	r2, [pc, #188]	@ (800de44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d108      	bne.n	800dd9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dd92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dda4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	4313      	orrs	r3, r2
 800ddae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a20      	ldr	r2, [pc, #128]	@ (800de40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d022      	beq.n	800de08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddca:	d01d      	beq.n	800de08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4a1d      	ldr	r2, [pc, #116]	@ (800de48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	d018      	beq.n	800de08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a1c      	ldr	r2, [pc, #112]	@ (800de4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d013      	beq.n	800de08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a1a      	ldr	r2, [pc, #104]	@ (800de50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d00e      	beq.n	800de08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a15      	ldr	r2, [pc, #84]	@ (800de44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d009      	beq.n	800de08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a16      	ldr	r2, [pc, #88]	@ (800de54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d004      	beq.n	800de08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a15      	ldr	r2, [pc, #84]	@ (800de58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d10c      	bne.n	800de22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	4313      	orrs	r3, r2
 800de18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2201      	movs	r2, #1
 800de26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800de32:	2300      	movs	r3, #0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr
 800de40:	40010000 	.word	0x40010000
 800de44:	40010400 	.word	0x40010400
 800de48:	40000400 	.word	0x40000400
 800de4c:	40000800 	.word	0x40000800
 800de50:	40000c00 	.word	0x40000c00
 800de54:	40001800 	.word	0x40001800
 800de58:	40014000 	.word	0x40014000

0800de5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e042      	b.n	800df30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d106      	bne.n	800dec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7f5 f877 	bl	8002fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2224      	movs	r2, #36	@ 0x24
 800dec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f022 0201 	bic.w	r2, r2, #1
 800ded8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fce0 	bl	800e8a0 <UART_SetConfig>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d101      	bne.n	800deea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e022      	b.n	800df30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f001 fa3c 	bl	800f370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685a      	ldr	r2, [r3, #4]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800df06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	689a      	ldr	r2, [r3, #8]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800df16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f042 0201 	orr.w	r2, r2, #1
 800df26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f001 fac3 	bl	800f4b4 <UART_CheckIdleState>
 800df2e:	4603      	mov	r3, r0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08a      	sub	sp, #40	@ 0x28
 800df3c:	af02      	add	r7, sp, #8
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	603b      	str	r3, [r7, #0]
 800df44:	4613      	mov	r3, r2
 800df46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df4e:	2b20      	cmp	r3, #32
 800df50:	d17b      	bne.n	800e04a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <HAL_UART_Transmit+0x26>
 800df58:	88fb      	ldrh	r3, [r7, #6]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d101      	bne.n	800df62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	e074      	b.n	800e04c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2221      	movs	r2, #33	@ 0x21
 800df6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df72:	f7f5 f95f 	bl	8003234 <HAL_GetTick>
 800df76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	88fa      	ldrh	r2, [r7, #6]
 800df7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	88fa      	ldrh	r2, [r7, #6]
 800df84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df90:	d108      	bne.n	800dfa4 <HAL_UART_Transmit+0x6c>
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d104      	bne.n	800dfa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800df9a:	2300      	movs	r3, #0
 800df9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	61bb      	str	r3, [r7, #24]
 800dfa2:	e003      	b.n	800dfac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dfac:	e030      	b.n	800e010 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2180      	movs	r1, #128	@ 0x80
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f001 fb25 	bl	800f608 <UART_WaitOnFlagUntilTimeout>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d005      	beq.n	800dfd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2220      	movs	r2, #32
 800dfc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800dfcc:	2303      	movs	r3, #3
 800dfce:	e03d      	b.n	800e04c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10b      	bne.n	800dfee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	461a      	mov	r2, r3
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dfe4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	3302      	adds	r3, #2
 800dfea:	61bb      	str	r3, [r7, #24]
 800dfec:	e007      	b.n	800dffe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	781a      	ldrb	r2, [r3, #0]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	3301      	adds	r3, #1
 800dffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e004:	b29b      	uxth	r3, r3
 800e006:	3b01      	subs	r3, #1
 800e008:	b29a      	uxth	r2, r3
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e016:	b29b      	uxth	r3, r3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1c8      	bne.n	800dfae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	2200      	movs	r2, #0
 800e024:	2140      	movs	r1, #64	@ 0x40
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f001 faee 	bl	800f608 <UART_WaitOnFlagUntilTimeout>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d005      	beq.n	800e03e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2220      	movs	r2, #32
 800e036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e03a:	2303      	movs	r3, #3
 800e03c:	e006      	b.n	800e04c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2220      	movs	r2, #32
 800e042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e046:	2300      	movs	r3, #0
 800e048:	e000      	b.n	800e04c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e04a:	2302      	movs	r3, #2
  }
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3720      	adds	r7, #32
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08a      	sub	sp, #40	@ 0x28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	4613      	mov	r3, r2
 800e060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e068:	2b20      	cmp	r3, #32
 800e06a:	d137      	bne.n	800e0dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d002      	beq.n	800e078 <HAL_UART_Receive_IT+0x24>
 800e072:	88fb      	ldrh	r3, [r7, #6]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d101      	bne.n	800e07c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	e030      	b.n	800e0de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a18      	ldr	r2, [pc, #96]	@ (800e0e8 <HAL_UART_Receive_IT+0x94>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d01f      	beq.n	800e0cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e096:	2b00      	cmp	r3, #0
 800e098:	d018      	beq.n	800e0cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	e853 3f00 	ldrex	r3, [r3]
 800e0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e0ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b8:	623b      	str	r3, [r7, #32]
 800e0ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0bc:	69f9      	ldr	r1, [r7, #28]
 800e0be:	6a3a      	ldr	r2, [r7, #32]
 800e0c0:	e841 2300 	strex	r3, r2, [r1]
 800e0c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1e6      	bne.n	800e09a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e0cc:	88fb      	ldrh	r3, [r7, #6]
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	68b9      	ldr	r1, [r7, #8]
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f001 fb00 	bl	800f6d8 <UART_Start_Receive_IT>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	e000      	b.n	800e0de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e0dc:	2302      	movs	r3, #2
  }
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3728      	adds	r7, #40	@ 0x28
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	58000c00 	.word	0x58000c00

0800e0ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b0ba      	sub	sp, #232	@ 0xe8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e116:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e11a:	4013      	ands	r3, r2
 800e11c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e124:	2b00      	cmp	r3, #0
 800e126:	d11b      	bne.n	800e160 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e12c:	f003 0320 	and.w	r3, r3, #32
 800e130:	2b00      	cmp	r3, #0
 800e132:	d015      	beq.n	800e160 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e138:	f003 0320 	and.w	r3, r3, #32
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d105      	bne.n	800e14c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d009      	beq.n	800e160 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e150:	2b00      	cmp	r3, #0
 800e152:	f000 8377 	beq.w	800e844 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	4798      	blx	r3
      }
      return;
 800e15e:	e371      	b.n	800e844 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e164:	2b00      	cmp	r3, #0
 800e166:	f000 8123 	beq.w	800e3b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e16a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e16e:	4b8d      	ldr	r3, [pc, #564]	@ (800e3a4 <HAL_UART_IRQHandler+0x2b8>)
 800e170:	4013      	ands	r3, r2
 800e172:	2b00      	cmp	r3, #0
 800e174:	d106      	bne.n	800e184 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e17a:	4b8b      	ldr	r3, [pc, #556]	@ (800e3a8 <HAL_UART_IRQHandler+0x2bc>)
 800e17c:	4013      	ands	r3, r2
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 8116 	beq.w	800e3b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e188:	f003 0301 	and.w	r3, r3, #1
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d011      	beq.n	800e1b4 <HAL_UART_IRQHandler+0xc8>
 800e190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00b      	beq.n	800e1b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1aa:	f043 0201 	orr.w	r2, r3, #1
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1b8:	f003 0302 	and.w	r3, r3, #2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d011      	beq.n	800e1e4 <HAL_UART_IRQHandler+0xf8>
 800e1c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1c4:	f003 0301 	and.w	r3, r3, #1
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00b      	beq.n	800e1e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1da:	f043 0204 	orr.w	r2, r3, #4
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1e8:	f003 0304 	and.w	r3, r3, #4
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d011      	beq.n	800e214 <HAL_UART_IRQHandler+0x128>
 800e1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1f4:	f003 0301 	and.w	r3, r3, #1
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00b      	beq.n	800e214 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2204      	movs	r2, #4
 800e202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e20a:	f043 0202 	orr.w	r2, r3, #2
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e218:	f003 0308 	and.w	r3, r3, #8
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d017      	beq.n	800e250 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e224:	f003 0320 	and.w	r3, r3, #32
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d105      	bne.n	800e238 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e22c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e230:	4b5c      	ldr	r3, [pc, #368]	@ (800e3a4 <HAL_UART_IRQHandler+0x2b8>)
 800e232:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00b      	beq.n	800e250 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2208      	movs	r2, #8
 800e23e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e246:	f043 0208 	orr.w	r2, r3, #8
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d012      	beq.n	800e282 <HAL_UART_IRQHandler+0x196>
 800e25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00c      	beq.n	800e282 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e278:	f043 0220 	orr.w	r2, r3, #32
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 82dd 	beq.w	800e848 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e28e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e292:	f003 0320 	and.w	r3, r3, #32
 800e296:	2b00      	cmp	r3, #0
 800e298:	d013      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e29a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e29e:	f003 0320 	and.w	r3, r3, #32
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d105      	bne.n	800e2b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e2a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e2aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d007      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2d6:	2b40      	cmp	r3, #64	@ 0x40
 800e2d8:	d005      	beq.n	800e2e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e2da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e2de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d054      	beq.n	800e390 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f001 fb18 	bl	800f91c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2f6:	2b40      	cmp	r3, #64	@ 0x40
 800e2f8:	d146      	bne.n	800e388 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	3308      	adds	r3, #8
 800e300:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e304:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e308:	e853 3f00 	ldrex	r3, [r3]
 800e30c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	3308      	adds	r3, #8
 800e322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e326:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e32a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e336:	e841 2300 	strex	r3, r2, [r1]
 800e33a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e33e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1d9      	bne.n	800e2fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d017      	beq.n	800e380 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e356:	4a15      	ldr	r2, [pc, #84]	@ (800e3ac <HAL_UART_IRQHandler+0x2c0>)
 800e358:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e360:	4618      	mov	r0, r3
 800e362:	f7f8 fb8d 	bl	8006a80 <HAL_DMA_Abort_IT>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d019      	beq.n	800e3a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e37a:	4610      	mov	r0, r2
 800e37c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e37e:	e00f      	b.n	800e3a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fa77 	bl	800e874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e386:	e00b      	b.n	800e3a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 fa73 	bl	800e874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e38e:	e007      	b.n	800e3a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fa6f 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e39e:	e253      	b.n	800e848 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3a0:	bf00      	nop
    return;
 800e3a2:	e251      	b.n	800e848 <HAL_UART_IRQHandler+0x75c>
 800e3a4:	10000001 	.word	0x10000001
 800e3a8:	04000120 	.word	0x04000120
 800e3ac:	0800f9e9 	.word	0x0800f9e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	f040 81e7 	bne.w	800e788 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3be:	f003 0310 	and.w	r3, r3, #16
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f000 81e0 	beq.w	800e788 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3cc:	f003 0310 	and.w	r3, r3, #16
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 81d9 	beq.w	800e788 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2210      	movs	r2, #16
 800e3dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	689b      	ldr	r3, [r3, #8]
 800e3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3e8:	2b40      	cmp	r3, #64	@ 0x40
 800e3ea:	f040 8151 	bne.w	800e690 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a96      	ldr	r2, [pc, #600]	@ (800e650 <HAL_UART_IRQHandler+0x564>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d068      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a93      	ldr	r2, [pc, #588]	@ (800e654 <HAL_UART_IRQHandler+0x568>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d061      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4a91      	ldr	r2, [pc, #580]	@ (800e658 <HAL_UART_IRQHandler+0x56c>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d05a      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a8e      	ldr	r2, [pc, #568]	@ (800e65c <HAL_UART_IRQHandler+0x570>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d053      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4a8c      	ldr	r2, [pc, #560]	@ (800e660 <HAL_UART_IRQHandler+0x574>)
 800e430:	4293      	cmp	r3, r2
 800e432:	d04c      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a89      	ldr	r2, [pc, #548]	@ (800e664 <HAL_UART_IRQHandler+0x578>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d045      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a87      	ldr	r2, [pc, #540]	@ (800e668 <HAL_UART_IRQHandler+0x57c>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d03e      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a84      	ldr	r2, [pc, #528]	@ (800e66c <HAL_UART_IRQHandler+0x580>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d037      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a82      	ldr	r2, [pc, #520]	@ (800e670 <HAL_UART_IRQHandler+0x584>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d030      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4a7f      	ldr	r2, [pc, #508]	@ (800e674 <HAL_UART_IRQHandler+0x588>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d029      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a7d      	ldr	r2, [pc, #500]	@ (800e678 <HAL_UART_IRQHandler+0x58c>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d022      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a7a      	ldr	r2, [pc, #488]	@ (800e67c <HAL_UART_IRQHandler+0x590>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d01b      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4a78      	ldr	r2, [pc, #480]	@ (800e680 <HAL_UART_IRQHandler+0x594>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d014      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a75      	ldr	r2, [pc, #468]	@ (800e684 <HAL_UART_IRQHandler+0x598>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d00d      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a73      	ldr	r2, [pc, #460]	@ (800e688 <HAL_UART_IRQHandler+0x59c>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d006      	beq.n	800e4ce <HAL_UART_IRQHandler+0x3e2>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a70      	ldr	r2, [pc, #448]	@ (800e68c <HAL_UART_IRQHandler+0x5a0>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d106      	bne.n	800e4dc <HAL_UART_IRQHandler+0x3f0>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	e005      	b.n	800e4e8 <HAL_UART_IRQHandler+0x3fc>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	685b      	ldr	r3, [r3, #4]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e4ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 81ab 	beq.w	800e84c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e4fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e500:	429a      	cmp	r2, r3
 800e502:	f080 81a3 	bcs.w	800e84c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e50c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e516:	69db      	ldr	r3, [r3, #28]
 800e518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e51c:	f000 8087 	beq.w	800e62e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e53c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	461a      	mov	r2, r3
 800e546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e54a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e54e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e552:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e556:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e55a:	e841 2300 	strex	r3, r2, [r1]
 800e55e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1da      	bne.n	800e520 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	3308      	adds	r3, #8
 800e570:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e572:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e574:	e853 3f00 	ldrex	r3, [r3]
 800e578:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e57a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e57c:	f023 0301 	bic.w	r3, r3, #1
 800e580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3308      	adds	r3, #8
 800e58a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e58e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e592:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e594:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e596:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e59a:	e841 2300 	strex	r3, r2, [r1]
 800e59e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e5a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1e1      	bne.n	800e56a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e5b0:	e853 3f00 	ldrex	r3, [r3]
 800e5b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e5b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e5ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e5cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e5d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e5d2:	e841 2300 	strex	r3, r2, [r1]
 800e5d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e5d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1e3      	bne.n	800e5a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2220      	movs	r2, #32
 800e5e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5f4:	e853 3f00 	ldrex	r3, [r3]
 800e5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5fc:	f023 0310 	bic.w	r3, r3, #16
 800e600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	461a      	mov	r2, r3
 800e60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e60e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e610:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e612:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e614:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e616:	e841 2300 	strex	r3, r2, [r1]
 800e61a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e61c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1e4      	bne.n	800e5ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e628:	4618      	mov	r0, r3
 800e62a:	f7f7 ff0b 	bl	8006444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2202      	movs	r2, #2
 800e632:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e640:	b29b      	uxth	r3, r3
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	b29b      	uxth	r3, r3
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f91d 	bl	800e888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e64e:	e0fd      	b.n	800e84c <HAL_UART_IRQHandler+0x760>
 800e650:	40020010 	.word	0x40020010
 800e654:	40020028 	.word	0x40020028
 800e658:	40020040 	.word	0x40020040
 800e65c:	40020058 	.word	0x40020058
 800e660:	40020070 	.word	0x40020070
 800e664:	40020088 	.word	0x40020088
 800e668:	400200a0 	.word	0x400200a0
 800e66c:	400200b8 	.word	0x400200b8
 800e670:	40020410 	.word	0x40020410
 800e674:	40020428 	.word	0x40020428
 800e678:	40020440 	.word	0x40020440
 800e67c:	40020458 	.word	0x40020458
 800e680:	40020470 	.word	0x40020470
 800e684:	40020488 	.word	0x40020488
 800e688:	400204a0 	.word	0x400204a0
 800e68c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	1ad3      	subs	r3, r2, r3
 800e6a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f000 80cf 	beq.w	800e850 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e6b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 80ca 	beq.w	800e850 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c4:	e853 3f00 	ldrex	r3, [r3]
 800e6c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	461a      	mov	r2, r3
 800e6da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e6de:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6e6:	e841 2300 	strex	r3, r2, [r1]
 800e6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1e4      	bne.n	800e6bc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	3308      	adds	r3, #8
 800e6f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fc:	e853 3f00 	ldrex	r3, [r3]
 800e700:	623b      	str	r3, [r7, #32]
   return(result);
 800e702:	6a3a      	ldr	r2, [r7, #32]
 800e704:	4b55      	ldr	r3, [pc, #340]	@ (800e85c <HAL_UART_IRQHandler+0x770>)
 800e706:	4013      	ands	r3, r2
 800e708:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3308      	adds	r3, #8
 800e712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e716:	633a      	str	r2, [r7, #48]	@ 0x30
 800e718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e71c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e71e:	e841 2300 	strex	r3, r2, [r1]
 800e722:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1e3      	bne.n	800e6f2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2220      	movs	r2, #32
 800e72e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f023 0310 	bic.w	r3, r3, #16
 800e752:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e760:	61fb      	str	r3, [r7, #28]
 800e762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	69b9      	ldr	r1, [r7, #24]
 800e766:	69fa      	ldr	r2, [r7, #28]
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	617b      	str	r3, [r7, #20]
   return(result);
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e4      	bne.n	800e73e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2202      	movs	r2, #2
 800e778:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e77a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 f881 	bl	800e888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e786:	e063      	b.n	800e850 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e78c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00e      	beq.n	800e7b2 <HAL_UART_IRQHandler+0x6c6>
 800e794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d008      	beq.n	800e7b2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e7a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f001 fe7a 	bl	80104a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7b0:	e051      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d014      	beq.n	800e7e8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e7be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d105      	bne.n	800e7d6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e7ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d008      	beq.n	800e7e8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d03a      	beq.n	800e854 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	4798      	blx	r3
    }
    return;
 800e7e6:	e035      	b.n	800e854 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d009      	beq.n	800e808 <HAL_UART_IRQHandler+0x71c>
 800e7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d003      	beq.n	800e808 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f001 f907 	bl	800fa14 <UART_EndTransmit_IT>
    return;
 800e806:	e026      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e80c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d009      	beq.n	800e828 <HAL_UART_IRQHandler+0x73c>
 800e814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e818:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d003      	beq.n	800e828 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f001 fe53 	bl	80104cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e826:	e016      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e82c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d010      	beq.n	800e856 <HAL_UART_IRQHandler+0x76a>
 800e834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	da0c      	bge.n	800e856 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f001 fe3b 	bl	80104b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e842:	e008      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
      return;
 800e844:	bf00      	nop
 800e846:	e006      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
    return;
 800e848:	bf00      	nop
 800e84a:	e004      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
      return;
 800e84c:	bf00      	nop
 800e84e:	e002      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
      return;
 800e850:	bf00      	nop
 800e852:	e000      	b.n	800e856 <HAL_UART_IRQHandler+0x76a>
    return;
 800e854:	bf00      	nop
  }
}
 800e856:	37e8      	adds	r7, #232	@ 0xe8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	effffffe 	.word	0xeffffffe

0800e860 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e868:	bf00      	nop
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e894:	bf00      	nop
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8a4:	b092      	sub	sp, #72	@ 0x48
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	689a      	ldr	r2, [r3, #8]
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	431a      	orrs	r2, r3
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	695b      	ldr	r3, [r3, #20]
 800e8be:	431a      	orrs	r2, r3
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	69db      	ldr	r3, [r3, #28]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	4bbe      	ldr	r3, [pc, #760]	@ (800ebc8 <UART_SetConfig+0x328>)
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	6812      	ldr	r2, [r2, #0]
 800e8d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8d8:	430b      	orrs	r3, r1
 800e8da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	68da      	ldr	r2, [r3, #12]
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4ab3      	ldr	r2, [pc, #716]	@ (800ebcc <UART_SetConfig+0x32c>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d004      	beq.n	800e90c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e908:	4313      	orrs	r3, r2
 800e90a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	689a      	ldr	r2, [r3, #8]
 800e912:	4baf      	ldr	r3, [pc, #700]	@ (800ebd0 <UART_SetConfig+0x330>)
 800e914:	4013      	ands	r3, r2
 800e916:	697a      	ldr	r2, [r7, #20]
 800e918:	6812      	ldr	r2, [r2, #0]
 800e91a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e91c:	430b      	orrs	r3, r1
 800e91e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e926:	f023 010f 	bic.w	r1, r3, #15
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	430a      	orrs	r2, r1
 800e934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4aa6      	ldr	r2, [pc, #664]	@ (800ebd4 <UART_SetConfig+0x334>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d177      	bne.n	800ea30 <UART_SetConfig+0x190>
 800e940:	4ba5      	ldr	r3, [pc, #660]	@ (800ebd8 <UART_SetConfig+0x338>)
 800e942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e944:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e948:	2b28      	cmp	r3, #40	@ 0x28
 800e94a:	d86d      	bhi.n	800ea28 <UART_SetConfig+0x188>
 800e94c:	a201      	add	r2, pc, #4	@ (adr r2, 800e954 <UART_SetConfig+0xb4>)
 800e94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e952:	bf00      	nop
 800e954:	0800e9f9 	.word	0x0800e9f9
 800e958:	0800ea29 	.word	0x0800ea29
 800e95c:	0800ea29 	.word	0x0800ea29
 800e960:	0800ea29 	.word	0x0800ea29
 800e964:	0800ea29 	.word	0x0800ea29
 800e968:	0800ea29 	.word	0x0800ea29
 800e96c:	0800ea29 	.word	0x0800ea29
 800e970:	0800ea29 	.word	0x0800ea29
 800e974:	0800ea01 	.word	0x0800ea01
 800e978:	0800ea29 	.word	0x0800ea29
 800e97c:	0800ea29 	.word	0x0800ea29
 800e980:	0800ea29 	.word	0x0800ea29
 800e984:	0800ea29 	.word	0x0800ea29
 800e988:	0800ea29 	.word	0x0800ea29
 800e98c:	0800ea29 	.word	0x0800ea29
 800e990:	0800ea29 	.word	0x0800ea29
 800e994:	0800ea09 	.word	0x0800ea09
 800e998:	0800ea29 	.word	0x0800ea29
 800e99c:	0800ea29 	.word	0x0800ea29
 800e9a0:	0800ea29 	.word	0x0800ea29
 800e9a4:	0800ea29 	.word	0x0800ea29
 800e9a8:	0800ea29 	.word	0x0800ea29
 800e9ac:	0800ea29 	.word	0x0800ea29
 800e9b0:	0800ea29 	.word	0x0800ea29
 800e9b4:	0800ea11 	.word	0x0800ea11
 800e9b8:	0800ea29 	.word	0x0800ea29
 800e9bc:	0800ea29 	.word	0x0800ea29
 800e9c0:	0800ea29 	.word	0x0800ea29
 800e9c4:	0800ea29 	.word	0x0800ea29
 800e9c8:	0800ea29 	.word	0x0800ea29
 800e9cc:	0800ea29 	.word	0x0800ea29
 800e9d0:	0800ea29 	.word	0x0800ea29
 800e9d4:	0800ea19 	.word	0x0800ea19
 800e9d8:	0800ea29 	.word	0x0800ea29
 800e9dc:	0800ea29 	.word	0x0800ea29
 800e9e0:	0800ea29 	.word	0x0800ea29
 800e9e4:	0800ea29 	.word	0x0800ea29
 800e9e8:	0800ea29 	.word	0x0800ea29
 800e9ec:	0800ea29 	.word	0x0800ea29
 800e9f0:	0800ea29 	.word	0x0800ea29
 800e9f4:	0800ea21 	.word	0x0800ea21
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	e222      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea00:	2304      	movs	r3, #4
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea06:	e21e      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea0e:	e21a      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea10:	2310      	movs	r3, #16
 800ea12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea16:	e216      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea18:	2320      	movs	r3, #32
 800ea1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea1e:	e212      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea20:	2340      	movs	r3, #64	@ 0x40
 800ea22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea26:	e20e      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea28:	2380      	movs	r3, #128	@ 0x80
 800ea2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2e:	e20a      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a69      	ldr	r2, [pc, #420]	@ (800ebdc <UART_SetConfig+0x33c>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d130      	bne.n	800ea9c <UART_SetConfig+0x1fc>
 800ea3a:	4b67      	ldr	r3, [pc, #412]	@ (800ebd8 <UART_SetConfig+0x338>)
 800ea3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	2b05      	cmp	r3, #5
 800ea44:	d826      	bhi.n	800ea94 <UART_SetConfig+0x1f4>
 800ea46:	a201      	add	r2, pc, #4	@ (adr r2, 800ea4c <UART_SetConfig+0x1ac>)
 800ea48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4c:	0800ea65 	.word	0x0800ea65
 800ea50:	0800ea6d 	.word	0x0800ea6d
 800ea54:	0800ea75 	.word	0x0800ea75
 800ea58:	0800ea7d 	.word	0x0800ea7d
 800ea5c:	0800ea85 	.word	0x0800ea85
 800ea60:	0800ea8d 	.word	0x0800ea8d
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6a:	e1ec      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea6c:	2304      	movs	r3, #4
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea72:	e1e8      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea74:	2308      	movs	r3, #8
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea7a:	e1e4      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea7c:	2310      	movs	r3, #16
 800ea7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea82:	e1e0      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea84:	2320      	movs	r3, #32
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8a:	e1dc      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea8c:	2340      	movs	r3, #64	@ 0x40
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea92:	e1d8      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea94:	2380      	movs	r3, #128	@ 0x80
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea9a:	e1d4      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a4f      	ldr	r2, [pc, #316]	@ (800ebe0 <UART_SetConfig+0x340>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d130      	bne.n	800eb08 <UART_SetConfig+0x268>
 800eaa6:	4b4c      	ldr	r3, [pc, #304]	@ (800ebd8 <UART_SetConfig+0x338>)
 800eaa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaaa:	f003 0307 	and.w	r3, r3, #7
 800eaae:	2b05      	cmp	r3, #5
 800eab0:	d826      	bhi.n	800eb00 <UART_SetConfig+0x260>
 800eab2:	a201      	add	r2, pc, #4	@ (adr r2, 800eab8 <UART_SetConfig+0x218>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800ead1 	.word	0x0800ead1
 800eabc:	0800ead9 	.word	0x0800ead9
 800eac0:	0800eae1 	.word	0x0800eae1
 800eac4:	0800eae9 	.word	0x0800eae9
 800eac8:	0800eaf1 	.word	0x0800eaf1
 800eacc:	0800eaf9 	.word	0x0800eaf9
 800ead0:	2300      	movs	r3, #0
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead6:	e1b6      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ead8:	2304      	movs	r3, #4
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eade:	e1b2      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eae0:	2308      	movs	r3, #8
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eae6:	e1ae      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eae8:	2310      	movs	r3, #16
 800eaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaee:	e1aa      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eaf0:	2320      	movs	r3, #32
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaf6:	e1a6      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eaf8:	2340      	movs	r3, #64	@ 0x40
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafe:	e1a2      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb00:	2380      	movs	r3, #128	@ 0x80
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb06:	e19e      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a35      	ldr	r2, [pc, #212]	@ (800ebe4 <UART_SetConfig+0x344>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d130      	bne.n	800eb74 <UART_SetConfig+0x2d4>
 800eb12:	4b31      	ldr	r3, [pc, #196]	@ (800ebd8 <UART_SetConfig+0x338>)
 800eb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb16:	f003 0307 	and.w	r3, r3, #7
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	d826      	bhi.n	800eb6c <UART_SetConfig+0x2cc>
 800eb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb24 <UART_SetConfig+0x284>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800eb3d 	.word	0x0800eb3d
 800eb28:	0800eb45 	.word	0x0800eb45
 800eb2c:	0800eb4d 	.word	0x0800eb4d
 800eb30:	0800eb55 	.word	0x0800eb55
 800eb34:	0800eb5d 	.word	0x0800eb5d
 800eb38:	0800eb65 	.word	0x0800eb65
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb42:	e180      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb44:	2304      	movs	r3, #4
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	e17c      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb4c:	2308      	movs	r3, #8
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb52:	e178      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb54:	2310      	movs	r3, #16
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5a:	e174      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb5c:	2320      	movs	r3, #32
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb62:	e170      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb64:	2340      	movs	r3, #64	@ 0x40
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb6a:	e16c      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb6c:	2380      	movs	r3, #128	@ 0x80
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb72:	e168      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe8 <UART_SetConfig+0x348>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d142      	bne.n	800ec04 <UART_SetConfig+0x364>
 800eb7e:	4b16      	ldr	r3, [pc, #88]	@ (800ebd8 <UART_SetConfig+0x338>)
 800eb80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb82:	f003 0307 	and.w	r3, r3, #7
 800eb86:	2b05      	cmp	r3, #5
 800eb88:	d838      	bhi.n	800ebfc <UART_SetConfig+0x35c>
 800eb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb90 <UART_SetConfig+0x2f0>)
 800eb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb90:	0800eba9 	.word	0x0800eba9
 800eb94:	0800ebb1 	.word	0x0800ebb1
 800eb98:	0800ebb9 	.word	0x0800ebb9
 800eb9c:	0800ebc1 	.word	0x0800ebc1
 800eba0:	0800ebed 	.word	0x0800ebed
 800eba4:	0800ebf5 	.word	0x0800ebf5
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebae:	e14a      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ebb0:	2304      	movs	r3, #4
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb6:	e146      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ebb8:	2308      	movs	r3, #8
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebbe:	e142      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ebc0:	2310      	movs	r3, #16
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebc6:	e13e      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ebc8:	cfff69f3 	.word	0xcfff69f3
 800ebcc:	58000c00 	.word	0x58000c00
 800ebd0:	11fff4ff 	.word	0x11fff4ff
 800ebd4:	40011000 	.word	0x40011000
 800ebd8:	58024400 	.word	0x58024400
 800ebdc:	40004400 	.word	0x40004400
 800ebe0:	40004800 	.word	0x40004800
 800ebe4:	40004c00 	.word	0x40004c00
 800ebe8:	40005000 	.word	0x40005000
 800ebec:	2320      	movs	r3, #32
 800ebee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebf2:	e128      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ebf4:	2340      	movs	r3, #64	@ 0x40
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebfa:	e124      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ebfc:	2380      	movs	r3, #128	@ 0x80
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec02:	e120      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4acb      	ldr	r2, [pc, #812]	@ (800ef38 <UART_SetConfig+0x698>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d176      	bne.n	800ecfc <UART_SetConfig+0x45c>
 800ec0e:	4bcb      	ldr	r3, [pc, #812]	@ (800ef3c <UART_SetConfig+0x69c>)
 800ec10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ec16:	2b28      	cmp	r3, #40	@ 0x28
 800ec18:	d86c      	bhi.n	800ecf4 <UART_SetConfig+0x454>
 800ec1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec20 <UART_SetConfig+0x380>)
 800ec1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec20:	0800ecc5 	.word	0x0800ecc5
 800ec24:	0800ecf5 	.word	0x0800ecf5
 800ec28:	0800ecf5 	.word	0x0800ecf5
 800ec2c:	0800ecf5 	.word	0x0800ecf5
 800ec30:	0800ecf5 	.word	0x0800ecf5
 800ec34:	0800ecf5 	.word	0x0800ecf5
 800ec38:	0800ecf5 	.word	0x0800ecf5
 800ec3c:	0800ecf5 	.word	0x0800ecf5
 800ec40:	0800eccd 	.word	0x0800eccd
 800ec44:	0800ecf5 	.word	0x0800ecf5
 800ec48:	0800ecf5 	.word	0x0800ecf5
 800ec4c:	0800ecf5 	.word	0x0800ecf5
 800ec50:	0800ecf5 	.word	0x0800ecf5
 800ec54:	0800ecf5 	.word	0x0800ecf5
 800ec58:	0800ecf5 	.word	0x0800ecf5
 800ec5c:	0800ecf5 	.word	0x0800ecf5
 800ec60:	0800ecd5 	.word	0x0800ecd5
 800ec64:	0800ecf5 	.word	0x0800ecf5
 800ec68:	0800ecf5 	.word	0x0800ecf5
 800ec6c:	0800ecf5 	.word	0x0800ecf5
 800ec70:	0800ecf5 	.word	0x0800ecf5
 800ec74:	0800ecf5 	.word	0x0800ecf5
 800ec78:	0800ecf5 	.word	0x0800ecf5
 800ec7c:	0800ecf5 	.word	0x0800ecf5
 800ec80:	0800ecdd 	.word	0x0800ecdd
 800ec84:	0800ecf5 	.word	0x0800ecf5
 800ec88:	0800ecf5 	.word	0x0800ecf5
 800ec8c:	0800ecf5 	.word	0x0800ecf5
 800ec90:	0800ecf5 	.word	0x0800ecf5
 800ec94:	0800ecf5 	.word	0x0800ecf5
 800ec98:	0800ecf5 	.word	0x0800ecf5
 800ec9c:	0800ecf5 	.word	0x0800ecf5
 800eca0:	0800ece5 	.word	0x0800ece5
 800eca4:	0800ecf5 	.word	0x0800ecf5
 800eca8:	0800ecf5 	.word	0x0800ecf5
 800ecac:	0800ecf5 	.word	0x0800ecf5
 800ecb0:	0800ecf5 	.word	0x0800ecf5
 800ecb4:	0800ecf5 	.word	0x0800ecf5
 800ecb8:	0800ecf5 	.word	0x0800ecf5
 800ecbc:	0800ecf5 	.word	0x0800ecf5
 800ecc0:	0800eced 	.word	0x0800eced
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecca:	e0bc      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eccc:	2304      	movs	r3, #4
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd2:	e0b8      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ecd4:	2308      	movs	r3, #8
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecda:	e0b4      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ecdc:	2310      	movs	r3, #16
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece2:	e0b0      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ece4:	2320      	movs	r3, #32
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecea:	e0ac      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ecec:	2340      	movs	r3, #64	@ 0x40
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf2:	e0a8      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ecf4:	2380      	movs	r3, #128	@ 0x80
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfa:	e0a4      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a8f      	ldr	r2, [pc, #572]	@ (800ef40 <UART_SetConfig+0x6a0>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d130      	bne.n	800ed68 <UART_SetConfig+0x4c8>
 800ed06:	4b8d      	ldr	r3, [pc, #564]	@ (800ef3c <UART_SetConfig+0x69c>)
 800ed08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed0a:	f003 0307 	and.w	r3, r3, #7
 800ed0e:	2b05      	cmp	r3, #5
 800ed10:	d826      	bhi.n	800ed60 <UART_SetConfig+0x4c0>
 800ed12:	a201      	add	r2, pc, #4	@ (adr r2, 800ed18 <UART_SetConfig+0x478>)
 800ed14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed18:	0800ed31 	.word	0x0800ed31
 800ed1c:	0800ed39 	.word	0x0800ed39
 800ed20:	0800ed41 	.word	0x0800ed41
 800ed24:	0800ed49 	.word	0x0800ed49
 800ed28:	0800ed51 	.word	0x0800ed51
 800ed2c:	0800ed59 	.word	0x0800ed59
 800ed30:	2300      	movs	r3, #0
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed36:	e086      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ed38:	2304      	movs	r3, #4
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3e:	e082      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ed40:	2308      	movs	r3, #8
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed46:	e07e      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ed48:	2310      	movs	r3, #16
 800ed4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4e:	e07a      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ed50:	2320      	movs	r3, #32
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed56:	e076      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ed58:	2340      	movs	r3, #64	@ 0x40
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5e:	e072      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ed60:	2380      	movs	r3, #128	@ 0x80
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed66:	e06e      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a75      	ldr	r2, [pc, #468]	@ (800ef44 <UART_SetConfig+0x6a4>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d130      	bne.n	800edd4 <UART_SetConfig+0x534>
 800ed72:	4b72      	ldr	r3, [pc, #456]	@ (800ef3c <UART_SetConfig+0x69c>)
 800ed74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed76:	f003 0307 	and.w	r3, r3, #7
 800ed7a:	2b05      	cmp	r3, #5
 800ed7c:	d826      	bhi.n	800edcc <UART_SetConfig+0x52c>
 800ed7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed84 <UART_SetConfig+0x4e4>)
 800ed80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed84:	0800ed9d 	.word	0x0800ed9d
 800ed88:	0800eda5 	.word	0x0800eda5
 800ed8c:	0800edad 	.word	0x0800edad
 800ed90:	0800edb5 	.word	0x0800edb5
 800ed94:	0800edbd 	.word	0x0800edbd
 800ed98:	0800edc5 	.word	0x0800edc5
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda2:	e050      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800eda4:	2304      	movs	r3, #4
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edaa:	e04c      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800edac:	2308      	movs	r3, #8
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb2:	e048      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800edb4:	2310      	movs	r3, #16
 800edb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edba:	e044      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800edbc:	2320      	movs	r3, #32
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edc2:	e040      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800edc4:	2340      	movs	r3, #64	@ 0x40
 800edc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edca:	e03c      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800edcc:	2380      	movs	r3, #128	@ 0x80
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edd2:	e038      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a5b      	ldr	r2, [pc, #364]	@ (800ef48 <UART_SetConfig+0x6a8>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d130      	bne.n	800ee40 <UART_SetConfig+0x5a0>
 800edde:	4b57      	ldr	r3, [pc, #348]	@ (800ef3c <UART_SetConfig+0x69c>)
 800ede0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ede2:	f003 0307 	and.w	r3, r3, #7
 800ede6:	2b05      	cmp	r3, #5
 800ede8:	d826      	bhi.n	800ee38 <UART_SetConfig+0x598>
 800edea:	a201      	add	r2, pc, #4	@ (adr r2, 800edf0 <UART_SetConfig+0x550>)
 800edec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf0:	0800ee09 	.word	0x0800ee09
 800edf4:	0800ee11 	.word	0x0800ee11
 800edf8:	0800ee19 	.word	0x0800ee19
 800edfc:	0800ee21 	.word	0x0800ee21
 800ee00:	0800ee29 	.word	0x0800ee29
 800ee04:	0800ee31 	.word	0x0800ee31
 800ee08:	2302      	movs	r3, #2
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0e:	e01a      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ee10:	2304      	movs	r3, #4
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee16:	e016      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ee18:	2308      	movs	r3, #8
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1e:	e012      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ee20:	2310      	movs	r3, #16
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee26:	e00e      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ee28:	2320      	movs	r3, #32
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2e:	e00a      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ee30:	2340      	movs	r3, #64	@ 0x40
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee36:	e006      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ee38:	2380      	movs	r3, #128	@ 0x80
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3e:	e002      	b.n	800ee46 <UART_SetConfig+0x5a6>
 800ee40:	2380      	movs	r3, #128	@ 0x80
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a3f      	ldr	r2, [pc, #252]	@ (800ef48 <UART_SetConfig+0x6a8>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	f040 80f8 	bne.w	800f042 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ee56:	2b20      	cmp	r3, #32
 800ee58:	dc46      	bgt.n	800eee8 <UART_SetConfig+0x648>
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	f2c0 8082 	blt.w	800ef64 <UART_SetConfig+0x6c4>
 800ee60:	3b02      	subs	r3, #2
 800ee62:	2b1e      	cmp	r3, #30
 800ee64:	d87e      	bhi.n	800ef64 <UART_SetConfig+0x6c4>
 800ee66:	a201      	add	r2, pc, #4	@ (adr r2, 800ee6c <UART_SetConfig+0x5cc>)
 800ee68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee6c:	0800eeef 	.word	0x0800eeef
 800ee70:	0800ef65 	.word	0x0800ef65
 800ee74:	0800eef7 	.word	0x0800eef7
 800ee78:	0800ef65 	.word	0x0800ef65
 800ee7c:	0800ef65 	.word	0x0800ef65
 800ee80:	0800ef65 	.word	0x0800ef65
 800ee84:	0800ef07 	.word	0x0800ef07
 800ee88:	0800ef65 	.word	0x0800ef65
 800ee8c:	0800ef65 	.word	0x0800ef65
 800ee90:	0800ef65 	.word	0x0800ef65
 800ee94:	0800ef65 	.word	0x0800ef65
 800ee98:	0800ef65 	.word	0x0800ef65
 800ee9c:	0800ef65 	.word	0x0800ef65
 800eea0:	0800ef65 	.word	0x0800ef65
 800eea4:	0800ef17 	.word	0x0800ef17
 800eea8:	0800ef65 	.word	0x0800ef65
 800eeac:	0800ef65 	.word	0x0800ef65
 800eeb0:	0800ef65 	.word	0x0800ef65
 800eeb4:	0800ef65 	.word	0x0800ef65
 800eeb8:	0800ef65 	.word	0x0800ef65
 800eebc:	0800ef65 	.word	0x0800ef65
 800eec0:	0800ef65 	.word	0x0800ef65
 800eec4:	0800ef65 	.word	0x0800ef65
 800eec8:	0800ef65 	.word	0x0800ef65
 800eecc:	0800ef65 	.word	0x0800ef65
 800eed0:	0800ef65 	.word	0x0800ef65
 800eed4:	0800ef65 	.word	0x0800ef65
 800eed8:	0800ef65 	.word	0x0800ef65
 800eedc:	0800ef65 	.word	0x0800ef65
 800eee0:	0800ef65 	.word	0x0800ef65
 800eee4:	0800ef57 	.word	0x0800ef57
 800eee8:	2b40      	cmp	r3, #64	@ 0x40
 800eeea:	d037      	beq.n	800ef5c <UART_SetConfig+0x6bc>
 800eeec:	e03a      	b.n	800ef64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800eeee:	f7fc fec7 	bl	800bc80 <HAL_RCCEx_GetD3PCLK1Freq>
 800eef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eef4:	e03c      	b.n	800ef70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fc fed6 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef04:	e034      	b.n	800ef70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef06:	f107 0318 	add.w	r3, r7, #24
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fd f822 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef14:	e02c      	b.n	800ef70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef16:	4b09      	ldr	r3, [pc, #36]	@ (800ef3c <UART_SetConfig+0x69c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f003 0320 	and.w	r3, r3, #32
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d016      	beq.n	800ef50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef22:	4b06      	ldr	r3, [pc, #24]	@ (800ef3c <UART_SetConfig+0x69c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	08db      	lsrs	r3, r3, #3
 800ef28:	f003 0303 	and.w	r3, r3, #3
 800ef2c:	4a07      	ldr	r2, [pc, #28]	@ (800ef4c <UART_SetConfig+0x6ac>)
 800ef2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef34:	e01c      	b.n	800ef70 <UART_SetConfig+0x6d0>
 800ef36:	bf00      	nop
 800ef38:	40011400 	.word	0x40011400
 800ef3c:	58024400 	.word	0x58024400
 800ef40:	40007800 	.word	0x40007800
 800ef44:	40007c00 	.word	0x40007c00
 800ef48:	58000c00 	.word	0x58000c00
 800ef4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ef50:	4b9d      	ldr	r3, [pc, #628]	@ (800f1c8 <UART_SetConfig+0x928>)
 800ef52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef54:	e00c      	b.n	800ef70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef56:	4b9d      	ldr	r3, [pc, #628]	@ (800f1cc <UART_SetConfig+0x92c>)
 800ef58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef5a:	e009      	b.n	800ef70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef62:	e005      	b.n	800ef70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ef64:	2300      	movs	r3, #0
 800ef66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ef6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f000 81de 	beq.w	800f334 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef7c:	4a94      	ldr	r2, [pc, #592]	@ (800f1d0 <UART_SetConfig+0x930>)
 800ef7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef82:	461a      	mov	r2, r3
 800ef84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef86:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	685a      	ldr	r2, [r3, #4]
 800ef90:	4613      	mov	r3, r2
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	4413      	add	r3, r2
 800ef96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d305      	bcc.n	800efa8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d903      	bls.n	800efb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800efae:	e1c1      	b.n	800f334 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efb2:	2200      	movs	r2, #0
 800efb4:	60bb      	str	r3, [r7, #8]
 800efb6:	60fa      	str	r2, [r7, #12]
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efbc:	4a84      	ldr	r2, [pc, #528]	@ (800f1d0 <UART_SetConfig+0x930>)
 800efbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	2200      	movs	r2, #0
 800efc6:	603b      	str	r3, [r7, #0]
 800efc8:	607a      	str	r2, [r7, #4]
 800efca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800efd2:	f7f1 f981 	bl	80002d8 <__aeabi_uldivmod>
 800efd6:	4602      	mov	r2, r0
 800efd8:	460b      	mov	r3, r1
 800efda:	4610      	mov	r0, r2
 800efdc:	4619      	mov	r1, r3
 800efde:	f04f 0200 	mov.w	r2, #0
 800efe2:	f04f 0300 	mov.w	r3, #0
 800efe6:	020b      	lsls	r3, r1, #8
 800efe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800efec:	0202      	lsls	r2, r0, #8
 800efee:	6979      	ldr	r1, [r7, #20]
 800eff0:	6849      	ldr	r1, [r1, #4]
 800eff2:	0849      	lsrs	r1, r1, #1
 800eff4:	2000      	movs	r0, #0
 800eff6:	460c      	mov	r4, r1
 800eff8:	4605      	mov	r5, r0
 800effa:	eb12 0804 	adds.w	r8, r2, r4
 800effe:	eb43 0905 	adc.w	r9, r3, r5
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	469a      	mov	sl, r3
 800f00a:	4693      	mov	fp, r2
 800f00c:	4652      	mov	r2, sl
 800f00e:	465b      	mov	r3, fp
 800f010:	4640      	mov	r0, r8
 800f012:	4649      	mov	r1, r9
 800f014:	f7f1 f960 	bl	80002d8 <__aeabi_uldivmod>
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	4613      	mov	r3, r2
 800f01e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f026:	d308      	bcc.n	800f03a <UART_SetConfig+0x79a>
 800f028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f02a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f02e:	d204      	bcs.n	800f03a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f036:	60da      	str	r2, [r3, #12]
 800f038:	e17c      	b.n	800f334 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f03a:	2301      	movs	r3, #1
 800f03c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f040:	e178      	b.n	800f334 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f04a:	f040 80c5 	bne.w	800f1d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f052:	2b20      	cmp	r3, #32
 800f054:	dc48      	bgt.n	800f0e8 <UART_SetConfig+0x848>
 800f056:	2b00      	cmp	r3, #0
 800f058:	db7b      	blt.n	800f152 <UART_SetConfig+0x8b2>
 800f05a:	2b20      	cmp	r3, #32
 800f05c:	d879      	bhi.n	800f152 <UART_SetConfig+0x8b2>
 800f05e:	a201      	add	r2, pc, #4	@ (adr r2, 800f064 <UART_SetConfig+0x7c4>)
 800f060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f064:	0800f0ef 	.word	0x0800f0ef
 800f068:	0800f0f7 	.word	0x0800f0f7
 800f06c:	0800f153 	.word	0x0800f153
 800f070:	0800f153 	.word	0x0800f153
 800f074:	0800f0ff 	.word	0x0800f0ff
 800f078:	0800f153 	.word	0x0800f153
 800f07c:	0800f153 	.word	0x0800f153
 800f080:	0800f153 	.word	0x0800f153
 800f084:	0800f10f 	.word	0x0800f10f
 800f088:	0800f153 	.word	0x0800f153
 800f08c:	0800f153 	.word	0x0800f153
 800f090:	0800f153 	.word	0x0800f153
 800f094:	0800f153 	.word	0x0800f153
 800f098:	0800f153 	.word	0x0800f153
 800f09c:	0800f153 	.word	0x0800f153
 800f0a0:	0800f153 	.word	0x0800f153
 800f0a4:	0800f11f 	.word	0x0800f11f
 800f0a8:	0800f153 	.word	0x0800f153
 800f0ac:	0800f153 	.word	0x0800f153
 800f0b0:	0800f153 	.word	0x0800f153
 800f0b4:	0800f153 	.word	0x0800f153
 800f0b8:	0800f153 	.word	0x0800f153
 800f0bc:	0800f153 	.word	0x0800f153
 800f0c0:	0800f153 	.word	0x0800f153
 800f0c4:	0800f153 	.word	0x0800f153
 800f0c8:	0800f153 	.word	0x0800f153
 800f0cc:	0800f153 	.word	0x0800f153
 800f0d0:	0800f153 	.word	0x0800f153
 800f0d4:	0800f153 	.word	0x0800f153
 800f0d8:	0800f153 	.word	0x0800f153
 800f0dc:	0800f153 	.word	0x0800f153
 800f0e0:	0800f153 	.word	0x0800f153
 800f0e4:	0800f145 	.word	0x0800f145
 800f0e8:	2b40      	cmp	r3, #64	@ 0x40
 800f0ea:	d02e      	beq.n	800f14a <UART_SetConfig+0x8aa>
 800f0ec:	e031      	b.n	800f152 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0ee:	f7fa fe11 	bl	8009d14 <HAL_RCC_GetPCLK1Freq>
 800f0f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f0f4:	e033      	b.n	800f15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0f6:	f7fa fe23 	bl	8009d40 <HAL_RCC_GetPCLK2Freq>
 800f0fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f0fc:	e02f      	b.n	800f15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f102:	4618      	mov	r0, r3
 800f104:	f7fc fdd2 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f10c:	e027      	b.n	800f15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f10e:	f107 0318 	add.w	r3, r7, #24
 800f112:	4618      	mov	r0, r3
 800f114:	f7fc ff1e 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f11c:	e01f      	b.n	800f15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f11e:	4b2d      	ldr	r3, [pc, #180]	@ (800f1d4 <UART_SetConfig+0x934>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 0320 	and.w	r3, r3, #32
 800f126:	2b00      	cmp	r3, #0
 800f128:	d009      	beq.n	800f13e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f12a:	4b2a      	ldr	r3, [pc, #168]	@ (800f1d4 <UART_SetConfig+0x934>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	08db      	lsrs	r3, r3, #3
 800f130:	f003 0303 	and.w	r3, r3, #3
 800f134:	4a24      	ldr	r2, [pc, #144]	@ (800f1c8 <UART_SetConfig+0x928>)
 800f136:	fa22 f303 	lsr.w	r3, r2, r3
 800f13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f13c:	e00f      	b.n	800f15e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f13e:	4b22      	ldr	r3, [pc, #136]	@ (800f1c8 <UART_SetConfig+0x928>)
 800f140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f142:	e00c      	b.n	800f15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f144:	4b21      	ldr	r3, [pc, #132]	@ (800f1cc <UART_SetConfig+0x92c>)
 800f146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f148:	e009      	b.n	800f15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f14a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f150:	e005      	b.n	800f15e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f152:	2300      	movs	r3, #0
 800f154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f156:	2301      	movs	r3, #1
 800f158:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f15c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f160:	2b00      	cmp	r3, #0
 800f162:	f000 80e7 	beq.w	800f334 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f16a:	4a19      	ldr	r2, [pc, #100]	@ (800f1d0 <UART_SetConfig+0x930>)
 800f16c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f170:	461a      	mov	r2, r3
 800f172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f174:	fbb3 f3f2 	udiv	r3, r3, r2
 800f178:	005a      	lsls	r2, r3, #1
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	085b      	lsrs	r3, r3, #1
 800f180:	441a      	add	r2, r3
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	fbb2 f3f3 	udiv	r3, r2, r3
 800f18a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f18e:	2b0f      	cmp	r3, #15
 800f190:	d916      	bls.n	800f1c0 <UART_SetConfig+0x920>
 800f192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f198:	d212      	bcs.n	800f1c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	f023 030f 	bic.w	r3, r3, #15
 800f1a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a6:	085b      	lsrs	r3, r3, #1
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	f003 0307 	and.w	r3, r3, #7
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f1bc:	60da      	str	r2, [r3, #12]
 800f1be:	e0b9      	b.n	800f334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f1c6:	e0b5      	b.n	800f334 <UART_SetConfig+0xa94>
 800f1c8:	03d09000 	.word	0x03d09000
 800f1cc:	003d0900 	.word	0x003d0900
 800f1d0:	08011f9c 	.word	0x08011f9c
 800f1d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f1d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f1dc:	2b20      	cmp	r3, #32
 800f1de:	dc49      	bgt.n	800f274 <UART_SetConfig+0x9d4>
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	db7c      	blt.n	800f2de <UART_SetConfig+0xa3e>
 800f1e4:	2b20      	cmp	r3, #32
 800f1e6:	d87a      	bhi.n	800f2de <UART_SetConfig+0xa3e>
 800f1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f1f0 <UART_SetConfig+0x950>)
 800f1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ee:	bf00      	nop
 800f1f0:	0800f27b 	.word	0x0800f27b
 800f1f4:	0800f283 	.word	0x0800f283
 800f1f8:	0800f2df 	.word	0x0800f2df
 800f1fc:	0800f2df 	.word	0x0800f2df
 800f200:	0800f28b 	.word	0x0800f28b
 800f204:	0800f2df 	.word	0x0800f2df
 800f208:	0800f2df 	.word	0x0800f2df
 800f20c:	0800f2df 	.word	0x0800f2df
 800f210:	0800f29b 	.word	0x0800f29b
 800f214:	0800f2df 	.word	0x0800f2df
 800f218:	0800f2df 	.word	0x0800f2df
 800f21c:	0800f2df 	.word	0x0800f2df
 800f220:	0800f2df 	.word	0x0800f2df
 800f224:	0800f2df 	.word	0x0800f2df
 800f228:	0800f2df 	.word	0x0800f2df
 800f22c:	0800f2df 	.word	0x0800f2df
 800f230:	0800f2ab 	.word	0x0800f2ab
 800f234:	0800f2df 	.word	0x0800f2df
 800f238:	0800f2df 	.word	0x0800f2df
 800f23c:	0800f2df 	.word	0x0800f2df
 800f240:	0800f2df 	.word	0x0800f2df
 800f244:	0800f2df 	.word	0x0800f2df
 800f248:	0800f2df 	.word	0x0800f2df
 800f24c:	0800f2df 	.word	0x0800f2df
 800f250:	0800f2df 	.word	0x0800f2df
 800f254:	0800f2df 	.word	0x0800f2df
 800f258:	0800f2df 	.word	0x0800f2df
 800f25c:	0800f2df 	.word	0x0800f2df
 800f260:	0800f2df 	.word	0x0800f2df
 800f264:	0800f2df 	.word	0x0800f2df
 800f268:	0800f2df 	.word	0x0800f2df
 800f26c:	0800f2df 	.word	0x0800f2df
 800f270:	0800f2d1 	.word	0x0800f2d1
 800f274:	2b40      	cmp	r3, #64	@ 0x40
 800f276:	d02e      	beq.n	800f2d6 <UART_SetConfig+0xa36>
 800f278:	e031      	b.n	800f2de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f27a:	f7fa fd4b 	bl	8009d14 <HAL_RCC_GetPCLK1Freq>
 800f27e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f280:	e033      	b.n	800f2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f282:	f7fa fd5d 	bl	8009d40 <HAL_RCC_GetPCLK2Freq>
 800f286:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f288:	e02f      	b.n	800f2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f28a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fc fd0c 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f298:	e027      	b.n	800f2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f29a:	f107 0318 	add.w	r3, r7, #24
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7fc fe58 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2a8:	e01f      	b.n	800f2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2aa:	4b2d      	ldr	r3, [pc, #180]	@ (800f360 <UART_SetConfig+0xac0>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f003 0320 	and.w	r3, r3, #32
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d009      	beq.n	800f2ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2b6:	4b2a      	ldr	r3, [pc, #168]	@ (800f360 <UART_SetConfig+0xac0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	08db      	lsrs	r3, r3, #3
 800f2bc:	f003 0303 	and.w	r3, r3, #3
 800f2c0:	4a28      	ldr	r2, [pc, #160]	@ (800f364 <UART_SetConfig+0xac4>)
 800f2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2c8:	e00f      	b.n	800f2ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f2ca:	4b26      	ldr	r3, [pc, #152]	@ (800f364 <UART_SetConfig+0xac4>)
 800f2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ce:	e00c      	b.n	800f2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2d0:	4b25      	ldr	r3, [pc, #148]	@ (800f368 <UART_SetConfig+0xac8>)
 800f2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d4:	e009      	b.n	800f2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2dc:	e005      	b.n	800f2ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f2e8:	bf00      	nop
    }

    if (pclk != 0U)
 800f2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d021      	beq.n	800f334 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f36c <UART_SetConfig+0xacc>)
 800f2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	085b      	lsrs	r3, r3, #1
 800f308:	441a      	add	r2, r3
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f312:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f316:	2b0f      	cmp	r3, #15
 800f318:	d909      	bls.n	800f32e <UART_SetConfig+0xa8e>
 800f31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f320:	d205      	bcs.n	800f32e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	b29a      	uxth	r2, r3
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	60da      	str	r2, [r3, #12]
 800f32c:	e002      	b.n	800f334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2201      	movs	r2, #1
 800f338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	2201      	movs	r2, #1
 800f340:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2200      	movs	r2, #0
 800f348:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	2200      	movs	r2, #0
 800f34e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f350:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f354:	4618      	mov	r0, r3
 800f356:	3748      	adds	r7, #72	@ 0x48
 800f358:	46bd      	mov	sp, r7
 800f35a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f35e:	bf00      	nop
 800f360:	58024400 	.word	0x58024400
 800f364:	03d09000 	.word	0x03d09000
 800f368:	003d0900 	.word	0x003d0900
 800f36c:	08011f9c 	.word	0x08011f9c

0800f370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f37c:	f003 0301 	and.w	r3, r3, #1
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00a      	beq.n	800f39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f39e:	f003 0302 	and.w	r3, r3, #2
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00a      	beq.n	800f3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3c0:	f003 0304 	and.w	r3, r3, #4
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00a      	beq.n	800f3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	430a      	orrs	r2, r1
 800f3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3e2:	f003 0308 	and.w	r3, r3, #8
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00a      	beq.n	800f400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f404:	f003 0310 	and.w	r3, r3, #16
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d00a      	beq.n	800f422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	430a      	orrs	r2, r1
 800f420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f426:	f003 0320 	and.w	r3, r3, #32
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00a      	beq.n	800f444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	430a      	orrs	r2, r1
 800f442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d01a      	beq.n	800f486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	430a      	orrs	r2, r1
 800f464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f46a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f46e:	d10a      	bne.n	800f486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	430a      	orrs	r2, r1
 800f484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00a      	beq.n	800f4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	430a      	orrs	r2, r1
 800f4a6:	605a      	str	r2, [r3, #4]
  }
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b098      	sub	sp, #96	@ 0x60
 800f4b8:	af02      	add	r7, sp, #8
 800f4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4c4:	f7f3 feb6 	bl	8003234 <HAL_GetTick>
 800f4c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f003 0308 	and.w	r3, r3, #8
 800f4d4:	2b08      	cmp	r3, #8
 800f4d6:	d12f      	bne.n	800f538 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 f88e 	bl	800f608 <UART_WaitOnFlagUntilTimeout>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d022      	beq.n	800f538 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fa:	e853 3f00 	ldrex	r3, [r3]
 800f4fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f506:	653b      	str	r3, [r7, #80]	@ 0x50
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	461a      	mov	r2, r3
 800f50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f510:	647b      	str	r3, [r7, #68]	@ 0x44
 800f512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f518:	e841 2300 	strex	r3, r2, [r1]
 800f51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1e6      	bne.n	800f4f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2220      	movs	r2, #32
 800f528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f534:	2303      	movs	r3, #3
 800f536:	e063      	b.n	800f600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f003 0304 	and.w	r3, r3, #4
 800f542:	2b04      	cmp	r3, #4
 800f544:	d149      	bne.n	800f5da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f546:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f54e:	2200      	movs	r2, #0
 800f550:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 f857 	bl	800f608 <UART_WaitOnFlagUntilTimeout>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d03c      	beq.n	800f5da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f568:	e853 3f00 	ldrex	r3, [r3]
 800f56c:	623b      	str	r3, [r7, #32]
   return(result);
 800f56e:	6a3b      	ldr	r3, [r7, #32]
 800f570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	461a      	mov	r2, r3
 800f57c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f57e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f580:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f586:	e841 2300 	strex	r3, r2, [r1]
 800f58a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1e6      	bne.n	800f560 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3308      	adds	r3, #8
 800f598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	e853 3f00 	ldrex	r3, [r3]
 800f5a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f023 0301 	bic.w	r3, r3, #1
 800f5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	3308      	adds	r3, #8
 800f5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5b2:	61fa      	str	r2, [r7, #28]
 800f5b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b6:	69b9      	ldr	r1, [r7, #24]
 800f5b8:	69fa      	ldr	r2, [r7, #28]
 800f5ba:	e841 2300 	strex	r3, r2, [r1]
 800f5be:	617b      	str	r3, [r7, #20]
   return(result);
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1e5      	bne.n	800f592 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2220      	movs	r2, #32
 800f5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	e012      	b.n	800f600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2220      	movs	r2, #32
 800f5de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2220      	movs	r2, #32
 800f5e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3758      	adds	r7, #88	@ 0x58
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	603b      	str	r3, [r7, #0]
 800f614:	4613      	mov	r3, r2
 800f616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f618:	e049      	b.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f620:	d045      	beq.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f622:	f7f3 fe07 	bl	8003234 <HAL_GetTick>
 800f626:	4602      	mov	r2, r0
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	69ba      	ldr	r2, [r7, #24]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d302      	bcc.n	800f638 <UART_WaitOnFlagUntilTimeout+0x30>
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d101      	bne.n	800f63c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f638:	2303      	movs	r3, #3
 800f63a:	e048      	b.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f003 0304 	and.w	r3, r3, #4
 800f646:	2b00      	cmp	r3, #0
 800f648:	d031      	beq.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	69db      	ldr	r3, [r3, #28]
 800f650:	f003 0308 	and.w	r3, r3, #8
 800f654:	2b08      	cmp	r3, #8
 800f656:	d110      	bne.n	800f67a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2208      	movs	r2, #8
 800f65e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f000 f95b 	bl	800f91c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2208      	movs	r2, #8
 800f66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2200      	movs	r2, #0
 800f672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800f676:	2301      	movs	r3, #1
 800f678:	e029      	b.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	69db      	ldr	r3, [r3, #28]
 800f680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f688:	d111      	bne.n	800f6ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f000 f941 	bl	800f91c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2220      	movs	r2, #32
 800f69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f6aa:	2303      	movs	r3, #3
 800f6ac:	e00f      	b.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	69da      	ldr	r2, [r3, #28]
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	bf0c      	ite	eq
 800f6be:	2301      	moveq	r3, #1
 800f6c0:	2300      	movne	r3, #0
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d0a6      	beq.n	800f61a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6cc:	2300      	movs	r3, #0
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
	...

0800f6d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b0a3      	sub	sp, #140	@ 0x8c
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	68ba      	ldr	r2, [r7, #8]
 800f6ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	88fa      	ldrh	r2, [r7, #6]
 800f6f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	88fa      	ldrh	r2, [r7, #6]
 800f6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2200      	movs	r2, #0
 800f700:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f70a:	d10e      	bne.n	800f72a <UART_Start_Receive_IT+0x52>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d105      	bne.n	800f720 <UART_Start_Receive_IT+0x48>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f71a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f71e:	e02d      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	22ff      	movs	r2, #255	@ 0xff
 800f724:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f728:	e028      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10d      	bne.n	800f74e <UART_Start_Receive_IT+0x76>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	691b      	ldr	r3, [r3, #16]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d104      	bne.n	800f744 <UART_Start_Receive_IT+0x6c>
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	22ff      	movs	r2, #255	@ 0xff
 800f73e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f742:	e01b      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	227f      	movs	r2, #127	@ 0x7f
 800f748:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f74c:	e016      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f756:	d10d      	bne.n	800f774 <UART_Start_Receive_IT+0x9c>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d104      	bne.n	800f76a <UART_Start_Receive_IT+0x92>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	227f      	movs	r2, #127	@ 0x7f
 800f764:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f768:	e008      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	223f      	movs	r2, #63	@ 0x3f
 800f76e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f772:	e003      	b.n	800f77c <UART_Start_Receive_IT+0xa4>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2200      	movs	r2, #0
 800f780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2222      	movs	r2, #34	@ 0x22
 800f788:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	3308      	adds	r3, #8
 800f792:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f796:	e853 3f00 	ldrex	r3, [r3]
 800f79a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f79c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f79e:	f043 0301 	orr.w	r3, r3, #1
 800f7a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	3308      	adds	r3, #8
 800f7ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f7b0:	673a      	str	r2, [r7, #112]	@ 0x70
 800f7b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800f7b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f7b8:	e841 2300 	strex	r3, r2, [r1]
 800f7bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800f7be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e3      	bne.n	800f78c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7cc:	d14f      	bne.n	800f86e <UART_Start_Receive_IT+0x196>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f7d4:	88fa      	ldrh	r2, [r7, #6]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d349      	bcc.n	800f86e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	689b      	ldr	r3, [r3, #8]
 800f7de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7e2:	d107      	bne.n	800f7f4 <UART_Start_Receive_IT+0x11c>
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d103      	bne.n	800f7f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4a47      	ldr	r2, [pc, #284]	@ (800f90c <UART_Start_Receive_IT+0x234>)
 800f7f0:	675a      	str	r2, [r3, #116]	@ 0x74
 800f7f2:	e002      	b.n	800f7fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	4a46      	ldr	r2, [pc, #280]	@ (800f910 <UART_Start_Receive_IT+0x238>)
 800f7f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	691b      	ldr	r3, [r3, #16]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d01a      	beq.n	800f838 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f80a:	e853 3f00 	ldrex	r3, [r3]
 800f80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f816:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f826:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f828:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f82a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f82c:	e841 2300 	strex	r3, r2, [r1]
 800f830:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800f832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f834:	2b00      	cmp	r3, #0
 800f836:	d1e4      	bne.n	800f802 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	3308      	adds	r3, #8
 800f83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f842:	e853 3f00 	ldrex	r3, [r3]
 800f846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f84e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	3308      	adds	r3, #8
 800f856:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f858:	64ba      	str	r2, [r7, #72]	@ 0x48
 800f85a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f85e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f860:	e841 2300 	strex	r3, r2, [r1]
 800f864:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1e5      	bne.n	800f838 <UART_Start_Receive_IT+0x160>
 800f86c:	e046      	b.n	800f8fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f876:	d107      	bne.n	800f888 <UART_Start_Receive_IT+0x1b0>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d103      	bne.n	800f888 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	4a24      	ldr	r2, [pc, #144]	@ (800f914 <UART_Start_Receive_IT+0x23c>)
 800f884:	675a      	str	r2, [r3, #116]	@ 0x74
 800f886:	e002      	b.n	800f88e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	4a23      	ldr	r2, [pc, #140]	@ (800f918 <UART_Start_Receive_IT+0x240>)
 800f88c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	691b      	ldr	r3, [r3, #16]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d019      	beq.n	800f8ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f89e:	e853 3f00 	ldrex	r3, [r3]
 800f8a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800f8aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f8b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f8b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f8ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8bc:	e841 2300 	strex	r3, r2, [r1]
 800f8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1e6      	bne.n	800f896 <UART_Start_Receive_IT+0x1be>
 800f8c8:	e018      	b.n	800f8fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	e853 3f00 	ldrex	r3, [r3]
 800f8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	f043 0320 	orr.w	r3, r3, #32
 800f8de:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8e8:	623b      	str	r3, [r7, #32]
 800f8ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ec:	69f9      	ldr	r1, [r7, #28]
 800f8ee:	6a3a      	ldr	r2, [r7, #32]
 800f8f0:	e841 2300 	strex	r3, r2, [r1]
 800f8f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1e6      	bne.n	800f8ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	378c      	adds	r7, #140	@ 0x8c
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	0801013d 	.word	0x0801013d
 800f910:	0800fddd 	.word	0x0800fddd
 800f914:	0800fc25 	.word	0x0800fc25
 800f918:	0800fa6d 	.word	0x0800fa6d

0800f91c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b095      	sub	sp, #84	@ 0x54
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f92c:	e853 3f00 	ldrex	r3, [r3]
 800f930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f942:	643b      	str	r3, [r7, #64]	@ 0x40
 800f944:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f94a:	e841 2300 	strex	r3, r2, [r1]
 800f94e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1e6      	bne.n	800f924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	3308      	adds	r3, #8
 800f95c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	e853 3f00 	ldrex	r3, [r3]
 800f964:	61fb      	str	r3, [r7, #28]
   return(result);
 800f966:	69fa      	ldr	r2, [r7, #28]
 800f968:	4b1e      	ldr	r3, [pc, #120]	@ (800f9e4 <UART_EndRxTransfer+0xc8>)
 800f96a:	4013      	ands	r3, r2
 800f96c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	3308      	adds	r3, #8
 800f974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f97a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f97c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f97e:	e841 2300 	strex	r3, r2, [r1]
 800f982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1e5      	bne.n	800f956 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d118      	bne.n	800f9c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	e853 3f00 	ldrex	r3, [r3]
 800f99e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	f023 0310 	bic.w	r3, r3, #16
 800f9a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9b0:	61bb      	str	r3, [r7, #24]
 800f9b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b4:	6979      	ldr	r1, [r7, #20]
 800f9b6:	69ba      	ldr	r2, [r7, #24]
 800f9b8:	e841 2300 	strex	r3, r2, [r1]
 800f9bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1e6      	bne.n	800f992 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2220      	movs	r2, #32
 800f9c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f9d8:	bf00      	nop
 800f9da:	3754      	adds	r7, #84	@ 0x54
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	effffffe 	.word	0xeffffffe

0800f9e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7fe ff34 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa0c:	bf00      	nop
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b088      	sub	sp, #32
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	e853 3f00 	ldrex	r3, [r3]
 800fa28:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa30:	61fb      	str	r3, [r7, #28]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	61bb      	str	r3, [r7, #24]
 800fa3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3e:	6979      	ldr	r1, [r7, #20]
 800fa40:	69ba      	ldr	r2, [r7, #24]
 800fa42:	e841 2300 	strex	r3, r2, [r1]
 800fa46:	613b      	str	r3, [r7, #16]
   return(result);
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1e6      	bne.n	800fa1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2220      	movs	r2, #32
 800fa52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fe feff 	bl	800e860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa62:	bf00      	nop
 800fa64:	3720      	adds	r7, #32
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
	...

0800fa6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b09c      	sub	sp, #112	@ 0x70
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fa7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa84:	2b22      	cmp	r3, #34	@ 0x22
 800fa86:	f040 80be 	bne.w	800fc06 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fa94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800fa98:	b2d9      	uxtb	r1, r3
 800fa9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800faa4:	400a      	ands	r2, r1
 800faa6:	b2d2      	uxtb	r2, r2
 800faa8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800faba:	b29b      	uxth	r3, r3
 800fabc:	3b01      	subs	r3, #1
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800facc:	b29b      	uxth	r3, r3
 800face:	2b00      	cmp	r3, #0
 800fad0:	f040 80a1 	bne.w	800fc16 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fadc:	e853 3f00 	ldrex	r3, [r3]
 800fae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	461a      	mov	r2, r3
 800faf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800faf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800faf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800faf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fafa:	e841 2300 	strex	r3, r2, [r1]
 800fafe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fb00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1e6      	bne.n	800fad4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb10:	e853 3f00 	ldrex	r3, [r3]
 800fb14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb18:	f023 0301 	bic.w	r3, r3, #1
 800fb1c:	667b      	str	r3, [r7, #100]	@ 0x64
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	3308      	adds	r3, #8
 800fb24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fb26:	647a      	str	r2, [r7, #68]	@ 0x44
 800fb28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb2e:	e841 2300 	strex	r3, r2, [r1]
 800fb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d1e5      	bne.n	800fb06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2220      	movs	r2, #32
 800fb3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	4a33      	ldr	r2, [pc, #204]	@ (800fc20 <UART_RxISR_8BIT+0x1b4>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d01f      	beq.n	800fb98 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d018      	beq.n	800fb98 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb6e:	e853 3f00 	ldrex	r3, [r3]
 800fb72:	623b      	str	r3, [r7, #32]
   return(result);
 800fb74:	6a3b      	ldr	r3, [r7, #32]
 800fb76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fb7a:	663b      	str	r3, [r7, #96]	@ 0x60
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	461a      	mov	r2, r3
 800fb82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb84:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb8c:	e841 2300 	strex	r3, r2, [r1]
 800fb90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1e6      	bne.n	800fb66 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d12e      	bne.n	800fbfe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	e853 3f00 	ldrex	r3, [r3]
 800fbb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f023 0310 	bic.w	r3, r3, #16
 800fbba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbc4:	61fb      	str	r3, [r7, #28]
 800fbc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc8:	69b9      	ldr	r1, [r7, #24]
 800fbca:	69fa      	ldr	r2, [r7, #28]
 800fbcc:	e841 2300 	strex	r3, r2, [r1]
 800fbd0:	617b      	str	r3, [r7, #20]
   return(result);
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1e6      	bne.n	800fba6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	f003 0310 	and.w	r3, r3, #16
 800fbe2:	2b10      	cmp	r3, #16
 800fbe4:	d103      	bne.n	800fbee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	2210      	movs	r2, #16
 800fbec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7fe fe46 	bl	800e888 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fbfc:	e00b      	b.n	800fc16 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7f2 fd62 	bl	80026c8 <HAL_UART_RxCpltCallback>
}
 800fc04:	e007      	b.n	800fc16 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	699a      	ldr	r2, [r3, #24]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f042 0208 	orr.w	r2, r2, #8
 800fc14:	619a      	str	r2, [r3, #24]
}
 800fc16:	bf00      	nop
 800fc18:	3770      	adds	r7, #112	@ 0x70
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	58000c00 	.word	0x58000c00

0800fc24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b09c      	sub	sp, #112	@ 0x70
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fc32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc3c:	2b22      	cmp	r3, #34	@ 0x22
 800fc3e:	f040 80be 	bne.w	800fdbe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc50:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800fc52:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800fc56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc66:	1c9a      	adds	r2, r3, #2
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	3b01      	subs	r3, #1
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f040 80a1 	bne.w	800fdce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc94:	e853 3f00 	ldrex	r3, [r3]
 800fc98:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fc9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fca0:	667b      	str	r3, [r7, #100]	@ 0x64
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcaa:	657b      	str	r3, [r7, #84]	@ 0x54
 800fcac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fcb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fcb2:	e841 2300 	strex	r3, r2, [r1]
 800fcb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fcb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1e6      	bne.n	800fc8c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3308      	adds	r3, #8
 800fcc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcc8:	e853 3f00 	ldrex	r3, [r3]
 800fccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd0:	f023 0301 	bic.w	r3, r3, #1
 800fcd4:	663b      	str	r3, [r7, #96]	@ 0x60
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	3308      	adds	r3, #8
 800fcdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fcde:	643a      	str	r2, [r7, #64]	@ 0x40
 800fce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fce6:	e841 2300 	strex	r3, r2, [r1]
 800fcea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e5      	bne.n	800fcbe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a33      	ldr	r2, [pc, #204]	@ (800fdd8 <UART_RxISR_16BIT+0x1b4>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d01f      	beq.n	800fd50 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d018      	beq.n	800fd50 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd24:	6a3b      	ldr	r3, [r7, #32]
 800fd26:	e853 3f00 	ldrex	r3, [r3]
 800fd2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fd32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	461a      	mov	r2, r3
 800fd3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fd3e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd44:	e841 2300 	strex	r3, r2, [r1]
 800fd48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1e6      	bne.n	800fd1e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d12e      	bne.n	800fdb6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	e853 3f00 	ldrex	r3, [r3]
 800fd6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	f023 0310 	bic.w	r3, r3, #16
 800fd72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	461a      	mov	r2, r3
 800fd7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fd7c:	61bb      	str	r3, [r7, #24]
 800fd7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd80:	6979      	ldr	r1, [r7, #20]
 800fd82:	69ba      	ldr	r2, [r7, #24]
 800fd84:	e841 2300 	strex	r3, r2, [r1]
 800fd88:	613b      	str	r3, [r7, #16]
   return(result);
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d1e6      	bne.n	800fd5e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	69db      	ldr	r3, [r3, #28]
 800fd96:	f003 0310 	and.w	r3, r3, #16
 800fd9a:	2b10      	cmp	r3, #16
 800fd9c:	d103      	bne.n	800fda6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2210      	movs	r2, #16
 800fda4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fdac:	4619      	mov	r1, r3
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7fe fd6a 	bl	800e888 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fdb4:	e00b      	b.n	800fdce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7f2 fc86 	bl	80026c8 <HAL_UART_RxCpltCallback>
}
 800fdbc:	e007      	b.n	800fdce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	699a      	ldr	r2, [r3, #24]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f042 0208 	orr.w	r2, r2, #8
 800fdcc:	619a      	str	r2, [r3, #24]
}
 800fdce:	bf00      	nop
 800fdd0:	3770      	adds	r7, #112	@ 0x70
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	58000c00 	.word	0x58000c00

0800fddc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b0ac      	sub	sp, #176	@ 0xb0
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fdea:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	69db      	ldr	r3, [r3, #28]
 800fdf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe12:	2b22      	cmp	r3, #34	@ 0x22
 800fe14:	f040 8180 	bne.w	8010118 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fe1e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe22:	e123      	b.n	801006c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe2a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fe2e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800fe32:	b2d9      	uxtb	r1, r3
 800fe34:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe3e:	400a      	ands	r2, r1
 800fe40:	b2d2      	uxtb	r2, r2
 800fe42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe48:	1c5a      	adds	r2, r3, #1
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	3b01      	subs	r3, #1
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	69db      	ldr	r3, [r3, #28]
 800fe66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fe6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe6e:	f003 0307 	and.w	r3, r3, #7
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d053      	beq.n	800ff1e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d011      	beq.n	800fea6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800fe82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fe86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00b      	beq.n	800fea6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2201      	movs	r2, #1
 800fe94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe9c:	f043 0201 	orr.w	r2, r3, #1
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800feaa:	f003 0302 	and.w	r3, r3, #2
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d011      	beq.n	800fed6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800feb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800feb6:	f003 0301 	and.w	r3, r3, #1
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00b      	beq.n	800fed6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	2202      	movs	r2, #2
 800fec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fecc:	f043 0204 	orr.w	r2, r3, #4
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800feda:	f003 0304 	and.w	r3, r3, #4
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d011      	beq.n	800ff06 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fee6:	f003 0301 	and.w	r3, r3, #1
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00b      	beq.n	800ff06 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2204      	movs	r2, #4
 800fef4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fefc:	f043 0202 	orr.w	r2, r3, #2
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d006      	beq.n	800ff1e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f7fe fcaf 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f040 80a0 	bne.w	801006c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff34:	e853 3f00 	ldrex	r3, [r3]
 800ff38:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ff3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ff3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ff4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ff50:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff52:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ff54:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ff56:	e841 2300 	strex	r3, r2, [r1]
 800ff5a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ff5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1e4      	bne.n	800ff2c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	3308      	adds	r3, #8
 800ff68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff6c:	e853 3f00 	ldrex	r3, [r3]
 800ff70:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ff72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff74:	4b6e      	ldr	r3, [pc, #440]	@ (8010130 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ff76:	4013      	ands	r3, r2
 800ff78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	3308      	adds	r3, #8
 800ff82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff86:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ff88:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff8a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ff8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ff8e:	e841 2300 	strex	r3, r2, [r1]
 800ff92:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ff94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1e3      	bne.n	800ff62 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2220      	movs	r2, #32
 800ff9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a60      	ldr	r2, [pc, #384]	@ (8010134 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d021      	beq.n	800fffc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d01a      	beq.n	800fffc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffce:	e853 3f00 	ldrex	r3, [r3]
 800ffd2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ffd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ffda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ffe8:	657b      	str	r3, [r7, #84]	@ 0x54
 800ffea:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ffee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fff0:	e841 2300 	strex	r3, r2, [r1]
 800fff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1e4      	bne.n	800ffc6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010000:	2b01      	cmp	r3, #1
 8010002:	d130      	bne.n	8010066 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010012:	e853 3f00 	ldrex	r3, [r3]
 8010016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801001a:	f023 0310 	bic.w	r3, r3, #16
 801001e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	461a      	mov	r2, r3
 8010028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801002c:	643b      	str	r3, [r7, #64]	@ 0x40
 801002e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010034:	e841 2300 	strex	r3, r2, [r1]
 8010038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801003a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801003c:	2b00      	cmp	r3, #0
 801003e:	d1e4      	bne.n	801000a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	69db      	ldr	r3, [r3, #28]
 8010046:	f003 0310 	and.w	r3, r3, #16
 801004a:	2b10      	cmp	r3, #16
 801004c:	d103      	bne.n	8010056 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2210      	movs	r2, #16
 8010054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801005c:	4619      	mov	r1, r3
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7fe fc12 	bl	800e888 <HAL_UARTEx_RxEventCallback>
 8010064:	e002      	b.n	801006c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7f2 fb2e 	bl	80026c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801006c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8010070:	2b00      	cmp	r3, #0
 8010072:	d006      	beq.n	8010082 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010078:	f003 0320 	and.w	r3, r3, #32
 801007c:	2b00      	cmp	r3, #0
 801007e:	f47f aed1 	bne.w	800fe24 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010088:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801008c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8010090:	2b00      	cmp	r3, #0
 8010092:	d049      	beq.n	8010128 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801009a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801009e:	429a      	cmp	r2, r3
 80100a0:	d242      	bcs.n	8010128 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	3308      	adds	r3, #8
 80100a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100aa:	6a3b      	ldr	r3, [r7, #32]
 80100ac:	e853 3f00 	ldrex	r3, [r3]
 80100b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80100b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	3308      	adds	r3, #8
 80100c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80100c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80100c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80100cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100ce:	e841 2300 	strex	r3, r2, [r1]
 80100d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80100d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1e3      	bne.n	80100a2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4a16      	ldr	r2, [pc, #88]	@ (8010138 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80100de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	e853 3f00 	ldrex	r3, [r3]
 80100ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	f043 0320 	orr.w	r3, r3, #32
 80100f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	461a      	mov	r2, r3
 80100fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010102:	61bb      	str	r3, [r7, #24]
 8010104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010106:	6979      	ldr	r1, [r7, #20]
 8010108:	69ba      	ldr	r2, [r7, #24]
 801010a:	e841 2300 	strex	r3, r2, [r1]
 801010e:	613b      	str	r3, [r7, #16]
   return(result);
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d1e4      	bne.n	80100e0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010116:	e007      	b.n	8010128 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	699a      	ldr	r2, [r3, #24]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f042 0208 	orr.w	r2, r2, #8
 8010126:	619a      	str	r2, [r3, #24]
}
 8010128:	bf00      	nop
 801012a:	37b0      	adds	r7, #176	@ 0xb0
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	effffffe 	.word	0xeffffffe
 8010134:	58000c00 	.word	0x58000c00
 8010138:	0800fa6d 	.word	0x0800fa6d

0801013c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b0ae      	sub	sp, #184	@ 0xb8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801014a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	69db      	ldr	r3, [r3, #28]
 8010154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010172:	2b22      	cmp	r3, #34	@ 0x22
 8010174:	f040 8184 	bne.w	8010480 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801017e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010182:	e127      	b.n	80103d4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801018a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010196:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801019a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801019e:	4013      	ands	r3, r2
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80101a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101ac:	1c9a      	adds	r2, r3, #2
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	3b01      	subs	r3, #1
 80101bc:	b29a      	uxth	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	69db      	ldr	r3, [r3, #28]
 80101ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80101ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80101d2:	f003 0307 	and.w	r3, r3, #7
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d053      	beq.n	8010282 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80101da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80101de:	f003 0301 	and.w	r3, r3, #1
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d011      	beq.n	801020a <UART_RxISR_16BIT_FIFOEN+0xce>
 80101e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80101ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00b      	beq.n	801020a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2201      	movs	r2, #1
 80101f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010200:	f043 0201 	orr.w	r2, r3, #1
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801020a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801020e:	f003 0302 	and.w	r3, r3, #2
 8010212:	2b00      	cmp	r3, #0
 8010214:	d011      	beq.n	801023a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801021a:	f003 0301 	and.w	r3, r3, #1
 801021e:	2b00      	cmp	r3, #0
 8010220:	d00b      	beq.n	801023a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	2202      	movs	r2, #2
 8010228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010230:	f043 0204 	orr.w	r2, r3, #4
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801023a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801023e:	f003 0304 	and.w	r3, r3, #4
 8010242:	2b00      	cmp	r3, #0
 8010244:	d011      	beq.n	801026a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d00b      	beq.n	801026a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2204      	movs	r2, #4
 8010258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010260:	f043 0202 	orr.w	r2, r3, #2
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010270:	2b00      	cmp	r3, #0
 8010272:	d006      	beq.n	8010282 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7fe fafd 	bl	800e874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010288:	b29b      	uxth	r3, r3
 801028a:	2b00      	cmp	r3, #0
 801028c:	f040 80a2 	bne.w	80103d4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010298:	e853 3f00 	ldrex	r3, [r3]
 801029c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801029e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80102a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	461a      	mov	r2, r3
 80102ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80102b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80102b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80102ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80102be:	e841 2300 	strex	r3, r2, [r1]
 80102c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80102c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1e2      	bne.n	8010290 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	3308      	adds	r3, #8
 80102d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102d4:	e853 3f00 	ldrex	r3, [r3]
 80102d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80102da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80102dc:	4b6e      	ldr	r3, [pc, #440]	@ (8010498 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80102de:	4013      	ands	r3, r2
 80102e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	3308      	adds	r3, #8
 80102ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80102ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80102f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80102f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80102f6:	e841 2300 	strex	r3, r2, [r1]
 80102fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80102fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d1e3      	bne.n	80102ca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2220      	movs	r2, #32
 8010306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a60      	ldr	r2, [pc, #384]	@ (801049c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d021      	beq.n	8010364 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801032a:	2b00      	cmp	r3, #0
 801032c:	d01a      	beq.n	8010364 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010336:	e853 3f00 	ldrex	r3, [r3]
 801033a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801033c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801033e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010350:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010352:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010358:	e841 2300 	strex	r3, r2, [r1]
 801035c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801035e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010360:	2b00      	cmp	r3, #0
 8010362:	d1e4      	bne.n	801032e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010368:	2b01      	cmp	r3, #1
 801036a:	d130      	bne.n	80103ce <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801037a:	e853 3f00 	ldrex	r3, [r3]
 801037e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010382:	f023 0310 	bic.w	r3, r3, #16
 8010386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	461a      	mov	r2, r3
 8010390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010394:	647b      	str	r3, [r7, #68]	@ 0x44
 8010396:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801039a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801039c:	e841 2300 	strex	r3, r2, [r1]
 80103a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80103a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d1e4      	bne.n	8010372 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	69db      	ldr	r3, [r3, #28]
 80103ae:	f003 0310 	and.w	r3, r3, #16
 80103b2:	2b10      	cmp	r3, #16
 80103b4:	d103      	bne.n	80103be <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	2210      	movs	r2, #16
 80103bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80103c4:	4619      	mov	r1, r3
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7fe fa5e 	bl	800e888 <HAL_UARTEx_RxEventCallback>
 80103cc:	e002      	b.n	80103d4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f7f2 f97a 	bl	80026c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80103d4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d006      	beq.n	80103ea <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80103dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80103e0:	f003 0320 	and.w	r3, r3, #32
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	f47f aecd 	bne.w	8010184 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80103f0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80103f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d049      	beq.n	8010490 <UART_RxISR_16BIT_FIFOEN+0x354>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010402:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8010406:	429a      	cmp	r2, r3
 8010408:	d242      	bcs.n	8010490 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3308      	adds	r3, #8
 8010410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010414:	e853 3f00 	ldrex	r3, [r3]
 8010418:	623b      	str	r3, [r7, #32]
   return(result);
 801041a:	6a3b      	ldr	r3, [r7, #32]
 801041c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	3308      	adds	r3, #8
 801042a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801042e:	633a      	str	r2, [r7, #48]	@ 0x30
 8010430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010436:	e841 2300 	strex	r3, r2, [r1]
 801043a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801043c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1e3      	bne.n	801040a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	4a16      	ldr	r2, [pc, #88]	@ (80104a0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010446:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	e853 3f00 	ldrex	r3, [r3]
 8010454:	60fb      	str	r3, [r7, #12]
   return(result);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f043 0320 	orr.w	r3, r3, #32
 801045c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	461a      	mov	r2, r3
 8010466:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801046a:	61fb      	str	r3, [r7, #28]
 801046c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801046e:	69b9      	ldr	r1, [r7, #24]
 8010470:	69fa      	ldr	r2, [r7, #28]
 8010472:	e841 2300 	strex	r3, r2, [r1]
 8010476:	617b      	str	r3, [r7, #20]
   return(result);
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1e4      	bne.n	8010448 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801047e:	e007      	b.n	8010490 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	699a      	ldr	r2, [r3, #24]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f042 0208 	orr.w	r2, r2, #8
 801048e:	619a      	str	r2, [r3, #24]
}
 8010490:	bf00      	nop
 8010492:	37b8      	adds	r7, #184	@ 0xb8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}
 8010498:	effffffe 	.word	0xeffffffe
 801049c:	58000c00 	.word	0x58000c00
 80104a0:	0800fc25 	.word	0x0800fc25

080104a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80104ac:	bf00      	nop
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80104c0:	bf00      	nop
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b085      	sub	sp, #20
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d101      	bne.n	80104f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80104f2:	2302      	movs	r3, #2
 80104f4:	e027      	b.n	8010546 <HAL_UARTEx_DisableFifoMode+0x66>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2201      	movs	r2, #1
 80104fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2224      	movs	r2, #36	@ 0x24
 8010502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f022 0201 	bic.w	r2, r2, #1
 801051c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010524:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2220      	movs	r2, #32
 8010538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	3714      	adds	r7, #20
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b084      	sub	sp, #16
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010562:	2b01      	cmp	r3, #1
 8010564:	d101      	bne.n	801056a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010566:	2302      	movs	r3, #2
 8010568:	e02d      	b.n	80105c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2201      	movs	r2, #1
 801056e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2224      	movs	r2, #36	@ 0x24
 8010576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f022 0201 	bic.w	r2, r2, #1
 8010590:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	689b      	ldr	r3, [r3, #8]
 8010598:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	683a      	ldr	r2, [r7, #0]
 80105a2:	430a      	orrs	r2, r1
 80105a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f850 	bl	801064c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	68fa      	ldr	r2, [r7, #12]
 80105b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2220      	movs	r2, #32
 80105b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3710      	adds	r7, #16
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b084      	sub	sp, #16
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d101      	bne.n	80105e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80105e2:	2302      	movs	r3, #2
 80105e4:	e02d      	b.n	8010642 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2201      	movs	r2, #1
 80105ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2224      	movs	r2, #36	@ 0x24
 80105f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f022 0201 	bic.w	r2, r2, #1
 801060c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	689b      	ldr	r3, [r3, #8]
 8010614:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	683a      	ldr	r2, [r7, #0]
 801061e:	430a      	orrs	r2, r1
 8010620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f000 f812 	bl	801064c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2220      	movs	r2, #32
 8010634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	3710      	adds	r7, #16
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
	...

0801064c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010658:	2b00      	cmp	r3, #0
 801065a:	d108      	bne.n	801066e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2201      	movs	r2, #1
 8010660:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2201      	movs	r2, #1
 8010668:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801066c:	e031      	b.n	80106d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801066e:	2310      	movs	r3, #16
 8010670:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010672:	2310      	movs	r3, #16
 8010674:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	0e5b      	lsrs	r3, r3, #25
 801067e:	b2db      	uxtb	r3, r3
 8010680:	f003 0307 	and.w	r3, r3, #7
 8010684:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	689b      	ldr	r3, [r3, #8]
 801068c:	0f5b      	lsrs	r3, r3, #29
 801068e:	b2db      	uxtb	r3, r3
 8010690:	f003 0307 	and.w	r3, r3, #7
 8010694:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010696:	7bbb      	ldrb	r3, [r7, #14]
 8010698:	7b3a      	ldrb	r2, [r7, #12]
 801069a:	4911      	ldr	r1, [pc, #68]	@ (80106e0 <UARTEx_SetNbDataToProcess+0x94>)
 801069c:	5c8a      	ldrb	r2, [r1, r2]
 801069e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80106a2:	7b3a      	ldrb	r2, [r7, #12]
 80106a4:	490f      	ldr	r1, [pc, #60]	@ (80106e4 <UARTEx_SetNbDataToProcess+0x98>)
 80106a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	7b7a      	ldrb	r2, [r7, #13]
 80106b8:	4909      	ldr	r1, [pc, #36]	@ (80106e0 <UARTEx_SetNbDataToProcess+0x94>)
 80106ba:	5c8a      	ldrb	r2, [r1, r2]
 80106bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80106c0:	7b7a      	ldrb	r2, [r7, #13]
 80106c2:	4908      	ldr	r1, [pc, #32]	@ (80106e4 <UARTEx_SetNbDataToProcess+0x98>)
 80106c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80106ca:	b29a      	uxth	r2, r3
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80106d2:	bf00      	nop
 80106d4:	3714      	adds	r7, #20
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop
 80106e0:	08011fb4 	.word	0x08011fb4
 80106e4:	08011fbc 	.word	0x08011fbc

080106e8 <memset>:
 80106e8:	4402      	add	r2, r0
 80106ea:	4603      	mov	r3, r0
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d100      	bne.n	80106f2 <memset+0xa>
 80106f0:	4770      	bx	lr
 80106f2:	f803 1b01 	strb.w	r1, [r3], #1
 80106f6:	e7f9      	b.n	80106ec <memset+0x4>

080106f8 <__errno>:
 80106f8:	4b01      	ldr	r3, [pc, #4]	@ (8010700 <__errno+0x8>)
 80106fa:	6818      	ldr	r0, [r3, #0]
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	2400003c 	.word	0x2400003c

08010704 <__libc_init_array>:
 8010704:	b570      	push	{r4, r5, r6, lr}
 8010706:	4d0d      	ldr	r5, [pc, #52]	@ (801073c <__libc_init_array+0x38>)
 8010708:	4c0d      	ldr	r4, [pc, #52]	@ (8010740 <__libc_init_array+0x3c>)
 801070a:	1b64      	subs	r4, r4, r5
 801070c:	10a4      	asrs	r4, r4, #2
 801070e:	2600      	movs	r6, #0
 8010710:	42a6      	cmp	r6, r4
 8010712:	d109      	bne.n	8010728 <__libc_init_array+0x24>
 8010714:	4d0b      	ldr	r5, [pc, #44]	@ (8010744 <__libc_init_array+0x40>)
 8010716:	4c0c      	ldr	r4, [pc, #48]	@ (8010748 <__libc_init_array+0x44>)
 8010718:	f001 fb8c 	bl	8011e34 <_init>
 801071c:	1b64      	subs	r4, r4, r5
 801071e:	10a4      	asrs	r4, r4, #2
 8010720:	2600      	movs	r6, #0
 8010722:	42a6      	cmp	r6, r4
 8010724:	d105      	bne.n	8010732 <__libc_init_array+0x2e>
 8010726:	bd70      	pop	{r4, r5, r6, pc}
 8010728:	f855 3b04 	ldr.w	r3, [r5], #4
 801072c:	4798      	blx	r3
 801072e:	3601      	adds	r6, #1
 8010730:	e7ee      	b.n	8010710 <__libc_init_array+0xc>
 8010732:	f855 3b04 	ldr.w	r3, [r5], #4
 8010736:	4798      	blx	r3
 8010738:	3601      	adds	r6, #1
 801073a:	e7f2      	b.n	8010722 <__libc_init_array+0x1e>
 801073c:	080142f0 	.word	0x080142f0
 8010740:	080142f0 	.word	0x080142f0
 8010744:	080142f0 	.word	0x080142f0
 8010748:	080142f8 	.word	0x080142f8

0801074c <__retarget_lock_acquire_recursive>:
 801074c:	4770      	bx	lr

0801074e <__retarget_lock_release_recursive>:
 801074e:	4770      	bx	lr

08010750 <register_fini>:
 8010750:	4b02      	ldr	r3, [pc, #8]	@ (801075c <register_fini+0xc>)
 8010752:	b113      	cbz	r3, 801075a <register_fini+0xa>
 8010754:	4802      	ldr	r0, [pc, #8]	@ (8010760 <register_fini+0x10>)
 8010756:	f000 b805 	b.w	8010764 <atexit>
 801075a:	4770      	bx	lr
 801075c:	00000000 	.word	0x00000000
 8010760:	08010771 	.word	0x08010771

08010764 <atexit>:
 8010764:	2300      	movs	r3, #0
 8010766:	4601      	mov	r1, r0
 8010768:	461a      	mov	r2, r3
 801076a:	4618      	mov	r0, r3
 801076c:	f000 b814 	b.w	8010798 <__register_exitproc>

08010770 <__libc_fini_array>:
 8010770:	b538      	push	{r3, r4, r5, lr}
 8010772:	4d07      	ldr	r5, [pc, #28]	@ (8010790 <__libc_fini_array+0x20>)
 8010774:	4c07      	ldr	r4, [pc, #28]	@ (8010794 <__libc_fini_array+0x24>)
 8010776:	1b64      	subs	r4, r4, r5
 8010778:	10a4      	asrs	r4, r4, #2
 801077a:	b91c      	cbnz	r4, 8010784 <__libc_fini_array+0x14>
 801077c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010780:	f001 bb5e 	b.w	8011e40 <_fini>
 8010784:	3c01      	subs	r4, #1
 8010786:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801078a:	4798      	blx	r3
 801078c:	e7f5      	b.n	801077a <__libc_fini_array+0xa>
 801078e:	bf00      	nop
 8010790:	080142f8 	.word	0x080142f8
 8010794:	080142fc 	.word	0x080142fc

08010798 <__register_exitproc>:
 8010798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801079c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8010814 <__register_exitproc+0x7c>
 80107a0:	4606      	mov	r6, r0
 80107a2:	f8da 0000 	ldr.w	r0, [sl]
 80107a6:	4698      	mov	r8, r3
 80107a8:	460f      	mov	r7, r1
 80107aa:	4691      	mov	r9, r2
 80107ac:	f7ff ffce 	bl	801074c <__retarget_lock_acquire_recursive>
 80107b0:	4b16      	ldr	r3, [pc, #88]	@ (801080c <__register_exitproc+0x74>)
 80107b2:	681c      	ldr	r4, [r3, #0]
 80107b4:	b90c      	cbnz	r4, 80107ba <__register_exitproc+0x22>
 80107b6:	4c16      	ldr	r4, [pc, #88]	@ (8010810 <__register_exitproc+0x78>)
 80107b8:	601c      	str	r4, [r3, #0]
 80107ba:	6865      	ldr	r5, [r4, #4]
 80107bc:	f8da 0000 	ldr.w	r0, [sl]
 80107c0:	2d1f      	cmp	r5, #31
 80107c2:	dd05      	ble.n	80107d0 <__register_exitproc+0x38>
 80107c4:	f7ff ffc3 	bl	801074e <__retarget_lock_release_recursive>
 80107c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d0:	b19e      	cbz	r6, 80107fa <__register_exitproc+0x62>
 80107d2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80107d6:	2201      	movs	r2, #1
 80107d8:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 80107dc:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 80107e0:	40aa      	lsls	r2, r5
 80107e2:	4313      	orrs	r3, r2
 80107e4:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 80107e8:	2e02      	cmp	r6, #2
 80107ea:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 80107ee:	bf02      	ittt	eq
 80107f0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80107f4:	4313      	orreq	r3, r2
 80107f6:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80107fa:	1c6b      	adds	r3, r5, #1
 80107fc:	3502      	adds	r5, #2
 80107fe:	6063      	str	r3, [r4, #4]
 8010800:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010804:	f7ff ffa3 	bl	801074e <__retarget_lock_release_recursive>
 8010808:	2000      	movs	r0, #0
 801080a:	e7df      	b.n	80107cc <__register_exitproc+0x34>
 801080c:	2401da00 	.word	0x2401da00
 8010810:	2401da04 	.word	0x2401da04
 8010814:	24000160 	.word	0x24000160

08010818 <cos>:
 8010818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801081a:	eeb0 7b40 	vmov.f64	d7, d0
 801081e:	ee17 3a90 	vmov	r3, s15
 8010822:	4a21      	ldr	r2, [pc, #132]	@ (80108a8 <cos+0x90>)
 8010824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010828:	4293      	cmp	r3, r2
 801082a:	d806      	bhi.n	801083a <cos+0x22>
 801082c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80108a0 <cos+0x88>
 8010830:	b005      	add	sp, #20
 8010832:	f85d eb04 	ldr.w	lr, [sp], #4
 8010836:	f000 bc97 	b.w	8011168 <__kernel_cos>
 801083a:	4a1c      	ldr	r2, [pc, #112]	@ (80108ac <cos+0x94>)
 801083c:	4293      	cmp	r3, r2
 801083e:	d904      	bls.n	801084a <cos+0x32>
 8010840:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010844:	b005      	add	sp, #20
 8010846:	f85d fb04 	ldr.w	pc, [sp], #4
 801084a:	4668      	mov	r0, sp
 801084c:	f000 fd4c 	bl	80112e8 <__ieee754_rem_pio2>
 8010850:	f000 0003 	and.w	r0, r0, #3
 8010854:	2801      	cmp	r0, #1
 8010856:	d009      	beq.n	801086c <cos+0x54>
 8010858:	2802      	cmp	r0, #2
 801085a:	d010      	beq.n	801087e <cos+0x66>
 801085c:	b9b0      	cbnz	r0, 801088c <cos+0x74>
 801085e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010862:	ed9d 0b00 	vldr	d0, [sp]
 8010866:	f000 fc7f 	bl	8011168 <__kernel_cos>
 801086a:	e7eb      	b.n	8010844 <cos+0x2c>
 801086c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010870:	ed9d 0b00 	vldr	d0, [sp]
 8010874:	f000 fce0 	bl	8011238 <__kernel_sin>
 8010878:	eeb1 0b40 	vneg.f64	d0, d0
 801087c:	e7e2      	b.n	8010844 <cos+0x2c>
 801087e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010882:	ed9d 0b00 	vldr	d0, [sp]
 8010886:	f000 fc6f 	bl	8011168 <__kernel_cos>
 801088a:	e7f5      	b.n	8010878 <cos+0x60>
 801088c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010890:	ed9d 0b00 	vldr	d0, [sp]
 8010894:	2001      	movs	r0, #1
 8010896:	f000 fccf 	bl	8011238 <__kernel_sin>
 801089a:	e7d3      	b.n	8010844 <cos+0x2c>
 801089c:	f3af 8000 	nop.w
	...
 80108a8:	3fe921fb 	.word	0x3fe921fb
 80108ac:	7fefffff 	.word	0x7fefffff

080108b0 <sin>:
 80108b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108b2:	eeb0 7b40 	vmov.f64	d7, d0
 80108b6:	ee17 3a90 	vmov	r3, s15
 80108ba:	4a21      	ldr	r2, [pc, #132]	@ (8010940 <sin+0x90>)
 80108bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d807      	bhi.n	80108d4 <sin+0x24>
 80108c4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8010938 <sin+0x88>
 80108c8:	2000      	movs	r0, #0
 80108ca:	b005      	add	sp, #20
 80108cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80108d0:	f000 bcb2 	b.w	8011238 <__kernel_sin>
 80108d4:	4a1b      	ldr	r2, [pc, #108]	@ (8010944 <sin+0x94>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d904      	bls.n	80108e4 <sin+0x34>
 80108da:	ee30 0b40 	vsub.f64	d0, d0, d0
 80108de:	b005      	add	sp, #20
 80108e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80108e4:	4668      	mov	r0, sp
 80108e6:	f000 fcff 	bl	80112e8 <__ieee754_rem_pio2>
 80108ea:	f000 0003 	and.w	r0, r0, #3
 80108ee:	2801      	cmp	r0, #1
 80108f0:	d00a      	beq.n	8010908 <sin+0x58>
 80108f2:	2802      	cmp	r0, #2
 80108f4:	d00f      	beq.n	8010916 <sin+0x66>
 80108f6:	b9c0      	cbnz	r0, 801092a <sin+0x7a>
 80108f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108fc:	ed9d 0b00 	vldr	d0, [sp]
 8010900:	2001      	movs	r0, #1
 8010902:	f000 fc99 	bl	8011238 <__kernel_sin>
 8010906:	e7ea      	b.n	80108de <sin+0x2e>
 8010908:	ed9d 1b02 	vldr	d1, [sp, #8]
 801090c:	ed9d 0b00 	vldr	d0, [sp]
 8010910:	f000 fc2a 	bl	8011168 <__kernel_cos>
 8010914:	e7e3      	b.n	80108de <sin+0x2e>
 8010916:	ed9d 1b02 	vldr	d1, [sp, #8]
 801091a:	ed9d 0b00 	vldr	d0, [sp]
 801091e:	2001      	movs	r0, #1
 8010920:	f000 fc8a 	bl	8011238 <__kernel_sin>
 8010924:	eeb1 0b40 	vneg.f64	d0, d0
 8010928:	e7d9      	b.n	80108de <sin+0x2e>
 801092a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801092e:	ed9d 0b00 	vldr	d0, [sp]
 8010932:	f000 fc19 	bl	8011168 <__kernel_cos>
 8010936:	e7f5      	b.n	8010924 <sin+0x74>
	...
 8010940:	3fe921fb 	.word	0x3fe921fb
 8010944:	7fefffff 	.word	0x7fefffff

08010948 <log>:
 8010948:	b4f0      	push	{r4, r5, r6, r7}
 801094a:	ee10 0a90 	vmov	r0, s1
 801094e:	ee10 3a10 	vmov	r3, s0
 8010952:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010956:	429c      	cmp	r4, r3
 8010958:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 801095c:	4c70      	ldr	r4, [pc, #448]	@ (8010b20 <log+0x1d8>)
 801095e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8010962:	418c      	sbcs	r4, r1
 8010964:	ed2d 8b02 	vpush	{d8}
 8010968:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801096c:	d35a      	bcc.n	8010a24 <log+0xdc>
 801096e:	4a6d      	ldr	r2, [pc, #436]	@ (8010b24 <log+0x1dc>)
 8010970:	4290      	cmp	r0, r2
 8010972:	bf08      	it	eq
 8010974:	2b00      	cmpeq	r3, #0
 8010976:	f000 80c4 	beq.w	8010b02 <log+0x1ba>
 801097a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801097e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010982:	4b69      	ldr	r3, [pc, #420]	@ (8010b28 <log+0x1e0>)
 8010984:	ee20 2b00 	vmul.f64	d2, d0, d0
 8010988:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801098c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8010990:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8010994:	eea6 7b00 	vfma.f64	d7, d6, d0
 8010998:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801099c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80109a0:	eea6 7b02 	vfma.f64	d7, d6, d2
 80109a4:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80109a8:	eea5 6b00 	vfma.f64	d6, d5, d0
 80109ac:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80109b0:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80109b4:	eea5 6b02 	vfma.f64	d6, d5, d2
 80109b8:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80109bc:	eea3 5b00 	vfma.f64	d5, d3, d0
 80109c0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80109c4:	eea3 5b02 	vfma.f64	d5, d3, d2
 80109c8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80109cc:	eea3 5b04 	vfma.f64	d5, d3, d4
 80109d0:	eea5 6b04 	vfma.f64	d6, d5, d4
 80109d4:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80109d8:	eea6 7b04 	vfma.f64	d7, d6, d4
 80109dc:	eeb0 2b47 	vmov.f64	d2, d7
 80109e0:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8010b08 <log+0x1c0>
 80109e4:	eeb0 6b40 	vmov.f64	d6, d0
 80109e8:	eeb0 3b40 	vmov.f64	d3, d0
 80109ec:	eea0 6b07 	vfma.f64	d6, d0, d7
 80109f0:	eea0 6b47 	vfms.f64	d6, d0, d7
 80109f4:	ee30 8b46 	vsub.f64	d8, d0, d6
 80109f8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80109fc:	eea1 3b05 	vfma.f64	d3, d1, d5
 8010a00:	ee30 7b43 	vsub.f64	d7, d0, d3
 8010a04:	ee30 0b06 	vadd.f64	d0, d0, d6
 8010a08:	eea1 7b05 	vfma.f64	d7, d1, d5
 8010a0c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8010a10:	eea5 7b00 	vfma.f64	d7, d5, d0
 8010a14:	eea2 7b04 	vfma.f64	d7, d2, d4
 8010a18:	ee33 0b07 	vadd.f64	d0, d3, d7
 8010a1c:	ecbd 8b02 	vpop	{d8}
 8010a20:	bcf0      	pop	{r4, r5, r6, r7}
 8010a22:	4770      	bx	lr
 8010a24:	f1a2 0410 	sub.w	r4, r2, #16
 8010a28:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8010a2c:	428c      	cmp	r4, r1
 8010a2e:	d923      	bls.n	8010a78 <log+0x130>
 8010a30:	18d9      	adds	r1, r3, r3
 8010a32:	eb40 0400 	adc.w	r4, r0, r0
 8010a36:	4321      	orrs	r1, r4
 8010a38:	d105      	bne.n	8010a46 <log+0xfe>
 8010a3a:	ecbd 8b02 	vpop	{d8}
 8010a3e:	2001      	movs	r0, #1
 8010a40:	bcf0      	pop	{r4, r5, r6, r7}
 8010a42:	f000 be01 	b.w	8011648 <__math_divzero>
 8010a46:	4939      	ldr	r1, [pc, #228]	@ (8010b2c <log+0x1e4>)
 8010a48:	4288      	cmp	r0, r1
 8010a4a:	bf08      	it	eq
 8010a4c:	2b00      	cmpeq	r3, #0
 8010a4e:	d0e5      	beq.n	8010a1c <log+0xd4>
 8010a50:	0413      	lsls	r3, r2, #16
 8010a52:	d403      	bmi.n	8010a5c <log+0x114>
 8010a54:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8010a58:	4393      	bics	r3, r2
 8010a5a:	d104      	bne.n	8010a66 <log+0x11e>
 8010a5c:	ecbd 8b02 	vpop	{d8}
 8010a60:	bcf0      	pop	{r4, r5, r6, r7}
 8010a62:	f000 be09 	b.w	8011678 <__math_invalid>
 8010a66:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010b10 <log+0x1c8>
 8010a6a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010a6e:	ec53 2b17 	vmov	r2, r3, d7
 8010a72:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8010a76:	4613      	mov	r3, r2
 8010a78:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8010a7c:	492a      	ldr	r1, [pc, #168]	@ (8010b28 <log+0x1e0>)
 8010a7e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8010a82:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8010a86:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8010a8a:	0d15      	lsrs	r5, r2, #20
 8010a8c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8010a90:	052d      	lsls	r5, r5, #20
 8010a92:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8010a96:	1e1e      	subs	r6, r3, #0
 8010a98:	1b47      	subs	r7, r0, r5
 8010a9a:	ec47 6b16 	vmov	d6, r6, r7
 8010a9e:	1512      	asrs	r2, r2, #20
 8010aa0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010aa4:	ee07 2a90 	vmov	s15, r2
 8010aa8:	ee25 2b05 	vmul.f64	d2, d5, d5
 8010aac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010ab0:	ed91 4b00 	vldr	d4, [r1]
 8010ab4:	ee25 1b02 	vmul.f64	d1, d5, d2
 8010ab8:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8010abc:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010ac0:	ee35 4b07 	vadd.f64	d4, d5, d7
 8010ac4:	ee37 0b44 	vsub.f64	d0, d7, d4
 8010ac8:	ed91 7b02 	vldr	d7, [r1, #8]
 8010acc:	ee30 0b05 	vadd.f64	d0, d0, d5
 8010ad0:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010ad4:	ed91 7b04 	vldr	d7, [r1, #16]
 8010ad8:	ed91 6b08 	vldr	d6, [r1, #32]
 8010adc:	eea7 0b02 	vfma.f64	d0, d7, d2
 8010ae0:	ed91 7b06 	vldr	d7, [r1, #24]
 8010ae4:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8010ae8:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010aec:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8010af0:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010af4:	eea6 7b02 	vfma.f64	d7, d6, d2
 8010af8:	eea1 0b07 	vfma.f64	d0, d1, d7
 8010afc:	ee30 0b04 	vadd.f64	d0, d0, d4
 8010b00:	e78c      	b.n	8010a1c <log+0xd4>
 8010b02:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8010b18 <log+0x1d0>
 8010b06:	e789      	b.n	8010a1c <log+0xd4>
 8010b08:	00000000 	.word	0x00000000
 8010b0c:	41a00000 	.word	0x41a00000
 8010b10:	00000000 	.word	0x00000000
 8010b14:	43300000 	.word	0x43300000
	...
 8010b20:	000308ff 	.word	0x000308ff
 8010b24:	3ff00000 	.word	0x3ff00000
 8010b28:	08011fc8 	.word	0x08011fc8
 8010b2c:	7ff00000 	.word	0x7ff00000

08010b30 <checkint>:
 8010b30:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010b34:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	b570      	push	{r4, r5, r6, lr}
 8010b3c:	dd2a      	ble.n	8010b94 <checkint+0x64>
 8010b3e:	f240 4333 	movw	r3, #1075	@ 0x433
 8010b42:	429a      	cmp	r2, r3
 8010b44:	dc24      	bgt.n	8010b90 <checkint+0x60>
 8010b46:	1a9b      	subs	r3, r3, r2
 8010b48:	f1a3 0620 	sub.w	r6, r3, #32
 8010b4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b50:	fa02 f403 	lsl.w	r4, r2, r3
 8010b54:	fa02 f606 	lsl.w	r6, r2, r6
 8010b58:	f1c3 0520 	rsb	r5, r3, #32
 8010b5c:	fa22 f505 	lsr.w	r5, r2, r5
 8010b60:	4334      	orrs	r4, r6
 8010b62:	432c      	orrs	r4, r5
 8010b64:	409a      	lsls	r2, r3
 8010b66:	ea20 0202 	bic.w	r2, r0, r2
 8010b6a:	ea21 0404 	bic.w	r4, r1, r4
 8010b6e:	4322      	orrs	r2, r4
 8010b70:	f1a3 0420 	sub.w	r4, r3, #32
 8010b74:	f1c3 0220 	rsb	r2, r3, #32
 8010b78:	d10c      	bne.n	8010b94 <checkint+0x64>
 8010b7a:	40d8      	lsrs	r0, r3
 8010b7c:	fa01 f302 	lsl.w	r3, r1, r2
 8010b80:	4318      	orrs	r0, r3
 8010b82:	40e1      	lsrs	r1, r4
 8010b84:	4308      	orrs	r0, r1
 8010b86:	f000 0001 	and.w	r0, r0, #1
 8010b8a:	f1d0 0002 	rsbs	r0, r0, #2
 8010b8e:	bd70      	pop	{r4, r5, r6, pc}
 8010b90:	2002      	movs	r0, #2
 8010b92:	e7fc      	b.n	8010b8e <checkint+0x5e>
 8010b94:	2000      	movs	r0, #0
 8010b96:	e7fa      	b.n	8010b8e <checkint+0x5e>

08010b98 <pow>:
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	ee10 4a90 	vmov	r4, s1
 8010ba0:	ed2d 8b0a 	vpush	{d8-d12}
 8010ba4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8010ba8:	ee11 aa90 	vmov	sl, s3
 8010bac:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8010bb0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	ee10 5a10 	vmov	r5, s0
 8010bba:	ee11 0a10 	vmov	r0, s2
 8010bbe:	b087      	sub	sp, #28
 8010bc0:	46c4      	mov	ip, r8
 8010bc2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8010bc6:	d806      	bhi.n	8010bd6 <pow+0x3e>
 8010bc8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8010bcc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8010bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8010bd2:	f240 8157 	bls.w	8010e84 <pow+0x2ec>
 8010bd6:	1802      	adds	r2, r0, r0
 8010bd8:	eb4a 010a 	adc.w	r1, sl, sl
 8010bdc:	f06f 0b01 	mvn.w	fp, #1
 8010be0:	1e57      	subs	r7, r2, #1
 8010be2:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8010be6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8010bea:	45bb      	cmp	fp, r7
 8010bec:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010bf0:	d242      	bcs.n	8010c78 <pow+0xe0>
 8010bf2:	ea52 0301 	orrs.w	r3, r2, r1
 8010bf6:	f04f 0300 	mov.w	r3, #0
 8010bfa:	d10c      	bne.n	8010c16 <pow+0x7e>
 8010bfc:	196d      	adds	r5, r5, r5
 8010bfe:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8010c02:	4164      	adcs	r4, r4
 8010c04:	42ab      	cmp	r3, r5
 8010c06:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010c0a:	41a3      	sbcs	r3, r4
 8010c0c:	f0c0 808f 	bcc.w	8010d2e <pow+0x196>
 8010c10:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010c14:	e02b      	b.n	8010c6e <pow+0xd6>
 8010c16:	4ed4      	ldr	r6, [pc, #848]	@ (8010f68 <pow+0x3d0>)
 8010c18:	42b4      	cmp	r4, r6
 8010c1a:	bf08      	it	eq
 8010c1c:	429d      	cmpeq	r5, r3
 8010c1e:	d109      	bne.n	8010c34 <pow+0x9c>
 8010c20:	1800      	adds	r0, r0, r0
 8010c22:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8010c26:	eb4a 0a0a 	adc.w	sl, sl, sl
 8010c2a:	4283      	cmp	r3, r0
 8010c2c:	4bcf      	ldr	r3, [pc, #828]	@ (8010f6c <pow+0x3d4>)
 8010c2e:	eb73 030a 	sbcs.w	r3, r3, sl
 8010c32:	e7eb      	b.n	8010c0c <pow+0x74>
 8010c34:	196d      	adds	r5, r5, r5
 8010c36:	48ce      	ldr	r0, [pc, #824]	@ (8010f70 <pow+0x3d8>)
 8010c38:	4164      	adcs	r4, r4
 8010c3a:	42ab      	cmp	r3, r5
 8010c3c:	eb70 0604 	sbcs.w	r6, r0, r4
 8010c40:	d375      	bcc.n	8010d2e <pow+0x196>
 8010c42:	4281      	cmp	r1, r0
 8010c44:	bf08      	it	eq
 8010c46:	429a      	cmpeq	r2, r3
 8010c48:	d171      	bne.n	8010d2e <pow+0x196>
 8010c4a:	4aca      	ldr	r2, [pc, #808]	@ (8010f74 <pow+0x3dc>)
 8010c4c:	4294      	cmp	r4, r2
 8010c4e:	bf08      	it	eq
 8010c50:	429d      	cmpeq	r5, r3
 8010c52:	d0dd      	beq.n	8010c10 <pow+0x78>
 8010c54:	4294      	cmp	r4, r2
 8010c56:	ea6f 0a0a 	mvn.w	sl, sl
 8010c5a:	bf34      	ite	cc
 8010c5c:	2400      	movcc	r4, #0
 8010c5e:	2401      	movcs	r4, #1
 8010c60:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8010c64:	4554      	cmp	r4, sl
 8010c66:	f040 81dc 	bne.w	8011022 <pow+0x48a>
 8010c6a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010c6e:	b007      	add	sp, #28
 8010c70:	ecbd 8b0a 	vpop	{d8-d12}
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c78:	196f      	adds	r7, r5, r5
 8010c7a:	eb44 0904 	adc.w	r9, r4, r4
 8010c7e:	1e7a      	subs	r2, r7, #1
 8010c80:	f169 0300 	sbc.w	r3, r9, #0
 8010c84:	4593      	cmp	fp, r2
 8010c86:	eb7e 0303 	sbcs.w	r3, lr, r3
 8010c8a:	d225      	bcs.n	8010cd8 <pow+0x140>
 8010c8c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010c90:	2c00      	cmp	r4, #0
 8010c92:	da13      	bge.n	8010cbc <pow+0x124>
 8010c94:	4651      	mov	r1, sl
 8010c96:	f7ff ff4b 	bl	8010b30 <checkint>
 8010c9a:	2801      	cmp	r0, #1
 8010c9c:	d10e      	bne.n	8010cbc <pow+0x124>
 8010c9e:	eeb1 0b40 	vneg.f64	d0, d0
 8010ca2:	ea57 0909 	orrs.w	r9, r7, r9
 8010ca6:	d10b      	bne.n	8010cc0 <pow+0x128>
 8010ca8:	f1ba 0f00 	cmp.w	sl, #0
 8010cac:	dadf      	bge.n	8010c6e <pow+0xd6>
 8010cae:	b007      	add	sp, #28
 8010cb0:	ecbd 8b0a 	vpop	{d8-d12}
 8010cb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb8:	f000 bcc6 	b.w	8011648 <__math_divzero>
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	e7f0      	b.n	8010ca2 <pow+0x10a>
 8010cc0:	f1ba 0f00 	cmp.w	sl, #0
 8010cc4:	dad3      	bge.n	8010c6e <pow+0xd6>
 8010cc6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010cca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010cce:	ed8d 7b00 	vstr	d7, [sp]
 8010cd2:	ed9d 0b00 	vldr	d0, [sp]
 8010cd6:	e7ca      	b.n	8010c6e <pow+0xd6>
 8010cd8:	2c00      	cmp	r4, #0
 8010cda:	da2b      	bge.n	8010d34 <pow+0x19c>
 8010cdc:	4651      	mov	r1, sl
 8010cde:	f7ff ff27 	bl	8010b30 <checkint>
 8010ce2:	b930      	cbnz	r0, 8010cf2 <pow+0x15a>
 8010ce4:	b007      	add	sp, #28
 8010ce6:	ecbd 8b0a 	vpop	{d8-d12}
 8010cea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cee:	f000 bcc3 	b.w	8011678 <__math_invalid>
 8010cf2:	1e41      	subs	r1, r0, #1
 8010cf4:	4248      	negs	r0, r1
 8010cf6:	4148      	adcs	r0, r1
 8010cf8:	0480      	lsls	r0, r0, #18
 8010cfa:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010cfe:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8010d02:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8010d06:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8010d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d0c:	d92d      	bls.n	8010d6a <pow+0x1d2>
 8010d0e:	4b96      	ldr	r3, [pc, #600]	@ (8010f68 <pow+0x3d0>)
 8010d10:	2000      	movs	r0, #0
 8010d12:	429c      	cmp	r4, r3
 8010d14:	bf08      	it	eq
 8010d16:	4285      	cmpeq	r5, r0
 8010d18:	f43f af7a 	beq.w	8010c10 <pow+0x78>
 8010d1c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8010d20:	428a      	cmp	r2, r1
 8010d22:	d80c      	bhi.n	8010d3e <pow+0x1a6>
 8010d24:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010d28:	42a8      	cmp	r0, r5
 8010d2a:	41a3      	sbcs	r3, r4
 8010d2c:	d204      	bcs.n	8010d38 <pow+0x1a0>
 8010d2e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010d32:	e79c      	b.n	8010c6e <pow+0xd6>
 8010d34:	2000      	movs	r0, #0
 8010d36:	e7e4      	b.n	8010d02 <pow+0x16a>
 8010d38:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010d3c:	e797      	b.n	8010c6e <pow+0xd6>
 8010d3e:	2d01      	cmp	r5, #1
 8010d40:	eb74 0303 	sbcs.w	r3, r4, r3
 8010d44:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010d48:	bf34      	ite	cc
 8010d4a:	2301      	movcc	r3, #1
 8010d4c:	2300      	movcs	r3, #0
 8010d4e:	4296      	cmp	r6, r2
 8010d50:	bf8c      	ite	hi
 8010d52:	2600      	movhi	r6, #0
 8010d54:	2601      	movls	r6, #1
 8010d56:	42b3      	cmp	r3, r6
 8010d58:	f000 809c 	beq.w	8010e94 <pow+0x2fc>
 8010d5c:	b007      	add	sp, #28
 8010d5e:	ecbd 8b0a 	vpop	{d8-d12}
 8010d62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d66:	f000 bc67 	b.w	8011638 <__math_oflow>
 8010d6a:	f1bc 0f00 	cmp.w	ip, #0
 8010d6e:	d10a      	bne.n	8010d86 <pow+0x1ee>
 8010d70:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8010f58 <pow+0x3c0>
 8010d74:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010d78:	ec53 2b17 	vmov	r2, r3, d7
 8010d7c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8010d80:	4615      	mov	r5, r2
 8010d82:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8010d86:	4a7c      	ldr	r2, [pc, #496]	@ (8010f78 <pow+0x3e0>)
 8010d88:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8010d8c:	4422      	add	r2, r4
 8010d8e:	1513      	asrs	r3, r2, #20
 8010d90:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8010d94:	ee03 3a10 	vmov	s6, r3
 8010d98:	0d12      	lsrs	r2, r2, #20
 8010d9a:	4b78      	ldr	r3, [pc, #480]	@ (8010f7c <pow+0x3e4>)
 8010d9c:	0512      	lsls	r2, r2, #20
 8010d9e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8010da2:	1aa7      	subs	r7, r4, r2
 8010da4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8010da8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8010dac:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8010db0:	1e2e      	subs	r6, r5, #0
 8010db2:	ec47 6b14 	vmov	d4, r6, r7
 8010db6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8010dba:	eea4 6b05 	vfma.f64	d6, d4, d5
 8010dbe:	ed93 5b00 	vldr	d5, [r3]
 8010dc2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8010dc6:	eea3 2b05 	vfma.f64	d2, d3, d5
 8010dca:	ed93 5b02 	vldr	d5, [r3, #8]
 8010dce:	ee36 4b02 	vadd.f64	d4, d6, d2
 8010dd2:	ee32 2b44 	vsub.f64	d2, d2, d4
 8010dd6:	eea3 7b05 	vfma.f64	d7, d3, d5
 8010dda:	ed93 5b04 	vldr	d5, [r3, #16]
 8010dde:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010de2:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010de6:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010dea:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010dee:	ee34 8b00 	vadd.f64	d8, d4, d0
 8010df2:	eeb0 9b40 	vmov.f64	d9, d0
 8010df6:	ee34 4b48 	vsub.f64	d4, d4, d8
 8010dfa:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8010dfe:	ee34 ab00 	vadd.f64	d10, d4, d0
 8010e02:	ed93 5b06 	vldr	d5, [r3, #24]
 8010e06:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010e0a:	ee37 7b09 	vadd.f64	d7, d7, d9
 8010e0e:	ed93 4b08 	vldr	d4, [r3, #32]
 8010e12:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8010e16:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8010e1a:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010e1e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8010e22:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8010e26:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010e2a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8010e2e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010e32:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010e36:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010e3a:	eeab 7b05 	vfma.f64	d7, d11, d5
 8010e3e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8010e42:	ee21 6b04 	vmul.f64	d6, d1, d4
 8010e46:	ee16 3a90 	vmov	r3, s13
 8010e4a:	eeb0 5b46 	vmov.f64	d5, d6
 8010e4e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8010e52:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8010e56:	18b2      	adds	r2, r6, r2
 8010e58:	2a3e      	cmp	r2, #62	@ 0x3e
 8010e5a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8010e5e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8010e62:	ee38 8b07 	vadd.f64	d8, d8, d7
 8010e66:	eea1 5b08 	vfma.f64	d5, d1, d8
 8010e6a:	d91b      	bls.n	8010ea4 <pow+0x30c>
 8010e6c:	2a00      	cmp	r2, #0
 8010e6e:	da0b      	bge.n	8010e88 <pow+0x2f0>
 8010e70:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8010e74:	ee36 0b00 	vadd.f64	d0, d6, d0
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	f43f aef8 	beq.w	8010c6e <pow+0xd6>
 8010e7e:	eeb1 0b40 	vneg.f64	d0, d0
 8010e82:	e6f4      	b.n	8010c6e <pow+0xd6>
 8010e84:	2000      	movs	r0, #0
 8010e86:	e77e      	b.n	8010d86 <pow+0x1ee>
 8010e88:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8010e8c:	d909      	bls.n	8010ea2 <pow+0x30a>
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f6bf af64 	bge.w	8010d5c <pow+0x1c4>
 8010e94:	b007      	add	sp, #28
 8010e96:	ecbd 8b0a 	vpop	{d8-d12}
 8010e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9e:	f000 bbc3 	b.w	8011628 <__math_uflow>
 8010ea2:	2600      	movs	r6, #0
 8010ea4:	4936      	ldr	r1, [pc, #216]	@ (8010f80 <pow+0x3e8>)
 8010ea6:	ed91 4b02 	vldr	d4, [r1, #8]
 8010eaa:	ed91 3b00 	vldr	d3, [r1]
 8010eae:	eeb0 7b44 	vmov.f64	d7, d4
 8010eb2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010eb6:	ee17 5a10 	vmov	r5, s14
 8010eba:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010ebe:	ed91 4b04 	vldr	d4, [r1, #16]
 8010ec2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8010ec6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010eca:	ed91 4b06 	vldr	d4, [r1, #24]
 8010ece:	18dc      	adds	r4, r3, r3
 8010ed0:	f104 030f 	add.w	r3, r4, #15
 8010ed4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010ed8:	eea7 6b04 	vfma.f64	d6, d7, d4
 8010edc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8010ee0:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010ee4:	ee25 6b05 	vmul.f64	d6, d5, d5
 8010ee8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8010eec:	ed91 4b08 	vldr	d4, [r1, #32]
 8010ef0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010ef4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010ef8:	eea5 4b03 	vfma.f64	d4, d5, d3
 8010efc:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8010f00:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010f04:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010f08:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8010f0c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010f10:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010f14:	eea5 4b03 	vfma.f64	d4, d5, d3
 8010f18:	1940      	adds	r0, r0, r5
 8010f1a:	2700      	movs	r7, #0
 8010f1c:	eb17 020c 	adds.w	r2, r7, ip
 8010f20:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8010f24:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010f28:	2e00      	cmp	r6, #0
 8010f2a:	d175      	bne.n	8011018 <pow+0x480>
 8010f2c:	42bd      	cmp	r5, r7
 8010f2e:	db29      	blt.n	8010f84 <pow+0x3ec>
 8010f30:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8010f34:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8010f38:	4610      	mov	r0, r2
 8010f3a:	ec41 0b10 	vmov	d0, r0, r1
 8010f3e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010f42:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010f60 <pow+0x3c8>
 8010f46:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f4a:	b007      	add	sp, #28
 8010f4c:	ecbd 8b0a 	vpop	{d8-d12}
 8010f50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	f000 bba8 	b.w	80116a8 <__math_check_oflow>
 8010f58:	00000000 	.word	0x00000000
 8010f5c:	43300000 	.word	0x43300000
 8010f60:	00000000 	.word	0x00000000
 8010f64:	7f000000 	.word	0x7f000000
 8010f68:	3ff00000 	.word	0x3ff00000
 8010f6c:	fff00000 	.word	0xfff00000
 8010f70:	ffe00000 	.word	0xffe00000
 8010f74:	7fe00000 	.word	0x7fe00000
 8010f78:	c0196aab 	.word	0xc0196aab
 8010f7c:	08012858 	.word	0x08012858
 8010f80:	08013a28 	.word	0x08013a28
 8010f84:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8010f88:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8010f8c:	4610      	mov	r0, r2
 8010f8e:	ec41 0b15 	vmov	d5, r0, r1
 8010f92:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8010f96:	ee27 6b05 	vmul.f64	d6, d7, d5
 8010f9a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8010f9e:	eeb0 4bc7 	vabs.f64	d4, d7
 8010fa2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8010fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010faa:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8011028 <pow+0x490>
 8010fae:	d52a      	bpl.n	8011006 <pow+0x46e>
 8010fb0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010fb4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbc:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010fc0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8010fc4:	bf58      	it	pl
 8010fc6:	eeb0 4b43 	vmovpl.f64	d4, d3
 8010fca:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010fce:	ee34 6b43 	vsub.f64	d6, d4, d3
 8010fd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010fd6:	ee36 6b05 	vadd.f64	d6, d6, d5
 8010fda:	ee36 6b03 	vadd.f64	d6, d6, d3
 8010fde:	ee36 7b44 	vsub.f64	d7, d6, d4
 8010fe2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fea:	d104      	bne.n	8010ff6 <pow+0x45e>
 8010fec:	4632      	mov	r2, r6
 8010fee:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8010ff2:	ec43 2b17 	vmov	d7, r2, r3
 8010ff6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010ffa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010ffe:	ee26 6b00 	vmul.f64	d6, d6, d0
 8011002:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011006:	ee27 0b00 	vmul.f64	d0, d7, d0
 801100a:	b007      	add	sp, #28
 801100c:	ecbd 8b0a 	vpop	{d8-d12}
 8011010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	f000 bb3f 	b.w	8011696 <__math_check_uflow>
 8011018:	ec43 2b10 	vmov	d0, r2, r3
 801101c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011020:	e625      	b.n	8010c6e <pow+0xd6>
 8011022:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8011030 <pow+0x498>
 8011026:	e622      	b.n	8010c6e <pow+0xd6>
 8011028:	00000000 	.word	0x00000000
 801102c:	00100000 	.word	0x00100000
	...

08011038 <cabs>:
 8011038:	b508      	push	{r3, lr}
 801103a:	ed2d 8b06 	vpush	{d8-d10}
 801103e:	eeb0 ab40 	vmov.f64	d10, d0
 8011042:	eeb0 9b41 	vmov.f64	d9, d1
 8011046:	f000 f815 	bl	8011074 <creal>
 801104a:	eeb0 1b49 	vmov.f64	d1, d9
 801104e:	eeb0 8b40 	vmov.f64	d8, d0
 8011052:	eeb0 0b4a 	vmov.f64	d0, d10
 8011056:	f000 f80a 	bl	801106e <cimag>
 801105a:	eeb0 1b40 	vmov.f64	d1, d0
 801105e:	eeb0 0b48 	vmov.f64	d0, d8
 8011062:	ecbd 8b06 	vpop	{d8-d10}
 8011066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801106a:	f000 ba81 	b.w	8011570 <hypot>

0801106e <cimag>:
 801106e:	eeb0 0b41 	vmov.f64	d0, d1
 8011072:	4770      	bx	lr

08011074 <creal>:
 8011074:	4770      	bx	lr
	...

08011078 <floor>:
 8011078:	ee10 3a90 	vmov	r3, s1
 801107c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8011080:	ee10 2a10 	vmov	r2, s0
 8011084:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8011088:	2913      	cmp	r1, #19
 801108a:	b530      	push	{r4, r5, lr}
 801108c:	4615      	mov	r5, r2
 801108e:	dc33      	bgt.n	80110f8 <floor+0x80>
 8011090:	2900      	cmp	r1, #0
 8011092:	da18      	bge.n	80110c6 <floor+0x4e>
 8011094:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8011158 <floor+0xe0>
 8011098:	ee30 0b07 	vadd.f64	d0, d0, d7
 801109c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80110a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a4:	dd0a      	ble.n	80110bc <floor+0x44>
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	da50      	bge.n	801114c <floor+0xd4>
 80110aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80110ae:	4313      	orrs	r3, r2
 80110b0:	2200      	movs	r2, #0
 80110b2:	4293      	cmp	r3, r2
 80110b4:	4b2a      	ldr	r3, [pc, #168]	@ (8011160 <floor+0xe8>)
 80110b6:	bf08      	it	eq
 80110b8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80110bc:	4619      	mov	r1, r3
 80110be:	4610      	mov	r0, r2
 80110c0:	ec41 0b10 	vmov	d0, r0, r1
 80110c4:	e01f      	b.n	8011106 <floor+0x8e>
 80110c6:	4827      	ldr	r0, [pc, #156]	@ (8011164 <floor+0xec>)
 80110c8:	4108      	asrs	r0, r1
 80110ca:	ea03 0400 	and.w	r4, r3, r0
 80110ce:	4314      	orrs	r4, r2
 80110d0:	d019      	beq.n	8011106 <floor+0x8e>
 80110d2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011158 <floor+0xe0>
 80110d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80110da:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80110de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e2:	ddeb      	ble.n	80110bc <floor+0x44>
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	bfbe      	ittt	lt
 80110e8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80110ec:	410a      	asrlt	r2, r1
 80110ee:	189b      	addlt	r3, r3, r2
 80110f0:	ea23 0300 	bic.w	r3, r3, r0
 80110f4:	2200      	movs	r2, #0
 80110f6:	e7e1      	b.n	80110bc <floor+0x44>
 80110f8:	2933      	cmp	r1, #51	@ 0x33
 80110fa:	dd05      	ble.n	8011108 <floor+0x90>
 80110fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011100:	d101      	bne.n	8011106 <floor+0x8e>
 8011102:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011106:	bd30      	pop	{r4, r5, pc}
 8011108:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801110c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011110:	40e0      	lsrs	r0, r4
 8011112:	4210      	tst	r0, r2
 8011114:	d0f7      	beq.n	8011106 <floor+0x8e>
 8011116:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011158 <floor+0xe0>
 801111a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801111e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011126:	ddc9      	ble.n	80110bc <floor+0x44>
 8011128:	2b00      	cmp	r3, #0
 801112a:	da02      	bge.n	8011132 <floor+0xba>
 801112c:	2914      	cmp	r1, #20
 801112e:	d103      	bne.n	8011138 <floor+0xc0>
 8011130:	3301      	adds	r3, #1
 8011132:	ea22 0200 	bic.w	r2, r2, r0
 8011136:	e7c1      	b.n	80110bc <floor+0x44>
 8011138:	2401      	movs	r4, #1
 801113a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801113e:	fa04 f101 	lsl.w	r1, r4, r1
 8011142:	440a      	add	r2, r1
 8011144:	42aa      	cmp	r2, r5
 8011146:	bf38      	it	cc
 8011148:	191b      	addcc	r3, r3, r4
 801114a:	e7f2      	b.n	8011132 <floor+0xba>
 801114c:	2200      	movs	r2, #0
 801114e:	4613      	mov	r3, r2
 8011150:	e7b4      	b.n	80110bc <floor+0x44>
 8011152:	bf00      	nop
 8011154:	f3af 8000 	nop.w
 8011158:	8800759c 	.word	0x8800759c
 801115c:	7e37e43c 	.word	0x7e37e43c
 8011160:	bff00000 	.word	0xbff00000
 8011164:	000fffff 	.word	0x000fffff

08011168 <__kernel_cos>:
 8011168:	eeb0 5b40 	vmov.f64	d5, d0
 801116c:	ee15 1a90 	vmov	r1, s11
 8011170:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011174:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8011178:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801117c:	d204      	bcs.n	8011188 <__kernel_cos+0x20>
 801117e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8011182:	ee17 3a90 	vmov	r3, s15
 8011186:	b343      	cbz	r3, 80111da <__kernel_cos+0x72>
 8011188:	ee25 6b05 	vmul.f64	d6, d5, d5
 801118c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8011190:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8011200 <__kernel_cos+0x98>
 8011194:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011208 <__kernel_cos+0xa0>
 8011198:	eea6 4b07 	vfma.f64	d4, d6, d7
 801119c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011210 <__kernel_cos+0xa8>
 80111a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80111a4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011218 <__kernel_cos+0xb0>
 80111a8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80111ac:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011220 <__kernel_cos+0xb8>
 80111b0:	4b1f      	ldr	r3, [pc, #124]	@ (8011230 <__kernel_cos+0xc8>)
 80111b2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80111b6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8011228 <__kernel_cos+0xc0>
 80111ba:	4299      	cmp	r1, r3
 80111bc:	eea7 4b06 	vfma.f64	d4, d7, d6
 80111c0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80111c4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80111c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80111cc:	eea6 1b04 	vfma.f64	d1, d6, d4
 80111d0:	d804      	bhi.n	80111dc <__kernel_cos+0x74>
 80111d2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80111d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80111da:	4770      	bx	lr
 80111dc:	4b15      	ldr	r3, [pc, #84]	@ (8011234 <__kernel_cos+0xcc>)
 80111de:	4299      	cmp	r1, r3
 80111e0:	d809      	bhi.n	80111f6 <__kernel_cos+0x8e>
 80111e2:	2200      	movs	r2, #0
 80111e4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80111e8:	ec43 2b16 	vmov	d6, r2, r3
 80111ec:	ee30 0b46 	vsub.f64	d0, d0, d6
 80111f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80111f4:	e7ed      	b.n	80111d2 <__kernel_cos+0x6a>
 80111f6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80111fa:	e7f7      	b.n	80111ec <__kernel_cos+0x84>
 80111fc:	f3af 8000 	nop.w
 8011200:	be8838d4 	.word	0xbe8838d4
 8011204:	bda8fae9 	.word	0xbda8fae9
 8011208:	bdb4b1c4 	.word	0xbdb4b1c4
 801120c:	3e21ee9e 	.word	0x3e21ee9e
 8011210:	809c52ad 	.word	0x809c52ad
 8011214:	be927e4f 	.word	0xbe927e4f
 8011218:	19cb1590 	.word	0x19cb1590
 801121c:	3efa01a0 	.word	0x3efa01a0
 8011220:	16c15177 	.word	0x16c15177
 8011224:	bf56c16c 	.word	0xbf56c16c
 8011228:	5555554c 	.word	0x5555554c
 801122c:	3fa55555 	.word	0x3fa55555
 8011230:	3fd33332 	.word	0x3fd33332
 8011234:	3fe90000 	.word	0x3fe90000

08011238 <__kernel_sin>:
 8011238:	ee10 3a90 	vmov	r3, s1
 801123c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011240:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8011244:	d204      	bcs.n	8011250 <__kernel_sin+0x18>
 8011246:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801124a:	ee17 3a90 	vmov	r3, s15
 801124e:	b35b      	cbz	r3, 80112a8 <__kernel_sin+0x70>
 8011250:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011254:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011258:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80112b0 <__kernel_sin+0x78>
 801125c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80112b8 <__kernel_sin+0x80>
 8011260:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011264:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80112c0 <__kernel_sin+0x88>
 8011268:	eea4 7b06 	vfma.f64	d7, d4, d6
 801126c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80112c8 <__kernel_sin+0x90>
 8011270:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011274:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80112d0 <__kernel_sin+0x98>
 8011278:	eea4 7b06 	vfma.f64	d7, d4, d6
 801127c:	b930      	cbnz	r0, 801128c <__kernel_sin+0x54>
 801127e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80112d8 <__kernel_sin+0xa0>
 8011282:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011286:	eea4 0b05 	vfma.f64	d0, d4, d5
 801128a:	4770      	bx	lr
 801128c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011290:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8011294:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011298:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801129c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80112e0 <__kernel_sin+0xa8>
 80112a0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80112a4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	f3af 8000 	nop.w
 80112b0:	5acfd57c 	.word	0x5acfd57c
 80112b4:	3de5d93a 	.word	0x3de5d93a
 80112b8:	8a2b9ceb 	.word	0x8a2b9ceb
 80112bc:	be5ae5e6 	.word	0xbe5ae5e6
 80112c0:	57b1fe7d 	.word	0x57b1fe7d
 80112c4:	3ec71de3 	.word	0x3ec71de3
 80112c8:	19c161d5 	.word	0x19c161d5
 80112cc:	bf2a01a0 	.word	0xbf2a01a0
 80112d0:	1110f8a6 	.word	0x1110f8a6
 80112d4:	3f811111 	.word	0x3f811111
 80112d8:	55555549 	.word	0x55555549
 80112dc:	bfc55555 	.word	0xbfc55555
 80112e0:	55555549 	.word	0x55555549
 80112e4:	3fc55555 	.word	0x3fc55555

080112e8 <__ieee754_rem_pio2>:
 80112e8:	b570      	push	{r4, r5, r6, lr}
 80112ea:	eeb0 7b40 	vmov.f64	d7, d0
 80112ee:	ee17 5a90 	vmov	r5, s15
 80112f2:	4b99      	ldr	r3, [pc, #612]	@ (8011558 <__ieee754_rem_pio2+0x270>)
 80112f4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80112f8:	429e      	cmp	r6, r3
 80112fa:	b088      	sub	sp, #32
 80112fc:	4604      	mov	r4, r0
 80112fe:	d807      	bhi.n	8011310 <__ieee754_rem_pio2+0x28>
 8011300:	2200      	movs	r2, #0
 8011302:	2300      	movs	r3, #0
 8011304:	ed84 0b00 	vstr	d0, [r4]
 8011308:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801130c:	2000      	movs	r0, #0
 801130e:	e01b      	b.n	8011348 <__ieee754_rem_pio2+0x60>
 8011310:	4b92      	ldr	r3, [pc, #584]	@ (801155c <__ieee754_rem_pio2+0x274>)
 8011312:	429e      	cmp	r6, r3
 8011314:	d83b      	bhi.n	801138e <__ieee754_rem_pio2+0xa6>
 8011316:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801131a:	2d00      	cmp	r5, #0
 801131c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8011518 <__ieee754_rem_pio2+0x230>
 8011320:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8011324:	dd19      	ble.n	801135a <__ieee754_rem_pio2+0x72>
 8011326:	ee30 7b46 	vsub.f64	d7, d0, d6
 801132a:	429e      	cmp	r6, r3
 801132c:	d00e      	beq.n	801134c <__ieee754_rem_pio2+0x64>
 801132e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8011520 <__ieee754_rem_pio2+0x238>
 8011332:	ee37 6b45 	vsub.f64	d6, d7, d5
 8011336:	ee37 7b46 	vsub.f64	d7, d7, d6
 801133a:	ed84 6b00 	vstr	d6, [r4]
 801133e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011342:	ed84 7b02 	vstr	d7, [r4, #8]
 8011346:	2001      	movs	r0, #1
 8011348:	b008      	add	sp, #32
 801134a:	bd70      	pop	{r4, r5, r6, pc}
 801134c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8011528 <__ieee754_rem_pio2+0x240>
 8011350:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8011530 <__ieee754_rem_pio2+0x248>
 8011354:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011358:	e7eb      	b.n	8011332 <__ieee754_rem_pio2+0x4a>
 801135a:	429e      	cmp	r6, r3
 801135c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011360:	d00e      	beq.n	8011380 <__ieee754_rem_pio2+0x98>
 8011362:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8011520 <__ieee754_rem_pio2+0x238>
 8011366:	ee37 6b05 	vadd.f64	d6, d7, d5
 801136a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801136e:	ed84 6b00 	vstr	d6, [r4]
 8011372:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801137a:	ed84 7b02 	vstr	d7, [r4, #8]
 801137e:	e7e3      	b.n	8011348 <__ieee754_rem_pio2+0x60>
 8011380:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8011528 <__ieee754_rem_pio2+0x240>
 8011384:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8011530 <__ieee754_rem_pio2+0x248>
 8011388:	ee37 7b06 	vadd.f64	d7, d7, d6
 801138c:	e7eb      	b.n	8011366 <__ieee754_rem_pio2+0x7e>
 801138e:	4b74      	ldr	r3, [pc, #464]	@ (8011560 <__ieee754_rem_pio2+0x278>)
 8011390:	429e      	cmp	r6, r3
 8011392:	d870      	bhi.n	8011476 <__ieee754_rem_pio2+0x18e>
 8011394:	f000 f914 	bl	80115c0 <fabs>
 8011398:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801139c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011538 <__ieee754_rem_pio2+0x250>
 80113a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80113a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80113a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80113ac:	ee17 0a90 	vmov	r0, s15
 80113b0:	eeb1 4b45 	vneg.f64	d4, d5
 80113b4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8011518 <__ieee754_rem_pio2+0x230>
 80113b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80113bc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8011520 <__ieee754_rem_pio2+0x238>
 80113c0:	281f      	cmp	r0, #31
 80113c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80113c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80113ca:	dc05      	bgt.n	80113d8 <__ieee754_rem_pio2+0xf0>
 80113cc:	4b65      	ldr	r3, [pc, #404]	@ (8011564 <__ieee754_rem_pio2+0x27c>)
 80113ce:	1e42      	subs	r2, r0, #1
 80113d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113d4:	42b3      	cmp	r3, r6
 80113d6:	d109      	bne.n	80113ec <__ieee754_rem_pio2+0x104>
 80113d8:	ee16 3a90 	vmov	r3, s13
 80113dc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80113e0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80113e4:	2b10      	cmp	r3, #16
 80113e6:	ea4f 5226 	mov.w	r2, r6, asr #20
 80113ea:	dc02      	bgt.n	80113f2 <__ieee754_rem_pio2+0x10a>
 80113ec:	ed84 6b00 	vstr	d6, [r4]
 80113f0:	e01a      	b.n	8011428 <__ieee754_rem_pio2+0x140>
 80113f2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8011528 <__ieee754_rem_pio2+0x240>
 80113f6:	eeb0 6b40 	vmov.f64	d6, d0
 80113fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80113fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011402:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011406:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8011530 <__ieee754_rem_pio2+0x248>
 801140a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801140e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011412:	ee13 3a90 	vmov	r3, s7
 8011416:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801141a:	1ad3      	subs	r3, r2, r3
 801141c:	2b31      	cmp	r3, #49	@ 0x31
 801141e:	dc17      	bgt.n	8011450 <__ieee754_rem_pio2+0x168>
 8011420:	eeb0 0b46 	vmov.f64	d0, d6
 8011424:	ed84 3b00 	vstr	d3, [r4]
 8011428:	ed94 6b00 	vldr	d6, [r4]
 801142c:	2d00      	cmp	r5, #0
 801142e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011432:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011436:	ed84 0b02 	vstr	d0, [r4, #8]
 801143a:	da85      	bge.n	8011348 <__ieee754_rem_pio2+0x60>
 801143c:	eeb1 6b46 	vneg.f64	d6, d6
 8011440:	eeb1 0b40 	vneg.f64	d0, d0
 8011444:	ed84 6b00 	vstr	d6, [r4]
 8011448:	ed84 0b02 	vstr	d0, [r4, #8]
 801144c:	4240      	negs	r0, r0
 801144e:	e77b      	b.n	8011348 <__ieee754_rem_pio2+0x60>
 8011450:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8011540 <__ieee754_rem_pio2+0x258>
 8011454:	eeb0 0b46 	vmov.f64	d0, d6
 8011458:	eea4 0b07 	vfma.f64	d0, d4, d7
 801145c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8011460:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011464:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8011548 <__ieee754_rem_pio2+0x260>
 8011468:	eeb0 7b46 	vmov.f64	d7, d6
 801146c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8011470:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011474:	e7ba      	b.n	80113ec <__ieee754_rem_pio2+0x104>
 8011476:	4b3c      	ldr	r3, [pc, #240]	@ (8011568 <__ieee754_rem_pio2+0x280>)
 8011478:	429e      	cmp	r6, r3
 801147a:	d906      	bls.n	801148a <__ieee754_rem_pio2+0x1a2>
 801147c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011480:	ed80 7b02 	vstr	d7, [r0, #8]
 8011484:	ed80 7b00 	vstr	d7, [r0]
 8011488:	e740      	b.n	801130c <__ieee754_rem_pio2+0x24>
 801148a:	ee10 3a10 	vmov	r3, s0
 801148e:	1532      	asrs	r2, r6, #20
 8011490:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8011494:	4618      	mov	r0, r3
 8011496:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801149a:	ec41 0b17 	vmov	d7, r0, r1
 801149e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80114a2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8011550 <__ieee754_rem_pio2+0x268>
 80114a6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80114aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80114b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80114b6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80114ba:	a808      	add	r0, sp, #32
 80114bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80114c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114c4:	ed8d 6b04 	vstr	d6, [sp, #16]
 80114c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80114cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114d0:	2103      	movs	r1, #3
 80114d2:	ed30 7b02 	vldmdb	r0!, {d7}
 80114d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80114da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114de:	460b      	mov	r3, r1
 80114e0:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 80114e4:	d0f5      	beq.n	80114d2 <__ieee754_rem_pio2+0x1ea>
 80114e6:	4921      	ldr	r1, [pc, #132]	@ (801156c <__ieee754_rem_pio2+0x284>)
 80114e8:	9101      	str	r1, [sp, #4]
 80114ea:	2102      	movs	r1, #2
 80114ec:	9100      	str	r1, [sp, #0]
 80114ee:	a802      	add	r0, sp, #8
 80114f0:	4621      	mov	r1, r4
 80114f2:	f000 f8ed 	bl	80116d0 <__kernel_rem_pio2>
 80114f6:	2d00      	cmp	r5, #0
 80114f8:	f6bf af26 	bge.w	8011348 <__ieee754_rem_pio2+0x60>
 80114fc:	ed94 7b00 	vldr	d7, [r4]
 8011500:	eeb1 7b47 	vneg.f64	d7, d7
 8011504:	ed84 7b00 	vstr	d7, [r4]
 8011508:	ed94 7b02 	vldr	d7, [r4, #8]
 801150c:	eeb1 7b47 	vneg.f64	d7, d7
 8011510:	ed84 7b02 	vstr	d7, [r4, #8]
 8011514:	e79a      	b.n	801144c <__ieee754_rem_pio2+0x164>
 8011516:	bf00      	nop
 8011518:	54400000 	.word	0x54400000
 801151c:	3ff921fb 	.word	0x3ff921fb
 8011520:	1a626331 	.word	0x1a626331
 8011524:	3dd0b461 	.word	0x3dd0b461
 8011528:	1a600000 	.word	0x1a600000
 801152c:	3dd0b461 	.word	0x3dd0b461
 8011530:	2e037073 	.word	0x2e037073
 8011534:	3ba3198a 	.word	0x3ba3198a
 8011538:	6dc9c883 	.word	0x6dc9c883
 801153c:	3fe45f30 	.word	0x3fe45f30
 8011540:	2e000000 	.word	0x2e000000
 8011544:	3ba3198a 	.word	0x3ba3198a
 8011548:	252049c1 	.word	0x252049c1
 801154c:	397b839a 	.word	0x397b839a
 8011550:	00000000 	.word	0x00000000
 8011554:	41700000 	.word	0x41700000
 8011558:	3fe921fb 	.word	0x3fe921fb
 801155c:	4002d97b 	.word	0x4002d97b
 8011560:	413921fb 	.word	0x413921fb
 8011564:	080138a0 	.word	0x080138a0
 8011568:	7fefffff 	.word	0x7fefffff
 801156c:	08013920 	.word	0x08013920

08011570 <hypot>:
 8011570:	b508      	push	{r3, lr}
 8011572:	ed2d 8b06 	vpush	{d8-d10}
 8011576:	eeb0 ab40 	vmov.f64	d10, d0
 801157a:	eeb0 9b41 	vmov.f64	d9, d1
 801157e:	f000 fb23 	bl	8011bc8 <__ieee754_hypot>
 8011582:	eeb0 8b40 	vmov.f64	d8, d0
 8011586:	f000 f823 	bl	80115d0 <finite>
 801158a:	b978      	cbnz	r0, 80115ac <hypot+0x3c>
 801158c:	eeb0 0b4a 	vmov.f64	d0, d10
 8011590:	f000 f81e 	bl	80115d0 <finite>
 8011594:	b150      	cbz	r0, 80115ac <hypot+0x3c>
 8011596:	eeb0 0b49 	vmov.f64	d0, d9
 801159a:	f000 f819 	bl	80115d0 <finite>
 801159e:	b128      	cbz	r0, 80115ac <hypot+0x3c>
 80115a0:	f7ff f8aa 	bl	80106f8 <__errno>
 80115a4:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 80115b8 <hypot+0x48>
 80115a8:	2322      	movs	r3, #34	@ 0x22
 80115aa:	6003      	str	r3, [r0, #0]
 80115ac:	eeb0 0b48 	vmov.f64	d0, d8
 80115b0:	ecbd 8b06 	vpop	{d8-d10}
 80115b4:	bd08      	pop	{r3, pc}
 80115b6:	bf00      	nop
 80115b8:	00000000 	.word	0x00000000
 80115bc:	7ff00000 	.word	0x7ff00000

080115c0 <fabs>:
 80115c0:	ec51 0b10 	vmov	r0, r1, d0
 80115c4:	4602      	mov	r2, r0
 80115c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80115ca:	ec43 2b10 	vmov	d0, r2, r3
 80115ce:	4770      	bx	lr

080115d0 <finite>:
 80115d0:	b082      	sub	sp, #8
 80115d2:	ed8d 0b00 	vstr	d0, [sp]
 80115d6:	9801      	ldr	r0, [sp, #4]
 80115d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80115dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80115e0:	0fc0      	lsrs	r0, r0, #31
 80115e2:	b002      	add	sp, #8
 80115e4:	4770      	bx	lr

080115e6 <with_errno>:
 80115e6:	b510      	push	{r4, lr}
 80115e8:	ed2d 8b02 	vpush	{d8}
 80115ec:	eeb0 8b40 	vmov.f64	d8, d0
 80115f0:	4604      	mov	r4, r0
 80115f2:	f7ff f881 	bl	80106f8 <__errno>
 80115f6:	eeb0 0b48 	vmov.f64	d0, d8
 80115fa:	ecbd 8b02 	vpop	{d8}
 80115fe:	6004      	str	r4, [r0, #0]
 8011600:	bd10      	pop	{r4, pc}

08011602 <xflow>:
 8011602:	b082      	sub	sp, #8
 8011604:	b158      	cbz	r0, 801161e <xflow+0x1c>
 8011606:	eeb1 7b40 	vneg.f64	d7, d0
 801160a:	ed8d 7b00 	vstr	d7, [sp]
 801160e:	ed9d 7b00 	vldr	d7, [sp]
 8011612:	2022      	movs	r0, #34	@ 0x22
 8011614:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011618:	b002      	add	sp, #8
 801161a:	f7ff bfe4 	b.w	80115e6 <with_errno>
 801161e:	eeb0 7b40 	vmov.f64	d7, d0
 8011622:	e7f2      	b.n	801160a <xflow+0x8>
 8011624:	0000      	movs	r0, r0
	...

08011628 <__math_uflow>:
 8011628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011630 <__math_uflow+0x8>
 801162c:	f7ff bfe9 	b.w	8011602 <xflow>
 8011630:	00000000 	.word	0x00000000
 8011634:	10000000 	.word	0x10000000

08011638 <__math_oflow>:
 8011638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011640 <__math_oflow+0x8>
 801163c:	f7ff bfe1 	b.w	8011602 <xflow>
 8011640:	00000000 	.word	0x00000000
 8011644:	70000000 	.word	0x70000000

08011648 <__math_divzero>:
 8011648:	b082      	sub	sp, #8
 801164a:	2800      	cmp	r0, #0
 801164c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8011650:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8011654:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8011658:	ed8d 7b00 	vstr	d7, [sp]
 801165c:	ed9d 0b00 	vldr	d0, [sp]
 8011660:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8011670 <__math_divzero+0x28>
 8011664:	2022      	movs	r0, #34	@ 0x22
 8011666:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801166a:	b002      	add	sp, #8
 801166c:	f7ff bfbb 	b.w	80115e6 <with_errno>
	...

08011678 <__math_invalid>:
 8011678:	eeb0 7b40 	vmov.f64	d7, d0
 801167c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011684:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011688:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801168c:	d602      	bvs.n	8011694 <__math_invalid+0x1c>
 801168e:	2021      	movs	r0, #33	@ 0x21
 8011690:	f7ff bfa9 	b.w	80115e6 <with_errno>
 8011694:	4770      	bx	lr

08011696 <__math_check_uflow>:
 8011696:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801169e:	d102      	bne.n	80116a6 <__math_check_uflow+0x10>
 80116a0:	2022      	movs	r0, #34	@ 0x22
 80116a2:	f7ff bfa0 	b.w	80115e6 <with_errno>
 80116a6:	4770      	bx	lr

080116a8 <__math_check_oflow>:
 80116a8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80116c8 <__math_check_oflow+0x20>
 80116ac:	eeb0 7bc0 	vabs.f64	d7, d0
 80116b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80116b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b8:	dd02      	ble.n	80116c0 <__math_check_oflow+0x18>
 80116ba:	2022      	movs	r0, #34	@ 0x22
 80116bc:	f7ff bf93 	b.w	80115e6 <with_errno>
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	f3af 8000 	nop.w
 80116c8:	ffffffff 	.word	0xffffffff
 80116cc:	7fefffff 	.word	0x7fefffff

080116d0 <__kernel_rem_pio2>:
 80116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	ed2d 8b06 	vpush	{d8-d10}
 80116d8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 80116dc:	469b      	mov	fp, r3
 80116de:	9001      	str	r0, [sp, #4]
 80116e0:	4bbb      	ldr	r3, [pc, #748]	@ (80119d0 <__kernel_rem_pio2+0x300>)
 80116e2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 80116e4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 80116e8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80116ec:	f112 0f14 	cmn.w	r2, #20
 80116f0:	bfa8      	it	ge
 80116f2:	1ed3      	subge	r3, r2, #3
 80116f4:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 80116f8:	bfb8      	it	lt
 80116fa:	2300      	movlt	r3, #0
 80116fc:	f06f 0517 	mvn.w	r5, #23
 8011700:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80119b8 <__kernel_rem_pio2+0x2e8>
 8011704:	bfa4      	itt	ge
 8011706:	2018      	movge	r0, #24
 8011708:	fb93 f3f0 	sdivge	r3, r3, r0
 801170c:	fb03 5505 	mla	r5, r3, r5, r5
 8011710:	eba3 040a 	sub.w	r4, r3, sl
 8011714:	4415      	add	r5, r2
 8011716:	460f      	mov	r7, r1
 8011718:	eb09 060a 	add.w	r6, r9, sl
 801171c:	a81a      	add	r0, sp, #104	@ 0x68
 801171e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8011722:	2200      	movs	r2, #0
 8011724:	42b2      	cmp	r2, r6
 8011726:	dd0e      	ble.n	8011746 <__kernel_rem_pio2+0x76>
 8011728:	aa1a      	add	r2, sp, #104	@ 0x68
 801172a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801172e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8011732:	2600      	movs	r6, #0
 8011734:	454e      	cmp	r6, r9
 8011736:	dc25      	bgt.n	8011784 <__kernel_rem_pio2+0xb4>
 8011738:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80119b8 <__kernel_rem_pio2+0x2e8>
 801173c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011740:	4614      	mov	r4, r2
 8011742:	2000      	movs	r0, #0
 8011744:	e015      	b.n	8011772 <__kernel_rem_pio2+0xa2>
 8011746:	42d4      	cmn	r4, r2
 8011748:	d409      	bmi.n	801175e <__kernel_rem_pio2+0x8e>
 801174a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801174e:	ee07 1a90 	vmov	s15, r1
 8011752:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011756:	eca0 7b02 	vstmia	r0!, {d7}
 801175a:	3201      	adds	r2, #1
 801175c:	e7e2      	b.n	8011724 <__kernel_rem_pio2+0x54>
 801175e:	eeb0 7b46 	vmov.f64	d7, d6
 8011762:	e7f8      	b.n	8011756 <__kernel_rem_pio2+0x86>
 8011764:	ecbc 5b02 	vldmia	ip!, {d5}
 8011768:	ed94 6b00 	vldr	d6, [r4]
 801176c:	3001      	adds	r0, #1
 801176e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011772:	4550      	cmp	r0, sl
 8011774:	f1a4 0408 	sub.w	r4, r4, #8
 8011778:	ddf4      	ble.n	8011764 <__kernel_rem_pio2+0x94>
 801177a:	ecae 7b02 	vstmia	lr!, {d7}
 801177e:	3601      	adds	r6, #1
 8011780:	3208      	adds	r2, #8
 8011782:	e7d7      	b.n	8011734 <__kernel_rem_pio2+0x64>
 8011784:	aa06      	add	r2, sp, #24
 8011786:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80119c0 <__kernel_rem_pio2+0x2f0>
 801178a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80119c8 <__kernel_rem_pio2+0x2f8>
 801178e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8011792:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8011796:	9203      	str	r2, [sp, #12]
 8011798:	9302      	str	r3, [sp, #8]
 801179a:	464c      	mov	r4, r9
 801179c:	00e3      	lsls	r3, r4, #3
 801179e:	9304      	str	r3, [sp, #16]
 80117a0:	ab92      	add	r3, sp, #584	@ 0x248
 80117a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80117a6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80117aa:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80117ac:	ab06      	add	r3, sp, #24
 80117ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80117b2:	461e      	mov	r6, r3
 80117b4:	4620      	mov	r0, r4
 80117b6:	2800      	cmp	r0, #0
 80117b8:	f1a2 0208 	sub.w	r2, r2, #8
 80117bc:	dc4a      	bgt.n	8011854 <__kernel_rem_pio2+0x184>
 80117be:	4628      	mov	r0, r5
 80117c0:	9305      	str	r3, [sp, #20]
 80117c2:	f000 fab5 	bl	8011d30 <scalbn>
 80117c6:	eeb0 8b40 	vmov.f64	d8, d0
 80117ca:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80117ce:	ee28 0b00 	vmul.f64	d0, d8, d0
 80117d2:	f7ff fc51 	bl	8011078 <floor>
 80117d6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80117da:	eea0 8b47 	vfms.f64	d8, d0, d7
 80117de:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80117e2:	2d00      	cmp	r5, #0
 80117e4:	ee17 8a90 	vmov	r8, s15
 80117e8:	9b05      	ldr	r3, [sp, #20]
 80117ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80117ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 80117f2:	dd41      	ble.n	8011878 <__kernel_rem_pio2+0x1a8>
 80117f4:	1e60      	subs	r0, r4, #1
 80117f6:	aa06      	add	r2, sp, #24
 80117f8:	f1c5 0c18 	rsb	ip, r5, #24
 80117fc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8011800:	fa46 f20c 	asr.w	r2, r6, ip
 8011804:	4490      	add	r8, r2
 8011806:	fa02 f20c 	lsl.w	r2, r2, ip
 801180a:	1ab6      	subs	r6, r6, r2
 801180c:	aa06      	add	r2, sp, #24
 801180e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8011812:	f1c5 0217 	rsb	r2, r5, #23
 8011816:	4116      	asrs	r6, r2
 8011818:	2e00      	cmp	r6, #0
 801181a:	dd3c      	ble.n	8011896 <__kernel_rem_pio2+0x1c6>
 801181c:	f04f 0c00 	mov.w	ip, #0
 8011820:	f108 0801 	add.w	r8, r8, #1
 8011824:	4660      	mov	r0, ip
 8011826:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801182a:	4564      	cmp	r4, ip
 801182c:	dc66      	bgt.n	80118fc <__kernel_rem_pio2+0x22c>
 801182e:	2d00      	cmp	r5, #0
 8011830:	dd03      	ble.n	801183a <__kernel_rem_pio2+0x16a>
 8011832:	2d01      	cmp	r5, #1
 8011834:	d072      	beq.n	801191c <__kernel_rem_pio2+0x24c>
 8011836:	2d02      	cmp	r5, #2
 8011838:	d07a      	beq.n	8011930 <__kernel_rem_pio2+0x260>
 801183a:	2e02      	cmp	r6, #2
 801183c:	d12b      	bne.n	8011896 <__kernel_rem_pio2+0x1c6>
 801183e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8011842:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011846:	b330      	cbz	r0, 8011896 <__kernel_rem_pio2+0x1c6>
 8011848:	4628      	mov	r0, r5
 801184a:	f000 fa71 	bl	8011d30 <scalbn>
 801184e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011852:	e020      	b.n	8011896 <__kernel_rem_pio2+0x1c6>
 8011854:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011858:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801185c:	3801      	subs	r0, #1
 801185e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011862:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011866:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801186a:	eca6 0a01 	vstmia	r6!, {s0}
 801186e:	ed92 0b00 	vldr	d0, [r2]
 8011872:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011876:	e79e      	b.n	80117b6 <__kernel_rem_pio2+0xe6>
 8011878:	d105      	bne.n	8011886 <__kernel_rem_pio2+0x1b6>
 801187a:	1e62      	subs	r2, r4, #1
 801187c:	a906      	add	r1, sp, #24
 801187e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8011882:	15f6      	asrs	r6, r6, #23
 8011884:	e7c8      	b.n	8011818 <__kernel_rem_pio2+0x148>
 8011886:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801188a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011892:	da31      	bge.n	80118f8 <__kernel_rem_pio2+0x228>
 8011894:	2600      	movs	r6, #0
 8011896:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189e:	f040 809b 	bne.w	80119d8 <__kernel_rem_pio2+0x308>
 80118a2:	1e62      	subs	r2, r4, #1
 80118a4:	2000      	movs	r0, #0
 80118a6:	454a      	cmp	r2, r9
 80118a8:	da49      	bge.n	801193e <__kernel_rem_pio2+0x26e>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d062      	beq.n	8011974 <__kernel_rem_pio2+0x2a4>
 80118ae:	3c01      	subs	r4, #1
 80118b0:	ab06      	add	r3, sp, #24
 80118b2:	3d18      	subs	r5, #24
 80118b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d0f8      	beq.n	80118ae <__kernel_rem_pio2+0x1de>
 80118bc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80118c0:	4628      	mov	r0, r5
 80118c2:	f000 fa35 	bl	8011d30 <scalbn>
 80118c6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80119c0 <__kernel_rem_pio2+0x2f0>
 80118ca:	1c62      	adds	r2, r4, #1
 80118cc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80118ce:	00d3      	lsls	r3, r2, #3
 80118d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80118d4:	4622      	mov	r2, r4
 80118d6:	2a00      	cmp	r2, #0
 80118d8:	f280 80a8 	bge.w	8011a2c <__kernel_rem_pio2+0x35c>
 80118dc:	4622      	mov	r2, r4
 80118de:	2a00      	cmp	r2, #0
 80118e0:	f2c0 80c6 	blt.w	8011a70 <__kernel_rem_pio2+0x3a0>
 80118e4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80118e6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80118ea:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80119b8 <__kernel_rem_pio2+0x2e8>
 80118ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80119d4 <__kernel_rem_pio2+0x304>
 80118f2:	2000      	movs	r0, #0
 80118f4:	1aa1      	subs	r1, r4, r2
 80118f6:	e0b0      	b.n	8011a5a <__kernel_rem_pio2+0x38a>
 80118f8:	2602      	movs	r6, #2
 80118fa:	e78f      	b.n	801181c <__kernel_rem_pio2+0x14c>
 80118fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011900:	b948      	cbnz	r0, 8011916 <__kernel_rem_pio2+0x246>
 8011902:	b122      	cbz	r2, 801190e <__kernel_rem_pio2+0x23e>
 8011904:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8011908:	f843 2c04 	str.w	r2, [r3, #-4]
 801190c:	2201      	movs	r2, #1
 801190e:	f10c 0c01 	add.w	ip, ip, #1
 8011912:	4610      	mov	r0, r2
 8011914:	e789      	b.n	801182a <__kernel_rem_pio2+0x15a>
 8011916:	ebae 0202 	sub.w	r2, lr, r2
 801191a:	e7f5      	b.n	8011908 <__kernel_rem_pio2+0x238>
 801191c:	1e62      	subs	r2, r4, #1
 801191e:	ab06      	add	r3, sp, #24
 8011920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011924:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011928:	a906      	add	r1, sp, #24
 801192a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801192e:	e784      	b.n	801183a <__kernel_rem_pio2+0x16a>
 8011930:	1e62      	subs	r2, r4, #1
 8011932:	ab06      	add	r3, sp, #24
 8011934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011938:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801193c:	e7f4      	b.n	8011928 <__kernel_rem_pio2+0x258>
 801193e:	ab06      	add	r3, sp, #24
 8011940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011944:	3a01      	subs	r2, #1
 8011946:	4318      	orrs	r0, r3
 8011948:	e7ad      	b.n	80118a6 <__kernel_rem_pio2+0x1d6>
 801194a:	3301      	adds	r3, #1
 801194c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011950:	2800      	cmp	r0, #0
 8011952:	d0fa      	beq.n	801194a <__kernel_rem_pio2+0x27a>
 8011954:	9a04      	ldr	r2, [sp, #16]
 8011956:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801195a:	446a      	add	r2, sp
 801195c:	eb04 000b 	add.w	r0, r4, fp
 8011960:	a91a      	add	r1, sp, #104	@ 0x68
 8011962:	1c66      	adds	r6, r4, #1
 8011964:	3a98      	subs	r2, #152	@ 0x98
 8011966:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801196a:	4423      	add	r3, r4
 801196c:	42b3      	cmp	r3, r6
 801196e:	da04      	bge.n	801197a <__kernel_rem_pio2+0x2aa>
 8011970:	461c      	mov	r4, r3
 8011972:	e713      	b.n	801179c <__kernel_rem_pio2+0xcc>
 8011974:	9a03      	ldr	r2, [sp, #12]
 8011976:	2301      	movs	r3, #1
 8011978:	e7e8      	b.n	801194c <__kernel_rem_pio2+0x27c>
 801197a:	9902      	ldr	r1, [sp, #8]
 801197c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011980:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8011984:	9104      	str	r1, [sp, #16]
 8011986:	ee07 1a90 	vmov	s15, r1
 801198a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801198e:	2400      	movs	r4, #0
 8011990:	eca0 7b02 	vstmia	r0!, {d7}
 8011994:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80119b8 <__kernel_rem_pio2+0x2e8>
 8011998:	4686      	mov	lr, r0
 801199a:	4554      	cmp	r4, sl
 801199c:	dd03      	ble.n	80119a6 <__kernel_rem_pio2+0x2d6>
 801199e:	eca2 7b02 	vstmia	r2!, {d7}
 80119a2:	3601      	adds	r6, #1
 80119a4:	e7e2      	b.n	801196c <__kernel_rem_pio2+0x29c>
 80119a6:	ecbc 5b02 	vldmia	ip!, {d5}
 80119aa:	ed3e 6b02 	vldmdb	lr!, {d6}
 80119ae:	3401      	adds	r4, #1
 80119b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80119b4:	e7f1      	b.n	801199a <__kernel_rem_pio2+0x2ca>
 80119b6:	bf00      	nop
	...
 80119c4:	3e700000 	.word	0x3e700000
 80119c8:	00000000 	.word	0x00000000
 80119cc:	41700000 	.word	0x41700000
 80119d0:	080142d8 	.word	0x080142d8
 80119d4:	08014298 	.word	0x08014298
 80119d8:	4268      	negs	r0, r5
 80119da:	eeb0 0b48 	vmov.f64	d0, d8
 80119de:	f000 f9a7 	bl	8011d30 <scalbn>
 80119e2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8011bb0 <__kernel_rem_pio2+0x4e0>
 80119e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80119ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ee:	db17      	blt.n	8011a20 <__kernel_rem_pio2+0x350>
 80119f0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8011bb8 <__kernel_rem_pio2+0x4e8>
 80119f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80119f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80119fc:	aa06      	add	r2, sp, #24
 80119fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011a02:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011a06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011a0a:	3518      	adds	r5, #24
 8011a0c:	ee10 3a10 	vmov	r3, s0
 8011a10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011a14:	ee17 3a10 	vmov	r3, s14
 8011a18:	3401      	adds	r4, #1
 8011a1a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011a1e:	e74d      	b.n	80118bc <__kernel_rem_pio2+0x1ec>
 8011a20:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011a24:	aa06      	add	r2, sp, #24
 8011a26:	ee10 3a10 	vmov	r3, s0
 8011a2a:	e7f6      	b.n	8011a1a <__kernel_rem_pio2+0x34a>
 8011a2c:	a806      	add	r0, sp, #24
 8011a2e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011a32:	9001      	str	r0, [sp, #4]
 8011a34:	ee07 0a90 	vmov	s15, r0
 8011a38:	3a01      	subs	r2, #1
 8011a3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011a3e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011a42:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011a46:	ed21 7b02 	vstmdb	r1!, {d7}
 8011a4a:	e744      	b.n	80118d6 <__kernel_rem_pio2+0x206>
 8011a4c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011a50:	ecb5 6b02 	vldmia	r5!, {d6}
 8011a54:	3001      	adds	r0, #1
 8011a56:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011a5a:	4548      	cmp	r0, r9
 8011a5c:	dc01      	bgt.n	8011a62 <__kernel_rem_pio2+0x392>
 8011a5e:	4281      	cmp	r1, r0
 8011a60:	daf4      	bge.n	8011a4c <__kernel_rem_pio2+0x37c>
 8011a62:	a842      	add	r0, sp, #264	@ 0x108
 8011a64:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011a68:	ed81 7b00 	vstr	d7, [r1]
 8011a6c:	3a01      	subs	r2, #1
 8011a6e:	e736      	b.n	80118de <__kernel_rem_pio2+0x20e>
 8011a70:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8011a72:	2a02      	cmp	r2, #2
 8011a74:	dc0a      	bgt.n	8011a8c <__kernel_rem_pio2+0x3bc>
 8011a76:	2a00      	cmp	r2, #0
 8011a78:	dc2d      	bgt.n	8011ad6 <__kernel_rem_pio2+0x406>
 8011a7a:	d046      	beq.n	8011b0a <__kernel_rem_pio2+0x43a>
 8011a7c:	f008 0007 	and.w	r0, r8, #7
 8011a80:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8011a84:	ecbd 8b06 	vpop	{d8-d10}
 8011a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a8c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8011a8e:	2a03      	cmp	r2, #3
 8011a90:	d1f4      	bne.n	8011a7c <__kernel_rem_pio2+0x3ac>
 8011a92:	a942      	add	r1, sp, #264	@ 0x108
 8011a94:	f1a3 0208 	sub.w	r2, r3, #8
 8011a98:	440a      	add	r2, r1
 8011a9a:	4611      	mov	r1, r2
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	f1a1 0108 	sub.w	r1, r1, #8
 8011aa4:	dc52      	bgt.n	8011b4c <__kernel_rem_pio2+0x47c>
 8011aa6:	4621      	mov	r1, r4
 8011aa8:	2901      	cmp	r1, #1
 8011aaa:	f1a2 0208 	sub.w	r2, r2, #8
 8011aae:	dc5d      	bgt.n	8011b6c <__kernel_rem_pio2+0x49c>
 8011ab0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8011bc0 <__kernel_rem_pio2+0x4f0>
 8011ab4:	aa42      	add	r2, sp, #264	@ 0x108
 8011ab6:	4413      	add	r3, r2
 8011ab8:	2c01      	cmp	r4, #1
 8011aba:	dc67      	bgt.n	8011b8c <__kernel_rem_pio2+0x4bc>
 8011abc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8011ac0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8011ac4:	2e00      	cmp	r6, #0
 8011ac6:	d167      	bne.n	8011b98 <__kernel_rem_pio2+0x4c8>
 8011ac8:	ed87 5b00 	vstr	d5, [r7]
 8011acc:	ed87 6b02 	vstr	d6, [r7, #8]
 8011ad0:	ed87 7b04 	vstr	d7, [r7, #16]
 8011ad4:	e7d2      	b.n	8011a7c <__kernel_rem_pio2+0x3ac>
 8011ad6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8011bc0 <__kernel_rem_pio2+0x4f0>
 8011ada:	aa42      	add	r2, sp, #264	@ 0x108
 8011adc:	4413      	add	r3, r2
 8011ade:	4622      	mov	r2, r4
 8011ae0:	2a00      	cmp	r2, #0
 8011ae2:	da24      	bge.n	8011b2e <__kernel_rem_pio2+0x45e>
 8011ae4:	b34e      	cbz	r6, 8011b3a <__kernel_rem_pio2+0x46a>
 8011ae6:	eeb1 7b46 	vneg.f64	d7, d6
 8011aea:	ed87 7b00 	vstr	d7, [r7]
 8011aee:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8011af2:	aa44      	add	r2, sp, #272	@ 0x110
 8011af4:	2301      	movs	r3, #1
 8011af6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011afa:	429c      	cmp	r4, r3
 8011afc:	da20      	bge.n	8011b40 <__kernel_rem_pio2+0x470>
 8011afe:	b10e      	cbz	r6, 8011b04 <__kernel_rem_pio2+0x434>
 8011b00:	eeb1 7b47 	vneg.f64	d7, d7
 8011b04:	ed87 7b02 	vstr	d7, [r7, #8]
 8011b08:	e7b8      	b.n	8011a7c <__kernel_rem_pio2+0x3ac>
 8011b0a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8011bc0 <__kernel_rem_pio2+0x4f0>
 8011b0e:	aa42      	add	r2, sp, #264	@ 0x108
 8011b10:	4413      	add	r3, r2
 8011b12:	2c00      	cmp	r4, #0
 8011b14:	da05      	bge.n	8011b22 <__kernel_rem_pio2+0x452>
 8011b16:	b10e      	cbz	r6, 8011b1c <__kernel_rem_pio2+0x44c>
 8011b18:	eeb1 7b47 	vneg.f64	d7, d7
 8011b1c:	ed87 7b00 	vstr	d7, [r7]
 8011b20:	e7ac      	b.n	8011a7c <__kernel_rem_pio2+0x3ac>
 8011b22:	ed33 6b02 	vldmdb	r3!, {d6}
 8011b26:	3c01      	subs	r4, #1
 8011b28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b2c:	e7f1      	b.n	8011b12 <__kernel_rem_pio2+0x442>
 8011b2e:	ed33 7b02 	vldmdb	r3!, {d7}
 8011b32:	3a01      	subs	r2, #1
 8011b34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011b38:	e7d2      	b.n	8011ae0 <__kernel_rem_pio2+0x410>
 8011b3a:	eeb0 7b46 	vmov.f64	d7, d6
 8011b3e:	e7d4      	b.n	8011aea <__kernel_rem_pio2+0x41a>
 8011b40:	ecb2 6b02 	vldmia	r2!, {d6}
 8011b44:	3301      	adds	r3, #1
 8011b46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b4a:	e7d6      	b.n	8011afa <__kernel_rem_pio2+0x42a>
 8011b4c:	ed91 7b00 	vldr	d7, [r1]
 8011b50:	ed91 5b02 	vldr	d5, [r1, #8]
 8011b54:	3801      	subs	r0, #1
 8011b56:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011b5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b5e:	ed81 6b00 	vstr	d6, [r1]
 8011b62:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011b66:	ed81 7b02 	vstr	d7, [r1, #8]
 8011b6a:	e798      	b.n	8011a9e <__kernel_rem_pio2+0x3ce>
 8011b6c:	ed92 7b00 	vldr	d7, [r2]
 8011b70:	ed92 5b02 	vldr	d5, [r2, #8]
 8011b74:	3901      	subs	r1, #1
 8011b76:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011b7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011b7e:	ed82 6b00 	vstr	d6, [r2]
 8011b82:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011b86:	ed82 7b02 	vstr	d7, [r2, #8]
 8011b8a:	e78d      	b.n	8011aa8 <__kernel_rem_pio2+0x3d8>
 8011b8c:	ed33 6b02 	vldmdb	r3!, {d6}
 8011b90:	3c01      	subs	r4, #1
 8011b92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b96:	e78f      	b.n	8011ab8 <__kernel_rem_pio2+0x3e8>
 8011b98:	eeb1 5b45 	vneg.f64	d5, d5
 8011b9c:	eeb1 6b46 	vneg.f64	d6, d6
 8011ba0:	ed87 5b00 	vstr	d5, [r7]
 8011ba4:	eeb1 7b47 	vneg.f64	d7, d7
 8011ba8:	ed87 6b02 	vstr	d6, [r7, #8]
 8011bac:	e790      	b.n	8011ad0 <__kernel_rem_pio2+0x400>
 8011bae:	bf00      	nop
 8011bb0:	00000000 	.word	0x00000000
 8011bb4:	41700000 	.word	0x41700000
 8011bb8:	00000000 	.word	0x00000000
 8011bbc:	3e700000 	.word	0x3e700000
	...

08011bc8 <__ieee754_hypot>:
 8011bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bca:	ec51 0b10 	vmov	r0, r1, d0
 8011bce:	ec53 2b11 	vmov	r2, r3, d1
 8011bd2:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8011bd6:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8011bda:	42a5      	cmp	r5, r4
 8011bdc:	da05      	bge.n	8011bea <__ieee754_hypot+0x22>
 8011bde:	462e      	mov	r6, r5
 8011be0:	4625      	mov	r5, r4
 8011be2:	4634      	mov	r4, r6
 8011be4:	4606      	mov	r6, r0
 8011be6:	4610      	mov	r0, r2
 8011be8:	4632      	mov	r2, r6
 8011bea:	4623      	mov	r3, r4
 8011bec:	ec43 2b14 	vmov	d4, r2, r3
 8011bf0:	1b2b      	subs	r3, r5, r4
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8011bf8:	ec41 0b10 	vmov	d0, r0, r1
 8011bfc:	dd02      	ble.n	8011c04 <__ieee754_hypot+0x3c>
 8011bfe:	ee30 0b04 	vadd.f64	d0, d0, d4
 8011c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c04:	4b46      	ldr	r3, [pc, #280]	@ (8011d20 <__ieee754_hypot+0x158>)
 8011c06:	429d      	cmp	r5, r3
 8011c08:	dd58      	ble.n	8011cbc <__ieee754_hypot+0xf4>
 8011c0a:	4b46      	ldr	r3, [pc, #280]	@ (8011d24 <__ieee754_hypot+0x15c>)
 8011c0c:	429d      	cmp	r5, r3
 8011c0e:	dd0f      	ble.n	8011c30 <__ieee754_hypot+0x68>
 8011c10:	ee14 3a10 	vmov	r3, s8
 8011c14:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8011c18:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011c1c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8011c20:	4305      	orrs	r5, r0
 8011c22:	bf18      	it	ne
 8011c24:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8011c28:	431c      	orrs	r4, r3
 8011c2a:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8011c2e:	e7e8      	b.n	8011c02 <__ieee754_hypot+0x3a>
 8011c30:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8011c34:	4602      	mov	r2, r0
 8011c36:	462b      	mov	r3, r5
 8011c38:	ec43 2b10 	vmov	d0, r2, r3
 8011c3c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8011c40:	ec53 2b14 	vmov	r2, r3, d4
 8011c44:	4623      	mov	r3, r4
 8011c46:	ec43 2b14 	vmov	d4, r2, r3
 8011c4a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8011c4e:	4b36      	ldr	r3, [pc, #216]	@ (8011d28 <__ieee754_hypot+0x160>)
 8011c50:	429c      	cmp	r4, r3
 8011c52:	dc0e      	bgt.n	8011c72 <__ieee754_hypot+0xaa>
 8011c54:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8011c58:	da32      	bge.n	8011cc0 <__ieee754_hypot+0xf8>
 8011c5a:	ee14 3a10 	vmov	r3, s8
 8011c5e:	4323      	orrs	r3, r4
 8011c60:	d0cf      	beq.n	8011c02 <__ieee754_hypot+0x3a>
 8011c62:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8011d18 <__ieee754_hypot+0x150>
 8011c66:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8011c6a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8011c6e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011c72:	ee30 5b44 	vsub.f64	d5, d0, d4
 8011c76:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8011c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7e:	f04f 0200 	mov.w	r2, #0
 8011c82:	d52e      	bpl.n	8011ce2 <__ieee754_hypot+0x11a>
 8011c84:	462b      	mov	r3, r5
 8011c86:	ec43 2b17 	vmov	d7, r2, r3
 8011c8a:	ee30 6b07 	vadd.f64	d6, d0, d7
 8011c8e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011c92:	ee26 0b00 	vmul.f64	d0, d6, d0
 8011c96:	eea4 0b04 	vfma.f64	d0, d4, d4
 8011c9a:	eea7 0b07 	vfma.f64	d0, d7, d7
 8011c9e:	f000 f8c5 	bl	8011e2c <__ieee754_sqrt>
 8011ca2:	2e00      	cmp	r6, #0
 8011ca4:	d0ad      	beq.n	8011c02 <__ieee754_hypot+0x3a>
 8011ca6:	0533      	lsls	r3, r6, #20
 8011ca8:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8011cac:	2000      	movs	r0, #0
 8011cae:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8011cb2:	ec41 0b17 	vmov	d7, r0, r1
 8011cb6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011cba:	e7a2      	b.n	8011c02 <__ieee754_hypot+0x3a>
 8011cbc:	2600      	movs	r6, #0
 8011cbe:	e7c6      	b.n	8011c4e <__ieee754_hypot+0x86>
 8011cc0:	ec53 2b10 	vmov	r2, r3, d0
 8011cc4:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8011cc8:	462b      	mov	r3, r5
 8011cca:	ec43 2b10 	vmov	d0, r2, r3
 8011cce:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8011cd2:	ec53 2b14 	vmov	r2, r3, d4
 8011cd6:	4623      	mov	r3, r4
 8011cd8:	ec43 2b14 	vmov	d4, r2, r3
 8011cdc:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8011ce0:	e7c7      	b.n	8011c72 <__ieee754_hypot+0xaa>
 8011ce2:	4623      	mov	r3, r4
 8011ce4:	ec43 2b16 	vmov	d6, r2, r3
 8011ce8:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8011cec:	2200      	movs	r2, #0
 8011cee:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8011cf2:	ec43 2b17 	vmov	d7, r2, r3
 8011cf6:	ee34 3b46 	vsub.f64	d3, d4, d6
 8011cfa:	eeb0 2b47 	vmov.f64	d2, d7
 8011cfe:	ee90 2b01 	vfnms.f64	d2, d0, d1
 8011d02:	ee24 0b02 	vmul.f64	d0, d4, d2
 8011d06:	eea3 0b07 	vfma.f64	d0, d3, d7
 8011d0a:	eea5 0b05 	vfma.f64	d0, d5, d5
 8011d0e:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011d12:	e7c4      	b.n	8011c9e <__ieee754_hypot+0xd6>
 8011d14:	f3af 8000 	nop.w
 8011d18:	00000000 	.word	0x00000000
 8011d1c:	7fd00000 	.word	0x7fd00000
 8011d20:	5f300000 	.word	0x5f300000
 8011d24:	7fefffff 	.word	0x7fefffff
 8011d28:	20afffff 	.word	0x20afffff
 8011d2c:	00000000 	.word	0x00000000

08011d30 <scalbn>:
 8011d30:	ee10 1a90 	vmov	r1, s1
 8011d34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d38:	b98b      	cbnz	r3, 8011d5e <scalbn+0x2e>
 8011d3a:	ee10 3a10 	vmov	r3, s0
 8011d3e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8011d42:	4319      	orrs	r1, r3
 8011d44:	d00a      	beq.n	8011d5c <scalbn+0x2c>
 8011d46:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011df8 <scalbn+0xc8>
 8011d4a:	4b37      	ldr	r3, [pc, #220]	@ (8011e28 <scalbn+0xf8>)
 8011d4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d50:	4298      	cmp	r0, r3
 8011d52:	da0b      	bge.n	8011d6c <scalbn+0x3c>
 8011d54:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011e00 <scalbn+0xd0>
 8011d58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011d5c:	4770      	bx	lr
 8011d5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d107      	bne.n	8011d76 <scalbn+0x46>
 8011d66:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011d6a:	4770      	bx	lr
 8011d6c:	ee10 1a90 	vmov	r1, s1
 8011d70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d74:	3b36      	subs	r3, #54	@ 0x36
 8011d76:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011d7a:	4290      	cmp	r0, r2
 8011d7c:	dd0d      	ble.n	8011d9a <scalbn+0x6a>
 8011d7e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8011e08 <scalbn+0xd8>
 8011d82:	ee10 3a90 	vmov	r3, s1
 8011d86:	eeb0 6b47 	vmov.f64	d6, d7
 8011d8a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8011e10 <scalbn+0xe0>
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011d94:	ee27 0b06 	vmul.f64	d0, d7, d6
 8011d98:	4770      	bx	lr
 8011d9a:	4418      	add	r0, r3
 8011d9c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8011da0:	4298      	cmp	r0, r3
 8011da2:	dcec      	bgt.n	8011d7e <scalbn+0x4e>
 8011da4:	2800      	cmp	r0, #0
 8011da6:	dd0a      	ble.n	8011dbe <scalbn+0x8e>
 8011da8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8011dac:	ec53 2b10 	vmov	r2, r3, d0
 8011db0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011db4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011db8:	ec43 2b10 	vmov	d0, r2, r3
 8011dbc:	4770      	bx	lr
 8011dbe:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8011dc2:	da09      	bge.n	8011dd8 <scalbn+0xa8>
 8011dc4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8011e00 <scalbn+0xd0>
 8011dc8:	ee10 3a90 	vmov	r3, s1
 8011dcc:	eeb0 6b47 	vmov.f64	d6, d7
 8011dd0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8011e18 <scalbn+0xe8>
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	e7db      	b.n	8011d90 <scalbn+0x60>
 8011dd8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8011ddc:	ec53 2b10 	vmov	r2, r3, d0
 8011de0:	3036      	adds	r0, #54	@ 0x36
 8011de2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8011de6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011dea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011e20 <scalbn+0xf0>
 8011dee:	ec43 2b10 	vmov	d0, r2, r3
 8011df2:	e7b1      	b.n	8011d58 <scalbn+0x28>
 8011df4:	f3af 8000 	nop.w
 8011df8:	00000000 	.word	0x00000000
 8011dfc:	43500000 	.word	0x43500000
 8011e00:	c2f8f359 	.word	0xc2f8f359
 8011e04:	01a56e1f 	.word	0x01a56e1f
 8011e08:	8800759c 	.word	0x8800759c
 8011e0c:	7e37e43c 	.word	0x7e37e43c
 8011e10:	8800759c 	.word	0x8800759c
 8011e14:	fe37e43c 	.word	0xfe37e43c
 8011e18:	c2f8f359 	.word	0xc2f8f359
 8011e1c:	81a56e1f 	.word	0x81a56e1f
 8011e20:	00000000 	.word	0x00000000
 8011e24:	3c900000 	.word	0x3c900000
 8011e28:	ffff3cb0 	.word	0xffff3cb0

08011e2c <__ieee754_sqrt>:
 8011e2c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011e30:	4770      	bx	lr
	...

08011e34 <_init>:
 8011e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e36:	bf00      	nop
 8011e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e3a:	bc08      	pop	{r3}
 8011e3c:	469e      	mov	lr, r3
 8011e3e:	4770      	bx	lr

08011e40 <_fini>:
 8011e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e42:	bf00      	nop
 8011e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e46:	bc08      	pop	{r3}
 8011e48:	469e      	mov	lr, r3
 8011e4a:	4770      	bx	lr
